
/Users/davidsalihu/Documents/GitHub/gx-firmware/target/2.1.0/boron/gx-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00014b00  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000e8b20  000e8b20  00018b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000e8b28  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000338  2003d6c0  000e8b2c  0002d6c0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000df8  2003d9f8  2003d9f8  0003d9f8  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000e8e64  000e8e64  00038e64  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000e8e90  000e8e90  00038e90  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   003522e6  00000000  00000000  00038e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00032ff7  00000000  00000000  0038b17a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00056acb  00000000  00000000  003be171  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00004108  00000000  00000000  00414c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 0000bb88  00000000  00000000  00418d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0005b94a  00000000  00000000  004248cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00088aca  00000000  00000000  00480216  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00123221  00000000  00000000  00508ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000c3a0  00000000  00000000  0062bf04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f011 fb15 	bl	e5660 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f011 fb37 	bl	e56b0 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003d6c0 	.word	0x2003d6c0
   d404c:	000e8b2c 	.word	0x000e8b2c
   d4050:	2003d9f8 	.word	0x2003d9f8
   d4054:	2003d9f8 	.word	0x2003d9f8
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f010 faab 	bl	e45bc <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000e8ad4 	.word	0x000e8ad4
   d4080:	000e8b20 	.word	0x000e8b20

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f00b b81c 	b.w	df0c0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f00b f801 	bl	df090 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f010 ba55 	b.w	e4540 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f00d b953 	b.w	e1340 <malloc>

000d409a <_Znaj>:
   d409a:	f00d b951 	b.w	e1340 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f00d b957 	b.w	e1350 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f00d b955 	b.w	e1350 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f00d f808 	bl	e10c4 <panic_>
  while (1);
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000e0d15 	.word	0x000e0d15

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <spiffs_cache_page_get>:
#include "spiffs_nucleus.h"

#if SPIFFS_CACHE

// returns cached page for give page index, or null if no such cached page
static spiffs_cache_page *spiffs_cache_page_get(spiffs *fs, spiffs_page_ix pix) {
   d40cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  spiffs_cache *cache = spiffs_get_cache(fs);
   d40ce:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
  if ((cache->cpage_use_map & cache->cpage_use_mask) == 0) return 0;
   d40d0:	e9d4 6302 	ldrd	r6, r3, [r4, #8]
   d40d4:	4033      	ands	r3, r6
static spiffs_cache_page *spiffs_cache_page_get(spiffs *fs, spiffs_page_ix pix) {
   d40d6:	4605      	mov	r5, r0
  if ((cache->cpage_use_map & cache->cpage_use_mask) == 0) return 0;
   d40d8:	d01c      	beq.n	d4114 <spiffs_cache_page_get+0x48>
  int i;
  for (i = 0; i < cache->cpage_count; i++) {
   d40da:	f894 c000 	ldrb.w	ip, [r4]
   d40de:	2200      	movs	r2, #0
    spiffs_cache_page *cp = spiffs_get_cache_page_hdr(fs, cache, i);
    if ((cache->cpage_use_map & (1<<i)) &&
   d40e0:	f04f 0e01 	mov.w	lr, #1
  for (i = 0; i < cache->cpage_count; i++) {
   d40e4:	4594      	cmp	ip, r2
   d40e6:	dc01      	bgt.n	d40ec <spiffs_cache_page_get+0x20>
  if ((cache->cpage_use_map & cache->cpage_use_mask) == 0) return 0;
   d40e8:	2000      	movs	r0, #0
   d40ea:	e010      	b.n	d410e <spiffs_cache_page_get+0x42>
    if ((cache->cpage_use_map & (1<<i)) &&
   d40ec:	fa0e f302 	lsl.w	r3, lr, r2
   d40f0:	4233      	tst	r3, r6
   d40f2:	d00d      	beq.n	d4110 <spiffs_cache_page_get+0x44>
    spiffs_cache_page *cp = spiffs_get_cache_page_hdr(fs, cache, i);
   d40f4:	69eb      	ldr	r3, [r5, #28]
   d40f6:	6927      	ldr	r7, [r4, #16]
   d40f8:	3314      	adds	r3, #20
   d40fa:	4353      	muls	r3, r2
   d40fc:	18f8      	adds	r0, r7, r3
    if ((cache->cpage_use_map & (1<<i)) &&
   d40fe:	56fb      	ldrsb	r3, [r7, r3]
   d4100:	2b00      	cmp	r3, #0
   d4102:	db05      	blt.n	d4110 <spiffs_cache_page_get+0x44>
        (cp->flags & SPIFFS_CACHE_FLAG_TYPE_WR) == 0 &&
   d4104:	8903      	ldrh	r3, [r0, #8]
   d4106:	428b      	cmp	r3, r1
   d4108:	d102      	bne.n	d4110 <spiffs_cache_page_get+0x44>
        cp->pix == pix ) {
      //SPIFFS_CACHE_DBG("CACHE_GET: have cache page "_SPIPRIi" for "_SPIPRIpg"\n", i, pix);
      cp->last_access = cache->last_access;
   d410a:	6863      	ldr	r3, [r4, #4]
   d410c:	6043      	str	r3, [r0, #4]
      return cp;
    }
  }
  //SPIFFS_CACHE_DBG("CACHE_GET: no cache for "_SPIPRIpg"\n", pix);
  return 0;
}
   d410e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for (i = 0; i < cache->cpage_count; i++) {
   d4110:	3201      	adds	r2, #1
   d4112:	e7e7      	b.n	d40e4 <spiffs_cache_page_get+0x18>
  if ((cache->cpage_use_map & cache->cpage_use_mask) == 0) return 0;
   d4114:	4618      	mov	r0, r3
   d4116:	e7fa      	b.n	d410e <spiffs_cache_page_get+0x42>

000d4118 <spiffs_cache_page_free>:

// frees cached page
static s32_t spiffs_cache_page_free(spiffs *fs, int ix, u8_t write_back) {
   d4118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  s32_t res = SPIFFS_OK;
  spiffs_cache *cache = spiffs_get_cache(fs);
   d411c:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
  spiffs_cache_page *cp = spiffs_get_cache_page_hdr(fs, cache, ix);
  if (cache->cpage_use_map & (1<<ix)) {
   d411e:	2401      	movs	r4, #1
   d4120:	68ab      	ldr	r3, [r5, #8]
   d4122:	408c      	lsls	r4, r1
   d4124:	4023      	ands	r3, r4
   d4126:	d026      	beq.n	d4176 <spiffs_cache_page_free+0x5e>
  spiffs_cache_page *cp = spiffs_get_cache_page_hdr(fs, cache, ix);
   d4128:	f8d0 e01c 	ldr.w	lr, [r0, #28]
   d412c:	692f      	ldr	r7, [r5, #16]
   d412e:	f10e 0614 	add.w	r6, lr, #20
   d4132:	434e      	muls	r6, r1
   d4134:	19b9      	adds	r1, r7, r6
    if (write_back &&
   d4136:	b1d2      	cbz	r2, d416e <spiffs_cache_page_free+0x56>
   d4138:	57ba      	ldrsb	r2, [r7, r6]
        (cp->flags & SPIFFS_CACHE_FLAG_TYPE_WR) == 0 &&
   d413a:	5dbb      	ldrb	r3, [r7, r6]
    if (write_back &&
   d413c:	2a00      	cmp	r2, #0
   d413e:	db16      	blt.n	d416e <spiffs_cache_page_free+0x56>
        (cp->flags & SPIFFS_CACHE_FLAG_TYPE_WR) == 0 &&
   d4140:	f013 0301 	ands.w	r3, r3, #1
   d4144:	d015      	beq.n	d4172 <spiffs_cache_page_free+0x5a>
        (cp->flags & SPIFFS_CACHE_FLAG_DIRTY)) {
      u8_t *mem =  spiffs_get_cache_page(fs, cache, ix);
      SPIFFS_CACHE_DBG("CACHE_FREE: write cache page "_SPIPRIi" pix "_SPIPRIpg"\n", ix, cp->pix);
      res = SPIFFS_HAL_WRITE(fs, SPIFFS_PAGE_TO_PADDR(fs, cp->pix), SPIFFS_CFG_LOG_PAGE_SZ(fs), mem);
   d4146:	f8b1 9008 	ldrh.w	r9, [r1, #8]
   d414a:	6901      	ldr	r1, [r0, #16]
   d414c:	f8d0 8004 	ldr.w	r8, [r0, #4]
      u8_t *mem =  spiffs_get_cache_page(fs, cache, ix);
   d4150:	f106 0314 	add.w	r3, r6, #20
      res = SPIFFS_HAL_WRITE(fs, SPIFFS_PAGE_TO_PADDR(fs, cp->pix), SPIFFS_CFG_LOG_PAGE_SZ(fs), mem);
   d4154:	443b      	add	r3, r7
   d4156:	4672      	mov	r2, lr
   d4158:	fb0e 1109 	mla	r1, lr, r9, r1
   d415c:	47c0      	blx	r8
    } else
#endif
    {
      SPIFFS_CACHE_DBG("CACHE_FREE: free cache page "_SPIPRIi" pix "_SPIPRIpg"\n", ix, cp->pix);
    }
    cache->cpage_use_map &= ~(1 << ix);
   d415e:	68ab      	ldr	r3, [r5, #8]
   d4160:	ea23 0404 	bic.w	r4, r3, r4
    cp->flags = 0;
   d4164:	2300      	movs	r3, #0
    cache->cpage_use_map &= ~(1 << ix);
   d4166:	60ac      	str	r4, [r5, #8]
    cp->flags = 0;
   d4168:	55bb      	strb	r3, [r7, r6]
  }

  return res;
}
   d416a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  s32_t res = SPIFFS_OK;
   d416e:	2000      	movs	r0, #0
   d4170:	e7f5      	b.n	d415e <spiffs_cache_page_free+0x46>
   d4172:	4618      	mov	r0, r3
   d4174:	e7f3      	b.n	d415e <spiffs_cache_page_free+0x46>
   d4176:	4618      	mov	r0, r3
  return res;
   d4178:	e7f7      	b.n	d416a <spiffs_cache_page_free+0x52>

000d417a <spiffs_cache_page_allocate>:

  return res;
}

// allocates a new cached page and returns it, or null if all cache pages are busy
static spiffs_cache_page *spiffs_cache_page_allocate(spiffs *fs) {
   d417a:	b570      	push	{r4, r5, r6, lr}
  spiffs_cache *cache = spiffs_get_cache(fs);
   d417c:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
  if (cache->cpage_use_map == 0xffffffff) {
   d417e:	688a      	ldr	r2, [r1, #8]
   d4180:	1c53      	adds	r3, r2, #1
   d4182:	d004      	beq.n	d418e <spiffs_cache_page_allocate+0x14>
    // out of cache memory
    return 0;
  }
  int i;
  for (i = 0; i < cache->cpage_count; i++) {
   d4184:	780d      	ldrb	r5, [r1, #0]
   d4186:	2300      	movs	r3, #0
    if ((cache->cpage_use_map & (1<<i)) == 0) {
   d4188:	2601      	movs	r6, #1
  for (i = 0; i < cache->cpage_count; i++) {
   d418a:	429d      	cmp	r5, r3
   d418c:	dc01      	bgt.n	d4192 <spiffs_cache_page_allocate+0x18>
    return 0;
   d418e:	2000      	movs	r0, #0
   d4190:	e00c      	b.n	d41ac <spiffs_cache_page_allocate+0x32>
    if ((cache->cpage_use_map & (1<<i)) == 0) {
   d4192:	fa06 f403 	lsl.w	r4, r6, r3
   d4196:	4222      	tst	r2, r4
   d4198:	d109      	bne.n	d41ae <spiffs_cache_page_allocate+0x34>
      spiffs_cache_page *cp = spiffs_get_cache_page_hdr(fs, cache, i);
   d419a:	69c0      	ldr	r0, [r0, #28]
   d419c:	690d      	ldr	r5, [r1, #16]
   d419e:	3014      	adds	r0, #20
   d41a0:	fb03 5000 	mla	r0, r3, r0, r5
      cache->cpage_use_map |= (1<<i);
   d41a4:	4322      	orrs	r2, r4
      cp->last_access = cache->last_access;
   d41a6:	684b      	ldr	r3, [r1, #4]
      cache->cpage_use_map |= (1<<i);
   d41a8:	608a      	str	r2, [r1, #8]
      cp->last_access = cache->last_access;
   d41aa:	6043      	str	r3, [r0, #4]
      return cp;
    }
  }
  // out of cache entries
  return 0;
}
   d41ac:	bd70      	pop	{r4, r5, r6, pc}
  for (i = 0; i < cache->cpage_count; i++) {
   d41ae:	3301      	adds	r3, #1
   d41b0:	e7eb      	b.n	d418a <spiffs_cache_page_allocate+0x10>

000d41b2 <spiffs_cache_page_remove_oldest.constprop.0>:
static s32_t spiffs_cache_page_remove_oldest(spiffs *fs, u8_t flag_mask, u8_t flags) {
   d41b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  spiffs_cache *cache = spiffs_get_cache(fs);
   d41b6:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
  if ((cache->cpage_use_map & cache->cpage_use_mask) != cache->cpage_use_mask) {
   d41b8:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   d41bc:	4393      	bics	r3, r2
   d41be:	d123      	bne.n	d4208 <spiffs_cache_page_remove_oldest.constprop.0+0x56>
  u32_t oldest_val = 0;
   d41c0:	2500      	movs	r5, #0
  for (i = 0; i < cache->cpage_count; i++) {
   d41c2:	f894 c000 	ldrb.w	ip, [r4]
  int cand_ix = -1;
   d41c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  for (i = 0; i < cache->cpage_count; i++) {
   d41ca:	462a      	mov	r2, r5
   d41cc:	4562      	cmp	r2, ip
   d41ce:	db06      	blt.n	d41de <spiffs_cache_page_remove_oldest.constprop.0+0x2c>
  if (cand_ix >= 0) {
   d41d0:	1c4b      	adds	r3, r1, #1
   d41d2:	d019      	beq.n	d4208 <spiffs_cache_page_remove_oldest.constprop.0+0x56>
}
   d41d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    res = spiffs_cache_page_free(fs, cand_ix, 1);
   d41d8:	2201      	movs	r2, #1
   d41da:	f7ff bf9d 	b.w	d4118 <spiffs_cache_page_free>
    spiffs_cache_page *cp = spiffs_get_cache_page_hdr(fs, cache, i);
   d41de:	69c3      	ldr	r3, [r0, #28]
   d41e0:	6927      	ldr	r7, [r4, #16]
   d41e2:	3314      	adds	r3, #20
   d41e4:	fb02 f803 	mul.w	r8, r2, r3
   d41e8:	eb07 0e08 	add.w	lr, r7, r8
    if ((cache->last_access - cp->last_access) > oldest_val &&
   d41ec:	6863      	ldr	r3, [r4, #4]
   d41ee:	f8de 6004 	ldr.w	r6, [lr, #4]
   d41f2:	1b9e      	subs	r6, r3, r6
   d41f4:	42ae      	cmp	r6, r5
   d41f6:	d905      	bls.n	d4204 <spiffs_cache_page_remove_oldest.constprop.0+0x52>
   d41f8:	f917 3008 	ldrsb.w	r3, [r7, r8]
   d41fc:	2b00      	cmp	r3, #0
   d41fe:	bfa4      	itt	ge
   d4200:	4635      	movge	r5, r6
   d4202:	4611      	movge	r1, r2
  for (i = 0; i < cache->cpage_count; i++) {
   d4204:	3201      	adds	r2, #1
   d4206:	e7e1      	b.n	d41cc <spiffs_cache_page_remove_oldest.constprop.0+0x1a>
}
   d4208:	2000      	movs	r0, #0
   d420a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d420e <spiffs_cache_drop_page>:

// drops the cache page for give page index
void spiffs_cache_drop_page(spiffs *fs, spiffs_page_ix pix) {
   d420e:	b510      	push	{r4, lr}
   d4210:	4604      	mov	r4, r0
  spiffs_cache_page *cp =  spiffs_cache_page_get(fs, pix);
   d4212:	f7ff ff5b 	bl	d40cc <spiffs_cache_page_get>
  if (cp) {
   d4216:	b130      	cbz	r0, d4226 <spiffs_cache_drop_page+0x18>
    spiffs_cache_page_free(fs, cp->ix, 0);
   d4218:	7841      	ldrb	r1, [r0, #1]
   d421a:	2200      	movs	r2, #0
   d421c:	4620      	mov	r0, r4
  }
}
   d421e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    spiffs_cache_page_free(fs, cp->ix, 0);
   d4222:	f7ff bf79 	b.w	d4118 <spiffs_cache_page_free>
}
   d4226:	bd10      	pop	{r4, pc}

000d4228 <spiffs_phys_rd>:
    spiffs *fs,
    u8_t op,
    spiffs_file fh,
    u32_t addr,
    u32_t len,
    u8_t *dst) {
   d4228:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d422c:	460e      	mov	r6, r1
  (void)fh;
  s32_t res = SPIFFS_OK;
  spiffs_cache *cache = spiffs_get_cache(fs);
  spiffs_cache_page *cp =  spiffs_cache_page_get(fs, SPIFFS_PADDR_TO_PAGE(fs, addr));
   d422e:	6901      	ldr	r1, [r0, #16]
  spiffs_cache *cache = spiffs_get_cache(fs);
   d4230:	f8d0 905c 	ldr.w	r9, [r0, #92]	; 0x5c
  spiffs_cache_page *cp =  spiffs_cache_page_get(fs, SPIFFS_PADDR_TO_PAGE(fs, addr));
   d4234:	1a59      	subs	r1, r3, r1
    u8_t *dst) {
   d4236:	461d      	mov	r5, r3
  spiffs_cache_page *cp =  spiffs_cache_page_get(fs, SPIFFS_PADDR_TO_PAGE(fs, addr));
   d4238:	69c3      	ldr	r3, [r0, #28]
   d423a:	fbb1 f1f3 	udiv	r1, r1, r3
   d423e:	b289      	uxth	r1, r1
    u8_t *dst) {
   d4240:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
   d4244:	4604      	mov	r4, r0
  spiffs_cache_page *cp =  spiffs_cache_page_get(fs, SPIFFS_PADDR_TO_PAGE(fs, addr));
   d4246:	f7ff ff41 	bl	d40cc <spiffs_cache_page_get>
  cache->last_access++;
   d424a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   d424e:	3301      	adds	r3, #1
   d4250:	f8c9 3004 	str.w	r3, [r9, #4]
  if (cp) {
   d4254:	b1e8      	cbz	r0, d4292 <spiffs_phys_rd+0x6a>
    // we've already got one, you see
#if SPIFFS_CACHE_STATS
    fs->cache_hits++;
   d4256:	6e63      	ldr	r3, [r4, #100]	; 0x64
   d4258:	3301      	adds	r3, #1
   d425a:	6663      	str	r3, [r4, #100]	; 0x64
#endif
    cp->last_access = cache->last_access;
   d425c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   d4260:	6043      	str	r3, [r0, #4]
    u8_t *mem =  spiffs_get_cache_page(fs, cache, cp->ix);
    _SPIFFS_MEMCPY(dst, &mem[SPIFFS_PADDR_TO_PAGE_OFFSET(fs, addr)], len);
   d4262:	6921      	ldr	r1, [r4, #16]
    u8_t *mem =  spiffs_get_cache_page(fs, cache, cp->ix);
   d4264:	69e2      	ldr	r2, [r4, #28]
    _SPIFFS_MEMCPY(dst, &mem[SPIFFS_PADDR_TO_PAGE_OFFSET(fs, addr)], len);
   d4266:	f8d9 3010 	ldr.w	r3, [r9, #16]
   d426a:	1a6d      	subs	r5, r5, r1
   d426c:	fbb5 f1f2 	udiv	r1, r5, r2
   d4270:	fb02 5111 	mls	r1, r2, r1, r5
    u8_t *mem =  spiffs_get_cache_page(fs, cache, cp->ix);
   d4274:	7845      	ldrb	r5, [r0, #1]
   d4276:	3214      	adds	r2, #20
    _SPIFFS_MEMCPY(dst, &mem[SPIFFS_PADDR_TO_PAGE_OFFSET(fs, addr)], len);
   d4278:	3114      	adds	r1, #20
   d427a:	fb02 1105 	mla	r1, r2, r5, r1
   d427e:	4419      	add	r1, r3
   d4280:	4652      	mov	r2, sl
   d4282:	4658      	mov	r0, fp
   d4284:	f011 f9ec 	bl	e5660 <memcpy>
  s32_t res = SPIFFS_OK;
   d4288:	2600      	movs	r6, #0
        res = res2;
      }
    }
  }
  return res;
}
   d428a:	4630      	mov	r0, r6
   d428c:	b001      	add	sp, #4
   d428e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((op & SPIFFS_OP_TYPE_MASK) == SPIFFS_OP_T_OBJ_LU2) {
   d4292:	f006 0603 	and.w	r6, r6, #3
   d4296:	2e01      	cmp	r6, #1
   d4298:	d109      	bne.n	d42ae <spiffs_phys_rd+0x86>
      return SPIFFS_HAL_READ(fs, addr, len, dst);
   d429a:	6826      	ldr	r6, [r4, #0]
   d429c:	465b      	mov	r3, fp
   d429e:	4652      	mov	r2, sl
   d42a0:	4629      	mov	r1, r5
   d42a2:	4620      	mov	r0, r4
   d42a4:	46b4      	mov	ip, r6
}
   d42a6:	b001      	add	sp, #4
   d42a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return SPIFFS_HAL_READ(fs, addr, len, dst);
   d42ac:	4760      	bx	ip
    fs->cache_misses++;
   d42ae:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   d42b0:	3301      	adds	r3, #1
   d42b2:	66a3      	str	r3, [r4, #104]	; 0x68
    res = spiffs_cache_page_remove_oldest(fs, SPIFFS_CACHE_FLAG_TYPE_WR, 0);
   d42b4:	4620      	mov	r0, r4
   d42b6:	f7ff ff7c 	bl	d41b2 <spiffs_cache_page_remove_oldest.constprop.0>
   d42ba:	4606      	mov	r6, r0
    cp = spiffs_cache_page_allocate(fs);
   d42bc:	4620      	mov	r0, r4
   d42be:	f7ff ff5c 	bl	d417a <spiffs_cache_page_allocate>
    if (cp) {
   d42c2:	4680      	mov	r8, r0
   d42c4:	b390      	cbz	r0, d432c <spiffs_phys_rd+0x104>
      cp->flags = SPIFFS_CACHE_FLAG_WRTHRU;
   d42c6:	2302      	movs	r3, #2
   d42c8:	7003      	strb	r3, [r0, #0]
      cp->pix = SPIFFS_PADDR_TO_PAGE(fs, addr);
   d42ca:	6923      	ldr	r3, [r4, #16]
   d42cc:	69e2      	ldr	r2, [r4, #28]
      s32_t res2 = SPIFFS_HAL_READ(fs,
   d42ce:	7841      	ldrb	r1, [r0, #1]
      cp->pix = SPIFFS_PADDR_TO_PAGE(fs, addr);
   d42d0:	1aeb      	subs	r3, r5, r3
   d42d2:	fbb3 f3f2 	udiv	r3, r3, r2
   d42d6:	8103      	strh	r3, [r0, #8]
      s32_t res2 = SPIFFS_HAL_READ(fs,
   d42d8:	69e2      	ldr	r2, [r4, #28]
   d42da:	f8d9 0010 	ldr.w	r0, [r9, #16]
   d42de:	f102 0314 	add.w	r3, r2, #20
   d42e2:	434b      	muls	r3, r1
   d42e4:	6921      	ldr	r1, [r4, #16]
   d42e6:	1a69      	subs	r1, r5, r1
   d42e8:	3314      	adds	r3, #20
   d42ea:	fbb1 f7f2 	udiv	r7, r1, r2
   d42ee:	fb02 1117 	mls	r1, r2, r7, r1
   d42f2:	4403      	add	r3, r0
   d42f4:	1a69      	subs	r1, r5, r1
   d42f6:	6827      	ldr	r7, [r4, #0]
   d42f8:	4620      	mov	r0, r4
   d42fa:	47b8      	blx	r7
      _SPIFFS_MEMCPY(dst, &mem[SPIFFS_PADDR_TO_PAGE_OFFSET(fs, addr)], len);
   d42fc:	6921      	ldr	r1, [r4, #16]
      u8_t *mem =  spiffs_get_cache_page(fs, cache, cp->ix);
   d42fe:	69e2      	ldr	r2, [r4, #28]
      _SPIFFS_MEMCPY(dst, &mem[SPIFFS_PADDR_TO_PAGE_OFFSET(fs, addr)], len);
   d4300:	f8d9 3010 	ldr.w	r3, [r9, #16]
   d4304:	1a6d      	subs	r5, r5, r1
   d4306:	fbb5 f1f2 	udiv	r1, r5, r2
   d430a:	fb02 5111 	mls	r1, r2, r1, r5
      u8_t *mem =  spiffs_get_cache_page(fs, cache, cp->ix);
   d430e:	f898 5001 	ldrb.w	r5, [r8, #1]
   d4312:	3214      	adds	r2, #20
      _SPIFFS_MEMCPY(dst, &mem[SPIFFS_PADDR_TO_PAGE_OFFSET(fs, addr)], len);
   d4314:	3114      	adds	r1, #20
   d4316:	fb02 1105 	mla	r1, r2, r5, r1
      if (res2 != SPIFFS_OK) {
   d431a:	2800      	cmp	r0, #0
   d431c:	bf18      	it	ne
   d431e:	4606      	movne	r6, r0
      _SPIFFS_MEMCPY(dst, &mem[SPIFFS_PADDR_TO_PAGE_OFFSET(fs, addr)], len);
   d4320:	4652      	mov	r2, sl
   d4322:	4419      	add	r1, r3
   d4324:	4658      	mov	r0, fp
   d4326:	f011 f99b 	bl	e5660 <memcpy>
   d432a:	e7ae      	b.n	d428a <spiffs_phys_rd+0x62>
      s32_t res2 = SPIFFS_HAL_READ(fs, addr, len, dst);
   d432c:	6827      	ldr	r7, [r4, #0]
   d432e:	465b      	mov	r3, fp
   d4330:	4652      	mov	r2, sl
   d4332:	4629      	mov	r1, r5
   d4334:	4620      	mov	r0, r4
   d4336:	47b8      	blx	r7
      if (res2 != SPIFFS_OK) {
   d4338:	2800      	cmp	r0, #0
   d433a:	bf18      	it	ne
   d433c:	4606      	movne	r6, r0
   d433e:	e7a4      	b.n	d428a <spiffs_phys_rd+0x62>

000d4340 <spiffs_phys_wr>:
    spiffs *fs,
    u8_t op,
    spiffs_file fh,
    u32_t addr,
    u32_t len,
    u8_t *src) {
   d4340:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4344:	461d      	mov	r5, r3
  (void)fh;
  spiffs_page_ix pix = SPIFFS_PADDR_TO_PAGE(fs, addr);
   d4346:	6902      	ldr	r2, [r0, #16]
  spiffs_cache *cache = spiffs_get_cache(fs);
   d4348:	f8d0 905c 	ldr.w	r9, [r0, #92]	; 0x5c
    u8_t *src) {
   d434c:	e9dd 830a 	ldrd	r8, r3, [sp, #40]	; 0x28
  spiffs_page_ix pix = SPIFFS_PADDR_TO_PAGE(fs, addr);
   d4350:	1aaa      	subs	r2, r5, r2
    u8_t *src) {
   d4352:	468a      	mov	sl, r1
  spiffs_page_ix pix = SPIFFS_PADDR_TO_PAGE(fs, addr);
   d4354:	69c1      	ldr	r1, [r0, #28]
   d4356:	fbb2 f1f1 	udiv	r1, r2, r1
  spiffs_cache_page *cp =  spiffs_cache_page_get(fs, pix);
   d435a:	b289      	uxth	r1, r1
    u8_t *src) {
   d435c:	9301      	str	r3, [sp, #4]
   d435e:	4604      	mov	r4, r0
  spiffs_cache_page *cp =  spiffs_cache_page_get(fs, pix);
   d4360:	f7ff feb4 	bl	d40cc <spiffs_cache_page_get>

  if (cp && (op & SPIFFS_OP_COM_MASK) != SPIFFS_OP_C_WRTHRU) {
   d4364:	9b01      	ldr	r3, [sp, #4]
   d4366:	4607      	mov	r7, r0
   d4368:	2800      	cmp	r0, #0
   d436a:	d035      	beq.n	d43d8 <spiffs_phys_wr+0x98>
   d436c:	f00a 021c 	and.w	r2, sl, #28
   d4370:	2a18      	cmp	r2, #24
   d4372:	d031      	beq.n	d43d8 <spiffs_phys_wr+0x98>
    // have a cache page
    // copy in data to cache page

    if ((op & SPIFFS_OP_COM_MASK) == SPIFFS_OP_C_DELE &&
   d4374:	7841      	ldrb	r1, [r0, #1]
   d4376:	b97a      	cbnz	r2, d4398 <spiffs_phys_wr+0x58>
   d4378:	f01a 0f03 	tst.w	sl, #3
   d437c:	d00c      	beq.n	d4398 <spiffs_phys_wr+0x58>
        (op & SPIFFS_OP_TYPE_MASK) != SPIFFS_OP_T_OBJ_LU) {
      // page is being deleted, wipe from cache - unless it is a lookup page
      spiffs_cache_page_free(fs, cp->ix, 0);
   d437e:	4620      	mov	r0, r4
   d4380:	f7ff feca 	bl	d4118 <spiffs_cache_page_free>
    cache->last_access++;
    cp->last_access = cache->last_access;

    if (cp->flags & SPIFFS_CACHE_FLAG_WRTHRU) {
      // page is being updated, no write-cache, just pass thru
      return SPIFFS_HAL_WRITE(fs, addr, len, src);
   d4384:	6866      	ldr	r6, [r4, #4]
   d4386:	9b01      	ldr	r3, [sp, #4]
    } else {
      return SPIFFS_OK;
    }
  } else {
    // no cache page, no write cache - just write thru
    return SPIFFS_HAL_WRITE(fs, addr, len, src);
   d4388:	4642      	mov	r2, r8
   d438a:	4629      	mov	r1, r5
   d438c:	4620      	mov	r0, r4
   d438e:	46b4      	mov	ip, r6
  }
}
   d4390:	b002      	add	sp, #8
   d4392:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return SPIFFS_HAL_WRITE(fs, addr, len, src);
   d4396:	4760      	bx	ip
    _SPIFFS_MEMCPY(&mem[SPIFFS_PADDR_TO_PAGE_OFFSET(fs, addr)], src, len);
   d4398:	6926      	ldr	r6, [r4, #16]
    u8_t *mem =  spiffs_get_cache_page(fs, cache, cp->ix);
   d439a:	69e2      	ldr	r2, [r4, #28]
    _SPIFFS_MEMCPY(&mem[SPIFFS_PADDR_TO_PAGE_OFFSET(fs, addr)], src, len);
   d439c:	9301      	str	r3, [sp, #4]
   d439e:	1ba8      	subs	r0, r5, r6
   d43a0:	fbb0 f6f2 	udiv	r6, r0, r2
   d43a4:	fb02 0616 	mls	r6, r2, r6, r0
   d43a8:	3614      	adds	r6, #20
   d43aa:	f8d9 0010 	ldr.w	r0, [r9, #16]
    u8_t *mem =  spiffs_get_cache_page(fs, cache, cp->ix);
   d43ae:	3214      	adds	r2, #20
    _SPIFFS_MEMCPY(&mem[SPIFFS_PADDR_TO_PAGE_OFFSET(fs, addr)], src, len);
   d43b0:	fb01 6602 	mla	r6, r1, r2, r6
   d43b4:	4430      	add	r0, r6
   d43b6:	4642      	mov	r2, r8
   d43b8:	4619      	mov	r1, r3
   d43ba:	f011 f951 	bl	e5660 <memcpy>
    cache->last_access++;
   d43be:	f8d9 2004 	ldr.w	r2, [r9, #4]
   d43c2:	3201      	adds	r2, #1
   d43c4:	f8c9 2004 	str.w	r2, [r9, #4]
    if (cp->flags & SPIFFS_CACHE_FLAG_WRTHRU) {
   d43c8:	7838      	ldrb	r0, [r7, #0]
    cp->last_access = cache->last_access;
   d43ca:	607a      	str	r2, [r7, #4]
    if (cp->flags & SPIFFS_CACHE_FLAG_WRTHRU) {
   d43cc:	f010 0002 	ands.w	r0, r0, #2
   d43d0:	d1d8      	bne.n	d4384 <spiffs_phys_wr+0x44>
}
   d43d2:	b002      	add	sp, #8
   d43d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return SPIFFS_HAL_WRITE(fs, addr, len, src);
   d43d8:	6866      	ldr	r6, [r4, #4]
   d43da:	e7d5      	b.n	d4388 <spiffs_phys_wr+0x48>

000d43dc <spiffs_cache_page_get_by_fd>:

#if SPIFFS_CACHE_WR
// returns the cache page that this fd refers, or null if no cache page
spiffs_cache_page *spiffs_cache_page_get_by_fd(spiffs *fs, spiffs_fd *fd) {
   d43dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  spiffs_cache *cache = spiffs_get_cache(fs);
   d43de:	6dc4      	ldr	r4, [r0, #92]	; 0x5c

  if ((cache->cpage_use_map & cache->cpage_use_mask) == 0) {
   d43e0:	e9d4 6302 	ldrd	r6, r3, [r4, #8]
   d43e4:	4033      	ands	r3, r6
spiffs_cache_page *spiffs_cache_page_get_by_fd(spiffs *fs, spiffs_fd *fd) {
   d43e6:	4605      	mov	r5, r0
  if ((cache->cpage_use_map & cache->cpage_use_mask) == 0) {
   d43e8:	d01a      	beq.n	d4420 <spiffs_cache_page_get_by_fd+0x44>
    // all cpages free, no cpage cannot be assigned to obj_id
    return 0;
  }

  int i;
  for (i = 0; i < cache->cpage_count; i++) {
   d43ea:	f894 c000 	ldrb.w	ip, [r4]
   d43ee:	2200      	movs	r2, #0
    spiffs_cache_page *cp = spiffs_get_cache_page_hdr(fs, cache, i);
    if ((cache->cpage_use_map & (1<<i)) &&
   d43f0:	f04f 0e01 	mov.w	lr, #1
  for (i = 0; i < cache->cpage_count; i++) {
   d43f4:	4594      	cmp	ip, r2
   d43f6:	dc01      	bgt.n	d43fc <spiffs_cache_page_get_by_fd+0x20>
    return 0;
   d43f8:	2000      	movs	r0, #0
      return cp;
    }
  }

  return 0;
}
   d43fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((cache->cpage_use_map & (1<<i)) &&
   d43fc:	fa0e f302 	lsl.w	r3, lr, r2
   d4400:	4233      	tst	r3, r6
   d4402:	d00b      	beq.n	d441c <spiffs_cache_page_get_by_fd+0x40>
    spiffs_cache_page *cp = spiffs_get_cache_page_hdr(fs, cache, i);
   d4404:	69eb      	ldr	r3, [r5, #28]
   d4406:	6927      	ldr	r7, [r4, #16]
   d4408:	3314      	adds	r3, #20
   d440a:	4353      	muls	r3, r2
   d440c:	18f8      	adds	r0, r7, r3
    if ((cache->cpage_use_map & (1<<i)) &&
   d440e:	56fb      	ldrsb	r3, [r7, r3]
   d4410:	2b00      	cmp	r3, #0
   d4412:	da03      	bge.n	d441c <spiffs_cache_page_get_by_fd+0x40>
        (cp->flags & SPIFFS_CACHE_FLAG_TYPE_WR) &&
   d4414:	8907      	ldrh	r7, [r0, #8]
   d4416:	88cb      	ldrh	r3, [r1, #6]
   d4418:	429f      	cmp	r7, r3
   d441a:	d0ee      	beq.n	d43fa <spiffs_cache_page_get_by_fd+0x1e>
  for (i = 0; i < cache->cpage_count; i++) {
   d441c:	3201      	adds	r2, #1
   d441e:	e7e9      	b.n	d43f4 <spiffs_cache_page_get_by_fd+0x18>
    return 0;
   d4420:	4618      	mov	r0, r3
   d4422:	e7ea      	b.n	d43fa <spiffs_cache_page_get_by_fd+0x1e>

000d4424 <spiffs_cache_page_allocate_by_fd>:

// allocates a new cache page and refers this to given fd - flushes an old cache
// page if all cache is busy
spiffs_cache_page *spiffs_cache_page_allocate_by_fd(spiffs *fs, spiffs_fd *fd) {
   d4424:	b538      	push	{r3, r4, r5, lr}
   d4426:	4605      	mov	r5, r0
   d4428:	460c      	mov	r4, r1
  // before this function is called, it is ensured that there is no already existing
  // cache page with same object id
  spiffs_cache_page_remove_oldest(fs, SPIFFS_CACHE_FLAG_TYPE_WR, 0);
   d442a:	f7ff fec2 	bl	d41b2 <spiffs_cache_page_remove_oldest.constprop.0>
  spiffs_cache_page *cp = spiffs_cache_page_allocate(fs);
   d442e:	4628      	mov	r0, r5
   d4430:	f7ff fea3 	bl	d417a <spiffs_cache_page_allocate>
  if (cp == 0) {
   d4434:	b120      	cbz	r0, d4440 <spiffs_cache_page_allocate_by_fd+0x1c>
    // could not get cache page
    return 0;
  }

  cp->flags = SPIFFS_CACHE_FLAG_TYPE_WR;
   d4436:	2380      	movs	r3, #128	; 0x80
   d4438:	7003      	strb	r3, [r0, #0]
  cp->obj_id = fd->obj_id;
   d443a:	88e3      	ldrh	r3, [r4, #6]
   d443c:	8103      	strh	r3, [r0, #8]
  fd->cache_page = cp;
   d443e:	6220      	str	r0, [r4, #32]
  SPIFFS_CACHE_DBG("CACHE_ALLO: allocated cache page "_SPIPRIi" for fd "_SPIPRIfd ":"_SPIPRIid "\n", cp->ix, fd->file_nbr, fd->obj_id);
  return cp;
}
   d4440:	bd38      	pop	{r3, r4, r5, pc}

000d4442 <spiffs_cache_fd_release>:

// unrefers all fds that this cache page refers to and releases the cache page
void spiffs_cache_fd_release(spiffs *fs, spiffs_cache_page *cp) {
   d4442:	b538      	push	{r3, r4, r5, lr}
  if (cp == 0) return;
   d4444:	460c      	mov	r4, r1
   d4446:	b159      	cbz	r1, d4460 <spiffs_cache_fd_release+0x1e>
  u32_t i;
  spiffs_fd *fds = (spiffs_fd *)fs->fd_space;
  for (i = 0; i < fs->fd_count; i++) {
   d4448:	2200      	movs	r2, #0
   d444a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    spiffs_fd *cur_fd = &fds[i];
    if (cur_fd->file_nbr != 0 && cur_fd->cache_page == cp) {
      cur_fd->cache_page = 0;
   d444c:	4615      	mov	r5, r2
  for (i = 0; i < fs->fd_count; i++) {
   d444e:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d4450:	4291      	cmp	r1, r2
   d4452:	d806      	bhi.n	d4462 <spiffs_cache_fd_release+0x20>
    }
  }
  spiffs_cache_page_free(fs, cp->ix, 0);
   d4454:	7861      	ldrb	r1, [r4, #1]
   d4456:	2200      	movs	r2, #0
   d4458:	f7ff fe5e 	bl	d4118 <spiffs_cache_page_free>

  cp->obj_id = 0;
   d445c:	2300      	movs	r3, #0
   d445e:	8123      	strh	r3, [r4, #8]
}
   d4460:	bd38      	pop	{r3, r4, r5, pc}
    if (cur_fd->file_nbr != 0 && cur_fd->cache_page == cp) {
   d4462:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
   d4466:	b119      	cbz	r1, d4470 <spiffs_cache_fd_release+0x2e>
   d4468:	6a19      	ldr	r1, [r3, #32]
   d446a:	42a1      	cmp	r1, r4
      cur_fd->cache_page = 0;
   d446c:	bf08      	it	eq
   d446e:	621d      	streq	r5, [r3, #32]
  for (i = 0; i < fs->fd_count; i++) {
   d4470:	3201      	adds	r2, #1
   d4472:	3330      	adds	r3, #48	; 0x30
   d4474:	e7eb      	b.n	d444e <spiffs_cache_fd_release+0xc>

000d4476 <spiffs_cache_init>:

#endif

// initializes the cache
void spiffs_cache_init(spiffs *fs) {
   d4476:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (fs->cache == 0) return;
   d4478:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
void spiffs_cache_init(spiffs *fs) {
   d447a:	b087      	sub	sp, #28
   d447c:	4605      	mov	r5, r0
  if (fs->cache == 0) return;
   d447e:	2b00      	cmp	r3, #0
   d4480:	d03a      	beq.n	d44f8 <spiffs_cache_init+0x82>
  u32_t sz = fs->cache_size;
  u32_t cache_mask = 0;
  int i;
  int cache_entries =
      (sz - sizeof(spiffs_cache)) / (SPIFFS_CACHE_PAGE_SIZE(fs));
   d4482:	6e04      	ldr	r4, [r0, #96]	; 0x60
   d4484:	69c2      	ldr	r2, [r0, #28]
   d4486:	3c14      	subs	r4, #20
   d4488:	3214      	adds	r2, #20
   d448a:	fbb4 f4f2 	udiv	r4, r4, r2
  if (cache_entries <= 0) return;
   d448e:	2c00      	cmp	r4, #0
   d4490:	dd32      	ble.n	d44f8 <spiffs_cache_init+0x82>

  for (i = 0; i < cache_entries; i++) {
   d4492:	2100      	movs	r1, #0
  u32_t cache_mask = 0;
   d4494:	460a      	mov	r2, r1
  for (i = 0; i < cache_entries; i++) {
   d4496:	3101      	adds	r1, #1
    cache_mask <<= 1;
   d4498:	0052      	lsls	r2, r2, #1
  for (i = 0; i < cache_entries; i++) {
   d449a:	428c      	cmp	r4, r1
    cache_mask |= 1;
   d449c:	f042 0201 	orr.w	r2, r2, #1
  for (i = 0; i < cache_entries; i++) {
   d44a0:	d1f9      	bne.n	d4496 <spiffs_cache_init+0x20>
  }

  spiffs_cache cache;
  memset(&cache, 0, sizeof(spiffs_cache));
   d44a2:	2100      	movs	r1, #0
   d44a4:	e9cd 1101 	strd	r1, r1, [sp, #4]
  cache.cpage_count = cache_entries;
  cache.cpages = (u8_t *)((u8_t *)fs->cache + sizeof(spiffs_cache));
   d44a8:	f103 0114 	add.w	r1, r3, #20
   d44ac:	9105      	str	r1, [sp, #20]

  cache.cpage_use_map = 0xffffffff;
   d44ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  cache.cpage_use_mask = cache_mask;
   d44b2:	e9cd 1203 	strd	r1, r2, [sp, #12]
  cache.cpage_count = cache_entries;
   d44b6:	f88d 4004 	strb.w	r4, [sp, #4]
  _SPIFFS_MEMCPY(fs->cache, &cache, sizeof(spiffs_cache));
   d44ba:	aa01      	add	r2, sp, #4
   d44bc:	af05      	add	r7, sp, #20
   d44be:	4616      	mov	r6, r2
   d44c0:	ce03      	ldmia	r6!, {r0, r1}
   d44c2:	42be      	cmp	r6, r7
   d44c4:	6018      	str	r0, [r3, #0]
   d44c6:	6059      	str	r1, [r3, #4]
   d44c8:	4632      	mov	r2, r6
   d44ca:	f103 0308 	add.w	r3, r3, #8
   d44ce:	d1f6      	bne.n	d44be <spiffs_cache_init+0x48>
   d44d0:	6830      	ldr	r0, [r6, #0]
   d44d2:	6018      	str	r0, [r3, #0]

  spiffs_cache *c = spiffs_get_cache(fs);
   d44d4:	6dee      	ldr	r6, [r5, #92]	; 0x5c

  memset(c->cpages, 0, c->cpage_count * SPIFFS_CACHE_PAGE_SIZE(fs));
   d44d6:	69ea      	ldr	r2, [r5, #28]
   d44d8:	7833      	ldrb	r3, [r6, #0]
   d44da:	6930      	ldr	r0, [r6, #16]
   d44dc:	3214      	adds	r2, #20
   d44de:	435a      	muls	r2, r3
   d44e0:	2100      	movs	r1, #0
   d44e2:	f011 f8e5 	bl	e56b0 <memset>

  c->cpage_use_map &= ~(c->cpage_use_mask);
   d44e6:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
   d44ea:	ea23 0302 	bic.w	r3, r3, r2
   d44ee:	60b3      	str	r3, [r6, #8]
  for (i = 0; i < cache.cpage_count; i++) {
   d44f0:	b2e4      	uxtb	r4, r4
   d44f2:	2300      	movs	r3, #0
   d44f4:	429c      	cmp	r4, r3
   d44f6:	dc01      	bgt.n	d44fc <spiffs_cache_init+0x86>
    spiffs_get_cache_page_hdr(fs, c, i)->ix = i;
  }
}
   d44f8:	b007      	add	sp, #28
   d44fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    spiffs_get_cache_page_hdr(fs, c, i)->ix = i;
   d44fc:	69ea      	ldr	r2, [r5, #28]
   d44fe:	6931      	ldr	r1, [r6, #16]
   d4500:	3214      	adds	r2, #20
   d4502:	fb03 1202 	mla	r2, r3, r2, r1
   d4506:	7053      	strb	r3, [r2, #1]
  for (i = 0; i < cache.cpage_count; i++) {
   d4508:	3301      	adds	r3, #1
   d450a:	e7f3      	b.n	d44f4 <spiffs_cache_init+0x7e>

000d450c <spiffs_gc_erase_block>:
// Erases a logical block and updates the erase counter.
// If cache is enabled, all pages that might be cached in this block
// is dropped.
static s32_t spiffs_gc_erase_block(
    spiffs *fs,
    spiffs_block_ix bix) {
   d450c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d450e:	4604      	mov	r4, r0
   d4510:	460f      	mov	r7, r1
  s32_t res;

  SPIFFS_GC_DBG("gc: erase block "_SPIPRIbl"\n", bix);
   d4512:	480d      	ldr	r0, [pc, #52]	; (d4548 <spiffs_gc_erase_block+0x3c>)
   d4514:	f00c fa74 	bl	e0a00 <spiffsParticleTraceLog>
  res = spiffs_erase_block(fs, bix);
   d4518:	4639      	mov	r1, r7
   d451a:	4620      	mov	r0, r4
   d451c:	f001 ff88 	bl	d6430 <spiffs_erase_block>
  SPIFFS_CHECK_RES(res);
   d4520:	1e05      	subs	r5, r0, #0
   d4522:	da0f      	bge.n	d4544 <spiffs_gc_erase_block+0x38>
      spiffs_cache_drop_page(fs, SPIFFS_PAGE_FOR_BLOCK(fs, bix) + i);
    }
  }
#endif
  return res;
}
   d4524:	4628      	mov	r0, r5
   d4526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      spiffs_cache_drop_page(fs, SPIFFS_PAGE_FOR_BLOCK(fs, bix) + i);
   d4528:	fb13 6307 	smlabb	r3, r3, r7, r6
   d452c:	b299      	uxth	r1, r3
   d452e:	4620      	mov	r0, r4
   d4530:	f7ff fe6d 	bl	d420e <spiffs_cache_drop_page>
    for (i = 0; i < SPIFFS_PAGES_PER_BLOCK(fs); i++) {
   d4534:	3601      	adds	r6, #1
   d4536:	e9d4 3106 	ldrd	r3, r1, [r4, #24]
   d453a:	fbb3 f3f1 	udiv	r3, r3, r1
   d453e:	42b3      	cmp	r3, r6
   d4540:	d8f2      	bhi.n	d4528 <spiffs_gc_erase_block+0x1c>
   d4542:	e7ef      	b.n	d4524 <spiffs_gc_erase_block+0x18>
   d4544:	2600      	movs	r6, #0
   d4546:	e7f6      	b.n	d4536 <spiffs_gc_erase_block+0x2a>
   d4548:	000e5978 	.word	0x000e5978

000d454c <spiffs_gc_quick>:

// Searches for blocks where all entries are deleted - if one is found,
// the block is erased. Compared to the non-quick gc, the quick one ensures
// that no updates are needed on existing objects on pages that are erased.
s32_t spiffs_gc_quick(
    spiffs *fs, u16_t max_free_pages) {
   d454c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4550:	ed2d 8b02 	vpush	{d8}
   d4554:	b089      	sub	sp, #36	; 0x24
  s32_t res = SPIFFS_OK;
  u32_t blocks = fs->block_count;
   d4556:	6a03      	ldr	r3, [r0, #32]
   d4558:	9305      	str	r3, [sp, #20]
    spiffs *fs, u16_t max_free_pages) {
   d455a:	4604      	mov	r4, r0
  spiffs_block_ix cur_block = 0;
  u32_t cur_block_addr = 0;
  int cur_entry = 0;
  spiffs_obj_id *obj_lu_buf = (spiffs_obj_id *)fs->lu_work;
   d455c:	6b43      	ldr	r3, [r0, #52]	; 0x34

  SPIFFS_GC_DBG("gc_quick: running\n");
   d455e:	4852      	ldr	r0, [pc, #328]	; (d46a8 <spiffs_gc_quick+0x15c>)
  spiffs_obj_id *obj_lu_buf = (spiffs_obj_id *)fs->lu_work;
   d4560:	9306      	str	r3, [sp, #24]
    spiffs *fs, u16_t max_free_pages) {
   d4562:	9104      	str	r1, [sp, #16]
  SPIFFS_GC_DBG("gc_quick: running\n");
   d4564:	f00c fa4c 	bl	e0a00 <spiffsParticleTraceLog>
#if SPIFFS_GC_STATS
  fs->stats_gc_runs++;
   d4568:	6da3      	ldr	r3, [r4, #88]	; 0x58
   d456a:	3301      	adds	r3, #1
   d456c:	65a3      	str	r3, [r4, #88]	; 0x58
#endif

  int entries_per_page = (SPIFFS_CFG_LOG_PAGE_SZ(fs) / sizeof(spiffs_obj_id));
   d456e:	69e3      	ldr	r3, [r4, #28]
   d4570:	f04f 0800 	mov.w	r8, #0
   d4574:	ea4f 0b53 	mov.w	fp, r3, lsr #1
  u32_t cur_block_addr = 0;
   d4578:	46c1      	mov	r9, r8
   d457a:	fa1f f388 	uxth.w	r3, r8
   d457e:	ee08 3a10 	vmov	s16, r3

  // find fully deleted blocks
  // check each block
  while (res == SPIFFS_OK && blocks--) {
   d4582:	9b05      	ldr	r3, [sp, #20]
   d4584:	4598      	cmp	r8, r3
   d4586:	d150      	bne.n	d462a <spiffs_gc_quick+0xde>
    cur_block++;
    cur_block_addr += SPIFFS_CFG_LOG_BLOCK_SZ(fs);
  } // per block

  if (res == SPIFFS_OK) {
    res = SPIFFS_ERR_NO_DELETED_BLOCKS;
   d4588:	4848      	ldr	r0, [pc, #288]	; (d46ac <spiffs_gc_quick+0x160>)
   d458a:	e088      	b.n	d469e <spiffs_gc_quick+0x152>
      int entry_offset = obj_lookup_page * entries_per_page;
   d458c:	fb05 f30b 	mul.w	r3, r5, fp
   d4590:	9303      	str	r3, [sp, #12]
      res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ,
   d4592:	6923      	ldr	r3, [r4, #16]
   d4594:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d4596:	444b      	add	r3, r9
   d4598:	e9cd 2100 	strd	r2, r1, [sp]
   d459c:	fb02 3305 	mla	r3, r2, r5, r3
   d45a0:	2114      	movs	r1, #20
   d45a2:	2200      	movs	r2, #0
   d45a4:	4620      	mov	r0, r4
   d45a6:	f7ff fe3f 	bl	d4228 <spiffs_phys_rd>
      while (res == SPIFFS_OK &&
   d45aa:	9b03      	ldr	r3, [sp, #12]
   d45ac:	ebaa 0c03 	sub.w	ip, sl, r3
   d45b0:	69a3      	ldr	r3, [r4, #24]
   d45b2:	9307      	str	r3, [sp, #28]
   d45b4:	9b03      	ldr	r3, [sp, #12]
   d45b6:	eb03 0a0c 	add.w	sl, r3, ip
   d45ba:	bb50      	cbnz	r0, d4612 <spiffs_gc_quick+0xc6>
   d45bc:	45dc      	cmp	ip, fp
   d45be:	da28      	bge.n	d4612 <spiffs_gc_quick+0xc6>
          cur_entry < (int)(SPIFFS_PAGES_PER_BLOCK(fs)-SPIFFS_OBJ_LOOKUP_PAGES(fs))) {
   d45c0:	69e3      	ldr	r3, [r4, #28]
   d45c2:	9a07      	ldr	r2, [sp, #28]
   d45c4:	fbb2 f2f3 	udiv	r2, r2, r3
   d45c8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   d45cc:	bf88      	it	hi
   d45ce:	f04f 0e01 	movhi.w	lr, #1
   d45d2:	ea4f 0142 	mov.w	r1, r2, lsl #1
   d45d6:	bf98      	it	ls
   d45d8:	fbb1 fef3 	udivls	lr, r1, r3
   d45dc:	eba2 020e 	sub.w	r2, r2, lr
          cur_entry - entry_offset < entries_per_page &&
   d45e0:	4552      	cmp	r2, sl
   d45e2:	dd16      	ble.n	d4612 <spiffs_gc_quick+0xc6>
        spiffs_obj_id obj_id = obj_lu_buf[cur_entry-entry_offset];
   d45e4:	9a06      	ldr	r2, [sp, #24]
   d45e6:	f832 201c 	ldrh.w	r2, [r2, ip, lsl #1]
        if (obj_id == SPIFFS_OBJ_ID_DELETED) {
   d45ea:	b922      	cbnz	r2, d45f6 <spiffs_gc_quick+0xaa>
          deleted_pages_in_block++;
   d45ec:	3701      	adds	r7, #1
   d45ee:	b2bf      	uxth	r7, r7
        cur_entry++;
   d45f0:	f10c 0c01 	add.w	ip, ip, #1
   d45f4:	e7de      	b.n	d45b4 <spiffs_gc_quick+0x68>
        } else if (obj_id == SPIFFS_OBJ_ID_FREE) {
   d45f6:	f64f 7eff 	movw	lr, #65535	; 0xffff
   d45fa:	4572      	cmp	r2, lr
   d45fc:	d10e      	bne.n	d461c <spiffs_gc_quick+0xd0>
          if (free_pages_in_block > max_free_pages) {
   d45fe:	9a04      	ldr	r2, [sp, #16]
          free_pages_in_block++;
   d4600:	3601      	adds	r6, #1
   d4602:	b2b6      	uxth	r6, r6
          if (free_pages_in_block > max_free_pages) {
   d4604:	4296      	cmp	r6, r2
   d4606:	d9f3      	bls.n	d45f0 <spiffs_gc_quick+0xa4>
            obj_lookup_page = SPIFFS_OBJ_LOOKUP_PAGES(fs);
   d4608:	428b      	cmp	r3, r1
   d460a:	d80c      	bhi.n	d4626 <spiffs_gc_quick+0xda>
          obj_lookup_page = SPIFFS_OBJ_LOOKUP_PAGES(fs);
   d460c:	fbb1 f5f3 	udiv	r5, r1, r3
          res = 1; // kill object lu loop
   d4610:	2001      	movs	r0, #1
      obj_lookup_page++;
   d4612:	3501      	adds	r5, #1
    while (res == SPIFFS_OK && obj_lookup_page < (int)SPIFFS_OBJ_LOOKUP_PAGES(fs)) {
   d4614:	b168      	cbz	r0, d4632 <spiffs_gc_quick+0xe6>
    if (res == 1) res = SPIFFS_OK;
   d4616:	2801      	cmp	r0, #1
   d4618:	d019      	beq.n	d464e <spiffs_gc_quick+0x102>
   d461a:	e039      	b.n	d4690 <spiffs_gc_quick+0x144>
          obj_lookup_page = SPIFFS_OBJ_LOOKUP_PAGES(fs);
   d461c:	428b      	cmp	r3, r1
   d461e:	d9f5      	bls.n	d460c <spiffs_gc_quick+0xc0>
   d4620:	2501      	movs	r5, #1
          res = 1; // kill object lu loop
   d4622:	4628      	mov	r0, r5
   d4624:	e7f5      	b.n	d4612 <spiffs_gc_quick+0xc6>
            obj_lookup_page = SPIFFS_OBJ_LOOKUP_PAGES(fs);
   d4626:	2501      	movs	r5, #1
   d4628:	e7f2      	b.n	d4610 <spiffs_gc_quick+0xc4>
    int obj_lookup_page = 0;
   d462a:	2500      	movs	r5, #0
    u16_t free_pages_in_block = 0;
   d462c:	462e      	mov	r6, r5
    u16_t deleted_pages_in_block = 0;
   d462e:	462f      	mov	r7, r5
   d4630:	46aa      	mov	sl, r5
    while (res == SPIFFS_OK && obj_lookup_page < (int)SPIFFS_OBJ_LOOKUP_PAGES(fs)) {
   d4632:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
   d4636:	fbb1 f1f2 	udiv	r1, r1, r2
   d463a:	ebb2 0f41 	cmp.w	r2, r1, lsl #1
   d463e:	ea4f 0341 	mov.w	r3, r1, lsl #1
   d4642:	bf8c      	ite	hi
   d4644:	2301      	movhi	r3, #1
   d4646:	fbb3 f3f2 	udivls	r3, r3, r2
   d464a:	42ab      	cmp	r3, r5
   d464c:	dc9e      	bgt.n	d458c <spiffs_gc_quick+0x40>
        deleted_pages_in_block + free_pages_in_block == SPIFFS_PAGES_PER_BLOCK(fs)-SPIFFS_OBJ_LOOKUP_PAGES(fs) &&
   d464e:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
   d4652:	fbb3 f3f0 	udiv	r3, r3, r0
   d4656:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
   d465a:	ea4f 0243 	mov.w	r2, r3, lsl #1
   d465e:	bf8c      	ite	hi
   d4660:	2201      	movhi	r2, #1
   d4662:	fbb2 f2f0 	udivls	r2, r2, r0
   d4666:	19b9      	adds	r1, r7, r6
   d4668:	1a9b      	subs	r3, r3, r2
    if (res == SPIFFS_OK &&
   d466a:	4299      	cmp	r1, r3
   d466c:	d10f      	bne.n	d468e <spiffs_gc_quick+0x142>
        deleted_pages_in_block + free_pages_in_block == SPIFFS_PAGES_PER_BLOCK(fs)-SPIFFS_OBJ_LOOKUP_PAGES(fs) &&
   d466e:	9b04      	ldr	r3, [sp, #16]
   d4670:	42b3      	cmp	r3, r6
   d4672:	d30c      	bcc.n	d468e <spiffs_gc_quick+0x142>
      fs->stats_p_deleted -= deleted_pages_in_block;
   d4674:	6d23      	ldr	r3, [r4, #80]	; 0x50
      res = spiffs_gc_erase_block(fs, cur_block);
   d4676:	ee18 1a10 	vmov	r1, s16
      fs->stats_p_deleted -= deleted_pages_in_block;
   d467a:	1bdf      	subs	r7, r3, r7
      res = spiffs_gc_erase_block(fs, cur_block);
   d467c:	4620      	mov	r0, r4
      fs->stats_p_deleted -= deleted_pages_in_block;
   d467e:	6527      	str	r7, [r4, #80]	; 0x50
  }
  return res;
}
   d4680:	b009      	add	sp, #36	; 0x24
   d4682:	ecbd 8b02 	vpop	{d8}
   d4686:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      res = spiffs_gc_erase_block(fs, cur_block);
   d468a:	f7ff bf3f 	b.w	d450c <spiffs_gc_erase_block>
   d468e:	2000      	movs	r0, #0
    cur_block_addr += SPIFFS_CFG_LOG_BLOCK_SZ(fs);
   d4690:	69a3      	ldr	r3, [r4, #24]
   d4692:	f108 0801 	add.w	r8, r8, #1
   d4696:	4499      	add	r9, r3
  while (res == SPIFFS_OK && blocks--) {
   d4698:	2800      	cmp	r0, #0
   d469a:	f43f af6e 	beq.w	d457a <spiffs_gc_quick+0x2e>
}
   d469e:	b009      	add	sp, #36	; 0x24
   d46a0:	ecbd 8b02 	vpop	{d8}
   d46a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d46a8:	000e598e 	.word	0x000e598e
   d46ac:	ffffd8d3 	.word	0xffffd8d3

000d46b0 <spiffs_gc_erase_page_stats>:
}

// Updates page statistics for a block that is about to be erased
s32_t spiffs_gc_erase_page_stats(
    spiffs *fs,
    spiffs_block_ix bix) {
   d46b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s32_t res = SPIFFS_OK;
  int obj_lookup_page = 0;
  int entries_per_page = (SPIFFS_CFG_LOG_PAGE_SZ(fs) / sizeof(spiffs_obj_id));
   d46b4:	69c3      	ldr	r3, [r0, #28]
    spiffs_block_ix bix) {
   d46b6:	b085      	sub	sp, #20
  spiffs_obj_id *obj_lu_buf = (spiffs_obj_id *)fs->lu_work;
   d46b8:	2500      	movs	r5, #0
  int entries_per_page = (SPIFFS_CFG_LOG_PAGE_SZ(fs) / sizeof(spiffs_obj_id));
   d46ba:	ea4f 0953 	mov.w	r9, r3, lsr #1
  spiffs_obj_id *obj_lu_buf = (spiffs_obj_id *)fs->lu_work;
   d46be:	6b43      	ldr	r3, [r0, #52]	; 0x34
    spiffs_block_ix bix) {
   d46c0:	9103      	str	r1, [sp, #12]
   d46c2:	4604      	mov	r4, r0
  spiffs_obj_id *obj_lu_buf = (spiffs_obj_id *)fs->lu_work;
   d46c4:	9302      	str	r3, [sp, #8]
  int cur_entry = 0;
  u32_t dele = 0;
  u32_t allo = 0;
   d46c6:	462f      	mov	r7, r5
  u32_t dele = 0;
   d46c8:	462e      	mov	r6, r5
  int cur_entry = 0;
   d46ca:	46aa      	mov	sl, r5
  int obj_lookup_page = 0;
   d46cc:	46a8      	mov	r8, r5
        0, bix * SPIFFS_CFG_LOG_BLOCK_SZ(fs) + SPIFFS_PAGE_TO_PADDR(fs, obj_lookup_page), SPIFFS_CFG_LOG_PAGE_SZ(fs), fs->lu_work);
    // check each entry
    while (res == SPIFFS_OK &&
        cur_entry - entry_offset < entries_per_page && cur_entry < (int)(SPIFFS_PAGES_PER_BLOCK(fs)-SPIFFS_OBJ_LOOKUP_PAGES(fs))) {
      spiffs_obj_id obj_id = obj_lu_buf[cur_entry-entry_offset];
      if (obj_id == SPIFFS_OBJ_ID_FREE) {
   d46ce:	f64f 7bff 	movw	fp, #65535	; 0xffff
  while (res == SPIFFS_OK && obj_lookup_page < (int)SPIFFS_OBJ_LOOKUP_PAGES(fs)) {
   d46d2:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
   d46d6:	fbb3 f0f2 	udiv	r0, r3, r2
   d46da:	ebb2 0f40 	cmp.w	r2, r0, lsl #1
   d46de:	ea4f 0140 	mov.w	r1, r0, lsl #1
   d46e2:	bf8c      	ite	hi
   d46e4:	2101      	movhi	r1, #1
   d46e6:	fbb1 f1f2 	udivls	r1, r1, r2
   d46ea:	4541      	cmp	r1, r8
   d46ec:	dc01      	bgt.n	d46f2 <spiffs_gc_erase_page_stats+0x42>
   d46ee:	2300      	movs	r3, #0
   d46f0:	e018      	b.n	d4724 <spiffs_gc_erase_page_stats+0x74>
    res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ,
   d46f2:	6921      	ldr	r1, [r4, #16]
   d46f4:	9803      	ldr	r0, [sp, #12]
   d46f6:	fb03 1300 	mla	r3, r3, r0, r1
   d46fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d46fc:	fb02 3308 	mla	r3, r2, r8, r3
   d4700:	e9cd 2100 	strd	r2, r1, [sp]
   d4704:	4620      	mov	r0, r4
   d4706:	2114      	movs	r1, #20
   d4708:	2200      	movs	r2, #0
   d470a:	f7ff fd8d 	bl	d4228 <spiffs_phys_rd>
   d470e:	ebaa 0105 	sub.w	r1, sl, r5
   d4712:	4603      	mov	r3, r0
    while (res == SPIFFS_OK &&
   d4714:	eb01 0a05 	add.w	sl, r1, r5
   d4718:	b1bb      	cbz	r3, d474a <spiffs_gc_erase_page_stats+0x9a>
      } else {
        allo++;
      }
      cur_entry++;
    } // per entry
    obj_lookup_page++;
   d471a:	f108 0801 	add.w	r8, r8, #1
  while (res == SPIFFS_OK && obj_lookup_page < (int)SPIFFS_OBJ_LOOKUP_PAGES(fs)) {
   d471e:	444d      	add	r5, r9
   d4720:	2b00      	cmp	r3, #0
   d4722:	d0d6      	beq.n	d46d2 <spiffs_gc_erase_page_stats+0x22>
  } // per object lookup page
  SPIFFS_GC_DBG("gc_check: wipe pallo:"_SPIPRIi" pdele:"_SPIPRIi"\n", allo, dele);
   d4724:	4632      	mov	r2, r6
   d4726:	4639      	mov	r1, r7
   d4728:	4815      	ldr	r0, [pc, #84]	; (d4780 <spiffs_gc_erase_page_stats+0xd0>)
   d472a:	9302      	str	r3, [sp, #8]
   d472c:	f00c f968 	bl	e0a00 <spiffsParticleTraceLog>
  fs->stats_p_allocated -= allo;
   d4730:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
  fs->stats_p_deleted -= dele;
  return res;
}
   d4732:	9b02      	ldr	r3, [sp, #8]
  fs->stats_p_allocated -= allo;
   d4734:	1bd7      	subs	r7, r2, r7
  fs->stats_p_deleted -= dele;
   d4736:	6d22      	ldr	r2, [r4, #80]	; 0x50
  fs->stats_p_allocated -= allo;
   d4738:	64e7      	str	r7, [r4, #76]	; 0x4c
  fs->stats_p_deleted -= dele;
   d473a:	1b96      	subs	r6, r2, r6
}
   d473c:	4618      	mov	r0, r3
  fs->stats_p_deleted -= dele;
   d473e:	6526      	str	r6, [r4, #80]	; 0x50
}
   d4740:	b005      	add	sp, #20
   d4742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        allo++;
   d4746:	3701      	adds	r7, #1
   d4748:	e018      	b.n	d477c <spiffs_gc_erase_page_stats+0xcc>
    while (res == SPIFFS_OK &&
   d474a:	4589      	cmp	r9, r1
   d474c:	dde5      	ble.n	d471a <spiffs_gc_erase_page_stats+0x6a>
        cur_entry - entry_offset < entries_per_page && cur_entry < (int)(SPIFFS_PAGES_PER_BLOCK(fs)-SPIFFS_OBJ_LOOKUP_PAGES(fs))) {
   d474e:	e9d4 2c06 	ldrd	r2, ip, [r4, #24]
   d4752:	fbb2 f2fc 	udiv	r2, r2, ip
   d4756:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
   d475a:	ea4f 0042 	mov.w	r0, r2, lsl #1
   d475e:	bf8c      	ite	hi
   d4760:	2001      	movhi	r0, #1
   d4762:	fbb0 f0fc 	udivls	r0, r0, ip
   d4766:	1a12      	subs	r2, r2, r0
   d4768:	4552      	cmp	r2, sl
   d476a:	ddd6      	ble.n	d471a <spiffs_gc_erase_page_stats+0x6a>
      spiffs_obj_id obj_id = obj_lu_buf[cur_entry-entry_offset];
   d476c:	9a02      	ldr	r2, [sp, #8]
   d476e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
      if (obj_id == SPIFFS_OBJ_ID_FREE) {
   d4772:	455a      	cmp	r2, fp
   d4774:	d002      	beq.n	d477c <spiffs_gc_erase_page_stats+0xcc>
      } else if (obj_id == SPIFFS_OBJ_ID_DELETED) {
   d4776:	2a00      	cmp	r2, #0
   d4778:	d1e5      	bne.n	d4746 <spiffs_gc_erase_page_stats+0x96>
        dele++;
   d477a:	3601      	adds	r6, #1
      cur_entry++;
   d477c:	3101      	adds	r1, #1
   d477e:	e7c9      	b.n	d4714 <spiffs_gc_erase_page_stats+0x64>
   d4780:	000e59a1 	.word	0x000e59a1

000d4784 <spiffs_gc_find_candidate>:
// Finds block candidates to erase
s32_t spiffs_gc_find_candidate(
    spiffs *fs,
    spiffs_block_ix **block_candidates,
    int *candidate_count,
    char fs_crammed) {
   d4784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4788:	b091      	sub	sp, #68	; 0x44
   d478a:	461d      	mov	r5, r3
  s32_t res = SPIFFS_OK;
  u32_t blocks = fs->block_count;
   d478c:	6a03      	ldr	r3, [r0, #32]
   d478e:	9309      	str	r3, [sp, #36]	; 0x24
  spiffs_block_ix cur_block = 0;
  u32_t cur_block_addr = 0;
  spiffs_obj_id *obj_lu_buf = (spiffs_obj_id *)fs->lu_work;
   d4790:	6b43      	ldr	r3, [r0, #52]	; 0x34
   d4792:	930d      	str	r3, [sp, #52]	; 0x34
  int cur_entry = 0;

  // using fs->work area as sorted candidate memory, (spiffs_block_ix)cand_bix/(s32_t)score
  int max_candidates = MIN(fs->block_count, (SPIFFS_CFG_LOG_PAGE_SZ(fs)-8)/(sizeof(spiffs_block_ix) + sizeof(s32_t)));
   d4794:	69c3      	ldr	r3, [r0, #28]
    char fs_crammed) {
   d4796:	9206      	str	r2, [sp, #24]
  int max_candidates = MIN(fs->block_count, (SPIFFS_CFG_LOG_PAGE_SZ(fs)-8)/(sizeof(spiffs_block_ix) + sizeof(s32_t)));
   d4798:	3b08      	subs	r3, #8
   d479a:	2206      	movs	r2, #6
   d479c:	fbb3 f3f2 	udiv	r3, r3, r2
   d47a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d47a2:	429a      	cmp	r2, r3
   d47a4:	bf28      	it	cs
   d47a6:	461a      	movcs	r2, r3
  *candidate_count = 0;
   d47a8:	9b06      	ldr	r3, [sp, #24]
   d47aa:	2600      	movs	r6, #0
   d47ac:	601e      	str	r6, [r3, #0]
    char fs_crammed) {
   d47ae:	4604      	mov	r4, r0
  int max_candidates = MIN(fs->block_count, (SPIFFS_CFG_LOG_PAGE_SZ(fs)-8)/(sizeof(spiffs_block_ix) + sizeof(s32_t)));
   d47b0:	4693      	mov	fp, r2
    char fs_crammed) {
   d47b2:	460f      	mov	r7, r1
  memset(fs->work, 0xff, SPIFFS_CFG_LOG_PAGE_SZ(fs));
   d47b4:	69c2      	ldr	r2, [r0, #28]
   d47b6:	6b80      	ldr	r0, [r0, #56]	; 0x38
   d47b8:	21ff      	movs	r1, #255	; 0xff
   d47ba:	f010 ff79 	bl	e56b0 <memset>

  // divide up work area into block indices and scores
  spiffs_block_ix *cand_blocks = (spiffs_block_ix *)fs->work;
   d47be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d47c0:	9303      	str	r3, [sp, #12]
  s32_t *cand_scores = (s32_t *)(fs->work + max_candidates * sizeof(spiffs_block_ix));
   d47c2:	eb03 034b 	add.w	r3, r3, fp, lsl #1
   d47c6:	9307      	str	r3, [sp, #28]

   // align cand_scores on s32_t boundary
  cand_scores = (s32_t*)(((intptr_t)cand_scores + sizeof(intptr_t) - 1) & ~(sizeof(intptr_t) - 1));
   d47c8:	3303      	adds	r3, #3
   d47ca:	f023 0303 	bic.w	r3, r3, #3
   d47ce:	9302      	str	r3, [sp, #8]

  *block_candidates = cand_blocks;
   d47d0:	9b03      	ldr	r3, [sp, #12]
   d47d2:	603b      	str	r3, [r7, #0]

  int entries_per_page = (SPIFFS_CFG_LOG_PAGE_SZ(fs) / sizeof(spiffs_obj_id));
   d47d4:	69e3      	ldr	r3, [r4, #28]
  u32_t cur_block_addr = 0;
   d47d6:	9604      	str	r6, [sp, #16]
  int entries_per_page = (SPIFFS_CFG_LOG_PAGE_SZ(fs) / sizeof(spiffs_obj_id));
   d47d8:	085b      	lsrs	r3, r3, #1
   d47da:	42b5      	cmp	r5, r6
   d47dc:	9308      	str	r3, [sp, #32]

  // check each block
  while (res == SPIFFS_OK && blocks--) {
   d47de:	bf14      	ite	ne
   d47e0:	4633      	movne	r3, r6
   d47e2:	2332      	moveq	r3, #50	; 0x32
   d47e4:	930c      	str	r3, [sp, #48]	; 0x30
   d47e6:	9b02      	ldr	r3, [sp, #8]
   d47e8:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   d47ec:	930b      	str	r3, [sp, #44]	; 0x2c
   d47ee:	b2b3      	uxth	r3, r6
   d47f0:	930a      	str	r3, [sp, #40]	; 0x28
   d47f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d47f4:	42b3      	cmp	r3, r6
   d47f6:	d144      	bne.n	d4882 <spiffs_gc_find_candidate+0xfe>
    cur_entry = 0;
    cur_block++;
    cur_block_addr += SPIFFS_CFG_LOG_BLOCK_SZ(fs);
  } // per block

  return res;
   d47f8:	2500      	movs	r5, #0
   d47fa:	e0af      	b.n	d495c <spiffs_gc_find_candidate+0x1d8>
      res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ,
   d47fc:	9904      	ldr	r1, [sp, #16]
   d47fe:	440b      	add	r3, r1
   d4800:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d4802:	fb02 330a 	mla	r3, r2, sl, r3
   d4806:	e9cd 2100 	strd	r2, r1, [sp]
   d480a:	4620      	mov	r0, r4
   d480c:	2200      	movs	r2, #0
   d480e:	2114      	movs	r1, #20
   d4810:	f7ff fd0a 	bl	d4228 <spiffs_phys_rd>
   d4814:	9b05      	ldr	r3, [sp, #20]
   d4816:	4605      	mov	r5, r0
      while (res == SPIFFS_OK &&
   d4818:	69a0      	ldr	r0, [r4, #24]
   d481a:	1bda      	subs	r2, r3, r7
   d481c:	18bb      	adds	r3, r7, r2
   d481e:	9305      	str	r3, [sp, #20]
   d4820:	b995      	cbnz	r5, d4848 <spiffs_gc_find_candidate+0xc4>
   d4822:	9b08      	ldr	r3, [sp, #32]
   d4824:	4293      	cmp	r3, r2
   d4826:	dd0f      	ble.n	d4848 <spiffs_gc_find_candidate+0xc4>
          cur_entry < (int)(SPIFFS_PAGES_PER_BLOCK(fs)-SPIFFS_OBJ_LOOKUP_PAGES(fs))) {
   d4828:	f8d4 c01c 	ldr.w	ip, [r4, #28]
   d482c:	fbb0 f3fc 	udiv	r3, r0, ip
   d4830:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
   d4834:	ea4f 0143 	mov.w	r1, r3, lsl #1
   d4838:	bf8c      	ite	hi
   d483a:	2101      	movhi	r1, #1
   d483c:	fbb1 f1fc 	udivls	r1, r1, ip
   d4840:	1a5b      	subs	r3, r3, r1
          cur_entry - entry_offset < entries_per_page &&
   d4842:	9905      	ldr	r1, [sp, #20]
   d4844:	428b      	cmp	r3, r1
   d4846:	dc07      	bgt.n	d4858 <spiffs_gc_find_candidate+0xd4>
      obj_lookup_page++;
   d4848:	9b08      	ldr	r3, [sp, #32]
   d484a:	f10a 0a01 	add.w	sl, sl, #1
    while (res == SPIFFS_OK && obj_lookup_page < (int)SPIFFS_OBJ_LOOKUP_PAGES(fs)) {
   d484e:	441f      	add	r7, r3
   d4850:	b1e5      	cbz	r5, d488c <spiffs_gc_find_candidate+0x108>
    if (res == 1) res = SPIFFS_OK;
   d4852:	2d01      	cmp	r5, #1
   d4854:	d17a      	bne.n	d494c <spiffs_gc_find_candidate+0x1c8>
   d4856:	e028      	b.n	d48aa <spiffs_gc_find_candidate+0x126>
        spiffs_obj_id obj_id = obj_lu_buf[cur_entry-entry_offset];
   d4858:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d485a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        if (obj_id == SPIFFS_OBJ_ID_FREE) {
   d485e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d4862:	428b      	cmp	r3, r1
   d4864:	d00b      	beq.n	d487e <spiffs_gc_find_candidate+0xfa>
        } else  if (obj_id == SPIFFS_OBJ_ID_DELETED) {
   d4866:	b92b      	cbnz	r3, d4874 <spiffs_gc_find_candidate+0xf0>
          deleted_pages_in_block++;
   d4868:	f108 0801 	add.w	r8, r8, #1
   d486c:	fa1f f888 	uxth.w	r8, r8
        cur_entry++;
   d4870:	3201      	adds	r2, #1
   d4872:	e7d3      	b.n	d481c <spiffs_gc_find_candidate+0x98>
          used_pages_in_block++;
   d4874:	f109 0901 	add.w	r9, r9, #1
   d4878:	fa1f f989 	uxth.w	r9, r9
   d487c:	e7f8      	b.n	d4870 <spiffs_gc_find_candidate+0xec>
          res = 1; // kill object lu loop
   d487e:	2501      	movs	r5, #1
   d4880:	e7e2      	b.n	d4848 <spiffs_gc_find_candidate+0xc4>
   d4882:	2700      	movs	r7, #0
    int obj_lookup_page = 0;
   d4884:	46ba      	mov	sl, r7
    u16_t used_pages_in_block = 0;
   d4886:	46b9      	mov	r9, r7
    u16_t deleted_pages_in_block = 0;
   d4888:	46b8      	mov	r8, r7
   d488a:	9705      	str	r7, [sp, #20]
    while (res == SPIFFS_OK && obj_lookup_page < (int)SPIFFS_OBJ_LOOKUP_PAGES(fs)) {
   d488c:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
   d4890:	fbb3 f3f2 	udiv	r3, r3, r2
   d4894:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
   d4898:	ea4f 0143 	mov.w	r1, r3, lsl #1
   d489c:	bf8c      	ite	hi
   d489e:	2101      	movhi	r1, #1
   d48a0:	fbb1 f1f2 	udivls	r1, r1, r2
   d48a4:	4551      	cmp	r1, sl
   d48a6:	6923      	ldr	r3, [r4, #16]
   d48a8:	dca8      	bgt.n	d47fc <spiffs_gc_find_candidate+0x78>
      res = _spiffs_rd(fs, SPIFFS_OP_C_READ | SPIFFS_OP_T_OBJ_LU2, 0,
   d48aa:	e9d4 5106 	ldrd	r5, r1, [r4, #24]
   d48ae:	6920      	ldr	r0, [r4, #16]
   d48b0:	fbb5 f2f1 	udiv	r2, r5, r1
   d48b4:	3802      	subs	r0, #2
   d48b6:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
   d48ba:	ea4f 0342 	mov.w	r3, r2, lsl #1
   d48be:	b2b2      	uxth	r2, r6
   d48c0:	fb05 0202 	mla	r2, r5, r2, r0
   d48c4:	f10d 003e 	add.w	r0, sp, #62	; 0x3e
   d48c8:	bf88      	it	hi
   d48ca:	2301      	movhi	r3, #1
   d48cc:	9001      	str	r0, [sp, #4]
   d48ce:	f04f 0002 	mov.w	r0, #2
   d48d2:	bf98      	it	ls
   d48d4:	fbb3 f3f1 	udivls	r3, r3, r1
   d48d8:	9000      	str	r0, [sp, #0]
   d48da:	fb03 2301 	mla	r3, r3, r1, r2
   d48de:	4620      	mov	r0, r4
   d48e0:	2200      	movs	r2, #0
   d48e2:	2115      	movs	r1, #21
   d48e4:	f7ff fca0 	bl	d4228 <spiffs_phys_rd>
      SPIFFS_CHECK_RES(res);
   d48e8:	1e05      	subs	r5, r0, #0
   d48ea:	db37      	blt.n	d495c <spiffs_gc_find_candidate+0x1d8>
      if (fs->max_erase_count > erase_count) {
   d48ec:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
   d48f0:	f8b4 7056 	ldrh.w	r7, [r4, #86]	; 0x56
      s32_t score =
   d48f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      SPIFFS_GC_DBG("gc_check: bix:"_SPIPRIbl" del:"_SPIPRIi" use:"_SPIPRIi" score:"_SPIPRIi"\n", cur_block, deleted_pages_in_block, used_pages_in_block, score);
   d48f6:	4829      	ldr	r0, [pc, #164]	; (d499c <spiffs_gc_find_candidate+0x218>)
      if (fs->max_erase_count > erase_count) {
   d48f8:	429f      	cmp	r7, r3
        erase_age = SPIFFS_OBJ_ID_FREE - (erase_count - fs->max_erase_count);
   d48fa:	bf96      	itet	ls
   d48fc:	43db      	mvnls	r3, r3
        erase_age = fs->max_erase_count - erase_count;
   d48fe:	1aff      	subhi	r7, r7, r3
        erase_age = SPIFFS_OBJ_ID_FREE - (erase_count - fs->max_erase_count);
   d4900:	18ff      	addls	r7, r7, r3
          deleted_pages_in_block * SPIFFS_GC_HEUR_W_DELET +
   d4902:	eb08 0388 	add.w	r3, r8, r8, lsl #2
   d4906:	eba3 0309 	sub.w	r3, r3, r9
        erase_age = SPIFFS_OBJ_ID_FREE - (erase_count - fs->max_erase_count);
   d490a:	b2bf      	uxth	r7, r7
      s32_t score =
   d490c:	fb02 3707 	mla	r7, r2, r7, r3
      SPIFFS_GC_DBG("gc_check: bix:"_SPIPRIbl" del:"_SPIPRIi" use:"_SPIPRIi" score:"_SPIPRIi"\n", cur_block, deleted_pages_in_block, used_pages_in_block, score);
   d4910:	9700      	str	r7, [sp, #0]
   d4912:	464b      	mov	r3, r9
   d4914:	4642      	mov	r2, r8
   d4916:	b2b1      	uxth	r1, r6
   d4918:	f00c f872 	bl	e0a00 <spiffsParticleTraceLog>
      while (cand_ix < max_candidates) {
   d491c:	9803      	ldr	r0, [sp, #12]
      int cand_ix = 0;
   d491e:	2300      	movs	r3, #0
      while (cand_ix < max_candidates) {
   d4920:	455b      	cmp	r3, fp
   d4922:	da0e      	bge.n	d4942 <spiffs_gc_find_candidate+0x1be>
        if (cand_blocks[cand_ix] == (spiffs_block_ix)-1) {
   d4924:	9a02      	ldr	r2, [sp, #8]
   d4926:	4601      	mov	r1, r0
   d4928:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
   d492c:	880a      	ldrh	r2, [r1, #0]
   d492e:	f64f 7cff 	movw	ip, #65535	; 0xffff
   d4932:	4562      	cmp	r2, ip
   d4934:	f100 0002 	add.w	r0, r0, #2
   d4938:	d114      	bne.n	d4964 <spiffs_gc_find_candidate+0x1e0>
          cand_blocks[cand_ix] = cur_block;
   d493a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d493c:	800b      	strh	r3, [r1, #0]
          cand_scores[cand_ix] = score;
   d493e:	f8ce 7000 	str.w	r7, [lr]
      (*candidate_count)++;
   d4942:	9b06      	ldr	r3, [sp, #24]
   d4944:	9a06      	ldr	r2, [sp, #24]
   d4946:	681b      	ldr	r3, [r3, #0]
   d4948:	3301      	adds	r3, #1
   d494a:	6013      	str	r3, [r2, #0]
    cur_block_addr += SPIFFS_CFG_LOG_BLOCK_SZ(fs);
   d494c:	9a04      	ldr	r2, [sp, #16]
   d494e:	69a3      	ldr	r3, [r4, #24]
   d4950:	441a      	add	r2, r3
   d4952:	9204      	str	r2, [sp, #16]
  while (res == SPIFFS_OK && blocks--) {
   d4954:	3601      	adds	r6, #1
   d4956:	2d00      	cmp	r5, #0
   d4958:	f43f af49 	beq.w	d47ee <spiffs_gc_find_candidate+0x6a>
}
   d495c:	4628      	mov	r0, r5
   d495e:	b011      	add	sp, #68	; 0x44
   d4960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        } else if (cand_scores[cand_ix] < score) {
   d4964:	9a02      	ldr	r2, [sp, #8]
   d4966:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   d496a:	42ba      	cmp	r2, r7
   d496c:	da14      	bge.n	d4998 <spiffs_gc_find_candidate+0x214>
          while (reorder_cand_ix >= cand_ix) {
   d496e:	f8dd c01c 	ldr.w	ip, [sp, #28]
   d4972:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
          int reorder_cand_ix = max_candidates - 2;
   d4974:	f1ab 0a02 	sub.w	sl, fp, #2
          while (reorder_cand_ix >= cand_ix) {
   d4978:	4553      	cmp	r3, sl
   d497a:	f1a2 0804 	sub.w	r8, r2, #4
   d497e:	dcdc      	bgt.n	d493a <spiffs_gc_find_candidate+0x1b6>
            cand_blocks[reorder_cand_ix + 1] = cand_blocks[reorder_cand_ix];
   d4980:	f83c 9c04 	ldrh.w	r9, [ip, #-4]
   d4984:	f82c 9d02 	strh.w	r9, [ip, #-2]!
            cand_scores[reorder_cand_ix + 1] = cand_scores[reorder_cand_ix];
   d4988:	f852 0c08 	ldr.w	r0, [r2, #-8]
   d498c:	f842 0c04 	str.w	r0, [r2, #-4]
            reorder_cand_ix--;
   d4990:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   d4994:	4642      	mov	r2, r8
   d4996:	e7ef      	b.n	d4978 <spiffs_gc_find_candidate+0x1f4>
        cand_ix++;
   d4998:	3301      	adds	r3, #1
   d499a:	e7c1      	b.n	d4920 <spiffs_gc_find_candidate+0x19c>
   d499c:	000e59c3 	.word	0x000e59c3

000d49a0 <spiffs_gc_clean>:
//     when reached end of lookup, store updated object index
//   pop object scan lookup entry index
//   repeat loop until end of object lookup
//   scan object lookup again for remaining object index pages, move to new page in other block
//
s32_t spiffs_gc_clean(spiffs *fs, spiffs_block_ix bix) {
   d49a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s32_t res = SPIFFS_OK;
  const int entries_per_page = (SPIFFS_CFG_LOG_PAGE_SZ(fs) / sizeof(spiffs_obj_id));
   d49a4:	69c3      	ldr	r3, [r0, #28]
s32_t spiffs_gc_clean(spiffs *fs, spiffs_block_ix bix) {
   d49a6:	b095      	sub	sp, #84	; 0x54
  const int entries_per_page = (SPIFFS_CFG_LOG_PAGE_SZ(fs) / sizeof(spiffs_obj_id));
   d49a8:	085b      	lsrs	r3, r3, #1
   d49aa:	9308      	str	r3, [sp, #32]
  // this is the global localizer being pushed and popped
  int cur_entry = 0;
  spiffs_obj_id *obj_lu_buf = (spiffs_obj_id *)fs->lu_work;
   d49ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
   d49ae:	930b      	str	r3, [sp, #44]	; 0x2c
s32_t spiffs_gc_clean(spiffs *fs, spiffs_block_ix bix) {
   d49b0:	4605      	mov	r5, r0
  spiffs_gc gc; // our stack frame/state
  spiffs_page_ix cur_pix = 0;
  spiffs_page_object_ix_header *objix_hdr = (spiffs_page_object_ix_header *)fs->work;
   d49b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  spiffs_page_object_ix *objix = (spiffs_page_object_ix *)fs->work;

  SPIFFS_GC_DBG("gc_clean: cleaning block "_SPIPRIbl"\n", bix);
   d49b4:	48bf      	ldr	r0, [pc, #764]	; (d4cb4 <spiffs_gc_clean+0x314>)
  spiffs_page_object_ix_header *objix_hdr = (spiffs_page_object_ix_header *)fs->work;
   d49b6:	9306      	str	r3, [sp, #24]
s32_t spiffs_gc_clean(spiffs *fs, spiffs_block_ix bix) {
   d49b8:	9107      	str	r1, [sp, #28]
  SPIFFS_GC_DBG("gc_clean: cleaning block "_SPIPRIbl"\n", bix);
   d49ba:	f00c f821 	bl	e0a00 <spiffsParticleTraceLog>

  memset(&gc, 0, sizeof(spiffs_gc));
   d49be:	2214      	movs	r2, #20
   d49c0:	2100      	movs	r1, #0
   d49c2:	a80f      	add	r0, sp, #60	; 0x3c
   d49c4:	f010 fe74 	bl	e56b0 <memset>
  gc.state = FIND_OBJ_DATA;

  if (fs->free_cursor_block_ix == bix) {
   d49c8:	8cab      	ldrh	r3, [r5, #36]	; 0x24
   d49ca:	9907      	ldr	r1, [sp, #28]
  gc.state = FIND_OBJ_DATA;
   d49cc:	2200      	movs	r2, #0
  if (fs->free_cursor_block_ix == bix) {
   d49ce:	428b      	cmp	r3, r1
  gc.state = FIND_OBJ_DATA;
   d49d0:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
  if (fs->free_cursor_block_ix == bix) {
   d49d4:	d10c      	bne.n	d49f0 <spiffs_gc_clean+0x50>
    // move free cursor to next block, cannot use free pages from the block we want to clean
    fs->free_cursor_block_ix = (bix+1)%fs->block_count;
   d49d6:	6a28      	ldr	r0, [r5, #32]
    fs->free_cursor_obj_lu_entry = 0;
   d49d8:	62aa      	str	r2, [r5, #40]	; 0x28
    fs->free_cursor_block_ix = (bix+1)%fs->block_count;
   d49da:	3101      	adds	r1, #1
   d49dc:	460b      	mov	r3, r1
   d49de:	fbb1 f1f0 	udiv	r1, r1, r0
   d49e2:	fb00 3111 	mls	r1, r0, r1, r3
   d49e6:	84a9      	strh	r1, [r5, #36]	; 0x24
    SPIFFS_GC_DBG("gc_clean: move free cursor to block "_SPIPRIbl"\n", fs->free_cursor_block_ix);
   d49e8:	48b3      	ldr	r0, [pc, #716]	; (d4cb8 <spiffs_gc_clean+0x318>)
   d49ea:	b289      	uxth	r1, r1
   d49ec:	f00c f808 	bl	e0a00 <spiffsParticleTraceLog>
      obj_lookup_page++; // no need to check scan variable here, obj_lookup_page is set in start of loop
    } // per object lookup page
    if (res != SPIFFS_OK) break;

    // state finalization and switch
    switch (gc.state) {
   d49f0:	f04f 0800 	mov.w	r8, #0
   d49f4:	4646      	mov	r6, r8
   d49f6:	e083      	b.n	d4b00 <spiffs_gc_clean+0x160>
    SPIFFS_GC_DBG("gc_clean: state = "_SPIPRIi" entry:"_SPIPRIi"\n", gc.state, cur_entry);
   d49f8:	48b0      	ldr	r0, [pc, #704]	; (d4cbc <spiffs_gc_clean+0x31c>)
   d49fa:	4632      	mov	r2, r6
   d49fc:	4649      	mov	r1, r9
   d49fe:	f00b ffff 	bl	e0a00 <spiffsParticleTraceLog>
    gc.obj_id_found = 0; // reset (to no found data page)
   d4a02:	2300      	movs	r3, #0
   d4a04:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
    int obj_lookup_page = cur_entry / entries_per_page;
   d4a08:	9b08      	ldr	r3, [sp, #32]
   d4a0a:	fb96 fbf3 	sdiv	fp, r6, r3
    while (scan && res == SPIFFS_OK && obj_lookup_page < (int)SPIFFS_OBJ_LOOKUP_PAGES(fs)) {
   d4a0e:	fb0b f303 	mul.w	r3, fp, r3
   d4a12:	930a      	str	r3, [sp, #40]	; 0x28
   d4a14:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
   d4a18:	fbb3 f0f2 	udiv	r0, r3, r2
   d4a1c:	ebb2 0f40 	cmp.w	r2, r0, lsl #1
   d4a20:	ea4f 0140 	mov.w	r1, r0, lsl #1
   d4a24:	bf8c      	ite	hi
   d4a26:	2101      	movhi	r1, #1
   d4a28:	fbb1 f1f2 	udivls	r1, r1, r2
   d4a2c:	458b      	cmp	fp, r1
   d4a2e:	db6f      	blt.n	d4b10 <spiffs_gc_clean+0x170>
    switch (gc.state) {
   d4a30:	f1b9 0f01 	cmp.w	r9, #1
   d4a34:	f000 825b 	beq.w	d4eee <spiffs_gc_clean+0x54e>
   d4a38:	f1b9 0f02 	cmp.w	r9, #2
   d4a3c:	f000 829e 	beq.w	d4f7c <spiffs_gc_clean+0x5dc>
   d4a40:	f1b9 0f00 	cmp.w	r9, #0
   d4a44:	f040 8250 	bne.w	d4ee8 <spiffs_gc_clean+0x548>
    case FIND_OBJ_DATA:
      if (gc.obj_id_found) {
   d4a48:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   d4a4c:	2b00      	cmp	r3, #0
   d4a4e:	f000 8248 	beq.w	d4ee2 <spiffs_gc_clean+0x542>
        // find out corresponding obj ix page and load it to memory
        spiffs_page_header p_hdr;
        spiffs_page_ix objix_pix;
        gc.stored_scan_entry_index = cur_entry; // push cursor
        cur_entry = 0; // restart scan from start
        gc.state = MOVE_OBJ_DATA;
   d4a52:	2301      	movs	r3, #1
        res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
   d4a54:	69ea      	ldr	r2, [r5, #28]
        gc.state = MOVE_OBJ_DATA;
   d4a56:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
        res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
   d4a5a:	a90d      	add	r1, sp, #52	; 0x34
   d4a5c:	692b      	ldr	r3, [r5, #16]
   d4a5e:	9101      	str	r1, [sp, #4]
   d4a60:	2105      	movs	r1, #5
   d4a62:	9100      	str	r1, [sp, #0]
   d4a64:	fb02 3308 	mla	r3, r2, r8, r3
   d4a68:	2115      	movs	r1, #21
   d4a6a:	464a      	mov	r2, r9
   d4a6c:	4628      	mov	r0, r5
        gc.stored_scan_entry_index = cur_entry; // push cursor
   d4a6e:	9612      	str	r6, [sp, #72]	; 0x48
        res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
   d4a70:	f7ff fbda 	bl	d4228 <spiffs_phys_rd>
            0, SPIFFS_PAGE_TO_PADDR(fs, cur_pix), sizeof(spiffs_page_header), (u8_t*)&p_hdr);
        SPIFFS_CHECK_RES(res);
   d4a74:	1e04      	subs	r4, r0, #0
   d4a76:	f2c0 8118 	blt.w	d4caa <spiffs_gc_clean+0x30a>
        gc.cur_objix_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, p_hdr.span_ix);
   d4a7a:	69ea      	ldr	r2, [r5, #28]
   d4a7c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   d4a80:	f1a2 012d 	sub.w	r1, r2, #45	; 0x2d
   d4a84:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   d4a88:	ea4f 0051 	mov.w	r0, r1, lsr #1
   d4a8c:	d309      	bcc.n	d4aa2 <spiffs_gc_clean+0x102>
   d4a8e:	3a08      	subs	r2, #8
   d4a90:	eba3 0900 	sub.w	r9, r3, r0
   d4a94:	0853      	lsrs	r3, r2, #1
   d4a96:	fbb9 f9f3 	udiv	r9, r9, r3
   d4a9a:	f109 0901 	add.w	r9, r9, #1
   d4a9e:	fa1f f989 	uxth.w	r9, r9
        SPIFFS_GC_DBG("gc_clean: FIND_DATA find objix span_ix:"_SPIPRIsp"\n", gc.cur_objix_spix);
   d4aa2:	4887      	ldr	r0, [pc, #540]	; (d4cc0 <spiffs_gc_clean+0x320>)
        gc.cur_objix_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, p_hdr.span_ix);
   d4aa4:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
        SPIFFS_GC_DBG("gc_clean: FIND_DATA find objix span_ix:"_SPIPRIsp"\n", gc.cur_objix_spix);
   d4aa8:	4649      	mov	r1, r9
   d4aaa:	f00b ffa9 	bl	e0a00 <spiffsParticleTraceLog>
        res = spiffs_obj_lu_find_id_and_span(fs, gc.cur_obj_id | SPIFFS_OBJ_ID_IX_FLAG, gc.cur_objix_spix, 0, &objix_pix);
   d4aae:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
   d4ab2:	f10d 0332 	add.w	r3, sp, #50	; 0x32
   d4ab6:	9300      	str	r3, [sp, #0]
   d4ab8:	464a      	mov	r2, r9
   d4aba:	2300      	movs	r3, #0
   d4abc:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   d4ac0:	4628      	mov	r0, r5
   d4ac2:	f001 fe33 	bl	d672c <spiffs_obj_lu_find_id_and_span>
        if (res == SPIFFS_ERR_NOT_FOUND) {
   d4ac6:	4b7f      	ldr	r3, [pc, #508]	; (d4cc4 <spiffs_gc_clean+0x324>)
   d4ac8:	4298      	cmp	r0, r3
        res = spiffs_obj_lu_find_id_and_span(fs, gc.cur_obj_id | SPIFFS_OBJ_ID_IX_FLAG, gc.cur_objix_spix, 0, &objix_pix);
   d4aca:	4604      	mov	r4, r0
        if (res == SPIFFS_ERR_NOT_FOUND) {
   d4acc:	f040 81d3 	bne.w	d4e76 <spiffs_gc_clean+0x4d6>
          // on borked systems we might get an ERR_NOT_FOUND here -
          // this is handled by simply deleting the page as it is not referenced
          // from anywhere
          SPIFFS_GC_DBG("gc_clean: FIND_OBJ_DATA objix not found! Wipe page "_SPIPRIpg"\n", gc.cur_data_pix);
   d4ad0:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   d4ad4:	487c      	ldr	r0, [pc, #496]	; (d4cc8 <spiffs_gc_clean+0x328>)
   d4ad6:	9109      	str	r1, [sp, #36]	; 0x24
   d4ad8:	f00b ff92 	bl	e0a00 <spiffsParticleTraceLog>
          res = spiffs_page_delete(fs, gc.cur_data_pix);
   d4adc:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4ade:	4628      	mov	r0, r5
   d4ae0:	f001 ff25 	bl	d692e <spiffs_page_delete>
          SPIFFS_CHECK_RES(res);
   d4ae4:	1e04      	subs	r4, r0, #0
   d4ae6:	f2c0 80e0 	blt.w	d4caa <spiffs_gc_clean+0x30a>
          // then we restore states and continue scanning for data pages
          cur_entry = gc.stored_scan_entry_index; // pop cursor
          gc.state = FIND_OBJ_DATA;
   d4aea:	2300      	movs	r3, #0
   d4aec:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
      break;
    default:
      cur_entry = 0;
      break;
    } // switch gc.state
    SPIFFS_GC_DBG("gc_clean: state-> "_SPIPRIi"\n", gc.state);
   d4af0:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   d4af4:	4875      	ldr	r0, [pc, #468]	; (d4ccc <spiffs_gc_clean+0x32c>)
   d4af6:	f00b ff83 	bl	e0a00 <spiffsParticleTraceLog>
  while (res == SPIFFS_OK && gc.state != FINISHED) {
   d4afa:	2c00      	cmp	r4, #0
   d4afc:	f040 80d5 	bne.w	d4caa <spiffs_gc_clean+0x30a>
   d4b00:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
   d4b04:	f1b9 0f03 	cmp.w	r9, #3
   d4b08:	f47f af76 	bne.w	d49f8 <spiffs_gc_clean+0x58>
   d4b0c:	2400      	movs	r4, #0
   d4b0e:	e0cc      	b.n	d4caa <spiffs_gc_clean+0x30a>
      res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ,
   d4b10:	6929      	ldr	r1, [r5, #16]
   d4b12:	9807      	ldr	r0, [sp, #28]
   d4b14:	fb03 1300 	mla	r3, r3, r0, r1
   d4b18:	6b69      	ldr	r1, [r5, #52]	; 0x34
   d4b1a:	fb0b 3302 	mla	r3, fp, r2, r3
   d4b1e:	e9cd 2100 	strd	r2, r1, [sp]
   d4b22:	4628      	mov	r0, r5
   d4b24:	2200      	movs	r2, #0
   d4b26:	2114      	movs	r1, #20
   d4b28:	f7ff fb7e 	bl	d4228 <spiffs_phys_rd>
   d4b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4b2e:	1af3      	subs	r3, r6, r3
   d4b30:	4604      	mov	r4, r0
      while (scan && res == SPIFFS_OK &&
   d4b32:	9309      	str	r3, [sp, #36]	; 0x24
   d4b34:	b99c      	cbnz	r4, d4b5e <spiffs_gc_clean+0x1be>
   d4b36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d4b3a:	4293      	cmp	r3, r2
   d4b3c:	da0f      	bge.n	d4b5e <spiffs_gc_clean+0x1be>
          cur_entry - entry_offset < entries_per_page && cur_entry < (int)(SPIFFS_PAGES_PER_BLOCK(fs)-SPIFFS_OBJ_LOOKUP_PAGES(fs))) {
   d4b3e:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   d4b42:	fbb2 f2f3 	udiv	r2, r2, r3
   d4b46:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   d4b4a:	bf88      	it	hi
   d4b4c:	2001      	movhi	r0, #1
   d4b4e:	ea4f 0142 	mov.w	r1, r2, lsl #1
   d4b52:	bf98      	it	ls
   d4b54:	fbb1 f0f3 	udivls	r0, r1, r3
   d4b58:	1a10      	subs	r0, r2, r0
   d4b5a:	42b0      	cmp	r0, r6
   d4b5c:	dc01      	bgt.n	d4b62 <spiffs_gc_clean+0x1c2>
   d4b5e:	2301      	movs	r3, #1
   d4b60:	e033      	b.n	d4bca <spiffs_gc_clean+0x22a>
        spiffs_obj_id obj_id = obj_lu_buf[cur_entry-entry_offset];
   d4b62:	980b      	ldr	r0, [sp, #44]	; 0x2c
   d4b64:	9f09      	ldr	r7, [sp, #36]	; 0x24
   d4b66:	f830 a017 	ldrh.w	sl, [r0, r7, lsl #1]
        cur_pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, cur_entry);
   d4b6a:	9807      	ldr	r0, [sp, #28]
   d4b6c:	fb12 f200 	smulbb	r2, r2, r0
   d4b70:	428b      	cmp	r3, r1
   d4b72:	b292      	uxth	r2, r2
   d4b74:	bf96      	itet	ls
   d4b76:	fbb1 f1f3 	udivls	r1, r1, r3
   d4b7a:	2101      	movhi	r1, #1
   d4b7c:	b289      	uxthls	r1, r1
   d4b7e:	4432      	add	r2, r6
   d4b80:	eb01 0802 	add.w	r8, r1, r2
        switch (gc.state) {
   d4b84:	f1b9 0f01 	cmp.w	r9, #1
        cur_pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, cur_entry);
   d4b88:	fa1f f888 	uxth.w	r8, r8
        switch (gc.state) {
   d4b8c:	d02a      	beq.n	d4be4 <spiffs_gc_clean+0x244>
   d4b8e:	f1b9 0f02 	cmp.w	r9, #2
   d4b92:	f000 80fe 	beq.w	d4d92 <spiffs_gc_clean+0x3f2>
   d4b96:	f1b9 0f00 	cmp.w	r9, #0
   d4b9a:	d10f      	bne.n	d4bbc <spiffs_gc_clean+0x21c>
          if (obj_id != SPIFFS_OBJ_ID_DELETED && obj_id != SPIFFS_OBJ_ID_FREE &&
   d4b9c:	fa0f f38a 	sxth.w	r3, sl
   d4ba0:	2b00      	cmp	r3, #0
   d4ba2:	dd51      	ble.n	d4c48 <spiffs_gc_clean+0x2a8>
            SPIFFS_GC_DBG("gc_clean: FIND_DATA state:"_SPIPRIi" - found obj id "_SPIPRIid"\n", gc.state, obj_id);
   d4ba4:	484a      	ldr	r0, [pc, #296]	; (d4cd0 <spiffs_gc_clean+0x330>)
   d4ba6:	4652      	mov	r2, sl
   d4ba8:	4649      	mov	r1, r9
   d4baa:	f00b ff29 	bl	e0a00 <spiffsParticleTraceLog>
            gc.obj_id_found = 1;
   d4bae:	2301      	movs	r3, #1
   d4bb0:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
            gc.cur_obj_id = obj_id;
   d4bb4:	f8ad a03e 	strh.w	sl, [sp, #62]	; 0x3e
            gc.cur_data_pix = cur_pix;
   d4bb8:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
        switch (gc.state) {
   d4bbc:	2300      	movs	r3, #0
        cur_entry++;
   d4bbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d4bc0:	3201      	adds	r2, #1
   d4bc2:	3601      	adds	r6, #1
      while (scan && res == SPIFFS_OK &&
   d4bc4:	9209      	str	r2, [sp, #36]	; 0x24
   d4bc6:	2b00      	cmp	r3, #0
   d4bc8:	d1b4      	bne.n	d4b34 <spiffs_gc_clean+0x194>
      obj_lookup_page++; // no need to check scan variable here, obj_lookup_page is set in start of loop
   d4bca:	f10b 0b01 	add.w	fp, fp, #1
    while (scan && res == SPIFFS_OK && obj_lookup_page < (int)SPIFFS_OBJ_LOOKUP_PAGES(fs)) {
   d4bce:	2b00      	cmp	r3, #0
   d4bd0:	f000 814d 	beq.w	d4e6e <spiffs_gc_clean+0x4ce>
   d4bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4bd6:	9a08      	ldr	r2, [sp, #32]
   d4bd8:	4413      	add	r3, r2
   d4bda:	930a      	str	r3, [sp, #40]	; 0x28
   d4bdc:	2c00      	cmp	r4, #0
   d4bde:	f43f af19 	beq.w	d4a14 <spiffs_gc_clean+0x74>
   d4be2:	e062      	b.n	d4caa <spiffs_gc_clean+0x30a>
          if (obj_id == gc.cur_obj_id) {
   d4be4:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
   d4be8:	4552      	cmp	r2, sl
   d4bea:	d12d      	bne.n	d4c48 <spiffs_gc_clean+0x2a8>
            res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
   d4bec:	692a      	ldr	r2, [r5, #16]
   d4bee:	a90d      	add	r1, sp, #52	; 0x34
   d4bf0:	9101      	str	r1, [sp, #4]
   d4bf2:	2105      	movs	r1, #5
   d4bf4:	9100      	str	r1, [sp, #0]
   d4bf6:	fb03 2308 	mla	r3, r3, r8, r2
   d4bfa:	2115      	movs	r1, #21
   d4bfc:	2200      	movs	r2, #0
   d4bfe:	4628      	mov	r0, r5
   d4c00:	f7ff fb12 	bl	d4228 <spiffs_phys_rd>
            SPIFFS_CHECK_RES(res);
   d4c04:	1e04      	subs	r4, r0, #0
   d4c06:	db50      	blt.n	d4caa <spiffs_gc_clean+0x30a>
            SPIFFS_GC_DBG("gc_clean: MOVE_DATA found data page "_SPIPRIid":"_SPIPRIsp" @ "_SPIPRIpg"\n", gc.cur_obj_id, p_hdr.span_ix, cur_pix);
   d4c08:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   d4c0c:	4831      	ldr	r0, [pc, #196]	; (d4cd4 <spiffs_gc_clean+0x334>)
   d4c0e:	4643      	mov	r3, r8
   d4c10:	4651      	mov	r1, sl
   d4c12:	f00b fef5 	bl	e0a00 <spiffsParticleTraceLog>
            if (SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, p_hdr.span_ix) != gc.cur_objix_spix) {
   d4c16:	69e9      	ldr	r1, [r5, #28]
   d4c18:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   d4c1c:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
   d4c20:	f1a1 002d 	sub.w	r0, r1, #45	; 0x2d
   d4c24:	ebb2 0f50 	cmp.w	r2, r0, lsr #1
   d4c28:	ea4f 0350 	mov.w	r3, r0, lsr #1
   d4c2c:	bf23      	ittte	cs
   d4c2e:	1ad3      	subcs	r3, r2, r3
   d4c30:	3908      	subcs	r1, #8
   d4c32:	0849      	lsrcs	r1, r1, #1
   d4c34:	2300      	movcc	r3, #0
   d4c36:	bf24      	itt	cs
   d4c38:	fbb3 f3f1 	udivcs	r3, r3, r1
   d4c3c:	3301      	addcs	r3, #1
   d4c3e:	429f      	cmp	r7, r3
   d4c40:	d004      	beq.n	d4c4c <spiffs_gc_clean+0x2ac>
              SPIFFS_GC_DBG("gc_clean: MOVE_DATA no objix spix match, take in another run\n");
   d4c42:	4825      	ldr	r0, [pc, #148]	; (d4cd8 <spiffs_gc_clean+0x338>)
   d4c44:	f00b fedc 	bl	e0a00 <spiffsParticleTraceLog>
          if (obj_id != SPIFFS_OBJ_ID_DELETED && obj_id != SPIFFS_OBJ_ID_FREE &&
   d4c48:	2301      	movs	r3, #1
   d4c4a:	e7b8      	b.n	d4bbe <spiffs_gc_clean+0x21e>
              if (p_hdr.flags & SPIFFS_PH_FLAG_DELET) {
   d4c4c:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
   d4c50:	2b00      	cmp	r3, #0
   d4c52:	da45      	bge.n	d4ce0 <spiffs_gc_clean+0x340>
                res = spiffs_page_move(fs, 0, 0, obj_id, &p_hdr, cur_pix, &new_data_pix);
   d4c54:	f10d 0332 	add.w	r3, sp, #50	; 0x32
   d4c58:	2200      	movs	r2, #0
   d4c5a:	e9cd 8301 	strd	r8, r3, [sp, #4]
   d4c5e:	ab0d      	add	r3, sp, #52	; 0x34
   d4c60:	4611      	mov	r1, r2
   d4c62:	9300      	str	r3, [sp, #0]
   d4c64:	4628      	mov	r0, r5
   d4c66:	4653      	mov	r3, sl
   d4c68:	f001 fea6 	bl	d69b8 <spiffs_page_move>
                SPIFFS_GC_DBG("gc_clean: MOVE_DATA move objix "_SPIPRIid":"_SPIPRIsp" page "_SPIPRIpg" to "_SPIPRIpg"\n", gc.cur_obj_id, p_hdr.span_ix, cur_pix, new_data_pix);
   d4c6c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   d4c70:	9300      	str	r3, [sp, #0]
                res = spiffs_page_move(fs, 0, 0, obj_id, &p_hdr, cur_pix, &new_data_pix);
   d4c72:	4604      	mov	r4, r0
                SPIFFS_GC_DBG("gc_clean: MOVE_DATA move objix "_SPIPRIid":"_SPIPRIsp" page "_SPIPRIpg" to "_SPIPRIpg"\n", gc.cur_obj_id, p_hdr.span_ix, cur_pix, new_data_pix);
   d4c74:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   d4c78:	4818      	ldr	r0, [pc, #96]	; (d4cdc <spiffs_gc_clean+0x33c>)
   d4c7a:	4643      	mov	r3, r8
   d4c7c:	4651      	mov	r1, sl
   d4c7e:	f00b febf 	bl	e0a00 <spiffsParticleTraceLog>
                SPIFFS_CHECK_RES(res);
   d4c82:	2c00      	cmp	r4, #0
   d4c84:	db11      	blt.n	d4caa <spiffs_gc_clean+0x30a>
                res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ,
   d4c86:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   d4c8a:	6929      	ldr	r1, [r5, #16]
   d4c8c:	9807      	ldr	r0, [sp, #28]
   d4c8e:	fb02 1200 	mla	r2, r2, r0, r1
   d4c92:	6b69      	ldr	r1, [r5, #52]	; 0x34
   d4c94:	4628      	mov	r0, r5
   d4c96:	e9cd 3100 	strd	r3, r1, [sp]
   d4c9a:	fb0b 2303 	mla	r3, fp, r3, r2
   d4c9e:	2114      	movs	r1, #20
   d4ca0:	2200      	movs	r2, #0
   d4ca2:	f7ff fac1 	bl	d4228 <spiffs_phys_rd>
                SPIFFS_CHECK_RES(res);
   d4ca6:	1e04      	subs	r4, r0, #0
   d4ca8:	da29      	bge.n	d4cfe <spiffs_gc_clean+0x35e>
  } // while state != FINISHED


  return res;
}
   d4caa:	4620      	mov	r0, r4
   d4cac:	b015      	add	sp, #84	; 0x54
   d4cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4cb2:	bf00      	nop
   d4cb4:	000e59ee 	.word	0x000e59ee
   d4cb8:	000e5a0d 	.word	0x000e5a0d
   d4cbc:	000e5a37 	.word	0x000e5a37
   d4cc0:	000e5c62 	.word	0x000e5c62
   d4cc4:	ffffd8ee 	.word	0xffffd8ee
   d4cc8:	000e5c8f 	.word	0x000e5c8f
   d4ccc:	000e5d75 	.word	0x000e5d75
   d4cd0:	000e5a56 	.word	0x000e5a56
   d4cd4:	000e5a88 	.word	0x000e5a88
   d4cd8:	000e5abe 	.word	0x000e5abe
   d4cdc:	000e5afc 	.word	0x000e5afc
                SPIFFS_GC_DBG("gc_clean: MOVE_DATA wipe objix "_SPIPRIid":"_SPIPRIsp" page "_SPIPRIpg"\n", obj_id, p_hdr.span_ix, cur_pix);
   d4ce0:	48a9      	ldr	r0, [pc, #676]	; (d4f88 <spiffs_gc_clean+0x5e8>)
   d4ce2:	4643      	mov	r3, r8
   d4ce4:	4651      	mov	r1, sl
   d4ce6:	f00b fe8b 	bl	e0a00 <spiffsParticleTraceLog>
                res = spiffs_page_delete(fs, cur_pix);
   d4cea:	4641      	mov	r1, r8
   d4cec:	4628      	mov	r0, r5
   d4cee:	f001 fe1e 	bl	d692e <spiffs_page_delete>
                SPIFFS_CHECK_RES(res);
   d4cf2:	1e04      	subs	r4, r0, #0
   d4cf4:	dbd9      	blt.n	d4caa <spiffs_gc_clean+0x30a>
                new_data_pix = SPIFFS_OBJ_ID_FREE;
   d4cf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4cfa:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
              if (gc.cur_objix_spix == 0) {
   d4cfe:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   d4d02:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
   d4d06:	b9e7      	cbnz	r7, d4d42 <spiffs_gc_clean+0x3a2>
                ((spiffs_page_ix*)((u8_t *)objix_hdr + sizeof(spiffs_page_object_ix_header)))[p_hdr.span_ix] = new_data_pix;
   d4d08:	9a06      	ldr	r2, [sp, #24]
   d4d0a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d4d0e:	f8a3 102d 	strh.w	r1, [r3, #45]	; 0x2d
                SPIFFS_GC_DBG("gc_clean: MOVE_DATA wrote page "_SPIPRIpg" to objix_hdr entry "_SPIPRIsp" in mem\n", new_data_pix, (spiffs_span_ix)SPIFFS_OBJ_IX_ENTRY(fs, p_hdr.span_ix));
   d4d12:	69eb      	ldr	r3, [r5, #28]
   d4d14:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   d4d18:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
   d4d1c:	f1a3 002d 	sub.w	r0, r3, #45	; 0x2d
   d4d20:	ebb2 0f50 	cmp.w	r2, r0, lsr #1
   d4d24:	ea4f 0750 	mov.w	r7, r0, lsr #1
   d4d28:	d307      	bcc.n	d4d3a <spiffs_gc_clean+0x39a>
   d4d2a:	3b08      	subs	r3, #8
   d4d2c:	1bd2      	subs	r2, r2, r7
   d4d2e:	085b      	lsrs	r3, r3, #1
   d4d30:	fbb2 f0f3 	udiv	r0, r2, r3
   d4d34:	fb03 2210 	mls	r2, r3, r0, r2
   d4d38:	b292      	uxth	r2, r2
   d4d3a:	4894      	ldr	r0, [pc, #592]	; (d4f8c <spiffs_gc_clean+0x5ec>)
                SPIFFS_GC_DBG("gc_clean: MOVE_DATA wrote page "_SPIPRIpg" to objix entry "_SPIPRIsp" in mem\n", new_data_pix, (spiffs_span_ix)SPIFFS_OBJ_IX_ENTRY(fs, p_hdr.span_ix));
   d4d3c:	f00b fe60 	bl	e0a00 <spiffsParticleTraceLog>
   d4d40:	e782      	b.n	d4c48 <spiffs_gc_clean+0x2a8>
                ((spiffs_page_ix*)((u8_t *)objix + sizeof(spiffs_page_object_ix)))[SPIFFS_OBJ_IX_ENTRY(fs, p_hdr.span_ix)] = new_data_pix;
   d4d42:	69e8      	ldr	r0, [r5, #28]
   d4d44:	f1a0 022d 	sub.w	r2, r0, #45	; 0x2d
   d4d48:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
   d4d4c:	bf28      	it	cs
   d4d4e:	3808      	subcs	r0, #8
   d4d50:	ea4f 0752 	mov.w	r7, r2, lsr #1
   d4d54:	bf21      	itttt	cs
   d4d56:	1bdb      	subcs	r3, r3, r7
   d4d58:	0840      	lsrcs	r0, r0, #1
   d4d5a:	fbb3 f2f0 	udivcs	r2, r3, r0
   d4d5e:	fb00 3312 	mlscs	r3, r0, r2, r3
   d4d62:	3304      	adds	r3, #4
   d4d64:	9a06      	ldr	r2, [sp, #24]
   d4d66:	005b      	lsls	r3, r3, #1
   d4d68:	52d1      	strh	r1, [r2, r3]
                SPIFFS_GC_DBG("gc_clean: MOVE_DATA wrote page "_SPIPRIpg" to objix entry "_SPIPRIsp" in mem\n", new_data_pix, (spiffs_span_ix)SPIFFS_OBJ_IX_ENTRY(fs, p_hdr.span_ix));
   d4d6a:	69eb      	ldr	r3, [r5, #28]
   d4d6c:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   d4d70:	f1a3 002d 	sub.w	r0, r3, #45	; 0x2d
   d4d74:	ebb2 0f50 	cmp.w	r2, r0, lsr #1
   d4d78:	ea4f 0750 	mov.w	r7, r0, lsr #1
   d4d7c:	d307      	bcc.n	d4d8e <spiffs_gc_clean+0x3ee>
   d4d7e:	3b08      	subs	r3, #8
   d4d80:	1bd2      	subs	r2, r2, r7
   d4d82:	085b      	lsrs	r3, r3, #1
   d4d84:	fbb2 f0f3 	udiv	r0, r2, r3
   d4d88:	fb03 2210 	mls	r2, r3, r0, r2
   d4d8c:	b292      	uxth	r2, r2
   d4d8e:	4880      	ldr	r0, [pc, #512]	; (d4f90 <spiffs_gc_clean+0x5f0>)
   d4d90:	e7d4      	b.n	d4d3c <spiffs_gc_clean+0x39c>
          if (obj_id != SPIFFS_OBJ_ID_DELETED && obj_id != SPIFFS_OBJ_ID_FREE &&
   d4d92:	f48a 4100 	eor.w	r1, sl, #32768	; 0x8000
   d4d96:	f647 72fe 	movw	r2, #32766	; 0x7ffe
   d4d9a:	4291      	cmp	r1, r2
   d4d9c:	f63f af54 	bhi.w	d4c48 <spiffs_gc_clean+0x2a8>
            res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
   d4da0:	692a      	ldr	r2, [r5, #16]
   d4da2:	2105      	movs	r1, #5
   d4da4:	af0d      	add	r7, sp, #52	; 0x34
   d4da6:	9100      	str	r1, [sp, #0]
   d4da8:	fb03 2308 	mla	r3, r3, r8, r2
   d4dac:	9701      	str	r7, [sp, #4]
   d4dae:	2200      	movs	r2, #0
   d4db0:	2115      	movs	r1, #21
   d4db2:	4628      	mov	r0, r5
   d4db4:	f7ff fa38 	bl	d4228 <spiffs_phys_rd>
            SPIFFS_CHECK_RES(res);
   d4db8:	1e04      	subs	r4, r0, #0
   d4dba:	f6ff af76 	blt.w	d4caa <spiffs_gc_clean+0x30a>
            if (p_hdr.flags & SPIFFS_PH_FLAG_DELET) {
   d4dbe:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
   d4dc2:	2b00      	cmp	r3, #0
   d4dc4:	da3a      	bge.n	d4e3c <spiffs_gc_clean+0x49c>
              res = spiffs_page_move(fs, 0, 0, obj_id, &p_hdr, cur_pix, &new_pix);
   d4dc6:	2200      	movs	r2, #0
   d4dc8:	f10d 0332 	add.w	r3, sp, #50	; 0x32
   d4dcc:	4611      	mov	r1, r2
   d4dce:	e9cd 8301 	strd	r8, r3, [sp, #4]
   d4dd2:	9700      	str	r7, [sp, #0]
   d4dd4:	4653      	mov	r3, sl
   d4dd6:	4628      	mov	r0, r5
   d4dd8:	f001 fdee 	bl	d69b8 <spiffs_page_move>
              SPIFFS_GC_DBG("gc_clean: MOVE_OBJIX move objix "_SPIPRIid":"_SPIPRIsp" page "_SPIPRIpg" to "_SPIPRIpg"\n", obj_id, p_hdr.span_ix, cur_pix, new_pix);
   d4ddc:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   d4de0:	9300      	str	r3, [sp, #0]
              res = spiffs_page_move(fs, 0, 0, obj_id, &p_hdr, cur_pix, &new_pix);
   d4de2:	4604      	mov	r4, r0
              SPIFFS_GC_DBG("gc_clean: MOVE_OBJIX move objix "_SPIPRIid":"_SPIPRIsp" page "_SPIPRIpg" to "_SPIPRIpg"\n", obj_id, p_hdr.span_ix, cur_pix, new_pix);
   d4de4:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   d4de8:	486a      	ldr	r0, [pc, #424]	; (d4f94 <spiffs_gc_clean+0x5f4>)
   d4dea:	4643      	mov	r3, r8
   d4dec:	4651      	mov	r1, sl
   d4dee:	f00b fe07 	bl	e0a00 <spiffsParticleTraceLog>
              SPIFFS_CHECK_RES(res);
   d4df2:	2c00      	cmp	r4, #0
   d4df4:	f6ff af59 	blt.w	d4caa <spiffs_gc_clean+0x30a>
              spiffs_cb_object_event(fs, (spiffs_page_object_ix *)&p_hdr,
   d4df8:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   d4dfc:	9301      	str	r3, [sp, #4]
   d4dfe:	2400      	movs	r4, #0
   d4e00:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   d4e04:	9402      	str	r4, [sp, #8]
   d4e06:	9300      	str	r3, [sp, #0]
   d4e08:	2203      	movs	r2, #3
   d4e0a:	4653      	mov	r3, sl
   d4e0c:	4639      	mov	r1, r7
   d4e0e:	4628      	mov	r0, r5
   d4e10:	f001 fe78 	bl	d6b04 <spiffs_cb_object_event>
              res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ,
   d4e14:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   d4e18:	6929      	ldr	r1, [r5, #16]
   d4e1a:	9807      	ldr	r0, [sp, #28]
   d4e1c:	fb02 1200 	mla	r2, r2, r0, r1
   d4e20:	6b69      	ldr	r1, [r5, #52]	; 0x34
   d4e22:	4628      	mov	r0, r5
   d4e24:	e9cd 3100 	strd	r3, r1, [sp]
   d4e28:	fb0b 2303 	mla	r3, fp, r3, r2
   d4e2c:	2114      	movs	r1, #20
   d4e2e:	4622      	mov	r2, r4
   d4e30:	f7ff f9fa 	bl	d4228 <spiffs_phys_rd>
              SPIFFS_CHECK_RES(res);
   d4e34:	1e04      	subs	r4, r0, #0
            SPIFFS_CHECK_RES(res);
   d4e36:	f6bf af07 	bge.w	d4c48 <spiffs_gc_clean+0x2a8>
   d4e3a:	e736      	b.n	d4caa <spiffs_gc_clean+0x30a>
              SPIFFS_GC_DBG("gc_clean: MOVE_OBJIX wipe objix "_SPIPRIid":"_SPIPRIsp" page "_SPIPRIpg"\n", obj_id, p_hdr.span_ix, cur_pix);
   d4e3c:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   d4e40:	4855      	ldr	r0, [pc, #340]	; (d4f98 <spiffs_gc_clean+0x5f8>)
   d4e42:	4643      	mov	r3, r8
   d4e44:	4651      	mov	r1, sl
   d4e46:	f00b fddb 	bl	e0a00 <spiffsParticleTraceLog>
              res = spiffs_page_delete(fs, cur_pix);
   d4e4a:	4641      	mov	r1, r8
   d4e4c:	4628      	mov	r0, r5
   d4e4e:	f001 fd6e 	bl	d692e <spiffs_page_delete>
              if (res == SPIFFS_OK) {
   d4e52:	1e04      	subs	r4, r0, #0
   d4e54:	d1ef      	bne.n	d4e36 <spiffs_gc_clean+0x496>
                spiffs_cb_object_event(fs, (spiffs_page_object_ix *)0,
   d4e56:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   d4e5a:	9300      	str	r3, [sp, #0]
   d4e5c:	e9cd 8401 	strd	r8, r4, [sp, #4]
   d4e60:	4653      	mov	r3, sl
   d4e62:	464a      	mov	r2, r9
   d4e64:	4621      	mov	r1, r4
   d4e66:	4628      	mov	r0, r5
   d4e68:	f001 fe4c 	bl	d6b04 <spiffs_cb_object_event>
            SPIFFS_CHECK_RES(res);
   d4e6c:	e6ec      	b.n	d4c48 <spiffs_gc_clean+0x2a8>
    if (res != SPIFFS_OK) break;
   d4e6e:	2c00      	cmp	r4, #0
   d4e70:	f43f adde 	beq.w	d4a30 <spiffs_gc_clean+0x90>
   d4e74:	e719      	b.n	d4caa <spiffs_gc_clean+0x30a>
        SPIFFS_CHECK_RES(res);
   d4e76:	2800      	cmp	r0, #0
   d4e78:	f6ff af17 	blt.w	d4caa <spiffs_gc_clean+0x30a>
        SPIFFS_GC_DBG("gc_clean: FIND_DATA found object index at page "_SPIPRIpg"\n", objix_pix);
   d4e7c:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
   d4e80:	4846      	ldr	r0, [pc, #280]	; (d4f9c <spiffs_gc_clean+0x5fc>)
   d4e82:	f00b fdbd 	bl	e0a00 <spiffsParticleTraceLog>
        res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
   d4e86:	69ea      	ldr	r2, [r5, #28]
   d4e88:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
   d4e8c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   d4e8e:	692b      	ldr	r3, [r5, #16]
   d4e90:	e9cd 2000 	strd	r2, r0, [sp]
   d4e94:	fb02 3301 	mla	r3, r2, r1, r3
   d4e98:	4628      	mov	r0, r5
   d4e9a:	2200      	movs	r2, #0
   d4e9c:	2115      	movs	r1, #21
   d4e9e:	f7ff f9c3 	bl	d4228 <spiffs_phys_rd>
        SPIFFS_CHECK_RES(res);
   d4ea2:	1e04      	subs	r4, r0, #0
   d4ea4:	f6ff af01 	blt.w	d4caa <spiffs_gc_clean+0x30a>
        SPIFFS_VALIDATE_OBJIX(objix->p_hdr, gc.cur_obj_id | SPIFFS_OBJ_ID_IX_FLAG, gc.cur_objix_spix);
   d4ea8:	9b06      	ldr	r3, [sp, #24]
   d4eaa:	791e      	ldrb	r6, [r3, #4]
   d4eac:	07f0      	lsls	r0, r6, #31
   d4eae:	d40e      	bmi.n	d4ece <spiffs_gc_clean+0x52e>
   d4eb0:	0631      	lsls	r1, r6, #24
   d4eb2:	d50e      	bpl.n	d4ed2 <spiffs_gc_clean+0x532>
   d4eb4:	07b2      	lsls	r2, r6, #30
   d4eb6:	d40e      	bmi.n	d4ed6 <spiffs_gc_clean+0x536>
   d4eb8:	f016 0604 	ands.w	r6, r6, #4
   d4ebc:	d10d      	bne.n	d4eda <spiffs_gc_clean+0x53a>
   d4ebe:	885b      	ldrh	r3, [r3, #2]
   d4ec0:	454b      	cmp	r3, r9
   d4ec2:	d10c      	bne.n	d4ede <spiffs_gc_clean+0x53e>
        gc.cur_objix_pix = objix_pix;
   d4ec4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   d4ec8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d4ecc:	e610      	b.n	d4af0 <spiffs_gc_clean+0x150>
        SPIFFS_VALIDATE_OBJIX(objix->p_hdr, gc.cur_obj_id | SPIFFS_OBJ_ID_IX_FLAG, gc.cur_objix_spix);
   d4ece:	4c34      	ldr	r4, [pc, #208]	; (d4fa0 <spiffs_gc_clean+0x600>)
   d4ed0:	e6eb      	b.n	d4caa <spiffs_gc_clean+0x30a>
   d4ed2:	4c34      	ldr	r4, [pc, #208]	; (d4fa4 <spiffs_gc_clean+0x604>)
   d4ed4:	e6e9      	b.n	d4caa <spiffs_gc_clean+0x30a>
   d4ed6:	4c34      	ldr	r4, [pc, #208]	; (d4fa8 <spiffs_gc_clean+0x608>)
   d4ed8:	e6e7      	b.n	d4caa <spiffs_gc_clean+0x30a>
   d4eda:	4c34      	ldr	r4, [pc, #208]	; (d4fac <spiffs_gc_clean+0x60c>)
   d4edc:	e6e5      	b.n	d4caa <spiffs_gc_clean+0x30a>
   d4ede:	4c34      	ldr	r4, [pc, #208]	; (d4fb0 <spiffs_gc_clean+0x610>)
   d4ee0:	e6e3      	b.n	d4caa <spiffs_gc_clean+0x30a>
        gc.state = MOVE_OBJ_IX;
   d4ee2:	2302      	movs	r3, #2
   d4ee4:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
    switch (gc.state) {
   d4ee8:	2600      	movs	r6, #0
   d4eea:	4634      	mov	r4, r6
   d4eec:	e600      	b.n	d4af0 <spiffs_gc_clean+0x150>
      gc.state = FIND_OBJ_DATA;
   d4eee:	f8bd 903e 	ldrh.w	r9, [sp, #62]	; 0x3e
      if (gc.cur_objix_spix == 0) {
   d4ef2:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
      cur_entry = gc.stored_scan_entry_index; // pop cursor
   d4ef6:	9e12      	ldr	r6, [sp, #72]	; 0x48
   d4ef8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   d4efa:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
      gc.state = FIND_OBJ_DATA;
   d4efe:	2700      	movs	r7, #0
   d4f00:	f88d 703c 	strb.w	r7, [sp, #60]	; 0x3c
      if (gc.cur_objix_spix == 0) {
   d4f04:	f449 4200 	orr.w	r2, r9, #32768	; 0x8000
   d4f08:	a80d      	add	r0, sp, #52	; 0x34
   d4f0a:	f1ba 0f00 	cmp.w	sl, #0
   d4f0e:	d113      	bne.n	d4f38 <spiffs_gc_clean+0x598>
        res = spiffs_object_update_index_hdr(fs, 0, gc.cur_obj_id | SPIFFS_OBJ_ID_IX_FLAG, gc.cur_objix_pix, fs->work, 0, 0, 0, &new_objix_pix);
   d4f10:	e9cd a003 	strd	sl, r0, [sp, #12]
   d4f14:	9100      	str	r1, [sp, #0]
   d4f16:	e9cd aa01 	strd	sl, sl, [sp, #4]
   d4f1a:	4651      	mov	r1, sl
   d4f1c:	4628      	mov	r0, r5
   d4f1e:	f001 ffbd 	bl	d6e9c <spiffs_object_update_index_hdr>
        SPIFFS_GC_DBG("gc_clean: MOVE_DATA store modified objix_hdr page, "_SPIPRIpg":"_SPIPRIsp"\n", new_objix_pix, 0);
   d4f22:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
        res = spiffs_object_update_index_hdr(fs, 0, gc.cur_obj_id | SPIFFS_OBJ_ID_IX_FLAG, gc.cur_objix_pix, fs->work, 0, 0, 0, &new_objix_pix);
   d4f26:	4604      	mov	r4, r0
        SPIFFS_GC_DBG("gc_clean: MOVE_DATA store modified objix_hdr page, "_SPIPRIpg":"_SPIPRIsp"\n", new_objix_pix, 0);
   d4f28:	4652      	mov	r2, sl
   d4f2a:	4822      	ldr	r0, [pc, #136]	; (d4fb4 <spiffs_gc_clean+0x614>)
   d4f2c:	f00b fd68 	bl	e0a00 <spiffsParticleTraceLog>
        SPIFFS_CHECK_RES(res);
   d4f30:	42bc      	cmp	r4, r7
   d4f32:	f6bf addd 	bge.w	d4af0 <spiffs_gc_clean+0x150>
   d4f36:	e6b8      	b.n	d4caa <spiffs_gc_clean+0x30a>
        res = spiffs_page_move(fs, 0, fs->work, gc.cur_obj_id | SPIFFS_OBJ_ID_IX_FLAG, 0, gc.cur_objix_pix, &new_objix_pix);
   d4f38:	e9cd 3001 	strd	r3, r0, [sp, #4]
   d4f3c:	9700      	str	r7, [sp, #0]
   d4f3e:	4613      	mov	r3, r2
   d4f40:	4628      	mov	r0, r5
   d4f42:	460a      	mov	r2, r1
   d4f44:	4639      	mov	r1, r7
   d4f46:	f001 fd37 	bl	d69b8 <spiffs_page_move>
        SPIFFS_GC_DBG("gc_clean: MOVE_DATA store modified objix page, "_SPIPRIpg":"_SPIPRIsp"\n", new_objix_pix, objix->p_hdr.span_ix);
   d4f4a:	9b06      	ldr	r3, [sp, #24]
   d4f4c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
   d4f50:	885a      	ldrh	r2, [r3, #2]
        res = spiffs_page_move(fs, 0, fs->work, gc.cur_obj_id | SPIFFS_OBJ_ID_IX_FLAG, 0, gc.cur_objix_pix, &new_objix_pix);
   d4f52:	4604      	mov	r4, r0
        SPIFFS_GC_DBG("gc_clean: MOVE_DATA store modified objix page, "_SPIPRIpg":"_SPIPRIsp"\n", new_objix_pix, objix->p_hdr.span_ix);
   d4f54:	4818      	ldr	r0, [pc, #96]	; (d4fb8 <spiffs_gc_clean+0x618>)
   d4f56:	f00b fd53 	bl	e0a00 <spiffsParticleTraceLog>
        SPIFFS_CHECK_RES(res);
   d4f5a:	2c00      	cmp	r4, #0
   d4f5c:	f6ff aea5 	blt.w	d4caa <spiffs_gc_clean+0x30a>
        spiffs_cb_object_event(fs, (spiffs_page_object_ix *)fs->work,
   d4f60:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   d4f64:	9301      	str	r3, [sp, #4]
   d4f66:	9b06      	ldr	r3, [sp, #24]
   d4f68:	9702      	str	r7, [sp, #8]
   d4f6a:	885b      	ldrh	r3, [r3, #2]
   d4f6c:	9300      	str	r3, [sp, #0]
   d4f6e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   d4f70:	464b      	mov	r3, r9
   d4f72:	463a      	mov	r2, r7
   d4f74:	4628      	mov	r0, r5
   d4f76:	f001 fdc5 	bl	d6b04 <spiffs_cb_object_event>
    break;
   d4f7a:	e5b9      	b.n	d4af0 <spiffs_gc_clean+0x150>
      gc.state = FINISHED;
   d4f7c:	2303      	movs	r3, #3
   d4f7e:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
      break;
   d4f82:	2400      	movs	r4, #0
   d4f84:	e5b4      	b.n	d4af0 <spiffs_gc_clean+0x150>
   d4f86:	bf00      	nop
   d4f88:	000e5b38 	.word	0x000e5b38
   d4f8c:	000e5b6c 	.word	0x000e5b6c
   d4f90:	000e5bb0 	.word	0x000e5bb0
   d4f94:	000e5bf0 	.word	0x000e5bf0
   d4f98:	000e5c2d 	.word	0x000e5c2d
   d4f9c:	000e5cc8 	.word	0x000e5cc8
   d4fa0:	ffffd8e4 	.word	0xffffd8e4
   d4fa4:	ffffd8ec 	.word	0xffffd8ec
   d4fa8:	ffffd8eb 	.word	0xffffd8eb
   d4fac:	ffffd8ea 	.word	0xffffd8ea
   d4fb0:	ffffd8e3 	.word	0xffffd8e3
   d4fb4:	000e5cfd 	.word	0x000e5cfd
   d4fb8:	000e5d3b 	.word	0x000e5d3b

000d4fbc <spiffs_gc_check>:
    u32_t len) {
   d4fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      (SPIFFS_PAGES_PER_BLOCK(fs) - SPIFFS_OBJ_LOOKUP_PAGES(fs)) * (fs->block_count-2)
   d4fc0:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
    u32_t len) {
   d4fc4:	4604      	mov	r4, r0
      (SPIFFS_PAGES_PER_BLOCK(fs) - SPIFFS_OBJ_LOOKUP_PAGES(fs)) * (fs->block_count-2)
   d4fc6:	fbb3 f3f2 	udiv	r3, r3, r2
   d4fca:	6a00      	ldr	r0, [r0, #32]
   d4fcc:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    u32_t len) {
   d4fd0:	460f      	mov	r7, r1
      (SPIFFS_PAGES_PER_BLOCK(fs) - SPIFFS_OBJ_LOOKUP_PAGES(fs)) * (fs->block_count-2)
   d4fd2:	ea4f 0143 	mov.w	r1, r3, lsl #1
   d4fd6:	bf8c      	ite	hi
   d4fd8:	2101      	movhi	r1, #1
   d4fda:	fbb1 f1f2 	udivls	r1, r1, r2
   d4fde:	3802      	subs	r0, #2
   d4fe0:	1a5b      	subs	r3, r3, r1
      - fs->stats_p_allocated - fs->stats_p_deleted;
   d4fe2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      (SPIFFS_PAGES_PER_BLOCK(fs) - SPIFFS_OBJ_LOOKUP_PAGES(fs)) * (fs->block_count-2)
   d4fe4:	4343      	muls	r3, r0
      - fs->stats_p_allocated - fs->stats_p_deleted;
   d4fe6:	1a5b      	subs	r3, r3, r1
  if (fs->free_blocks > 3 &&
   d4fe8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
      - fs->stats_p_allocated - fs->stats_p_deleted;
   d4fea:	6d20      	ldr	r0, [r4, #80]	; 0x50
  if (fs->free_blocks > 3 &&
   d4fec:	2903      	cmp	r1, #3
    u32_t len) {
   d4fee:	b08b      	sub	sp, #44	; 0x2c
      - fs->stats_p_allocated - fs->stats_p_deleted;
   d4ff0:	eba3 0600 	sub.w	r6, r3, r0
  if (fs->free_blocks > 3 &&
   d4ff4:	f1a2 0505 	sub.w	r5, r2, #5
   d4ff8:	d904      	bls.n	d5004 <spiffs_gc_check+0x48>
      (s32_t)len < free_pages * (s32_t)SPIFFS_DATA_PAGE_SIZE(fs)) {
   d4ffa:	fb06 fc05 	mul.w	ip, r6, r5
  if (fs->free_blocks > 3 &&
   d4ffe:	45bc      	cmp	ip, r7
   d5000:	f300 80b4 	bgt.w	d516c <spiffs_gc_check+0x1b0>
  u32_t needed_pages = (len + SPIFFS_DATA_PAGE_SIZE(fs) - 1) / SPIFFS_DATA_PAGE_SIZE(fs);
   d5004:	f1a7 0806 	sub.w	r8, r7, #6
   d5008:	4490      	add	r8, r2
   d500a:	fbb8 f8f5 	udiv	r8, r8, r5
  if ((s32_t)needed_pages > (s32_t)(free_pages + fs->stats_p_deleted)) {
   d500e:	4543      	cmp	r3, r8
   d5010:	da0a      	bge.n	d5028 <spiffs_gc_check+0x6c>
    SPIFFS_GC_DBG("gc_check: full freeblk:"_SPIPRIi" needed:"_SPIPRIi" free:"_SPIPRIi" dele:"_SPIPRIi"\n", fs->free_blocks, needed_pages, free_pages, fs->stats_p_deleted);
   d5012:	9000      	str	r0, [sp, #0]
   d5014:	4633      	mov	r3, r6
   d5016:	4856      	ldr	r0, [pc, #344]	; (d5170 <spiffs_gc_check+0x1b4>)
    return SPIFFS_ERR_FULL;
   d5018:	4d56      	ldr	r5, [pc, #344]	; (d5174 <spiffs_gc_check+0x1b8>)
    SPIFFS_GC_DBG("gc_check: full freeblk:"_SPIPRIi" needed:"_SPIPRIi" free:"_SPIPRIi" dele:"_SPIPRIi"\n", fs->free_blocks, needed_pages, free_pages, fs->stats_p_deleted);
   d501a:	4642      	mov	r2, r8
   d501c:	f00b fcf0 	bl	e0a00 <spiffsParticleTraceLog>
}
   d5020:	4628      	mov	r0, r5
   d5022:	b00b      	add	sp, #44	; 0x2c
   d5024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      SPIFFS_GC_DBG("gc_check: cleaning block "_SPIPRIi", result "_SPIPRIi"\n", cand, res);
   d5028:	f8df b14c 	ldr.w	fp, [pc, #332]	; d5178 <spiffs_gc_check+0x1bc>
  int tries = 0;
   d502c:	f04f 0900 	mov.w	r9, #0
   d5030:	e072      	b.n	d5118 <spiffs_gc_check+0x15c>
    fs->stats_gc_runs++;
   d5032:	6da3      	ldr	r3, [r4, #88]	; 0x58
   d5034:	3301      	adds	r3, #1
   d5036:	65a3      	str	r3, [r4, #88]	; 0x58
    cand = cands[0];
   d5038:	9b08      	ldr	r3, [sp, #32]
    fs->cleaning = 1;
   d503a:	f04f 0a01 	mov.w	sl, #1
    cand = cands[0];
   d503e:	8819      	ldrh	r1, [r3, #0]
    fs->cleaning = 1;
   d5040:	f884 a054 	strb.w	sl, [r4, #84]	; 0x54
    res = spiffs_gc_clean(fs, cand);
   d5044:	4620      	mov	r0, r4
   d5046:	9107      	str	r1, [sp, #28]
   d5048:	f7ff fcaa 	bl	d49a0 <spiffs_gc_clean>
    fs->cleaning = 0;
   d504c:	2300      	movs	r3, #0
    if (res < 0) {
   d504e:	1e05      	subs	r5, r0, #0
   d5050:	9907      	ldr	r1, [sp, #28]
    fs->cleaning = 0;
   d5052:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      SPIFFS_GC_DBG("gc_check: cleaning block "_SPIPRIi", result "_SPIPRIi"\n", cand, res);
   d5056:	462a      	mov	r2, r5
    if (res < 0) {
   d5058:	da03      	bge.n	d5062 <spiffs_gc_check+0xa6>
      SPIFFS_GC_DBG("gc_check: cleaning block "_SPIPRIi", result "_SPIPRIi"\n", cand, res);
   d505a:	4847      	ldr	r0, [pc, #284]	; (d5178 <spiffs_gc_check+0x1bc>)
   d505c:	f00b fcd0 	bl	e0a00 <spiffsParticleTraceLog>
    SPIFFS_CHECK_RES(res);
   d5060:	e7de      	b.n	d5020 <spiffs_gc_check+0x64>
      SPIFFS_GC_DBG("gc_check: cleaning block "_SPIPRIi", result "_SPIPRIi"\n", cand, res);
   d5062:	4658      	mov	r0, fp
   d5064:	9107      	str	r1, [sp, #28]
   d5066:	f00b fccb 	bl	e0a00 <spiffsParticleTraceLog>
    res = spiffs_gc_erase_page_stats(fs, cand);
   d506a:	9907      	ldr	r1, [sp, #28]
   d506c:	4620      	mov	r0, r4
   d506e:	f7ff fb1f 	bl	d46b0 <spiffs_gc_erase_page_stats>
    SPIFFS_CHECK_RES(res);
   d5072:	1e05      	subs	r5, r0, #0
   d5074:	dbd4      	blt.n	d5020 <spiffs_gc_check+0x64>
    res = spiffs_gc_erase_block(fs, cand);
   d5076:	9907      	ldr	r1, [sp, #28]
   d5078:	4620      	mov	r0, r4
   d507a:	f7ff fa47 	bl	d450c <spiffs_gc_erase_block>
    SPIFFS_CHECK_RES(res);
   d507e:	1e05      	subs	r5, r0, #0
   d5080:	dbce      	blt.n	d5020 <spiffs_gc_check+0x64>
          (SPIFFS_PAGES_PER_BLOCK(fs) - SPIFFS_OBJ_LOOKUP_PAGES(fs)) * (fs->block_count - 2)
   d5082:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
   d5086:	fbb3 f3f2 	udiv	r3, r3, r2
   d508a:	0059      	lsls	r1, r3, #1
   d508c:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
   d5090:	bf98      	it	ls
   d5092:	fbb1 faf2 	udivls	sl, r1, r2
   d5096:	6a21      	ldr	r1, [r4, #32]
   d5098:	eba3 0a0a 	sub.w	sl, r3, sl
   d509c:	3902      	subs	r1, #2
   d509e:	fb0a fa01 	mul.w	sl, sl, r1
          - fs->stats_p_allocated - fs->stats_p_deleted;
   d50a2:	e9d4 3113 	ldrd	r3, r1, [r4, #76]	; 0x4c
    if (prev_free_pages <= 0 && prev_free_pages == free_pages) {
   d50a6:	2e00      	cmp	r6, #0
          - fs->stats_p_allocated - fs->stats_p_deleted;
   d50a8:	440b      	add	r3, r1
   d50aa:	ebaa 0a03 	sub.w	sl, sl, r3
    if (prev_free_pages <= 0 && prev_free_pages == free_pages) {
   d50ae:	dc25      	bgt.n	d50fc <spiffs_gc_check+0x140>
   d50b0:	4556      	cmp	r6, sl
   d50b2:	d123      	bne.n	d50fc <spiffs_gc_check+0x140>
      SPIFFS_GC_DBG("gc_check: early abort, no result on gc when fs crammed\n");
   d50b4:	4831      	ldr	r0, [pc, #196]	; (d517c <spiffs_gc_check+0x1c0>)
   d50b6:	f00b fca3 	bl	e0a00 <spiffsParticleTraceLog>
        (SPIFFS_PAGES_PER_BLOCK(fs) - SPIFFS_OBJ_LOOKUP_PAGES(fs)) * (fs->block_count - 2)
   d50ba:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
   d50be:	e9d4 0113 	ldrd	r0, r1, [r4, #76]	; 0x4c
   d50c2:	fbb3 f3f2 	udiv	r3, r3, r2
   d50c6:	4401      	add	r1, r0
   d50c8:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
   d50cc:	6a20      	ldr	r0, [r4, #32]
   d50ce:	ea4f 0643 	mov.w	r6, r3, lsl #1
   d50d2:	bf8c      	ite	hi
   d50d4:	2601      	movhi	r6, #1
   d50d6:	fbb6 f6f2 	udivls	r6, r6, r2
   d50da:	3802      	subs	r0, #2
   d50dc:	1b9b      	subs	r3, r3, r6
   d50de:	4343      	muls	r3, r0
        - fs->stats_p_allocated - fs->stats_p_deleted;
   d50e0:	1a5b      	subs	r3, r3, r1
    res = SPIFFS_ERR_FULL;
   d50e2:	4824      	ldr	r0, [pc, #144]	; (d5174 <spiffs_gc_check+0x1b8>)
  if ((s32_t)len > free_pages*(s32_t)SPIFFS_DATA_PAGE_SIZE(fs)) {
   d50e4:	3a05      	subs	r2, #5
   d50e6:	435a      	muls	r2, r3
    res = SPIFFS_ERR_FULL;
   d50e8:	42ba      	cmp	r2, r7
   d50ea:	bfb8      	it	lt
   d50ec:	4605      	movlt	r5, r0
  SPIFFS_GC_DBG("gc_check: finished, "_SPIPRIi" dirty, blocks "_SPIPRIi" free, "_SPIPRIi" pages free, "_SPIPRIi" tries, res "_SPIPRIi"\n",
   d50ee:	e9cd 9500 	strd	r9, r5, [sp]
   d50f2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   d50f4:	4822      	ldr	r0, [pc, #136]	; (d5180 <spiffs_gc_check+0x1c4>)
   d50f6:	f00b fc83 	bl	e0a00 <spiffsParticleTraceLog>
  return res;
   d50fa:	e791      	b.n	d5020 <spiffs_gc_check+0x64>
      (s32_t)len > free_pages*(s32_t)SPIFFS_DATA_PAGE_SIZE(fs)));
   d50fc:	f109 0901 	add.w	r9, r9, #1
   d5100:	f1b9 0f05 	cmp.w	r9, #5
   d5104:	d0d9      	beq.n	d50ba <spiffs_gc_check+0xfe>
  } while (++tries < SPIFFS_GC_MAX_RUNS && (fs->free_blocks <= 2 ||
   d5106:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d5108:	2b02      	cmp	r3, #2
   d510a:	d904      	bls.n	d5116 <spiffs_gc_check+0x15a>
      (s32_t)len > free_pages*(s32_t)SPIFFS_DATA_PAGE_SIZE(fs)));
   d510c:	3a05      	subs	r2, #5
   d510e:	fb0a f202 	mul.w	r2, sl, r2
  } while (++tries < SPIFFS_GC_MAX_RUNS && (fs->free_blocks <= 2 ||
   d5112:	42ba      	cmp	r2, r7
   d5114:	dad1      	bge.n	d50ba <spiffs_gc_check+0xfe>
      (SPIFFS_PAGES_PER_BLOCK(fs) - SPIFFS_OBJ_LOOKUP_PAGES(fs)) * (fs->block_count-2)
   d5116:	4656      	mov	r6, sl
    SPIFFS_GC_DBG("\ngc_check #"_SPIPRIi": run gc free_blocks:"_SPIPRIi" pfree:"_SPIPRIi" pallo:"_SPIPRIi" pdele:"_SPIPRIi" ["_SPIPRIi"] len:"_SPIPRIi" of "_SPIPRIi"\n",
   d5118:	69e3      	ldr	r3, [r4, #28]
   d511a:	481a      	ldr	r0, [pc, #104]	; (d5184 <spiffs_gc_check+0x1c8>)
   d511c:	e9d4 2113 	ldrd	r2, r1, [r4, #76]	; 0x4c
   d5120:	3b05      	subs	r3, #5
   d5122:	4373      	muls	r3, r6
   d5124:	e9cd 7303 	strd	r7, r3, [sp, #12]
   d5128:	1853      	adds	r3, r2, r1
   d512a:	4433      	add	r3, r6
   d512c:	e9cd 1301 	strd	r1, r3, [sp, #4]
   d5130:	9200      	str	r2, [sp, #0]
   d5132:	4633      	mov	r3, r6
   d5134:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   d5136:	4649      	mov	r1, r9
   d5138:	f00b fc62 	bl	e0a00 <spiffsParticleTraceLog>
    res = spiffs_gc_find_candidate(fs, &cands, &count, free_pages <= 0);
   d513c:	2e00      	cmp	r6, #0
   d513e:	bfcc      	ite	gt
   d5140:	2300      	movgt	r3, #0
   d5142:	2301      	movle	r3, #1
   d5144:	aa09      	add	r2, sp, #36	; 0x24
   d5146:	a908      	add	r1, sp, #32
   d5148:	4620      	mov	r0, r4
   d514a:	f7ff fb1b 	bl	d4784 <spiffs_gc_find_candidate>
    SPIFFS_CHECK_RES(res);
   d514e:	1e05      	subs	r5, r0, #0
   d5150:	f6ff af66 	blt.w	d5020 <spiffs_gc_check+0x64>
    if (count == 0) {
   d5154:	9d09      	ldr	r5, [sp, #36]	; 0x24
   d5156:	2d00      	cmp	r5, #0
   d5158:	f47f af6b 	bne.w	d5032 <spiffs_gc_check+0x76>
      SPIFFS_GC_DBG("gc_check: no candidates, return\n");
   d515c:	480a      	ldr	r0, [pc, #40]	; (d5188 <spiffs_gc_check+0x1cc>)
   d515e:	f00b fc4f 	bl	e0a00 <spiffsParticleTraceLog>
      return (s32_t)needed_pages < free_pages ? SPIFFS_OK : SPIFFS_ERR_FULL;
   d5162:	4b04      	ldr	r3, [pc, #16]	; (d5174 <spiffs_gc_check+0x1b8>)
   d5164:	45b0      	cmp	r8, r6
   d5166:	bfa8      	it	ge
   d5168:	461d      	movge	r5, r3
   d516a:	e759      	b.n	d5020 <spiffs_gc_check+0x64>
    return SPIFFS_OK;
   d516c:	2500      	movs	r5, #0
   d516e:	e757      	b.n	d5020 <spiffs_gc_check+0x64>
   d5170:	000e5d8b 	.word	0x000e5d8b
   d5174:	ffffd8ef 	.word	0xffffd8ef
   d5178:	000e5e34 	.word	0x000e5e34
   d517c:	000e5e5c 	.word	0x000e5e5c
   d5180:	000e5e94 	.word	0x000e5e94
   d5184:	000e5dc0 	.word	0x000e5dc0
   d5188:	000e5e13 	.word	0x000e5e13

000d518c <spiffs_stat_pix>:

  return 0;
#endif // SPIFFS_READ_ONLY
}

static s32_t spiffs_stat_pix(spiffs *fs, spiffs_page_ix pix, spiffs_file fh, spiffs_stat *s) {
   d518c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5190:	b090      	sub	sp, #64	; 0x40
   d5192:	460f      	mov	r7, r1
  (void)fh;
  spiffs_page_object_ix_header objix_hdr;
  spiffs_obj_id obj_id;
  s32_t res =_spiffs_rd(fs,  SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ, fh,
   d5194:	ac04      	add	r4, sp, #16
   d5196:	69c1      	ldr	r1, [r0, #28]
static s32_t spiffs_stat_pix(spiffs *fs, spiffs_page_ix pix, spiffs_file fh, spiffs_stat *s) {
   d5198:	461e      	mov	r6, r3
  s32_t res =_spiffs_rd(fs,  SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ, fh,
   d519a:	6903      	ldr	r3, [r0, #16]
   d519c:	9401      	str	r4, [sp, #4]
   d519e:	242d      	movs	r4, #45	; 0x2d
   d51a0:	9400      	str	r4, [sp, #0]
   d51a2:	fb01 3307 	mla	r3, r1, r7, r3
   d51a6:	2116      	movs	r1, #22
static s32_t spiffs_stat_pix(spiffs *fs, spiffs_page_ix pix, spiffs_file fh, spiffs_stat *s) {
   d51a8:	4605      	mov	r5, r0
   d51aa:	4690      	mov	r8, r2
  s32_t res =_spiffs_rd(fs,  SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ, fh,
   d51ac:	f7ff f83c 	bl	d4228 <spiffs_phys_rd>
      SPIFFS_PAGE_TO_PADDR(fs, pix), sizeof(spiffs_page_object_ix_header), (u8_t *)&objix_hdr);
  SPIFFS_API_CHECK_RES(fs, res);
   d51b0:	1e04      	subs	r4, r0, #0
   d51b2:	da04      	bge.n	d51be <spiffs_stat_pix+0x32>

  u32_t obj_id_addr = SPIFFS_BLOCK_TO_PADDR(fs, SPIFFS_BLOCK_FOR_PAGE(fs , pix)) +
      SPIFFS_OBJ_LOOKUP_ENTRY_FOR_PAGE(fs, pix) * sizeof(spiffs_obj_id);
  res =_spiffs_rd(fs,  SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ, fh,
      obj_id_addr, sizeof(spiffs_obj_id), (u8_t *)&obj_id);
  SPIFFS_API_CHECK_RES(fs, res);
   d51b4:	646c      	str	r4, [r5, #68]	; 0x44
#if SPIFFS_OBJ_META_LEN
  _SPIFFS_MEMCPY(s->meta, objix_hdr.meta, SPIFFS_OBJ_META_LEN);
#endif

  return res;
}
   d51b6:	4620      	mov	r0, r4
   d51b8:	b010      	add	sp, #64	; 0x40
   d51ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SPIFFS_OBJ_LOOKUP_ENTRY_FOR_PAGE(fs, pix) * sizeof(spiffs_obj_id);
   d51be:	e9d5 c406 	ldrd	ip, r4, [r5, #24]
  u32_t obj_id_addr = SPIFFS_BLOCK_TO_PADDR(fs, SPIFFS_BLOCK_FOR_PAGE(fs , pix)) +
   d51c2:	f8d5 e010 	ldr.w	lr, [r5, #16]
      SPIFFS_OBJ_LOOKUP_ENTRY_FOR_PAGE(fs, pix) * sizeof(spiffs_obj_id);
   d51c6:	fbbc f2f4 	udiv	r2, ip, r4
   d51ca:	ebb4 0f42 	cmp.w	r4, r2, lsl #1
   d51ce:	ea4f 0342 	mov.w	r3, r2, lsl #1
   d51d2:	fbb7 f1f2 	udiv	r1, r7, r2
   d51d6:	bf88      	it	hi
   d51d8:	2301      	movhi	r3, #1
   d51da:	fb02 7011 	mls	r0, r2, r1, r7
  res =_spiffs_rd(fs,  SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ, fh,
   d51de:	f10d 020e 	add.w	r2, sp, #14
  u32_t obj_id_addr = SPIFFS_BLOCK_TO_PADDR(fs, SPIFFS_BLOCK_FOR_PAGE(fs , pix)) +
   d51e2:	fb0c e101 	mla	r1, ip, r1, lr
      SPIFFS_OBJ_LOOKUP_ENTRY_FOR_PAGE(fs, pix) * sizeof(spiffs_obj_id);
   d51e6:	bf98      	it	ls
   d51e8:	fbb3 f3f4 	udivls	r3, r3, r4
  res =_spiffs_rd(fs,  SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ, fh,
   d51ec:	9201      	str	r2, [sp, #4]
      SPIFFS_OBJ_LOOKUP_ENTRY_FOR_PAGE(fs, pix) * sizeof(spiffs_obj_id);
   d51ee:	1ac3      	subs	r3, r0, r3
  res =_spiffs_rd(fs,  SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ, fh,
   d51f0:	2202      	movs	r2, #2
   d51f2:	9200      	str	r2, [sp, #0]
   d51f4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   d51f8:	4642      	mov	r2, r8
   d51fa:	2114      	movs	r1, #20
   d51fc:	4628      	mov	r0, r5
   d51fe:	f7ff f813 	bl	d4228 <spiffs_phys_rd>
  SPIFFS_API_CHECK_RES(fs, res);
   d5202:	1e04      	subs	r4, r0, #0
   d5204:	dbd6      	blt.n	d51b4 <spiffs_stat_pix+0x28>
  s->obj_id = obj_id & ~SPIFFS_OBJ_ID_IX_FLAG;
   d5206:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  s->pix = pix;
   d520a:	8177      	strh	r7, [r6, #10]
  s->obj_id = obj_id & ~SPIFFS_OBJ_ID_IX_FLAG;
   d520c:	f3c3 030e 	ubfx	r3, r3, #0, #15
   d5210:	8033      	strh	r3, [r6, #0]
  s->type = objix_hdr.type;
   d5212:	f89d 301c 	ldrb.w	r3, [sp, #28]
   d5216:	7233      	strb	r3, [r6, #8]
  s->size = objix_hdr.size == SPIFFS_UNDEFINED_LEN ? 0 : objix_hdr.size;
   d5218:	9b06      	ldr	r3, [sp, #24]
   d521a:	1c5a      	adds	r2, r3, #1
   d521c:	bf08      	it	eq
   d521e:	2300      	moveq	r3, #0
   d5220:	6073      	str	r3, [r6, #4]
  strncpy((char *)s->name, (char *)objix_hdr.name, SPIFFS_OBJ_NAME_LEN);
   d5222:	2220      	movs	r2, #32
   d5224:	f10d 011d 	add.w	r1, sp, #29
   d5228:	f106 000c 	add.w	r0, r6, #12
   d522c:	f010 facd 	bl	e57ca <strncpy>
  return res;
   d5230:	e7c1      	b.n	d51b6 <spiffs_stat_pix+0x2a>
	...

000d5234 <spiffs_read_dir_v>:
    spiffs *fs,
    spiffs_obj_id obj_id,
    spiffs_block_ix bix,
    int ix_entry,
    const void *user_const_p,
    void *user_var_p) {
   d5234:	b5f0      	push	{r4, r5, r6, r7, lr}
  (void)user_const_p;
  s32_t res;
  spiffs_page_object_ix_header objix_hdr;
  if (obj_id == SPIFFS_OBJ_ID_FREE || obj_id == SPIFFS_OBJ_ID_DELETED ||
   d5236:	f481 4400 	eor.w	r4, r1, #32768	; 0x8000
    void *user_var_p) {
   d523a:	b08f      	sub	sp, #60	; 0x3c
   d523c:	460d      	mov	r5, r1
  if (obj_id == SPIFFS_OBJ_ID_FREE || obj_id == SPIFFS_OBJ_ID_DELETED ||
   d523e:	f647 71fe 	movw	r1, #32766	; 0x7ffe
   d5242:	428c      	cmp	r4, r1
    void *user_var_p) {
   d5244:	9e15      	ldr	r6, [sp, #84]	; 0x54
  if (obj_id == SPIFFS_OBJ_ID_FREE || obj_id == SPIFFS_OBJ_ID_DELETED ||
   d5246:	d903      	bls.n	d5250 <spiffs_read_dir_v+0x1c>
      (obj_id & SPIFFS_OBJ_ID_IX_FLAG) == 0) {
    return SPIFFS_VIS_COUNTINUE;
   d5248:	4f20      	ldr	r7, [pc, #128]	; (d52cc <spiffs_read_dir_v+0x98>)
    _SPIFFS_MEMCPY(e->meta, objix_hdr.meta, SPIFFS_OBJ_META_LEN);
#endif
    return SPIFFS_OK;
  }
  return SPIFFS_VIS_COUNTINUE;
}
   d524a:	4638      	mov	r0, r7
   d524c:	b00f      	add	sp, #60	; 0x3c
   d524e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  spiffs_page_ix pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, ix_entry);
   d5250:	e9d0 1706 	ldrd	r1, r7, [r0, #24]
   d5254:	fbb1 f1f7 	udiv	r1, r1, r7
   d5258:	fb11 f202 	smulbb	r2, r1, r2
   d525c:	ebb7 0f41 	cmp.w	r7, r1, lsl #1
   d5260:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5264:	b292      	uxth	r2, r2
   d5266:	bf98      	it	ls
   d5268:	fbb4 f4f7 	udivls	r4, r4, r7
   d526c:	4413      	add	r3, r2
   d526e:	bf94      	ite	ls
   d5270:	b2a4      	uxthls	r4, r4
   d5272:	2401      	movhi	r4, #1
   d5274:	441c      	add	r4, r3
  res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
   d5276:	aa02      	add	r2, sp, #8
   d5278:	6903      	ldr	r3, [r0, #16]
   d527a:	9201      	str	r2, [sp, #4]
  spiffs_page_ix pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, ix_entry);
   d527c:	b2a4      	uxth	r4, r4
  res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
   d527e:	222d      	movs	r2, #45	; 0x2d
   d5280:	9200      	str	r2, [sp, #0]
   d5282:	fb07 3304 	mla	r3, r7, r4, r3
   d5286:	2200      	movs	r2, #0
   d5288:	2115      	movs	r1, #21
   d528a:	f7fe ffcd 	bl	d4228 <spiffs_phys_rd>
  if (res != SPIFFS_OK) return res;
   d528e:	4607      	mov	r7, r0
   d5290:	2800      	cmp	r0, #0
   d5292:	d1da      	bne.n	d524a <spiffs_read_dir_v+0x16>
  if ((obj_id & SPIFFS_OBJ_ID_IX_FLAG) &&
   d5294:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   d5298:	2b00      	cmp	r3, #0
   d529a:	d1d5      	bne.n	d5248 <spiffs_read_dir_v+0x14>
      objix_hdr.p_hdr.span_ix == 0 &&
   d529c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d52a0:	f003 03c2 	and.w	r3, r3, #194	; 0xc2
   d52a4:	2bc0      	cmp	r3, #192	; 0xc0
   d52a6:	d1cf      	bne.n	d5248 <spiffs_read_dir_v+0x14>
    e->obj_id = obj_id;
   d52a8:	4630      	mov	r0, r6
    strcpy((char *)e->name, (char *)objix_hdr.name);
   d52aa:	f10d 0115 	add.w	r1, sp, #21
    e->obj_id = obj_id;
   d52ae:	f820 5b02 	strh.w	r5, [r0], #2
    strcpy((char *)e->name, (char *)objix_hdr.name);
   d52b2:	f010 fa4a 	bl	e574a <strcpy>
    e->type = objix_hdr.type;
   d52b6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d52ba:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
    e->size = objix_hdr.size == SPIFFS_UNDEFINED_LEN ? 0 : objix_hdr.size;
   d52be:	9b04      	ldr	r3, [sp, #16]
    e->pix = pix;
   d52c0:	8534      	strh	r4, [r6, #40]	; 0x28
    e->size = objix_hdr.size == SPIFFS_UNDEFINED_LEN ? 0 : objix_hdr.size;
   d52c2:	1c5a      	adds	r2, r3, #1
   d52c4:	bf08      	it	eq
   d52c6:	2300      	moveq	r3, #0
   d52c8:	6273      	str	r3, [r6, #36]	; 0x24
    return SPIFFS_OK;
   d52ca:	e7be      	b.n	d524a <spiffs_read_dir_v+0x16>
   d52cc:	ffffd8aa 	.word	0xffffd8aa

000d52d0 <spiffs_hydro_write.isra.0>:
static s32_t spiffs_hydro_write(spiffs *fs, spiffs_fd *fd, void *buf, u32_t offset, s32_t len) {
   d52d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (fd->size != SPIFFS_UNDEFINED_LEN && offset < fd->size) {
   d52d4:	6884      	ldr	r4, [r0, #8]
static s32_t spiffs_hydro_write(spiffs *fs, spiffs_fd *fd, void *buf, u32_t offset, s32_t len) {
   d52d6:	461d      	mov	r5, r3
  if (fd->size != SPIFFS_UNDEFINED_LEN && offset < fd->size) {
   d52d8:	1c63      	adds	r3, r4, #1
static s32_t spiffs_hydro_write(spiffs *fs, spiffs_fd *fd, void *buf, u32_t offset, s32_t len) {
   d52da:	4607      	mov	r7, r0
   d52dc:	460e      	mov	r6, r1
   d52de:	4690      	mov	r8, r2
  if (fd->size != SPIFFS_UNDEFINED_LEN && offset < fd->size) {
   d52e0:	d01b      	beq.n	d531a <spiffs_hydro_write.isra.0+0x4a>
   d52e2:	4294      	cmp	r4, r2
   d52e4:	d919      	bls.n	d531a <spiffs_hydro_write.isra.0+0x4a>
    s32_t m_len = MIN((s32_t)(fd->size - offset), len);
   d52e6:	1aa4      	subs	r4, r4, r2
   d52e8:	42ac      	cmp	r4, r5
   d52ea:	bfa8      	it	ge
   d52ec:	462c      	movge	r4, r5
    res = spiffs_object_modify(fd, offset, (u8_t *)buf, m_len);
   d52ee:	460a      	mov	r2, r1
   d52f0:	4623      	mov	r3, r4
   d52f2:	4641      	mov	r1, r8
   d52f4:	f002 fa4a 	bl	d778c <spiffs_object_modify>
    SPIFFS_CHECK_RES(res);
   d52f8:	2800      	cmp	r0, #0
   d52fa:	db0c      	blt.n	d5316 <spiffs_hydro_write.isra.0+0x46>
    remaining -= m_len;
   d52fc:	1b2b      	subs	r3, r5, r4
    buf_8 += m_len;
   d52fe:	4426      	add	r6, r4
    offset += m_len;
   d5300:	44a0      	add	r8, r4
  if (remaining > 0) {
   d5302:	2b00      	cmp	r3, #0
   d5304:	dd06      	ble.n	d5314 <spiffs_hydro_write.isra.0+0x44>
    res = spiffs_object_append(fd, offset, (u8_t *)buf, remaining);
   d5306:	4632      	mov	r2, r6
   d5308:	4641      	mov	r1, r8
   d530a:	4638      	mov	r0, r7
   d530c:	f001 feb2 	bl	d7074 <spiffs_object_append>
    SPIFFS_CHECK_RES(res);
   d5310:	2800      	cmp	r0, #0
   d5312:	db00      	blt.n	d5316 <spiffs_hydro_write.isra.0+0x46>
  return len;
   d5314:	4628      	mov	r0, r5
}
   d5316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  s32_t remaining = len;
   d531a:	462b      	mov	r3, r5
   d531c:	e7f1      	b.n	d5302 <spiffs_hydro_write.isra.0+0x32>

000d531e <spiffs_fflush_cache>:
static s32_t spiffs_fflush_cache(spiffs *fs, spiffs_file fh) {
   d531e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  res = spiffs_fd_get(fs, fh, &fd);
   d5320:	aa01      	add	r2, sp, #4
static s32_t spiffs_fflush_cache(spiffs *fs, spiffs_file fh) {
   d5322:	4605      	mov	r5, r0
  res = spiffs_fd_get(fs, fh, &fd);
   d5324:	f003 faf4 	bl	d8910 <spiffs_fd_get>
  SPIFFS_API_CHECK_RES(fs, res);
   d5328:	1e04      	subs	r4, r0, #0
   d532a:	da03      	bge.n	d5334 <spiffs_fflush_cache+0x16>
   d532c:	646c      	str	r4, [r5, #68]	; 0x44
}
   d532e:	4620      	mov	r0, r4
   d5330:	b002      	add	sp, #8
   d5332:	bd70      	pop	{r4, r5, r6, pc}
  if ((fd->flags & SPIFFS_O_DIRECT) == 0) {
   d5334:	9e01      	ldr	r6, [sp, #4]
   d5336:	8bb3      	ldrh	r3, [r6, #28]
   d5338:	069b      	lsls	r3, r3, #26
   d533a:	d4f8      	bmi.n	d532e <spiffs_fflush_cache+0x10>
    if (fd->cache_page == 0) {
   d533c:	6a33      	ldr	r3, [r6, #32]
   d533e:	b923      	cbnz	r3, d534a <spiffs_fflush_cache+0x2c>
      fd->cache_page = spiffs_cache_page_get_by_fd(fs, fd);
   d5340:	4631      	mov	r1, r6
   d5342:	4628      	mov	r0, r5
   d5344:	f7ff f84a 	bl	d43dc <spiffs_cache_page_get_by_fd>
   d5348:	6230      	str	r0, [r6, #32]
    if (fd->cache_page) {
   d534a:	9801      	ldr	r0, [sp, #4]
   d534c:	6a02      	ldr	r2, [r0, #32]
   d534e:	2a00      	cmp	r2, #0
   d5350:	d0ed      	beq.n	d532e <spiffs_fflush_cache+0x10>
          spiffs_get_cache_page(fs, spiffs_get_cache(fs), fd->cache_page->ix),
   d5352:	69e9      	ldr	r1, [r5, #28]
   d5354:	6dec      	ldr	r4, [r5, #92]	; 0x5c
   d5356:	f101 0314 	add.w	r3, r1, #20
   d535a:	7851      	ldrb	r1, [r2, #1]
   d535c:	6924      	ldr	r4, [r4, #16]
   d535e:	4359      	muls	r1, r3
   d5360:	3114      	adds	r1, #20
      res = spiffs_hydro_write(fs, fd,
   d5362:	8a13      	ldrh	r3, [r2, #16]
   d5364:	68d2      	ldr	r2, [r2, #12]
   d5366:	4421      	add	r1, r4
   d5368:	f7ff ffb2 	bl	d52d0 <spiffs_hydro_write.isra.0>
      spiffs_cache_fd_release(fs, fd->cache_page);
   d536c:	9b01      	ldr	r3, [sp, #4]
      if (res < SPIFFS_OK) {
   d536e:	1e04      	subs	r4, r0, #0
        fs->err_code = res;
   d5370:	bfb8      	it	lt
   d5372:	646c      	strlt	r4, [r5, #68]	; 0x44
      spiffs_cache_fd_release(fs, fd->cache_page);
   d5374:	6a19      	ldr	r1, [r3, #32]
   d5376:	4628      	mov	r0, r5
   d5378:	f7ff f863 	bl	d4442 <spiffs_cache_fd_release>
   d537c:	e7d7      	b.n	d532e <spiffs_fflush_cache+0x10>
	...

000d5380 <SPIFFS_format>:
s32_t SPIFFS_format(spiffs *fs) {
   d5380:	b570      	push	{r4, r5, r6, lr}
  SPIFFS_API_CHECK_CFG(fs);
   d5382:	4b14      	ldr	r3, [pc, #80]	; (d53d4 <SPIFFS_format+0x54>)
   d5384:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
   d5386:	429a      	cmp	r2, r3
s32_t SPIFFS_format(spiffs *fs) {
   d5388:	4605      	mov	r5, r0
  SPIFFS_API_CHECK_CFG(fs);
   d538a:	d002      	beq.n	d5392 <SPIFFS_format+0x12>
   d538c:	4812      	ldr	r0, [pc, #72]	; (d53d8 <SPIFFS_format+0x58>)
   d538e:	6468      	str	r0, [r5, #68]	; 0x44
}
   d5390:	bd70      	pop	{r4, r5, r6, pc}
  if (SPIFFS_CHECK_MOUNT(fs)) {
   d5392:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
   d5396:	b124      	cbz	r4, d53a2 <SPIFFS_format+0x22>
    fs->err_code = SPIFFS_ERR_MOUNTED;
   d5398:	4b10      	ldr	r3, [pc, #64]	; (d53dc <SPIFFS_format+0x5c>)
   d539a:	6443      	str	r3, [r0, #68]	; 0x44
    return -1;
   d539c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d53a0:	e7f6      	b.n	d5390 <SPIFFS_format+0x10>
  SPIFFS_LOCK(fs);
   d53a2:	f00b fb49 	bl	e0a38 <spiffsParticleLock>
s32_t SPIFFS_format(spiffs *fs) {
   d53a6:	4626      	mov	r6, r4
  while (bix < fs->block_count) {
   d53a8:	6a2a      	ldr	r2, [r5, #32]
   d53aa:	b2a1      	uxth	r1, r4
   d53ac:	4291      	cmp	r1, r2
   d53ae:	d303      	bcc.n	d53b8 <SPIFFS_format+0x38>
  SPIFFS_UNLOCK(fs);
   d53b0:	f00b fb48 	bl	e0a44 <spiffsParticleUnlock>
  return 0;
   d53b4:	2000      	movs	r0, #0
   d53b6:	e7eb      	b.n	d5390 <SPIFFS_format+0x10>
    fs->max_erase_count = 0;
   d53b8:	f8a5 6056 	strh.w	r6, [r5, #86]	; 0x56
    res = spiffs_erase_block(fs, bix);
   d53bc:	4628      	mov	r0, r5
   d53be:	f001 f837 	bl	d6430 <spiffs_erase_block>
    if (res != SPIFFS_OK) {
   d53c2:	3401      	adds	r4, #1
   d53c4:	2800      	cmp	r0, #0
   d53c6:	d0ef      	beq.n	d53a8 <SPIFFS_format+0x28>
    SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
   d53c8:	4c05      	ldr	r4, [pc, #20]	; (d53e0 <SPIFFS_format+0x60>)
   d53ca:	646c      	str	r4, [r5, #68]	; 0x44
   d53cc:	f00b fb3a 	bl	e0a44 <spiffsParticleUnlock>
   d53d0:	4620      	mov	r0, r4
   d53d2:	e7dd      	b.n	d5390 <SPIFFS_format+0x10>
   d53d4:	20090315 	.word	0x20090315
   d53d8:	ffffd8d8 	.word	0xffffd8d8
   d53dc:	ffffd8d6 	.word	0xffffd8d6
   d53e0:	ffffd8d5 	.word	0xffffd8d5

000d53e4 <SPIFFS_mount>:
    spiffs_check_callback check_cb_f) {
   d53e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d53e8:	b087      	sub	sp, #28
   d53ea:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   d53ee:	9f12      	ldr	r7, [sp, #72]	; 0x48
  SPIFFS_API_DBG("%s "
   d53f0:	e9cd 8703 	strd	r8, r7, [sp, #12]
    spiffs_check_callback check_cb_f) {
   d53f4:	461d      	mov	r5, r3
  SPIFFS_API_DBG("%s "
   d53f6:	6903      	ldr	r3, [r0, #16]
   d53f8:	9302      	str	r3, [sp, #8]
   d53fa:	6943      	ldr	r3, [r0, #20]
   d53fc:	9301      	str	r3, [sp, #4]
   d53fe:	6983      	ldr	r3, [r0, #24]
   d5400:	9300      	str	r3, [sp, #0]
   d5402:	69c3      	ldr	r3, [r0, #28]
    spiffs_check_callback check_cb_f) {
   d5404:	4604      	mov	r4, r0
   d5406:	460e      	mov	r6, r1
   d5408:	4692      	mov	sl, r2
  SPIFFS_API_DBG("%s "
   d540a:	4956      	ldr	r1, [pc, #344]	; (d5564 <SPIFFS_mount+0x180>)
   d540c:	68c2      	ldr	r2, [r0, #12]
   d540e:	4856      	ldr	r0, [pc, #344]	; (d5568 <SPIFFS_mount+0x184>)
   d5410:	f00b faf6 	bl	e0a00 <spiffsParticleTraceLog>
  SPIFFS_LOCK(fs);
   d5414:	f00b fb10 	bl	e0a38 <spiffsParticleLock>
  memset(fs, 0, sizeof(spiffs));
   d5418:	2280      	movs	r2, #128	; 0x80
   d541a:	2100      	movs	r1, #0
   d541c:	4620      	mov	r0, r4
  user_data = fs->user_data;
   d541e:	f8d4 b078 	ldr.w	fp, [r4, #120]	; 0x78
  memset(fs, 0, sizeof(spiffs));
   d5422:	f010 f945 	bl	e56b0 <memset>
  _SPIFFS_MEMCPY(&fs->cfg, config, sizeof(spiffs_config));
   d5426:	4631      	mov	r1, r6
   d5428:	4623      	mov	r3, r4
   d542a:	f106 0220 	add.w	r2, r6, #32
   d542e:	f851 0b04 	ldr.w	r0, [r1], #4
   d5432:	f843 0b04 	str.w	r0, [r3], #4
   d5436:	4291      	cmp	r1, r2
   d5438:	d1f9      	bne.n	d542e <SPIFFS_mount+0x4a>
  fs->block_count = SPIFFS_CFG_PHYS_SZ(fs) / SPIFFS_CFG_LOG_BLOCK_SZ(fs);
   d543a:	69a2      	ldr	r2, [r4, #24]
   d543c:	68e3      	ldr	r3, [r4, #12]
   d543e:	fbb3 f3f2 	udiv	r3, r3, r2
  fs->lu_work = &work[SPIFFS_CFG_LOG_PAGE_SZ(fs)];
   d5442:	69e2      	ldr	r2, [r4, #28]
  fs->block_count = SPIFFS_CFG_PHYS_SZ(fs) / SPIFFS_CFG_LOG_BLOCK_SZ(fs);
   d5444:	6223      	str	r3, [r4, #32]
  fs->lu_work = &work[SPIFFS_CFG_LOG_PAGE_SZ(fs)];
   d5446:	4452      	add	r2, sl
  memset(fd_space, 0, fd_space_size);
   d5448:	2100      	movs	r1, #0
  fs->lu_work = &work[SPIFFS_CFG_LOG_PAGE_SZ(fs)];
   d544a:	6362      	str	r2, [r4, #52]	; 0x34
  memset(fd_space, 0, fd_space_size);
   d544c:	4628      	mov	r0, r5
   d544e:	4642      	mov	r2, r8
  fs->user_data = user_data;
   d5450:	f8c4 b078 	str.w	fp, [r4, #120]	; 0x78
  fs->work = &work[0];
   d5454:	f8c4 a038 	str.w	sl, [r4, #56]	; 0x38
  memset(fd_space, 0, fd_space_size);
   d5458:	f010 f92a 	bl	e56b0 <memset>
  if (addr_lsb) {
   d545c:	f015 0303 	ands.w	r3, r5, #3
    fd_space += (ptr_size-addr_lsb);
   d5460:	bf1e      	ittt	ne
   d5462:	f1c3 0304 	rsbne	r3, r3, #4
   d5466:	18ed      	addne	r5, r5, r3
    fd_space_size -= (ptr_size-addr_lsb);
   d5468:	eba8 0803 	subne.w	r8, r8, r3
  if (addr_lsb) {
   d546c:	f019 0303 	ands.w	r3, r9, #3
    cache_8 += (ptr_size-addr_lsb);
   d5470:	bf1e      	ittt	ne
   d5472:	f1c3 0304 	rsbne	r3, r3, #4
    cache_size -= (ptr_size-addr_lsb);
   d5476:	1aff      	subne	r7, r7, r3
    cache_8 += (ptr_size-addr_lsb);
   d5478:	4499      	addne	r9, r3
  if (cache_size & (ptr_size-1)) {
   d547a:	07bb      	lsls	r3, r7, #30
  fs->cache_size = (cache_size > (SPIFFS_CFG_LOG_PAGE_SZ(fs)*32)) ? SPIFFS_CFG_LOG_PAGE_SZ(fs)*32 : cache_size;
   d547c:	69e3      	ldr	r3, [r4, #28]
  fs->fd_space = fd_space;
   d547e:	63e5      	str	r5, [r4, #60]	; 0x3c
    cache_size -= (cache_size & (ptr_size-1));
   d5480:	bf18      	it	ne
   d5482:	f027 0703 	bicne.w	r7, r7, #3
  fs->cache_size = (cache_size > (SPIFFS_CFG_LOG_PAGE_SZ(fs)*32)) ? SPIFFS_CFG_LOG_PAGE_SZ(fs)*32 : cache_size;
   d5486:	015b      	lsls	r3, r3, #5
   d5488:	42bb      	cmp	r3, r7
   d548a:	bf94      	ite	ls
   d548c:	6623      	strls	r3, [r4, #96]	; 0x60
   d548e:	6627      	strhi	r7, [r4, #96]	; 0x60
  spiffs_cache_init(fs);
   d5490:	4620      	mov	r0, r4
  fs->fd_count = (fd_space_size/sizeof(spiffs_fd));
   d5492:	2230      	movs	r2, #48	; 0x30
  fs->cache = cache;
   d5494:	f8c4 905c 	str.w	r9, [r4, #92]	; 0x5c
  fs->fd_count = (fd_space_size/sizeof(spiffs_fd));
   d5498:	fbb8 f2f2 	udiv	r2, r8, r2
   d549c:	6422      	str	r2, [r4, #64]	; 0x40
  spiffs_cache_init(fs);
   d549e:	f7fe ffea 	bl	d4476 <spiffs_cache_init>
  res = SPIFFS_CHECK_MAGIC_POSSIBLE(fs) ? SPIFFS_OK : SPIFFS_ERR_MAGIC_NOT_POSSIBLE;
   d54a2:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
   d54a6:	fbb3 f3f2 	udiv	r3, r3, r2
   d54aa:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
   d54ae:	ea4f 0143 	mov.w	r1, r3, lsl #1
   d54b2:	bf8c      	ite	hi
   d54b4:	2101      	movhi	r1, #1
   d54b6:	fbb1 f1f2 	udivls	r1, r1, r2
   d54ba:	0850      	lsrs	r0, r2, #1
   d54bc:	1a5b      	subs	r3, r3, r1
   d54be:	3a04      	subs	r2, #4
   d54c0:	fbb3 f1f0 	udiv	r1, r3, r0
   d54c4:	fb00 3311 	mls	r3, r0, r1, r3
   d54c8:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
   d54cc:	d30d      	bcc.n	d54ea <SPIFFS_mount+0x106>
  fs->config_magic = SPIFFS_CONFIG_MAGIC;
   d54ce:	4b27      	ldr	r3, [pc, #156]	; (d556c <SPIFFS_mount+0x188>)
   d54d0:	67e3      	str	r3, [r4, #124]	; 0x7c
  res = spiffs_obj_lu_scan(fs);
   d54d2:	4620      	mov	r0, r4
   d54d4:	f001 f822 	bl	d651c <spiffs_obj_lu_scan>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
   d54d8:	1e05      	subs	r5, r0, #0
   d54da:	da08      	bge.n	d54ee <SPIFFS_mount+0x10a>
   d54dc:	6465      	str	r5, [r4, #68]	; 0x44
   d54de:	f00b fab1 	bl	e0a44 <spiffsParticleUnlock>
}
   d54e2:	4628      	mov	r0, r5
   d54e4:	b007      	add	sp, #28
   d54e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
   d54ea:	4d21      	ldr	r5, [pc, #132]	; (d5570 <SPIFFS_mount+0x18c>)
   d54ec:	e7f6      	b.n	d54dc <SPIFFS_mount+0xf8>
  SPIFFS_DBG("page index byte len:         "_SPIPRIi"\n", (u32_t)SPIFFS_CFG_LOG_PAGE_SZ(fs));
   d54ee:	69e1      	ldr	r1, [r4, #28]
   d54f0:	4820      	ldr	r0, [pc, #128]	; (d5574 <SPIFFS_mount+0x190>)
   d54f2:	f00b fa69 	bl	e09c8 <spiffsParticleInfoLog>
  SPIFFS_DBG("object lookup pages:         "_SPIPRIi"\n", (u32_t)SPIFFS_OBJ_LOOKUP_PAGES(fs));
   d54f6:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
   d54fa:	fbb3 f3f2 	udiv	r3, r3, r2
   d54fe:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
   d5502:	ea4f 0143 	mov.w	r1, r3, lsl #1
   d5506:	481c      	ldr	r0, [pc, #112]	; (d5578 <SPIFFS_mount+0x194>)
   d5508:	bf94      	ite	ls
   d550a:	fbb1 f1f2 	udivls	r1, r1, r2
   d550e:	2101      	movhi	r1, #1
   d5510:	f00b fa5a 	bl	e09c8 <spiffsParticleInfoLog>
  SPIFFS_DBG("page pages per block:        "_SPIPRIi"\n", (u32_t)SPIFFS_PAGES_PER_BLOCK(fs));
   d5514:	e9d4 1306 	ldrd	r1, r3, [r4, #24]
   d5518:	4818      	ldr	r0, [pc, #96]	; (d557c <SPIFFS_mount+0x198>)
   d551a:	fbb1 f1f3 	udiv	r1, r1, r3
   d551e:	f00b fa53 	bl	e09c8 <spiffsParticleInfoLog>
  SPIFFS_DBG("page header length:          "_SPIPRIi"\n", (u32_t)sizeof(spiffs_page_header));
   d5522:	4817      	ldr	r0, [pc, #92]	; (d5580 <SPIFFS_mount+0x19c>)
   d5524:	2105      	movs	r1, #5
   d5526:	f00b fa4f 	bl	e09c8 <spiffsParticleInfoLog>
  SPIFFS_DBG("object header index entries: "_SPIPRIi"\n", (u32_t)SPIFFS_OBJ_HDR_IX_LEN(fs));
   d552a:	69e1      	ldr	r1, [r4, #28]
   d552c:	4815      	ldr	r0, [pc, #84]	; (d5584 <SPIFFS_mount+0x1a0>)
   d552e:	392d      	subs	r1, #45	; 0x2d
   d5530:	0849      	lsrs	r1, r1, #1
   d5532:	f00b fa49 	bl	e09c8 <spiffsParticleInfoLog>
  SPIFFS_DBG("object index entries:        "_SPIPRIi"\n", (u32_t)SPIFFS_OBJ_IX_LEN(fs));
   d5536:	69e1      	ldr	r1, [r4, #28]
   d5538:	4813      	ldr	r0, [pc, #76]	; (d5588 <SPIFFS_mount+0x1a4>)
   d553a:	3908      	subs	r1, #8
   d553c:	0849      	lsrs	r1, r1, #1
   d553e:	f00b fa43 	bl	e09c8 <spiffsParticleInfoLog>
  SPIFFS_DBG("available file descriptors:  "_SPIPRIi"\n", (u32_t)fs->fd_count);
   d5542:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d5544:	4811      	ldr	r0, [pc, #68]	; (d558c <SPIFFS_mount+0x1a8>)
   d5546:	f00b fa3f 	bl	e09c8 <spiffsParticleInfoLog>
  SPIFFS_DBG("free blocks:                 "_SPIPRIi"\n", (u32_t)fs->free_blocks);
   d554a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d554c:	4810      	ldr	r0, [pc, #64]	; (d5590 <SPIFFS_mount+0x1ac>)
   d554e:	f00b fa3b 	bl	e09c8 <spiffsParticleInfoLog>
  fs->check_cb_f = check_cb_f;
   d5552:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d5554:	66e3      	str	r3, [r4, #108]	; 0x6c
  fs->mounted = 1;
   d5556:	2301      	movs	r3, #1
   d5558:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  SPIFFS_UNLOCK(fs);
   d555c:	f00b fa72 	bl	e0a44 <spiffsParticleUnlock>
  return 0;
   d5560:	2500      	movs	r5, #0
   d5562:	e7be      	b.n	d54e2 <SPIFFS_mount+0xfe>
   d5564:	000e6060 	.word	0x000e6060
   d5568:	000e5ee7 	.word	0x000e5ee7
   d556c:	20090315 	.word	0x20090315
   d5570:	ffffd8d4 	.word	0xffffd8d4
   d5574:	000e5f30 	.word	0x000e5f30
   d5578:	000e5f51 	.word	0x000e5f51
   d557c:	000e5f72 	.word	0x000e5f72
   d5580:	000e5f93 	.word	0x000e5f93
   d5584:	000e5fb4 	.word	0x000e5fb4
   d5588:	000e5fd5 	.word	0x000e5fd5
   d558c:	000e5ff6 	.word	0x000e5ff6
   d5590:	000e6017 	.word	0x000e6017

000d5594 <SPIFFS_open>:
spiffs_file SPIFFS_open(spiffs *fs, const char *path, spiffs_flags flags, spiffs_mode mode) {
   d5594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5598:	4605      	mov	r5, r0
   d559a:	b085      	sub	sp, #20
  SPIFFS_API_DBG("%s '%s' "_SPIPRIfl "\n", __func__, path, flags);
   d559c:	4845      	ldr	r0, [pc, #276]	; (d56b4 <SPIFFS_open+0x120>)
spiffs_file SPIFFS_open(spiffs *fs, const char *path, spiffs_flags flags, spiffs_mode mode) {
   d559e:	4688      	mov	r8, r1
   d55a0:	4616      	mov	r6, r2
   d55a2:	461f      	mov	r7, r3
  SPIFFS_API_DBG("%s '%s' "_SPIPRIfl "\n", __func__, path, flags);
   d55a4:	4613      	mov	r3, r2
   d55a6:	460a      	mov	r2, r1
   d55a8:	4943      	ldr	r1, [pc, #268]	; (d56b8 <SPIFFS_open+0x124>)
   d55aa:	f00b fa29 	bl	e0a00 <spiffsParticleTraceLog>
  SPIFFS_API_CHECK_CFG(fs);
   d55ae:	6fea      	ldr	r2, [r5, #124]	; 0x7c
   d55b0:	4b42      	ldr	r3, [pc, #264]	; (d56bc <SPIFFS_open+0x128>)
   d55b2:	429a      	cmp	r2, r3
   d55b4:	d004      	beq.n	d55c0 <SPIFFS_open+0x2c>
   d55b6:	4842      	ldr	r0, [pc, #264]	; (d56c0 <SPIFFS_open+0x12c>)
  SPIFFS_API_CHECK_MOUNT(fs);
   d55b8:	6468      	str	r0, [r5, #68]	; 0x44
}
   d55ba:	b005      	add	sp, #20
   d55bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  SPIFFS_API_CHECK_MOUNT(fs);
   d55c0:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   d55c4:	b90b      	cbnz	r3, d55ca <SPIFFS_open+0x36>
   d55c6:	483f      	ldr	r0, [pc, #252]	; (d56c4 <SPIFFS_open+0x130>)
   d55c8:	e7f6      	b.n	d55b8 <SPIFFS_open+0x24>
  if (strlen(path) > SPIFFS_OBJ_NAME_LEN - 1) {
   d55ca:	4640      	mov	r0, r8
   d55cc:	f010 f8e3 	bl	e5796 <strlen>
   d55d0:	281f      	cmp	r0, #31
   d55d2:	d901      	bls.n	d55d8 <SPIFFS_open+0x44>
    SPIFFS_API_CHECK_RES(fs, SPIFFS_ERR_NAME_TOO_LONG);
   d55d4:	483c      	ldr	r0, [pc, #240]	; (d56c8 <SPIFFS_open+0x134>)
   d55d6:	e7ef      	b.n	d55b8 <SPIFFS_open+0x24>
  SPIFFS_LOCK(fs);
   d55d8:	f00b fa2e 	bl	e0a38 <spiffsParticleLock>
  s32_t res = spiffs_fd_find_new(fs, &fd, path);
   d55dc:	4642      	mov	r2, r8
   d55de:	a903      	add	r1, sp, #12
   d55e0:	4628      	mov	r0, r5
   d55e2:	f003 f905 	bl	d87f0 <spiffs_fd_find_new>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
   d55e6:	1e04      	subs	r4, r0, #0
   d55e8:	da04      	bge.n	d55f4 <SPIFFS_open+0x60>
    SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
   d55ea:	646c      	str	r4, [r5, #68]	; 0x44
   d55ec:	f00b fa2a 	bl	e0a44 <spiffsParticleUnlock>
   d55f0:	b220      	sxth	r0, r4
   d55f2:	e7e2      	b.n	d55ba <SPIFFS_open+0x26>
  res = spiffs_object_find_object_index_header_by_name(fs, (const u8_t*)path, &pix);
   d55f4:	f10d 0908 	add.w	r9, sp, #8
   d55f8:	464a      	mov	r2, r9
   d55fa:	4641      	mov	r1, r8
   d55fc:	4628      	mov	r0, r5
   d55fe:	f002 fb9b 	bl	d7d38 <spiffs_object_find_object_index_header_by_name>
  if ((flags & SPIFFS_O_CREAT) == 0) {
   d5602:	0772      	lsls	r2, r6, #29
  res = spiffs_object_find_object_index_header_by_name(fs, (const u8_t*)path, &pix);
   d5604:	4604      	mov	r4, r0
  if ((flags & SPIFFS_O_CREAT) == 0) {
   d5606:	d437      	bmi.n	d5678 <SPIFFS_open+0xe4>
    if (res < SPIFFS_OK) {
   d5608:	2800      	cmp	r0, #0
   d560a:	da24      	bge.n	d5656 <SPIFFS_open+0xc2>
      spiffs_fd_return(fs, fd->file_nbr);
   d560c:	9b03      	ldr	r3, [sp, #12]
   d560e:	4628      	mov	r0, r5
   d5610:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
   d5614:	f003 f960 	bl	d88d8 <spiffs_fd_return>
   d5618:	e7e7      	b.n	d55ea <SPIFFS_open+0x56>
    if (res < SPIFFS_OK) {
   d561a:	2c00      	cmp	r4, #0
   d561c:	dbf6      	blt.n	d560c <SPIFFS_open+0x78>
  res = spiffs_object_open_by_page(fs, pix, fd, flags, mode);
   d561e:	9a03      	ldr	r2, [sp, #12]
   d5620:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   d5624:	9700      	str	r7, [sp, #0]
   d5626:	4633      	mov	r3, r6
   d5628:	4628      	mov	r0, r5
   d562a:	f001 fcaf 	bl	d6f8c <spiffs_object_open_by_page>
  if (res < SPIFFS_OK) {
   d562e:	1e04      	subs	r4, r0, #0
   d5630:	dbec      	blt.n	d560c <SPIFFS_open+0x78>
  if (flags & SPIFFS_O_TRUNC) {
   d5632:	07b3      	lsls	r3, r6, #30
   d5634:	d506      	bpl.n	d5644 <SPIFFS_open+0xb0>
    res = spiffs_object_truncate(fd, 0, 0);
   d5636:	2200      	movs	r2, #0
   d5638:	9803      	ldr	r0, [sp, #12]
   d563a:	4611      	mov	r1, r2
   d563c:	f002 fbb6 	bl	d7dac <spiffs_object_truncate>
    if (res < SPIFFS_OK) {
   d5640:	1e04      	subs	r4, r0, #0
   d5642:	dbe3      	blt.n	d560c <SPIFFS_open+0x78>
  fd->fdoffset = 0;
   d5644:	9b03      	ldr	r3, [sp, #12]
   d5646:	2200      	movs	r2, #0
   d5648:	619a      	str	r2, [r3, #24]
  SPIFFS_UNLOCK(fs);
   d564a:	f00b f9fb 	bl	e0a44 <spiffsParticleUnlock>
  return SPIFFS_FH_OFFS(fs, fd->file_nbr);
   d564e:	9b03      	ldr	r3, [sp, #12]
   d5650:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
   d5654:	e7b1      	b.n	d55ba <SPIFFS_open+0x26>
  if (res == SPIFFS_OK &&
   d5656:	d1e2      	bne.n	d561e <SPIFFS_open+0x8a>
   d5658:	f006 0344 	and.w	r3, r6, #68	; 0x44
   d565c:	2b44      	cmp	r3, #68	; 0x44
   d565e:	d1de      	bne.n	d561e <SPIFFS_open+0x8a>
    spiffs_fd_return(fs, fd->file_nbr);
   d5660:	9b03      	ldr	r3, [sp, #12]
    SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
   d5662:	4c1a      	ldr	r4, [pc, #104]	; (d56cc <SPIFFS_open+0x138>)
    spiffs_fd_return(fs, fd->file_nbr);
   d5664:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
   d5668:	4628      	mov	r0, r5
   d566a:	f003 f935 	bl	d88d8 <spiffs_fd_return>
    SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
   d566e:	646c      	str	r4, [r5, #68]	; 0x44
   d5670:	f00b f9e8 	bl	e0a44 <spiffsParticleUnlock>
   d5674:	4620      	mov	r0, r4
   d5676:	e7a0      	b.n	d55ba <SPIFFS_open+0x26>
  if (res == SPIFFS_OK &&
   d5678:	2800      	cmp	r0, #0
   d567a:	d0ed      	beq.n	d5658 <SPIFFS_open+0xc4>
  if ((flags & SPIFFS_O_CREAT) && res == SPIFFS_ERR_NOT_FOUND) {
   d567c:	4b14      	ldr	r3, [pc, #80]	; (d56d0 <SPIFFS_open+0x13c>)
   d567e:	429c      	cmp	r4, r3
   d5680:	d1cb      	bne.n	d561a <SPIFFS_open+0x86>
    res = spiffs_obj_lu_find_free_obj_id(fs, &obj_id, 0);
   d5682:	2200      	movs	r2, #0
   d5684:	f10d 010a 	add.w	r1, sp, #10
   d5688:	4628      	mov	r0, r5
   d568a:	f002 ffb5 	bl	d85f8 <spiffs_obj_lu_find_free_obj_id>
    if (res < SPIFFS_OK) {
   d568e:	1e04      	subs	r4, r0, #0
   d5690:	dbbc      	blt.n	d560c <SPIFFS_open+0x78>
    res = spiffs_object_create(fs, obj_id, (const u8_t*)path, 0, SPIFFS_TYPE_FILE, &pix);
   d5692:	2301      	movs	r3, #1
   d5694:	9300      	str	r3, [sp, #0]
   d5696:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   d569a:	f8cd 9004 	str.w	r9, [sp, #4]
   d569e:	2300      	movs	r3, #0
   d56a0:	4642      	mov	r2, r8
   d56a2:	4628      	mov	r0, r5
   d56a4:	f001 fb30 	bl	d6d08 <spiffs_object_create>
    if (res < SPIFFS_OK) {
   d56a8:	1e04      	subs	r4, r0, #0
   d56aa:	dbaf      	blt.n	d560c <SPIFFS_open+0x78>
    flags &= ~SPIFFS_O_TRUNC;
   d56ac:	f026 0602 	bic.w	r6, r6, #2
   d56b0:	b2b6      	uxth	r6, r6
  if ((flags & SPIFFS_O_CREAT) && res == SPIFFS_ERR_NOT_FOUND) {
   d56b2:	e7b4      	b.n	d561e <SPIFFS_open+0x8a>
   d56b4:	000e6041 	.word	0x000e6041
   d56b8:	000e606d 	.word	0x000e606d
   d56bc:	20090315 	.word	0x20090315
   d56c0:	ffffd8d8 	.word	0xffffd8d8
   d56c4:	ffffd8f0 	.word	0xffffd8f0
   d56c8:	ffffd8cc 	.word	0xffffd8cc
   d56cc:	ffffd8d2 	.word	0xffffd8d2
   d56d0:	ffffd8ee 	.word	0xffffd8ee

000d56d4 <SPIFFS_read>:
s32_t SPIFFS_read(spiffs *fs, spiffs_file fh, void *buf, s32_t len) {
   d56d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d56d8:	4605      	mov	r5, r0
   d56da:	460e      	mov	r6, r1
  SPIFFS_API_DBG("%s "_SPIPRIfd " "_SPIPRIi "\n", __func__, fh, len);
   d56dc:	4838      	ldr	r0, [pc, #224]	; (d57c0 <SPIFFS_read+0xec>)
s32_t SPIFFS_read(spiffs *fs, spiffs_file fh, void *buf, s32_t len) {
   d56de:	4690      	mov	r8, r2
  SPIFFS_API_DBG("%s "_SPIPRIfd " "_SPIPRIi "\n", __func__, fh, len);
   d56e0:	460a      	mov	r2, r1
   d56e2:	4938      	ldr	r1, [pc, #224]	; (d57c4 <SPIFFS_read+0xf0>)
s32_t SPIFFS_read(spiffs *fs, spiffs_file fh, void *buf, s32_t len) {
   d56e4:	461c      	mov	r4, r3
  SPIFFS_API_DBG("%s "_SPIPRIfd " "_SPIPRIi "\n", __func__, fh, len);
   d56e6:	f00b f98b 	bl	e0a00 <spiffsParticleTraceLog>
  SPIFFS_API_CHECK_CFG(fs);
   d56ea:	6fea      	ldr	r2, [r5, #124]	; 0x7c
   d56ec:	4b36      	ldr	r3, [pc, #216]	; (d57c8 <SPIFFS_read+0xf4>)
   d56ee:	429a      	cmp	r2, r3
   d56f0:	d005      	beq.n	d56fe <SPIFFS_read+0x2a>
   d56f2:	4c36      	ldr	r4, [pc, #216]	; (d57cc <SPIFFS_read+0xf8>)
  SPIFFS_API_CHECK_MOUNT(fs);
   d56f4:	646c      	str	r4, [r5, #68]	; 0x44
}
   d56f6:	4620      	mov	r0, r4
   d56f8:	b002      	add	sp, #8
   d56fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  SPIFFS_API_CHECK_MOUNT(fs);
   d56fe:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   d5702:	b90b      	cbnz	r3, d5708 <SPIFFS_read+0x34>
   d5704:	4c32      	ldr	r4, [pc, #200]	; (d57d0 <SPIFFS_read+0xfc>)
   d5706:	e7f5      	b.n	d56f4 <SPIFFS_read+0x20>
  SPIFFS_LOCK(fs);
   d5708:	f00b f996 	bl	e0a38 <spiffsParticleLock>
  res = spiffs_fd_get(fs, fh, &fd);
   d570c:	aa01      	add	r2, sp, #4
   d570e:	4631      	mov	r1, r6
   d5710:	4628      	mov	r0, r5
   d5712:	f003 f8fd 	bl	d8910 <spiffs_fd_get>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
   d5716:	1e07      	subs	r7, r0, #0
   d5718:	da08      	bge.n	d572c <SPIFFS_read+0x58>
   d571a:	646f      	str	r7, [r5, #68]	; 0x44
   d571c:	f00b f992 	bl	e0a44 <spiffsParticleUnlock>
   d5720:	463c      	mov	r4, r7
    res = 0;
   d5722:	4b2c      	ldr	r3, [pc, #176]	; (d57d4 <SPIFFS_read+0x100>)
   d5724:	429c      	cmp	r4, r3
   d5726:	bf08      	it	eq
   d5728:	2400      	moveq	r4, #0
   d572a:	e7e4      	b.n	d56f6 <SPIFFS_read+0x22>
  if ((fd->flags & SPIFFS_O_RDONLY) == 0) {
   d572c:	9b01      	ldr	r3, [sp, #4]
   d572e:	8b9a      	ldrh	r2, [r3, #28]
   d5730:	0712      	lsls	r2, r2, #28
   d5732:	d404      	bmi.n	d573e <SPIFFS_read+0x6a>
    SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
   d5734:	4c28      	ldr	r4, [pc, #160]	; (d57d8 <SPIFFS_read+0x104>)
   d5736:	646c      	str	r4, [r5, #68]	; 0x44
   d5738:	f00b f984 	bl	e0a44 <spiffsParticleUnlock>
  if (res == SPIFFS_ERR_END_OF_OBJECT) {
   d573c:	e7db      	b.n	d56f6 <SPIFFS_read+0x22>
  if (fd->size == SPIFFS_UNDEFINED_LEN && len > 0) {
   d573e:	689b      	ldr	r3, [r3, #8]
   d5740:	3301      	adds	r3, #1
   d5742:	d107      	bne.n	d5754 <SPIFFS_read+0x80>
   d5744:	2c00      	cmp	r4, #0
   d5746:	dd05      	ble.n	d5754 <SPIFFS_read+0x80>
    SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
   d5748:	4b22      	ldr	r3, [pc, #136]	; (d57d4 <SPIFFS_read+0x100>)
   d574a:	646b      	str	r3, [r5, #68]	; 0x44
   d574c:	f00b f97a 	bl	e0a44 <spiffsParticleUnlock>
    res = 0;
   d5750:	2400      	movs	r4, #0
   d5752:	e7d0      	b.n	d56f6 <SPIFFS_read+0x22>
  spiffs_fflush_cache(fs, fh);
   d5754:	4631      	mov	r1, r6
   d5756:	4628      	mov	r0, r5
   d5758:	f7ff fde1 	bl	d531e <spiffs_fflush_cache>
  if (fd->fdoffset + len >= fd->size) {
   d575c:	9801      	ldr	r0, [sp, #4]
   d575e:	6981      	ldr	r1, [r0, #24]
   d5760:	6883      	ldr	r3, [r0, #8]
   d5762:	190a      	adds	r2, r1, r4
   d5764:	429a      	cmp	r2, r3
   d5766:	d319      	bcc.n	d579c <SPIFFS_read+0xc8>
    s32_t avail = fd->size - fd->fdoffset;
   d5768:	1a5c      	subs	r4, r3, r1
    if (avail <= 0) {
   d576a:	2c00      	cmp	r4, #0
   d576c:	ddec      	ble.n	d5748 <SPIFFS_read+0x74>
    res = spiffs_object_read(fd, fd->fdoffset, avail, (u8_t*)buf);
   d576e:	4643      	mov	r3, r8
   d5770:	4622      	mov	r2, r4
   d5772:	f002 fe1d 	bl	d83b0 <spiffs_object_read>
    if (res == SPIFFS_ERR_END_OF_OBJECT) {
   d5776:	4b17      	ldr	r3, [pc, #92]	; (d57d4 <SPIFFS_read+0x100>)
   d5778:	4298      	cmp	r0, r3
    res = spiffs_object_read(fd, fd->fdoffset, avail, (u8_t*)buf);
   d577a:	4606      	mov	r6, r0
    if (res == SPIFFS_ERR_END_OF_OBJECT) {
   d577c:	d108      	bne.n	d5790 <SPIFFS_read+0xbc>
      fd->fdoffset += avail;
   d577e:	9a01      	ldr	r2, [sp, #4]
   d5780:	6993      	ldr	r3, [r2, #24]
   d5782:	4423      	add	r3, r4
   d5784:	6193      	str	r3, [r2, #24]
      SPIFFS_UNLOCK(fs);
   d5786:	f00b f95d 	bl	e0a44 <spiffsParticleUnlock>
      return avail;
   d578a:	4626      	mov	r6, r4
  if (res == SPIFFS_ERR_END_OF_OBJECT) {
   d578c:	4634      	mov	r4, r6
  return res;
   d578e:	e7b2      	b.n	d56f6 <SPIFFS_read+0x22>
      SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
   d5790:	2800      	cmp	r0, #0
   d5792:	da0e      	bge.n	d57b2 <SPIFFS_read+0xde>
   d5794:	6468      	str	r0, [r5, #68]	; 0x44
   d5796:	f00b f955 	bl	e0a44 <spiffsParticleUnlock>
   d579a:	e7f7      	b.n	d578c <SPIFFS_read+0xb8>
    res = spiffs_object_read(fd, fd->fdoffset, len, (u8_t*)buf);
   d579c:	4643      	mov	r3, r8
   d579e:	4622      	mov	r2, r4
   d57a0:	f002 fe06 	bl	d83b0 <spiffs_object_read>
    SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
   d57a4:	1e06      	subs	r6, r0, #0
   d57a6:	da04      	bge.n	d57b2 <SPIFFS_read+0xde>
   d57a8:	646e      	str	r6, [r5, #68]	; 0x44
   d57aa:	f00b f94b 	bl	e0a44 <spiffsParticleUnlock>
   d57ae:	4634      	mov	r4, r6
   d57b0:	e7b7      	b.n	d5722 <SPIFFS_read+0x4e>
  fd->fdoffset += len;
   d57b2:	9a01      	ldr	r2, [sp, #4]
   d57b4:	6993      	ldr	r3, [r2, #24]
   d57b6:	4423      	add	r3, r4
   d57b8:	6193      	str	r3, [r2, #24]
  SPIFFS_UNLOCK(fs);
   d57ba:	f00b f943 	bl	e0a44 <spiffsParticleUnlock>
  return len;
   d57be:	e7b0      	b.n	d5722 <SPIFFS_read+0x4e>
   d57c0:	000e604f 	.word	0x000e604f
   d57c4:	000e6079 	.word	0x000e6079
   d57c8:	20090315 	.word	0x20090315
   d57cc:	ffffd8d8 	.word	0xffffd8d8
   d57d0:	ffffd8f0 	.word	0xffffd8f0
   d57d4:	ffffd8ed 	.word	0xffffd8ed
   d57d8:	ffffd8da 	.word	0xffffd8da

000d57dc <SPIFFS_write>:
s32_t SPIFFS_write(spiffs *fs, spiffs_file fh, void *buf, s32_t len) {
   d57dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d57e0:	4605      	mov	r5, r0
   d57e2:	460c      	mov	r4, r1
  SPIFFS_API_DBG("%s "_SPIPRIfd " "_SPIPRIi "\n", __func__, fh, len);
   d57e4:	4861      	ldr	r0, [pc, #388]	; (d596c <SPIFFS_write+0x190>)
s32_t SPIFFS_write(spiffs *fs, spiffs_file fh, void *buf, s32_t len) {
   d57e6:	4690      	mov	r8, r2
  SPIFFS_API_DBG("%s "_SPIPRIfd " "_SPIPRIi "\n", __func__, fh, len);
   d57e8:	460a      	mov	r2, r1
   d57ea:	4961      	ldr	r1, [pc, #388]	; (d5970 <SPIFFS_write+0x194>)
s32_t SPIFFS_write(spiffs *fs, spiffs_file fh, void *buf, s32_t len) {
   d57ec:	461f      	mov	r7, r3
  SPIFFS_API_DBG("%s "_SPIPRIfd " "_SPIPRIi "\n", __func__, fh, len);
   d57ee:	f00b f907 	bl	e0a00 <spiffsParticleTraceLog>
  SPIFFS_API_CHECK_CFG(fs);
   d57f2:	6fea      	ldr	r2, [r5, #124]	; 0x7c
   d57f4:	4b5f      	ldr	r3, [pc, #380]	; (d5974 <SPIFFS_write+0x198>)
   d57f6:	429a      	cmp	r2, r3
   d57f8:	d005      	beq.n	d5806 <SPIFFS_write+0x2a>
   d57fa:	4c5f      	ldr	r4, [pc, #380]	; (d5978 <SPIFFS_write+0x19c>)
  SPIFFS_API_CHECK_MOUNT(fs);
   d57fc:	646c      	str	r4, [r5, #68]	; 0x44
}
   d57fe:	4620      	mov	r0, r4
   d5800:	b002      	add	sp, #8
   d5802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  SPIFFS_API_CHECK_MOUNT(fs);
   d5806:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   d580a:	b90b      	cbnz	r3, d5810 <SPIFFS_write+0x34>
   d580c:	4c5b      	ldr	r4, [pc, #364]	; (d597c <SPIFFS_write+0x1a0>)
   d580e:	e7f5      	b.n	d57fc <SPIFFS_write+0x20>
  SPIFFS_LOCK(fs);
   d5810:	f00b f912 	bl	e0a38 <spiffsParticleLock>
  res = spiffs_fd_get(fs, fh, &fd);
   d5814:	4621      	mov	r1, r4
   d5816:	aa01      	add	r2, sp, #4
   d5818:	4628      	mov	r0, r5
   d581a:	f003 f879 	bl	d8910 <spiffs_fd_get>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
   d581e:	1e04      	subs	r4, r0, #0
   d5820:	da03      	bge.n	d582a <SPIFFS_write+0x4e>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
   d5822:	646c      	str	r4, [r5, #68]	; 0x44
  SPIFFS_UNLOCK(fs);
   d5824:	f00b f90e 	bl	e0a44 <spiffsParticleUnlock>
  return res;
   d5828:	e7e9      	b.n	d57fe <SPIFFS_write+0x22>
  if ((fd->flags & SPIFFS_O_WRONLY) == 0) {
   d582a:	9c01      	ldr	r4, [sp, #4]
   d582c:	8ba3      	ldrh	r3, [r4, #28]
   d582e:	06da      	lsls	r2, r3, #27
   d5830:	d401      	bmi.n	d5836 <SPIFFS_write+0x5a>
    SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
   d5832:	4c53      	ldr	r4, [pc, #332]	; (d5980 <SPIFFS_write+0x1a4>)
   d5834:	e7f5      	b.n	d5822 <SPIFFS_write+0x46>
  if ((fd->flags & SPIFFS_O_APPEND)) {
   d5836:	07db      	lsls	r3, r3, #31
   d5838:	d504      	bpl.n	d5844 <SPIFFS_write+0x68>
    fd->fdoffset = fd->size == SPIFFS_UNDEFINED_LEN ? 0 : fd->size;
   d583a:	68a3      	ldr	r3, [r4, #8]
   d583c:	1c5e      	adds	r6, r3, #1
   d583e:	bf08      	it	eq
   d5840:	2300      	moveq	r3, #0
   d5842:	61a3      	str	r3, [r4, #24]
  if (fd->cache_page == 0) {
   d5844:	6a23      	ldr	r3, [r4, #32]
  offset = fd->fdoffset;
   d5846:	69a6      	ldr	r6, [r4, #24]
  if (fd->cache_page == 0) {
   d5848:	b923      	cbnz	r3, d5854 <SPIFFS_write+0x78>
    fd->cache_page = spiffs_cache_page_get_by_fd(fs, fd);
   d584a:	4621      	mov	r1, r4
   d584c:	4628      	mov	r0, r5
   d584e:	f7fe fdc5 	bl	d43dc <spiffs_cache_page_get_by_fd>
   d5852:	6220      	str	r0, [r4, #32]
  if (fd->flags & SPIFFS_O_APPEND) {
   d5854:	9801      	ldr	r0, [sp, #4]
   d5856:	8b81      	ldrh	r1, [r0, #28]
   d5858:	07cc      	lsls	r4, r1, #31
   d585a:	d50b      	bpl.n	d5874 <SPIFFS_write+0x98>
    if (fd->size == SPIFFS_UNDEFINED_LEN) {
   d585c:	6886      	ldr	r6, [r0, #8]
      offset = 0;
   d585e:	1c72      	adds	r2, r6, #1
    if (fd->cache_page) {
   d5860:	6a02      	ldr	r2, [r0, #32]
      offset = 0;
   d5862:	bf08      	it	eq
   d5864:	2600      	moveq	r6, #0
    if (fd->cache_page) {
   d5866:	b12a      	cbz	r2, d5874 <SPIFFS_write+0x98>
      offset = MAX(offset, fd->cache_page->offset + fd->cache_page->size);
   d5868:	8a13      	ldrh	r3, [r2, #16]
   d586a:	68d2      	ldr	r2, [r2, #12]
   d586c:	4413      	add	r3, r2
   d586e:	429e      	cmp	r6, r3
   d5870:	bf38      	it	cc
   d5872:	461e      	movcc	r6, r3
  if ((fd->flags & SPIFFS_O_DIRECT) == 0) {
   d5874:	068b      	lsls	r3, r1, #26
   d5876:	d474      	bmi.n	d5962 <SPIFFS_write+0x186>
    if (len < (s32_t)SPIFFS_CFG_LOG_PAGE_SZ(fs)) {
   d5878:	69e9      	ldr	r1, [r5, #28]
   d587a:	6a02      	ldr	r2, [r0, #32]
   d587c:	42b9      	cmp	r1, r7
   d587e:	dd5b      	ble.n	d5938 <SPIFFS_write+0x15c>
      if (fd->cache_page) {
   d5880:	b1fa      	cbz	r2, d58c2 <SPIFFS_write+0xe6>
        if (offset < fd->cache_page->offset || // writing before cache
   d5882:	f8d2 c00c 	ldr.w	ip, [r2, #12]
   d5886:	8a13      	ldrh	r3, [r2, #16]
   d5888:	45b4      	cmp	ip, r6
   d588a:	d808      	bhi.n	d589e <SPIFFS_write+0xc2>
            offset > fd->cache_page->offset + fd->cache_page->size || // writing after cache
   d588c:	eb03 040c 	add.w	r4, r3, ip
        if (offset < fd->cache_page->offset || // writing before cache
   d5890:	42b4      	cmp	r4, r6
   d5892:	d304      	bcc.n	d589e <SPIFFS_write+0xc2>
            offset + len > fd->cache_page->offset + SPIFFS_CFG_LOG_PAGE_SZ(fs)) // writing beyond cache page
   d5894:	19bc      	adds	r4, r7, r6
   d5896:	eb01 0e0c 	add.w	lr, r1, ip
            offset > fd->cache_page->offset + fd->cache_page->size || // writing after cache
   d589a:	4574      	cmp	r4, lr
   d589c:	d91e      	bls.n	d58dc <SPIFFS_write+0x100>
              spiffs_get_cache_page(fs, spiffs_get_cache(fs), fd->cache_page->ix),
   d589e:	7852      	ldrb	r2, [r2, #1]
   d58a0:	6dec      	ldr	r4, [r5, #92]	; 0x5c
   d58a2:	3114      	adds	r1, #20
   d58a4:	6924      	ldr	r4, [r4, #16]
   d58a6:	4351      	muls	r1, r2
   d58a8:	3114      	adds	r1, #20
          res = spiffs_hydro_write(fs, fd,
   d58aa:	4421      	add	r1, r4
   d58ac:	4662      	mov	r2, ip
   d58ae:	f7ff fd0f 	bl	d52d0 <spiffs_hydro_write.isra.0>
          spiffs_cache_fd_release(fs, fd->cache_page);
   d58b2:	9b01      	ldr	r3, [sp, #4]
          res = spiffs_hydro_write(fs, fd,
   d58b4:	4604      	mov	r4, r0
          spiffs_cache_fd_release(fs, fd->cache_page);
   d58b6:	6a19      	ldr	r1, [r3, #32]
   d58b8:	4628      	mov	r0, r5
   d58ba:	f7fe fdc2 	bl	d4442 <spiffs_cache_fd_release>
          SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
   d58be:	2c00      	cmp	r4, #0
   d58c0:	dbaf      	blt.n	d5822 <SPIFFS_write+0x46>
        fd->cache_page = spiffs_cache_page_allocate_by_fd(fs, fd);
   d58c2:	9c01      	ldr	r4, [sp, #4]
   d58c4:	4628      	mov	r0, r5
   d58c6:	4621      	mov	r1, r4
   d58c8:	f7fe fdac 	bl	d4424 <spiffs_cache_page_allocate_by_fd>
        if (fd->cache_page) {
   d58cc:	9b01      	ldr	r3, [sp, #4]
        fd->cache_page = spiffs_cache_page_allocate_by_fd(fs, fd);
   d58ce:	6220      	str	r0, [r4, #32]
        if (fd->cache_page) {
   d58d0:	6a1a      	ldr	r2, [r3, #32]
   d58d2:	b11a      	cbz	r2, d58dc <SPIFFS_write+0x100>
          fd->cache_page->offset = offset;
   d58d4:	60d6      	str	r6, [r2, #12]
          fd->cache_page->size = 0;
   d58d6:	6a1b      	ldr	r3, [r3, #32]
   d58d8:	2200      	movs	r2, #0
   d58da:	821a      	strh	r2, [r3, #16]
      if (fd->cache_page) {
   d58dc:	9801      	ldr	r0, [sp, #4]
   d58de:	6a02      	ldr	r2, [r0, #32]
   d58e0:	b1ea      	cbz	r2, d591e <SPIFFS_write+0x142>
        u32_t offset_in_cpage = offset - fd->cache_page->offset;
   d58e2:	68d3      	ldr	r3, [r2, #12]
        u8_t *cpage_data = spiffs_get_cache_page(fs, cache, fd->cache_page->ix);
   d58e4:	7850      	ldrb	r0, [r2, #1]
   d58e6:	6de9      	ldr	r1, [r5, #92]	; 0x5c
        u32_t offset_in_cpage = offset - fd->cache_page->offset;
   d58e8:	1af6      	subs	r6, r6, r3
        u8_t *cpage_data = spiffs_get_cache_page(fs, cache, fd->cache_page->ix);
   d58ea:	69eb      	ldr	r3, [r5, #28]
   d58ec:	3314      	adds	r3, #20
   d58ee:	fb00 6303 	mla	r3, r0, r3, r6
        _SPIFFS_MEMCPY(&cpage_data[offset_in_cpage], buf, len);
   d58f2:	6908      	ldr	r0, [r1, #16]
   d58f4:	3314      	adds	r3, #20
   d58f6:	463a      	mov	r2, r7
   d58f8:	4641      	mov	r1, r8
   d58fa:	4418      	add	r0, r3
   d58fc:	f00f feb0 	bl	e5660 <memcpy>
        fd->cache_page->size = MAX(fd->cache_page->size, offset_in_cpage + len);
   d5900:	9b01      	ldr	r3, [sp, #4]
   d5902:	6a1a      	ldr	r2, [r3, #32]
   d5904:	8a11      	ldrh	r1, [r2, #16]
   d5906:	443e      	add	r6, r7
   d5908:	428e      	cmp	r6, r1
   d590a:	bf38      	it	cc
   d590c:	460e      	movcc	r6, r1
   d590e:	8216      	strh	r6, [r2, #16]
        fd->fdoffset += len;
   d5910:	699a      	ldr	r2, [r3, #24]
   d5912:	443a      	add	r2, r7
   d5914:	619a      	str	r2, [r3, #24]
        SPIFFS_UNLOCK(fs);
   d5916:	f00b f895 	bl	e0a44 <spiffsParticleUnlock>
        return len;
   d591a:	463c      	mov	r4, r7
   d591c:	e76f      	b.n	d57fe <SPIFFS_write+0x22>
        res = spiffs_hydro_write(fs, fd, buf, offset, len);
   d591e:	463b      	mov	r3, r7
   d5920:	4632      	mov	r2, r6
   d5922:	4641      	mov	r1, r8
  res = spiffs_hydro_write(fs, fd, buf, offset, len);
   d5924:	f7ff fcd4 	bl	d52d0 <spiffs_hydro_write.isra.0>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
   d5928:	1e04      	subs	r4, r0, #0
   d592a:	f6ff af7a 	blt.w	d5822 <SPIFFS_write+0x46>
  fd->fdoffset += len;
   d592e:	9a01      	ldr	r2, [sp, #4]
   d5930:	6993      	ldr	r3, [r2, #24]
   d5932:	443b      	add	r3, r7
   d5934:	6193      	str	r3, [r2, #24]
   d5936:	e775      	b.n	d5824 <SPIFFS_write+0x48>
      if (fd->cache_page) {
   d5938:	b19a      	cbz	r2, d5962 <SPIFFS_write+0x186>
            spiffs_get_cache_page(fs, spiffs_get_cache(fs), fd->cache_page->ix),
   d593a:	7854      	ldrb	r4, [r2, #1]
   d593c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   d593e:	3114      	adds	r1, #20
   d5940:	4361      	muls	r1, r4
   d5942:	691c      	ldr	r4, [r3, #16]
        res = spiffs_hydro_write(fs, fd,
   d5944:	8a13      	ldrh	r3, [r2, #16]
   d5946:	68d2      	ldr	r2, [r2, #12]
            spiffs_get_cache_page(fs, spiffs_get_cache(fs), fd->cache_page->ix),
   d5948:	3114      	adds	r1, #20
        res = spiffs_hydro_write(fs, fd,
   d594a:	4421      	add	r1, r4
   d594c:	f7ff fcc0 	bl	d52d0 <spiffs_hydro_write.isra.0>
        spiffs_cache_fd_release(fs, fd->cache_page);
   d5950:	9b01      	ldr	r3, [sp, #4]
        res = spiffs_hydro_write(fs, fd,
   d5952:	4604      	mov	r4, r0
        spiffs_cache_fd_release(fs, fd->cache_page);
   d5954:	6a19      	ldr	r1, [r3, #32]
   d5956:	4628      	mov	r0, r5
   d5958:	f7fe fd73 	bl	d4442 <spiffs_cache_fd_release>
        SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
   d595c:	2c00      	cmp	r4, #0
   d595e:	f6ff af60 	blt.w	d5822 <SPIFFS_write+0x46>
  res = spiffs_hydro_write(fs, fd, buf, offset, len);
   d5962:	9801      	ldr	r0, [sp, #4]
   d5964:	463b      	mov	r3, r7
   d5966:	4632      	mov	r2, r6
   d5968:	4641      	mov	r1, r8
   d596a:	e7db      	b.n	d5924 <SPIFFS_write+0x148>
   d596c:	000e604f 	.word	0x000e604f
   d5970:	000e6085 	.word	0x000e6085
   d5974:	20090315 	.word	0x20090315
   d5978:	ffffd8d8 	.word	0xffffd8d8
   d597c:	ffffd8f0 	.word	0xffffd8f0
   d5980:	ffffd8db 	.word	0xffffd8db

000d5984 <SPIFFS_remove>:
s32_t SPIFFS_remove(spiffs *fs, const char *path) {
   d5984:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5986:	4605      	mov	r5, r0
  SPIFFS_API_DBG("%s '%s'\n", __func__, path);
   d5988:	460a      	mov	r2, r1
   d598a:	482e      	ldr	r0, [pc, #184]	; (d5a44 <SPIFFS_remove+0xc0>)
s32_t SPIFFS_remove(spiffs *fs, const char *path) {
   d598c:	460e      	mov	r6, r1
  SPIFFS_API_DBG("%s '%s'\n", __func__, path);
   d598e:	492e      	ldr	r1, [pc, #184]	; (d5a48 <SPIFFS_remove+0xc4>)
   d5990:	f00b f836 	bl	e0a00 <spiffsParticleTraceLog>
  SPIFFS_API_CHECK_CFG(fs);
   d5994:	6fea      	ldr	r2, [r5, #124]	; 0x7c
   d5996:	4b2d      	ldr	r3, [pc, #180]	; (d5a4c <SPIFFS_remove+0xc8>)
   d5998:	429a      	cmp	r2, r3
   d599a:	d004      	beq.n	d59a6 <SPIFFS_remove+0x22>
   d599c:	4c2c      	ldr	r4, [pc, #176]	; (d5a50 <SPIFFS_remove+0xcc>)
  SPIFFS_API_CHECK_MOUNT(fs);
   d599e:	646c      	str	r4, [r5, #68]	; 0x44
}
   d59a0:	4620      	mov	r0, r4
   d59a2:	b004      	add	sp, #16
   d59a4:	bd70      	pop	{r4, r5, r6, pc}
  SPIFFS_API_CHECK_MOUNT(fs);
   d59a6:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   d59aa:	b90b      	cbnz	r3, d59b0 <SPIFFS_remove+0x2c>
   d59ac:	4c29      	ldr	r4, [pc, #164]	; (d5a54 <SPIFFS_remove+0xd0>)
   d59ae:	e7f6      	b.n	d599e <SPIFFS_remove+0x1a>
  if (strlen(path) > SPIFFS_OBJ_NAME_LEN - 1) {
   d59b0:	4630      	mov	r0, r6
   d59b2:	f00f fef0 	bl	e5796 <strlen>
   d59b6:	281f      	cmp	r0, #31
   d59b8:	d901      	bls.n	d59be <SPIFFS_remove+0x3a>
    SPIFFS_API_CHECK_RES(fs, SPIFFS_ERR_NAME_TOO_LONG);
   d59ba:	4c27      	ldr	r4, [pc, #156]	; (d5a58 <SPIFFS_remove+0xd4>)
   d59bc:	e7ef      	b.n	d599e <SPIFFS_remove+0x1a>
  SPIFFS_LOCK(fs);
   d59be:	f00b f83b 	bl	e0a38 <spiffsParticleLock>
  res = spiffs_fd_find_new(fs, &fd, 0);
   d59c2:	2200      	movs	r2, #0
   d59c4:	a903      	add	r1, sp, #12
   d59c6:	4628      	mov	r0, r5
   d59c8:	f002 ff12 	bl	d87f0 <spiffs_fd_find_new>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
   d59cc:	1e04      	subs	r4, r0, #0
   d59ce:	da03      	bge.n	d59d8 <SPIFFS_remove+0x54>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
   d59d0:	646c      	str	r4, [r5, #68]	; 0x44
   d59d2:	f00b f837 	bl	e0a44 <spiffsParticleUnlock>
   d59d6:	e7e3      	b.n	d59a0 <SPIFFS_remove+0x1c>
  res = spiffs_object_find_object_index_header_by_name(fs, (const u8_t*)path, &pix);
   d59d8:	f10d 020a 	add.w	r2, sp, #10
   d59dc:	4631      	mov	r1, r6
   d59de:	4628      	mov	r0, r5
   d59e0:	f002 f9aa 	bl	d7d38 <spiffs_object_find_object_index_header_by_name>
  if (res != SPIFFS_OK) {
   d59e4:	4604      	mov	r4, r0
   d59e6:	b138      	cbz	r0, d59f8 <SPIFFS_remove+0x74>
    spiffs_fd_return(fs, fd->file_nbr);
   d59e8:	9b03      	ldr	r3, [sp, #12]
   d59ea:	4628      	mov	r0, r5
   d59ec:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
   d59f0:	f002 ff72 	bl	d88d8 <spiffs_fd_return>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
   d59f4:	2c00      	cmp	r4, #0
   d59f6:	dbeb      	blt.n	d59d0 <SPIFFS_remove+0x4c>
  res = spiffs_object_open_by_page(fs, pix, fd, 0,0);
   d59f8:	2300      	movs	r3, #0
   d59fa:	9a03      	ldr	r2, [sp, #12]
   d59fc:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   d5a00:	9300      	str	r3, [sp, #0]
   d5a02:	4628      	mov	r0, r5
   d5a04:	f001 fac2 	bl	d6f8c <spiffs_object_open_by_page>
  if (res != SPIFFS_OK) {
   d5a08:	4604      	mov	r4, r0
   d5a0a:	b138      	cbz	r0, d5a1c <SPIFFS_remove+0x98>
    spiffs_fd_return(fs, fd->file_nbr);
   d5a0c:	9b03      	ldr	r3, [sp, #12]
   d5a0e:	4628      	mov	r0, r5
   d5a10:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
   d5a14:	f002 ff60 	bl	d88d8 <spiffs_fd_return>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
   d5a18:	2c00      	cmp	r4, #0
   d5a1a:	dbd9      	blt.n	d59d0 <SPIFFS_remove+0x4c>
  res = spiffs_object_truncate(fd, 0, 1);
   d5a1c:	9803      	ldr	r0, [sp, #12]
   d5a1e:	2201      	movs	r2, #1
   d5a20:	2100      	movs	r1, #0
   d5a22:	f002 f9c3 	bl	d7dac <spiffs_object_truncate>
  if (res != SPIFFS_OK) {
   d5a26:	4604      	mov	r4, r0
   d5a28:	b138      	cbz	r0, d5a3a <SPIFFS_remove+0xb6>
    spiffs_fd_return(fs, fd->file_nbr);
   d5a2a:	9b03      	ldr	r3, [sp, #12]
   d5a2c:	4628      	mov	r0, r5
   d5a2e:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
   d5a32:	f002 ff51 	bl	d88d8 <spiffs_fd_return>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
   d5a36:	2c00      	cmp	r4, #0
   d5a38:	dbca      	blt.n	d59d0 <SPIFFS_remove+0x4c>
  SPIFFS_UNLOCK(fs);
   d5a3a:	f00b f803 	bl	e0a44 <spiffsParticleUnlock>
  return 0;
   d5a3e:	2400      	movs	r4, #0
   d5a40:	e7ae      	b.n	d59a0 <SPIFFS_remove+0x1c>
   d5a42:	bf00      	nop
   d5a44:	000e6038 	.word	0x000e6038
   d5a48:	000e6092 	.word	0x000e6092
   d5a4c:	20090315 	.word	0x20090315
   d5a50:	ffffd8d8 	.word	0xffffd8d8
   d5a54:	ffffd8f0 	.word	0xffffd8f0
   d5a58:	ffffd8cc 	.word	0xffffd8cc

000d5a5c <SPIFFS_stat>:
s32_t SPIFFS_stat(spiffs *fs, const char *path, spiffs_stat *s) {
   d5a5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5a5e:	4605      	mov	r5, r0
   d5a60:	460c      	mov	r4, r1
  SPIFFS_API_DBG("%s '%s'\n", __func__, path);
   d5a62:	4819      	ldr	r0, [pc, #100]	; (d5ac8 <SPIFFS_stat+0x6c>)
s32_t SPIFFS_stat(spiffs *fs, const char *path, spiffs_stat *s) {
   d5a64:	4616      	mov	r6, r2
  SPIFFS_API_DBG("%s '%s'\n", __func__, path);
   d5a66:	460a      	mov	r2, r1
   d5a68:	4918      	ldr	r1, [pc, #96]	; (d5acc <SPIFFS_stat+0x70>)
   d5a6a:	f00a ffc9 	bl	e0a00 <spiffsParticleTraceLog>
  SPIFFS_API_CHECK_CFG(fs);
   d5a6e:	6fea      	ldr	r2, [r5, #124]	; 0x7c
   d5a70:	4b17      	ldr	r3, [pc, #92]	; (d5ad0 <SPIFFS_stat+0x74>)
   d5a72:	429a      	cmp	r2, r3
   d5a74:	d004      	beq.n	d5a80 <SPIFFS_stat+0x24>
   d5a76:	4c17      	ldr	r4, [pc, #92]	; (d5ad4 <SPIFFS_stat+0x78>)
    SPIFFS_API_CHECK_RES(fs, SPIFFS_ERR_NAME_TOO_LONG);
   d5a78:	646c      	str	r4, [r5, #68]	; 0x44
}
   d5a7a:	4620      	mov	r0, r4
   d5a7c:	b002      	add	sp, #8
   d5a7e:	bd70      	pop	{r4, r5, r6, pc}
  SPIFFS_API_CHECK_MOUNT(fs);
   d5a80:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   d5a84:	b90b      	cbnz	r3, d5a8a <SPIFFS_stat+0x2e>
   d5a86:	4c14      	ldr	r4, [pc, #80]	; (d5ad8 <SPIFFS_stat+0x7c>)
   d5a88:	e7f6      	b.n	d5a78 <SPIFFS_stat+0x1c>
  if (strlen(path) > SPIFFS_OBJ_NAME_LEN - 1) {
   d5a8a:	4620      	mov	r0, r4
   d5a8c:	f00f fe83 	bl	e5796 <strlen>
   d5a90:	281f      	cmp	r0, #31
   d5a92:	d901      	bls.n	d5a98 <SPIFFS_stat+0x3c>
    SPIFFS_API_CHECK_RES(fs, SPIFFS_ERR_NAME_TOO_LONG);
   d5a94:	4c11      	ldr	r4, [pc, #68]	; (d5adc <SPIFFS_stat+0x80>)
   d5a96:	e7ef      	b.n	d5a78 <SPIFFS_stat+0x1c>
  SPIFFS_LOCK(fs);
   d5a98:	f00a ffce 	bl	e0a38 <spiffsParticleLock>
  res = spiffs_object_find_object_index_header_by_name(fs, (const u8_t*)path, &pix);
   d5a9c:	4621      	mov	r1, r4
   d5a9e:	f10d 0206 	add.w	r2, sp, #6
   d5aa2:	4628      	mov	r0, r5
   d5aa4:	f002 f948 	bl	d7d38 <spiffs_object_find_object_index_header_by_name>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
   d5aa8:	1e04      	subs	r4, r0, #0
   d5aaa:	da03      	bge.n	d5ab4 <SPIFFS_stat+0x58>
   d5aac:	646c      	str	r4, [r5, #68]	; 0x44
  SPIFFS_UNLOCK(fs);
   d5aae:	f00a ffc9 	bl	e0a44 <spiffsParticleUnlock>
  return res;
   d5ab2:	e7e2      	b.n	d5a7a <SPIFFS_stat+0x1e>
  res = spiffs_stat_pix(fs, pix, 0, s);
   d5ab4:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   d5ab8:	4633      	mov	r3, r6
   d5aba:	2200      	movs	r2, #0
   d5abc:	4628      	mov	r0, r5
   d5abe:	f7ff fb65 	bl	d518c <spiffs_stat_pix>
   d5ac2:	4604      	mov	r4, r0
   d5ac4:	e7f3      	b.n	d5aae <SPIFFS_stat+0x52>
   d5ac6:	bf00      	nop
   d5ac8:	000e6038 	.word	0x000e6038
   d5acc:	000e60a0 	.word	0x000e60a0
   d5ad0:	20090315 	.word	0x20090315
   d5ad4:	ffffd8d8 	.word	0xffffd8d8
   d5ad8:	ffffd8f0 	.word	0xffffd8f0
   d5adc:	ffffd8cc 	.word	0xffffd8cc

000d5ae0 <SPIFFS_close>:
s32_t SPIFFS_close(spiffs *fs, spiffs_file fh) {
   d5ae0:	b570      	push	{r4, r5, r6, lr}
   d5ae2:	4605      	mov	r5, r0
  SPIFFS_API_DBG("%s "_SPIPRIfd "\n", __func__, fh);
   d5ae4:	460a      	mov	r2, r1
   d5ae6:	4812      	ldr	r0, [pc, #72]	; (d5b30 <SPIFFS_close+0x50>)
s32_t SPIFFS_close(spiffs *fs, spiffs_file fh) {
   d5ae8:	460e      	mov	r6, r1
  SPIFFS_API_DBG("%s "_SPIPRIfd "\n", __func__, fh);
   d5aea:	4912      	ldr	r1, [pc, #72]	; (d5b34 <SPIFFS_close+0x54>)
   d5aec:	f00a ff88 	bl	e0a00 <spiffsParticleTraceLog>
  SPIFFS_API_CHECK_CFG(fs);
   d5af0:	6fea      	ldr	r2, [r5, #124]	; 0x7c
   d5af2:	4b11      	ldr	r3, [pc, #68]	; (d5b38 <SPIFFS_close+0x58>)
   d5af4:	429a      	cmp	r2, r3
   d5af6:	d003      	beq.n	d5b00 <SPIFFS_close+0x20>
   d5af8:	4c10      	ldr	r4, [pc, #64]	; (d5b3c <SPIFFS_close+0x5c>)
  SPIFFS_API_CHECK_MOUNT(fs);
   d5afa:	646c      	str	r4, [r5, #68]	; 0x44
}
   d5afc:	4620      	mov	r0, r4
   d5afe:	bd70      	pop	{r4, r5, r6, pc}
  SPIFFS_API_CHECK_MOUNT(fs);
   d5b00:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   d5b04:	b90b      	cbnz	r3, d5b0a <SPIFFS_close+0x2a>
   d5b06:	4c0e      	ldr	r4, [pc, #56]	; (d5b40 <SPIFFS_close+0x60>)
   d5b08:	e7f7      	b.n	d5afa <SPIFFS_close+0x1a>
  SPIFFS_LOCK(fs);
   d5b0a:	f00a ff95 	bl	e0a38 <spiffsParticleLock>
  res = spiffs_fflush_cache(fs, fh);
   d5b0e:	4631      	mov	r1, r6
   d5b10:	4628      	mov	r0, r5
   d5b12:	f7ff fc04 	bl	d531e <spiffs_fflush_cache>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
   d5b16:	1e04      	subs	r4, r0, #0
   d5b18:	da01      	bge.n	d5b1e <SPIFFS_close+0x3e>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
   d5b1a:	646c      	str	r4, [r5, #68]	; 0x44
   d5b1c:	e005      	b.n	d5b2a <SPIFFS_close+0x4a>
  res = spiffs_fd_return(fs, fh);
   d5b1e:	4631      	mov	r1, r6
   d5b20:	4628      	mov	r0, r5
   d5b22:	f002 fed9 	bl	d88d8 <spiffs_fd_return>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
   d5b26:	1e04      	subs	r4, r0, #0
   d5b28:	dbf7      	blt.n	d5b1a <SPIFFS_close+0x3a>
  SPIFFS_UNLOCK(fs);
   d5b2a:	f00a ff8b 	bl	e0a44 <spiffsParticleUnlock>
  return res;
   d5b2e:	e7e5      	b.n	d5afc <SPIFFS_close+0x1c>
   d5b30:	000e6059 	.word	0x000e6059
   d5b34:	000e60ac 	.word	0x000e60ac
   d5b38:	20090315 	.word	0x20090315
   d5b3c:	ffffd8d8 	.word	0xffffd8d8
   d5b40:	ffffd8f0 	.word	0xffffd8f0

000d5b44 <SPIFFS_opendir>:
spiffs_DIR *SPIFFS_opendir(spiffs *fs, const char *name, spiffs_DIR *d) {
   d5b44:	b538      	push	{r3, r4, r5, lr}
   d5b46:	4605      	mov	r5, r0
  SPIFFS_API_DBG("%s\n", __func__);
   d5b48:	490b      	ldr	r1, [pc, #44]	; (d5b78 <SPIFFS_opendir+0x34>)
   d5b4a:	480c      	ldr	r0, [pc, #48]	; (d5b7c <SPIFFS_opendir+0x38>)
spiffs_DIR *SPIFFS_opendir(spiffs *fs, const char *name, spiffs_DIR *d) {
   d5b4c:	4614      	mov	r4, r2
  SPIFFS_API_DBG("%s\n", __func__);
   d5b4e:	f00a ff57 	bl	e0a00 <spiffsParticleTraceLog>
  if (!SPIFFS_CHECK_CFG((fs))) {
   d5b52:	6fea      	ldr	r2, [r5, #124]	; 0x7c
   d5b54:	4b0a      	ldr	r3, [pc, #40]	; (d5b80 <SPIFFS_opendir+0x3c>)
   d5b56:	429a      	cmp	r2, r3
   d5b58:	d004      	beq.n	d5b64 <SPIFFS_opendir+0x20>
    (fs)->err_code = SPIFFS_ERR_NOT_CONFIGURED;
   d5b5a:	4b0a      	ldr	r3, [pc, #40]	; (d5b84 <SPIFFS_opendir+0x40>)
   d5b5c:	646b      	str	r3, [r5, #68]	; 0x44
    return 0;
   d5b5e:	2400      	movs	r4, #0
}
   d5b60:	4620      	mov	r0, r4
   d5b62:	bd38      	pop	{r3, r4, r5, pc}
  if (!SPIFFS_CHECK_MOUNT(fs)) {
   d5b64:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   d5b68:	2300      	movs	r3, #0
   d5b6a:	b90a      	cbnz	r2, d5b70 <SPIFFS_opendir+0x2c>
    fs->err_code = SPIFFS_ERR_NOT_MOUNTED;
   d5b6c:	4b06      	ldr	r3, [pc, #24]	; (d5b88 <SPIFFS_opendir+0x44>)
   d5b6e:	e7f5      	b.n	d5b5c <SPIFFS_opendir+0x18>
  d->fs = fs;
   d5b70:	6025      	str	r5, [r4, #0]
  d->block = 0;
   d5b72:	80a3      	strh	r3, [r4, #4]
  d->entry = 0;
   d5b74:	60a3      	str	r3, [r4, #8]
  return d;
   d5b76:	e7f3      	b.n	d5b60 <SPIFFS_opendir+0x1c>
   d5b78:	000e60b9 	.word	0x000e60b9
   d5b7c:	000e5ee3 	.word	0x000e5ee3
   d5b80:	20090315 	.word	0x20090315
   d5b84:	ffffd8d8 	.word	0xffffd8d8
   d5b88:	ffffd8f0 	.word	0xffffd8f0

000d5b8c <SPIFFS_readdir>:

struct spiffs_dirent *SPIFFS_readdir(spiffs_DIR *d, struct spiffs_dirent *e) {
   d5b8c:	b570      	push	{r4, r5, r6, lr}
   d5b8e:	4605      	mov	r5, r0
   d5b90:	b088      	sub	sp, #32
  SPIFFS_API_DBG("%s\n", __func__);
   d5b92:	4819      	ldr	r0, [pc, #100]	; (d5bf8 <SPIFFS_readdir+0x6c>)
struct spiffs_dirent *SPIFFS_readdir(spiffs_DIR *d, struct spiffs_dirent *e) {
   d5b94:	460c      	mov	r4, r1
  SPIFFS_API_DBG("%s\n", __func__);
   d5b96:	4919      	ldr	r1, [pc, #100]	; (d5bfc <SPIFFS_readdir+0x70>)
   d5b98:	f00a ff32 	bl	e0a00 <spiffsParticleTraceLog>
  if (!SPIFFS_CHECK_MOUNT(d->fs)) {
   d5b9c:	682b      	ldr	r3, [r5, #0]
   d5b9e:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
   d5ba2:	b918      	cbnz	r0, d5bac <SPIFFS_readdir+0x20>
    d->fs->err_code = SPIFFS_ERR_NOT_MOUNTED;
   d5ba4:	4a16      	ldr	r2, [pc, #88]	; (d5c00 <SPIFFS_readdir+0x74>)
   d5ba6:	645a      	str	r2, [r3, #68]	; 0x44
  } else {
    d->fs->err_code = res;
  }
  SPIFFS_UNLOCK(d->fs);
  return ret;
}
   d5ba8:	b008      	add	sp, #32
   d5baa:	bd70      	pop	{r4, r5, r6, pc}
  SPIFFS_LOCK(d->fs);
   d5bac:	f00a ff44 	bl	e0a38 <spiffsParticleLock>
  res = spiffs_obj_lu_find_entry_visitor(d->fs,
   d5bb0:	ab07      	add	r3, sp, #28
   d5bb2:	9305      	str	r3, [sp, #20]
   d5bb4:	f10d 031a 	add.w	r3, sp, #26
   d5bb8:	e9cd 4303 	strd	r4, r3, [sp, #12]
   d5bbc:	4b11      	ldr	r3, [pc, #68]	; (d5c04 <SPIFFS_readdir+0x78>)
   d5bbe:	68aa      	ldr	r2, [r5, #8]
   d5bc0:	88a9      	ldrh	r1, [r5, #4]
   d5bc2:	6828      	ldr	r0, [r5, #0]
   d5bc4:	2600      	movs	r6, #0
   d5bc6:	e9cd 6300 	strd	r6, r3, [sp]
   d5bca:	9602      	str	r6, [sp, #8]
   d5bcc:	2304      	movs	r3, #4
   d5bce:	f000 fb49 	bl	d6264 <spiffs_obj_lu_find_entry_visitor>
  if (res == SPIFFS_OK) {
   d5bd2:	b968      	cbnz	r0, d5bf0 <SPIFFS_readdir+0x64>
    d->block = bix;
   d5bd4:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   d5bd8:	80ab      	strh	r3, [r5, #4]
    d->entry = entry + 1;
   d5bda:	9b07      	ldr	r3, [sp, #28]
   d5bdc:	3301      	adds	r3, #1
   d5bde:	60ab      	str	r3, [r5, #8]
    e->obj_id &= ~SPIFFS_OBJ_ID_IX_FLAG;
   d5be0:	8823      	ldrh	r3, [r4, #0]
   d5be2:	f3c3 030e 	ubfx	r3, r3, #0, #15
   d5be6:	8023      	strh	r3, [r4, #0]
  SPIFFS_UNLOCK(d->fs);
   d5be8:	f00a ff2c 	bl	e0a44 <spiffsParticleUnlock>
  return ret;
   d5bec:	4620      	mov	r0, r4
   d5bee:	e7db      	b.n	d5ba8 <SPIFFS_readdir+0x1c>
    d->fs->err_code = res;
   d5bf0:	682b      	ldr	r3, [r5, #0]
  struct spiffs_dirent *ret = 0;
   d5bf2:	4634      	mov	r4, r6
    d->fs->err_code = res;
   d5bf4:	6458      	str	r0, [r3, #68]	; 0x44
   d5bf6:	e7f7      	b.n	d5be8 <SPIFFS_readdir+0x5c>
   d5bf8:	000e5ee3 	.word	0x000e5ee3
   d5bfc:	000e60c8 	.word	0x000e60c8
   d5c00:	ffffd8f0 	.word	0xffffd8f0
   d5c04:	000d5235 	.word	0x000d5235

000d5c08 <SPIFFS_closedir>:

s32_t SPIFFS_closedir(spiffs_DIR *d) {
   d5c08:	b510      	push	{r4, lr}
   d5c0a:	4604      	mov	r4, r0
  SPIFFS_API_DBG("%s\n", __func__);
   d5c0c:	4909      	ldr	r1, [pc, #36]	; (d5c34 <SPIFFS_closedir+0x2c>)
   d5c0e:	480a      	ldr	r0, [pc, #40]	; (d5c38 <SPIFFS_closedir+0x30>)
   d5c10:	f00a fef6 	bl	e0a00 <spiffsParticleTraceLog>
  SPIFFS_API_CHECK_CFG(d->fs);
   d5c14:	6823      	ldr	r3, [r4, #0]
   d5c16:	4a09      	ldr	r2, [pc, #36]	; (d5c3c <SPIFFS_closedir+0x34>)
   d5c18:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
   d5c1a:	4291      	cmp	r1, r2
   d5c1c:	d002      	beq.n	d5c24 <SPIFFS_closedir+0x1c>
   d5c1e:	4808      	ldr	r0, [pc, #32]	; (d5c40 <SPIFFS_closedir+0x38>)
  SPIFFS_API_CHECK_MOUNT(d->fs);
   d5c20:	6458      	str	r0, [r3, #68]	; 0x44
  return 0;
}
   d5c22:	bd10      	pop	{r4, pc}
  SPIFFS_API_CHECK_MOUNT(d->fs);
   d5c24:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   d5c28:	b90a      	cbnz	r2, d5c2e <SPIFFS_closedir+0x26>
   d5c2a:	4806      	ldr	r0, [pc, #24]	; (d5c44 <SPIFFS_closedir+0x3c>)
   d5c2c:	e7f8      	b.n	d5c20 <SPIFFS_closedir+0x18>
  return 0;
   d5c2e:	2000      	movs	r0, #0
   d5c30:	e7f7      	b.n	d5c22 <SPIFFS_closedir+0x1a>
   d5c32:	bf00      	nop
   d5c34:	000e60d7 	.word	0x000e60d7
   d5c38:	000e5ee3 	.word	0x000e5ee3
   d5c3c:	20090315 	.word	0x20090315
   d5c40:	ffffd8d8 	.word	0xffffd8d8
   d5c44:	ffffd8f0 	.word	0xffffd8f0

000d5c48 <SPIFFS_info>:
  SPIFFS_UNLOCK(fs);
  return res;
#endif // SPIFFS_READ_ONLY
}

s32_t SPIFFS_info(spiffs *fs, u32_t *total, u32_t *used) {
   d5c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c4a:	4607      	mov	r7, r0
   d5c4c:	460e      	mov	r6, r1
  SPIFFS_API_DBG("%s\n", __func__);
   d5c4e:	4818      	ldr	r0, [pc, #96]	; (d5cb0 <SPIFFS_info+0x68>)
   d5c50:	4918      	ldr	r1, [pc, #96]	; (d5cb4 <SPIFFS_info+0x6c>)
s32_t SPIFFS_info(spiffs *fs, u32_t *total, u32_t *used) {
   d5c52:	4615      	mov	r5, r2
  SPIFFS_API_DBG("%s\n", __func__);
   d5c54:	f00a fed4 	bl	e0a00 <spiffsParticleTraceLog>
  s32_t res = SPIFFS_OK;
  SPIFFS_API_CHECK_CFG(fs);
   d5c58:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   d5c5a:	4b17      	ldr	r3, [pc, #92]	; (d5cb8 <SPIFFS_info+0x70>)
   d5c5c:	429a      	cmp	r2, r3
   d5c5e:	d002      	beq.n	d5c66 <SPIFFS_info+0x1e>
   d5c60:	4816      	ldr	r0, [pc, #88]	; (d5cbc <SPIFFS_info+0x74>)
  SPIFFS_API_CHECK_MOUNT(fs);
   d5c62:	6478      	str	r0, [r7, #68]	; 0x44
    *used = fs->stats_p_allocated * data_page_size;
  }

  SPIFFS_UNLOCK(fs);
  return res;
}
   d5c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  SPIFFS_API_CHECK_MOUNT(fs);
   d5c66:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
   d5c6a:	b90b      	cbnz	r3, d5c70 <SPIFFS_info+0x28>
   d5c6c:	4814      	ldr	r0, [pc, #80]	; (d5cc0 <SPIFFS_info+0x78>)
   d5c6e:	e7f8      	b.n	d5c62 <SPIFFS_info+0x1a>
  SPIFFS_LOCK(fs);
   d5c70:	f00a fee2 	bl	e0a38 <spiffsParticleLock>
  u32_t pages_per_block = SPIFFS_PAGES_PER_BLOCK(fs);
   d5c74:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
   d5c78:	fbb3 f3f4 	udiv	r3, r3, r4
  u32_t obj_lu_pages = SPIFFS_OBJ_LOOKUP_PAGES(fs);
   d5c7c:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
   d5c80:	ea4f 0243 	mov.w	r2, r3, lsl #1
   d5c84:	bf8c      	ite	hi
   d5c86:	2201      	movhi	r2, #1
   d5c88:	fbb2 f2f4 	udivls	r2, r2, r4
  u32_t data_page_size = SPIFFS_DATA_PAGE_SIZE(fs);
   d5c8c:	3c05      	subs	r4, #5
  if (total) {
   d5c8e:	b136      	cbz	r6, d5c9e <SPIFFS_info+0x56>
  u32_t total_data_pages = (blocks - 2) * (pages_per_block - obj_lu_pages) + 1; // -2 for spare blocks, +1 for emergency page
   d5c90:	6a39      	ldr	r1, [r7, #32]
   d5c92:	1a9b      	subs	r3, r3, r2
   d5c94:	3902      	subs	r1, #2
   d5c96:	434b      	muls	r3, r1
    *total = total_data_pages * data_page_size;
   d5c98:	fb03 4304 	mla	r3, r3, r4, r4
   d5c9c:	6033      	str	r3, [r6, #0]
  if (used) {
   d5c9e:	b115      	cbz	r5, d5ca6 <SPIFFS_info+0x5e>
    *used = fs->stats_p_allocated * data_page_size;
   d5ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   d5ca2:	435c      	muls	r4, r3
   d5ca4:	602c      	str	r4, [r5, #0]
  SPIFFS_UNLOCK(fs);
   d5ca6:	f00a fecd 	bl	e0a44 <spiffsParticleUnlock>
  return res;
   d5caa:	2000      	movs	r0, #0
   d5cac:	e7da      	b.n	d5c64 <SPIFFS_info+0x1c>
   d5cae:	bf00      	nop
   d5cb0:	000e5ee3 	.word	0x000e5ee3
   d5cb4:	000e60e7 	.word	0x000e60e7
   d5cb8:	20090315 	.word	0x20090315
   d5cbc:	ffffd8d8 	.word	0xffffd8d8
   d5cc0:	ffffd8f0 	.word	0xffffd8f0

000d5cc4 <spiffs_obj_lu_find_id_and_span_v>:
    spiffs *fs,
    spiffs_obj_id obj_id,
    spiffs_block_ix bix,
    int ix_entry,
    const void *user_const_p,
    void *user_var_p) {
   d5cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5cc6:	460e      	mov	r6, r1
  s32_t res;
  spiffs_page_header ph;
  spiffs_page_ix pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, ix_entry);
   d5cc8:	e9d0 1c06 	ldrd	r1, ip, [r0, #24]
   d5ccc:	fbb1 f1fc 	udiv	r1, r1, ip
   d5cd0:	fb11 f202 	smulbb	r2, r1, r2
   d5cd4:	ebbc 0f41 	cmp.w	ip, r1, lsl #1
   d5cd8:	ea4f 0541 	mov.w	r5, r1, lsl #1
   d5cdc:	b292      	uxth	r2, r2
    void *user_var_p) {
   d5cde:	b085      	sub	sp, #20
  spiffs_page_ix pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, ix_entry);
   d5ce0:	bf88      	it	hi
   d5ce2:	2401      	movhi	r4, #1
   d5ce4:	4413      	add	r3, r2
   d5ce6:	bf9c      	itt	ls
   d5ce8:	fbb5 f5fc 	udivls	r5, r5, ip
   d5cec:	b2ac      	uxthls	r4, r5
   d5cee:	441c      	add	r4, r3
  res = _spiffs_rd(fs, 0, SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
   d5cf0:	aa02      	add	r2, sp, #8
   d5cf2:	6903      	ldr	r3, [r0, #16]
   d5cf4:	9201      	str	r2, [sp, #4]
  spiffs_page_ix pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, ix_entry);
   d5cf6:	b2a4      	uxth	r4, r4
  res = _spiffs_rd(fs, 0, SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
   d5cf8:	2205      	movs	r2, #5
   d5cfa:	9200      	str	r2, [sp, #0]
   d5cfc:	fb0c 3304 	mla	r3, ip, r4, r3
   d5d00:	2215      	movs	r2, #21
   d5d02:	2100      	movs	r1, #0
    void *user_var_p) {
   d5d04:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  res = _spiffs_rd(fs, 0, SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
   d5d06:	f7fe fa8f 	bl	d4228 <spiffs_phys_rd>
      SPIFFS_PAGE_TO_PADDR(fs, pix), sizeof(spiffs_page_header), (u8_t *)&ph);
  SPIFFS_CHECK_RES(res);
   d5d0a:	2800      	cmp	r0, #0
   d5d0c:	db1a      	blt.n	d5d44 <spiffs_obj_lu_find_id_and_span_v+0x80>
  if (ph.obj_id == obj_id &&
   d5d0e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   d5d12:	42b3      	cmp	r3, r6
   d5d14:	d118      	bne.n	d5d48 <spiffs_obj_lu_find_id_and_span_v+0x84>
   d5d16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      ph.span_ix == *((spiffs_span_ix*)user_var_p) &&
   d5d18:	f8bd 200a 	ldrh.w	r2, [sp, #10]
  if (ph.obj_id == obj_id &&
   d5d1c:	881b      	ldrh	r3, [r3, #0]
   d5d1e:	4293      	cmp	r3, r2
   d5d20:	d112      	bne.n	d5d48 <spiffs_obj_lu_find_id_and_span_v+0x84>
      (ph.flags & (SPIFFS_PH_FLAG_FINAL | SPIFFS_PH_FLAG_DELET | SPIFFS_PH_FLAG_USED)) == SPIFFS_PH_FLAG_DELET &&
   d5d22:	f89d 200c 	ldrb.w	r2, [sp, #12]
      ph.span_ix == *((spiffs_span_ix*)user_var_p) &&
   d5d26:	f002 0183 	and.w	r1, r2, #131	; 0x83
   d5d2a:	2980      	cmp	r1, #128	; 0x80
   d5d2c:	d10c      	bne.n	d5d48 <spiffs_obj_lu_find_id_and_span_v+0x84>
      (ph.flags & (SPIFFS_PH_FLAG_FINAL | SPIFFS_PH_FLAG_DELET | SPIFFS_PH_FLAG_USED)) == SPIFFS_PH_FLAG_DELET &&
   d5d2e:	0431      	lsls	r1, r6, #16
   d5d30:	d502      	bpl.n	d5d38 <spiffs_obj_lu_find_id_and_span_v+0x74>
      !((obj_id & SPIFFS_OBJ_ID_IX_FLAG) && (ph.flags & SPIFFS_PH_FLAG_IXDELE) == 0 && ph.span_ix == 0) &&
   d5d32:	0652      	lsls	r2, r2, #25
   d5d34:	d400      	bmi.n	d5d38 <spiffs_obj_lu_find_id_and_span_v+0x74>
   d5d36:	b13b      	cbz	r3, d5d48 <spiffs_obj_lu_find_id_and_span_v+0x84>
   d5d38:	b147      	cbz	r7, d5d4c <spiffs_obj_lu_find_id_and_span_v+0x88>
      (user_const_p == 0 || *((const spiffs_page_ix*)user_const_p) != pix)) {
   d5d3a:	883b      	ldrh	r3, [r7, #0]
    return SPIFFS_OK;
   d5d3c:	4804      	ldr	r0, [pc, #16]	; (d5d50 <spiffs_obj_lu_find_id_and_span_v+0x8c>)
   d5d3e:	42a3      	cmp	r3, r4
   d5d40:	bf18      	it	ne
   d5d42:	2000      	movne	r0, #0
  } else {
    return SPIFFS_VIS_COUNTINUE;
  }
}
   d5d44:	b005      	add	sp, #20
   d5d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return SPIFFS_VIS_COUNTINUE;
   d5d48:	4801      	ldr	r0, [pc, #4]	; (d5d50 <spiffs_obj_lu_find_id_and_span_v+0x8c>)
   d5d4a:	e7fb      	b.n	d5d44 <spiffs_obj_lu_find_id_and_span_v+0x80>
    return SPIFFS_OK;
   d5d4c:	4638      	mov	r0, r7
   d5d4e:	e7f9      	b.n	d5d44 <spiffs_obj_lu_find_id_and_span_v+0x80>
   d5d50:	ffffd8aa 	.word	0xffffd8aa

000d5d54 <spiffs_page_index_check>:
static s32_t spiffs_page_index_check(spiffs *fs, spiffs_fd *fd, spiffs_page_ix pix, spiffs_span_ix spix) {
   d5d54:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5d56:	461e      	mov	r6, r3
  if (pix == (spiffs_page_ix)-1) {
   d5d58:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5d5c:	429a      	cmp	r2, r3
static s32_t spiffs_page_index_check(spiffs *fs, spiffs_fd *fd, spiffs_page_ix pix, spiffs_span_ix spix) {
   d5d5e:	b085      	sub	sp, #20
   d5d60:	460d      	mov	r5, r1
  if (pix == (spiffs_page_ix)-1) {
   d5d62:	d03b      	beq.n	d5ddc <spiffs_page_index_check+0x88>
  if (pix % SPIFFS_PAGES_PER_BLOCK(fs) < SPIFFS_OBJ_LOOKUP_PAGES(fs)) {
   d5d64:	e9d0 4306 	ldrd	r4, r3, [r0, #24]
   d5d68:	fbb4 f4f3 	udiv	r4, r4, r3
   d5d6c:	ebb3 0f44 	cmp.w	r3, r4, lsl #1
   d5d70:	ea4f 0144 	mov.w	r1, r4, lsl #1
   d5d74:	fbb2 f7f4 	udiv	r7, r2, r4
   d5d78:	bf88      	it	hi
   d5d7a:	2101      	movhi	r1, #1
   d5d7c:	fb04 2717 	mls	r7, r4, r7, r2
   d5d80:	bf98      	it	ls
   d5d82:	fbb1 f1f3 	udivls	r1, r1, r3
   d5d86:	428f      	cmp	r7, r1
   d5d88:	d32a      	bcc.n	d5de0 <spiffs_page_index_check+0x8c>
  if (pix > SPIFFS_MAX_PAGES(fs)) {
   d5d8a:	68c1      	ldr	r1, [r0, #12]
   d5d8c:	fbb1 f1f3 	udiv	r1, r1, r3
   d5d90:	428a      	cmp	r2, r1
   d5d92:	d827      	bhi.n	d5de4 <spiffs_page_index_check+0x90>
  res = _spiffs_rd(
   d5d94:	6901      	ldr	r1, [r0, #16]
   d5d96:	ac02      	add	r4, sp, #8
   d5d98:	9401      	str	r4, [sp, #4]
   d5d9a:	2405      	movs	r4, #5
   d5d9c:	fb03 1302 	mla	r3, r3, r2, r1
   d5da0:	9400      	str	r4, [sp, #0]
   d5da2:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
   d5da6:	2116      	movs	r1, #22
   d5da8:	f7fe fa3e 	bl	d4228 <spiffs_phys_rd>
  SPIFFS_CHECK_RES(res);
   d5dac:	2800      	cmp	r0, #0
   d5dae:	db13      	blt.n	d5dd8 <spiffs_page_index_check+0x84>
  SPIFFS_VALIDATE_OBJIX(ph, fd->obj_id, spix);
   d5db0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d5db4:	07dc      	lsls	r4, r3, #31
   d5db6:	d417      	bmi.n	d5de8 <spiffs_page_index_check+0x94>
   d5db8:	0619      	lsls	r1, r3, #24
   d5dba:	d517      	bpl.n	d5dec <spiffs_page_index_check+0x98>
   d5dbc:	079a      	lsls	r2, r3, #30
   d5dbe:	d417      	bmi.n	d5df0 <spiffs_page_index_check+0x9c>
   d5dc0:	075b      	lsls	r3, r3, #29
   d5dc2:	d417      	bmi.n	d5df4 <spiffs_page_index_check+0xa0>
   d5dc4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d5dc8:	2b00      	cmp	r3, #0
   d5dca:	da13      	bge.n	d5df4 <spiffs_page_index_check+0xa0>
   d5dcc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   d5dd0:	4b09      	ldr	r3, [pc, #36]	; (d5df8 <spiffs_page_index_check+0xa4>)
   d5dd2:	42b2      	cmp	r2, r6
   d5dd4:	bf18      	it	ne
   d5dd6:	4618      	movne	r0, r3
}
   d5dd8:	b005      	add	sp, #20
   d5dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return SPIFFS_ERR_INDEX_FREE;
   d5ddc:	4807      	ldr	r0, [pc, #28]	; (d5dfc <spiffs_page_index_check+0xa8>)
   d5dde:	e7fb      	b.n	d5dd8 <spiffs_page_index_check+0x84>
    return SPIFFS_ERR_INDEX_LU;
   d5de0:	4807      	ldr	r0, [pc, #28]	; (d5e00 <spiffs_page_index_check+0xac>)
   d5de2:	e7f9      	b.n	d5dd8 <spiffs_page_index_check+0x84>
    return SPIFFS_ERR_INDEX_INVALID;
   d5de4:	4807      	ldr	r0, [pc, #28]	; (d5e04 <spiffs_page_index_check+0xb0>)
   d5de6:	e7f7      	b.n	d5dd8 <spiffs_page_index_check+0x84>
  SPIFFS_VALIDATE_OBJIX(ph, fd->obj_id, spix);
   d5de8:	4807      	ldr	r0, [pc, #28]	; (d5e08 <spiffs_page_index_check+0xb4>)
   d5dea:	e7f5      	b.n	d5dd8 <spiffs_page_index_check+0x84>
   d5dec:	4807      	ldr	r0, [pc, #28]	; (d5e0c <spiffs_page_index_check+0xb8>)
   d5dee:	e7f3      	b.n	d5dd8 <spiffs_page_index_check+0x84>
   d5df0:	4807      	ldr	r0, [pc, #28]	; (d5e10 <spiffs_page_index_check+0xbc>)
   d5df2:	e7f1      	b.n	d5dd8 <spiffs_page_index_check+0x84>
   d5df4:	4807      	ldr	r0, [pc, #28]	; (d5e14 <spiffs_page_index_check+0xc0>)
   d5df6:	e7ef      	b.n	d5dd8 <spiffs_page_index_check+0x84>
   d5df8:	ffffd8e3 	.word	0xffffd8e3
   d5dfc:	ffffd8de 	.word	0xffffd8de
   d5e00:	ffffd8dd 	.word	0xffffd8dd
   d5e04:	ffffd8dc 	.word	0xffffd8dc
   d5e08:	ffffd8e4 	.word	0xffffd8e4
   d5e0c:	ffffd8ec 	.word	0xffffd8ec
   d5e10:	ffffd8eb 	.word	0xffffd8eb
   d5e14:	ffffd8ea 	.word	0xffffd8ea

000d5e18 <spiffs_object_find_object_index_header_by_name_v>:
    spiffs *fs,
    spiffs_obj_id obj_id,
    spiffs_block_ix bix,
    int ix_entry,
    const void *user_const_p,
    void *user_var_p) {
   d5e18:	b5f0      	push	{r4, r5, r6, r7, lr}
  (void)user_var_p;
  s32_t res;
  spiffs_page_object_ix_header objix_hdr;
  spiffs_page_ix pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, ix_entry);
   d5e1a:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
   d5e1e:	fbb6 f6f7 	udiv	r6, r6, r7
   d5e22:	fb16 f202 	smulbb	r2, r6, r2
   d5e26:	ebb7 0f46 	cmp.w	r7, r6, lsl #1
   d5e2a:	ea4f 0546 	mov.w	r5, r6, lsl #1
   d5e2e:	b292      	uxth	r2, r2
   d5e30:	bf88      	it	hi
   d5e32:	2401      	movhi	r4, #1
   d5e34:	4413      	add	r3, r2
   d5e36:	bf9c      	itt	ls
   d5e38:	fbb5 f5f7 	udivls	r5, r5, r7
   d5e3c:	b2ac      	uxthls	r4, r5
   d5e3e:	441c      	add	r4, r3
  if (obj_id == SPIFFS_OBJ_ID_FREE || obj_id == SPIFFS_OBJ_ID_DELETED ||
   d5e40:	f481 4100 	eor.w	r1, r1, #32768	; 0x8000
   d5e44:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   d5e48:	4299      	cmp	r1, r3
    void *user_var_p) {
   d5e4a:	b08f      	sub	sp, #60	; 0x3c
  spiffs_page_ix pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, ix_entry);
   d5e4c:	b2a4      	uxth	r4, r4
  if (obj_id == SPIFFS_OBJ_ID_FREE || obj_id == SPIFFS_OBJ_ID_DELETED ||
   d5e4e:	d902      	bls.n	d5e56 <spiffs_object_find_object_index_header_by_name_v+0x3e>
      (obj_id & SPIFFS_OBJ_ID_IX_FLAG) == 0) {
    return SPIFFS_VIS_COUNTINUE;
   d5e50:	4810      	ldr	r0, [pc, #64]	; (d5e94 <spiffs_object_find_object_index_header_by_name_v+0x7c>)
      return SPIFFS_OK;
    }
  }

  return SPIFFS_VIS_COUNTINUE;
}
   d5e52:	b00f      	add	sp, #60	; 0x3c
   d5e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
  res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
   d5e56:	6903      	ldr	r3, [r0, #16]
   d5e58:	aa02      	add	r2, sp, #8
   d5e5a:	9201      	str	r2, [sp, #4]
   d5e5c:	222d      	movs	r2, #45	; 0x2d
   d5e5e:	9200      	str	r2, [sp, #0]
   d5e60:	fb07 3304 	mla	r3, r7, r4, r3
   d5e64:	2200      	movs	r2, #0
   d5e66:	2115      	movs	r1, #21
   d5e68:	f7fe f9de 	bl	d4228 <spiffs_phys_rd>
  SPIFFS_CHECK_RES(res);
   d5e6c:	2800      	cmp	r0, #0
   d5e6e:	dbf0      	blt.n	d5e52 <spiffs_object_find_object_index_header_by_name_v+0x3a>
  if (objix_hdr.p_hdr.span_ix == 0 &&
   d5e70:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   d5e74:	2b00      	cmp	r3, #0
   d5e76:	d1eb      	bne.n	d5e50 <spiffs_object_find_object_index_header_by_name_v+0x38>
   d5e78:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d5e7c:	f003 03c2 	and.w	r3, r3, #194	; 0xc2
   d5e80:	2bc0      	cmp	r3, #192	; 0xc0
   d5e82:	d1e5      	bne.n	d5e50 <spiffs_object_find_object_index_header_by_name_v+0x38>
    if (strcmp((const char*)user_const_p, (char*)objix_hdr.name) == 0) {
   d5e84:	9814      	ldr	r0, [sp, #80]	; 0x50
   d5e86:	f10d 0115 	add.w	r1, sp, #21
   d5e8a:	f00f fc54 	bl	e5736 <strcmp>
   d5e8e:	2800      	cmp	r0, #0
   d5e90:	d0df      	beq.n	d5e52 <spiffs_object_find_object_index_header_by_name_v+0x3a>
   d5e92:	e7dd      	b.n	d5e50 <spiffs_object_find_object_index_header_by_name_v+0x38>
   d5e94:	ffffd8aa 	.word	0xffffd8aa

000d5e98 <spiffs_obj_lu_find_free_obj_id_bitmap_v>:
  u32_t compaction;
  const u8_t *conflicting_name;
} spiffs_free_obj_id_state;

static s32_t spiffs_obj_lu_find_free_obj_id_bitmap_v(spiffs *fs, spiffs_obj_id id, spiffs_block_ix bix, int ix_entry,
    const void *user_const_p, void *user_var_p) {
   d5e98:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5e9a:	460c      	mov	r4, r1
  if (id != SPIFFS_OBJ_ID_FREE && id != SPIFFS_OBJ_ID_DELETED) {
   d5e9c:	3901      	subs	r1, #1
    const void *user_const_p, void *user_var_p) {
   d5e9e:	b08f      	sub	sp, #60	; 0x3c
   d5ea0:	4605      	mov	r5, r0
  if (id != SPIFFS_OBJ_ID_FREE && id != SPIFFS_OBJ_ID_DELETED) {
   d5ea2:	b289      	uxth	r1, r1
   d5ea4:	f64f 70fd 	movw	r0, #65533	; 0xfffd
   d5ea8:	4281      	cmp	r1, r0
    const void *user_const_p, void *user_var_p) {
   d5eaa:	9f14      	ldr	r7, [sp, #80]	; 0x50
  if (id != SPIFFS_OBJ_ID_FREE && id != SPIFFS_OBJ_ID_DELETED) {
   d5eac:	d901      	bls.n	d5eb2 <spiffs_obj_lu_find_free_obj_id_bitmap_v+0x1a>
    int byte_ix = (id-min_obj_id) >> 3;
    if (byte_ix >= 0 && (u32_t)byte_ix < SPIFFS_CFG_LOG_PAGE_SZ(fs)) {
      fs->work[byte_ix] |= (1<<bit_ix);
    }
  }
  return SPIFFS_VIS_COUNTINUE;
   d5eae:	4826      	ldr	r0, [pc, #152]	; (d5f48 <spiffs_obj_lu_find_free_obj_id_bitmap_v+0xb0>)
   d5eb0:	e036      	b.n	d5f20 <spiffs_obj_lu_find_free_obj_id_bitmap_v+0x88>
    spiffs_obj_id min_obj_id = *((spiffs_obj_id*)user_var_p);
   d5eb2:	9915      	ldr	r1, [sp, #84]	; 0x54
   d5eb4:	880e      	ldrh	r6, [r1, #0]
    if (conflicting_name && (id & SPIFFS_OBJ_ID_IX_FLAG)) {
   d5eb6:	2f00      	cmp	r7, #0
   d5eb8:	d034      	beq.n	d5f24 <spiffs_obj_lu_find_free_obj_id_bitmap_v+0x8c>
   d5eba:	0421      	lsls	r1, r4, #16
   d5ebc:	d532      	bpl.n	d5f24 <spiffs_obj_lu_find_free_obj_id_bitmap_v+0x8c>
      spiffs_page_ix pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, ix_entry);
   d5ebe:	e9d5 1c06 	ldrd	r1, ip, [r5, #24]
   d5ec2:	fbb1 fefc 	udiv	lr, r1, ip
   d5ec6:	fb1e f002 	smulbb	r0, lr, r2
   d5eca:	ebbc 0f4e 	cmp.w	ip, lr, lsl #1
   d5ece:	ea4f 014e 	mov.w	r1, lr, lsl #1
   d5ed2:	b280      	uxth	r0, r0
   d5ed4:	bf96      	itet	ls
   d5ed6:	fbb1 f1fc 	udivls	r1, r1, ip
   d5eda:	2201      	movhi	r2, #1
   d5edc:	b28a      	uxthls	r2, r1
   d5ede:	4403      	add	r3, r0
   d5ee0:	441a      	add	r2, r3
      res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
   d5ee2:	a902      	add	r1, sp, #8
   d5ee4:	692b      	ldr	r3, [r5, #16]
   d5ee6:	9101      	str	r1, [sp, #4]
   d5ee8:	b292      	uxth	r2, r2
   d5eea:	212d      	movs	r1, #45	; 0x2d
   d5eec:	9100      	str	r1, [sp, #0]
   d5eee:	fb0c 3302 	mla	r3, ip, r2, r3
   d5ef2:	2115      	movs	r1, #21
   d5ef4:	2200      	movs	r2, #0
   d5ef6:	4628      	mov	r0, r5
   d5ef8:	f7fe f996 	bl	d4228 <spiffs_phys_rd>
      SPIFFS_CHECK_RES(res);
   d5efc:	2800      	cmp	r0, #0
   d5efe:	db0f      	blt.n	d5f20 <spiffs_obj_lu_find_free_obj_id_bitmap_v+0x88>
      if (objix_hdr.p_hdr.span_ix == 0 &&
   d5f00:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   d5f04:	b973      	cbnz	r3, d5f24 <spiffs_obj_lu_find_free_obj_id_bitmap_v+0x8c>
   d5f06:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d5f0a:	f003 03c2 	and.w	r3, r3, #194	; 0xc2
   d5f0e:	2bc0      	cmp	r3, #192	; 0xc0
   d5f10:	d108      	bne.n	d5f24 <spiffs_obj_lu_find_free_obj_id_bitmap_v+0x8c>
        if (strcmp((const char*)user_const_p, (char*)objix_hdr.name) == 0) {
   d5f12:	f10d 0115 	add.w	r1, sp, #21
   d5f16:	4638      	mov	r0, r7
   d5f18:	f00f fc0d 	bl	e5736 <strcmp>
   d5f1c:	b910      	cbnz	r0, d5f24 <spiffs_obj_lu_find_free_obj_id_bitmap_v+0x8c>
          return SPIFFS_ERR_CONFLICTING_NAME;
   d5f1e:	480b      	ldr	r0, [pc, #44]	; (d5f4c <spiffs_obj_lu_find_free_obj_id_bitmap_v+0xb4>)
}
   d5f20:	b00f      	add	sp, #60	; 0x3c
   d5f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    id &= ~SPIFFS_OBJ_ID_IX_FLAG;
   d5f24:	f3c4 040e 	ubfx	r4, r4, #0, #15
    int byte_ix = (id-min_obj_id) >> 3;
   d5f28:	1ba4      	subs	r4, r4, r6
    if (byte_ix >= 0 && (u32_t)byte_ix < SPIFFS_CFG_LOG_PAGE_SZ(fs)) {
   d5f2a:	10e2      	asrs	r2, r4, #3
   d5f2c:	d4bf      	bmi.n	d5eae <spiffs_obj_lu_find_free_obj_id_bitmap_v+0x16>
   d5f2e:	69eb      	ldr	r3, [r5, #28]
   d5f30:	4293      	cmp	r3, r2
   d5f32:	d9bc      	bls.n	d5eae <spiffs_obj_lu_find_free_obj_id_bitmap_v+0x16>
      fs->work[byte_ix] |= (1<<bit_ix);
   d5f34:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   d5f36:	2301      	movs	r3, #1
    u32_t bit_ix = (id-min_obj_id) & 7;
   d5f38:	f004 0407 	and.w	r4, r4, #7
      fs->work[byte_ix] |= (1<<bit_ix);
   d5f3c:	fa03 f404 	lsl.w	r4, r3, r4
   d5f40:	5c8b      	ldrb	r3, [r1, r2]
   d5f42:	431c      	orrs	r4, r3
   d5f44:	548c      	strb	r4, [r1, r2]
   d5f46:	e7b2      	b.n	d5eae <spiffs_obj_lu_find_free_obj_id_bitmap_v+0x16>
   d5f48:	ffffd8aa 	.word	0xffffd8aa
   d5f4c:	ffffd8d9 	.word	0xffffd8d9

000d5f50 <spiffs_obj_lu_scan_v>:
  if (obj_id == SPIFFS_OBJ_ID_FREE) {
   d5f50:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5f54:	4291      	cmp	r1, r2
   d5f56:	d105      	bne.n	d5f64 <spiffs_obj_lu_scan_v+0x14>
    if (ix_entry == 0) {
   d5f58:	b913      	cbnz	r3, d5f60 <spiffs_obj_lu_scan_v+0x10>
      fs->free_blocks++;
   d5f5a:	6c83      	ldr	r3, [r0, #72]	; 0x48
   d5f5c:	3301      	adds	r3, #1
   d5f5e:	6483      	str	r3, [r0, #72]	; 0x48
}
   d5f60:	4805      	ldr	r0, [pc, #20]	; (d5f78 <spiffs_obj_lu_scan_v+0x28>)
   d5f62:	4770      	bx	lr
  } else if (obj_id == SPIFFS_OBJ_ID_DELETED) {
   d5f64:	b919      	cbnz	r1, d5f6e <spiffs_obj_lu_scan_v+0x1e>
    fs->stats_p_deleted++;
   d5f66:	6d03      	ldr	r3, [r0, #80]	; 0x50
   d5f68:	3301      	adds	r3, #1
   d5f6a:	6503      	str	r3, [r0, #80]	; 0x50
   d5f6c:	e7f8      	b.n	d5f60 <spiffs_obj_lu_scan_v+0x10>
    fs->stats_p_allocated++;
   d5f6e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   d5f70:	3301      	adds	r3, #1
   d5f72:	64c3      	str	r3, [r0, #76]	; 0x4c
   d5f74:	e7f4      	b.n	d5f60 <spiffs_obj_lu_scan_v+0x10>
   d5f76:	bf00      	nop
   d5f78:	ffffd8aa 	.word	0xffffd8aa

000d5f7c <spiffs_hash.isra.0>:
}
#endif // !SPIFFS_READ_ONLY

#if SPIFFS_TEMPORAL_FD_CACHE
// djb2 hash
static u32_t spiffs_hash(spiffs *fs, const u8_t *name) {
   d5f7c:	b510      	push	{r4, lr}
   d5f7e:	1e41      	subs	r1, r0, #1
   d5f80:	f100 021f 	add.w	r2, r0, #31
  (void)fs;
  u32_t hash = 5381;
   d5f84:	f241 5005 	movw	r0, #5381	; 0x1505
  u8_t c;
  int i = 0;
  while ((c = name[i++]) && i < SPIFFS_OBJ_NAME_LEN) {
   d5f88:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d5f8c:	b10c      	cbz	r4, d5f92 <spiffs_hash.isra.0+0x16>
   d5f8e:	4291      	cmp	r1, r2
   d5f90:	d100      	bne.n	d5f94 <spiffs_hash.isra.0+0x18>
    hash = (hash * 33) ^ c;
  }
  return hash;
}
   d5f92:	bd10      	pop	{r4, pc}
    hash = (hash * 33) ^ c;
   d5f94:	eb00 1340 	add.w	r3, r0, r0, lsl #5
   d5f98:	ea84 0003 	eor.w	r0, r4, r3
   d5f9c:	e7f4      	b.n	d5f88 <spiffs_hash.isra.0+0xc>
	...

000d5fa0 <spiffs_page_data_check.isra.0>:
static s32_t spiffs_page_data_check(spiffs *fs, spiffs_fd *fd, spiffs_page_ix pix, spiffs_span_ix spix) {
   d5fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5fa2:	461e      	mov	r6, r3
  if (pix == (spiffs_page_ix)-1) {
   d5fa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5fa8:	429a      	cmp	r2, r3
static s32_t spiffs_page_data_check(spiffs *fs, spiffs_fd *fd, spiffs_page_ix pix, spiffs_span_ix spix) {
   d5faa:	b085      	sub	sp, #20
  if (pix == (spiffs_page_ix)-1) {
   d5fac:	d037      	beq.n	d601e <spiffs_page_data_check.isra.0+0x7e>
  if (pix % SPIFFS_PAGES_PER_BLOCK(fs) < SPIFFS_OBJ_LOOKUP_PAGES(fs)) {
   d5fae:	e9d0 4506 	ldrd	r4, r5, [r0, #24]
   d5fb2:	fbb4 f4f5 	udiv	r4, r4, r5
   d5fb6:	ebb5 0f44 	cmp.w	r5, r4, lsl #1
   d5fba:	ea4f 0344 	mov.w	r3, r4, lsl #1
   d5fbe:	fbb2 f7f4 	udiv	r7, r2, r4
   d5fc2:	bf88      	it	hi
   d5fc4:	2301      	movhi	r3, #1
   d5fc6:	fb04 2717 	mls	r7, r4, r7, r2
   d5fca:	bf98      	it	ls
   d5fcc:	fbb3 f3f5 	udivls	r3, r3, r5
   d5fd0:	429f      	cmp	r7, r3
   d5fd2:	d326      	bcc.n	d6022 <spiffs_page_data_check.isra.0+0x82>
  if (pix > SPIFFS_MAX_PAGES(fs)) {
   d5fd4:	68c3      	ldr	r3, [r0, #12]
   d5fd6:	fbb3 f3f5 	udiv	r3, r3, r5
   d5fda:	429a      	cmp	r2, r3
   d5fdc:	d823      	bhi.n	d6026 <spiffs_page_data_check.isra.0+0x86>
  res = _spiffs_rd(
   d5fde:	ac02      	add	r4, sp, #8
   d5fe0:	6903      	ldr	r3, [r0, #16]
   d5fe2:	9401      	str	r4, [sp, #4]
   d5fe4:	2405      	movs	r4, #5
   d5fe6:	9400      	str	r4, [sp, #0]
   d5fe8:	fb05 3302 	mla	r3, r5, r2, r3
   d5fec:	f9b1 2000 	ldrsh.w	r2, [r1]
   d5ff0:	2117      	movs	r1, #23
   d5ff2:	f7fe f919 	bl	d4228 <spiffs_phys_rd>
  SPIFFS_CHECK_RES(res);
   d5ff6:	2800      	cmp	r0, #0
   d5ff8:	db0f      	blt.n	d601a <spiffs_page_data_check.isra.0+0x7a>
  SPIFFS_VALIDATE_DATA(ph, fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG, spix);
   d5ffa:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d5ffe:	07dc      	lsls	r4, r3, #31
   d6000:	d413      	bmi.n	d602a <spiffs_page_data_check.isra.0+0x8a>
   d6002:	0619      	lsls	r1, r3, #24
   d6004:	d513      	bpl.n	d602e <spiffs_page_data_check.isra.0+0x8e>
   d6006:	079a      	lsls	r2, r3, #30
   d6008:	d413      	bmi.n	d6032 <spiffs_page_data_check.isra.0+0x92>
   d600a:	075b      	lsls	r3, r3, #29
   d600c:	d513      	bpl.n	d6036 <spiffs_page_data_check.isra.0+0x96>
   d600e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   d6012:	4b0a      	ldr	r3, [pc, #40]	; (d603c <spiffs_page_data_check.isra.0+0x9c>)
   d6014:	42b2      	cmp	r2, r6
   d6016:	bf18      	it	ne
   d6018:	4618      	movne	r0, r3
}
   d601a:	b005      	add	sp, #20
   d601c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return SPIFFS_ERR_INDEX_REF_FREE;
   d601e:	4808      	ldr	r0, [pc, #32]	; (d6040 <spiffs_page_data_check.isra.0+0xa0>)
   d6020:	e7fb      	b.n	d601a <spiffs_page_data_check.isra.0+0x7a>
    return SPIFFS_ERR_INDEX_REF_LU;
   d6022:	4808      	ldr	r0, [pc, #32]	; (d6044 <spiffs_page_data_check.isra.0+0xa4>)
   d6024:	e7f9      	b.n	d601a <spiffs_page_data_check.isra.0+0x7a>
    return SPIFFS_ERR_INDEX_REF_INVALID;
   d6026:	4808      	ldr	r0, [pc, #32]	; (d6048 <spiffs_page_data_check.isra.0+0xa8>)
   d6028:	e7f7      	b.n	d601a <spiffs_page_data_check.isra.0+0x7a>
  SPIFFS_VALIDATE_DATA(ph, fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG, spix);
   d602a:	4808      	ldr	r0, [pc, #32]	; (d604c <spiffs_page_data_check.isra.0+0xac>)
   d602c:	e7f5      	b.n	d601a <spiffs_page_data_check.isra.0+0x7a>
   d602e:	4808      	ldr	r0, [pc, #32]	; (d6050 <spiffs_page_data_check.isra.0+0xb0>)
   d6030:	e7f3      	b.n	d601a <spiffs_page_data_check.isra.0+0x7a>
   d6032:	4808      	ldr	r0, [pc, #32]	; (d6054 <spiffs_page_data_check.isra.0+0xb4>)
   d6034:	e7f1      	b.n	d601a <spiffs_page_data_check.isra.0+0x7a>
   d6036:	4808      	ldr	r0, [pc, #32]	; (d6058 <spiffs_page_data_check.isra.0+0xb8>)
   d6038:	e7ef      	b.n	d601a <spiffs_page_data_check.isra.0+0x7a>
   d603a:	bf00      	nop
   d603c:	ffffd8e2 	.word	0xffffd8e2
   d6040:	ffffd8e1 	.word	0xffffd8e1
   d6044:	ffffd8e0 	.word	0xffffd8e0
   d6048:	ffffd8df 	.word	0xffffd8df
   d604c:	ffffd8e4 	.word	0xffffd8e4
   d6050:	ffffd8ec 	.word	0xffffd8ec
   d6054:	ffffd8eb 	.word	0xffffd8eb
   d6058:	ffffd8e5 	.word	0xffffd8e5

000d605c <spiffs_update_ix_map.isra.0>:
static void spiffs_update_ix_map(spiffs *fs,
   d605c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  spiffs_ix_map *map = fd->ix_map;
   d6060:	6ace      	ldr	r6, [r1, #44]	; 0x2c
static void spiffs_update_ix_map(spiffs *fs,
   d6062:	4680      	mov	r8, r0
  spiffs_span_ix map_objix_start_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, map->start_spix);
   d6064:	6800      	ldr	r0, [r0, #0]
   d6066:	8934      	ldrh	r4, [r6, #8]
static void spiffs_update_ix_map(spiffs *fs,
   d6068:	4615      	mov	r5, r2
  spiffs_span_ix map_objix_start_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, map->start_spix);
   d606a:	f1a0 022d 	sub.w	r2, r0, #45	; 0x2d
   d606e:	ebb4 0f52 	cmp.w	r4, r2, lsr #1
static void spiffs_update_ix_map(spiffs *fs,
   d6072:	461f      	mov	r7, r3
  spiffs_span_ix map_objix_start_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, map->start_spix);
   d6074:	ea4f 0352 	mov.w	r3, r2, lsr #1
   d6078:	bf24      	itt	cs
   d607a:	eba4 0c03 	subcs.w	ip, r4, r3
   d607e:	f1a0 0208 	subcs.w	r2, r0, #8
static void spiffs_update_ix_map(spiffs *fs,
   d6082:	4689      	mov	r9, r1
  spiffs_span_ix map_objix_end_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, map->end_spix);
   d6084:	8971      	ldrh	r1, [r6, #10]
  spiffs_span_ix map_objix_start_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, map->start_spix);
   d6086:	bf21      	itttt	cs
   d6088:	0852      	lsrcs	r2, r2, #1
   d608a:	fbbc fcf2 	udivcs	ip, ip, r2
   d608e:	f10c 0c01 	addcs.w	ip, ip, #1
   d6092:	fa1f fc8c 	uxthcs.w	ip, ip
   d6096:	bf38      	it	cc
   d6098:	f04f 0c00 	movcc.w	ip, #0
  spiffs_span_ix map_objix_end_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, map->end_spix);
   d609c:	428b      	cmp	r3, r1
   d609e:	bf9f      	itttt	ls
   d60a0:	1aca      	subls	r2, r1, r3
   d60a2:	f1a0 0e08 	subls.w	lr, r0, #8
   d60a6:	ea4f 0e5e 	movls.w	lr, lr, lsr #1
   d60aa:	fbb2 f2fe 	udivls	r2, r2, lr
   d60ae:	bf9a      	itte	ls
   d60b0:	3201      	addls	r2, #1
   d60b2:	b292      	uxthls	r2, r2
   d60b4:	2200      	movhi	r2, #0
  if (objix_spix < map_objix_start_spix || objix_spix > map_objix_end_spix) {
   d60b6:	45ac      	cmp	ip, r5
static void spiffs_update_ix_map(spiffs *fs,
   d60b8:	b087      	sub	sp, #28
  if (objix_spix < map_objix_start_spix || objix_spix > map_objix_end_spix) {
   d60ba:	d81f      	bhi.n	d60fc <spiffs_update_ix_map.isra.0+0xa0>
   d60bc:	4295      	cmp	r5, r2
   d60be:	d81d      	bhi.n	d60fc <spiffs_update_ix_map.isra.0+0xa0>
  spiffs_span_ix objix_data_spix_start =
   d60c0:	b29b      	uxth	r3, r3
   d60c2:	b1f5      	cbz	r5, d6102 <spiffs_update_ix_map.isra.0+0xa6>
      SPIFFS_DATA_SPAN_IX_FOR_OBJ_IX_SPAN_IX(fs, objix_spix);
   d60c4:	3808      	subs	r0, #8
   d60c6:	f3c0 004f 	ubfx	r0, r0, #1, #16
   d60ca:	1e6a      	subs	r2, r5, #1
  spiffs_span_ix objix_data_spix_start =
   d60cc:	fb12 3300 	smlabb	r3, r2, r0, r3
   d60d0:	b29a      	uxth	r2, r3
  spiffs_span_ix objix_data_spix_end = objix_data_spix_start +
   d60d2:	4603      	mov	r3, r0
   d60d4:	4413      	add	r3, r2
  spiffs_span_ix map_spix_end = MIN(map->end_spix + 1, objix_data_spix_end);
   d60d6:	b29b      	uxth	r3, r3
   d60d8:	3101      	adds	r1, #1
   d60da:	428b      	cmp	r3, r1
   d60dc:	bfa8      	it	ge
   d60de:	460b      	movge	r3, r1
   d60e0:	b29b      	uxth	r3, r3
   d60e2:	4294      	cmp	r4, r2
   d60e4:	9305      	str	r3, [sp, #20]
  while (map_spix < map_spix_end) {
   d60e6:	bf38      	it	cc
   d60e8:	4614      	movcc	r4, r2
      objix_data_pix = ((spiffs_page_ix*)((u8_t *)objix + sizeof(spiffs_page_object_ix_header)))[map_spix];
   d60ea:	f107 0a2d 	add.w	sl, r7, #45	; 0x2d
    if (objix_data_pix == (spiffs_page_ix)-1) {
   d60ee:	f64f 7bff 	movw	fp, #65535	; 0xffff
  while (map_spix < map_spix_end) {
   d60f2:	9a05      	ldr	r2, [sp, #20]
   d60f4:	481b      	ldr	r0, [pc, #108]	; (d6164 <spiffs_update_ix_map.isra.0+0x108>)
   d60f6:	b2a3      	uxth	r3, r4
   d60f8:	429a      	cmp	r2, r3
   d60fa:	d804      	bhi.n	d6106 <spiffs_update_ix_map.isra.0+0xaa>
}
   d60fc:	b007      	add	sp, #28
   d60fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  spiffs_span_ix objix_data_spix_start =
   d6102:	462a      	mov	r2, r5
   d6104:	e7e6      	b.n	d60d4 <spiffs_update_ix_map.isra.0+0x78>
    if (objix_spix == 0) {
   d6106:	b9ad      	cbnz	r5, d6134 <spiffs_update_ix_map.isra.0+0xd8>
      objix_data_pix = ((spiffs_page_ix*)((u8_t *)objix + sizeof(spiffs_page_object_ix_header)))[map_spix];
   d6108:	f83a 2014 	ldrh.w	r2, [sl, r4, lsl #1]
    if (objix_data_pix == (spiffs_page_ix)-1) {
   d610c:	455a      	cmp	r2, fp
   d610e:	d0f5      	beq.n	d60fc <spiffs_update_ix_map.isra.0+0xa0>
    map->map_buf[map_spix - map->start_spix] = objix_data_pix;
   d6110:	8933      	ldrh	r3, [r6, #8]
   d6112:	6831      	ldr	r1, [r6, #0]
   d6114:	1ae3      	subs	r3, r4, r3
   d6116:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    SPIFFS_DBG("map "_SPIPRIid":"_SPIPRIsp" ("_SPIPRIsp"--"_SPIPRIsp") objix.spix:"_SPIPRIsp" to pix "_SPIPRIpg"\n",
   d611a:	8933      	ldrh	r3, [r6, #8]
   d611c:	9202      	str	r2, [sp, #8]
   d611e:	887a      	ldrh	r2, [r7, #2]
   d6120:	9201      	str	r2, [sp, #4]
   d6122:	8972      	ldrh	r2, [r6, #10]
   d6124:	9200      	str	r2, [sp, #0]
   d6126:	f8b9 1006 	ldrh.w	r1, [r9, #6]
   d612a:	1ae2      	subs	r2, r4, r3
   d612c:	f00a fc4c 	bl	e09c8 <spiffsParticleInfoLog>
    map_spix++;
   d6130:	3401      	adds	r4, #1
   d6132:	e7de      	b.n	d60f2 <spiffs_update_ix_map.isra.0+0x96>
      objix_data_pix = ((spiffs_page_ix*)((u8_t *)objix + sizeof(spiffs_page_object_ix)))[SPIFFS_OBJ_IX_ENTRY(fs, map_spix)];
   d6134:	f8d8 2000 	ldr.w	r2, [r8]
   d6138:	f1a2 012d 	sub.w	r1, r2, #45	; 0x2d
   d613c:	ebb4 0f51 	cmp.w	r4, r1, lsr #1
   d6140:	ea4f 0351 	mov.w	r3, r1, lsr #1
   d6144:	d203      	bcs.n	d614e <spiffs_update_ix_map.isra.0+0xf2>
   d6146:	0063      	lsls	r3, r4, #1
   d6148:	3308      	adds	r3, #8
   d614a:	5afa      	ldrh	r2, [r7, r3]
   d614c:	e7de      	b.n	d610c <spiffs_update_ix_map.isra.0+0xb0>
   d614e:	3a08      	subs	r2, #8
   d6150:	1ae1      	subs	r1, r4, r3
   d6152:	0852      	lsrs	r2, r2, #1
   d6154:	fbb1 f3f2 	udiv	r3, r1, r2
   d6158:	fb02 1313 	mls	r3, r2, r3, r1
   d615c:	3304      	adds	r3, #4
   d615e:	005b      	lsls	r3, r3, #1
   d6160:	e7f3      	b.n	d614a <spiffs_update_ix_map.isra.0+0xee>
   d6162:	bf00      	nop
   d6164:	000e610b 	.word	0x000e610b

000d6168 <spiffs_obj_lu_find_free_obj_id_compact_v>:
    const void *user_const_p, void *user_var_p) {
   d6168:	b5f0      	push	{r4, r5, r6, r7, lr}
   d616a:	4605      	mov	r5, r0
   d616c:	b08f      	sub	sp, #60	; 0x3c
  if (id != SPIFFS_OBJ_ID_FREE && id != SPIFFS_OBJ_ID_DELETED && (id & SPIFFS_OBJ_ID_IX_FLAG)) {
   d616e:	f481 4000 	eor.w	r0, r1, #32768	; 0x8000
    const void *user_const_p, void *user_var_p) {
   d6172:	460c      	mov	r4, r1
  if (id != SPIFFS_OBJ_ID_FREE && id != SPIFFS_OBJ_ID_DELETED && (id & SPIFFS_OBJ_ID_IX_FLAG)) {
   d6174:	f647 71fe 	movw	r1, #32766	; 0x7ffe
   d6178:	4288      	cmp	r0, r1
    const void *user_const_p, void *user_var_p) {
   d617a:	9e14      	ldr	r6, [sp, #80]	; 0x50
  if (id != SPIFFS_OBJ_ID_FREE && id != SPIFFS_OBJ_ID_DELETED && (id & SPIFFS_OBJ_ID_IX_FLAG)) {
   d617c:	d83f      	bhi.n	d61fe <spiffs_obj_lu_find_free_obj_id_compact_v+0x96>
    res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
   d617e:	e9d5 7006 	ldrd	r7, r0, [r5, #24]
   d6182:	fbb7 fcf0 	udiv	ip, r7, r0
   d6186:	ebb0 0f4c 	cmp.w	r0, ip, lsl #1
   d618a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   d618e:	f8d5 e010 	ldr.w	lr, [r5, #16]
   d6192:	bf94      	ite	ls
   d6194:	fbb1 f1f0 	udivls	r1, r1, r0
   d6198:	2101      	movhi	r1, #1
   d619a:	440b      	add	r3, r1
   d619c:	a902      	add	r1, sp, #8
   d619e:	fb07 e202 	mla	r2, r7, r2, lr
   d61a2:	9101      	str	r1, [sp, #4]
   d61a4:	212d      	movs	r1, #45	; 0x2d
   d61a6:	fb00 2303 	mla	r3, r0, r3, r2
   d61aa:	9100      	str	r1, [sp, #0]
   d61ac:	2200      	movs	r2, #0
   d61ae:	2115      	movs	r1, #21
   d61b0:	4628      	mov	r0, r5
   d61b2:	f7fe f839 	bl	d4228 <spiffs_phys_rd>
    if (res == SPIFFS_OK && objix_hdr.p_hdr.span_ix == 0 &&
   d61b6:	bb10      	cbnz	r0, d61fe <spiffs_obj_lu_find_free_obj_id_compact_v+0x96>
   d61b8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   d61bc:	b9fb      	cbnz	r3, d61fe <spiffs_obj_lu_find_free_obj_id_compact_v+0x96>
   d61be:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d61c2:	f003 0386 	and.w	r3, r3, #134	; 0x86
   d61c6:	2b80      	cmp	r3, #128	; 0x80
   d61c8:	d119      	bne.n	d61fe <spiffs_obj_lu_find_free_obj_id_compact_v+0x96>
      if (state->conflicting_name && strcmp((const char *)state->conflicting_name, (char *)objix_hdr.name) == 0) {
   d61ca:	68b0      	ldr	r0, [r6, #8]
   d61cc:	b138      	cbz	r0, d61de <spiffs_obj_lu_find_free_obj_id_compact_v+0x76>
   d61ce:	f10d 0115 	add.w	r1, sp, #21
   d61d2:	f00f fab0 	bl	e5736 <strcmp>
   d61d6:	b910      	cbnz	r0, d61de <spiffs_obj_lu_find_free_obj_id_compact_v+0x76>
        return SPIFFS_ERR_CONFLICTING_NAME;
   d61d8:	480a      	ldr	r0, [pc, #40]	; (d6204 <spiffs_obj_lu_find_free_obj_id_compact_v+0x9c>)
}
   d61da:	b00f      	add	sp, #60	; 0x3c
   d61dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (id >= state->min_obj_id && id <= state->max_obj_id) {
   d61de:	8833      	ldrh	r3, [r6, #0]
      id &= ~SPIFFS_OBJ_ID_IX_FLAG;
   d61e0:	f3c4 010e 	ubfx	r1, r4, #0, #15
      if (id >= state->min_obj_id && id <= state->max_obj_id) {
   d61e4:	4299      	cmp	r1, r3
   d61e6:	d30a      	bcc.n	d61fe <spiffs_obj_lu_find_free_obj_id_compact_v+0x96>
   d61e8:	8872      	ldrh	r2, [r6, #2]
   d61ea:	428a      	cmp	r2, r1
   d61ec:	d307      	bcc.n	d61fe <spiffs_obj_lu_find_free_obj_id_compact_v+0x96>
        map[ix]++;
   d61ee:	6baa      	ldr	r2, [r5, #56]	; 0x38
        int ix = (id - state->min_obj_id) / state->compaction;
   d61f0:	1ac9      	subs	r1, r1, r3
   d61f2:	6873      	ldr	r3, [r6, #4]
   d61f4:	fbb1 f1f3 	udiv	r1, r1, r3
        map[ix]++;
   d61f8:	5c53      	ldrb	r3, [r2, r1]
   d61fa:	3301      	adds	r3, #1
   d61fc:	5453      	strb	r3, [r2, r1]
  return SPIFFS_VIS_COUNTINUE;
   d61fe:	4802      	ldr	r0, [pc, #8]	; (d6208 <spiffs_obj_lu_find_free_obj_id_compact_v+0xa0>)
   d6200:	e7eb      	b.n	d61da <spiffs_obj_lu_find_free_obj_id_compact_v+0x72>
   d6202:	bf00      	nop
   d6204:	ffffd8d9 	.word	0xffffd8d9
   d6208:	ffffd8aa 	.word	0xffffd8aa

000d620c <spiffs_phys_cpy>:
    u32_t len) {
   d620c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6210:	b092      	sub	sp, #72	; 0x48
   d6212:	4681      	mov	r9, r0
   d6214:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   d6216:	468a      	mov	sl, r1
   d6218:	4615      	mov	r5, r2
   d621a:	461f      	mov	r7, r3
    res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_MOVS, fh, src, chunk_size, b);
   d621c:	ae02      	add	r6, sp, #8
  while (len > 0) {
   d621e:	b91c      	cbnz	r4, d6228 <spiffs_phys_cpy+0x1c>
  return SPIFFS_OK;
   d6220:	4620      	mov	r0, r4
}
   d6222:	b012      	add	sp, #72	; 0x48
   d6224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    u32_t chunk_size = MIN(SPIFFS_COPY_BUFFER_STACK, len);
   d6228:	2c40      	cmp	r4, #64	; 0x40
   d622a:	46a0      	mov	r8, r4
   d622c:	bf28      	it	cs
   d622e:	f04f 0840 	movcs.w	r8, #64	; 0x40
    res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_MOVS, fh, src, chunk_size, b);
   d6232:	e9cd 8600 	strd	r8, r6, [sp]
   d6236:	463b      	mov	r3, r7
   d6238:	4652      	mov	r2, sl
   d623a:	210b      	movs	r1, #11
   d623c:	4648      	mov	r0, r9
   d623e:	f7fd fff3 	bl	d4228 <spiffs_phys_rd>
    SPIFFS_CHECK_RES(res);
   d6242:	2800      	cmp	r0, #0
   d6244:	dbed      	blt.n	d6222 <spiffs_phys_cpy+0x16>
    res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_MOVD,  fh, dst, chunk_size, b);
   d6246:	e9cd 8600 	strd	r8, r6, [sp]
   d624a:	462b      	mov	r3, r5
   d624c:	4652      	mov	r2, sl
   d624e:	210f      	movs	r1, #15
   d6250:	4648      	mov	r0, r9
   d6252:	f7fe f875 	bl	d4340 <spiffs_phys_wr>
    SPIFFS_CHECK_RES(res);
   d6256:	2800      	cmp	r0, #0
   d6258:	dbe3      	blt.n	d6222 <spiffs_phys_cpy+0x16>
    len -= chunk_size;
   d625a:	eba4 0408 	sub.w	r4, r4, r8
    src += chunk_size;
   d625e:	4447      	add	r7, r8
    dst += chunk_size;
   d6260:	4445      	add	r5, r8
   d6262:	e7dc      	b.n	d621e <spiffs_phys_cpy+0x12>

000d6264 <spiffs_obj_lu_find_entry_visitor>:
    int *lu_entry) {
   d6264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6268:	4605      	mov	r5, r0
   d626a:	b08b      	sub	sp, #44	; 0x2c
   d626c:	460e      	mov	r6, r1
  s32_t entry_count = fs->block_count * SPIFFS_OBJ_LOOKUP_MAX_ENTRIES(fs);
   d626e:	e9d5 7106 	ldrd	r7, r1, [r5, #24]
    int *lu_entry) {
   d6272:	9303      	str	r3, [sp, #12]
   d6274:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   d6278:	9308      	str	r3, [sp, #32]
  s32_t entry_count = fs->block_count * SPIFFS_OBJ_LOOKUP_MAX_ENTRIES(fs);
   d627a:	fbb7 f3f1 	udiv	r3, r7, r1
   d627e:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
   d6282:	ea4f 0443 	mov.w	r4, r3, lsl #1
   d6286:	6a00      	ldr	r0, [r0, #32]
   d6288:	bf94      	ite	ls
   d628a:	fbb4 f4f1 	udivls	r4, r4, r1
   d628e:	2401      	movhi	r4, #1
   d6290:	1b1b      	subs	r3, r3, r4
   d6292:	fb03 f400 	mul.w	r4, r3, r0
   d6296:	9405      	str	r4, [sp, #20]
  if (cur_entry > (int)SPIFFS_OBJ_LOOKUP_MAX_ENTRIES(fs) - 1) {
   d6298:	4293      	cmp	r3, r2
  spiffs_obj_id *obj_lu_buf = (spiffs_obj_id *)fs->lu_work;
   d629a:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   d629c:	9407      	str	r4, [sp, #28]
  int entries_per_page = (SPIFFS_CFG_LOG_PAGE_SZ(fs) / sizeof(spiffs_obj_id));
   d629e:	ea4f 0b51 	mov.w	fp, r1, lsr #1
  if (cur_entry > (int)SPIFFS_OBJ_LOOKUP_MAX_ENTRIES(fs) - 1) {
   d62a2:	f300 80b7 	bgt.w	d6414 <spiffs_obj_lu_find_entry_visitor+0x1b0>
    cur_block++;
   d62a6:	3601      	adds	r6, #1
   d62a8:	b2b6      	uxth	r6, r6
    if (cur_block >= fs->block_count) {
   d62aa:	42b0      	cmp	r0, r6
   d62ac:	d921      	bls.n	d62f2 <spiffs_obj_lu_find_entry_visitor+0x8e>
    cur_block_addr = cur_block * SPIFFS_CFG_LOG_BLOCK_SZ(fs);
   d62ae:	fb06 f307 	mul.w	r3, r6, r7
   d62b2:	9302      	str	r3, [sp, #8]
    cur_entry = 0;
   d62b4:	2200      	movs	r2, #0
        if ((flags & SPIFFS_VIS_CHECK_ID) == 0 || obj_lu_buf[cur_entry-entry_offset] == obj_id) {
   d62b6:	9b03      	ldr	r3, [sp, #12]
   d62b8:	f003 0301 	and.w	r3, r3, #1
        cur_block = 0;
   d62bc:	4614      	mov	r4, r2
        if ((flags & SPIFFS_VIS_CHECK_ID) == 0 || obj_lu_buf[cur_entry-entry_offset] == obj_id) {
   d62be:	9309      	str	r3, [sp, #36]	; 0x24
  while (res == SPIFFS_OK && entry_count > 0) {
   d62c0:	9b05      	ldr	r3, [sp, #20]
   d62c2:	2b00      	cmp	r3, #0
   d62c4:	dd1a      	ble.n	d62fc <spiffs_obj_lu_find_entry_visitor+0x98>
    int obj_lookup_page = cur_entry / entries_per_page;
   d62c6:	fb94 f9fb 	sdiv	r9, r4, fp
    while (res == SPIFFS_OK && obj_lookup_page < (int)SPIFFS_OBJ_LOOKUP_PAGES(fs)) {
   d62ca:	fb09 f30b 	mul.w	r3, r9, fp
   d62ce:	9306      	str	r3, [sp, #24]
    int obj_lookup_page = cur_entry / entries_per_page;
   d62d0:	4627      	mov	r7, r4
    while (res == SPIFFS_OK && obj_lookup_page < (int)SPIFFS_OBJ_LOOKUP_PAGES(fs)) {
   d62d2:	e9d5 1206 	ldrd	r1, r2, [r5, #24]
   d62d6:	fbb1 f1f2 	udiv	r1, r1, r2
   d62da:	ebb2 0f41 	cmp.w	r2, r1, lsl #1
   d62de:	ea4f 0341 	mov.w	r3, r1, lsl #1
   d62e2:	bf8c      	ite	hi
   d62e4:	2301      	movhi	r3, #1
   d62e6:	fbb3 f3f2 	udivls	r3, r3, r2
   d62ea:	454b      	cmp	r3, r9
   d62ec:	dc0b      	bgt.n	d6306 <spiffs_obj_lu_find_entry_visitor+0xa2>
   d62ee:	2400      	movs	r4, #0
   d62f0:	e039      	b.n	d6366 <spiffs_obj_lu_find_entry_visitor+0x102>
      if (flags & SPIFFS_VIS_NO_WRAP) {
   d62f2:	9b03      	ldr	r3, [sp, #12]
   d62f4:	f013 0204 	ands.w	r2, r3, #4
   d62f8:	f000 8090 	beq.w	d641c <spiffs_obj_lu_find_entry_visitor+0x1b8>
        return SPIFFS_VIS_END;
   d62fc:	4c4a      	ldr	r4, [pc, #296]	; (d6428 <spiffs_obj_lu_find_entry_visitor+0x1c4>)
}
   d62fe:	4620      	mov	r0, r4
   d6300:	b00b      	add	sp, #44	; 0x2c
   d6302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ,
   d6306:	9902      	ldr	r1, [sp, #8]
   d6308:	692b      	ldr	r3, [r5, #16]
   d630a:	440b      	add	r3, r1
   d630c:	6b69      	ldr	r1, [r5, #52]	; 0x34
   d630e:	fb09 3302 	mla	r3, r9, r2, r3
   d6312:	e9cd 2100 	strd	r2, r1, [sp]
   d6316:	4628      	mov	r0, r5
   d6318:	2200      	movs	r2, #0
   d631a:	2114      	movs	r1, #20
   d631c:	f7fd ff84 	bl	d4228 <spiffs_phys_rd>
   d6320:	9b05      	ldr	r3, [sp, #20]
   d6322:	9304      	str	r3, [sp, #16]
   d6324:	9b06      	ldr	r3, [sp, #24]
   d6326:	4604      	mov	r4, r0
      while (res == SPIFFS_OK &&
   d6328:	46b8      	mov	r8, r7
   d632a:	eba7 0a03 	sub.w	sl, r7, r3
   d632e:	9b04      	ldr	r3, [sp, #16]
   d6330:	9305      	str	r3, [sp, #20]
   d6332:	4647      	mov	r7, r8
   d6334:	69ab      	ldr	r3, [r5, #24]
   d6336:	b97c      	cbnz	r4, d6358 <spiffs_obj_lu_find_entry_visitor+0xf4>
   d6338:	45d3      	cmp	fp, sl
   d633a:	dd0d      	ble.n	d6358 <spiffs_obj_lu_find_entry_visitor+0xf4>
          cur_entry < (int)SPIFFS_OBJ_LOOKUP_MAX_ENTRIES(fs)) // for last obj lookup page
   d633c:	69e9      	ldr	r1, [r5, #28]
   d633e:	fbb3 f3f1 	udiv	r3, r3, r1
   d6342:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
   d6346:	ea4f 0243 	mov.w	r2, r3, lsl #1
   d634a:	bf8c      	ite	hi
   d634c:	2201      	movhi	r2, #1
   d634e:	fbb2 f2f1 	udivls	r2, r2, r1
   d6352:	1a9b      	subs	r3, r3, r2
          cur_entry - entry_offset < entries_per_page && // for non-last obj lookup pages
   d6354:	4543      	cmp	r3, r8
   d6356:	dc13      	bgt.n	d6380 <spiffs_obj_lu_find_entry_visitor+0x11c>
      obj_lookup_page++;
   d6358:	9b06      	ldr	r3, [sp, #24]
   d635a:	445b      	add	r3, fp
   d635c:	f109 0901 	add.w	r9, r9, #1
    while (res == SPIFFS_OK && obj_lookup_page < (int)SPIFFS_OBJ_LOOKUP_PAGES(fs)) {
   d6360:	9306      	str	r3, [sp, #24]
   d6362:	2c00      	cmp	r4, #0
   d6364:	d0b5      	beq.n	d62d2 <spiffs_obj_lu_find_entry_visitor+0x6e>
    if (cur_block >= fs->block_count) {
   d6366:	6a2a      	ldr	r2, [r5, #32]
    cur_block_addr += SPIFFS_CFG_LOG_BLOCK_SZ(fs);
   d6368:	69ab      	ldr	r3, [r5, #24]
    cur_block++;
   d636a:	3601      	adds	r6, #1
   d636c:	b2b6      	uxth	r6, r6
    if (cur_block >= fs->block_count) {
   d636e:	4296      	cmp	r6, r2
   d6370:	d248      	bcs.n	d6404 <spiffs_obj_lu_find_entry_visitor+0x1a0>
    cur_block_addr += SPIFFS_CFG_LOG_BLOCK_SZ(fs);
   d6372:	9a02      	ldr	r2, [sp, #8]
   d6374:	441a      	add	r2, r3
   d6376:	9202      	str	r2, [sp, #8]
  while (res == SPIFFS_OK && entry_count > 0) {
   d6378:	2c00      	cmp	r4, #0
   d637a:	d0a1      	beq.n	d62c0 <spiffs_obj_lu_find_entry_visitor+0x5c>
  SPIFFS_CHECK_RES(res);
   d637c:	dbbf      	blt.n	d62fe <spiffs_obj_lu_find_entry_visitor+0x9a>
   d637e:	e7bd      	b.n	d62fc <spiffs_obj_lu_find_entry_visitor+0x98>
        if ((flags & SPIFFS_VIS_CHECK_ID) == 0 || obj_lu_buf[cur_entry-entry_offset] == obj_id) {
   d6380:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d6382:	b12b      	cbz	r3, d6390 <spiffs_obj_lu_find_entry_visitor+0x12c>
   d6384:	9b07      	ldr	r3, [sp, #28]
   d6386:	9a08      	ldr	r2, [sp, #32]
   d6388:	f833 301a 	ldrh.w	r3, [r3, sl, lsl #1]
   d638c:	4293      	cmp	r3, r2
   d638e:	d131      	bne.n	d63f4 <spiffs_obj_lu_find_entry_visitor+0x190>
          if (block_ix) *block_ix = cur_block;
   d6390:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d6392:	b103      	cbz	r3, d6396 <spiffs_obj_lu_find_entry_visitor+0x132>
   d6394:	801e      	strh	r6, [r3, #0]
          if (lu_entry) *lu_entry = cur_entry;
   d6396:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d6398:	b10b      	cbz	r3, d639e <spiffs_obj_lu_find_entry_visitor+0x13a>
   d639a:	f8c3 8000 	str.w	r8, [r3]
          if (v) {
   d639e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d63a0:	2b00      	cmp	r3, #0
   d63a2:	d0ac      	beq.n	d62fe <spiffs_obj_lu_find_entry_visitor+0x9a>
            res = v(
   d63a4:	9b03      	ldr	r3, [sp, #12]
   d63a6:	9f15      	ldr	r7, [sp, #84]	; 0x54
   d63a8:	079b      	lsls	r3, r3, #30
   d63aa:	bf56      	itet	pl
   d63ac:	9b07      	ldrpl	r3, [sp, #28]
   d63ae:	9908      	ldrmi	r1, [sp, #32]
   d63b0:	f833 101a 	ldrhpl.w	r1, [r3, sl, lsl #1]
   d63b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d63b6:	9301      	str	r3, [sp, #4]
   d63b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d63ba:	9300      	str	r3, [sp, #0]
   d63bc:	4632      	mov	r2, r6
   d63be:	4643      	mov	r3, r8
   d63c0:	4628      	mov	r0, r5
   d63c2:	47b8      	blx	r7
            if (res == SPIFFS_VIS_COUNTINUE || res == SPIFFS_VIS_COUNTINUE_RELOAD) {
   d63c4:	f500 531d 	add.w	r3, r0, #10048	; 0x2740
   d63c8:	3317      	adds	r3, #23
   d63ca:	2b01      	cmp	r3, #1
   d63cc:	d829      	bhi.n	d6422 <spiffs_obj_lu_find_entry_visitor+0x1be>
              if (res == SPIFFS_VIS_COUNTINUE_RELOAD) {
   d63ce:	4b17      	ldr	r3, [pc, #92]	; (d642c <spiffs_obj_lu_find_entry_visitor+0x1c8>)
   d63d0:	4298      	cmp	r0, r3
   d63d2:	d10f      	bne.n	d63f4 <spiffs_obj_lu_find_entry_visitor+0x190>
                res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ,
   d63d4:	9902      	ldr	r1, [sp, #8]
   d63d6:	692a      	ldr	r2, [r5, #16]
   d63d8:	69eb      	ldr	r3, [r5, #28]
   d63da:	440a      	add	r2, r1
   d63dc:	6b69      	ldr	r1, [r5, #52]	; 0x34
   d63de:	4628      	mov	r0, r5
   d63e0:	e9cd 3100 	strd	r3, r1, [sp]
   d63e4:	fb09 2303 	mla	r3, r9, r3, r2
   d63e8:	2114      	movs	r1, #20
   d63ea:	2200      	movs	r2, #0
   d63ec:	f7fd ff1c 	bl	d4228 <spiffs_phys_rd>
                SPIFFS_CHECK_RES(res);
   d63f0:	2800      	cmp	r0, #0
   d63f2:	db16      	blt.n	d6422 <spiffs_obj_lu_find_entry_visitor+0x1be>
   d63f4:	9b04      	ldr	r3, [sp, #16]
   d63f6:	3b01      	subs	r3, #1
   d63f8:	9304      	str	r3, [sp, #16]
   d63fa:	f108 0801 	add.w	r8, r8, #1
   d63fe:	f10a 0a01 	add.w	sl, sl, #1
   d6402:	e794      	b.n	d632e <spiffs_obj_lu_find_entry_visitor+0xca>
      if (flags & SPIFFS_VIS_NO_WRAP) {
   d6404:	9b03      	ldr	r3, [sp, #12]
   d6406:	f013 0704 	ands.w	r7, r3, #4
   d640a:	f47f af77 	bne.w	d62fc <spiffs_obj_lu_find_entry_visitor+0x98>
        cur_block_addr = 0;
   d640e:	9702      	str	r7, [sp, #8]
        cur_block = 0;
   d6410:	463e      	mov	r6, r7
   d6412:	e7b1      	b.n	d6378 <spiffs_obj_lu_find_entry_visitor+0x114>
  u32_t cur_block_addr = starting_block * SPIFFS_CFG_LOG_BLOCK_SZ(fs);
   d6414:	fb07 f306 	mul.w	r3, r7, r6
   d6418:	9302      	str	r3, [sp, #8]
   d641a:	e74c      	b.n	d62b6 <spiffs_obj_lu_find_entry_visitor+0x52>
        cur_block_addr = 0;
   d641c:	9202      	str	r2, [sp, #8]
        cur_block = 0;
   d641e:	4616      	mov	r6, r2
   d6420:	e749      	b.n	d62b6 <spiffs_obj_lu_find_entry_visitor+0x52>
                res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ,
   d6422:	4604      	mov	r4, r0
   d6424:	e76b      	b.n	d62fe <spiffs_obj_lu_find_entry_visitor+0x9a>
   d6426:	bf00      	nop
   d6428:	ffffd8a8 	.word	0xffffd8a8
   d642c:	ffffd8a9 	.word	0xffffd8a9

000d6430 <spiffs_erase_block>:
    spiffs_block_ix bix) {
   d6430:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  u32_t addr = SPIFFS_BLOCK_TO_PADDR(fs, bix);
   d6434:	6986      	ldr	r6, [r0, #24]
   d6436:	6907      	ldr	r7, [r0, #16]
    SPIFFS_DBG("erase "_SPIPRIad":"_SPIPRIi"\n", addr,  SPIFFS_CFG_PHYS_ERASE_SZ(fs));
   d6438:	f8df 80dc 	ldr.w	r8, [pc, #220]	; d6518 <spiffs_erase_block+0xe8>
    spiffs_block_ix bix) {
   d643c:	4604      	mov	r4, r0
   d643e:	460d      	mov	r5, r1
  u32_t addr = SPIFFS_BLOCK_TO_PADDR(fs, bix);
   d6440:	fb06 7701 	mla	r7, r6, r1, r7
  while (size > 0) {
   d6444:	2e00      	cmp	r6, #0
   d6446:	dc58      	bgt.n	d64fa <spiffs_erase_block+0xca>
  res = _spiffs_wr(fs, SPIFFS_OP_C_WRTHRU | SPIFFS_OP_T_OBJ_LU2, 0,
   d6448:	e9d4 2106 	ldrd	r2, r1, [r4, #24]
   d644c:	6920      	ldr	r0, [r4, #16]
  fs->free_blocks++;
   d644e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  res = _spiffs_wr(fs, SPIFFS_OP_C_WRTHRU | SPIFFS_OP_T_OBJ_LU2, 0,
   d6450:	fbb2 f6f1 	udiv	r6, r2, r1
   d6454:	3802      	subs	r0, #2
   d6456:	ebb1 0f46 	cmp.w	r1, r6, lsl #1
   d645a:	fb02 0205 	mla	r2, r2, r5, r0
  fs->free_blocks++;
   d645e:	f103 0301 	add.w	r3, r3, #1
  res = _spiffs_wr(fs, SPIFFS_OP_C_WRTHRU | SPIFFS_OP_T_OBJ_LU2, 0,
   d6462:	f104 0056 	add.w	r0, r4, #86	; 0x56
  fs->free_blocks++;
   d6466:	64a3      	str	r3, [r4, #72]	; 0x48
  res = _spiffs_wr(fs, SPIFFS_OP_C_WRTHRU | SPIFFS_OP_T_OBJ_LU2, 0,
   d6468:	9001      	str	r0, [sp, #4]
   d646a:	ea4f 0346 	mov.w	r3, r6, lsl #1
   d646e:	f04f 0002 	mov.w	r0, #2
   d6472:	bf8c      	ite	hi
   d6474:	2301      	movhi	r3, #1
   d6476:	fbb3 f3f1 	udivls	r3, r3, r1
   d647a:	9000      	str	r0, [sp, #0]
   d647c:	fb03 2301 	mla	r3, r3, r1, r2
   d6480:	4620      	mov	r0, r4
   d6482:	2200      	movs	r2, #0
   d6484:	2119      	movs	r1, #25
   d6486:	f7fd ff5b 	bl	d4340 <spiffs_phys_wr>
  SPIFFS_CHECK_RES(res);
   d648a:	2800      	cmp	r0, #0
   d648c:	db32      	blt.n	d64f4 <spiffs_erase_block+0xc4>
  spiffs_obj_id magic = SPIFFS_MAGIC(fs, bix);
   d648e:	e9d4 0207 	ldrd	r0, r2, [r4, #28]
   d6492:	1b52      	subs	r2, r2, r5
   d6494:	4042      	eors	r2, r0
   d6496:	f482 62a5 	eor.w	r2, r2, #1320	; 0x528
  res = _spiffs_wr(fs, SPIFFS_OP_C_WRTHRU | SPIFFS_OP_T_OBJ_LU2, 0,
   d649a:	6921      	ldr	r1, [r4, #16]
  spiffs_obj_id magic = SPIFFS_MAGIC(fs, bix);
   d649c:	f082 0201 	eor.w	r2, r2, #1
   d64a0:	f8ad 200e 	strh.w	r2, [sp, #14]
  res = _spiffs_wr(fs, SPIFFS_OP_C_WRTHRU | SPIFFS_OP_T_OBJ_LU2, 0,
   d64a4:	69a2      	ldr	r2, [r4, #24]
   d64a6:	fbb2 f6f0 	udiv	r6, r2, r0
   d64aa:	3904      	subs	r1, #4
   d64ac:	ebb0 0f46 	cmp.w	r0, r6, lsl #1
   d64b0:	fb02 1505 	mla	r5, r2, r5, r1
   d64b4:	f10d 020e 	add.w	r2, sp, #14
   d64b8:	ea4f 0346 	mov.w	r3, r6, lsl #1
   d64bc:	9201      	str	r2, [sp, #4]
   d64be:	bf88      	it	hi
   d64c0:	2301      	movhi	r3, #1
   d64c2:	f04f 0202 	mov.w	r2, #2
   d64c6:	bf98      	it	ls
   d64c8:	fbb3 f3f0 	udivls	r3, r3, r0
   d64cc:	9200      	str	r2, [sp, #0]
   d64ce:	fb03 5300 	mla	r3, r3, r0, r5
   d64d2:	2200      	movs	r2, #0
   d64d4:	2119      	movs	r1, #25
   d64d6:	4620      	mov	r0, r4
   d64d8:	f7fd ff32 	bl	d4340 <spiffs_phys_wr>
  SPIFFS_CHECK_RES(res);
   d64dc:	2800      	cmp	r0, #0
   d64de:	db09      	blt.n	d64f4 <spiffs_erase_block+0xc4>
  fs->max_erase_count++;
   d64e0:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
   d64e4:	3301      	adds	r3, #1
   d64e6:	b29b      	uxth	r3, r3
  if (fs->max_erase_count == SPIFFS_OBJ_ID_IX_FLAG) {
   d64e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fs->max_erase_count = 0;
   d64ec:	bf08      	it	eq
   d64ee:	2300      	moveq	r3, #0
   d64f0:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
}
   d64f4:	b004      	add	sp, #16
   d64f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPIFFS_DBG("erase "_SPIPRIad":"_SPIPRIi"\n", addr,  SPIFFS_CFG_PHYS_ERASE_SZ(fs));
   d64fa:	4639      	mov	r1, r7
   d64fc:	6962      	ldr	r2, [r4, #20]
   d64fe:	4640      	mov	r0, r8
   d6500:	f00a fa62 	bl	e09c8 <spiffsParticleInfoLog>
    SPIFFS_HAL_ERASE(fs, addr, SPIFFS_CFG_PHYS_ERASE_SZ(fs));
   d6504:	68a3      	ldr	r3, [r4, #8]
   d6506:	6962      	ldr	r2, [r4, #20]
   d6508:	4639      	mov	r1, r7
   d650a:	4620      	mov	r0, r4
   d650c:	4798      	blx	r3
    addr += SPIFFS_CFG_PHYS_ERASE_SZ(fs);
   d650e:	6963      	ldr	r3, [r4, #20]
   d6510:	441f      	add	r7, r3
    size -= SPIFFS_CFG_PHYS_ERASE_SZ(fs);
   d6512:	1af6      	subs	r6, r6, r3
   d6514:	e796      	b.n	d6444 <spiffs_erase_block+0x14>
   d6516:	bf00      	nop
   d6518:	000e6143 	.word	0x000e6143

000d651c <spiffs_obj_lu_scan>:
    spiffs *fs) {
   d651c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6520:	b089      	sub	sp, #36	; 0x24
  bix = 0;
   d6522:	2500      	movs	r5, #0
  spiffs_obj_id erase_count_min = SPIFFS_OBJ_ID_FREE;
   d6524:	f64f 76ff 	movw	r6, #65535	; 0xffff
    spiffs *fs) {
   d6528:	4604      	mov	r4, r0
  bix = 0;
   d652a:	f8ad 5018 	strh.w	r5, [sp, #24]
  spiffs_block_ix unerased_bix = (spiffs_block_ix)-1;
   d652e:	4637      	mov	r7, r6
    res = _spiffs_rd(fs,
   d6530:	f10d 091a 	add.w	r9, sp, #26
   d6534:	f04f 0802 	mov.w	r8, #2
  while (bix < fs->block_count) {
   d6538:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   d653c:	6a23      	ldr	r3, [r4, #32]
   d653e:	4299      	cmp	r1, r3
   d6540:	d323      	bcc.n	d658a <spiffs_obj_lu_scan+0x6e>
  } else if (erase_count_max - erase_count_min > (SPIFFS_OBJ_ID_FREE)/2) {
   d6542:	1bab      	subs	r3, r5, r6
   d6544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    erase_count_final = erase_count_min+1;
   d6548:	bfac      	ite	ge
   d654a:	1c75      	addge	r5, r6, #1
    erase_count_final = erase_count_max+1;
   d654c:	3501      	addlt	r5, #1
  if (unerased_bix != (spiffs_block_ix)-1) {
   d654e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    erase_count_final = erase_count_max+1;
   d6552:	b2ad      	uxth	r5, r5
  if (unerased_bix != (spiffs_block_ix)-1) {
   d6554:	429f      	cmp	r7, r3
  fs->max_erase_count = erase_count_final;
   d6556:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
  if (unerased_bix != (spiffs_block_ix)-1) {
   d655a:	d17a      	bne.n	d6652 <spiffs_obj_lu_scan+0x136>
  res = spiffs_obj_lu_find_entry_visitor(fs,
   d655c:	aa07      	add	r2, sp, #28
  fs->free_blocks = 0;
   d655e:	2300      	movs	r3, #0
  res = spiffs_obj_lu_find_entry_visitor(fs,
   d6560:	9205      	str	r2, [sp, #20]
   d6562:	aa06      	add	r2, sp, #24
   d6564:	e9cd 3203 	strd	r3, r2, [sp, #12]
   d6568:	4a3f      	ldr	r2, [pc, #252]	; (d6668 <spiffs_obj_lu_scan+0x14c>)
  fs->stats_p_deleted = 0;
   d656a:	6523      	str	r3, [r4, #80]	; 0x50
  res = spiffs_obj_lu_find_entry_visitor(fs,
   d656c:	e9cd 3200 	strd	r3, r2, [sp]
  fs->stats_p_allocated = 0;
   d6570:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
  res = spiffs_obj_lu_find_entry_visitor(fs,
   d6574:	9302      	str	r3, [sp, #8]
   d6576:	461a      	mov	r2, r3
   d6578:	4619      	mov	r1, r3
   d657a:	4620      	mov	r0, r4
   d657c:	f7ff fe72 	bl	d6264 <spiffs_obj_lu_find_entry_visitor>
    res = SPIFFS_OK;
   d6580:	4b3a      	ldr	r3, [pc, #232]	; (d666c <spiffs_obj_lu_scan+0x150>)
   d6582:	4298      	cmp	r0, r3
   d6584:	bf08      	it	eq
   d6586:	2000      	moveq	r0, #0
   d6588:	e060      	b.n	d664c <spiffs_obj_lu_scan+0x130>
    res = _spiffs_rd(fs,
   d658a:	e9d4 2006 	ldrd	r2, r0, [r4, #24]
   d658e:	f8d4 c010 	ldr.w	ip, [r4, #16]
   d6592:	fbb2 fef0 	udiv	lr, r2, r0
   d6596:	f1ac 0c04 	sub.w	ip, ip, #4
   d659a:	ebb0 0f4e 	cmp.w	r0, lr, lsl #1
   d659e:	ea4f 034e 	mov.w	r3, lr, lsl #1
   d65a2:	fb01 c202 	mla	r2, r1, r2, ip
   d65a6:	bf8c      	ite	hi
   d65a8:	2301      	movhi	r3, #1
   d65aa:	fbb3 f3f0 	udivls	r3, r3, r0
   d65ae:	e9cd 8900 	strd	r8, r9, [sp]
   d65b2:	fb03 2300 	mla	r3, r3, r0, r2
   d65b6:	2115      	movs	r1, #21
   d65b8:	2200      	movs	r2, #0
   d65ba:	4620      	mov	r0, r4
   d65bc:	f7fd fe34 	bl	d4228 <spiffs_phys_rd>
    SPIFFS_CHECK_RES(res);
   d65c0:	2800      	cmp	r0, #0
   d65c2:	db43      	blt.n	d664c <spiffs_obj_lu_scan+0x130>
    if (magic != SPIFFS_MAGIC(fs, bix)) {
   d65c4:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   d65c8:	6a22      	ldr	r2, [r4, #32]
   d65ca:	69e0      	ldr	r0, [r4, #28]
   d65cc:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   d65d0:	1a52      	subs	r2, r2, r1
   d65d2:	4042      	eors	r2, r0
   d65d4:	f482 62a5 	eor.w	r2, r2, #1320	; 0x528
   d65d8:	f082 0201 	eor.w	r2, r2, #1
   d65dc:	b292      	uxth	r2, r2
   d65de:	4293      	cmp	r3, r2
   d65e0:	d004      	beq.n	d65ec <spiffs_obj_lu_scan+0xd0>
      if (unerased_bix == (spiffs_block_ix)-1) {
   d65e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d65e6:	429f      	cmp	r7, r3
   d65e8:	d12f      	bne.n	d664a <spiffs_obj_lu_scan+0x12e>
        unerased_bix = bix;
   d65ea:	460f      	mov	r7, r1
    res = _spiffs_rd(fs,
   d65ec:	6922      	ldr	r2, [r4, #16]
   d65ee:	f8d4 c018 	ldr.w	ip, [r4, #24]
   d65f2:	fbbc fef0 	udiv	lr, ip, r0
   d65f6:	3a02      	subs	r2, #2
   d65f8:	ebb0 0f4e 	cmp.w	r0, lr, lsl #1
   d65fc:	ea4f 034e 	mov.w	r3, lr, lsl #1
   d6600:	fb0c 2101 	mla	r1, ip, r1, r2
   d6604:	bf88      	it	hi
   d6606:	2301      	movhi	r3, #1
   d6608:	aa07      	add	r2, sp, #28
   d660a:	bf98      	it	ls
   d660c:	fbb3 f3f0 	udivls	r3, r3, r0
   d6610:	e9cd 8200 	strd	r8, r2, [sp]
   d6614:	fb03 1300 	mla	r3, r3, r0, r1
   d6618:	2200      	movs	r2, #0
   d661a:	2115      	movs	r1, #21
   d661c:	4620      	mov	r0, r4
   d661e:	f7fd fe03 	bl	d4228 <spiffs_phys_rd>
    SPIFFS_CHECK_RES(res);
   d6622:	2800      	cmp	r0, #0
   d6624:	db12      	blt.n	d664c <spiffs_obj_lu_scan+0x130>
    if (erase_count != SPIFFS_OBJ_ID_FREE) {
   d6626:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   d662a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d662e:	4293      	cmp	r3, r2
   d6630:	d005      	beq.n	d663e <spiffs_obj_lu_scan+0x122>
      erase_count_min = MIN(erase_count_min, erase_count);
   d6632:	429e      	cmp	r6, r3
   d6634:	bf28      	it	cs
   d6636:	461e      	movcs	r6, r3
      erase_count_max = MAX(erase_count_max, erase_count);
   d6638:	429d      	cmp	r5, r3
   d663a:	bf38      	it	cc
   d663c:	461d      	movcc	r5, r3
    bix++;
   d663e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d6642:	3301      	adds	r3, #1
   d6644:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6648:	e776      	b.n	d6538 <spiffs_obj_lu_scan+0x1c>
        SPIFFS_CHECK_RES(SPIFFS_ERR_NOT_A_FS);
   d664a:	4809      	ldr	r0, [pc, #36]	; (d6670 <spiffs_obj_lu_scan+0x154>)
}
   d664c:	b009      	add	sp, #36	; 0x24
   d664e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    SPIFFS_DBG("mount: erase block "_SPIPRIbl"\n", bix);
   d6652:	4808      	ldr	r0, [pc, #32]	; (d6674 <spiffs_obj_lu_scan+0x158>)
   d6654:	f00a f9b8 	bl	e09c8 <spiffsParticleInfoLog>
    res = spiffs_erase_block(fs, unerased_bix);
   d6658:	4639      	mov	r1, r7
   d665a:	4620      	mov	r0, r4
   d665c:	f7ff fee8 	bl	d6430 <spiffs_erase_block>
    SPIFFS_CHECK_RES(res);
   d6660:	2800      	cmp	r0, #0
   d6662:	f6bf af7b 	bge.w	d655c <spiffs_obj_lu_scan+0x40>
   d6666:	e7f1      	b.n	d664c <spiffs_obj_lu_scan+0x130>
   d6668:	000d5f51 	.word	0x000d5f51
   d666c:	ffffd8a8 	.word	0xffffd8a8
   d6670:	ffffd8d7 	.word	0xffffd8d7
   d6674:	000e6152 	.word	0x000e6152

000d6678 <spiffs_obj_lu_find_id>:
    int *lu_entry) {
   d6678:	b510      	push	{r4, lr}
   d667a:	b086      	sub	sp, #24
  s32_t res = spiffs_obj_lu_find_entry_visitor(
   d667c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   d667e:	9405      	str	r4, [sp, #20]
   d6680:	9c08      	ldr	r4, [sp, #32]
   d6682:	9404      	str	r4, [sp, #16]
   d6684:	2400      	movs	r4, #0
   d6686:	e9cd 3400 	strd	r3, r4, [sp]
   d668a:	e9cd 4402 	strd	r4, r4, [sp, #8]
   d668e:	2301      	movs	r3, #1
   d6690:	f7ff fde8 	bl	d6264 <spiffs_obj_lu_find_entry_visitor>
}
   d6694:	4a03      	ldr	r2, [pc, #12]	; (d66a4 <spiffs_obj_lu_find_id+0x2c>)
   d6696:	4b04      	ldr	r3, [pc, #16]	; (d66a8 <spiffs_obj_lu_find_id+0x30>)
   d6698:	4290      	cmp	r0, r2
   d669a:	bf08      	it	eq
   d669c:	4618      	moveq	r0, r3
   d669e:	b006      	add	sp, #24
   d66a0:	bd10      	pop	{r4, pc}
   d66a2:	bf00      	nop
   d66a4:	ffffd8a8 	.word	0xffffd8a8
   d66a8:	ffffd8ee 	.word	0xffffd8ee

000d66ac <spiffs_obj_lu_find_free>:
    int *lu_entry) {
   d66ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d66b0:	4688      	mov	r8, r1
  if (!fs->cleaning && fs->free_blocks < 2) {
   d66b2:	f890 1054 	ldrb.w	r1, [r0, #84]	; 0x54
    int *lu_entry) {
   d66b6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   d66b8:	4605      	mov	r5, r0
   d66ba:	461e      	mov	r6, r3
  if (!fs->cleaning && fs->free_blocks < 2) {
   d66bc:	b181      	cbz	r1, d66e0 <spiffs_obj_lu_find_free+0x34>
  res = spiffs_obj_lu_find_id(fs, starting_block, starting_lu_entry,
   d66be:	e9cd 6700 	strd	r6, r7, [sp]
   d66c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d66c6:	4641      	mov	r1, r8
   d66c8:	4628      	mov	r0, r5
   d66ca:	f7ff ffd5 	bl	d6678 <spiffs_obj_lu_find_id>
  if (res == SPIFFS_OK) {
   d66ce:	4604      	mov	r4, r0
   d66d0:	b1c0      	cbz	r0, d6704 <spiffs_obj_lu_find_free+0x58>
  if (res == SPIFFS_ERR_FULL) {
   d66d2:	4b13      	ldr	r3, [pc, #76]	; (d6720 <spiffs_obj_lu_find_free+0x74>)
   d66d4:	4298      	cmp	r0, r3
   d66d6:	d11f      	bne.n	d6718 <spiffs_obj_lu_find_free+0x6c>
    SPIFFS_DBG("fs full\n");
   d66d8:	4812      	ldr	r0, [pc, #72]	; (d6724 <spiffs_obj_lu_find_free+0x78>)
   d66da:	f00a f975 	bl	e09c8 <spiffsParticleInfoLog>
   d66de:	e01b      	b.n	d6718 <spiffs_obj_lu_find_free+0x6c>
  if (!fs->cleaning && fs->free_blocks < 2) {
   d66e0:	6c83      	ldr	r3, [r0, #72]	; 0x48
   d66e2:	2b01      	cmp	r3, #1
   d66e4:	d8eb      	bhi.n	d66be <spiffs_obj_lu_find_free+0x12>
   d66e6:	9203      	str	r2, [sp, #12]
    res = spiffs_gc_quick(fs, 0);
   d66e8:	f7fd ff30 	bl	d454c <spiffs_gc_quick>
    if (res == SPIFFS_ERR_NO_DELETED_BLOCKS) {
   d66ec:	4b0e      	ldr	r3, [pc, #56]	; (d6728 <spiffs_obj_lu_find_free+0x7c>)
   d66ee:	9a03      	ldr	r2, [sp, #12]
   d66f0:	4298      	cmp	r0, r3
    res = spiffs_gc_quick(fs, 0);
   d66f2:	4604      	mov	r4, r0
    if (res == SPIFFS_ERR_NO_DELETED_BLOCKS) {
   d66f4:	d001      	beq.n	d66fa <spiffs_obj_lu_find_free+0x4e>
    SPIFFS_CHECK_RES(res);
   d66f6:	2800      	cmp	r0, #0
   d66f8:	db0e      	blt.n	d6718 <spiffs_obj_lu_find_free+0x6c>
    if (fs->free_blocks < 2) {
   d66fa:	6cab      	ldr	r3, [r5, #72]	; 0x48
   d66fc:	2b01      	cmp	r3, #1
   d66fe:	d8de      	bhi.n	d66be <spiffs_obj_lu_find_free+0x12>
      return SPIFFS_ERR_FULL;
   d6700:	4c07      	ldr	r4, [pc, #28]	; (d6720 <spiffs_obj_lu_find_free+0x74>)
   d6702:	e009      	b.n	d6718 <spiffs_obj_lu_find_free+0x6c>
    fs->free_cursor_block_ix = *block_ix;
   d6704:	8833      	ldrh	r3, [r6, #0]
   d6706:	84ab      	strh	r3, [r5, #36]	; 0x24
    fs->free_cursor_obj_lu_entry = (*lu_entry) + 1;
   d6708:	683b      	ldr	r3, [r7, #0]
   d670a:	3301      	adds	r3, #1
   d670c:	62ab      	str	r3, [r5, #40]	; 0x28
    if (*lu_entry == 0) {
   d670e:	683b      	ldr	r3, [r7, #0]
   d6710:	b913      	cbnz	r3, d6718 <spiffs_obj_lu_find_free+0x6c>
      fs->free_blocks--;
   d6712:	6cab      	ldr	r3, [r5, #72]	; 0x48
   d6714:	3b01      	subs	r3, #1
   d6716:	64ab      	str	r3, [r5, #72]	; 0x48
}
   d6718:	4620      	mov	r0, r4
   d671a:	b004      	add	sp, #16
   d671c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6720:	ffffd8ef 	.word	0xffffd8ef
   d6724:	000e616b 	.word	0x000e616b
   d6728:	ffffd8d3 	.word	0xffffd8d3

000d672c <spiffs_obj_lu_find_id_and_span>:
    spiffs_page_ix *pix) {
   d672c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d672e:	4604      	mov	r4, r0
   d6730:	b08b      	sub	sp, #44	; 0x2c
   d6732:	4608      	mov	r0, r1
   d6734:	f8ad 201e 	strh.w	r2, [sp, #30]
   d6738:	9d10      	ldr	r5, [sp, #64]	; 0x40
  res = spiffs_obj_lu_find_entry_visitor(fs,
   d673a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   d673c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    spiffs_page_ix *pix) {
   d673e:	f8ad 301c 	strh.w	r3, [sp, #28]
  res = spiffs_obj_lu_find_entry_visitor(fs,
   d6742:	b103      	cbz	r3, d6746 <spiffs_obj_lu_find_id_and_span+0x1a>
   d6744:	ab07      	add	r3, sp, #28
   d6746:	ae09      	add	r6, sp, #36	; 0x24
   d6748:	9605      	str	r6, [sp, #20]
   d674a:	f10d 0622 	add.w	r6, sp, #34	; 0x22
   d674e:	9604      	str	r6, [sp, #16]
   d6750:	f10d 061e 	add.w	r6, sp, #30
   d6754:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d6758:	4b13      	ldr	r3, [pc, #76]	; (d67a8 <spiffs_obj_lu_find_id_and_span+0x7c>)
   d675a:	e9cd 0300 	strd	r0, r3, [sp]
   d675e:	2301      	movs	r3, #1
   d6760:	4620      	mov	r0, r4
   d6762:	f7ff fd7f 	bl	d6264 <spiffs_obj_lu_find_entry_visitor>
  if (res == SPIFFS_VIS_END) {
   d6766:	4b11      	ldr	r3, [pc, #68]	; (d67ac <spiffs_obj_lu_find_id_and_span+0x80>)
   d6768:	4298      	cmp	r0, r3
   d676a:	d01b      	beq.n	d67a4 <spiffs_obj_lu_find_id_and_span+0x78>
  SPIFFS_CHECK_RES(res);
   d676c:	2800      	cmp	r0, #0
   d676e:	db17      	blt.n	d67a0 <spiffs_obj_lu_find_id_and_span+0x74>
  if (pix) {
   d6770:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
   d6774:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d6776:	b18d      	cbz	r5, d679c <spiffs_obj_lu_find_id_and_span+0x70>
    *pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, entry);
   d6778:	e9d4 1c06 	ldrd	r1, ip, [r4, #24]
   d677c:	fbb1 f1fc 	udiv	r1, r1, ip
   d6780:	fb11 f207 	smulbb	r2, r1, r7
   d6784:	004b      	lsls	r3, r1, #1
   d6786:	ebbc 0f41 	cmp.w	ip, r1, lsl #1
   d678a:	b292      	uxth	r2, r2
   d678c:	bf96      	itet	ls
   d678e:	fbb3 f3fc 	udivls	r3, r3, ip
   d6792:	2301      	movhi	r3, #1
   d6794:	b29b      	uxthls	r3, r3
   d6796:	4432      	add	r2, r6
   d6798:	4413      	add	r3, r2
   d679a:	802b      	strh	r3, [r5, #0]
  fs->cursor_block_ix = bix;
   d679c:	85a7      	strh	r7, [r4, #44]	; 0x2c
  fs->cursor_obj_lu_entry = entry;
   d679e:	6326      	str	r6, [r4, #48]	; 0x30
}
   d67a0:	b00b      	add	sp, #44	; 0x2c
   d67a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    res = SPIFFS_ERR_NOT_FOUND;
   d67a4:	4802      	ldr	r0, [pc, #8]	; (d67b0 <spiffs_obj_lu_find_id_and_span+0x84>)
   d67a6:	e7fb      	b.n	d67a0 <spiffs_obj_lu_find_id_and_span+0x74>
   d67a8:	000d5cc5 	.word	0x000d5cc5
   d67ac:	ffffd8a8 	.word	0xffffd8a8
   d67b0:	ffffd8ee 	.word	0xffffd8ee

000d67b4 <spiffs_page_allocate_data>:
    spiffs_page_ix *pix) {
   d67b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d67b8:	b087      	sub	sp, #28
   d67ba:	461f      	mov	r7, r3
  res = spiffs_obj_lu_find_free(fs, fs->free_cursor_block_ix, fs->free_cursor_obj_lu_entry, &bix, &entry);
   d67bc:	ab05      	add	r3, sp, #20
   d67be:	9300      	str	r3, [sp, #0]
    spiffs_page_ix *pix) {
   d67c0:	f8ad 100e 	strh.w	r1, [sp, #14]
   d67c4:	4615      	mov	r5, r2
  res = spiffs_obj_lu_find_free(fs, fs->free_cursor_block_ix, fs->free_cursor_obj_lu_entry, &bix, &entry);
   d67c6:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   d67c8:	6a82      	ldr	r2, [r0, #40]	; 0x28
    spiffs_page_ix *pix) {
   d67ca:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   d67ce:	9e11      	ldr	r6, [sp, #68]	; 0x44
  res = spiffs_obj_lu_find_free(fs, fs->free_cursor_block_ix, fs->free_cursor_obj_lu_entry, &bix, &entry);
   d67d0:	f10d 0312 	add.w	r3, sp, #18
    spiffs_page_ix *pix) {
   d67d4:	4604      	mov	r4, r0
  res = spiffs_obj_lu_find_free(fs, fs->free_cursor_block_ix, fs->free_cursor_obj_lu_entry, &bix, &entry);
   d67d6:	f7ff ff69 	bl	d66ac <spiffs_obj_lu_find_free>
  SPIFFS_CHECK_RES(res);
   d67da:	2800      	cmp	r0, #0
   d67dc:	f2c0 80a4 	blt.w	d6928 <spiffs_page_allocate_data+0x174>
  res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_UPDT,
   d67e0:	9a05      	ldr	r2, [sp, #20]
   d67e2:	6923      	ldr	r3, [r4, #16]
   d67e4:	69a1      	ldr	r1, [r4, #24]
   d67e6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   d67ea:	f10d 000e 	add.w	r0, sp, #14
   d67ee:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   d67f2:	9001      	str	r0, [sp, #4]
   d67f4:	2002      	movs	r0, #2
   d67f6:	fb01 3302 	mla	r3, r1, r2, r3
   d67fa:	9000      	str	r0, [sp, #0]
   d67fc:	2200      	movs	r2, #0
   d67fe:	2104      	movs	r1, #4
   d6800:	4620      	mov	r0, r4
   d6802:	f7fd fd9d 	bl	d4340 <spiffs_phys_wr>
  SPIFFS_CHECK_RES(res);
   d6806:	2800      	cmp	r0, #0
   d6808:	f2c0 808e 	blt.w	d6928 <spiffs_page_allocate_data+0x174>
  fs->stats_p_allocated++;
   d680c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d680e:	3301      	adds	r3, #1
   d6810:	64e3      	str	r3, [r4, #76]	; 0x4c
  ph->flags &= ~SPIFFS_PH_FLAG_USED;
   d6812:	792b      	ldrb	r3, [r5, #4]
   d6814:	f023 0301 	bic.w	r3, r3, #1
   d6818:	712b      	strb	r3, [r5, #4]
  res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
   d681a:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   d681e:	9b05      	ldr	r3, [sp, #20]
   d6820:	fbb0 fcf1 	udiv	ip, r0, r1
   d6824:	ebb1 0f4c 	cmp.w	r1, ip, lsl #1
   d6828:	ea4f 024c 	mov.w	r2, ip, lsl #1
   d682c:	bf8c      	ite	hi
   d682e:	2201      	movhi	r2, #1
   d6830:	fbb2 f2f1 	udivls	r2, r2, r1
   d6834:	f8d4 e010 	ldr.w	lr, [r4, #16]
   d6838:	9501      	str	r5, [sp, #4]
   d683a:	441a      	add	r2, r3
   d683c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   d6840:	fb00 e303 	mla	r3, r0, r3, lr
   d6844:	2005      	movs	r0, #5
   d6846:	fb01 3302 	mla	r3, r1, r2, r3
   d684a:	9000      	str	r0, [sp, #0]
   d684c:	2200      	movs	r2, #0
   d684e:	2107      	movs	r1, #7
   d6850:	4620      	mov	r0, r4
   d6852:	f7fd fd75 	bl	d4340 <spiffs_phys_wr>
  SPIFFS_CHECK_RES(res);
   d6856:	2800      	cmp	r0, #0
   d6858:	db66      	blt.n	d6928 <spiffs_page_allocate_data+0x174>
  if (data) {
   d685a:	b317      	cbz	r7, d68a2 <spiffs_page_allocate_data+0xee>
    res = _spiffs_wr(fs,  SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
   d685c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   d685e:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d6862:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   d6866:	9701      	str	r7, [sp, #4]
   d6868:	e9d4 c006 	ldrd	ip, r0, [r4, #24]
   d686c:	3105      	adds	r1, #5
   d686e:	4449      	add	r1, r9
   d6870:	fbbc fef0 	udiv	lr, ip, r0
   d6874:	fb0c 1303 	mla	r3, ip, r3, r1
   d6878:	ebb0 0f4e 	cmp.w	r0, lr, lsl #1
   d687c:	9905      	ldr	r1, [sp, #20]
   d687e:	ea4f 024e 	mov.w	r2, lr, lsl #1
   d6882:	bf8c      	ite	hi
   d6884:	2201      	movhi	r2, #1
   d6886:	fbb2 f2f0 	udivls	r2, r2, r0
   d688a:	440a      	add	r2, r1
   d688c:	990e      	ldr	r1, [sp, #56]	; 0x38
   d688e:	9100      	str	r1, [sp, #0]
   d6890:	fb00 3302 	mla	r3, r0, r2, r3
   d6894:	2107      	movs	r1, #7
   d6896:	2200      	movs	r2, #0
   d6898:	4620      	mov	r0, r4
   d689a:	f7fd fd51 	bl	d4340 <spiffs_phys_wr>
    SPIFFS_CHECK_RES(res);
   d689e:	2800      	cmp	r0, #0
   d68a0:	db42      	blt.n	d6928 <spiffs_page_allocate_data+0x174>
  if (finalize && (ph->flags & SPIFFS_PH_FLAG_FINAL)) {
   d68a2:	f1b8 0f00 	cmp.w	r8, #0
   d68a6:	d028      	beq.n	d68fa <spiffs_page_allocate_data+0x146>
   d68a8:	792b      	ldrb	r3, [r5, #4]
   d68aa:	079a      	lsls	r2, r3, #30
   d68ac:	d525      	bpl.n	d68fa <spiffs_page_allocate_data+0x146>
    ph->flags &= ~SPIFFS_PH_FLAG_FINAL;
   d68ae:	f023 0302 	bic.w	r3, r3, #2
   d68b2:	712b      	strb	r3, [r5, #4]
    res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
   d68b4:	e9d4 7106 	ldrd	r7, r1, [r4, #24]
   d68b8:	6920      	ldr	r0, [r4, #16]
   d68ba:	fbb7 f3f1 	udiv	r3, r7, r1
   d68be:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
   d68c2:	ea4f 0243 	mov.w	r2, r3, lsl #1
   d68c6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   d68ca:	bf98      	it	ls
   d68cc:	fbb2 f2f1 	udivls	r2, r2, r1
   d68d0:	f100 0004 	add.w	r0, r0, #4
   d68d4:	fb07 0303 	mla	r3, r7, r3, r0
   d68d8:	9805      	ldr	r0, [sp, #20]
   d68da:	bf88      	it	hi
   d68dc:	2201      	movhi	r2, #1
   d68de:	4402      	add	r2, r0
   d68e0:	3504      	adds	r5, #4
   d68e2:	2001      	movs	r0, #1
   d68e4:	fb01 3302 	mla	r3, r1, r2, r3
   d68e8:	9000      	str	r0, [sp, #0]
   d68ea:	9501      	str	r5, [sp, #4]
   d68ec:	2200      	movs	r2, #0
   d68ee:	2107      	movs	r1, #7
   d68f0:	4620      	mov	r0, r4
   d68f2:	f7fd fd25 	bl	d4340 <spiffs_phys_wr>
    SPIFFS_CHECK_RES(res);
   d68f6:	2800      	cmp	r0, #0
   d68f8:	db16      	blt.n	d6928 <spiffs_page_allocate_data+0x174>
  if (pix) {
   d68fa:	b1ae      	cbz	r6, d6928 <spiffs_page_allocate_data+0x174>
    *pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, entry);
   d68fc:	e9d4 1506 	ldrd	r1, r5, [r4, #24]
   d6900:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   d6904:	fbb1 f1f5 	udiv	r1, r1, r5
   d6908:	004b      	lsls	r3, r1, #1
   d690a:	ebb5 0f41 	cmp.w	r5, r1, lsl #1
   d690e:	fb12 f201 	smulbb	r2, r2, r1
   d6912:	9905      	ldr	r1, [sp, #20]
   d6914:	bf98      	it	ls
   d6916:	fbb3 f3f5 	udivls	r3, r3, r5
   d691a:	b292      	uxth	r2, r2
   d691c:	bf94      	ite	ls
   d691e:	b29b      	uxthls	r3, r3
   d6920:	2301      	movhi	r3, #1
   d6922:	440a      	add	r2, r1
   d6924:	4413      	add	r3, r2
   d6926:	8033      	strh	r3, [r6, #0]
}
   d6928:	b007      	add	sp, #28
   d692a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d692e <spiffs_page_delete>:
    spiffs_page_ix pix) {
   d692e:	b5f0      	push	{r4, r5, r6, r7, lr}
  res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_DELE,
   d6930:	e9d0 7606 	ldrd	r7, r6, [r0, #24]
    spiffs_page_ix pix) {
   d6934:	b085      	sub	sp, #20
  res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_DELE,
   d6936:	f8d0 c010 	ldr.w	ip, [r0, #16]
    spiffs_page_ix pix) {
   d693a:	460d      	mov	r5, r1
  spiffs_obj_id d_obj_id = SPIFFS_OBJ_ID_DELETED;
   d693c:	2300      	movs	r3, #0
  res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_DELE,
   d693e:	fbb7 f1f6 	udiv	r1, r7, r6
   d6942:	ebb6 0f41 	cmp.w	r6, r1, lsl #1
   d6946:	fbb5 f2f1 	udiv	r2, r5, r1
    spiffs_page_ix pix) {
   d694a:	4604      	mov	r4, r0
  spiffs_obj_id d_obj_id = SPIFFS_OBJ_ID_DELETED;
   d694c:	f8ad 300e 	strh.w	r3, [sp, #14]
  res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_DELE,
   d6950:	fb01 5012 	mls	r0, r1, r2, r5
   d6954:	ea4f 0341 	mov.w	r3, r1, lsl #1
   d6958:	bf88      	it	hi
   d695a:	2301      	movhi	r3, #1
   d695c:	fb07 c202 	mla	r2, r7, r2, ip
   d6960:	bf98      	it	ls
   d6962:	fbb3 f3f6 	udivls	r3, r3, r6
   d6966:	f10d 010e 	add.w	r1, sp, #14
   d696a:	1ac3      	subs	r3, r0, r3
   d696c:	9101      	str	r1, [sp, #4]
   d696e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d6972:	2102      	movs	r1, #2
   d6974:	2200      	movs	r2, #0
   d6976:	9100      	str	r1, [sp, #0]
   d6978:	4620      	mov	r0, r4
   d697a:	4611      	mov	r1, r2
   d697c:	f7fd fce0 	bl	d4340 <spiffs_phys_wr>
  SPIFFS_CHECK_RES(res);
   d6980:	2800      	cmp	r0, #0
   d6982:	db17      	blt.n	d69b4 <spiffs_page_delete+0x86>
  fs->stats_p_deleted++;
   d6984:	6d23      	ldr	r3, [r4, #80]	; 0x50
  res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_DELE,
   d6986:	6922      	ldr	r2, [r4, #16]
  fs->stats_p_deleted++;
   d6988:	3301      	adds	r3, #1
   d698a:	6523      	str	r3, [r4, #80]	; 0x50
  fs->stats_p_allocated--;
   d698c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d698e:	3b01      	subs	r3, #1
   d6990:	64e3      	str	r3, [r4, #76]	; 0x4c
  flags &= ~(SPIFFS_PH_FLAG_DELET | SPIFFS_PH_FLAG_USED);
   d6992:	237e      	movs	r3, #126	; 0x7e
  res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_DELE,
   d6994:	f10d 010d 	add.w	r1, sp, #13
  flags &= ~(SPIFFS_PH_FLAG_DELET | SPIFFS_PH_FLAG_USED);
   d6998:	f88d 300d 	strb.w	r3, [sp, #13]
  res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_DELE,
   d699c:	69e3      	ldr	r3, [r4, #28]
   d699e:	9101      	str	r1, [sp, #4]
   d69a0:	3204      	adds	r2, #4
   d69a2:	2101      	movs	r1, #1
   d69a4:	9100      	str	r1, [sp, #0]
   d69a6:	fb03 2305 	mla	r3, r3, r5, r2
   d69aa:	2103      	movs	r1, #3
   d69ac:	2200      	movs	r2, #0
   d69ae:	4620      	mov	r0, r4
   d69b0:	f7fd fcc6 	bl	d4340 <spiffs_phys_wr>
}
   d69b4:	b005      	add	sp, #20
   d69b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d69b8 <spiffs_page_move>:
    spiffs_page_ix *dst_pix) {
   d69b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d69bc:	b086      	sub	sp, #24
   d69be:	460f      	mov	r7, r1
   d69c0:	f8ad 300e 	strh.w	r3, [sp, #14]
  res = spiffs_obj_lu_find_free(fs, fs->free_cursor_block_ix, fs->free_cursor_obj_lu_entry, &bix, &entry);
   d69c4:	ab05      	add	r3, sp, #20
   d69c6:	9300      	str	r3, [sp, #0]
   d69c8:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    spiffs_page_ix *dst_pix) {
   d69ca:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
   d69ce:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   d69d2:	4690      	mov	r8, r2
  res = spiffs_obj_lu_find_free(fs, fs->free_cursor_block_ix, fs->free_cursor_obj_lu_entry, &bix, &entry);
   d69d4:	f10d 0312 	add.w	r3, sp, #18
   d69d8:	6a82      	ldr	r2, [r0, #40]	; 0x28
    spiffs_page_ix *dst_pix) {
   d69da:	4604      	mov	r4, r0
  res = spiffs_obj_lu_find_free(fs, fs->free_cursor_block_ix, fs->free_cursor_obj_lu_entry, &bix, &entry);
   d69dc:	f7ff fe66 	bl	d66ac <spiffs_obj_lu_find_free>
  SPIFFS_CHECK_RES(res);
   d69e0:	2800      	cmp	r0, #0
   d69e2:	f2c0 808c 	blt.w	d6afe <spiffs_page_move+0x146>
  free_pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, entry);
   d69e6:	e9d4 2106 	ldrd	r2, r1, [r4, #24]
   d69ea:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   d69ee:	fbb2 f2f1 	udiv	r2, r2, r1
   d69f2:	0055      	lsls	r5, r2, #1
   d69f4:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
   d69f8:	fb13 f302 	smulbb	r3, r3, r2
   d69fc:	9a05      	ldr	r2, [sp, #20]
   d69fe:	bf98      	it	ls
   d6a00:	fbb5 f5f1 	udivls	r5, r5, r1
   d6a04:	b29b      	uxth	r3, r3
   d6a06:	bf94      	ite	ls
   d6a08:	b2ad      	uxthls	r5, r5
   d6a0a:	2501      	movhi	r5, #1
   d6a0c:	4413      	add	r3, r2
   d6a0e:	441d      	add	r5, r3
   d6a10:	b2ad      	uxth	r5, r5
  if (dst_pix) *dst_pix = free_pix;
   d6a12:	f1b9 0f00 	cmp.w	r9, #0
   d6a16:	d001      	beq.n	d6a1c <spiffs_page_move+0x64>
   d6a18:	f8a9 5000 	strh.w	r5, [r9]
  p_hdr = page_data ? (spiffs_page_header *)page_data : page_hdr;
   d6a1c:	f1b8 0f00 	cmp.w	r8, #0
   d6a20:	d126      	bne.n	d6a70 <spiffs_page_move+0xb8>
    res = spiffs_phys_cpy(fs, fh, SPIFFS_PAGE_TO_PADDR(fs, free_pix), SPIFFS_PAGE_TO_PADDR(fs, src_pix), SPIFFS_CFG_LOG_PAGE_SZ(fs));
   d6a22:	6921      	ldr	r1, [r4, #16]
   d6a24:	69e2      	ldr	r2, [r4, #28]
   d6a26:	9200      	str	r2, [sp, #0]
   d6a28:	fb02 1306 	mla	r3, r2, r6, r1
   d6a2c:	4620      	mov	r0, r4
   d6a2e:	fb05 1202 	mla	r2, r5, r2, r1
   d6a32:	4639      	mov	r1, r7
   d6a34:	f7ff fbea 	bl	d620c <spiffs_phys_cpy>
  u8_t was_final = 0;
   d6a38:	f04f 0900 	mov.w	r9, #0
  p_hdr = page_data ? (spiffs_page_header *)page_data : page_hdr;
   d6a3c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
   d6a40:	e02d      	b.n	d6a9e <spiffs_page_move+0xe6>
    p_hdr->flags &= ~(SPIFFS_PH_FLAG_FINAL | SPIFFS_PH_FLAG_USED);
   d6a42:	f898 3004 	ldrb.w	r3, [r8, #4]
   d6a46:	4642      	mov	r2, r8
   d6a48:	f023 0303 	bic.w	r3, r3, #3
   d6a4c:	f802 3f04 	strb.w	r3, [r2, #4]!
    res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
   d6a50:	6921      	ldr	r1, [r4, #16]
   d6a52:	69e3      	ldr	r3, [r4, #28]
   d6a54:	9201      	str	r2, [sp, #4]
   d6a56:	3104      	adds	r1, #4
   d6a58:	2201      	movs	r2, #1
   d6a5a:	9200      	str	r2, [sp, #0]
   d6a5c:	fb03 1305 	mla	r3, r3, r5, r1
   d6a60:	463a      	mov	r2, r7
   d6a62:	2107      	movs	r1, #7
   d6a64:	4620      	mov	r0, r4
   d6a66:	f7fd fc6b 	bl	d4340 <spiffs_phys_wr>
    SPIFFS_CHECK_RES(res);
   d6a6a:	2800      	cmp	r0, #0
   d6a6c:	da43      	bge.n	d6af6 <spiffs_page_move+0x13e>
   d6a6e:	e046      	b.n	d6afe <spiffs_page_move+0x146>
    was_final = (p_hdr->flags & SPIFFS_PH_FLAG_FINAL) == 0;
   d6a70:	f898 3004 	ldrb.w	r3, [r8, #4]
   d6a74:	f083 0902 	eor.w	r9, r3, #2
    p_hdr->flags &= ~SPIFFS_PH_FLAG_USED;
   d6a78:	f023 0301 	bic.w	r3, r3, #1
   d6a7c:	f043 0302 	orr.w	r3, r3, #2
   d6a80:	f888 3004 	strb.w	r3, [r8, #4]
    res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
   d6a84:	69e3      	ldr	r3, [r4, #28]
   d6a86:	6922      	ldr	r2, [r4, #16]
   d6a88:	e9cd 3800 	strd	r3, r8, [sp]
   d6a8c:	2107      	movs	r1, #7
   d6a8e:	fb05 2303 	mla	r3, r5, r3, r2
   d6a92:	4620      	mov	r0, r4
   d6a94:	2200      	movs	r2, #0
    was_final = (p_hdr->flags & SPIFFS_PH_FLAG_FINAL) == 0;
   d6a96:	f3c9 0940 	ubfx	r9, r9, #1, #1
    res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
   d6a9a:	f7fd fc51 	bl	d4340 <spiffs_phys_wr>
  SPIFFS_CHECK_RES(res);
   d6a9e:	2800      	cmp	r0, #0
   d6aa0:	db2d      	blt.n	d6afe <spiffs_page_move+0x146>
  res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_UPDT,
   d6aa2:	e9d4 ec06 	ldrd	lr, ip, [r4, #24]
   d6aa6:	f8d4 a010 	ldr.w	sl, [r4, #16]
   d6aaa:	fbbe f1fc 	udiv	r1, lr, ip
   d6aae:	ebbc 0f41 	cmp.w	ip, r1, lsl #1
   d6ab2:	ea4f 0341 	mov.w	r3, r1, lsl #1
   d6ab6:	fbb5 f2f1 	udiv	r2, r5, r1
   d6aba:	bf88      	it	hi
   d6abc:	2301      	movhi	r3, #1
   d6abe:	fb01 5012 	mls	r0, r1, r2, r5
   d6ac2:	f10d 010e 	add.w	r1, sp, #14
   d6ac6:	fb0e a202 	mla	r2, lr, r2, sl
   d6aca:	bf98      	it	ls
   d6acc:	fbb3 f3fc 	udivls	r3, r3, ip
   d6ad0:	9101      	str	r1, [sp, #4]
   d6ad2:	1ac3      	subs	r3, r0, r3
   d6ad4:	2102      	movs	r1, #2
   d6ad6:	9100      	str	r1, [sp, #0]
   d6ad8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d6adc:	2104      	movs	r1, #4
   d6ade:	2200      	movs	r2, #0
   d6ae0:	4620      	mov	r0, r4
   d6ae2:	f7fd fc2d 	bl	d4340 <spiffs_phys_wr>
  SPIFFS_CHECK_RES(res);
   d6ae6:	2800      	cmp	r0, #0
   d6ae8:	db09      	blt.n	d6afe <spiffs_page_move+0x146>
  fs->stats_p_allocated++;
   d6aea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d6aec:	3301      	adds	r3, #1
   d6aee:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (was_final) {
   d6af0:	f1b9 0f00 	cmp.w	r9, #0
   d6af4:	d1a5      	bne.n	d6a42 <spiffs_page_move+0x8a>
  res = spiffs_page_delete(fs, src_pix);
   d6af6:	4631      	mov	r1, r6
   d6af8:	4620      	mov	r0, r4
   d6afa:	f7ff ff18 	bl	d692e <spiffs_page_delete>
}
   d6afe:	b006      	add	sp, #24
   d6b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d6b04 <spiffs_cb_object_event>:
    u32_t new_size) {
   d6b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6b08:	ed2d 8b02 	vpush	{d8}
   d6b0c:	b08d      	sub	sp, #52	; 0x34
  SPIFFS_DBG("       CALLBACK  %s obj_id:"_SPIPRIid" spix:"_SPIPRIsp" npix:"_SPIPRIpg" nsz:"_SPIPRIi"\n", (const char *[]){"UPD", "NEW", "DEL", "MOV", "HUP","???"}[MIN(ev,5)],
   d6b0e:	f8df c1f0 	ldr.w	ip, [pc, #496]	; d6d00 <spiffs_cb_object_event+0x1fc>
    u32_t new_size) {
   d6b12:	9305      	str	r3, [sp, #20]
  spiffs_obj_id obj_id = obj_id_raw & ~SPIFFS_OBJ_ID_IX_FLAG;
   d6b14:	f3c3 030e 	ubfx	r3, r3, #0, #15
  spiffs_fd *fds = (spiffs_fd *)fs->fd_space;
   d6b18:	f8d0 b03c 	ldr.w	fp, [r0, #60]	; 0x3c
  spiffs_obj_id obj_id = obj_id_raw & ~SPIFFS_OBJ_ID_IX_FLAG;
   d6b1c:	9304      	str	r3, [sp, #16]
    u32_t new_size) {
   d6b1e:	4614      	mov	r4, r2
   d6b20:	ee08 1a10 	vmov	s16, r1
   d6b24:	4605      	mov	r5, r0
  SPIFFS_DBG("       CALLBACK  %s obj_id:"_SPIPRIid" spix:"_SPIPRIsp" npix:"_SPIPRIpg" nsz:"_SPIPRIi"\n", (const char *[]){"UPD", "NEW", "DEL", "MOV", "HUP","???"}[MIN(ev,5)],
   d6b26:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d6b2a:	af06      	add	r7, sp, #24
   d6b2c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   d6b2e:	e89c 0003 	ldmia.w	ip, {r0, r1}
    u32_t new_size) {
   d6b32:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
   d6b36:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   d6b3a:	f8bd 6060 	ldrh.w	r6, [sp, #96]	; 0x60
  SPIFFS_DBG("       CALLBACK  %s obj_id:"_SPIPRIid" spix:"_SPIPRIsp" npix:"_SPIPRIpg" nsz:"_SPIPRIi"\n", (const char *[]){"UPD", "NEW", "DEL", "MOV", "HUP","???"}[MIN(ev,5)],
   d6b3e:	9a05      	ldr	r2, [sp, #20]
   d6b40:	2c05      	cmp	r4, #5
   d6b42:	e887 0003 	stmia.w	r7, {r0, r1}
   d6b46:	ab0c      	add	r3, sp, #48	; 0x30
   d6b48:	e9cd 8900 	strd	r8, r9, [sp]
   d6b4c:	4621      	mov	r1, r4
   d6b4e:	bfa8      	it	ge
   d6b50:	2105      	movge	r1, #5
   d6b52:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   d6b56:	4865      	ldr	r0, [pc, #404]	; (d6cec <spiffs_cb_object_event+0x1e8>)
   d6b58:	f851 1c18 	ldr.w	r1, [r1, #-24]
   d6b5c:	4633      	mov	r3, r6
   d6b5e:	f009 ff33 	bl	e09c8 <spiffsParticleInfoLog>
  for (i = 0; i < fs->fd_count; i++) {
   d6b62:	f10b 0704 	add.w	r7, fp, #4
   d6b66:	f04f 0a00 	mov.w	sl, #0
   d6b6a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   d6b6c:	4553      	cmp	r3, sl
   d6b6e:	d814      	bhi.n	d6b9a <spiffs_cb_object_event+0x96>
  if (ev == SPIFFS_EV_IX_UPD || ev == SPIFFS_EV_IX_NEW) {
   d6b70:	2c01      	cmp	r4, #1
   d6b72:	d809      	bhi.n	d6b88 <spiffs_cb_object_event+0x84>
      SPIFFS_DBG("       callback: map ix update fd "_SPIPRIfd":"_SPIPRIid" span:"_SPIPRIsp"\n", SPIFFS_FH_OFFS(fs, cur_fd->file_nbr), cur_fd->obj_id, spix);
   d6b74:	f8df a18c 	ldr.w	sl, [pc, #396]	; d6d04 <spiffs_cb_object_event+0x200>
   d6b78:	465f      	mov	r7, fp
    for (i = 0; i < fs->fd_count; i++) {
   d6b7a:	f04f 0900 	mov.w	r9, #0
      spiffs_update_ix_map(fs, cur_fd, spix, objix);
   d6b7e:	f105 0b1c 	add.w	fp, r5, #28
    for (i = 0; i < fs->fd_count; i++) {
   d6b82:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   d6b84:	454b      	cmp	r3, r9
   d6b86:	d871      	bhi.n	d6c6c <spiffs_cb_object_event+0x168>
  if (fs->file_cb_f && spix == 0 && (obj_id_raw & SPIFFS_OBJ_ID_IX_FLAG)) {
   d6b88:	6f2f      	ldr	r7, [r5, #112]	; 0x70
   d6b8a:	2f00      	cmp	r7, #0
   d6b8c:	f040 8088 	bne.w	d6ca0 <spiffs_cb_object_event+0x19c>
}
   d6b90:	b00d      	add	sp, #52	; 0x34
   d6b92:	ecbd 8b02 	vpop	{d8}
   d6b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((cur_fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG) != obj_id) continue; // fd not related to updated file
   d6b9a:	887a      	ldrh	r2, [r7, #2]
   d6b9c:	9904      	ldr	r1, [sp, #16]
   d6b9e:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
   d6ba2:	428b      	cmp	r3, r1
   d6ba4:	d142      	bne.n	d6c2c <spiffs_cb_object_event+0x128>
    if (spix == 0) { // object index header update
   d6ba6:	2e00      	cmp	r6, #0
   d6ba8:	d130      	bne.n	d6c0c <spiffs_cb_object_event+0x108>
      if (ev != SPIFFS_EV_IX_DEL) {
   d6baa:	2c02      	cmp	r4, #2
   d6bac:	d046      	beq.n	d6c3c <spiffs_cb_object_event+0x138>
        if (cur_fd->score == 0) continue; // never used fd
   d6bae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   d6bb0:	2b00      	cmp	r3, #0
   d6bb2:	d03b      	beq.n	d6c2c <spiffs_cb_object_event+0x128>
        SPIFFS_DBG("       callback: setting fd "_SPIPRIfd":"_SPIPRIid"(fdoffs:"_SPIPRIi" offs:"_SPIPRIi") objix_hdr_pix to "_SPIPRIpg", size:"_SPIPRIi"\n",
   d6bb4:	f9b7 1000 	ldrsh.w	r1, [r7]
   d6bb8:	484d      	ldr	r0, [pc, #308]	; (d6cf0 <spiffs_cb_object_event+0x1ec>)
   d6bba:	e9cd 8901 	strd	r8, r9, [sp, #4]
   d6bbe:	693b      	ldr	r3, [r7, #16]
   d6bc0:	9300      	str	r3, [sp, #0]
   d6bc2:	697b      	ldr	r3, [r7, #20]
   d6bc4:	f009 ff00 	bl	e09c8 <spiffsParticleInfoLog>
        cur_fd->objix_hdr_pix = new_pix;
   d6bc8:	f8a7 8008 	strh.w	r8, [r7, #8]
        if (new_size != 0) {
   d6bcc:	f1b9 0f00 	cmp.w	r9, #0
   d6bd0:	d01c      	beq.n	d6c0c <spiffs_cb_object_event+0x108>
          u32_t act_new_size = new_size == SPIFFS_UNDEFINED_LEN ? 0 : new_size;
   d6bd2:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   d6bd6:	69f9      	ldr	r1, [r7, #28]
          cur_fd->size = new_size;
   d6bd8:	f8c7 9004 	str.w	r9, [r7, #4]
          u32_t act_new_size = new_size == SPIFFS_UNDEFINED_LEN ? 0 : new_size;
   d6bdc:	d02a      	beq.n	d6c34 <spiffs_cb_object_event+0x130>
          if (act_new_size > 0 && cur_fd->cache_page) {
   d6bde:	b359      	cbz	r1, d6c38 <spiffs_cb_object_event+0x134>
            act_new_size = MAX(act_new_size, cur_fd->cache_page->offset + cur_fd->cache_page->size);
   d6be0:	8a0b      	ldrh	r3, [r1, #16]
   d6be2:	68ca      	ldr	r2, [r1, #12]
   d6be4:	4413      	add	r3, r2
   d6be6:	454b      	cmp	r3, r9
   d6be8:	bf38      	it	cc
   d6bea:	464b      	movcc	r3, r9
          if (cur_fd->offset > act_new_size) {
   d6bec:	693a      	ldr	r2, [r7, #16]
   d6bee:	429a      	cmp	r2, r3
          if (cur_fd->fdoffset > act_new_size) {
   d6bf0:	697a      	ldr	r2, [r7, #20]
            cur_fd->offset = act_new_size;
   d6bf2:	bf88      	it	hi
   d6bf4:	613b      	strhi	r3, [r7, #16]
          if (cur_fd->fdoffset > act_new_size) {
   d6bf6:	429a      	cmp	r2, r3
            cur_fd->fdoffset = act_new_size;
   d6bf8:	bf88      	it	hi
   d6bfa:	617b      	strhi	r3, [r7, #20]
          if (cur_fd->cache_page && cur_fd->cache_page->offset > act_new_size+1) {
   d6bfc:	b131      	cbz	r1, d6c0c <spiffs_cb_object_event+0x108>
   d6bfe:	68ca      	ldr	r2, [r1, #12]
   d6c00:	3301      	adds	r3, #1
   d6c02:	429a      	cmp	r2, r3
   d6c04:	d902      	bls.n	d6c0c <spiffs_cb_object_event+0x108>
            spiffs_cache_fd_release(fs, cur_fd->cache_page);
   d6c06:	4628      	mov	r0, r5
   d6c08:	f7fd fc1b 	bl	d4442 <spiffs_cache_fd_release>
    if (cur_fd->cursor_objix_spix == spix) {
   d6c0c:	89bb      	ldrh	r3, [r7, #12]
   d6c0e:	42b3      	cmp	r3, r6
   d6c10:	d10c      	bne.n	d6c2c <spiffs_cb_object_event+0x128>
      if (ev != SPIFFS_EV_IX_DEL) {
   d6c12:	2c02      	cmp	r4, #2
   d6c14:	d027      	beq.n	d6c66 <spiffs_cb_object_event+0x162>
        SPIFFS_DBG("       callback: setting fd "_SPIPRIfd":"_SPIPRIid" span:"_SPIPRIsp" objix_pix to "_SPIPRIpg"\n", SPIFFS_FH_OFFS(fs, cur_fd->file_nbr), cur_fd->obj_id, spix, new_pix);
   d6c16:	887a      	ldrh	r2, [r7, #2]
   d6c18:	f9b7 1000 	ldrsh.w	r1, [r7]
   d6c1c:	4835      	ldr	r0, [pc, #212]	; (d6cf4 <spiffs_cb_object_event+0x1f0>)
   d6c1e:	f8cd 8000 	str.w	r8, [sp]
   d6c22:	4633      	mov	r3, r6
   d6c24:	f009 fed0 	bl	e09c8 <spiffsParticleInfoLog>
        cur_fd->cursor_objix_pix = new_pix;
   d6c28:	f8a7 800a 	strh.w	r8, [r7, #10]
  for (i = 0; i < fs->fd_count; i++) {
   d6c2c:	f10a 0a01 	add.w	sl, sl, #1
   d6c30:	3730      	adds	r7, #48	; 0x30
   d6c32:	e79a      	b.n	d6b6a <spiffs_cb_object_event+0x66>
          u32_t act_new_size = new_size == SPIFFS_UNDEFINED_LEN ? 0 : new_size;
   d6c34:	4633      	mov	r3, r6
   d6c36:	e7d9      	b.n	d6bec <spiffs_cb_object_event+0xe8>
   d6c38:	464b      	mov	r3, r9
   d6c3a:	e7d7      	b.n	d6bec <spiffs_cb_object_event+0xe8>
        if (cur_fd->file_nbr && cur_fd->cache_page) {
   d6c3c:	f9b7 3000 	ldrsh.w	r3, [r7]
   d6c40:	b123      	cbz	r3, d6c4c <spiffs_cb_object_event+0x148>
   d6c42:	69f9      	ldr	r1, [r7, #28]
   d6c44:	b111      	cbz	r1, d6c4c <spiffs_cb_object_event+0x148>
          spiffs_cache_fd_release(fs, cur_fd->cache_page);
   d6c46:	4628      	mov	r0, r5
   d6c48:	f7fd fbfb 	bl	d4442 <spiffs_cache_fd_release>
        SPIFFS_DBG("       callback: release fd "_SPIPRIfd":"_SPIPRIid" span:"_SPIPRIsp" objix_pix to "_SPIPRIpg"\n", SPIFFS_FH_OFFS(fs, cur_fd->file_nbr), cur_fd->obj_id, spix, new_pix);
   d6c4c:	887a      	ldrh	r2, [r7, #2]
   d6c4e:	f9b7 1000 	ldrsh.w	r1, [r7]
   d6c52:	4829      	ldr	r0, [pc, #164]	; (d6cf8 <spiffs_cb_object_event+0x1f4>)
   d6c54:	f8cd 8000 	str.w	r8, [sp]
   d6c58:	2300      	movs	r3, #0
   d6c5a:	f009 feb5 	bl	e09c8 <spiffsParticleInfoLog>
        cur_fd->file_nbr = 0;
   d6c5e:	2300      	movs	r3, #0
   d6c60:	803b      	strh	r3, [r7, #0]
        cur_fd->obj_id = SPIFFS_OBJ_ID_DELETED;
   d6c62:	807b      	strh	r3, [r7, #2]
   d6c64:	e7d2      	b.n	d6c0c <spiffs_cb_object_event+0x108>
        cur_fd->cursor_objix_pix = 0;
   d6c66:	2300      	movs	r3, #0
   d6c68:	817b      	strh	r3, [r7, #10]
   d6c6a:	e7df      	b.n	d6c2c <spiffs_cb_object_event+0x128>
      if (cur_fd->file_nbr == 0 ||
   d6c6c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
   d6c70:	b191      	cbz	r1, d6c98 <spiffs_cb_object_event+0x194>
   d6c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   d6c74:	b183      	cbz	r3, d6c98 <spiffs_cb_object_event+0x194>
          (cur_fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG) != obj_id) continue;
   d6c76:	88fa      	ldrh	r2, [r7, #6]
          cur_fd->ix_map == 0 ||
   d6c78:	9804      	ldr	r0, [sp, #16]
          (cur_fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG) != obj_id) continue;
   d6c7a:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
          cur_fd->ix_map == 0 ||
   d6c7e:	4283      	cmp	r3, r0
   d6c80:	d10a      	bne.n	d6c98 <spiffs_cb_object_event+0x194>
      SPIFFS_DBG("       callback: map ix update fd "_SPIPRIfd":"_SPIPRIid" span:"_SPIPRIsp"\n", SPIFFS_FH_OFFS(fs, cur_fd->file_nbr), cur_fd->obj_id, spix);
   d6c82:	4633      	mov	r3, r6
   d6c84:	4650      	mov	r0, sl
   d6c86:	f009 fe9f 	bl	e09c8 <spiffsParticleInfoLog>
      spiffs_update_ix_map(fs, cur_fd, spix, objix);
   d6c8a:	ee18 3a10 	vmov	r3, s16
   d6c8e:	4632      	mov	r2, r6
   d6c90:	4639      	mov	r1, r7
   d6c92:	4658      	mov	r0, fp
   d6c94:	f7ff f9e2 	bl	d605c <spiffs_update_ix_map.isra.0>
    for (i = 0; i < fs->fd_count; i++) {
   d6c98:	f109 0901 	add.w	r9, r9, #1
   d6c9c:	3730      	adds	r7, #48	; 0x30
   d6c9e:	e770      	b.n	d6b82 <spiffs_cb_object_event+0x7e>
  if (fs->file_cb_f && spix == 0 && (obj_id_raw & SPIFFS_OBJ_ID_IX_FLAG)) {
   d6ca0:	2e00      	cmp	r6, #0
   d6ca2:	f47f af75 	bne.w	d6b90 <spiffs_cb_object_event+0x8c>
   d6ca6:	9b05      	ldr	r3, [sp, #20]
   d6ca8:	041b      	lsls	r3, r3, #16
   d6caa:	f57f af71 	bpl.w	d6b90 <spiffs_cb_object_event+0x8c>
    if (ev == SPIFFS_EV_IX_NEW) {
   d6cae:	2c01      	cmp	r4, #1
   d6cb0:	d00e      	beq.n	d6cd0 <spiffs_cb_object_event+0x1cc>
    } else if (ev == SPIFFS_EV_IX_UPD ||
   d6cb2:	b1c4      	cbz	r4, d6ce6 <spiffs_cb_object_event+0x1e2>
   d6cb4:	1ee3      	subs	r3, r4, #3
   d6cb6:	2b01      	cmp	r3, #1
   d6cb8:	d915      	bls.n	d6ce6 <spiffs_cb_object_event+0x1e2>
    } else if (ev == SPIFFS_EV_IX_DEL) {
   d6cba:	2c02      	cmp	r4, #2
      op = SPIFFS_CB_DELETED;
   d6cbc:	4621      	mov	r1, r4
    } else if (ev == SPIFFS_EV_IX_DEL) {
   d6cbe:	d008      	beq.n	d6cd2 <spiffs_cb_object_event+0x1ce>
      SPIFFS_DBG("       callback: WARNING unknown callback event "_SPIPRIi"\n", ev);
   d6cc0:	480e      	ldr	r0, [pc, #56]	; (d6cfc <spiffs_cb_object_event+0x1f8>)
}
   d6cc2:	b00d      	add	sp, #52	; 0x34
   d6cc4:	ecbd 8b02 	vpop	{d8}
   d6cc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      SPIFFS_DBG("       callback: WARNING unknown callback event "_SPIPRIi"\n", ev);
   d6ccc:	f009 be7c 	b.w	e09c8 <spiffsParticleInfoLog>
      op = SPIFFS_CB_CREATED;
   d6cd0:	4631      	mov	r1, r6
    fs->file_cb_f(fs, op, obj_id, new_pix);
   d6cd2:	9a04      	ldr	r2, [sp, #16]
   d6cd4:	4643      	mov	r3, r8
   d6cd6:	4628      	mov	r0, r5
   d6cd8:	46bc      	mov	ip, r7
}
   d6cda:	b00d      	add	sp, #52	; 0x34
   d6cdc:	ecbd 8b02 	vpop	{d8}
   d6ce0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fs->file_cb_f(fs, op, obj_id, new_pix);
   d6ce4:	4760      	bx	ip
      op = SPIFFS_CB_UPDATED;
   d6ce6:	2101      	movs	r1, #1
   d6ce8:	e7f3      	b.n	d6cd2 <spiffs_cb_object_event+0x1ce>
   d6cea:	bf00      	nop
   d6cec:	000e6174 	.word	0x000e6174
   d6cf0:	000e61b0 	.word	0x000e61b0
   d6cf4:	000e6248 	.word	0x000e6248
   d6cf8:	000e6207 	.word	0x000e6207
   d6cfc:	000e62be 	.word	0x000e62be
   d6d00:	000e6db8 	.word	0x000e6db8
   d6d04:	000e6289 	.word	0x000e6289

000d6d08 <spiffs_object_create>:
    spiffs_page_ix *objix_hdr_pix) {
   d6d08:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6d0a:	b095      	sub	sp, #84	; 0x54
   d6d0c:	4604      	mov	r4, r0
   d6d0e:	f8ad 1016 	strh.w	r1, [sp, #22]
  res = spiffs_gc_check(fs, SPIFFS_DATA_PAGE_SIZE(fs));
   d6d12:	69c1      	ldr	r1, [r0, #28]
    spiffs_page_ix *objix_hdr_pix) {
   d6d14:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
  res = spiffs_gc_check(fs, SPIFFS_DATA_PAGE_SIZE(fs));
   d6d16:	3905      	subs	r1, #5
    spiffs_page_ix *objix_hdr_pix) {
   d6d18:	4617      	mov	r7, r2
  res = spiffs_gc_check(fs, SPIFFS_DATA_PAGE_SIZE(fs));
   d6d1a:	f7fe f94f 	bl	d4fbc <spiffs_gc_check>
  SPIFFS_CHECK_RES(res);
   d6d1e:	1e05      	subs	r5, r0, #0
   d6d20:	f2c0 80b7 	blt.w	d6e92 <spiffs_object_create+0x18a>
  obj_id |= SPIFFS_OBJ_ID_IX_FLAG;
   d6d24:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  res = spiffs_obj_lu_find_free(fs, fs->free_cursor_block_ix, fs->free_cursor_obj_lu_entry, &bix, &entry);
   d6d28:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d6d2a:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
  obj_id |= SPIFFS_OBJ_ID_IX_FLAG;
   d6d2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
   d6d30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
   d6d34:	f8ad 3016 	strh.w	r3, [sp, #22]
  res = spiffs_obj_lu_find_free(fs, fs->free_cursor_block_ix, fs->free_cursor_obj_lu_entry, &bix, &entry);
   d6d38:	ab07      	add	r3, sp, #28
   d6d3a:	9300      	str	r3, [sp, #0]
   d6d3c:	4620      	mov	r0, r4
   d6d3e:	f10d 031a 	add.w	r3, sp, #26
   d6d42:	f7ff fcb3 	bl	d66ac <spiffs_obj_lu_find_free>
  SPIFFS_CHECK_RES(res);
   d6d46:	1e05      	subs	r5, r0, #0
   d6d48:	f2c0 80a3 	blt.w	d6e92 <spiffs_object_create+0x18a>
  SPIFFS_DBG("create: found free page @ "_SPIPRIpg" bix:"_SPIPRIbl" entry:"_SPIPRIsp"\n", (spiffs_page_ix)SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, entry), bix, entry);
   d6d4c:	e9d4 3506 	ldrd	r3, r5, [r4, #24]
   d6d50:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   d6d54:	fbb3 f3f5 	udiv	r3, r3, r5
   d6d58:	ebb5 0f43 	cmp.w	r5, r3, lsl #1
   d6d5c:	ea4f 0143 	mov.w	r1, r3, lsl #1
   d6d60:	fb13 f002 	smulbb	r0, r3, r2
   d6d64:	9b07      	ldr	r3, [sp, #28]
   d6d66:	bf98      	it	ls
   d6d68:	fbb1 f1f5 	udivls	r1, r1, r5
   d6d6c:	b280      	uxth	r0, r0
   d6d6e:	bf94      	ite	ls
   d6d70:	b289      	uxthls	r1, r1
   d6d72:	2101      	movhi	r1, #1
   d6d74:	4418      	add	r0, r3
   d6d76:	4401      	add	r1, r0
   d6d78:	b289      	uxth	r1, r1
   d6d7a:	4847      	ldr	r0, [pc, #284]	; (d6e98 <spiffs_object_create+0x190>)
   d6d7c:	f009 fe24 	bl	e09c8 <spiffsParticleInfoLog>
  res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_UPDT,
   d6d80:	9a07      	ldr	r2, [sp, #28]
   d6d82:	6923      	ldr	r3, [r4, #16]
   d6d84:	69a1      	ldr	r1, [r4, #24]
   d6d86:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   d6d8a:	f10d 0016 	add.w	r0, sp, #22
   d6d8e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   d6d92:	9001      	str	r0, [sp, #4]
   d6d94:	2002      	movs	r0, #2
   d6d96:	fb01 3302 	mla	r3, r1, r2, r3
   d6d9a:	9000      	str	r0, [sp, #0]
   d6d9c:	2200      	movs	r2, #0
   d6d9e:	2104      	movs	r1, #4
   d6da0:	4620      	mov	r0, r4
   d6da2:	f7fd facd 	bl	d4340 <spiffs_phys_wr>
  SPIFFS_CHECK_RES(res);
   d6da6:	1e05      	subs	r5, r0, #0
   d6da8:	db73      	blt.n	d6e92 <spiffs_object_create+0x18a>
  fs->stats_p_allocated++;
   d6daa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d6dac:	3301      	adds	r3, #1
   d6dae:	64e3      	str	r3, [r4, #76]	; 0x4c
  oix_hdr.p_hdr.obj_id = obj_id;
   d6db0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   d6db4:	f8ad 3020 	strh.w	r3, [sp, #32]
  oix_hdr.p_hdr.span_ix = 0;
   d6db8:	2300      	movs	r3, #0
   d6dba:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  oix_hdr.p_hdr.flags = 0xff & ~(SPIFFS_PH_FLAG_FINAL | SPIFFS_PH_FLAG_INDEX | SPIFFS_PH_FLAG_USED);
   d6dbe:	23f8      	movs	r3, #248	; 0xf8
   d6dc0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  oix_hdr.type = type;
   d6dc4:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   d6dc8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  strncpy((char*)oix_hdr.name, (const char*)name, SPIFFS_OBJ_NAME_LEN);
   d6dcc:	4639      	mov	r1, r7
  oix_hdr.size = SPIFFS_UNDEFINED_LEN; // keep ones so we can update later without wasting this page
   d6dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  strncpy((char*)oix_hdr.name, (const char*)name, SPIFFS_OBJ_NAME_LEN);
   d6dd2:	2220      	movs	r2, #32
   d6dd4:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
  oix_hdr.size = SPIFFS_UNDEFINED_LEN; // keep ones so we can update later without wasting this page
   d6dd8:	930a      	str	r3, [sp, #40]	; 0x28
  strncpy((char*)oix_hdr.name, (const char*)name, SPIFFS_OBJ_NAME_LEN);
   d6dda:	f00e fcf6 	bl	e57ca <strncpy>
  res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
   d6dde:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   d6de2:	9b07      	ldr	r3, [sp, #28]
   d6de4:	fbb0 f5f1 	udiv	r5, r0, r1
   d6de8:	ebb1 0f45 	cmp.w	r1, r5, lsl #1
   d6dec:	ea4f 0245 	mov.w	r2, r5, lsl #1
   d6df0:	bf8c      	ite	hi
   d6df2:	2201      	movhi	r2, #1
   d6df4:	fbb2 f2f1 	udivls	r2, r2, r1
   d6df8:	6927      	ldr	r7, [r4, #16]
   d6dfa:	441a      	add	r2, r3
   d6dfc:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   d6e00:	fb00 7303 	mla	r3, r0, r3, r7
   d6e04:	202d      	movs	r0, #45	; 0x2d
   d6e06:	af08      	add	r7, sp, #32
   d6e08:	fb01 3302 	mla	r3, r1, r2, r3
   d6e0c:	9000      	str	r0, [sp, #0]
   d6e0e:	9701      	str	r7, [sp, #4]
   d6e10:	2200      	movs	r2, #0
   d6e12:	2107      	movs	r1, #7
   d6e14:	4620      	mov	r0, r4
   d6e16:	f7fd fa93 	bl	d4340 <spiffs_phys_wr>
  SPIFFS_CHECK_RES(res);
   d6e1a:	1e05      	subs	r5, r0, #0
   d6e1c:	db39      	blt.n	d6e92 <spiffs_object_create+0x18a>
      SPIFFS_EV_IX_NEW, obj_id, 0, SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, entry), SPIFFS_UNDEFINED_LEN);
   d6e1e:	e9d4 0c06 	ldrd	r0, ip, [r4, #24]
  spiffs_cb_object_event(fs, (spiffs_page_object_ix *)&oix_hdr,
   d6e22:	f8bd 101a 	ldrh.w	r1, [sp, #26]
      SPIFFS_EV_IX_NEW, obj_id, 0, SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, entry), SPIFFS_UNDEFINED_LEN);
   d6e26:	fbb0 f0fc 	udiv	r0, r0, ip
   d6e2a:	0042      	lsls	r2, r0, #1
   d6e2c:	ebbc 0f40 	cmp.w	ip, r0, lsl #1
  spiffs_cb_object_event(fs, (spiffs_page_object_ix *)&oix_hdr,
   d6e30:	fb11 f100 	smulbb	r1, r1, r0
   d6e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6e38:	9002      	str	r0, [sp, #8]
      SPIFFS_EV_IX_NEW, obj_id, 0, SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, entry), SPIFFS_UNDEFINED_LEN);
   d6e3a:	9807      	ldr	r0, [sp, #28]
   d6e3c:	bf98      	it	ls
   d6e3e:	fbb2 f2fc 	udivls	r2, r2, ip
  spiffs_cb_object_event(fs, (spiffs_page_object_ix *)&oix_hdr,
   d6e42:	b289      	uxth	r1, r1
   d6e44:	4401      	add	r1, r0
      SPIFFS_EV_IX_NEW, obj_id, 0, SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, entry), SPIFFS_UNDEFINED_LEN);
   d6e46:	bf94      	ite	ls
   d6e48:	b292      	uxthls	r2, r2
   d6e4a:	2201      	movhi	r2, #1
  spiffs_cb_object_event(fs, (spiffs_page_object_ix *)&oix_hdr,
   d6e4c:	440a      	add	r2, r1
   d6e4e:	b292      	uxth	r2, r2
   d6e50:	9201      	str	r2, [sp, #4]
   d6e52:	2200      	movs	r2, #0
   d6e54:	9200      	str	r2, [sp, #0]
   d6e56:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   d6e5a:	2201      	movs	r2, #1
   d6e5c:	4639      	mov	r1, r7
   d6e5e:	4620      	mov	r0, r4
   d6e60:	f7ff fe50 	bl	d6b04 <spiffs_cb_object_event>
  if (objix_hdr_pix) {
   d6e64:	b1ae      	cbz	r6, d6e92 <spiffs_object_create+0x18a>
    *objix_hdr_pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, entry);
   d6e66:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
   d6e6a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   d6e6e:	fbb1 f1f0 	udiv	r1, r1, r0
   d6e72:	004b      	lsls	r3, r1, #1
   d6e74:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
   d6e78:	fb12 f201 	smulbb	r2, r2, r1
   d6e7c:	9907      	ldr	r1, [sp, #28]
   d6e7e:	bf98      	it	ls
   d6e80:	fbb3 f3f0 	udivls	r3, r3, r0
   d6e84:	b292      	uxth	r2, r2
   d6e86:	bf94      	ite	ls
   d6e88:	b29b      	uxthls	r3, r3
   d6e8a:	2301      	movhi	r3, #1
   d6e8c:	440a      	add	r2, r1
   d6e8e:	4413      	add	r3, r2
   d6e90:	8033      	strh	r3, [r6, #0]
}
   d6e92:	4628      	mov	r0, r5
   d6e94:	b015      	add	sp, #84	; 0x54
   d6e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6e98:	000e62f2 	.word	0x000e62f2

000d6e9c <spiffs_object_update_index_hdr>:
    spiffs_page_ix *new_pix) {
   d6e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6ea0:	b087      	sub	sp, #28
   d6ea2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   d6ea6:	4607      	mov	r7, r0
   d6ea8:	460e      	mov	r6, r1
   d6eaa:	4699      	mov	r9, r3
  obj_id |=  SPIFFS_OBJ_ID_IX_FLAG;
   d6eac:	f442 4800 	orr.w	r8, r2, #32768	; 0x8000
  if (new_objix_hdr_data) {
   d6eb0:	f1ba 0f00 	cmp.w	sl, #0
   d6eb4:	d152      	bne.n	d6f5c <spiffs_object_update_index_hdr+0xc0>
    res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ,
   d6eb6:	6902      	ldr	r2, [r0, #16]
   d6eb8:	69c3      	ldr	r3, [r0, #28]
   d6eba:	6b81      	ldr	r1, [r0, #56]	; 0x38
   d6ebc:	e9cd 3100 	strd	r3, r1, [sp]
   d6ec0:	fb03 2309 	mla	r3, r3, r9, r2
   d6ec4:	2116      	movs	r1, #22
   d6ec6:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
   d6eca:	f7fd f9ad 	bl	d4228 <spiffs_phys_rd>
    SPIFFS_CHECK_RES(res);
   d6ece:	1e04      	subs	r4, r0, #0
   d6ed0:	db40      	blt.n	d6f54 <spiffs_object_update_index_hdr+0xb8>
    objix_hdr = (spiffs_page_object_ix_header *)fs->work;
   d6ed2:	6bbd      	ldr	r5, [r7, #56]	; 0x38
  SPIFFS_VALIDATE_OBJIX(objix_hdr->p_hdr, obj_id, 0);
   d6ed4:	792b      	ldrb	r3, [r5, #4]
   d6ed6:	07d8      	lsls	r0, r3, #31
   d6ed8:	d444      	bmi.n	d6f64 <spiffs_object_update_index_hdr+0xc8>
   d6eda:	0619      	lsls	r1, r3, #24
   d6edc:	d544      	bpl.n	d6f68 <spiffs_object_update_index_hdr+0xcc>
   d6ede:	079a      	lsls	r2, r3, #30
   d6ee0:	d444      	bmi.n	d6f6c <spiffs_object_update_index_hdr+0xd0>
   d6ee2:	075b      	lsls	r3, r3, #29
   d6ee4:	d444      	bmi.n	d6f70 <spiffs_object_update_index_hdr+0xd4>
   d6ee6:	886b      	ldrh	r3, [r5, #2]
   d6ee8:	2b00      	cmp	r3, #0
   d6eea:	d143      	bne.n	d6f74 <spiffs_object_update_index_hdr+0xd8>
  if (name) {
   d6eec:	f1bb 0f00 	cmp.w	fp, #0
   d6ef0:	d005      	beq.n	d6efe <spiffs_object_update_index_hdr+0x62>
    strncpy((char*)objix_hdr->name, (const char*)name, SPIFFS_OBJ_NAME_LEN);
   d6ef2:	2220      	movs	r2, #32
   d6ef4:	4659      	mov	r1, fp
   d6ef6:	f105 000d 	add.w	r0, r5, #13
   d6efa:	f00e fc66 	bl	e57ca <strncpy>
  if (size) {
   d6efe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d6f00:	b103      	cbz	r3, d6f04 <spiffs_object_update_index_hdr+0x68>
    objix_hdr->size = size;
   d6f02:	60ab      	str	r3, [r5, #8]
  res = spiffs_page_move(fs, fd == 0 ? 0 : fd->file_nbr, (u8_t*)objix_hdr, obj_id, 0, objix_hdr_pix, &new_objix_hdr_pix);
   d6f04:	b366      	cbz	r6, d6f60 <spiffs_object_update_index_hdr+0xc4>
   d6f06:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
   d6f0a:	f10d 0316 	add.w	r3, sp, #22
   d6f0e:	e9cd 9301 	strd	r9, r3, [sp, #4]
   d6f12:	2300      	movs	r3, #0
   d6f14:	9300      	str	r3, [sp, #0]
   d6f16:	462a      	mov	r2, r5
   d6f18:	4643      	mov	r3, r8
   d6f1a:	4638      	mov	r0, r7
   d6f1c:	f7ff fd4c 	bl	d69b8 <spiffs_page_move>
  if (res == SPIFFS_OK) {
   d6f20:	4604      	mov	r4, r0
   d6f22:	b9b8      	cbnz	r0, d6f54 <spiffs_object_update_index_hdr+0xb8>
    if (new_pix) {
   d6f24:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d6f26:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   d6f2a:	b102      	cbz	r2, d6f2e <spiffs_object_update_index_hdr+0x92>
      *new_pix = new_objix_hdr_pix;
   d6f2c:	8013      	strh	r3, [r2, #0]
    spiffs_cb_object_event(fs, (spiffs_page_object_ix *)objix_hdr,
   d6f2e:	68aa      	ldr	r2, [r5, #8]
   d6f30:	e9cd 3201 	strd	r3, r2, [sp, #4]
   d6f34:	f1ba 0f00 	cmp.w	sl, #0
   d6f38:	886b      	ldrh	r3, [r5, #2]
   d6f3a:	9300      	str	r3, [sp, #0]
   d6f3c:	bf0c      	ite	eq
   d6f3e:	2204      	moveq	r2, #4
   d6f40:	2200      	movne	r2, #0
   d6f42:	4643      	mov	r3, r8
   d6f44:	4629      	mov	r1, r5
   d6f46:	4638      	mov	r0, r7
   d6f48:	f7ff fddc 	bl	d6b04 <spiffs_cb_object_event>
    if (fd) fd->objix_hdr_pix = new_objix_hdr_pix; // if this is not in the registered cluster
   d6f4c:	b116      	cbz	r6, d6f54 <spiffs_object_update_index_hdr+0xb8>
   d6f4e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   d6f52:	81b3      	strh	r3, [r6, #12]
}
   d6f54:	4620      	mov	r0, r4
   d6f56:	b007      	add	sp, #28
   d6f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6f5c:	4655      	mov	r5, sl
   d6f5e:	e7b9      	b.n	d6ed4 <spiffs_object_update_index_hdr+0x38>
  res = spiffs_page_move(fs, fd == 0 ? 0 : fd->file_nbr, (u8_t*)objix_hdr, obj_id, 0, objix_hdr_pix, &new_objix_hdr_pix);
   d6f60:	4631      	mov	r1, r6
   d6f62:	e7d2      	b.n	d6f0a <spiffs_object_update_index_hdr+0x6e>
  SPIFFS_VALIDATE_OBJIX(objix_hdr->p_hdr, obj_id, 0);
   d6f64:	4c04      	ldr	r4, [pc, #16]	; (d6f78 <spiffs_object_update_index_hdr+0xdc>)
   d6f66:	e7f5      	b.n	d6f54 <spiffs_object_update_index_hdr+0xb8>
   d6f68:	4c04      	ldr	r4, [pc, #16]	; (d6f7c <spiffs_object_update_index_hdr+0xe0>)
   d6f6a:	e7f3      	b.n	d6f54 <spiffs_object_update_index_hdr+0xb8>
   d6f6c:	4c04      	ldr	r4, [pc, #16]	; (d6f80 <spiffs_object_update_index_hdr+0xe4>)
   d6f6e:	e7f1      	b.n	d6f54 <spiffs_object_update_index_hdr+0xb8>
   d6f70:	4c04      	ldr	r4, [pc, #16]	; (d6f84 <spiffs_object_update_index_hdr+0xe8>)
   d6f72:	e7ef      	b.n	d6f54 <spiffs_object_update_index_hdr+0xb8>
   d6f74:	4c04      	ldr	r4, [pc, #16]	; (d6f88 <spiffs_object_update_index_hdr+0xec>)
   d6f76:	e7ed      	b.n	d6f54 <spiffs_object_update_index_hdr+0xb8>
   d6f78:	ffffd8e4 	.word	0xffffd8e4
   d6f7c:	ffffd8ec 	.word	0xffffd8ec
   d6f80:	ffffd8eb 	.word	0xffffd8eb
   d6f84:	ffffd8ea 	.word	0xffffd8ea
   d6f88:	ffffd8e3 	.word	0xffffd8e3

000d6f8c <spiffs_object_open_by_page>:
    spiffs_mode mode) {
   d6f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6f90:	b090      	sub	sp, #64	; 0x40
   d6f92:	460f      	mov	r7, r1
   d6f94:	4615      	mov	r5, r2
  res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ,
   d6f96:	a904      	add	r1, sp, #16
   d6f98:	69c2      	ldr	r2, [r0, #28]
    spiffs_mode mode) {
   d6f9a:	4698      	mov	r8, r3
  res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ,
   d6f9c:	6903      	ldr	r3, [r0, #16]
   d6f9e:	9101      	str	r1, [sp, #4]
   d6fa0:	212d      	movs	r1, #45	; 0x2d
   d6fa2:	9100      	str	r1, [sp, #0]
   d6fa4:	fb02 3307 	mla	r3, r2, r7, r3
   d6fa8:	2116      	movs	r1, #22
   d6faa:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
    spiffs_mode mode) {
   d6fae:	4606      	mov	r6, r0
  res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ,
   d6fb0:	f7fd f93a 	bl	d4228 <spiffs_phys_rd>
  SPIFFS_CHECK_RES(res);
   d6fb4:	1e04      	subs	r4, r0, #0
   d6fb6:	db42      	blt.n	d703e <spiffs_object_open_by_page+0xb2>
  spiffs_block_ix bix = SPIFFS_BLOCK_FOR_PAGE(fs, pix);
   d6fb8:	e9d6 2406 	ldrd	r2, r4, [r6, #24]
   d6fbc:	fbb2 f0f4 	udiv	r0, r2, r4
  int entry = SPIFFS_OBJ_LOOKUP_ENTRY_FOR_PAGE(fs, pix);
   d6fc0:	ebb4 0f40 	cmp.w	r4, r0, lsl #1
   d6fc4:	ea4f 0140 	mov.w	r1, r0, lsl #1
  spiffs_block_ix bix = SPIFFS_BLOCK_FOR_PAGE(fs, pix);
   d6fc8:	fbb7 fcf0 	udiv	ip, r7, r0
  int entry = SPIFFS_OBJ_LOOKUP_ENTRY_FOR_PAGE(fs, pix);
   d6fcc:	bf88      	it	hi
   d6fce:	2101      	movhi	r1, #1
   d6fd0:	fb00 731c 	mls	r3, r0, ip, r7
  res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ,
   d6fd4:	6930      	ldr	r0, [r6, #16]
  int entry = SPIFFS_OBJ_LOOKUP_ENTRY_FOR_PAGE(fs, pix);
   d6fd6:	bf98      	it	ls
   d6fd8:	fbb1 f1f4 	udivls	r1, r1, r4
   d6fdc:	1a5b      	subs	r3, r3, r1
  res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ,
   d6fde:	f10d 010e 	add.w	r1, sp, #14
   d6fe2:	fb0c 0202 	mla	r2, ip, r2, r0
   d6fe6:	9101      	str	r1, [sp, #4]
   d6fe8:	2102      	movs	r1, #2
   d6fea:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d6fee:	9100      	str	r1, [sp, #0]
   d6ff0:	2200      	movs	r2, #0
   d6ff2:	2114      	movs	r1, #20
   d6ff4:	4630      	mov	r0, r6
   d6ff6:	f7fd f917 	bl	d4228 <spiffs_phys_rd>
  fd->size = oix_hdr.size;
   d6ffa:	9b06      	ldr	r3, [sp, #24]
   d6ffc:	60ab      	str	r3, [r5, #8]
  fd->offset = 0;
   d6ffe:	2300      	movs	r3, #0
   d7000:	616b      	str	r3, [r5, #20]
  fd->cursor_objix_spix = 0;
   d7002:	822b      	strh	r3, [r5, #16]
  SPIFFS_VALIDATE_OBJIX(oix_hdr.p_hdr, fd->obj_id, 0);
   d7004:	f89d 3014 	ldrb.w	r3, [sp, #20]
  fd->obj_id = obj_id;
   d7008:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  fd->objix_hdr_pix = pix;
   d700c:	81af      	strh	r7, [r5, #12]
  fd->cursor_objix_pix = pix;
   d700e:	81ef      	strh	r7, [r5, #14]
  SPIFFS_VALIDATE_OBJIX(oix_hdr.p_hdr, fd->obj_id, 0);
   d7010:	07df      	lsls	r7, r3, #31
  res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ,
   d7012:	4604      	mov	r4, r0
  fd->fs = fs;
   d7014:	602e      	str	r6, [r5, #0]
  fd->obj_id = obj_id;
   d7016:	80ea      	strh	r2, [r5, #6]
  fd->flags = flags;
   d7018:	f8a5 801c 	strh.w	r8, [r5, #28]
  SPIFFS_VALIDATE_OBJIX(oix_hdr.p_hdr, fd->obj_id, 0);
   d701c:	d413      	bmi.n	d7046 <spiffs_object_open_by_page+0xba>
   d701e:	061e      	lsls	r6, r3, #24
   d7020:	d513      	bpl.n	d704a <spiffs_object_open_by_page+0xbe>
   d7022:	0798      	lsls	r0, r3, #30
   d7024:	d413      	bmi.n	d704e <spiffs_object_open_by_page+0xc2>
   d7026:	0759      	lsls	r1, r3, #29
   d7028:	d413      	bmi.n	d7052 <spiffs_object_open_by_page+0xc6>
   d702a:	0413      	lsls	r3, r2, #16
   d702c:	d511      	bpl.n	d7052 <spiffs_object_open_by_page+0xc6>
   d702e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   d7032:	b983      	cbnz	r3, d7056 <spiffs_object_open_by_page+0xca>
  SPIFFS_DBG("open: fd "_SPIPRIfd" is obj id "_SPIPRIid"\n", SPIFFS_FH_OFFS(fs, fd->file_nbr), fd->obj_id);
   d7034:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
   d7038:	4808      	ldr	r0, [pc, #32]	; (d705c <spiffs_object_open_by_page+0xd0>)
   d703a:	f009 fcc5 	bl	e09c8 <spiffsParticleInfoLog>
}
   d703e:	4620      	mov	r0, r4
   d7040:	b010      	add	sp, #64	; 0x40
   d7042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  SPIFFS_VALIDATE_OBJIX(oix_hdr.p_hdr, fd->obj_id, 0);
   d7046:	4c06      	ldr	r4, [pc, #24]	; (d7060 <spiffs_object_open_by_page+0xd4>)
   d7048:	e7f9      	b.n	d703e <spiffs_object_open_by_page+0xb2>
   d704a:	4c06      	ldr	r4, [pc, #24]	; (d7064 <spiffs_object_open_by_page+0xd8>)
   d704c:	e7f7      	b.n	d703e <spiffs_object_open_by_page+0xb2>
   d704e:	4c06      	ldr	r4, [pc, #24]	; (d7068 <spiffs_object_open_by_page+0xdc>)
   d7050:	e7f5      	b.n	d703e <spiffs_object_open_by_page+0xb2>
   d7052:	4c06      	ldr	r4, [pc, #24]	; (d706c <spiffs_object_open_by_page+0xe0>)
   d7054:	e7f3      	b.n	d703e <spiffs_object_open_by_page+0xb2>
   d7056:	4c06      	ldr	r4, [pc, #24]	; (d7070 <spiffs_object_open_by_page+0xe4>)
   d7058:	e7f1      	b.n	d703e <spiffs_object_open_by_page+0xb2>
   d705a:	bf00      	nop
   d705c:	000e6326 	.word	0x000e6326
   d7060:	ffffd8e4 	.word	0xffffd8e4
   d7064:	ffffd8ec 	.word	0xffffd8ec
   d7068:	ffffd8eb 	.word	0xffffd8eb
   d706c:	ffffd8ea 	.word	0xffffd8ea
   d7070:	ffffd8e3 	.word	0xffffd8e3

000d7074 <spiffs_object_append>:
s32_t spiffs_object_append(spiffs_fd *fd, u32_t offset, u8_t *data, u32_t len) {
   d7074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7078:	b091      	sub	sp, #68	; 0x44
   d707a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
   d707e:	4605      	mov	r5, r0
  SPIFFS_DBG("append: "_SPIPRIi" bytes @ offs "_SPIPRIi" of size "_SPIPRIi"\n", len, offset, fd->size);
   d7080:	6883      	ldr	r3, [r0, #8]
  spiffs *fs = fd->fs;
   d7082:	6806      	ldr	r6, [r0, #0]
  SPIFFS_DBG("append: "_SPIPRIi" bytes @ offs "_SPIPRIi" of size "_SPIPRIi"\n", len, offset, fd->size);
   d7084:	4878      	ldr	r0, [pc, #480]	; (d7268 <spiffs_object_append+0x1f4>)
s32_t spiffs_object_append(spiffs_fd *fd, u32_t offset, u8_t *data, u32_t len) {
   d7086:	468b      	mov	fp, r1
  SPIFFS_DBG("append: "_SPIPRIi" bytes @ offs "_SPIPRIi" of size "_SPIPRIi"\n", len, offset, fd->size);
   d7088:	460a      	mov	r2, r1
   d708a:	990a      	ldr	r1, [sp, #40]	; 0x28
   d708c:	f009 fc9c 	bl	e09c8 <spiffsParticleInfoLog>
  if (offset > fd->size) {
   d7090:	68ab      	ldr	r3, [r5, #8]
   d7092:	455b      	cmp	r3, fp
   d7094:	d204      	bcs.n	d70a0 <spiffs_object_append+0x2c>
    SPIFFS_DBG("append: offset reversed to size\n");
   d7096:	4875      	ldr	r0, [pc, #468]	; (d726c <spiffs_object_append+0x1f8>)
   d7098:	f009 fc96 	bl	e09c8 <spiffsParticleInfoLog>
    offset = fd->size;
   d709c:	f8d5 b008 	ldr.w	fp, [r5, #8]
  res = spiffs_gc_check(fs, len + SPIFFS_DATA_PAGE_SIZE(fs)); // add an extra page of data worth for meta
   d70a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d70a2:	1f59      	subs	r1, r3, #5
   d70a4:	69f3      	ldr	r3, [r6, #28]
   d70a6:	4630      	mov	r0, r6
   d70a8:	4419      	add	r1, r3
   d70aa:	f7fd ff87 	bl	d4fbc <spiffs_gc_check>
  if (res != SPIFFS_OK) {
   d70ae:	4604      	mov	r4, r0
   d70b0:	2800      	cmp	r0, #0
   d70b2:	d16e      	bne.n	d7192 <spiffs_object_append+0x11e>
  spiffs_page_object_ix_header *objix_hdr = (spiffs_page_object_ix_header *)fs->work;
   d70b4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   d70b6:	9307      	str	r3, [sp, #28]
  spiffs_page_ix cur_objix_pix = fd->objix_hdr_pix;
   d70b8:	89ab      	ldrh	r3, [r5, #12]
   d70ba:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
  spiffs_span_ix data_spix = offset / SPIFFS_DATA_PAGE_SIZE(fs);
   d70be:	69f3      	ldr	r3, [r6, #28]
   d70c0:	3b05      	subs	r3, #5
  spiffs_span_ix cur_objix_spix = 0;
   d70c2:	2700      	movs	r7, #0
  spiffs_span_ix data_spix = offset / SPIFFS_DATA_PAGE_SIZE(fs);
   d70c4:	fbbb f2f3 	udiv	r2, fp, r3
  u32_t page_offs = offset % SPIFFS_DATA_PAGE_SIZE(fs);
   d70c8:	fb03 b312 	mls	r3, r3, r2, fp
  spiffs_span_ix data_spix = offset / SPIFFS_DATA_PAGE_SIZE(fs);
   d70cc:	fa1f f982 	uxth.w	r9, r2
  u32_t page_offs = offset % SPIFFS_DATA_PAGE_SIZE(fs);
   d70d0:	9308      	str	r3, [sp, #32]
  spiffs_span_ix prev_objix_spix = (spiffs_span_ix)-1;
   d70d2:	f64f 7aff 	movw	sl, #65535	; 0xffff
  u32_t written = 0;
   d70d6:	46b8      	mov	r8, r7
  while (res == SPIFFS_OK && written < len) {
   d70d8:	2c00      	cmp	r4, #0
   d70da:	f000 8185 	beq.w	d73e8 <spiffs_object_append+0x374>
  fd->size = offset+written;
   d70de:	eb0b 0908 	add.w	r9, fp, r8
  fd->cursor_objix_pix = cur_objix_pix;
   d70e2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  fd->size = offset+written;
   d70e6:	f8c5 9008 	str.w	r9, [r5, #8]
  fd->offset = offset+written;
   d70ea:	f8c5 9014 	str.w	r9, [r5, #20]
  fd->cursor_objix_pix = cur_objix_pix;
   d70ee:	81ea      	strh	r2, [r5, #14]
  fd->cursor_objix_spix = cur_objix_spix;
   d70f0:	822f      	strh	r7, [r5, #16]
  if (cur_objix_spix != 0) {
   d70f2:	2f00      	cmp	r7, #0
   d70f4:	f000 82dd 	beq.w	d76b2 <spiffs_object_append+0x63e>
    SPIFFS_DBG("append: "_SPIPRIid" store objix page, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", fd->obj_id,
   d70f8:	88e9      	ldrh	r1, [r5, #6]
   d70fa:	485d      	ldr	r0, [pc, #372]	; (d7270 <spiffs_object_append+0x1fc>)
   d70fc:	f8cd 8000 	str.w	r8, [sp]
   d7100:	463b      	mov	r3, r7
   d7102:	f009 fc61 	bl	e09c8 <spiffsParticleInfoLog>
    res2 = spiffs_page_index_check(fs, fd, cur_objix_pix, cur_objix_spix);
   d7106:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   d710a:	463b      	mov	r3, r7
   d710c:	4629      	mov	r1, r5
   d710e:	4630      	mov	r0, r6
   d7110:	f7fe fe20 	bl	d5d54 <spiffs_page_index_check>
    SPIFFS_CHECK_RES(res2);
   d7114:	2800      	cmp	r0, #0
   d7116:	f2c0 8328 	blt.w	d776a <spiffs_object_append+0x6f6>
    res2 = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_UPDT,
   d711a:	69f2      	ldr	r2, [r6, #28]
   d711c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
   d7120:	6933      	ldr	r3, [r6, #16]
   d7122:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   d7124:	fb02 3301 	mla	r3, r2, r1, r3
   d7128:	e9cd 2000 	strd	r2, r0, [sp]
   d712c:	2106      	movs	r1, #6
   d712e:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
   d7132:	4630      	mov	r0, r6
   d7134:	f7fd f904 	bl	d4340 <spiffs_phys_wr>
    SPIFFS_CHECK_RES(res2);
   d7138:	2800      	cmp	r0, #0
   d713a:	f2c0 8316 	blt.w	d776a <spiffs_object_append+0x6f6>
    spiffs_cb_object_event(fs, (spiffs_page_object_ix *)fs->work,
   d713e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   d7142:	9301      	str	r3, [sp, #4]
   d7144:	2700      	movs	r7, #0
   d7146:	9b07      	ldr	r3, [sp, #28]
   d7148:	9702      	str	r7, [sp, #8]
   d714a:	885b      	ldrh	r3, [r3, #2]
   d714c:	9300      	str	r3, [sp, #0]
   d714e:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   d7150:	88eb      	ldrh	r3, [r5, #6]
   d7152:	4630      	mov	r0, r6
   d7154:	463a      	mov	r2, r7
   d7156:	f7ff fcd5 	bl	d6b04 <spiffs_cb_object_event>
    res2 = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
   d715a:	f10d 0332 	add.w	r3, sp, #50	; 0x32
   d715e:	e9cd 9303 	strd	r9, r3, [sp, #12]
   d7162:	88ea      	ldrh	r2, [r5, #6]
   d7164:	89ab      	ldrh	r3, [r5, #12]
   d7166:	9700      	str	r7, [sp, #0]
   d7168:	4629      	mov	r1, r5
   d716a:	4630      	mov	r0, r6
   d716c:	e9cd 7701 	strd	r7, r7, [sp, #4]
   d7170:	f7ff fe94 	bl	d6e9c <spiffs_object_update_index_hdr>
    SPIFFS_DBG("append: "_SPIPRIid" store new size II "_SPIPRIi" in objix_hdr, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi", res "_SPIPRIi"\n", fd->obj_id
   d7174:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   d7178:	88e9      	ldrh	r1, [r5, #6]
   d717a:	9700      	str	r7, [sp, #0]
   d717c:	e9cd 8001 	strd	r8, r0, [sp, #4]
    res2 = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
   d7180:	4606      	mov	r6, r0
    SPIFFS_DBG("append: "_SPIPRIid" store new size II "_SPIPRIi" in objix_hdr, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi", res "_SPIPRIi"\n", fd->obj_id
   d7182:	464a      	mov	r2, r9
   d7184:	483b      	ldr	r0, [pc, #236]	; (d7274 <spiffs_object_append+0x200>)
   d7186:	f009 fc1f 	bl	e09c8 <spiffsParticleInfoLog>
    SPIFFS_CHECK_RES(res2);
   d718a:	42be      	cmp	r6, r7
   d718c:	bfb8      	it	lt
   d718e:	4634      	movlt	r4, r6
   d7190:	e005      	b.n	d719e <spiffs_object_append+0x12a>
    SPIFFS_DBG("append: gc check fail "_SPIPRIi"\n", res);
   d7192:	4601      	mov	r1, r0
   d7194:	4838      	ldr	r0, [pc, #224]	; (d7278 <spiffs_object_append+0x204>)
   d7196:	f009 fc17 	bl	e09c8 <spiffsParticleInfoLog>
  SPIFFS_CHECK_RES(res);
   d719a:	2c00      	cmp	r4, #0
   d719c:	da8a      	bge.n	d70b4 <spiffs_object_append+0x40>
} // spiffs_object_append
   d719e:	4620      	mov	r0, r4
   d71a0:	b011      	add	sp, #68	; 0x44
   d71a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            res = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
   d71a6:	f10d 0232 	add.w	r2, sp, #50	; 0x32
   d71aa:	e9cd 3203 	strd	r3, r2, [sp, #12]
   d71ae:	e9cd aa01 	strd	sl, sl, [sp, #4]
   d71b2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   d71b4:	9300      	str	r3, [sp, #0]
   d71b6:	88ea      	ldrh	r2, [r5, #6]
   d71b8:	89ab      	ldrh	r3, [r5, #12]
   d71ba:	4629      	mov	r1, r5
   d71bc:	4630      	mov	r0, r6
   d71be:	f7ff fe6d 	bl	d6e9c <spiffs_object_update_index_hdr>
            SPIFFS_CHECK_RES(res);
   d71c2:	1e04      	subs	r4, r0, #0
   d71c4:	dbeb      	blt.n	d719e <spiffs_object_append+0x12a>
            SPIFFS_DBG("append: "_SPIPRIid" store new objix_hdr, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", fd->obj_id,
   d71c6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   d71ca:	88e9      	ldrh	r1, [r5, #6]
   d71cc:	482b      	ldr	r0, [pc, #172]	; (d727c <spiffs_object_append+0x208>)
   d71ce:	f8cd 8000 	str.w	r8, [sp]
   d71d2:	4653      	mov	r3, sl
   d71d4:	f009 fbf8 	bl	e09c8 <spiffsParticleInfoLog>
   d71d8:	e152      	b.n	d7480 <spiffs_object_append+0x40c>
          res = spiffs_page_index_check(fs, fd, cur_objix_pix, prev_objix_spix);
   d71da:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   d71de:	4653      	mov	r3, sl
   d71e0:	4629      	mov	r1, r5
   d71e2:	4630      	mov	r0, r6
   d71e4:	f7fe fdb6 	bl	d5d54 <spiffs_page_index_check>
          SPIFFS_CHECK_RES(res);
   d71e8:	1e04      	subs	r4, r0, #0
   d71ea:	dbd8      	blt.n	d719e <spiffs_object_append+0x12a>
          res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_UPDT,
   d71ec:	69f2      	ldr	r2, [r6, #28]
   d71ee:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
   d71f2:	6933      	ldr	r3, [r6, #16]
   d71f4:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   d71f6:	fb02 3301 	mla	r3, r2, r1, r3
   d71fa:	e9cd 2000 	strd	r2, r0, [sp]
   d71fe:	2106      	movs	r1, #6
   d7200:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
   d7204:	4630      	mov	r0, r6
   d7206:	f7fd f89b 	bl	d4340 <spiffs_phys_wr>
          SPIFFS_CHECK_RES(res);
   d720a:	1e04      	subs	r4, r0, #0
   d720c:	dbc7      	blt.n	d719e <spiffs_object_append+0x12a>
          spiffs_cb_object_event(fs, (spiffs_page_object_ix *)fs->work,
   d720e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   d7212:	9301      	str	r3, [sp, #4]
   d7214:	f04f 0a00 	mov.w	sl, #0
   d7218:	9b07      	ldr	r3, [sp, #28]
   d721a:	f8cd a008 	str.w	sl, [sp, #8]
   d721e:	885b      	ldrh	r3, [r3, #2]
   d7220:	9300      	str	r3, [sp, #0]
   d7222:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   d7224:	88eb      	ldrh	r3, [r5, #6]
   d7226:	4652      	mov	r2, sl
   d7228:	4630      	mov	r0, r6
   d722a:	f7ff fc6b 	bl	d6b04 <spiffs_cb_object_event>
          res = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
   d722e:	eb0b 0308 	add.w	r3, fp, r8
   d7232:	9309      	str	r3, [sp, #36]	; 0x24
   d7234:	f10d 0332 	add.w	r3, sp, #50	; 0x32
   d7238:	9304      	str	r3, [sp, #16]
   d723a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d723c:	88ea      	ldrh	r2, [r5, #6]
   d723e:	e9cd a302 	strd	sl, r3, [sp, #8]
   d7242:	e9cd aa00 	strd	sl, sl, [sp]
   d7246:	89ab      	ldrh	r3, [r5, #12]
   d7248:	4629      	mov	r1, r5
   d724a:	4630      	mov	r0, r6
   d724c:	f7ff fe26 	bl	d6e9c <spiffs_object_update_index_hdr>
          SPIFFS_CHECK_RES(res);
   d7250:	1e04      	subs	r4, r0, #0
   d7252:	dba4      	blt.n	d719e <spiffs_object_append+0x12a>
          SPIFFS_DBG("append: "_SPIPRIid" store new size I "_SPIPRIi" in objix_hdr, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", fd->obj_id,
   d7254:	e9cd a800 	strd	sl, r8, [sp]
   d7258:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   d725c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d725e:	88e9      	ldrh	r1, [r5, #6]
   d7260:	4807      	ldr	r0, [pc, #28]	; (d7280 <spiffs_object_append+0x20c>)
   d7262:	f009 fbb1 	bl	e09c8 <spiffsParticleInfoLog>
   d7266:	e10b      	b.n	d7480 <spiffs_object_append+0x40c>
   d7268:	000e6342 	.word	0x000e6342
   d726c:	000e6369 	.word	0x000e6369
   d7270:	000e662a 	.word	0x000e662a
   d7274:	000e6660 	.word	0x000e6660
   d7278:	000e638a 	.word	0x000e638a
   d727c:	000e63d4 	.word	0x000e63d4
   d7280:	000e640d 	.word	0x000e640d
        spiffs_span_ix len_objix_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, (fd->size-1)/SPIFFS_DATA_PAGE_SIZE(fs));
   d7284:	69f2      	ldr	r2, [r6, #28]
   d7286:	68ab      	ldr	r3, [r5, #8]
   d7288:	1f50      	subs	r0, r2, #5
   d728a:	3b01      	subs	r3, #1
   d728c:	fbb3 f3f0 	udiv	r3, r3, r0
   d7290:	f1a2 002d 	sub.w	r0, r2, #45	; 0x2d
   d7294:	ebb3 0f50 	cmp.w	r3, r0, lsr #1
   d7298:	ea4f 0450 	mov.w	r4, r0, lsr #1
   d729c:	d30c      	bcc.n	d72b8 <spiffs_object_append+0x244>
        if (written > 0 || cur_objix_spix > len_objix_spix) {
   d729e:	f1b8 0f00 	cmp.w	r8, #0
   d72a2:	d109      	bne.n	d72b8 <spiffs_object_append+0x244>
        spiffs_span_ix len_objix_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, (fd->size-1)/SPIFFS_DATA_PAGE_SIZE(fs));
   d72a4:	3a08      	subs	r2, #8
   d72a6:	1b1b      	subs	r3, r3, r4
   d72a8:	0852      	lsrs	r2, r2, #1
   d72aa:	fbb3 f3f2 	udiv	r3, r3, r2
   d72ae:	3301      	adds	r3, #1
        if (written > 0 || cur_objix_spix > len_objix_spix) {
   d72b0:	b29b      	uxth	r3, r3
   d72b2:	429f      	cmp	r7, r3
   d72b4:	f240 8120 	bls.w	d74f8 <spiffs_object_append+0x484>
          p_hdr.flags = 0xff & ~(SPIFFS_PH_FLAG_FINAL | SPIFFS_PH_FLAG_INDEX);
   d72b8:	23f9      	movs	r3, #249	; 0xf9
   d72ba:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
          res = spiffs_page_allocate_data(fs, fd->obj_id | SPIFFS_OBJ_ID_IX_FLAG,
   d72be:	ab0c      	add	r3, sp, #48	; 0x30
   d72c0:	f04f 0a00 	mov.w	sl, #0
   d72c4:	9303      	str	r3, [sp, #12]
   d72c6:	2301      	movs	r3, #1
   d72c8:	e9cd a301 	strd	sl, r3, [sp, #4]
          p_hdr.obj_id = fd->obj_id | SPIFFS_OBJ_ID_IX_FLAG;
   d72cc:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
          res = spiffs_page_allocate_data(fs, fd->obj_id | SPIFFS_OBJ_ID_IX_FLAG,
   d72d0:	f8cd a000 	str.w	sl, [sp]
   d72d4:	4653      	mov	r3, sl
   d72d6:	aa0e      	add	r2, sp, #56	; 0x38
   d72d8:	4630      	mov	r0, r6
          p_hdr.obj_id = fd->obj_id | SPIFFS_OBJ_ID_IX_FLAG;
   d72da:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
          p_hdr.span_ix = cur_objix_spix;
   d72de:	f8ad 703a 	strh.w	r7, [sp, #58]	; 0x3a
          res = spiffs_page_allocate_data(fs, fd->obj_id | SPIFFS_OBJ_ID_IX_FLAG,
   d72e2:	f7ff fa67 	bl	d67b4 <spiffs_page_allocate_data>
          SPIFFS_CHECK_RES(res);
   d72e6:	1e04      	subs	r4, r0, #0
   d72e8:	f6ff af59 	blt.w	d719e <spiffs_object_append+0x12a>
          memset(fs->work, 0xff, SPIFFS_CFG_LOG_PAGE_SZ(fs));
   d72ec:	69f2      	ldr	r2, [r6, #28]
   d72ee:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   d72f0:	21ff      	movs	r1, #255	; 0xff
   d72f2:	f00e f9dd 	bl	e56b0 <memset>
          _SPIFFS_MEMCPY(fs->work, &p_hdr, sizeof(spiffs_page_header));
   d72f6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   d72f8:	980e      	ldr	r0, [sp, #56]	; 0x38
   d72fa:	6018      	str	r0, [r3, #0]
   d72fc:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
   d7300:	711a      	strb	r2, [r3, #4]
          spiffs_cb_object_event(fs, (spiffs_page_object_ix *)fs->work,
   d7302:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   d7306:	f8cd a008 	str.w	sl, [sp, #8]
   d730a:	e9cd 7300 	strd	r7, r3, [sp]
   d730e:	2201      	movs	r2, #1
   d7310:	88eb      	ldrh	r3, [r5, #6]
   d7312:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   d7314:	4630      	mov	r0, r6
   d7316:	f7ff fbf5 	bl	d6b04 <spiffs_cb_object_event>
          SPIFFS_DBG("append: "_SPIPRIid" create objix page, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", fd->obj_id
   d731a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   d731e:	88e9      	ldrh	r1, [r5, #6]
   d7320:	48b7      	ldr	r0, [pc, #732]	; (d7600 <spiffs_object_append+0x58c>)
   d7322:	f8cd 8000 	str.w	r8, [sp]
   d7326:	463b      	mov	r3, r7
   d7328:	f009 fb4e 	bl	e09c8 <spiffsParticleInfoLog>
        fd->cursor_objix_pix = cur_objix_pix;
   d732c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   d7330:	81eb      	strh	r3, [r5, #14]
        fd->offset = offset+written;
   d7332:	eb0b 0308 	add.w	r3, fp, r8
        fd->cursor_objix_spix = cur_objix_spix;
   d7336:	822f      	strh	r7, [r5, #16]
        fd->offset = offset+written;
   d7338:	616b      	str	r3, [r5, #20]
        fd->size = offset+written;
   d733a:	60ab      	str	r3, [r5, #8]
   d733c:	46ba      	mov	sl, r7
    u32_t to_write = MIN(len-written, SPIFFS_DATA_PAGE_SIZE(fs) - page_offs);
   d733e:	69f2      	ldr	r2, [r6, #28]
   d7340:	9908      	ldr	r1, [sp, #32]
   d7342:	1f53      	subs	r3, r2, #5
   d7344:	1a59      	subs	r1, r3, r1
   d7346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7348:	eba3 0308 	sub.w	r3, r3, r8
   d734c:	4299      	cmp	r1, r3
   d734e:	bf28      	it	cs
   d7350:	4619      	movcs	r1, r3
    if (page_offs == 0) {
   d7352:	9b08      	ldr	r3, [sp, #32]
    u32_t to_write = MIN(len-written, SPIFFS_DATA_PAGE_SIZE(fs) - page_offs);
   d7354:	9109      	str	r1, [sp, #36]	; 0x24
    if (page_offs == 0) {
   d7356:	2b00      	cmp	r3, #0
   d7358:	f040 811e 	bne.w	d7598 <spiffs_object_append+0x524>
      p_hdr.flags = 0xff & ~(SPIFFS_PH_FLAG_FINAL);  // finalize immediately
   d735c:	23fd      	movs	r3, #253	; 0xfd
   d735e:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
      res = spiffs_page_allocate_data(fs, fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG,
   d7362:	ab0d      	add	r3, sp, #52	; 0x34
   d7364:	9303      	str	r3, [sp, #12]
   d7366:	2301      	movs	r3, #1
   d7368:	9302      	str	r3, [sp, #8]
   d736a:	9b08      	ldr	r3, [sp, #32]
   d736c:	9301      	str	r3, [sp, #4]
   d736e:	9b09      	ldr	r3, [sp, #36]	; 0x24
      p_hdr.obj_id = fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG;
   d7370:	88e9      	ldrh	r1, [r5, #6]
      res = spiffs_page_allocate_data(fs, fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG,
   d7372:	9300      	str	r3, [sp, #0]
   d7374:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      p_hdr.span_ix = data_spix;
   d7376:	f8ad 903a 	strh.w	r9, [sp, #58]	; 0x3a
      p_hdr.obj_id = fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG;
   d737a:	f3c1 010e 	ubfx	r1, r1, #0, #15
      res = spiffs_page_allocate_data(fs, fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG,
   d737e:	4443      	add	r3, r8
   d7380:	aa0e      	add	r2, sp, #56	; 0x38
   d7382:	4630      	mov	r0, r6
      p_hdr.obj_id = fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG;
   d7384:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
      res = spiffs_page_allocate_data(fs, fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG,
   d7388:	f7ff fa14 	bl	d67b4 <spiffs_page_allocate_data>
      SPIFFS_DBG("append: "_SPIPRIid" store new data page, "_SPIPRIpg":"_SPIPRIsp" offset:"_SPIPRIi", len "_SPIPRIi", written "_SPIPRIi"\n", fd->obj_id,
   d738c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d738e:	9301      	str	r3, [sp, #4]
      res = spiffs_page_allocate_data(fs, fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG,
   d7390:	4604      	mov	r4, r0
      SPIFFS_DBG("append: "_SPIPRIid" store new data page, "_SPIPRIpg":"_SPIPRIsp" offset:"_SPIPRIi", len "_SPIPRIi", written "_SPIPRIi"\n", fd->obj_id,
   d7392:	9b08      	ldr	r3, [sp, #32]
   d7394:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   d7398:	88e9      	ldrh	r1, [r5, #6]
   d739a:	489a      	ldr	r0, [pc, #616]	; (d7604 <spiffs_object_append+0x590>)
   d739c:	9300      	str	r3, [sp, #0]
   d739e:	f8cd 8008 	str.w	r8, [sp, #8]
   d73a2:	464b      	mov	r3, r9
      SPIFFS_DBG("append: "_SPIPRIid" store to existing data page, "_SPIPRIpg":"_SPIPRIsp" offset:"_SPIPRIi", len "_SPIPRIi", written "_SPIPRIi"\n", fd->obj_id
   d73a4:	f009 fb10 	bl	e09c8 <spiffsParticleInfoLog>
    if (res != SPIFFS_OK) break;
   d73a8:	2c00      	cmp	r4, #0
   d73aa:	f47f ae98 	bne.w	d70de <spiffs_object_append+0x6a>
    if (cur_objix_spix == 0) {
   d73ae:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   d73b2:	2f00      	cmp	r7, #0
   d73b4:	f040 814d 	bne.w	d7652 <spiffs_object_append+0x5de>
      ((spiffs_page_ix*)((u8_t *)objix_hdr + sizeof(spiffs_page_object_ix_header)))[data_spix] = data_page;
   d73b8:	9b07      	ldr	r3, [sp, #28]
      SPIFFS_DBG("append: "_SPIPRIid" wrote page "_SPIPRIpg" to objix_hdr entry "_SPIPRIsp" in mem\n", fd->obj_id
   d73ba:	4893      	ldr	r0, [pc, #588]	; (d7608 <spiffs_object_append+0x594>)
      ((spiffs_page_ix*)((u8_t *)objix_hdr + sizeof(spiffs_page_object_ix_header)))[data_spix] = data_page;
   d73bc:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   d73c0:	f8a3 202d 	strh.w	r2, [r3, #45]	; 0x2d
      SPIFFS_DBG("append: "_SPIPRIid" wrote page "_SPIPRIpg" to objix_hdr entry "_SPIPRIsp" in mem\n", fd->obj_id
   d73c4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   d73c8:	88e9      	ldrh	r1, [r5, #6]
   d73ca:	464b      	mov	r3, r9
   d73cc:	f009 fafc 	bl	e09c8 <spiffsParticleInfoLog>
      objix_hdr->size = offset+written;
   d73d0:	9a07      	ldr	r2, [sp, #28]
   d73d2:	eb0b 0308 	add.w	r3, fp, r8
   d73d6:	6093      	str	r3, [r2, #8]
    written += to_write;
   d73d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    data_spix++;
   d73da:	f109 0901 	add.w	r9, r9, #1
    written += to_write;
   d73de:	4498      	add	r8, r3
    page_offs = 0;
   d73e0:	2300      	movs	r3, #0
    data_spix++;
   d73e2:	fa1f f989 	uxth.w	r9, r9
    page_offs = 0;
   d73e6:	9308      	str	r3, [sp, #32]
  while (res == SPIFFS_OK && written < len) {
   d73e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d73ea:	4598      	cmp	r8, r3
   d73ec:	f4bf ae77 	bcs.w	d70de <spiffs_object_append+0x6a>
    cur_objix_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, data_spix);
   d73f0:	69f3      	ldr	r3, [r6, #28]
   d73f2:	f1a3 022d 	sub.w	r2, r3, #45	; 0x2d
   d73f6:	ebb9 0f52 	cmp.w	r9, r2, lsr #1
   d73fa:	ea4f 0752 	mov.w	r7, r2, lsr #1
   d73fe:	bf21      	itttt	cs
   d7400:	eba9 0707 	subcs.w	r7, r9, r7
   d7404:	3b08      	subcs	r3, #8
   d7406:	085b      	lsrcs	r3, r3, #1
   d7408:	fbb7 f7f3 	udivcs	r7, r7, r3
   d740c:	bf26      	itte	cs
   d740e:	3701      	addcs	r7, #1
   d7410:	b2bf      	uxthcs	r7, r7
   d7412:	2700      	movcc	r7, #0
    if (cur_objix_spix != prev_objix_spix) {
   d7414:	45ba      	cmp	sl, r7
   d7416:	d092      	beq.n	d733e <spiffs_object_append+0x2ca>
      if (written > 0) {
   d7418:	f1b8 0f00 	cmp.w	r8, #0
   d741c:	d034      	beq.n	d7488 <spiffs_object_append+0x414>
        SPIFFS_DBG("append: "_SPIPRIid" store objix "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", fd->obj_id,
   d741e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   d7422:	88e9      	ldrh	r1, [r5, #6]
   d7424:	4879      	ldr	r0, [pc, #484]	; (d760c <spiffs_object_append+0x598>)
   d7426:	f8cd 8000 	str.w	r8, [sp]
   d742a:	4653      	mov	r3, sl
   d742c:	f009 facc 	bl	e09c8 <spiffsParticleInfoLog>
        if (prev_objix_spix == 0) {
   d7430:	f1ba 0f00 	cmp.w	sl, #0
   d7434:	f47f aed1 	bne.w	d71da <spiffs_object_append+0x166>
          objix_hdr->size = offset+written;
   d7438:	9a07      	ldr	r2, [sp, #28]
   d743a:	eb0b 0308 	add.w	r3, fp, r8
   d743e:	6093      	str	r3, [r2, #8]
          if (offset == 0) {
   d7440:	f1bb 0f00 	cmp.w	fp, #0
   d7444:	f47f aeaf 	bne.w	d71a6 <spiffs_object_append+0x132>
            res = spiffs_page_index_check(fs, fd, cur_objix_pix, 0);
   d7448:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   d744c:	465b      	mov	r3, fp
   d744e:	4629      	mov	r1, r5
   d7450:	4630      	mov	r0, r6
   d7452:	f7fe fc7f 	bl	d5d54 <spiffs_page_index_check>
            SPIFFS_CHECK_RES(res);
   d7456:	1e04      	subs	r4, r0, #0
   d7458:	f6ff aea1 	blt.w	d719e <spiffs_object_append+0x12a>
            res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_UPDT,
   d745c:	69f2      	ldr	r2, [r6, #28]
   d745e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
   d7462:	6933      	ldr	r3, [r6, #16]
   d7464:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   d7466:	fb02 3301 	mla	r3, r2, r1, r3
   d746a:	e9cd 2000 	strd	r2, r0, [sp]
   d746e:	2106      	movs	r1, #6
   d7470:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
   d7474:	4630      	mov	r0, r6
   d7476:	f7fc ff63 	bl	d4340 <spiffs_phys_wr>
            SPIFFS_CHECK_RES(res);
   d747a:	1e04      	subs	r4, r0, #0
   d747c:	f6ff ae8f 	blt.w	d719e <spiffs_object_append+0x12a>
        fd->size = offset+written;
   d7480:	eb0b 0308 	add.w	r3, fp, r8
   d7484:	60ab      	str	r3, [r5, #8]
        fd->offset = offset+written;
   d7486:	616b      	str	r3, [r5, #20]
      if (cur_objix_spix == 0) {
   d7488:	88e9      	ldrh	r1, [r5, #6]
   d748a:	2f00      	cmp	r7, #0
   d748c:	f47f aefa 	bne.w	d7284 <spiffs_object_append+0x210>
        SPIFFS_DBG("append: "_SPIPRIid" load objixhdr page "_SPIPRIpg":"_SPIPRIsp"\n", fd->obj_id, cur_objix_pix, cur_objix_spix);
   d7490:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   d7494:	485e      	ldr	r0, [pc, #376]	; (d7610 <spiffs_object_append+0x59c>)
   d7496:	463b      	mov	r3, r7
   d7498:	f009 fa96 	bl	e09c8 <spiffsParticleInfoLog>
        res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ,
   d749c:	69f2      	ldr	r2, [r6, #28]
   d749e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
   d74a2:	6933      	ldr	r3, [r6, #16]
   d74a4:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   d74a6:	fb02 3301 	mla	r3, r2, r1, r3
   d74aa:	e9cd 2000 	strd	r2, r0, [sp]
   d74ae:	2116      	movs	r1, #22
   d74b0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
   d74b4:	4630      	mov	r0, r6
   d74b6:	f7fc feb7 	bl	d4228 <spiffs_phys_rd>
        SPIFFS_CHECK_RES(res);
   d74ba:	1e04      	subs	r4, r0, #0
   d74bc:	f6ff ae6f 	blt.w	d719e <spiffs_object_append+0x12a>
        SPIFFS_VALIDATE_OBJIX(objix_hdr->p_hdr, fd->obj_id, cur_objix_spix);
   d74c0:	9b07      	ldr	r3, [sp, #28]
   d74c2:	791b      	ldrb	r3, [r3, #4]
   d74c4:	07d8      	lsls	r0, r3, #31
   d74c6:	f100 8148 	bmi.w	d775a <spiffs_object_append+0x6e6>
   d74ca:	0619      	lsls	r1, r3, #24
   d74cc:	f140 8147 	bpl.w	d775e <spiffs_object_append+0x6ea>
   d74d0:	079a      	lsls	r2, r3, #30
   d74d2:	f100 8146 	bmi.w	d7762 <spiffs_object_append+0x6ee>
   d74d6:	075c      	lsls	r4, r3, #29
   d74d8:	f100 8145 	bmi.w	d7766 <spiffs_object_append+0x6f2>
   d74dc:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d74e0:	2b00      	cmp	r3, #0
   d74e2:	f280 8140 	bge.w	d7766 <spiffs_object_append+0x6f2>
   d74e6:	9b07      	ldr	r3, [sp, #28]
   d74e8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   d74ec:	f1ba 0f00 	cmp.w	sl, #0
   d74f0:	f43f af25 	beq.w	d733e <spiffs_object_append+0x2ca>
   d74f4:	4c47      	ldr	r4, [pc, #284]	; (d7614 <spiffs_object_append+0x5a0>)
   d74f6:	e652      	b.n	d719e <spiffs_object_append+0x12a>
          SPIFFS_DBG("append: "_SPIPRIid" find objix span_ix:"_SPIPRIsp"\n", fd->obj_id, cur_objix_spix);
   d74f8:	4847      	ldr	r0, [pc, #284]	; (d7618 <spiffs_object_append+0x5a4>)
   d74fa:	463a      	mov	r2, r7
   d74fc:	f009 fa64 	bl	e09c8 <spiffsParticleInfoLog>
          if (fd->cursor_objix_spix == cur_objix_spix) {
   d7500:	8a2b      	ldrh	r3, [r5, #16]
   d7502:	42bb      	cmp	r3, r7
   d7504:	d137      	bne.n	d7576 <spiffs_object_append+0x502>
            pix = fd->cursor_objix_pix;
   d7506:	89eb      	ldrh	r3, [r5, #14]
   d7508:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
          SPIFFS_DBG("append: "_SPIPRIid" found object index at page "_SPIPRIpg" [fd size "_SPIPRIi"]\n", fd->obj_id, pix, fd->size);
   d750c:	68ab      	ldr	r3, [r5, #8]
   d750e:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   d7512:	88e9      	ldrh	r1, [r5, #6]
   d7514:	4841      	ldr	r0, [pc, #260]	; (d761c <spiffs_object_append+0x5a8>)
   d7516:	f009 fa57 	bl	e09c8 <spiffsParticleInfoLog>
          res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ,
   d751a:	69f2      	ldr	r2, [r6, #28]
   d751c:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
   d7520:	6933      	ldr	r3, [r6, #16]
   d7522:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   d7524:	fb02 3301 	mla	r3, r2, r1, r3
   d7528:	e9cd 2000 	strd	r2, r0, [sp]
   d752c:	2116      	movs	r1, #22
   d752e:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
   d7532:	4630      	mov	r0, r6
   d7534:	f7fc fe78 	bl	d4228 <spiffs_phys_rd>
          SPIFFS_CHECK_RES(res);
   d7538:	1e04      	subs	r4, r0, #0
   d753a:	f6ff ae30 	blt.w	d719e <spiffs_object_append+0x12a>
          SPIFFS_VALIDATE_OBJIX(objix_hdr->p_hdr, fd->obj_id, cur_objix_spix);
   d753e:	9b07      	ldr	r3, [sp, #28]
   d7540:	791b      	ldrb	r3, [r3, #4]
   d7542:	07d8      	lsls	r0, r3, #31
   d7544:	f100 8109 	bmi.w	d775a <spiffs_object_append+0x6e6>
   d7548:	0619      	lsls	r1, r3, #24
   d754a:	f140 8108 	bpl.w	d775e <spiffs_object_append+0x6ea>
   d754e:	079a      	lsls	r2, r3, #30
   d7550:	f100 8107 	bmi.w	d7762 <spiffs_object_append+0x6ee>
   d7554:	075b      	lsls	r3, r3, #29
   d7556:	f100 8106 	bmi.w	d7766 <spiffs_object_append+0x6f2>
   d755a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d755e:	2b00      	cmp	r3, #0
   d7560:	f280 8101 	bge.w	d7766 <spiffs_object_append+0x6f2>
   d7564:	9b07      	ldr	r3, [sp, #28]
   d7566:	885b      	ldrh	r3, [r3, #2]
   d7568:	42bb      	cmp	r3, r7
   d756a:	d1c3      	bne.n	d74f4 <spiffs_object_append+0x480>
          cur_objix_pix = pix;
   d756c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   d7570:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
   d7574:	e6da      	b.n	d732c <spiffs_object_append+0x2b8>
            res = spiffs_obj_lu_find_id_and_span(fs, fd->obj_id | SPIFFS_OBJ_ID_IX_FLAG, cur_objix_spix, 0, &pix);
   d7576:	88e9      	ldrh	r1, [r5, #6]
   d7578:	ea6f 4141 	mvn.w	r1, r1, lsl #17
   d757c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   d7580:	ea6f 4151 	mvn.w	r1, r1, lsr #17
   d7584:	9300      	str	r3, [sp, #0]
   d7586:	463a      	mov	r2, r7
   d7588:	4643      	mov	r3, r8
   d758a:	b289      	uxth	r1, r1
   d758c:	4630      	mov	r0, r6
   d758e:	f7ff f8cd 	bl	d672c <spiffs_obj_lu_find_id_and_span>
            SPIFFS_CHECK_RES(res);
   d7592:	1e04      	subs	r4, r0, #0
   d7594:	daba      	bge.n	d750c <spiffs_object_append+0x498>
   d7596:	e602      	b.n	d719e <spiffs_object_append+0x12a>
      if (cur_objix_spix == 0) {
   d7598:	2f00      	cmp	r7, #0
   d759a:	d143      	bne.n	d7624 <spiffs_object_append+0x5b0>
        data_page = ((spiffs_page_ix*)((u8_t *)objix_hdr + sizeof(spiffs_page_object_ix_header)))[data_spix];
   d759c:	9b07      	ldr	r3, [sp, #28]
   d759e:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   d75a2:	f8b3 302d 	ldrh.w	r3, [r3, #45]	; 0x2d
        data_page = ((spiffs_page_ix*)((u8_t *)objix + sizeof(spiffs_page_object_ix)))[SPIFFS_OBJ_IX_ENTRY(fs, data_spix)];
   d75a6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
      res = spiffs_page_data_check(fs, fd, data_page, data_spix);
   d75aa:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   d75ae:	464b      	mov	r3, r9
   d75b0:	1d29      	adds	r1, r5, #4
   d75b2:	4630      	mov	r0, r6
   d75b4:	f7fe fcf4 	bl	d5fa0 <spiffs_page_data_check.isra.0>
      SPIFFS_CHECK_RES(res);
   d75b8:	1e04      	subs	r4, r0, #0
   d75ba:	f6ff adf0 	blt.w	d719e <spiffs_object_append+0x12a>
      res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
   d75be:	6932      	ldr	r2, [r6, #16]
   d75c0:	69f1      	ldr	r1, [r6, #28]
   d75c2:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   d75c6:	3205      	adds	r2, #5
   d75c8:	fb01 2303 	mla	r3, r1, r3, r2
   d75cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d75ce:	4442      	add	r2, r8
   d75d0:	9201      	str	r2, [sp, #4]
   d75d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d75d4:	9200      	str	r2, [sp, #0]
   d75d6:	9a08      	ldr	r2, [sp, #32]
   d75d8:	2107      	movs	r1, #7
   d75da:	4413      	add	r3, r2
   d75dc:	4630      	mov	r0, r6
   d75de:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
   d75e2:	f7fc fead 	bl	d4340 <spiffs_phys_wr>
      SPIFFS_DBG("append: "_SPIPRIid" store to existing data page, "_SPIPRIpg":"_SPIPRIsp" offset:"_SPIPRIi", len "_SPIPRIi", written "_SPIPRIi"\n", fd->obj_id
   d75e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d75e8:	9301      	str	r3, [sp, #4]
   d75ea:	9b08      	ldr	r3, [sp, #32]
   d75ec:	9300      	str	r3, [sp, #0]
      res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
   d75ee:	4604      	mov	r4, r0
      SPIFFS_DBG("append: "_SPIPRIid" store to existing data page, "_SPIPRIpg":"_SPIPRIsp" offset:"_SPIPRIi", len "_SPIPRIi", written "_SPIPRIi"\n", fd->obj_id
   d75f0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   d75f4:	88e9      	ldrh	r1, [r5, #6]
   d75f6:	480a      	ldr	r0, [pc, #40]	; (d7620 <spiffs_object_append+0x5ac>)
   d75f8:	f8cd 8008 	str.w	r8, [sp, #8]
   d75fc:	464b      	mov	r3, r9
   d75fe:	e6d1      	b.n	d73a4 <spiffs_object_append+0x330>
   d7600:	000e647e 	.word	0x000e647e
   d7604:	000e6516 	.word	0x000e6516
   d7608:	000e65b4 	.word	0x000e65b4
   d760c:	000e63a4 	.word	0x000e63a4
   d7610:	000e6453 	.word	0x000e6453
   d7614:	ffffd8e3 	.word	0xffffd8e3
   d7618:	000e64b5 	.word	0x000e64b5
   d761c:	000e64db 	.word	0x000e64db
   d7620:	000e6561 	.word	0x000e6561
        data_page = ((spiffs_page_ix*)((u8_t *)objix + sizeof(spiffs_page_object_ix)))[SPIFFS_OBJ_IX_ENTRY(fs, data_spix)];
   d7624:	f1a2 012d 	sub.w	r1, r2, #45	; 0x2d
   d7628:	ebb9 0f51 	cmp.w	r9, r1, lsr #1
   d762c:	ea4f 0351 	mov.w	r3, r1, lsr #1
   d7630:	bf21      	itttt	cs
   d7632:	3a08      	subcs	r2, #8
   d7634:	eba9 0103 	subcs.w	r1, r9, r3
   d7638:	0852      	lsrcs	r2, r2, #1
   d763a:	fbb1 f3f2 	udivcs	r3, r1, r2
   d763e:	bf2a      	itet	cs
   d7640:	fb02 1313 	mlscs	r3, r2, r3, r1
   d7644:	f109 0304 	addcc.w	r3, r9, #4
   d7648:	3304      	addcs	r3, #4
   d764a:	9a07      	ldr	r2, [sp, #28]
   d764c:	005b      	lsls	r3, r3, #1
   d764e:	5ad3      	ldrh	r3, [r2, r3]
   d7650:	e7a9      	b.n	d75a6 <spiffs_object_append+0x532>
      ((spiffs_page_ix*)((u8_t *)objix + sizeof(spiffs_page_object_ix)))[SPIFFS_OBJ_IX_ENTRY(fs, data_spix)] = data_page;
   d7652:	69f1      	ldr	r1, [r6, #28]
   d7654:	f1a1 002d 	sub.w	r0, r1, #45	; 0x2d
   d7658:	ebb9 0f50 	cmp.w	r9, r0, lsr #1
   d765c:	ea4f 0350 	mov.w	r3, r0, lsr #1
   d7660:	bf21      	itttt	cs
   d7662:	3908      	subcs	r1, #8
   d7664:	eba9 0003 	subcs.w	r0, r9, r3
   d7668:	0849      	lsrcs	r1, r1, #1
   d766a:	fbb0 f3f1 	udivcs	r3, r0, r1
   d766e:	bf2a      	itet	cs
   d7670:	fb01 0313 	mlscs	r3, r1, r3, r0
   d7674:	f109 0304 	addcc.w	r3, r9, #4
   d7678:	3304      	addcs	r3, #4
   d767a:	9907      	ldr	r1, [sp, #28]
   d767c:	005b      	lsls	r3, r3, #1
   d767e:	52ca      	strh	r2, [r1, r3]
      SPIFFS_DBG("append: "_SPIPRIid" wrote page "_SPIPRIpg" to objix entry "_SPIPRIsp" in mem\n", fd->obj_id
   d7680:	69f3      	ldr	r3, [r6, #28]
   d7682:	88e9      	ldrh	r1, [r5, #6]
   d7684:	f1a3 0c2d 	sub.w	ip, r3, #45	; 0x2d
   d7688:	ebb9 0f5c 	cmp.w	r9, ip, lsr #1
   d768c:	ea4f 005c 	mov.w	r0, ip, lsr #1
   d7690:	bf21      	itttt	cs
   d7692:	3b08      	subcs	r3, #8
   d7694:	eba9 0000 	subcs.w	r0, r9, r0
   d7698:	085b      	lsrcs	r3, r3, #1
   d769a:	fbb0 fcf3 	udivcs	ip, r0, r3
   d769e:	bf24      	itt	cs
   d76a0:	fb03 031c 	mlscs	r3, r3, ip, r0
   d76a4:	b29b      	uxthcs	r3, r3
   d76a6:	4832      	ldr	r0, [pc, #200]	; (d7770 <spiffs_object_append+0x6fc>)
   d76a8:	bf38      	it	cc
   d76aa:	464b      	movcc	r3, r9
   d76ac:	f009 f98c 	bl	e09c8 <spiffsParticleInfoLog>
   d76b0:	e692      	b.n	d73d8 <spiffs_object_append+0x364>
    if (offset == 0) {
   d76b2:	f1bb 0f00 	cmp.w	fp, #0
   d76b6:	d133      	bne.n	d7720 <spiffs_object_append+0x6ac>
      objix_hdr->size = offset+written;
   d76b8:	9b07      	ldr	r3, [sp, #28]
      SPIFFS_DBG("append: "_SPIPRIid" store fresh objix_hdr page, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", fd->obj_id
   d76ba:	482e      	ldr	r0, [pc, #184]	; (d7774 <spiffs_object_append+0x700>)
      objix_hdr->size = offset+written;
   d76bc:	f8c3 8008 	str.w	r8, [r3, #8]
      SPIFFS_DBG("append: "_SPIPRIid" store fresh objix_hdr page, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", fd->obj_id
   d76c0:	88e9      	ldrh	r1, [r5, #6]
   d76c2:	f8cd 8000 	str.w	r8, [sp]
   d76c6:	465b      	mov	r3, fp
   d76c8:	f009 f97e 	bl	e09c8 <spiffsParticleInfoLog>
      res2 = spiffs_page_index_check(fs, fd, cur_objix_pix, cur_objix_spix);
   d76cc:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   d76d0:	465b      	mov	r3, fp
   d76d2:	4629      	mov	r1, r5
   d76d4:	4630      	mov	r0, r6
   d76d6:	f7fe fb3d 	bl	d5d54 <spiffs_page_index_check>
      SPIFFS_CHECK_RES(res2);
   d76da:	2800      	cmp	r0, #0
   d76dc:	db45      	blt.n	d776a <spiffs_object_append+0x6f6>
      res2 = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_UPDT,
   d76de:	69f2      	ldr	r2, [r6, #28]
   d76e0:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
   d76e4:	6933      	ldr	r3, [r6, #16]
   d76e6:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   d76e8:	fb02 3301 	mla	r3, r2, r1, r3
   d76ec:	e9cd 2000 	strd	r2, r0, [sp]
   d76f0:	2106      	movs	r1, #6
   d76f2:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
   d76f6:	4630      	mov	r0, r6
   d76f8:	f7fc fe22 	bl	d4340 <spiffs_phys_wr>
      SPIFFS_CHECK_RES(res2);
   d76fc:	2800      	cmp	r0, #0
   d76fe:	db34      	blt.n	d776a <spiffs_object_append+0x6f6>
      spiffs_cb_object_event(fs, (spiffs_page_object_ix *)fs->work,
   d7700:	9b07      	ldr	r3, [sp, #28]
   d7702:	689b      	ldr	r3, [r3, #8]
   d7704:	9302      	str	r3, [sp, #8]
   d7706:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   d770a:	9301      	str	r3, [sp, #4]
   d770c:	9b07      	ldr	r3, [sp, #28]
   d770e:	885b      	ldrh	r3, [r3, #2]
   d7710:	9300      	str	r3, [sp, #0]
   d7712:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   d7714:	88eb      	ldrh	r3, [r5, #6]
   d7716:	2204      	movs	r2, #4
   d7718:	4630      	mov	r0, r6
   d771a:	f7ff f9f3 	bl	d6b04 <spiffs_cb_object_event>
   d771e:	e53e      	b.n	d719e <spiffs_object_append+0x12a>
      res2 = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
   d7720:	f10d 0332 	add.w	r3, sp, #50	; 0x32
   d7724:	e9cd 9303 	strd	r9, r3, [sp, #12]
   d7728:	e9cd 7701 	strd	r7, r7, [sp, #4]
   d772c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   d772e:	88ea      	ldrh	r2, [r5, #6]
   d7730:	9300      	str	r3, [sp, #0]
   d7732:	4629      	mov	r1, r5
   d7734:	89ab      	ldrh	r3, [r5, #12]
   d7736:	4630      	mov	r0, r6
   d7738:	f7ff fbb0 	bl	d6e9c <spiffs_object_update_index_hdr>
      SPIFFS_DBG("append: "_SPIPRIid" store modified objix_hdr page, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", fd->obj_id
   d773c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   d7740:	88e9      	ldrh	r1, [r5, #6]
   d7742:	f8cd 8000 	str.w	r8, [sp]
      res2 = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
   d7746:	4606      	mov	r6, r0
      SPIFFS_DBG("append: "_SPIPRIid" store modified objix_hdr page, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", fd->obj_id
   d7748:	463b      	mov	r3, r7
   d774a:	480b      	ldr	r0, [pc, #44]	; (d7778 <spiffs_object_append+0x704>)
   d774c:	f009 f93c 	bl	e09c8 <spiffsParticleInfoLog>
      SPIFFS_CHECK_RES(res2);
   d7750:	ea34 0426 	bics.w	r4, r4, r6, asr #32
   d7754:	bf28      	it	cs
   d7756:	4634      	movcs	r4, r6
   d7758:	e521      	b.n	d719e <spiffs_object_append+0x12a>
        SPIFFS_VALIDATE_OBJIX(objix_hdr->p_hdr, fd->obj_id, cur_objix_spix);
   d775a:	4c08      	ldr	r4, [pc, #32]	; (d777c <spiffs_object_append+0x708>)
   d775c:	e51f      	b.n	d719e <spiffs_object_append+0x12a>
   d775e:	4c08      	ldr	r4, [pc, #32]	; (d7780 <spiffs_object_append+0x70c>)
   d7760:	e51d      	b.n	d719e <spiffs_object_append+0x12a>
   d7762:	4c08      	ldr	r4, [pc, #32]	; (d7784 <spiffs_object_append+0x710>)
   d7764:	e51b      	b.n	d719e <spiffs_object_append+0x12a>
   d7766:	4c08      	ldr	r4, [pc, #32]	; (d7788 <spiffs_object_append+0x714>)
   d7768:	e519      	b.n	d719e <spiffs_object_append+0x12a>
   d776a:	4604      	mov	r4, r0
   d776c:	e517      	b.n	d719e <spiffs_object_append+0x12a>
   d776e:	bf00      	nop
   d7770:	000e65f1 	.word	0x000e65f1
   d7774:	000e66af 	.word	0x000e66af
   d7778:	000e66ef 	.word	0x000e66ef
   d777c:	ffffd8e4 	.word	0xffffd8e4
   d7780:	ffffd8ec 	.word	0xffffd8ec
   d7784:	ffffd8eb 	.word	0xffffd8eb
   d7788:	ffffd8ea 	.word	0xffffd8ea

000d778c <spiffs_object_modify>:
s32_t spiffs_object_modify(spiffs_fd *fd, u32_t offset, u8_t *data, u32_t len) {
   d778c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  spiffs *fs = fd->fs;
   d7790:	6805      	ldr	r5, [r0, #0]
s32_t spiffs_object_modify(spiffs_fd *fd, u32_t offset, u8_t *data, u32_t len) {
   d7792:	b091      	sub	sp, #68	; 0x44
   d7794:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
   d7798:	9109      	str	r1, [sp, #36]	; 0x24
  res = spiffs_gc_check(fs, len + SPIFFS_DATA_PAGE_SIZE(fs));
   d779a:	1f59      	subs	r1, r3, #5
   d779c:	69eb      	ldr	r3, [r5, #28]
s32_t spiffs_object_modify(spiffs_fd *fd, u32_t offset, u8_t *data, u32_t len) {
   d779e:	4606      	mov	r6, r0
  res = spiffs_gc_check(fs, len + SPIFFS_DATA_PAGE_SIZE(fs));
   d77a0:	4419      	add	r1, r3
   d77a2:	4628      	mov	r0, r5
   d77a4:	f7fd fc0a 	bl	d4fbc <spiffs_gc_check>
  SPIFFS_CHECK_RES(res);
   d77a8:	1e04      	subs	r4, r0, #0
   d77aa:	f2c0 8190 	blt.w	d7ace <spiffs_object_modify+0x342>
  spiffs_page_ix cur_objix_pix = fd->objix_hdr_pix;
   d77ae:	89b3      	ldrh	r3, [r6, #12]
   d77b0:	9307      	str	r3, [sp, #28]
  spiffs_span_ix data_spix = offset / SPIFFS_DATA_PAGE_SIZE(fs);
   d77b2:	69eb      	ldr	r3, [r5, #28]
  u32_t page_offs = offset % SPIFFS_DATA_PAGE_SIZE(fs);
   d77b4:	9909      	ldr	r1, [sp, #36]	; 0x24
  spiffs_span_ix data_spix = offset / SPIFFS_DATA_PAGE_SIZE(fs);
   d77b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  spiffs_page_object_ix_header *objix_hdr = (spiffs_page_object_ix_header *)fs->work;
   d77b8:	f8d5 a038 	ldr.w	sl, [r5, #56]	; 0x38
  spiffs_span_ix data_spix = offset / SPIFFS_DATA_PAGE_SIZE(fs);
   d77bc:	f1a3 0305 	sub.w	r3, r3, #5
  spiffs_span_ix cur_objix_spix = 0;
   d77c0:	f04f 0700 	mov.w	r7, #0
  spiffs_span_ix data_spix = offset / SPIFFS_DATA_PAGE_SIZE(fs);
   d77c4:	fbb2 f2f3 	udiv	r2, r2, r3
  u32_t page_offs = offset % SPIFFS_DATA_PAGE_SIZE(fs);
   d77c8:	fb03 1312 	mls	r3, r3, r2, r1
  spiffs_span_ix data_spix = offset / SPIFFS_DATA_PAGE_SIZE(fs);
   d77cc:	fa1f f882 	uxth.w	r8, r2
  u32_t page_offs = offset % SPIFFS_DATA_PAGE_SIZE(fs);
   d77d0:	9306      	str	r3, [sp, #24]
  spiffs_span_ix prev_objix_spix = (spiffs_span_ix)-1;
   d77d2:	f64f 7bff 	movw	fp, #65535	; 0xffff
  u32_t written = 0;
   d77d6:	46b9      	mov	r9, r7
  while (res == SPIFFS_OK && written < len) {
   d77d8:	f000 8140 	beq.w	d7a5c <spiffs_object_modify+0x2d0>
  fd->offset = offset+written;
   d77dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  fd->cursor_objix_spix = cur_objix_spix;
   d77de:	8237      	strh	r7, [r6, #16]
  fd->offset = offset+written;
   d77e0:	444b      	add	r3, r9
   d77e2:	6173      	str	r3, [r6, #20]
  fd->cursor_objix_pix = cur_objix_pix;
   d77e4:	9b07      	ldr	r3, [sp, #28]
   d77e6:	81f3      	strh	r3, [r6, #14]
  if (cur_objix_spix != 0) {
   d77e8:	2f00      	cmp	r7, #0
   d77ea:	f000 8273 	beq.w	d7cd4 <spiffs_object_modify+0x548>
    res2 = spiffs_page_index_check(fs, fd, cur_objix_pix, cur_objix_spix);
   d77ee:	9a07      	ldr	r2, [sp, #28]
   d77f0:	463b      	mov	r3, r7
   d77f2:	4631      	mov	r1, r6
   d77f4:	4628      	mov	r0, r5
   d77f6:	f7fe faad 	bl	d5d54 <spiffs_page_index_check>
    SPIFFS_CHECK_RES(res2);
   d77fa:	f1b0 0800 	subs.w	r8, r0, #0
   d77fe:	f2c0 8267 	blt.w	d7cd0 <spiffs_object_modify+0x544>
    res2 = spiffs_page_move(fs, fd->file_nbr, (u8_t*)objix, fd->obj_id, 0, cur_objix_pix, &new_objix_pix);
   d7802:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   d7806:	9302      	str	r3, [sp, #8]
   d7808:	f04f 0b00 	mov.w	fp, #0
   d780c:	9b07      	ldr	r3, [sp, #28]
   d780e:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
   d7812:	9301      	str	r3, [sp, #4]
   d7814:	4652      	mov	r2, sl
   d7816:	88f3      	ldrh	r3, [r6, #6]
   d7818:	f8cd b000 	str.w	fp, [sp]
   d781c:	4628      	mov	r0, r5
   d781e:	f7ff f8cb 	bl	d69b8 <spiffs_page_move>
    SPIFFS_DBG("modify: store modified objix page, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", new_objix_pix, cur_objix_spix, written);
   d7822:	464b      	mov	r3, r9
    res2 = spiffs_page_move(fs, fd->file_nbr, (u8_t*)objix, fd->obj_id, 0, cur_objix_pix, &new_objix_pix);
   d7824:	4680      	mov	r8, r0
    SPIFFS_DBG("modify: store modified objix page, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", new_objix_pix, cur_objix_spix, written);
   d7826:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
   d782a:	48bf      	ldr	r0, [pc, #764]	; (d7b28 <spiffs_object_modify+0x39c>)
   d782c:	463a      	mov	r2, r7
   d782e:	f009 f8cb 	bl	e09c8 <spiffsParticleInfoLog>
    fd->cursor_objix_pix = new_objix_pix;
   d7832:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   d7836:	81f3      	strh	r3, [r6, #14]
    SPIFFS_CHECK_RES(res2);
   d7838:	45d8      	cmp	r8, fp
    fd->cursor_objix_spix = cur_objix_spix;
   d783a:	8237      	strh	r7, [r6, #16]
    SPIFFS_CHECK_RES(res2);
   d783c:	f2c0 8248 	blt.w	d7cd0 <spiffs_object_modify+0x544>
    spiffs_cb_object_event(fs, (spiffs_page_object_ix *)objix,
   d7840:	e9cd 3b01 	strd	r3, fp, [sp, #4]
   d7844:	f8ba 3002 	ldrh.w	r3, [sl, #2]
   d7848:	9300      	str	r3, [sp, #0]
   d784a:	465a      	mov	r2, fp
   d784c:	88f3      	ldrh	r3, [r6, #6]
   d784e:	4651      	mov	r1, sl
   d7850:	4628      	mov	r0, r5
   d7852:	f7ff f957 	bl	d6b04 <spiffs_cb_object_event>
   d7856:	e13a      	b.n	d7ace <spiffs_object_modify+0x342>
          res = spiffs_page_index_check(fs, fd, cur_objix_pix, prev_objix_spix);
   d7858:	9a07      	ldr	r2, [sp, #28]
   d785a:	465b      	mov	r3, fp
   d785c:	4631      	mov	r1, r6
   d785e:	4628      	mov	r0, r5
   d7860:	f7fe fa78 	bl	d5d54 <spiffs_page_index_check>
          SPIFFS_CHECK_RES(res);
   d7864:	1e04      	subs	r4, r0, #0
   d7866:	f2c0 8132 	blt.w	d7ace <spiffs_object_modify+0x342>
          res = spiffs_page_move(fs, fd->file_nbr, (u8_t*)objix, fd->obj_id, 0, cur_objix_pix, &new_objix_pix);
   d786a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   d786e:	9302      	str	r3, [sp, #8]
   d7870:	f04f 0b00 	mov.w	fp, #0
   d7874:	9b07      	ldr	r3, [sp, #28]
   d7876:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
   d787a:	9301      	str	r3, [sp, #4]
   d787c:	4652      	mov	r2, sl
   d787e:	88f3      	ldrh	r3, [r6, #6]
   d7880:	f8cd b000 	str.w	fp, [sp]
   d7884:	4628      	mov	r0, r5
   d7886:	f7ff f897 	bl	d69b8 <spiffs_page_move>
          SPIFFS_DBG("modify: store previous modified objix page, "_SPIPRIid":"_SPIPRIsp", written "_SPIPRIi"\n", new_objix_pix, objix->p_hdr.span_ix, written);
   d788a:	f8ba 2002 	ldrh.w	r2, [sl, #2]
   d788e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
          res = spiffs_page_move(fs, fd->file_nbr, (u8_t*)objix, fd->obj_id, 0, cur_objix_pix, &new_objix_pix);
   d7892:	4604      	mov	r4, r0
          SPIFFS_DBG("modify: store previous modified objix page, "_SPIPRIid":"_SPIPRIsp", written "_SPIPRIi"\n", new_objix_pix, objix->p_hdr.span_ix, written);
   d7894:	464b      	mov	r3, r9
   d7896:	48a5      	ldr	r0, [pc, #660]	; (d7b2c <spiffs_object_modify+0x3a0>)
   d7898:	f009 f896 	bl	e09c8 <spiffsParticleInfoLog>
          SPIFFS_CHECK_RES(res);
   d789c:	455c      	cmp	r4, fp
   d789e:	f2c0 8116 	blt.w	d7ace <spiffs_object_modify+0x342>
          spiffs_cb_object_event(fs, (spiffs_page_object_ix *)objix,
   d78a2:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   d78a6:	f8cd b008 	str.w	fp, [sp, #8]
   d78aa:	9301      	str	r3, [sp, #4]
   d78ac:	f8ba 3002 	ldrh.w	r3, [sl, #2]
   d78b0:	9300      	str	r3, [sp, #0]
   d78b2:	465a      	mov	r2, fp
   d78b4:	88f3      	ldrh	r3, [r6, #6]
   d78b6:	4651      	mov	r1, sl
   d78b8:	4628      	mov	r0, r5
   d78ba:	f7ff f923 	bl	d6b04 <spiffs_cb_object_event>
      if (cur_objix_spix == 0) {
   d78be:	bb77      	cbnz	r7, d791e <spiffs_object_modify+0x192>
        SPIFFS_DBG("modify: load objixhdr page "_SPIPRIpg":"_SPIPRIsp"\n", cur_objix_pix, cur_objix_spix);
   d78c0:	9907      	ldr	r1, [sp, #28]
   d78c2:	489b      	ldr	r0, [pc, #620]	; (d7b30 <spiffs_object_modify+0x3a4>)
   d78c4:	463a      	mov	r2, r7
   d78c6:	f009 f87f 	bl	e09c8 <spiffsParticleInfoLog>
        res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ,
   d78ca:	69eb      	ldr	r3, [r5, #28]
   d78cc:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   d78ce:	692a      	ldr	r2, [r5, #16]
   d78d0:	e9cd 3100 	strd	r3, r1, [sp]
   d78d4:	9907      	ldr	r1, [sp, #28]
   d78d6:	4628      	mov	r0, r5
   d78d8:	fb03 2301 	mla	r3, r3, r1, r2
   d78dc:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
   d78e0:	2116      	movs	r1, #22
   d78e2:	f7fc fca1 	bl	d4228 <spiffs_phys_rd>
        SPIFFS_CHECK_RES(res);
   d78e6:	1e04      	subs	r4, r0, #0
   d78e8:	f2c0 80f1 	blt.w	d7ace <spiffs_object_modify+0x342>
        SPIFFS_VALIDATE_OBJIX(objix_hdr->p_hdr, fd->obj_id, cur_objix_spix);
   d78ec:	f89a 3004 	ldrb.w	r3, [sl, #4]
   d78f0:	07d8      	lsls	r0, r3, #31
   d78f2:	f100 820a 	bmi.w	d7d0a <spiffs_object_modify+0x57e>
   d78f6:	0619      	lsls	r1, r3, #24
   d78f8:	f140 8209 	bpl.w	d7d0e <spiffs_object_modify+0x582>
   d78fc:	079a      	lsls	r2, r3, #30
   d78fe:	f100 8208 	bmi.w	d7d12 <spiffs_object_modify+0x586>
   d7902:	075c      	lsls	r4, r3, #29
   d7904:	f100 8207 	bmi.w	d7d16 <spiffs_object_modify+0x58a>
   d7908:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
   d790c:	2b00      	cmp	r3, #0
   d790e:	f280 8202 	bge.w	d7d16 <spiffs_object_modify+0x58a>
   d7912:	f8ba 3002 	ldrh.w	r3, [sl, #2]
   d7916:	2b00      	cmp	r3, #0
   d7918:	d03d      	beq.n	d7996 <spiffs_object_modify+0x20a>
   d791a:	4c86      	ldr	r4, [pc, #536]	; (d7b34 <spiffs_object_modify+0x3a8>)
   d791c:	e0d7      	b.n	d7ace <spiffs_object_modify+0x342>
        SPIFFS_DBG("modify: find objix span_ix:"_SPIPRIsp"\n", cur_objix_spix);
   d791e:	4886      	ldr	r0, [pc, #536]	; (d7b38 <spiffs_object_modify+0x3ac>)
   d7920:	4639      	mov	r1, r7
   d7922:	f009 f851 	bl	e09c8 <spiffsParticleInfoLog>
        if (fd->cursor_objix_spix == cur_objix_spix) {
   d7926:	8a33      	ldrh	r3, [r6, #16]
   d7928:	42bb      	cmp	r3, r7
   d792a:	f040 80d4 	bne.w	d7ad6 <spiffs_object_modify+0x34a>
          pix = fd->cursor_objix_pix;
   d792e:	89f3      	ldrh	r3, [r6, #14]
   d7930:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        SPIFFS_DBG("modify: found object index at page "_SPIPRIpg"\n", pix);
   d7934:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
   d7938:	4880      	ldr	r0, [pc, #512]	; (d7b3c <spiffs_object_modify+0x3b0>)
   d793a:	f009 f845 	bl	e09c8 <spiffsParticleInfoLog>
        res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ,
   d793e:	69ea      	ldr	r2, [r5, #28]
   d7940:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
   d7944:	692b      	ldr	r3, [r5, #16]
   d7946:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   d7948:	fb02 3301 	mla	r3, r2, r1, r3
   d794c:	e9cd 2000 	strd	r2, r0, [sp]
   d7950:	2116      	movs	r1, #22
   d7952:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
   d7956:	4628      	mov	r0, r5
   d7958:	f7fc fc66 	bl	d4228 <spiffs_phys_rd>
        SPIFFS_CHECK_RES(res);
   d795c:	1e04      	subs	r4, r0, #0
   d795e:	f2c0 80b6 	blt.w	d7ace <spiffs_object_modify+0x342>
        SPIFFS_VALIDATE_OBJIX(objix_hdr->p_hdr, fd->obj_id, cur_objix_spix);
   d7962:	f89a 3004 	ldrb.w	r3, [sl, #4]
   d7966:	07d8      	lsls	r0, r3, #31
   d7968:	f100 81cf 	bmi.w	d7d0a <spiffs_object_modify+0x57e>
   d796c:	0619      	lsls	r1, r3, #24
   d796e:	f140 81ce 	bpl.w	d7d0e <spiffs_object_modify+0x582>
   d7972:	079a      	lsls	r2, r3, #30
   d7974:	f100 81cd 	bmi.w	d7d12 <spiffs_object_modify+0x586>
   d7978:	075b      	lsls	r3, r3, #29
   d797a:	f100 81cc 	bmi.w	d7d16 <spiffs_object_modify+0x58a>
   d797e:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
   d7982:	2b00      	cmp	r3, #0
   d7984:	f280 81c7 	bge.w	d7d16 <spiffs_object_modify+0x58a>
   d7988:	f8ba 3002 	ldrh.w	r3, [sl, #2]
   d798c:	42bb      	cmp	r3, r7
   d798e:	d1c4      	bne.n	d791a <spiffs_object_modify+0x18e>
        cur_objix_pix = pix;
   d7990:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   d7994:	9307      	str	r3, [sp, #28]
      fd->cursor_objix_pix = cur_objix_pix;
   d7996:	9b07      	ldr	r3, [sp, #28]
   d7998:	81f3      	strh	r3, [r6, #14]
      fd->offset = offset+written;
   d799a:	9b09      	ldr	r3, [sp, #36]	; 0x24
      fd->cursor_objix_spix = cur_objix_spix;
   d799c:	8237      	strh	r7, [r6, #16]
      fd->offset = offset+written;
   d799e:	444b      	add	r3, r9
   d79a0:	6173      	str	r3, [r6, #20]
    u32_t to_write = MIN(len-written, SPIFFS_DATA_PAGE_SIZE(fs) - page_offs);
   d79a2:	69e9      	ldr	r1, [r5, #28]
   d79a4:	9b06      	ldr	r3, [sp, #24]
   d79a6:	1f4a      	subs	r2, r1, #5
   d79a8:	1ad0      	subs	r0, r2, r3
   d79aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d79ac:	eba3 0309 	sub.w	r3, r3, r9
   d79b0:	4298      	cmp	r0, r3
   d79b2:	bf28      	it	cs
   d79b4:	4618      	movcs	r0, r3
   d79b6:	9008      	str	r0, [sp, #32]
    if (cur_objix_spix == 0) {
   d79b8:	2f00      	cmp	r7, #0
   d79ba:	f040 809e 	bne.w	d7afa <spiffs_object_modify+0x36e>
      orig_data_pix = ((spiffs_page_ix*)((u8_t *)objix_hdr + sizeof(spiffs_page_object_ix_header)))[data_spix];
   d79be:	eb0a 0348 	add.w	r3, sl, r8, lsl #1
   d79c2:	f8b3 b02d 	ldrh.w	fp, [r3, #45]	; 0x2d
    p_hdr.obj_id = fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG;
   d79c6:	88f1      	ldrh	r1, [r6, #6]
    p_hdr.span_ix = data_spix;
   d79c8:	f8ad 803a 	strh.w	r8, [sp, #58]	; 0x3a
    p_hdr.flags = 0xff;
   d79cc:	23ff      	movs	r3, #255	; 0xff
   d79ce:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
    if (page_offs == 0 && to_write == SPIFFS_DATA_PAGE_SIZE(fs)) {
   d79d2:	9b06      	ldr	r3, [sp, #24]
    p_hdr.obj_id = fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG;
   d79d4:	f3c1 010e 	ubfx	r1, r1, #0, #15
   d79d8:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
    if (page_offs == 0 && to_write == SPIFFS_DATA_PAGE_SIZE(fs)) {
   d79dc:	2b00      	cmp	r3, #0
   d79de:	f040 80b5 	bne.w	d7b4c <spiffs_object_modify+0x3c0>
   d79e2:	9b08      	ldr	r3, [sp, #32]
   d79e4:	429a      	cmp	r2, r3
   d79e6:	f040 80b1 	bne.w	d7b4c <spiffs_object_modify+0x3c0>
      res = spiffs_page_allocate_data(fs, fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG,
   d79ea:	ab0d      	add	r3, sp, #52	; 0x34
   d79ec:	9303      	str	r3, [sp, #12]
   d79ee:	2301      	movs	r3, #1
   d79f0:	9302      	str	r3, [sp, #8]
   d79f2:	9b06      	ldr	r3, [sp, #24]
   d79f4:	9301      	str	r3, [sp, #4]
   d79f6:	9b08      	ldr	r3, [sp, #32]
   d79f8:	9300      	str	r3, [sp, #0]
   d79fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d79fc:	aa0e      	add	r2, sp, #56	; 0x38
   d79fe:	444b      	add	r3, r9
   d7a00:	4628      	mov	r0, r5
   d7a02:	f7fe fed7 	bl	d67b4 <spiffs_page_allocate_data>
      SPIFFS_DBG("modify: store new data page, "_SPIPRIpg":"_SPIPRIsp" offset:"_SPIPRIi", len "_SPIPRIi", written "_SPIPRIi"\n", data_pix, data_spix, page_offs, to_write, written);
   d7a06:	9b08      	ldr	r3, [sp, #32]
   d7a08:	9300      	str	r3, [sp, #0]
   d7a0a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
   d7a0e:	9b06      	ldr	r3, [sp, #24]
   d7a10:	484b      	ldr	r0, [pc, #300]	; (d7b40 <spiffs_object_modify+0x3b4>)
   d7a12:	f8cd 9004 	str.w	r9, [sp, #4]
   d7a16:	4642      	mov	r2, r8
   d7a18:	f008 ffd6 	bl	e09c8 <spiffsParticleInfoLog>
    res = spiffs_page_delete(fs, orig_data_pix);
   d7a1c:	4659      	mov	r1, fp
   d7a1e:	4628      	mov	r0, r5
   d7a20:	f7fe ff85 	bl	d692e <spiffs_page_delete>
    if (res != SPIFFS_OK) break;
   d7a24:	4604      	mov	r4, r0
   d7a26:	2800      	cmp	r0, #0
   d7a28:	f47f aed8 	bne.w	d77dc <spiffs_object_modify+0x50>
    if (cur_objix_spix == 0) {
   d7a2c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
   d7a30:	2f00      	cmp	r7, #0
   d7a32:	f040 8120 	bne.w	d7c76 <spiffs_object_modify+0x4ea>
      ((spiffs_page_ix*)((u8_t *)objix_hdr + sizeof(spiffs_page_object_ix_header)))[data_spix] = data_pix;
   d7a36:	eb0a 0348 	add.w	r3, sl, r8, lsl #1
      SPIFFS_DBG("modify: wrote page "_SPIPRIpg" to objix_hdr entry "_SPIPRIsp" in mem\n", data_pix, data_spix);
   d7a3a:	4842      	ldr	r0, [pc, #264]	; (d7b44 <spiffs_object_modify+0x3b8>)
      ((spiffs_page_ix*)((u8_t *)objix_hdr + sizeof(spiffs_page_object_ix_header)))[data_spix] = data_pix;
   d7a3c:	f8a3 102d 	strh.w	r1, [r3, #45]	; 0x2d
      SPIFFS_DBG("modify: wrote page "_SPIPRIpg" to objix_hdr entry "_SPIPRIsp" in mem\n", data_pix, data_spix);
   d7a40:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
   d7a44:	4642      	mov	r2, r8
      SPIFFS_DBG("modify: wrote page "_SPIPRIpg" to objix entry "_SPIPRIsp" in mem\n", data_pix, (spiffs_span_ix)SPIFFS_OBJ_IX_ENTRY(fs, data_spix));
   d7a46:	f008 ffbf 	bl	e09c8 <spiffsParticleInfoLog>
    written += to_write;
   d7a4a:	9b08      	ldr	r3, [sp, #32]
    data_spix++;
   d7a4c:	f108 0801 	add.w	r8, r8, #1
    written += to_write;
   d7a50:	4499      	add	r9, r3
    page_offs = 0;
   d7a52:	2300      	movs	r3, #0
    data_spix++;
   d7a54:	fa1f f888 	uxth.w	r8, r8
    written += to_write;
   d7a58:	46bb      	mov	fp, r7
    page_offs = 0;
   d7a5a:	9306      	str	r3, [sp, #24]
  while (res == SPIFFS_OK && written < len) {
   d7a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7a5e:	4599      	cmp	r9, r3
   d7a60:	f4bf aebc 	bcs.w	d77dc <spiffs_object_modify+0x50>
    cur_objix_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, data_spix);
   d7a64:	69eb      	ldr	r3, [r5, #28]
   d7a66:	f1a3 022d 	sub.w	r2, r3, #45	; 0x2d
   d7a6a:	ebb8 0f52 	cmp.w	r8, r2, lsr #1
   d7a6e:	ea4f 0752 	mov.w	r7, r2, lsr #1
   d7a72:	bf21      	itttt	cs
   d7a74:	eba8 0707 	subcs.w	r7, r8, r7
   d7a78:	3b08      	subcs	r3, #8
   d7a7a:	085b      	lsrcs	r3, r3, #1
   d7a7c:	fbb7 f7f3 	udivcs	r7, r7, r3
   d7a80:	bf26      	itte	cs
   d7a82:	3701      	addcs	r7, #1
   d7a84:	b2bf      	uxthcs	r7, r7
   d7a86:	2700      	movcc	r7, #0
    if (cur_objix_spix != prev_objix_spix) {
   d7a88:	45bb      	cmp	fp, r7
   d7a8a:	d08a      	beq.n	d79a2 <spiffs_object_modify+0x216>
      if (written > 0) {
   d7a8c:	f1b9 0f00 	cmp.w	r9, #0
   d7a90:	f43f af15 	beq.w	d78be <spiffs_object_modify+0x132>
        if (prev_objix_spix == 0) {
   d7a94:	f1bb 0f00 	cmp.w	fp, #0
   d7a98:	f47f aede 	bne.w	d7858 <spiffs_object_modify+0xcc>
          res = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
   d7a9c:	f10d 0332 	add.w	r3, sp, #50	; 0x32
   d7aa0:	e9cd b303 	strd	fp, r3, [sp, #12]
   d7aa4:	e9cd bb01 	strd	fp, fp, [sp, #4]
   d7aa8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7aaa:	88f2      	ldrh	r2, [r6, #6]
   d7aac:	9300      	str	r3, [sp, #0]
   d7aae:	4631      	mov	r1, r6
   d7ab0:	89b3      	ldrh	r3, [r6, #12]
   d7ab2:	4628      	mov	r0, r5
   d7ab4:	f7ff f9f2 	bl	d6e9c <spiffs_object_update_index_hdr>
          SPIFFS_DBG("modify: store modified objix_hdr page, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", new_objix_hdr_pix, 0, written);
   d7ab8:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
          res = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
   d7abc:	4604      	mov	r4, r0
          SPIFFS_DBG("modify: store modified objix_hdr page, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", new_objix_hdr_pix, 0, written);
   d7abe:	464b      	mov	r3, r9
   d7ac0:	4821      	ldr	r0, [pc, #132]	; (d7b48 <spiffs_object_modify+0x3bc>)
   d7ac2:	465a      	mov	r2, fp
   d7ac4:	f008 ff80 	bl	e09c8 <spiffsParticleInfoLog>
          SPIFFS_CHECK_RES(res);
   d7ac8:	2c00      	cmp	r4, #0
   d7aca:	f6bf aef8 	bge.w	d78be <spiffs_object_modify+0x132>
} // spiffs_object_modify
   d7ace:	4620      	mov	r0, r4
   d7ad0:	b011      	add	sp, #68	; 0x44
   d7ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          res = spiffs_obj_lu_find_id_and_span(fs, fd->obj_id | SPIFFS_OBJ_ID_IX_FLAG, cur_objix_spix, 0, &pix);
   d7ad6:	88f1      	ldrh	r1, [r6, #6]
   d7ad8:	ea6f 4141 	mvn.w	r1, r1, lsl #17
   d7adc:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   d7ae0:	ea6f 4151 	mvn.w	r1, r1, lsr #17
   d7ae4:	9300      	str	r3, [sp, #0]
   d7ae6:	463a      	mov	r2, r7
   d7ae8:	2300      	movs	r3, #0
   d7aea:	b289      	uxth	r1, r1
   d7aec:	4628      	mov	r0, r5
   d7aee:	f7fe fe1d 	bl	d672c <spiffs_obj_lu_find_id_and_span>
          SPIFFS_CHECK_RES(res);
   d7af2:	1e04      	subs	r4, r0, #0
   d7af4:	f6bf af1e 	bge.w	d7934 <spiffs_object_modify+0x1a8>
   d7af8:	e7e9      	b.n	d7ace <spiffs_object_modify+0x342>
      orig_data_pix = ((spiffs_page_ix*)((u8_t *)objix + sizeof(spiffs_page_object_ix)))[SPIFFS_OBJ_IX_ENTRY(fs, data_spix)];
   d7afa:	f1a1 002d 	sub.w	r0, r1, #45	; 0x2d
   d7afe:	ebb8 0f50 	cmp.w	r8, r0, lsr #1
   d7b02:	ea4f 0350 	mov.w	r3, r0, lsr #1
   d7b06:	bf21      	itttt	cs
   d7b08:	3908      	subcs	r1, #8
   d7b0a:	eba8 0003 	subcs.w	r0, r8, r3
   d7b0e:	0849      	lsrcs	r1, r1, #1
   d7b10:	fbb0 f3f1 	udivcs	r3, r0, r1
   d7b14:	bf2a      	itet	cs
   d7b16:	fb01 0313 	mlscs	r3, r1, r3, r0
   d7b1a:	f108 0304 	addcc.w	r3, r8, #4
   d7b1e:	3304      	addcs	r3, #4
   d7b20:	005b      	lsls	r3, r3, #1
   d7b22:	f83a b003 	ldrh.w	fp, [sl, r3]
   d7b26:	e74e      	b.n	d79c6 <spiffs_object_modify+0x23a>
   d7b28:	000e6931 	.word	0x000e6931
   d7b2c:	000e6770 	.word	0x000e6770
   d7b30:	000e67b3 	.word	0x000e67b3
   d7b34:	ffffd8e3 	.word	0xffffd8e3
   d7b38:	000e67d9 	.word	0x000e67d9
   d7b3c:	000e67fa 	.word	0x000e67fa
   d7b40:	000e6823 	.word	0x000e6823
   d7b44:	000e68c5 	.word	0x000e68c5
   d7b48:	000e6732 	.word	0x000e6732
      res = spiffs_page_data_check(fs, fd, orig_data_pix, data_spix);
   d7b4c:	4643      	mov	r3, r8
   d7b4e:	465a      	mov	r2, fp
   d7b50:	1d31      	adds	r1, r6, #4
   d7b52:	4628      	mov	r0, r5
   d7b54:	f7fe fa24 	bl	d5fa0 <spiffs_page_data_check.isra.0>
      SPIFFS_CHECK_RES(res);
   d7b58:	1e04      	subs	r4, r0, #0
   d7b5a:	dbb8      	blt.n	d7ace <spiffs_object_modify+0x342>
      res = spiffs_page_allocate_data(fs, fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG,
   d7b5c:	88f1      	ldrh	r1, [r6, #6]
   d7b5e:	ab0d      	add	r3, sp, #52	; 0x34
   d7b60:	9303      	str	r3, [sp, #12]
   d7b62:	2300      	movs	r3, #0
   d7b64:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d7b68:	9300      	str	r3, [sp, #0]
   d7b6a:	aa0e      	add	r2, sp, #56	; 0x38
   d7b6c:	f3c1 010e 	ubfx	r1, r1, #0, #15
   d7b70:	4628      	mov	r0, r5
   d7b72:	f7fe fe1f 	bl	d67b4 <spiffs_page_allocate_data>
      if (res != SPIFFS_OK) break;
   d7b76:	4604      	mov	r4, r0
   d7b78:	2800      	cmp	r0, #0
   d7b7a:	f47f ae2f 	bne.w	d77dc <spiffs_object_modify+0x50>
      if (page_offs > 0) {
   d7b7e:	9b06      	ldr	r3, [sp, #24]
   d7b80:	2b00      	cmp	r3, #0
   d7b82:	d148      	bne.n	d7c16 <spiffs_object_modify+0x48a>
      if (page_offs + to_write < SPIFFS_DATA_PAGE_SIZE(fs)) {
   d7b84:	9b06      	ldr	r3, [sp, #24]
   d7b86:	9a08      	ldr	r2, [sp, #32]
   d7b88:	69e8      	ldr	r0, [r5, #28]
   d7b8a:	189c      	adds	r4, r3, r2
   d7b8c:	f1a0 0e05 	sub.w	lr, r0, #5
   d7b90:	4574      	cmp	r4, lr
   d7b92:	d354      	bcc.n	d7c3e <spiffs_object_modify+0x4b2>
      res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
   d7b94:	692a      	ldr	r2, [r5, #16]
   d7b96:	69e9      	ldr	r1, [r5, #28]
   d7b98:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   d7b9c:	3205      	adds	r2, #5
   d7b9e:	fb01 2303 	mla	r3, r1, r3, r2
   d7ba2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d7ba4:	444a      	add	r2, r9
   d7ba6:	9201      	str	r2, [sp, #4]
   d7ba8:	9a08      	ldr	r2, [sp, #32]
   d7baa:	9200      	str	r2, [sp, #0]
   d7bac:	9a06      	ldr	r2, [sp, #24]
   d7bae:	2107      	movs	r1, #7
   d7bb0:	4413      	add	r3, r2
   d7bb2:	4628      	mov	r0, r5
   d7bb4:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
   d7bb8:	f7fc fbc2 	bl	d4340 <spiffs_phys_wr>
      if (res != SPIFFS_OK) break;
   d7bbc:	4604      	mov	r4, r0
   d7bbe:	2800      	cmp	r0, #0
   d7bc0:	f47f ae0c 	bne.w	d77dc <spiffs_object_modify+0x50>
      p_hdr.flags &= ~SPIFFS_PH_FLAG_FINAL;
   d7bc4:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
      res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
   d7bc8:	692a      	ldr	r2, [r5, #16]
   d7bca:	69e9      	ldr	r1, [r5, #28]
      p_hdr.flags &= ~SPIFFS_PH_FLAG_FINAL;
   d7bcc:	f023 0302 	bic.w	r3, r3, #2
   d7bd0:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
      res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
   d7bd4:	a80f      	add	r0, sp, #60	; 0x3c
   d7bd6:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   d7bda:	9001      	str	r0, [sp, #4]
   d7bdc:	3204      	adds	r2, #4
   d7bde:	2001      	movs	r0, #1
   d7be0:	fb01 2303 	mla	r3, r1, r3, r2
   d7be4:	9000      	str	r0, [sp, #0]
   d7be6:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
   d7bea:	2107      	movs	r1, #7
   d7bec:	4628      	mov	r0, r5
   d7bee:	f7fc fba7 	bl	d4340 <spiffs_phys_wr>
      if (res != SPIFFS_OK) break;
   d7bf2:	4604      	mov	r4, r0
   d7bf4:	2800      	cmp	r0, #0
   d7bf6:	f47f adf1 	bne.w	d77dc <spiffs_object_modify+0x50>
      SPIFFS_DBG("modify: store to existing data page, src:"_SPIPRIpg", dst:"_SPIPRIpg":"_SPIPRIsp" offset:"_SPIPRIi", len "_SPIPRIi", written "_SPIPRIi"\n", orig_data_pix, data_pix, data_spix, page_offs, to_write, written);
   d7bfa:	9b08      	ldr	r3, [sp, #32]
   d7bfc:	9301      	str	r3, [sp, #4]
   d7bfe:	9b06      	ldr	r3, [sp, #24]
   d7c00:	9300      	str	r3, [sp, #0]
   d7c02:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   d7c06:	4845      	ldr	r0, [pc, #276]	; (d7d1c <spiffs_object_modify+0x590>)
   d7c08:	f8cd 9008 	str.w	r9, [sp, #8]
   d7c0c:	4643      	mov	r3, r8
   d7c0e:	4659      	mov	r1, fp
   d7c10:	f008 feda 	bl	e09c8 <spiffsParticleInfoLog>
   d7c14:	e702      	b.n	d7a1c <spiffs_object_modify+0x290>
   d7c16:	6929      	ldr	r1, [r5, #16]
   d7c18:	69ea      	ldr	r2, [r5, #28]
        res = spiffs_phys_cpy(fs, fd->file_nbr,
   d7c1a:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
   d7c1e:	9b06      	ldr	r3, [sp, #24]
   d7c20:	9300      	str	r3, [sp, #0]
   d7c22:	3105      	adds	r1, #5
   d7c24:	fb02 130b 	mla	r3, r2, fp, r1
   d7c28:	fb02 1200 	mla	r2, r2, r0, r1
   d7c2c:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
   d7c30:	4628      	mov	r0, r5
   d7c32:	f7fe faeb 	bl	d620c <spiffs_phys_cpy>
        if (res != SPIFFS_OK) break;
   d7c36:	4604      	mov	r4, r0
   d7c38:	2800      	cmp	r0, #0
   d7c3a:	d0a3      	beq.n	d7b84 <spiffs_object_modify+0x3f8>
   d7c3c:	e5ce      	b.n	d77dc <spiffs_object_modify+0x50>
   d7c3e:	692a      	ldr	r2, [r5, #16]
        res = spiffs_phys_cpy(fs, fd->file_nbr,
   d7c40:	9b06      	ldr	r3, [sp, #24]
   d7c42:	9908      	ldr	r1, [sp, #32]
   d7c44:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
   d7c48:	3205      	adds	r2, #5
   d7c4a:	4413      	add	r3, r2
   d7c4c:	440b      	add	r3, r1
   d7c4e:	9906      	ldr	r1, [sp, #24]
   d7c50:	fb00 220c 	mla	r2, r0, ip, r2
   d7c54:	440a      	add	r2, r1
   d7c56:	ebae 0104 	sub.w	r1, lr, r4
   d7c5a:	9100      	str	r1, [sp, #0]
   d7c5c:	9908      	ldr	r1, [sp, #32]
   d7c5e:	fb00 330b 	mla	r3, r0, fp, r3
   d7c62:	440a      	add	r2, r1
   d7c64:	4628      	mov	r0, r5
   d7c66:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
   d7c6a:	f7fe facf 	bl	d620c <spiffs_phys_cpy>
        if (res != SPIFFS_OK) break;
   d7c6e:	4604      	mov	r4, r0
   d7c70:	2800      	cmp	r0, #0
   d7c72:	d08f      	beq.n	d7b94 <spiffs_object_modify+0x408>
   d7c74:	e5b2      	b.n	d77dc <spiffs_object_modify+0x50>
      ((spiffs_page_ix*)((u8_t *)objix + sizeof(spiffs_page_object_ix)))[SPIFFS_OBJ_IX_ENTRY(fs, data_spix)] = data_pix;
   d7c76:	69ea      	ldr	r2, [r5, #28]
   d7c78:	f1a2 002d 	sub.w	r0, r2, #45	; 0x2d
   d7c7c:	ebb8 0f50 	cmp.w	r8, r0, lsr #1
   d7c80:	ea4f 0350 	mov.w	r3, r0, lsr #1
   d7c84:	bf21      	itttt	cs
   d7c86:	3a08      	subcs	r2, #8
   d7c88:	eba8 0003 	subcs.w	r0, r8, r3
   d7c8c:	0852      	lsrcs	r2, r2, #1
   d7c8e:	fbb0 f3f2 	udivcs	r3, r0, r2
   d7c92:	bf2a      	itet	cs
   d7c94:	fb02 0313 	mlscs	r3, r2, r3, r0
   d7c98:	f108 0304 	addcc.w	r3, r8, #4
   d7c9c:	3304      	addcs	r3, #4
   d7c9e:	005b      	lsls	r3, r3, #1
   d7ca0:	f82a 1003 	strh.w	r1, [sl, r3]
      SPIFFS_DBG("modify: wrote page "_SPIPRIpg" to objix entry "_SPIPRIsp" in mem\n", data_pix, (spiffs_span_ix)SPIFFS_OBJ_IX_ENTRY(fs, data_spix));
   d7ca4:	69ea      	ldr	r2, [r5, #28]
   d7ca6:	f1a2 032d 	sub.w	r3, r2, #45	; 0x2d
   d7caa:	ebb8 0f53 	cmp.w	r8, r3, lsr #1
   d7cae:	ea4f 0053 	mov.w	r0, r3, lsr #1
   d7cb2:	bf21      	itttt	cs
   d7cb4:	3a08      	subcs	r2, #8
   d7cb6:	eba8 0000 	subcs.w	r0, r8, r0
   d7cba:	0852      	lsrcs	r2, r2, #1
   d7cbc:	fbb0 f3f2 	udivcs	r3, r0, r2
   d7cc0:	bf24      	itt	cs
   d7cc2:	fb02 0213 	mlscs	r2, r2, r3, r0
   d7cc6:	b292      	uxthcs	r2, r2
   d7cc8:	4815      	ldr	r0, [pc, #84]	; (d7d20 <spiffs_object_modify+0x594>)
   d7cca:	bf38      	it	cc
   d7ccc:	4642      	movcc	r2, r8
   d7cce:	e6ba      	b.n	d7a46 <spiffs_object_modify+0x2ba>
    SPIFFS_CHECK_RES(res2);
   d7cd0:	4644      	mov	r4, r8
   d7cd2:	e6fc      	b.n	d7ace <spiffs_object_modify+0x342>
    res2 = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
   d7cd4:	f10d 0332 	add.w	r3, sp, #50	; 0x32
   d7cd8:	e9cd 7303 	strd	r7, r3, [sp, #12]
   d7cdc:	e9cd 7701 	strd	r7, r7, [sp, #4]
   d7ce0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7ce2:	88f2      	ldrh	r2, [r6, #6]
   d7ce4:	9300      	str	r3, [sp, #0]
   d7ce6:	4631      	mov	r1, r6
   d7ce8:	89b3      	ldrh	r3, [r6, #12]
   d7cea:	4628      	mov	r0, r5
   d7cec:	f7ff f8d6 	bl	d6e9c <spiffs_object_update_index_hdr>
    SPIFFS_DBG("modify: store modified objix_hdr page, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", new_objix_hdr_pix, 0, written);
   d7cf0:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
    res2 = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
   d7cf4:	4605      	mov	r5, r0
    SPIFFS_DBG("modify: store modified objix_hdr page, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", new_objix_hdr_pix, 0, written);
   d7cf6:	464b      	mov	r3, r9
   d7cf8:	480a      	ldr	r0, [pc, #40]	; (d7d24 <spiffs_object_modify+0x598>)
   d7cfa:	463a      	mov	r2, r7
   d7cfc:	f008 fe64 	bl	e09c8 <spiffsParticleInfoLog>
    SPIFFS_CHECK_RES(res2);
   d7d00:	ea34 0425 	bics.w	r4, r4, r5, asr #32
   d7d04:	bf28      	it	cs
   d7d06:	462c      	movcs	r4, r5
   d7d08:	e6e1      	b.n	d7ace <spiffs_object_modify+0x342>
        SPIFFS_VALIDATE_OBJIX(objix_hdr->p_hdr, fd->obj_id, cur_objix_spix);
   d7d0a:	4c07      	ldr	r4, [pc, #28]	; (d7d28 <spiffs_object_modify+0x59c>)
   d7d0c:	e6df      	b.n	d7ace <spiffs_object_modify+0x342>
   d7d0e:	4c07      	ldr	r4, [pc, #28]	; (d7d2c <spiffs_object_modify+0x5a0>)
   d7d10:	e6dd      	b.n	d7ace <spiffs_object_modify+0x342>
   d7d12:	4c07      	ldr	r4, [pc, #28]	; (d7d30 <spiffs_object_modify+0x5a4>)
   d7d14:	e6db      	b.n	d7ace <spiffs_object_modify+0x342>
   d7d16:	4c07      	ldr	r4, [pc, #28]	; (d7d34 <spiffs_object_modify+0x5a8>)
   d7d18:	e6d9      	b.n	d7ace <spiffs_object_modify+0x342>
   d7d1a:	bf00      	nop
   d7d1c:	000e6869 	.word	0x000e6869
   d7d20:	000e68fd 	.word	0x000e68fd
   d7d24:	000e6732 	.word	0x000e6732
   d7d28:	ffffd8e4 	.word	0xffffd8e4
   d7d2c:	ffffd8ec 	.word	0xffffd8ec
   d7d30:	ffffd8eb 	.word	0xffffd8eb
   d7d34:	ffffd8ea 	.word	0xffffd8ea

000d7d38 <spiffs_object_find_object_index_header_by_name>:
    spiffs_page_ix *pix) {
   d7d38:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7d3a:	b089      	sub	sp, #36	; 0x24
  res = spiffs_obj_lu_find_entry_visitor(fs,
   d7d3c:	ab07      	add	r3, sp, #28
   d7d3e:	9305      	str	r3, [sp, #20]
    spiffs_page_ix *pix) {
   d7d40:	4615      	mov	r5, r2
  res = spiffs_obj_lu_find_entry_visitor(fs,
   d7d42:	f10d 031a 	add.w	r3, sp, #26
   d7d46:	4a16      	ldr	r2, [pc, #88]	; (d7da0 <spiffs_object_find_object_index_header_by_name+0x68>)
   d7d48:	9304      	str	r3, [sp, #16]
   d7d4a:	2300      	movs	r3, #0
   d7d4c:	e9cd 1302 	strd	r1, r3, [sp, #8]
   d7d50:	e9cd 3200 	strd	r3, r2, [sp]
   d7d54:	6b02      	ldr	r2, [r0, #48]	; 0x30
   d7d56:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
    spiffs_page_ix *pix) {
   d7d58:	4604      	mov	r4, r0
  res = spiffs_obj_lu_find_entry_visitor(fs,
   d7d5a:	f7fe fa83 	bl	d6264 <spiffs_obj_lu_find_entry_visitor>
  if (res == SPIFFS_VIS_END) {
   d7d5e:	4b11      	ldr	r3, [pc, #68]	; (d7da4 <spiffs_object_find_object_index_header_by_name+0x6c>)
   d7d60:	4298      	cmp	r0, r3
   d7d62:	d01b      	beq.n	d7d9c <spiffs_object_find_object_index_header_by_name+0x64>
  SPIFFS_CHECK_RES(res);
   d7d64:	2800      	cmp	r0, #0
   d7d66:	db17      	blt.n	d7d98 <spiffs_object_find_object_index_header_by_name+0x60>
  if (pix) {
   d7d68:	f8bd 701a 	ldrh.w	r7, [sp, #26]
   d7d6c:	9e07      	ldr	r6, [sp, #28]
   d7d6e:	b18d      	cbz	r5, d7d94 <spiffs_object_find_object_index_header_by_name+0x5c>
    *pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, entry);
   d7d70:	e9d4 2c06 	ldrd	r2, ip, [r4, #24]
   d7d74:	fbb2 f2fc 	udiv	r2, r2, ip
   d7d78:	fb12 f107 	smulbb	r1, r2, r7
   d7d7c:	0053      	lsls	r3, r2, #1
   d7d7e:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
   d7d82:	b289      	uxth	r1, r1
   d7d84:	bf96      	itet	ls
   d7d86:	fbb3 f3fc 	udivls	r3, r3, ip
   d7d8a:	2301      	movhi	r3, #1
   d7d8c:	b29b      	uxthls	r3, r3
   d7d8e:	4431      	add	r1, r6
   d7d90:	440b      	add	r3, r1
   d7d92:	802b      	strh	r3, [r5, #0]
  fs->cursor_block_ix = bix;
   d7d94:	85a7      	strh	r7, [r4, #44]	; 0x2c
  fs->cursor_obj_lu_entry = entry;
   d7d96:	6326      	str	r6, [r4, #48]	; 0x30
}
   d7d98:	b009      	add	sp, #36	; 0x24
   d7d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    res = SPIFFS_ERR_NOT_FOUND;
   d7d9c:	4802      	ldr	r0, [pc, #8]	; (d7da8 <spiffs_object_find_object_index_header_by_name+0x70>)
   d7d9e:	e7fb      	b.n	d7d98 <spiffs_object_find_object_index_header_by_name+0x60>
   d7da0:	000d5e19 	.word	0x000d5e19
   d7da4:	ffffd8a8 	.word	0xffffd8a8
   d7da8:	ffffd8ee 	.word	0xffffd8ee

000d7dac <spiffs_object_truncate>:
    u8_t remove_full) {
   d7dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((fd->size == SPIFFS_UNDEFINED_LEN || fd->size == 0) && !remove_full) {
   d7db0:	6883      	ldr	r3, [r0, #8]
  spiffs *fs = fd->fs;
   d7db2:	6804      	ldr	r4, [r0, #0]
    u8_t remove_full) {
   d7db4:	b08f      	sub	sp, #60	; 0x3c
  if ((fd->size == SPIFFS_UNDEFINED_LEN || fd->size == 0) && !remove_full) {
   d7db6:	3b01      	subs	r3, #1
   d7db8:	3303      	adds	r3, #3
    u8_t remove_full) {
   d7dba:	4605      	mov	r5, r0
   d7dbc:	9107      	str	r1, [sp, #28]
   d7dbe:	4691      	mov	r9, r2
  if ((fd->size == SPIFFS_UNDEFINED_LEN || fd->size == 0) && !remove_full) {
   d7dc0:	f240 80b1 	bls.w	d7f26 <spiffs_object_truncate+0x17a>
   d7dc4:	2a00      	cmp	r2, #0
   d7dc6:	f000 825b 	beq.w	d8280 <spiffs_object_truncate+0x4d4>
  spiffs_span_ix data_spix = (fd->size > 0 ? fd->size-1 : 0) / SPIFFS_DATA_PAGE_SIZE(fs);
   d7dca:	68ae      	ldr	r6, [r5, #8]
  spiffs_page_ix objix_pix = fd->objix_hdr_pix;
   d7dcc:	89ab      	ldrh	r3, [r5, #12]
   d7dce:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
  spiffs_span_ix data_spix = (fd->size > 0 ? fd->size-1 : 0) / SPIFFS_DATA_PAGE_SIZE(fs);
   d7dd2:	2e00      	cmp	r6, #0
   d7dd4:	f040 80b8 	bne.w	d7f48 <spiffs_object_truncate+0x19c>
   d7dd8:	4637      	mov	r7, r6
   d7dda:	69e1      	ldr	r1, [r4, #28]
   d7ddc:	1f4a      	subs	r2, r1, #5
   d7dde:	fbb7 f7f2 	udiv	r7, r7, r2
  u32_t cur_size = fd->size == (u32_t)SPIFFS_UNDEFINED_LEN ? 0 : fd->size ;
   d7de2:	1c72      	adds	r2, r6, #1
  spiffs_page_object_ix_header *objix_hdr = (spiffs_page_object_ix_header *)fs->work;
   d7de4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   d7de6:	9206      	str	r2, [sp, #24]
  spiffs_span_ix data_spix = (fd->size > 0 ? fd->size-1 : 0) / SPIFFS_DATA_PAGE_SIZE(fs);
   d7de8:	b2bf      	uxth	r7, r7
  u32_t cur_size = fd->size == (u32_t)SPIFFS_UNDEFINED_LEN ? 0 : fd->size ;
   d7dea:	bf08      	it	eq
   d7dec:	2600      	moveq	r6, #0
  if (remove_full && new_size == 0) {
   d7dee:	f1b9 0f00 	cmp.w	r9, #0
   d7df2:	d016      	beq.n	d7e22 <spiffs_object_truncate+0x76>
   d7df4:	9a07      	ldr	r2, [sp, #28]
   d7df6:	b9a2      	cbnz	r2, d7e22 <spiffs_object_truncate+0x76>
    u8_t flags = ~( SPIFFS_PH_FLAG_USED | SPIFFS_PH_FLAG_INDEX | SPIFFS_PH_FLAG_FINAL | SPIFFS_PH_FLAG_IXDELE);
   d7df8:	22b8      	movs	r2, #184	; 0xb8
   d7dfa:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
    res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_UPDT,
   d7dfe:	6922      	ldr	r2, [r4, #16]
   d7e00:	a80c      	add	r0, sp, #48	; 0x30
   d7e02:	3204      	adds	r2, #4
   d7e04:	9001      	str	r0, [sp, #4]
   d7e06:	2001      	movs	r0, #1
   d7e08:	fb01 2303 	mla	r3, r1, r3, r2
   d7e0c:	9000      	str	r0, [sp, #0]
   d7e0e:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
   d7e12:	2106      	movs	r1, #6
   d7e14:	4620      	mov	r0, r4
   d7e16:	f7fc fa93 	bl	d4340 <spiffs_phys_wr>
    SPIFFS_CHECK_RES(res);
   d7e1a:	f1b0 0a00 	subs.w	sl, r0, #0
   d7e1e:	f2c0 808f 	blt.w	d7f40 <spiffs_object_truncate+0x194>
      break;
   d7e22:	f64f 7bff 	movw	fp, #65535	; 0xffff
   d7e26:	f04f 0800 	mov.w	r8, #0
  while (cur_size > new_size) {
   d7e2a:	9b07      	ldr	r3, [sp, #28]
   d7e2c:	429e      	cmp	r6, r3
   d7e2e:	d94b      	bls.n	d7ec8 <spiffs_object_truncate+0x11c>
    cur_objix_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, data_spix);
   d7e30:	69e3      	ldr	r3, [r4, #28]
   d7e32:	f1a3 022d 	sub.w	r2, r3, #45	; 0x2d
   d7e36:	ebb7 0f52 	cmp.w	r7, r2, lsr #1
   d7e3a:	ea4f 0852 	mov.w	r8, r2, lsr #1
   d7e3e:	f0c0 8230 	bcc.w	d82a2 <spiffs_object_truncate+0x4f6>
   d7e42:	3b08      	subs	r3, #8
   d7e44:	eba7 0808 	sub.w	r8, r7, r8
   d7e48:	085b      	lsrs	r3, r3, #1
   d7e4a:	fbb8 f8f3 	udiv	r8, r8, r3
   d7e4e:	f108 0801 	add.w	r8, r8, #1
   d7e52:	fa1f f888 	uxth.w	r8, r8
    if (prev_objix_spix != cur_objix_spix) {
   d7e56:	45c3      	cmp	fp, r8
   d7e58:	f040 8229 	bne.w	d82ae <spiffs_object_truncate+0x502>
    if (cur_objix_spix == 0) {
   d7e5c:	f1b8 0f00 	cmp.w	r8, #0
   d7e60:	f040 809f 	bne.w	d7fa2 <spiffs_object_truncate+0x1f6>
      data_pix = ((spiffs_page_ix*)((u8_t *)objix_hdr + sizeof(spiffs_page_object_ix_header)))[data_spix];
   d7e64:	007b      	lsls	r3, r7, #1
   d7e66:	9a06      	ldr	r2, [sp, #24]
      ((spiffs_page_ix*)((u8_t *)objix_hdr + sizeof(spiffs_page_object_ix_header)))[data_spix] = SPIFFS_OBJ_ID_FREE;
   d7e68:	9906      	ldr	r1, [sp, #24]
      data_pix = ((spiffs_page_ix*)((u8_t *)objix_hdr + sizeof(spiffs_page_object_ix_header)))[data_spix];
   d7e6a:	332d      	adds	r3, #45	; 0x2d
   d7e6c:	f04f 0800 	mov.w	r8, #0
   d7e70:	f832 b003 	ldrh.w	fp, [r2, r3]
      ((spiffs_page_ix*)((u8_t *)objix_hdr + sizeof(spiffs_page_object_ix_header)))[data_spix] = SPIFFS_OBJ_ID_FREE;
   d7e74:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d7e78:	52ca      	strh	r2, [r1, r3]
    SPIFFS_DBG("truncate: got data pix "_SPIPRIpg"\n", data_pix);
   d7e7a:	48c4      	ldr	r0, [pc, #784]	; (d818c <spiffs_object_truncate+0x3e0>)
   d7e7c:	4659      	mov	r1, fp
   d7e7e:	f008 fda3 	bl	e09c8 <spiffsParticleInfoLog>
    if (new_size == 0 || remove_full || cur_size - new_size >= SPIFFS_DATA_PAGE_SIZE(fs)) {
   d7e82:	9b07      	ldr	r3, [sp, #28]
   d7e84:	b15b      	cbz	r3, d7e9e <spiffs_object_truncate+0xf2>
   d7e86:	f1b9 0f00 	cmp.w	r9, #0
   d7e8a:	d108      	bne.n	d7e9e <spiffs_object_truncate+0xf2>
   d7e8c:	69e3      	ldr	r3, [r4, #28]
   d7e8e:	3b05      	subs	r3, #5
   d7e90:	9308      	str	r3, [sp, #32]
   d7e92:	9b07      	ldr	r3, [sp, #28]
   d7e94:	9a08      	ldr	r2, [sp, #32]
   d7e96:	1af3      	subs	r3, r6, r3
   d7e98:	4293      	cmp	r3, r2
   d7e9a:	f0c0 80bd 	bcc.w	d8018 <spiffs_object_truncate+0x26c>
      res = spiffs_page_data_check(fs, fd, data_pix, data_spix);
   d7e9e:	463b      	mov	r3, r7
   d7ea0:	1d29      	adds	r1, r5, #4
   d7ea2:	465a      	mov	r2, fp
   d7ea4:	4620      	mov	r0, r4
   d7ea6:	f7fe f87b 	bl	d5fa0 <spiffs_page_data_check.isra.0>
      if (res != SPIFFS_ERR_DELETED && res != SPIFFS_OK && res != SPIFFS_ERR_INDEX_REF_FREE) {
   d7eaa:	4bb9      	ldr	r3, [pc, #740]	; (d8190 <spiffs_object_truncate+0x3e4>)
   d7eac:	4298      	cmp	r0, r3
      res = spiffs_page_data_check(fs, fd, data_pix, data_spix);
   d7eae:	4601      	mov	r1, r0
      if (res != SPIFFS_ERR_DELETED && res != SPIFFS_OK && res != SPIFFS_ERR_INDEX_REF_FREE) {
   d7eb0:	f000 809a 	beq.w	d7fe8 <spiffs_object_truncate+0x23c>
   d7eb4:	2800      	cmp	r0, #0
   d7eb6:	f000 808f 	beq.w	d7fd8 <spiffs_object_truncate+0x22c>
   d7eba:	3b0b      	subs	r3, #11
   d7ebc:	4298      	cmp	r0, r3
   d7ebe:	f000 8093 	beq.w	d7fe8 <spiffs_object_truncate+0x23c>
        SPIFFS_DBG("truncate: err validating data pix "_SPIPRIi"\n", res);
   d7ec2:	48b4      	ldr	r0, [pc, #720]	; (d8194 <spiffs_object_truncate+0x3e8>)
          SPIFFS_DBG("truncate: err deleting data pix "_SPIPRIi"\n", res);
   d7ec4:	f008 fd80 	bl	e09c8 <spiffsParticleInfoLog>
  if (cur_objix_spix == 0) {
   d7ec8:	f1b8 0f00 	cmp.w	r8, #0
   d7ecc:	f040 819a 	bne.w	d8204 <spiffs_object_truncate+0x458>
    if (cur_size == 0) {
   d7ed0:	2e00      	cmp	r6, #0
   d7ed2:	f040 818e 	bne.w	d81f2 <spiffs_object_truncate+0x446>
      if (remove_full) {
   d7ed6:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
   d7eda:	f1b9 0f00 	cmp.w	r9, #0
   d7ede:	f000 8169 	beq.w	d81b4 <spiffs_object_truncate+0x408>
        SPIFFS_DBG("truncate: remove object index header page "_SPIPRIpg"\n", objix_pix);
   d7ee2:	48ad      	ldr	r0, [pc, #692]	; (d8198 <spiffs_object_truncate+0x3ec>)
   d7ee4:	f008 fd70 	bl	e09c8 <spiffsParticleInfoLog>
        res = spiffs_page_index_check(fs, fd, objix_pix, 0);
   d7ee8:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
   d7eec:	4633      	mov	r3, r6
   d7eee:	4629      	mov	r1, r5
   d7ef0:	4620      	mov	r0, r4
   d7ef2:	f7fd ff2f 	bl	d5d54 <spiffs_page_index_check>
        SPIFFS_CHECK_RES(res);
   d7ef6:	f1b0 0a00 	subs.w	sl, r0, #0
   d7efa:	db21      	blt.n	d7f40 <spiffs_object_truncate+0x194>
        res = spiffs_page_delete(fs, objix_pix);
   d7efc:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
   d7f00:	4620      	mov	r0, r4
   d7f02:	f7fe fd14 	bl	d692e <spiffs_page_delete>
        SPIFFS_CHECK_RES(res);
   d7f06:	f1b0 0a00 	subs.w	sl, r0, #0
   d7f0a:	db19      	blt.n	d7f40 <spiffs_object_truncate+0x194>
        spiffs_cb_object_event(fs, (spiffs_page_object_ix *)0,
   d7f0c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   d7f10:	9602      	str	r6, [sp, #8]
   d7f12:	e9cd 6300 	strd	r6, r3, [sp]
   d7f16:	2202      	movs	r2, #2
   d7f18:	88eb      	ldrh	r3, [r5, #6]
   d7f1a:	4631      	mov	r1, r6
   d7f1c:	4620      	mov	r0, r4
   d7f1e:	f7fe fdf1 	bl	d6b04 <spiffs_cb_object_event>
  fd->size = cur_size;
   d7f22:	60ae      	str	r6, [r5, #8]
  return res;
   d7f24:	e00c      	b.n	d7f40 <spiffs_object_truncate+0x194>
  if (remove_full == 0) {
   d7f26:	2a00      	cmp	r2, #0
   d7f28:	f47f af4f 	bne.w	d7dca <spiffs_object_truncate+0x1e>
    res = spiffs_gc_check(fs, SPIFFS_DATA_PAGE_SIZE(fs) * 2);
   d7f2c:	69e1      	ldr	r1, [r4, #28]
   d7f2e:	3905      	subs	r1, #5
   d7f30:	0049      	lsls	r1, r1, #1
   d7f32:	4620      	mov	r0, r4
   d7f34:	f7fd f842 	bl	d4fbc <spiffs_gc_check>
    SPIFFS_CHECK_RES(res);
   d7f38:	f1b0 0a00 	subs.w	sl, r0, #0
   d7f3c:	f6bf af45 	bge.w	d7dca <spiffs_object_truncate+0x1e>
} // spiffs_object_truncate
   d7f40:	4650      	mov	r0, sl
   d7f42:	b00f      	add	sp, #60	; 0x3c
   d7f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  spiffs_span_ix data_spix = (fd->size > 0 ? fd->size-1 : 0) / SPIFFS_DATA_PAGE_SIZE(fs);
   d7f48:	1e77      	subs	r7, r6, #1
   d7f4a:	e746      	b.n	d7dda <spiffs_object_truncate+0x2e>
            SPIFFS_DBG("truncate: update objix hdr page "_SPIPRIpg":"_SPIPRIsp" to size "_SPIPRIi"\n", fd->objix_hdr_pix, prev_objix_spix, cur_size);
   d7f4c:	89a9      	ldrh	r1, [r5, #12]
   d7f4e:	4893      	ldr	r0, [pc, #588]	; (d819c <spiffs_object_truncate+0x3f0>)
   d7f50:	4633      	mov	r3, r6
   d7f52:	465a      	mov	r2, fp
   d7f54:	f008 fd38 	bl	e09c8 <spiffsParticleInfoLog>
            res = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
   d7f58:	ab0b      	add	r3, sp, #44	; 0x2c
   d7f5a:	e9cd 6303 	strd	r6, r3, [sp, #12]
   d7f5e:	e9cd 9901 	strd	r9, r9, [sp, #4]
   d7f62:	89ab      	ldrh	r3, [r5, #12]
   d7f64:	88ea      	ldrh	r2, [r5, #6]
   d7f66:	f8cd 9000 	str.w	r9, [sp]
   d7f6a:	4629      	mov	r1, r5
   d7f6c:	4620      	mov	r0, r4
   d7f6e:	f7fe ff95 	bl	d6e9c <spiffs_object_update_index_hdr>
            SPIFFS_CHECK_RES(res);
   d7f72:	f1b0 0a00 	subs.w	sl, r0, #0
   d7f76:	f280 81cc 	bge.w	d8312 <spiffs_object_truncate+0x566>
   d7f7a:	e7e1      	b.n	d7f40 <spiffs_object_truncate+0x194>
        res = spiffs_obj_lu_find_id_and_span(fs, fd->obj_id | SPIFFS_OBJ_ID_IX_FLAG, cur_objix_spix, 0, &objix_pix);
   d7f7c:	88e9      	ldrh	r1, [r5, #6]
   d7f7e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
   d7f82:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   d7f86:	ea6f 4151 	mvn.w	r1, r1, lsr #17
   d7f8a:	9300      	str	r3, [sp, #0]
   d7f8c:	4642      	mov	r2, r8
   d7f8e:	2300      	movs	r3, #0
   d7f90:	b289      	uxth	r1, r1
   d7f92:	4620      	mov	r0, r4
   d7f94:	f7fe fbca 	bl	d672c <spiffs_obj_lu_find_id_and_span>
        SPIFFS_CHECK_RES(res);
   d7f98:	f1b0 0a00 	subs.w	sl, r0, #0
   d7f9c:	f280 81c1 	bge.w	d8322 <spiffs_object_truncate+0x576>
   d7fa0:	e7ce      	b.n	d7f40 <spiffs_object_truncate+0x194>
      data_pix = ((spiffs_page_ix*)((u8_t *)objix + sizeof(spiffs_page_object_ix)))[SPIFFS_OBJ_IX_ENTRY(fs, data_spix)];
   d7fa2:	69e2      	ldr	r2, [r4, #28]
   d7fa4:	f1a2 012d 	sub.w	r1, r2, #45	; 0x2d
   d7fa8:	ebb7 0f51 	cmp.w	r7, r1, lsr #1
   d7fac:	ea4f 0351 	mov.w	r3, r1, lsr #1
   d7fb0:	bf21      	itttt	cs
   d7fb2:	3a08      	subcs	r2, #8
   d7fb4:	1af9      	subcs	r1, r7, r3
   d7fb6:	0852      	lsrcs	r2, r2, #1
   d7fb8:	fbb1 f3f2 	udivcs	r3, r1, r2
   d7fbc:	bf2a      	itet	cs
   d7fbe:	fb02 1313 	mlscs	r3, r2, r3, r1
   d7fc2:	1d3b      	addcc	r3, r7, #4
   d7fc4:	3304      	addcs	r3, #4
   d7fc6:	9a06      	ldr	r2, [sp, #24]
      ((spiffs_page_ix*)((u8_t *)objix + sizeof(spiffs_page_object_ix)))[SPIFFS_OBJ_IX_ENTRY(fs, data_spix)] = SPIFFS_OBJ_ID_FREE;
   d7fc8:	9906      	ldr	r1, [sp, #24]
      data_pix = ((spiffs_page_ix*)((u8_t *)objix + sizeof(spiffs_page_object_ix)))[SPIFFS_OBJ_IX_ENTRY(fs, data_spix)];
   d7fca:	005b      	lsls	r3, r3, #1
   d7fcc:	f832 b003 	ldrh.w	fp, [r2, r3]
      ((spiffs_page_ix*)((u8_t *)objix + sizeof(spiffs_page_object_ix)))[SPIFFS_OBJ_IX_ENTRY(fs, data_spix)] = SPIFFS_OBJ_ID_FREE;
   d7fd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d7fd4:	52ca      	strh	r2, [r1, r3]
   d7fd6:	e750      	b.n	d7e7a <spiffs_object_truncate+0xce>
        res = spiffs_page_delete(fs, data_pix);
   d7fd8:	4659      	mov	r1, fp
   d7fda:	4620      	mov	r0, r4
   d7fdc:	f7fe fca7 	bl	d692e <spiffs_page_delete>
        if (res != SPIFFS_OK) {
   d7fe0:	4601      	mov	r1, r0
   d7fe2:	b108      	cbz	r0, d7fe8 <spiffs_object_truncate+0x23c>
          SPIFFS_DBG("truncate: err deleting data pix "_SPIPRIi"\n", res);
   d7fe4:	486e      	ldr	r0, [pc, #440]	; (d81a0 <spiffs_object_truncate+0x3f4>)
   d7fe6:	e76d      	b.n	d7ec4 <spiffs_object_truncate+0x118>
      if (cur_size % SPIFFS_DATA_PAGE_SIZE(fs) == 0) {
   d7fe8:	69e2      	ldr	r2, [r4, #28]
   d7fea:	1f51      	subs	r1, r2, #5
   d7fec:	fbb6 f3f1 	udiv	r3, r6, r1
   d7ff0:	fb01 6313 	mls	r3, r1, r3, r6
   d7ff4:	b973      	cbnz	r3, d8014 <spiffs_object_truncate+0x268>
        cur_size -= SPIFFS_DATA_PAGE_SIZE(fs);
   d7ff6:	f1c2 0205 	rsb	r2, r2, #5
   d7ffa:	4416      	add	r6, r2
      SPIFFS_DBG("truncate: delete data page "_SPIPRIpg" for data spix:"_SPIPRIsp", cur_size:"_SPIPRIi"\n", data_pix, data_spix, cur_size);
   d7ffc:	463a      	mov	r2, r7
   d7ffe:	4659      	mov	r1, fp
   d8000:	4868      	ldr	r0, [pc, #416]	; (d81a4 <spiffs_object_truncate+0x3f8>)
      fd->size = cur_size;
   d8002:	60ae      	str	r6, [r5, #8]
      fd->offset = cur_size;
   d8004:	616e      	str	r6, [r5, #20]
      SPIFFS_DBG("truncate: delete data page "_SPIPRIpg" for data spix:"_SPIPRIsp", cur_size:"_SPIPRIi"\n", data_pix, data_spix, cur_size);
   d8006:	4633      	mov	r3, r6
    data_spix--;
   d8008:	3f01      	subs	r7, #1
      SPIFFS_DBG("truncate: delete data page "_SPIPRIpg" for data spix:"_SPIPRIsp", cur_size:"_SPIPRIi"\n", data_pix, data_spix, cur_size);
   d800a:	f008 fcdd 	bl	e09c8 <spiffsParticleInfoLog>
    data_spix--;
   d800e:	b2bf      	uxth	r7, r7
   d8010:	46c3      	mov	fp, r8
   d8012:	e70a      	b.n	d7e2a <spiffs_object_truncate+0x7e>
        cur_size -= cur_size % SPIFFS_DATA_PAGE_SIZE(fs);
   d8014:	1af6      	subs	r6, r6, r3
   d8016:	e7f1      	b.n	d7ffc <spiffs_object_truncate+0x250>
      u32_t bytes_to_remove = SPIFFS_DATA_PAGE_SIZE(fs) - (new_size % SPIFFS_DATA_PAGE_SIZE(fs));
   d8018:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
   d801c:	9907      	ldr	r1, [sp, #28]
   d801e:	fbb3 f3f2 	udiv	r3, r3, r2
   d8022:	fb02 1313 	mls	r3, r2, r3, r1
   d8026:	9309      	str	r3, [sp, #36]	; 0x24
      SPIFFS_DBG("truncate: delete "_SPIPRIi" bytes from data page "_SPIPRIpg" for data spix:"_SPIPRIsp", cur_size:"_SPIPRIi"\n", bytes_to_remove, data_pix, data_spix, cur_size);
   d8028:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
   d802c:	463b      	mov	r3, r7
   d802e:	1a09      	subs	r1, r1, r0
   d8030:	465a      	mov	r2, fp
   d8032:	485d      	ldr	r0, [pc, #372]	; (d81a8 <spiffs_object_truncate+0x3fc>)
   d8034:	9600      	str	r6, [sp, #0]
   d8036:	f008 fcc7 	bl	e09c8 <spiffsParticleInfoLog>
      res = spiffs_page_data_check(fs, fd, data_pix, data_spix);
   d803a:	463b      	mov	r3, r7
   d803c:	465a      	mov	r2, fp
   d803e:	1d29      	adds	r1, r5, #4
   d8040:	4620      	mov	r0, r4
      SPIFFS_DBG("truncate: delete "_SPIPRIi" bytes from data page "_SPIPRIpg" for data spix:"_SPIPRIsp", cur_size:"_SPIPRIi"\n", bytes_to_remove, data_pix, data_spix, cur_size);
   d8042:	46ba      	mov	sl, r7
      res = spiffs_page_data_check(fs, fd, data_pix, data_spix);
   d8044:	f7fd ffac 	bl	d5fa0 <spiffs_page_data_check.isra.0>
      if (res != SPIFFS_OK) break;
   d8048:	2800      	cmp	r0, #0
   d804a:	f47f af3d 	bne.w	d7ec8 <spiffs_object_truncate+0x11c>
      p_hdr.flags = 0xff;
   d804e:	23ff      	movs	r3, #255	; 0xff
      p_hdr.obj_id = fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG;
   d8050:	88e9      	ldrh	r1, [r5, #6]
      p_hdr.flags = 0xff;
   d8052:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
      res = spiffs_page_allocate_data(fs, fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG,
   d8056:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   d805a:	e9cd 9302 	strd	r9, r3, [sp, #8]
      p_hdr.obj_id = fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG;
   d805e:	f3c1 010e 	ubfx	r1, r1, #0, #15
      res = spiffs_page_allocate_data(fs, fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG,
   d8062:	e9cd 9900 	strd	r9, r9, [sp]
   d8066:	464b      	mov	r3, r9
   d8068:	aa0c      	add	r2, sp, #48	; 0x30
   d806a:	4620      	mov	r0, r4
      p_hdr.obj_id = fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG;
   d806c:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
      p_hdr.span_ix = data_spix;
   d8070:	f8ad 7032 	strh.w	r7, [sp, #50]	; 0x32
      res = spiffs_page_allocate_data(fs, fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG,
   d8074:	f7fe fb9e 	bl	d67b4 <spiffs_page_allocate_data>
      if (res != SPIFFS_OK) break;
   d8078:	2800      	cmp	r0, #0
   d807a:	f47f af25 	bne.w	d7ec8 <spiffs_object_truncate+0x11c>
          SPIFFS_PAGE_TO_PADDR(fs, new_data_pix) + sizeof(spiffs_page_header),
   d807e:	69e0      	ldr	r0, [r4, #28]
      res = spiffs_phys_cpy(fs, 0,
   d8080:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d8082:	6921      	ldr	r1, [r4, #16]
          SPIFFS_PAGE_TO_PADDR(fs, new_data_pix) + sizeof(spiffs_page_header),
   d8084:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
      res = spiffs_phys_cpy(fs, 0,
   d8088:	1f43      	subs	r3, r0, #5
   d808a:	4413      	add	r3, r2
   d808c:	9a08      	ldr	r2, [sp, #32]
   d808e:	3105      	adds	r1, #5
   d8090:	1a9b      	subs	r3, r3, r2
   d8092:	9300      	str	r3, [sp, #0]
   d8094:	fb00 120c 	mla	r2, r0, ip, r1
   d8098:	fb00 130b 	mla	r3, r0, fp, r1
   d809c:	4649      	mov	r1, r9
   d809e:	4620      	mov	r0, r4
   d80a0:	f7fe f8b4 	bl	d620c <spiffs_phys_cpy>
      if (res != SPIFFS_OK) break;
   d80a4:	2800      	cmp	r0, #0
   d80a6:	f47f af0f 	bne.w	d7ec8 <spiffs_object_truncate+0x11c>
      res = spiffs_page_delete(fs, data_pix);
   d80aa:	4659      	mov	r1, fp
   d80ac:	4620      	mov	r0, r4
   d80ae:	f7fe fc3e 	bl	d692e <spiffs_page_delete>
      if (res != SPIFFS_OK) break;
   d80b2:	2800      	cmp	r0, #0
   d80b4:	f47f af08 	bne.w	d7ec8 <spiffs_object_truncate+0x11c>
      p_hdr.flags &= ~SPIFFS_PH_FLAG_FINAL;
   d80b8:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   d80bc:	f023 0302 	bic.w	r3, r3, #2
   d80c0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
      res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
   d80c4:	6922      	ldr	r2, [r4, #16]
   d80c6:	69e1      	ldr	r1, [r4, #28]
   d80c8:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   d80cc:	a80d      	add	r0, sp, #52	; 0x34
   d80ce:	3204      	adds	r2, #4
   d80d0:	9001      	str	r0, [sp, #4]
   d80d2:	2001      	movs	r0, #1
   d80d4:	fb01 2303 	mla	r3, r1, r3, r2
   d80d8:	9000      	str	r0, [sp, #0]
   d80da:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
   d80de:	2107      	movs	r1, #7
   d80e0:	4620      	mov	r0, r4
   d80e2:	f7fc f92d 	bl	d4340 <spiffs_phys_wr>
      if (res != SPIFFS_OK) break;
   d80e6:	2800      	cmp	r0, #0
   d80e8:	f47f aeee 	bne.w	d7ec8 <spiffs_object_truncate+0x11c>
      if (cur_objix_spix == 0) {
   d80ec:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
   d80f0:	f1b8 0f00 	cmp.w	r8, #0
   d80f4:	d120      	bne.n	d8138 <spiffs_object_truncate+0x38c>
        ((spiffs_page_ix*)((u8_t *)objix_hdr + sizeof(spiffs_page_object_ix_header)))[data_spix] = new_data_pix;
   d80f6:	9b06      	ldr	r3, [sp, #24]
   d80f8:	eb03 0347 	add.w	r3, r3, r7, lsl #1
   d80fc:	f8a3 102d 	strh.w	r1, [r3, #45]	; 0x2d
        SPIFFS_DBG("truncate: wrote page "_SPIPRIpg" to objix_hdr entry "_SPIPRIsp" in mem\n", new_data_pix, (spiffs_span_ix)SPIFFS_OBJ_IX_ENTRY(fs, data_spix));
   d8100:	69e3      	ldr	r3, [r4, #28]
   d8102:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
   d8106:	f1a3 002d 	sub.w	r0, r3, #45	; 0x2d
   d810a:	ebb7 0f50 	cmp.w	r7, r0, lsr #1
   d810e:	ea4f 0250 	mov.w	r2, r0, lsr #1
   d8112:	d308      	bcc.n	d8126 <spiffs_object_truncate+0x37a>
   d8114:	3b08      	subs	r3, #8
   d8116:	1abf      	subs	r7, r7, r2
   d8118:	085b      	lsrs	r3, r3, #1
   d811a:	fbb7 faf3 	udiv	sl, r7, r3
   d811e:	fb03 771a 	mls	r7, r3, sl, r7
   d8122:	fa1f fa87 	uxth.w	sl, r7
   d8126:	4821      	ldr	r0, [pc, #132]	; (d81ac <spiffs_object_truncate+0x400>)
   d8128:	4652      	mov	r2, sl
        SPIFFS_DBG("truncate: wrote page "_SPIPRIpg" to objix entry "_SPIPRIsp" in mem\n", new_data_pix, (spiffs_span_ix)SPIFFS_OBJ_IX_ENTRY(fs, data_spix));
   d812a:	f008 fc4d 	bl	e09c8 <spiffsParticleInfoLog>
      fd->size = new_size;
   d812e:	9b07      	ldr	r3, [sp, #28]
   d8130:	60ab      	str	r3, [r5, #8]
      fd->offset = cur_size;
   d8132:	616b      	str	r3, [r5, #20]
      break;
   d8134:	461e      	mov	r6, r3
   d8136:	e6c7      	b.n	d7ec8 <spiffs_object_truncate+0x11c>
        ((spiffs_page_ix*)((u8_t *)objix + sizeof(spiffs_page_object_ix)))[SPIFFS_OBJ_IX_ENTRY(fs, data_spix)] = new_data_pix;
   d8138:	69e2      	ldr	r2, [r4, #28]
   d813a:	f1a2 002d 	sub.w	r0, r2, #45	; 0x2d
   d813e:	ebb7 0f50 	cmp.w	r7, r0, lsr #1
   d8142:	ea4f 0350 	mov.w	r3, r0, lsr #1
   d8146:	bf21      	itttt	cs
   d8148:	3a08      	subcs	r2, #8
   d814a:	1af8      	subcs	r0, r7, r3
   d814c:	0852      	lsrcs	r2, r2, #1
   d814e:	fbb0 f3f2 	udivcs	r3, r0, r2
   d8152:	bf2a      	itet	cs
   d8154:	fb02 0313 	mlscs	r3, r2, r3, r0
   d8158:	1d3b      	addcc	r3, r7, #4
   d815a:	3304      	addcs	r3, #4
   d815c:	9a06      	ldr	r2, [sp, #24]
   d815e:	005b      	lsls	r3, r3, #1
   d8160:	52d1      	strh	r1, [r2, r3]
        SPIFFS_DBG("truncate: wrote page "_SPIPRIpg" to objix entry "_SPIPRIsp" in mem\n", new_data_pix, (spiffs_span_ix)SPIFFS_OBJ_IX_ENTRY(fs, data_spix));
   d8162:	69e3      	ldr	r3, [r4, #28]
   d8164:	f1a3 002d 	sub.w	r0, r3, #45	; 0x2d
   d8168:	ebb7 0f50 	cmp.w	r7, r0, lsr #1
   d816c:	ea4f 0250 	mov.w	r2, r0, lsr #1
   d8170:	d308      	bcc.n	d8184 <spiffs_object_truncate+0x3d8>
   d8172:	3b08      	subs	r3, #8
   d8174:	1abf      	subs	r7, r7, r2
   d8176:	085b      	lsrs	r3, r3, #1
   d8178:	fbb7 faf3 	udiv	sl, r7, r3
   d817c:	fb03 771a 	mls	r7, r3, sl, r7
   d8180:	fa1f fa87 	uxth.w	sl, r7
   d8184:	480a      	ldr	r0, [pc, #40]	; (d81b0 <spiffs_object_truncate+0x404>)
   d8186:	4652      	mov	r2, sl
   d8188:	e7cf      	b.n	d812a <spiffs_object_truncate+0x37e>
   d818a:	bf00      	nop
   d818c:	000e6a00 	.word	0x000e6a00
   d8190:	ffffd8ec 	.word	0xffffd8ec
   d8194:	000e6a1d 	.word	0x000e6a1d
   d8198:	000e6b67 	.word	0x000e6b67
   d819c:	000e6992 	.word	0x000e6992
   d81a0:	000e6a43 	.word	0x000e6a43
   d81a4:	000e6a67 	.word	0x000e6a67
   d81a8:	000e6aa8 	.word	0x000e6aa8
   d81ac:	000e6af7 	.word	0x000e6af7
   d81b0:	000e6b31 	.word	0x000e6b31
        SPIFFS_DBG("truncate: reset objix_hdr page "_SPIPRIpg"\n", objix_pix);
   d81b4:	4874      	ldr	r0, [pc, #464]	; (d8388 <spiffs_object_truncate+0x5dc>)
   d81b6:	f008 fc07 	bl	e09c8 <spiffsParticleInfoLog>
            SPIFFS_CFG_LOG_PAGE_SZ(fs) - sizeof(spiffs_page_object_ix_header));
   d81ba:	69e2      	ldr	r2, [r4, #28]
        memset(fs->work + sizeof(spiffs_page_object_ix_header), 0xff,
   d81bc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   d81be:	3a2d      	subs	r2, #45	; 0x2d
   d81c0:	21ff      	movs	r1, #255	; 0xff
   d81c2:	302d      	adds	r0, #45	; 0x2d
   d81c4:	f00d fa74 	bl	e56b0 <memset>
        res = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
   d81c8:	ab0b      	add	r3, sp, #44	; 0x2c
   d81ca:	9304      	str	r3, [sp, #16]
   d81cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d81d0:	e9cd 6302 	strd	r6, r3, [sp, #8]
   d81d4:	9601      	str	r6, [sp, #4]
      res = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
   d81d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d81d8:	9300      	str	r3, [sp, #0]
   d81da:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    res = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
   d81de:	88ea      	ldrh	r2, [r5, #6]
   d81e0:	4629      	mov	r1, r5
   d81e2:	4620      	mov	r0, r4
   d81e4:	f7fe fe5a 	bl	d6e9c <spiffs_object_update_index_hdr>
    SPIFFS_CHECK_RES(res);
   d81e8:	f1b0 0a00 	subs.w	sl, r0, #0
   d81ec:	f6bf ae99 	bge.w	d7f22 <spiffs_object_truncate+0x176>
   d81f0:	e6a6      	b.n	d7f40 <spiffs_object_truncate+0x194>
      SPIFFS_DBG("truncate: update object index header page with indices and size\n");
   d81f2:	4866      	ldr	r0, [pc, #408]	; (d838c <spiffs_object_truncate+0x5e0>)
   d81f4:	f008 fbe8 	bl	e09c8 <spiffsParticleInfoLog>
      res = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
   d81f8:	ab0b      	add	r3, sp, #44	; 0x2c
   d81fa:	e9cd 6303 	strd	r6, r3, [sp, #12]
   d81fe:	e9cd 8801 	strd	r8, r8, [sp, #4]
   d8202:	e7e8      	b.n	d81d6 <spiffs_object_truncate+0x42a>
    res = spiffs_page_index_check(fs, fd, objix_pix, cur_objix_spix);
   d8204:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
   d8208:	4643      	mov	r3, r8
   d820a:	4629      	mov	r1, r5
   d820c:	4620      	mov	r0, r4
   d820e:	f7fd fda1 	bl	d5d54 <spiffs_page_index_check>
    SPIFFS_CHECK_RES(res);
   d8212:	f1b0 0a00 	subs.w	sl, r0, #0
   d8216:	f6ff ae93 	blt.w	d7f40 <spiffs_object_truncate+0x194>
    res = spiffs_page_move(fs, fd->file_nbr, (u8_t*)objix_hdr, fd->obj_id, 0, objix_pix, &new_objix_pix);
   d821a:	ab0c      	add	r3, sp, #48	; 0x30
   d821c:	9302      	str	r3, [sp, #8]
   d821e:	2700      	movs	r7, #0
   d8220:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   d8224:	9301      	str	r3, [sp, #4]
   d8226:	9a06      	ldr	r2, [sp, #24]
   d8228:	88eb      	ldrh	r3, [r5, #6]
   d822a:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
   d822e:	9700      	str	r7, [sp, #0]
   d8230:	4620      	mov	r0, r4
   d8232:	f7fe fbc1 	bl	d69b8 <spiffs_page_move>
    SPIFFS_CHECK_RES(res);
   d8236:	f1b0 0a00 	subs.w	sl, r0, #0
   d823a:	f6ff ae81 	blt.w	d7f40 <spiffs_object_truncate+0x194>
    spiffs_cb_object_event(fs, (spiffs_page_object_ix *)objix_hdr,
   d823e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   d8242:	9301      	str	r3, [sp, #4]
   d8244:	9b06      	ldr	r3, [sp, #24]
   d8246:	9702      	str	r7, [sp, #8]
   d8248:	885b      	ldrh	r3, [r3, #2]
   d824a:	9906      	ldr	r1, [sp, #24]
   d824c:	9300      	str	r3, [sp, #0]
   d824e:	463a      	mov	r2, r7
   d8250:	88eb      	ldrh	r3, [r5, #6]
   d8252:	4620      	mov	r0, r4
   d8254:	f7fe fc56 	bl	d6b04 <spiffs_cb_object_event>
    SPIFFS_DBG("truncate: store modified objix page, "_SPIPRIpg":"_SPIPRIsp"\n", new_objix_pix, cur_objix_spix);
   d8258:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
   d825c:	484c      	ldr	r0, [pc, #304]	; (d8390 <spiffs_object_truncate+0x5e4>)
   d825e:	4642      	mov	r2, r8
   d8260:	f008 fbb2 	bl	e09c8 <spiffsParticleInfoLog>
    fd->cursor_objix_pix = new_objix_pix;
   d8264:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   d8268:	81eb      	strh	r3, [r5, #14]
    res = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
   d826a:	ab0b      	add	r3, sp, #44	; 0x2c
   d826c:	e9cd 6303 	strd	r6, r3, [sp, #12]
   d8270:	e9cd 7701 	strd	r7, r7, [sp, #4]
   d8274:	89ab      	ldrh	r3, [r5, #12]
    fd->cursor_objix_spix = cur_objix_spix;
   d8276:	f8a5 8010 	strh.w	r8, [r5, #16]
    fd->offset = cur_size;
   d827a:	616e      	str	r6, [r5, #20]
    res = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
   d827c:	9700      	str	r7, [sp, #0]
   d827e:	e7ae      	b.n	d81de <spiffs_object_truncate+0x432>
    return res;
   d8280:	4692      	mov	sl, r2
   d8282:	e65d      	b.n	d7f40 <spiffs_object_truncate+0x194>
      SPIFFS_VALIDATE_OBJIX(objix_hdr->p_hdr, fd->obj_id, cur_objix_spix);
   d8284:	f8df a114 	ldr.w	sl, [pc, #276]	; d839c <spiffs_object_truncate+0x5f0>
   d8288:	e65a      	b.n	d7f40 <spiffs_object_truncate+0x194>
   d828a:	f8df a114 	ldr.w	sl, [pc, #276]	; d83a0 <spiffs_object_truncate+0x5f4>
   d828e:	e657      	b.n	d7f40 <spiffs_object_truncate+0x194>
   d8290:	f8df a110 	ldr.w	sl, [pc, #272]	; d83a4 <spiffs_object_truncate+0x5f8>
   d8294:	e654      	b.n	d7f40 <spiffs_object_truncate+0x194>
   d8296:	f8df a110 	ldr.w	sl, [pc, #272]	; d83a8 <spiffs_object_truncate+0x5fc>
   d829a:	e651      	b.n	d7f40 <spiffs_object_truncate+0x194>
   d829c:	f8df a10c 	ldr.w	sl, [pc, #268]	; d83ac <spiffs_object_truncate+0x600>
   d82a0:	e64e      	b.n	d7f40 <spiffs_object_truncate+0x194>
    if (prev_objix_spix != cur_objix_spix) {
   d82a2:	f1bb 0f00 	cmp.w	fp, #0
   d82a6:	f43f addd 	beq.w	d7e64 <spiffs_object_truncate+0xb8>
    cur_objix_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, data_spix);
   d82aa:	f04f 0800 	mov.w	r8, #0
      if (prev_objix_spix != (spiffs_span_ix)-1) {
   d82ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d82b2:	459b      	cmp	fp, r3
   d82b4:	d02e      	beq.n	d8314 <spiffs_object_truncate+0x568>
        SPIFFS_DBG("truncate: delete objix page "_SPIPRIpg":"_SPIPRIsp"\n", objix_pix, prev_objix_spix);
   d82b6:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
   d82ba:	4836      	ldr	r0, [pc, #216]	; (d8394 <spiffs_object_truncate+0x5e8>)
   d82bc:	465a      	mov	r2, fp
   d82be:	f008 fb83 	bl	e09c8 <spiffsParticleInfoLog>
        res = spiffs_page_index_check(fs, fd, objix_pix, prev_objix_spix);
   d82c2:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
   d82c6:	465b      	mov	r3, fp
   d82c8:	4629      	mov	r1, r5
   d82ca:	4620      	mov	r0, r4
   d82cc:	f7fd fd42 	bl	d5d54 <spiffs_page_index_check>
        SPIFFS_CHECK_RES(res);
   d82d0:	f1b0 0a00 	subs.w	sl, r0, #0
   d82d4:	f6ff ae34 	blt.w	d7f40 <spiffs_object_truncate+0x194>
        res = spiffs_page_delete(fs, objix_pix);
   d82d8:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
   d82dc:	4620      	mov	r0, r4
   d82de:	f7fe fb26 	bl	d692e <spiffs_page_delete>
        SPIFFS_CHECK_RES(res);
   d82e2:	f1b0 0a00 	subs.w	sl, r0, #0
   d82e6:	f6ff ae2b 	blt.w	d7f40 <spiffs_object_truncate+0x194>
        spiffs_cb_object_event(fs, (spiffs_page_object_ix *)0,
   d82ea:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   d82ee:	9301      	str	r3, [sp, #4]
   d82f0:	2100      	movs	r1, #0
   d82f2:	9b06      	ldr	r3, [sp, #24]
   d82f4:	9102      	str	r1, [sp, #8]
   d82f6:	885b      	ldrh	r3, [r3, #2]
   d82f8:	9300      	str	r3, [sp, #0]
   d82fa:	2202      	movs	r2, #2
   d82fc:	88eb      	ldrh	r3, [r5, #6]
   d82fe:	4620      	mov	r0, r4
   d8300:	f7fe fc00 	bl	d6b04 <spiffs_cb_object_event>
        if (prev_objix_spix > 0) {
   d8304:	f1bb 0f00 	cmp.w	fp, #0
   d8308:	d004      	beq.n	d8314 <spiffs_object_truncate+0x568>
          if (remove_full == 0) {
   d830a:	f1b9 0f00 	cmp.w	r9, #0
   d830e:	f43f ae1d 	beq.w	d7f4c <spiffs_object_truncate+0x1a0>
          fd->size = cur_size;
   d8312:	60ae      	str	r6, [r5, #8]
      if (cur_objix_spix == 0) {
   d8314:	f1b8 0f00 	cmp.w	r8, #0
   d8318:	f47f ae30 	bne.w	d7f7c <spiffs_object_truncate+0x1d0>
        objix_pix = fd->objix_hdr_pix;
   d831c:	89ab      	ldrh	r3, [r5, #12]
   d831e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
      SPIFFS_DBG("truncate: load objix page "_SPIPRIpg":"_SPIPRIsp" for data spix:"_SPIPRIsp"\n", objix_pix, cur_objix_spix, data_spix);
   d8322:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
   d8326:	481c      	ldr	r0, [pc, #112]	; (d8398 <spiffs_object_truncate+0x5ec>)
   d8328:	463b      	mov	r3, r7
   d832a:	4642      	mov	r2, r8
   d832c:	f008 fb4c 	bl	e09c8 <spiffsParticleInfoLog>
      res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ,
   d8330:	69e2      	ldr	r2, [r4, #28]
   d8332:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
   d8336:	6923      	ldr	r3, [r4, #16]
   d8338:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   d833a:	fb02 3301 	mla	r3, r2, r1, r3
   d833e:	e9cd 2000 	strd	r2, r0, [sp]
   d8342:	2116      	movs	r1, #22
   d8344:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
   d8348:	4620      	mov	r0, r4
   d834a:	f7fb ff6d 	bl	d4228 <spiffs_phys_rd>
      SPIFFS_CHECK_RES(res);
   d834e:	f1b0 0a00 	subs.w	sl, r0, #0
   d8352:	f6ff adf5 	blt.w	d7f40 <spiffs_object_truncate+0x194>
      SPIFFS_VALIDATE_OBJIX(objix_hdr->p_hdr, fd->obj_id, cur_objix_spix);
   d8356:	9b06      	ldr	r3, [sp, #24]
   d8358:	791b      	ldrb	r3, [r3, #4]
   d835a:	07d8      	lsls	r0, r3, #31
   d835c:	d492      	bmi.n	d8284 <spiffs_object_truncate+0x4d8>
   d835e:	0619      	lsls	r1, r3, #24
   d8360:	d593      	bpl.n	d828a <spiffs_object_truncate+0x4de>
   d8362:	079a      	lsls	r2, r3, #30
   d8364:	d494      	bmi.n	d8290 <spiffs_object_truncate+0x4e4>
   d8366:	075b      	lsls	r3, r3, #29
   d8368:	d495      	bmi.n	d8296 <spiffs_object_truncate+0x4ea>
   d836a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d836e:	2b00      	cmp	r3, #0
   d8370:	da91      	bge.n	d8296 <spiffs_object_truncate+0x4ea>
   d8372:	9b06      	ldr	r3, [sp, #24]
   d8374:	885b      	ldrh	r3, [r3, #2]
   d8376:	4543      	cmp	r3, r8
   d8378:	d190      	bne.n	d829c <spiffs_object_truncate+0x4f0>
      fd->cursor_objix_pix = objix_pix;
   d837a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   d837e:	81eb      	strh	r3, [r5, #14]
      fd->cursor_objix_spix = cur_objix_spix;
   d8380:	f8a5 8010 	strh.w	r8, [r5, #16]
      fd->offset = cur_size;
   d8384:	616e      	str	r6, [r5, #20]
      prev_objix_spix = cur_objix_spix;
   d8386:	e569      	b.n	d7e5c <spiffs_object_truncate+0xb0>
   d8388:	000e6b97 	.word	0x000e6b97
   d838c:	000e6bbc 	.word	0x000e6bbc
   d8390:	000e6bfd 	.word	0x000e6bfd
   d8394:	000e696b 	.word	0x000e696b
   d8398:	000e69c8 	.word	0x000e69c8
   d839c:	ffffd8e4 	.word	0xffffd8e4
   d83a0:	ffffd8ec 	.word	0xffffd8ec
   d83a4:	ffffd8eb 	.word	0xffffd8eb
   d83a8:	ffffd8ea 	.word	0xffffd8ea
   d83ac:	ffffd8e3 	.word	0xffffd8e3

000d83b0 <spiffs_object_read>:
    u8_t *dst) {
   d83b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  spiffs *fs = fd->fs;
   d83b4:	6807      	ldr	r7, [r0, #0]
    u8_t *dst) {
   d83b6:	b089      	sub	sp, #36	; 0x24
  spiffs_span_ix data_spix = offset / SPIFFS_DATA_PAGE_SIZE(fs);
   d83b8:	69fc      	ldr	r4, [r7, #28]
    u8_t *dst) {
   d83ba:	9103      	str	r1, [sp, #12]
   d83bc:	e9cd 3204 	strd	r3, r2, [sp, #16]
  spiffs_page_object_ix_header *objix_hdr = (spiffs_page_object_ix_header *)fs->work;
   d83c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   d83c2:	9302      	str	r3, [sp, #8]
    u8_t *dst) {
   d83c4:	4606      	mov	r6, r0
  spiffs_span_ix data_spix = offset / SPIFFS_DATA_PAGE_SIZE(fs);
   d83c6:	3c05      	subs	r4, #5
  u32_t cur_offset = offset;
   d83c8:	4688      	mov	r8, r1
  spiffs_span_ix data_spix = offset / SPIFFS_DATA_PAGE_SIZE(fs);
   d83ca:	fbb1 f4f4 	udiv	r4, r1, r4
  spiffs_span_ix prev_objix_spix = (spiffs_span_ix)-1;
   d83ce:	f64f 7bff 	movw	fp, #65535	; 0xffff
  spiffs_span_ix data_spix = offset / SPIFFS_DATA_PAGE_SIZE(fs);
   d83d2:	b2a4      	uxth	r4, r4
  s32_t res = SPIFFS_OK;
   d83d4:	2000      	movs	r0, #0
  while (cur_offset < offset + len) {
   d83d6:	9b03      	ldr	r3, [sp, #12]
   d83d8:	9a05      	ldr	r2, [sp, #20]
   d83da:	eb03 0a02 	add.w	sl, r3, r2
   d83de:	45c2      	cmp	sl, r8
   d83e0:	f240 80cb 	bls.w	d857a <spiffs_object_read+0x1ca>
    if (fd->ix_map && data_spix >= fd->ix_map->start_spix && data_spix <= fd->ix_map->end_spix
   d83e4:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   d83e6:	b162      	cbz	r2, d8402 <spiffs_object_read+0x52>
   d83e8:	8913      	ldrh	r3, [r2, #8]
   d83ea:	42a3      	cmp	r3, r4
   d83ec:	d809      	bhi.n	d8402 <spiffs_object_read+0x52>
   d83ee:	8951      	ldrh	r1, [r2, #10]
   d83f0:	42a1      	cmp	r1, r4
   d83f2:	d306      	bcc.n	d8402 <spiffs_object_read+0x52>
        && fd->ix_map->map_buf[data_spix - fd->ix_map->start_spix]) {
   d83f4:	6812      	ldr	r2, [r2, #0]
   d83f6:	1ae3      	subs	r3, r4, r3
   d83f8:	f832 9013 	ldrh.w	r9, [r2, r3, lsl #1]
   d83fc:	f1b9 0f00 	cmp.w	r9, #0
   d8400:	d158      	bne.n	d84b4 <spiffs_object_read+0x104>
      cur_objix_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, data_spix);
   d8402:	69fb      	ldr	r3, [r7, #28]
   d8404:	f1a3 022d 	sub.w	r2, r3, #45	; 0x2d
   d8408:	ebb4 0f52 	cmp.w	r4, r2, lsr #1
   d840c:	ea4f 0552 	mov.w	r5, r2, lsr #1
   d8410:	f0c0 80da 	bcc.w	d85c8 <spiffs_object_read+0x218>
   d8414:	3b08      	subs	r3, #8
   d8416:	1b65      	subs	r5, r4, r5
   d8418:	085b      	lsrs	r3, r3, #1
   d841a:	fbb5 f5f3 	udiv	r5, r5, r3
   d841e:	3501      	adds	r5, #1
   d8420:	b2ad      	uxth	r5, r5
      if (prev_objix_spix != cur_objix_spix) {
   d8422:	45ab      	cmp	fp, r5
   d8424:	d03d      	beq.n	d84a2 <spiffs_object_read+0xf2>
        if (cur_objix_spix == 0) {
   d8426:	2d00      	cmp	r5, #0
   d8428:	f040 808a 	bne.w	d8540 <spiffs_object_read+0x190>
          objix_pix = fd->objix_hdr_pix;
   d842c:	89b3      	ldrh	r3, [r6, #12]
   d842e:	f8ad 301e 	strh.w	r3, [sp, #30]
   d8432:	2500      	movs	r5, #0
        SPIFFS_DBG("read: load objix page "_SPIPRIpg":"_SPIPRIsp" for data spix:"_SPIPRIsp"\n", objix_pix, cur_objix_spix, data_spix);
   d8434:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   d8438:	4866      	ldr	r0, [pc, #408]	; (d85d4 <spiffs_object_read+0x224>)
   d843a:	4623      	mov	r3, r4
   d843c:	462a      	mov	r2, r5
   d843e:	f008 fac3 	bl	e09c8 <spiffsParticleInfoLog>
        res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ,
   d8442:	69fa      	ldr	r2, [r7, #28]
   d8444:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   d8448:	693b      	ldr	r3, [r7, #16]
   d844a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   d844c:	fb02 3301 	mla	r3, r2, r1, r3
   d8450:	e9cd 2000 	strd	r2, r0, [sp]
   d8454:	2116      	movs	r1, #22
   d8456:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
   d845a:	4638      	mov	r0, r7
   d845c:	f7fb fee4 	bl	d4228 <spiffs_phys_rd>
        SPIFFS_CHECK_RES(res);
   d8460:	2800      	cmp	r0, #0
   d8462:	f2c0 808a 	blt.w	d857a <spiffs_object_read+0x1ca>
        SPIFFS_VALIDATE_OBJIX(objix->p_hdr, fd->obj_id, cur_objix_spix);
   d8466:	9b02      	ldr	r3, [sp, #8]
   d8468:	791b      	ldrb	r3, [r3, #4]
   d846a:	07d8      	lsls	r0, r3, #31
   d846c:	f100 80a0 	bmi.w	d85b0 <spiffs_object_read+0x200>
   d8470:	0619      	lsls	r1, r3, #24
   d8472:	f140 809f 	bpl.w	d85b4 <spiffs_object_read+0x204>
   d8476:	079a      	lsls	r2, r3, #30
   d8478:	f100 809e 	bmi.w	d85b8 <spiffs_object_read+0x208>
   d847c:	075b      	lsls	r3, r3, #29
   d847e:	f100 809d 	bmi.w	d85bc <spiffs_object_read+0x20c>
   d8482:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
   d8486:	2b00      	cmp	r3, #0
   d8488:	f280 8098 	bge.w	d85bc <spiffs_object_read+0x20c>
   d848c:	9b02      	ldr	r3, [sp, #8]
   d848e:	885b      	ldrh	r3, [r3, #2]
   d8490:	42ab      	cmp	r3, r5
   d8492:	f040 8095 	bne.w	d85c0 <spiffs_object_read+0x210>
        fd->cursor_objix_pix = objix_pix;
   d8496:	f8bd 301e 	ldrh.w	r3, [sp, #30]
        fd->offset = cur_offset;
   d849a:	f8c6 8014 	str.w	r8, [r6, #20]
        fd->cursor_objix_pix = objix_pix;
   d849e:	81f3      	strh	r3, [r6, #14]
        fd->cursor_objix_spix = cur_objix_spix;
   d84a0:	8235      	strh	r5, [r6, #16]
      if (cur_objix_spix == 0) {
   d84a2:	2d00      	cmp	r5, #0
   d84a4:	d16c      	bne.n	d8580 <spiffs_object_read+0x1d0>
        data_pix = ((spiffs_page_ix*)((u8_t *)objix_hdr + sizeof(spiffs_page_object_ix_header)))[data_spix];
   d84a6:	9b02      	ldr	r3, [sp, #8]
   d84a8:	eb03 0344 	add.w	r3, r3, r4, lsl #1
   d84ac:	f04f 0b00 	mov.w	fp, #0
   d84b0:	f8b3 902d 	ldrh.w	r9, [r3, #45]	; 0x2d
    len_to_read = MIN(len_to_read, SPIFFS_DATA_PAGE_SIZE(fs) - (cur_offset % SPIFFS_DATA_PAGE_SIZE(fs)));
   d84b4:	69f9      	ldr	r1, [r7, #28]
   d84b6:	1f4a      	subs	r2, r1, #5
   d84b8:	fbb8 f3f2 	udiv	r3, r8, r2
   d84bc:	fb02 8013 	mls	r0, r2, r3, r8
    len_to_read = MIN(len_to_read, fd->size);
   d84c0:	68b3      	ldr	r3, [r6, #8]
    u32_t len_to_read = offset + len - cur_offset;
   d84c2:	ebaa 0a08 	sub.w	sl, sl, r8
   d84c6:	459a      	cmp	sl, r3
   d84c8:	bf28      	it	cs
   d84ca:	469a      	movcs	sl, r3
    SPIFFS_DBG("read: offset:"_SPIPRIi" rd:"_SPIPRIi" data spix:"_SPIPRIsp" is data_pix:"_SPIPRIpg" addr:"_SPIPRIad"\n", cur_offset, len_to_read, data_spix, data_pix,
   d84cc:	693b      	ldr	r3, [r7, #16]
    len_to_read = MIN(len_to_read, SPIFFS_DATA_PAGE_SIZE(fs) - (cur_offset % SPIFFS_DATA_PAGE_SIZE(fs)));
   d84ce:	1a15      	subs	r5, r2, r0
    SPIFFS_DBG("read: offset:"_SPIPRIi" rd:"_SPIPRIi" data spix:"_SPIPRIsp" is data_pix:"_SPIPRIpg" addr:"_SPIPRIad"\n", cur_offset, len_to_read, data_spix, data_pix,
   d84d0:	3305      	adds	r3, #5
    len_to_read = MIN(len_to_read, fd->size);
   d84d2:	4555      	cmp	r5, sl
    SPIFFS_DBG("read: offset:"_SPIPRIi" rd:"_SPIPRIi" data spix:"_SPIPRIsp" is data_pix:"_SPIPRIpg" addr:"_SPIPRIad"\n", cur_offset, len_to_read, data_spix, data_pix,
   d84d4:	4403      	add	r3, r0
   d84d6:	fb09 3301 	mla	r3, r9, r1, r3
    len_to_read = MIN(len_to_read, fd->size);
   d84da:	bf28      	it	cs
   d84dc:	4655      	movcs	r5, sl
    SPIFFS_DBG("read: offset:"_SPIPRIi" rd:"_SPIPRIi" data spix:"_SPIPRIsp" is data_pix:"_SPIPRIpg" addr:"_SPIPRIad"\n", cur_offset, len_to_read, data_spix, data_pix,
   d84de:	e9cd 9300 	strd	r9, r3, [sp]
   d84e2:	483d      	ldr	r0, [pc, #244]	; (d85d8 <spiffs_object_read+0x228>)
   d84e4:	4623      	mov	r3, r4
   d84e6:	462a      	mov	r2, r5
   d84e8:	4641      	mov	r1, r8
   d84ea:	f008 fa6d 	bl	e09c8 <spiffsParticleInfoLog>
    if (len_to_read <= 0) {
   d84ee:	2d00      	cmp	r5, #0
   d84f0:	d068      	beq.n	d85c4 <spiffs_object_read+0x214>
    res = spiffs_page_data_check(fs, fd, data_pix, data_spix);
   d84f2:	4623      	mov	r3, r4
   d84f4:	464a      	mov	r2, r9
   d84f6:	1d31      	adds	r1, r6, #4
   d84f8:	4638      	mov	r0, r7
   d84fa:	f7fd fd51 	bl	d5fa0 <spiffs_page_data_check.isra.0>
    SPIFFS_CHECK_RES(res);
   d84fe:	2800      	cmp	r0, #0
   d8500:	db3b      	blt.n	d857a <spiffs_object_read+0x1ca>
    res = _spiffs_rd(
   d8502:	69f8      	ldr	r0, [r7, #28]
   d8504:	6939      	ldr	r1, [r7, #16]
   d8506:	1f43      	subs	r3, r0, #5
   d8508:	3105      	adds	r1, #5
   d850a:	fbb8 f2f3 	udiv	r2, r8, r3
   d850e:	fb03 8212 	mls	r2, r3, r2, r8
   d8512:	1853      	adds	r3, r2, r1
   d8514:	9a04      	ldr	r2, [sp, #16]
   d8516:	fb00 3309 	mla	r3, r0, r9, r3
   d851a:	e9cd 5200 	strd	r5, r2, [sp]
   d851e:	2117      	movs	r1, #23
   d8520:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
   d8524:	4638      	mov	r0, r7
   d8526:	f7fb fe7f 	bl	d4228 <spiffs_phys_rd>
    SPIFFS_CHECK_RES(res);
   d852a:	2800      	cmp	r0, #0
   d852c:	db25      	blt.n	d857a <spiffs_object_read+0x1ca>
    dst += len_to_read;
   d852e:	9b04      	ldr	r3, [sp, #16]
    cur_offset += len_to_read;
   d8530:	44a8      	add	r8, r5
    dst += len_to_read;
   d8532:	442b      	add	r3, r5
    data_spix++;
   d8534:	3401      	adds	r4, #1
    dst += len_to_read;
   d8536:	9304      	str	r3, [sp, #16]
    fd->offset = cur_offset;
   d8538:	f8c6 8014 	str.w	r8, [r6, #20]
    data_spix++;
   d853c:	b2a4      	uxth	r4, r4
   d853e:	e74a      	b.n	d83d6 <spiffs_object_read+0x26>
          SPIFFS_DBG("read: find objix "_SPIPRIid":"_SPIPRIsp"\n", fd->obj_id, cur_objix_spix);
   d8540:	88f1      	ldrh	r1, [r6, #6]
   d8542:	4826      	ldr	r0, [pc, #152]	; (d85dc <spiffs_object_read+0x22c>)
   d8544:	462a      	mov	r2, r5
   d8546:	f008 fa3f 	bl	e09c8 <spiffsParticleInfoLog>
          if (fd->cursor_objix_spix == cur_objix_spix) {
   d854a:	8a33      	ldrh	r3, [r6, #16]
   d854c:	42ab      	cmp	r3, r5
   d854e:	d103      	bne.n	d8558 <spiffs_object_read+0x1a8>
            objix_pix = fd->cursor_objix_pix;
   d8550:	89f3      	ldrh	r3, [r6, #14]
   d8552:	f8ad 301e 	strh.w	r3, [sp, #30]
   d8556:	e76d      	b.n	d8434 <spiffs_object_read+0x84>
            res = spiffs_obj_lu_find_id_and_span(fs, fd->obj_id | SPIFFS_OBJ_ID_IX_FLAG, cur_objix_spix, 0, &objix_pix);
   d8558:	88f1      	ldrh	r1, [r6, #6]
   d855a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
   d855e:	f10d 031e 	add.w	r3, sp, #30
   d8562:	ea6f 4151 	mvn.w	r1, r1, lsr #17
   d8566:	9300      	str	r3, [sp, #0]
   d8568:	462a      	mov	r2, r5
   d856a:	2300      	movs	r3, #0
   d856c:	b289      	uxth	r1, r1
   d856e:	4638      	mov	r0, r7
   d8570:	f7fe f8dc 	bl	d672c <spiffs_obj_lu_find_id_and_span>
            SPIFFS_CHECK_RES(res);
   d8574:	2800      	cmp	r0, #0
   d8576:	f6bf af5d 	bge.w	d8434 <spiffs_object_read+0x84>
}
   d857a:	b009      	add	sp, #36	; 0x24
   d857c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8580:	69fa      	ldr	r2, [r7, #28]
        data_pix = ((spiffs_page_ix*)((u8_t *)objix + sizeof(spiffs_page_object_ix)))[SPIFFS_OBJ_IX_ENTRY(fs, data_spix)];
   d8582:	f1a2 012d 	sub.w	r1, r2, #45	; 0x2d
   d8586:	ebb4 0f51 	cmp.w	r4, r1, lsr #1
   d858a:	ea4f 0351 	mov.w	r3, r1, lsr #1
   d858e:	bf21      	itttt	cs
   d8590:	3a08      	subcs	r2, #8
   d8592:	1ae1      	subcs	r1, r4, r3
   d8594:	0852      	lsrcs	r2, r2, #1
   d8596:	fbb1 f3f2 	udivcs	r3, r1, r2
   d859a:	bf2a      	itet	cs
   d859c:	fb02 1313 	mlscs	r3, r2, r3, r1
   d85a0:	1d23      	addcc	r3, r4, #4
   d85a2:	3304      	addcs	r3, #4
   d85a4:	9a02      	ldr	r2, [sp, #8]
   d85a6:	005b      	lsls	r3, r3, #1
   d85a8:	46ab      	mov	fp, r5
   d85aa:	f832 9003 	ldrh.w	r9, [r2, r3]
   d85ae:	e781      	b.n	d84b4 <spiffs_object_read+0x104>
        SPIFFS_VALIDATE_OBJIX(objix->p_hdr, fd->obj_id, cur_objix_spix);
   d85b0:	480b      	ldr	r0, [pc, #44]	; (d85e0 <spiffs_object_read+0x230>)
   d85b2:	e7e2      	b.n	d857a <spiffs_object_read+0x1ca>
   d85b4:	480b      	ldr	r0, [pc, #44]	; (d85e4 <spiffs_object_read+0x234>)
   d85b6:	e7e0      	b.n	d857a <spiffs_object_read+0x1ca>
   d85b8:	480b      	ldr	r0, [pc, #44]	; (d85e8 <spiffs_object_read+0x238>)
   d85ba:	e7de      	b.n	d857a <spiffs_object_read+0x1ca>
   d85bc:	480b      	ldr	r0, [pc, #44]	; (d85ec <spiffs_object_read+0x23c>)
   d85be:	e7dc      	b.n	d857a <spiffs_object_read+0x1ca>
   d85c0:	480b      	ldr	r0, [pc, #44]	; (d85f0 <spiffs_object_read+0x240>)
   d85c2:	e7da      	b.n	d857a <spiffs_object_read+0x1ca>
      res = SPIFFS_ERR_END_OF_OBJECT;
   d85c4:	480b      	ldr	r0, [pc, #44]	; (d85f4 <spiffs_object_read+0x244>)
   d85c6:	e7d8      	b.n	d857a <spiffs_object_read+0x1ca>
      if (prev_objix_spix != cur_objix_spix) {
   d85c8:	f1bb 0f00 	cmp.w	fp, #0
   d85cc:	f47f af2e 	bne.w	d842c <spiffs_object_read+0x7c>
   d85d0:	e769      	b.n	d84a6 <spiffs_object_read+0xf6>
   d85d2:	bf00      	nop
   d85d4:	000e6c49 	.word	0x000e6c49
   d85d8:	000e6c7d 	.word	0x000e6c7d
   d85dc:	000e6c2d 	.word	0x000e6c2d
   d85e0:	ffffd8e4 	.word	0xffffd8e4
   d85e4:	ffffd8ec 	.word	0xffffd8ec
   d85e8:	ffffd8eb 	.word	0xffffd8eb
   d85ec:	ffffd8ea 	.word	0xffffd8ea
   d85f0:	ffffd8e3 	.word	0xffffd8e3
   d85f4:	ffffd8ed 	.word	0xffffd8ed

000d85f8 <spiffs_obj_lu_find_free_obj_id>:
s32_t spiffs_obj_lu_find_free_obj_id(spiffs *fs, spiffs_obj_id *obj_id, const u8_t *conflicting_name) {
   d85f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d85fc:	4605      	mov	r5, r0
  u32_t max_objects = (fs->block_count * SPIFFS_OBJ_LOOKUP_MAX_ENTRIES(fs)) / 2;
   d85fe:	e9d0 0307 	ldrd	r0, r3, [r0, #28]
s32_t spiffs_obj_lu_find_free_obj_id(spiffs *fs, spiffs_obj_id *obj_id, const u8_t *conflicting_name) {
   d8602:	4690      	mov	r8, r2
   d8604:	2401      	movs	r4, #1
  u32_t max_objects = (fs->block_count * SPIFFS_OBJ_LOOKUP_MAX_ENTRIES(fs)) / 2;
   d8606:	69aa      	ldr	r2, [r5, #24]
   d8608:	fbb2 f2f0 	udiv	r2, r2, r0
   d860c:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
s32_t spiffs_obj_lu_find_free_obj_id(spiffs *fs, spiffs_obj_id *obj_id, const u8_t *conflicting_name) {
   d8610:	460f      	mov	r7, r1
  u32_t max_objects = (fs->block_count * SPIFFS_OBJ_LOOKUP_MAX_ENTRIES(fs)) / 2;
   d8612:	ea4f 0142 	mov.w	r1, r2, lsl #1
   d8616:	bf8c      	ite	hi
   d8618:	4621      	movhi	r1, r4
   d861a:	fbb1 f1f0 	udivls	r1, r1, r0
   d861e:	1a52      	subs	r2, r2, r1
   d8620:	4353      	muls	r3, r2
   d8622:	085b      	lsrs	r3, r3, #1
  state.max_obj_id = max_objects + 1;
   d8624:	3301      	adds	r3, #1
s32_t spiffs_obj_lu_find_free_obj_id(spiffs *fs, spiffs_obj_id *obj_id, const u8_t *conflicting_name) {
   d8626:	b08d      	sub	sp, #52	; 0x34
  state.max_obj_id = max_objects + 1;
   d8628:	b29a      	uxth	r2, r3
  if (state.max_obj_id & SPIFFS_OBJ_ID_IX_FLAG) {
   d862a:	041b      	lsls	r3, r3, #16
    state.max_obj_id = ((spiffs_obj_id)-1) & ~SPIFFS_OBJ_ID_IX_FLAG;
   d862c:	bf44      	itt	mi
   d862e:	f647 73ff 	movwmi	r3, #32767	; 0x7fff
   d8632:	f8ad 3026 	strhmi.w	r3, [sp, #38]	; 0x26
  state.compaction = 0;
   d8636:	f04f 0300 	mov.w	r3, #0
  state.conflicting_name = conflicting_name;
   d863a:	e9cd 380a 	strd	r3, r8, [sp, #40]	; 0x28
        SPIFFS_DBG("free_obj_id: COMP select index:"_SPIPRIi" min_count:"_SPIPRIi" min:"_SPIPRIid" max:"_SPIPRIid" compact:"_SPIPRIi"\n", min_i, min_count, state.min_obj_id, state.max_obj_id, state.compaction);
   d863e:	f8df 91a4 	ldr.w	r9, [pc, #420]	; d87e4 <spiffs_obj_lu_find_free_obj_id+0x1ec>
          SPIFFS_DBG("free_obj_id: COMP SEL chunk:"_SPIPRIi" min:"_SPIPRIid" -> "_SPIPRIid"\n", state.compaction, state.min_obj_id, state.min_obj_id + min_i *  state.compaction);
   d8642:	f8df a1a4 	ldr.w	sl, [pc, #420]	; d87e8 <spiffs_obj_lu_find_free_obj_id+0x1f0>
      SPIFFS_DBG("free_obj_id: COMP min:"_SPIPRIid" max:"_SPIPRIid" compact:"_SPIPRIi"\n", state.min_obj_id, state.max_obj_id, state.compaction);
   d8646:	f8df b1a4 	ldr.w	fp, [pc, #420]	; d87ec <spiffs_obj_lu_find_free_obj_id+0x1f4>
  state.min_obj_id = 1;
   d864a:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
  state.max_obj_id = max_objects + 1;
   d864e:	bf58      	it	pl
   d8650:	f8ad 2026 	strhpl.w	r2, [sp, #38]	; 0x26
    if (state.max_obj_id - state.min_obj_id <= (spiffs_obj_id)SPIFFS_CFG_LOG_PAGE_SZ(fs)*8) {
   d8654:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
   d8658:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   d865c:	f8d5 e01c 	ldr.w	lr, [r5, #28]
   d8660:	1ad1      	subs	r1, r2, r3
   d8662:	fa1f f08e 	uxth.w	r0, lr
   d8666:	ebb1 0fc0 	cmp.w	r1, r0, lsl #3
   d866a:	dc39      	bgt.n	d86e0 <spiffs_obj_lu_find_free_obj_id+0xe8>
      SPIFFS_DBG("free_obj_id: BITM min:"_SPIPRIid" max:"_SPIPRIid"\n", state.min_obj_id, state.max_obj_id);
   d866c:	4619      	mov	r1, r3
   d866e:	4857      	ldr	r0, [pc, #348]	; (d87cc <spiffs_obj_lu_find_free_obj_id+0x1d4>)
   d8670:	f008 f9aa 	bl	e09c8 <spiffsParticleInfoLog>
      memset(fs->work, 0, SPIFFS_CFG_LOG_PAGE_SZ(fs));
   d8674:	69ea      	ldr	r2, [r5, #28]
   d8676:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   d8678:	2100      	movs	r1, #0
   d867a:	f00d f819 	bl	e56b0 <memset>
      res = spiffs_obj_lu_find_entry_visitor(fs, 0, 0, 0, 0, spiffs_obj_lu_find_free_obj_id_bitmap_v,
   d867e:	aa09      	add	r2, sp, #36	; 0x24
   d8680:	e9cd 8202 	strd	r8, r2, [sp, #8]
   d8684:	4a52      	ldr	r2, [pc, #328]	; (d87d0 <spiffs_obj_lu_find_free_obj_id+0x1d8>)
   d8686:	2300      	movs	r3, #0
   d8688:	e9cd 3200 	strd	r3, r2, [sp]
   d868c:	e9cd 3304 	strd	r3, r3, [sp, #16]
   d8690:	461a      	mov	r2, r3
   d8692:	4619      	mov	r1, r3
   d8694:	4628      	mov	r0, r5
   d8696:	f7fd fde5 	bl	d6264 <spiffs_obj_lu_find_entry_visitor>
      if (res == SPIFFS_VIS_END) res = SPIFFS_OK;
   d869a:	4b4e      	ldr	r3, [pc, #312]	; (d87d4 <spiffs_obj_lu_find_free_obj_id+0x1dc>)
   d869c:	4298      	cmp	r0, r3
   d869e:	d001      	beq.n	d86a4 <spiffs_obj_lu_find_free_obj_id+0xac>
      SPIFFS_CHECK_RES(res);
   d86a0:	2800      	cmp	r0, #0
   d86a2:	db15      	blt.n	d86d0 <spiffs_obj_lu_find_free_obj_id+0xd8>
      for (i = 0; i < SPIFFS_CFG_LOG_PAGE_SZ(fs); i++) {
   d86a4:	69ea      	ldr	r2, [r5, #28]
   d86a6:	2100      	movs	r1, #0
   d86a8:	428a      	cmp	r2, r1
   d86aa:	d101      	bne.n	d86b0 <spiffs_obj_lu_find_free_obj_id+0xb8>
          return SPIFFS_ERR_FULL;
   d86ac:	484a      	ldr	r0, [pc, #296]	; (d87d8 <spiffs_obj_lu_find_free_obj_id+0x1e0>)
   d86ae:	e00f      	b.n	d86d0 <spiffs_obj_lu_find_free_obj_id+0xd8>
        u8_t mask = fs->work[i];
   d86b0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d86b2:	5c5e      	ldrb	r6, [r3, r1]
        if (mask == 0xff) {
   d86b4:	2eff      	cmp	r6, #255	; 0xff
   d86b6:	d011      	beq.n	d86dc <spiffs_obj_lu_find_free_obj_id+0xe4>
        for (j = 0; j < 8; j++) {
   d86b8:	2300      	movs	r3, #0
          if ((mask & (1<<j)) == 0) {
   d86ba:	fa46 f003 	asr.w	r0, r6, r3
   d86be:	f010 0001 	ands.w	r0, r0, #1
   d86c2:	d108      	bne.n	d86d6 <spiffs_obj_lu_find_free_obj_id+0xde>
            *obj_id = (i<<3)+j+state.min_obj_id;
   d86c4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d86c8:	4413      	add	r3, r2
   d86ca:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d86ce:	803b      	strh	r3, [r7, #0]
}
   d86d0:	b00d      	add	sp, #52	; 0x34
   d86d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (j = 0; j < 8; j++) {
   d86d6:	3301      	adds	r3, #1
   d86d8:	2b08      	cmp	r3, #8
   d86da:	d1ee      	bne.n	d86ba <spiffs_obj_lu_find_free_obj_id+0xc2>
      for (i = 0; i < SPIFFS_CFG_LOG_PAGE_SZ(fs); i++) {
   d86dc:	3101      	adds	r1, #1
   d86de:	e7e3      	b.n	d86a8 <spiffs_obj_lu_find_free_obj_id+0xb0>
      if (state.compaction != 0) {
   d86e0:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   d86e4:	f1bc 0f00 	cmp.w	ip, #0
   d86e8:	d124      	bne.n	d8734 <spiffs_obj_lu_find_free_obj_id+0x13c>
      state.compaction = (state.max_obj_id-state.min_obj_id) / ((SPIFFS_CFG_LOG_PAGE_SZ(fs) / sizeof(u8_t)));
   d86ea:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
   d86ee:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
   d86f2:	69e8      	ldr	r0, [r5, #28]
      if (res == SPIFFS_VIS_END) res = SPIFFS_OK;
   d86f4:	4c37      	ldr	r4, [pc, #220]	; (d87d4 <spiffs_obj_lu_find_free_obj_id+0x1dc>)
      state.compaction = (state.max_obj_id-state.min_obj_id) / ((SPIFFS_CFG_LOG_PAGE_SZ(fs) / sizeof(u8_t)));
   d86f6:	1a53      	subs	r3, r2, r1
   d86f8:	fbb3 f3f0 	udiv	r3, r3, r0
      SPIFFS_DBG("free_obj_id: COMP min:"_SPIPRIid" max:"_SPIPRIid" compact:"_SPIPRIi"\n", state.min_obj_id, state.max_obj_id, state.compaction);
   d86fc:	4658      	mov	r0, fp
      state.compaction = (state.max_obj_id-state.min_obj_id) / ((SPIFFS_CFG_LOG_PAGE_SZ(fs) / sizeof(u8_t)));
   d86fe:	930a      	str	r3, [sp, #40]	; 0x28
      SPIFFS_DBG("free_obj_id: COMP min:"_SPIPRIid" max:"_SPIPRIid" compact:"_SPIPRIi"\n", state.min_obj_id, state.max_obj_id, state.compaction);
   d8700:	f008 f962 	bl	e09c8 <spiffsParticleInfoLog>
      memset(fs->work, 0, SPIFFS_CFG_LOG_PAGE_SZ(fs));
   d8704:	69ea      	ldr	r2, [r5, #28]
   d8706:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   d8708:	2100      	movs	r1, #0
   d870a:	f00c ffd1 	bl	e56b0 <memset>
      res = spiffs_obj_lu_find_entry_visitor(fs, 0, 0, 0, 0, spiffs_obj_lu_find_free_obj_id_compact_v, &state, 0, 0, 0);
   d870e:	ab09      	add	r3, sp, #36	; 0x24
   d8710:	9302      	str	r3, [sp, #8]
   d8712:	4b32      	ldr	r3, [pc, #200]	; (d87dc <spiffs_obj_lu_find_free_obj_id+0x1e4>)
   d8714:	2600      	movs	r6, #0
   d8716:	e9cd 6300 	strd	r6, r3, [sp]
   d871a:	e9cd 6604 	strd	r6, r6, [sp, #16]
   d871e:	9603      	str	r6, [sp, #12]
   d8720:	4633      	mov	r3, r6
   d8722:	4632      	mov	r2, r6
   d8724:	4631      	mov	r1, r6
   d8726:	4628      	mov	r0, r5
   d8728:	f7fd fd9c 	bl	d6264 <spiffs_obj_lu_find_entry_visitor>
      if (res == SPIFFS_VIS_END) res = SPIFFS_OK;
   d872c:	42a0      	cmp	r0, r4
   d872e:	d147      	bne.n	d87c0 <spiffs_obj_lu_find_free_obj_id+0x1c8>
      state.conflicting_name = 0; // searched for conflicting name once, no need to do it again
   d8730:	960b      	str	r6, [sp, #44]	; 0x2c
  while (res == SPIFFS_OK && free_obj_id == SPIFFS_OBJ_ID_FREE) {
   d8732:	e78f      	b.n	d8654 <spiffs_obj_lu_find_free_obj_id+0x5c>
        u8_t *map = (u8_t *)fs->work;
   d8734:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   d8736:	9107      	str	r1, [sp, #28]
        u32_t i, min_i = 0;
   d8738:	2100      	movs	r1, #0
        u8_t min_count = 0xff;
   d873a:	26ff      	movs	r6, #255	; 0xff
        for (i = 0; i < SPIFFS_CFG_LOG_PAGE_SZ(fs)/sizeof(u8_t); i++) {
   d873c:	4608      	mov	r0, r1
   d873e:	4586      	cmp	lr, r0
   d8740:	d105      	bne.n	d874e <spiffs_obj_lu_find_free_obj_id+0x156>
        if (min_count == state.compaction) {
   d8742:	45b4      	cmp	ip, r6
   d8744:	d11f      	bne.n	d8786 <spiffs_obj_lu_find_free_obj_id+0x18e>
          SPIFFS_DBG("free_obj_id: compacted table is full\n");
   d8746:	4826      	ldr	r0, [pc, #152]	; (d87e0 <spiffs_obj_lu_find_free_obj_id+0x1e8>)
   d8748:	f008 f93e 	bl	e09c8 <spiffsParticleInfoLog>
   d874c:	e7ae      	b.n	d86ac <spiffs_obj_lu_find_free_obj_id+0xb4>
          if (map[i] < min_count) {
   d874e:	9c07      	ldr	r4, [sp, #28]
   d8750:	5c24      	ldrb	r4, [r4, r0]
   d8752:	42b4      	cmp	r4, r6
   d8754:	d202      	bcs.n	d875c <spiffs_obj_lu_find_free_obj_id+0x164>
            if (min_count == 0) {
   d8756:	b11c      	cbz	r4, d8760 <spiffs_obj_lu_find_free_obj_id+0x168>
   d8758:	4626      	mov	r6, r4
   d875a:	4601      	mov	r1, r0
        for (i = 0; i < SPIFFS_CFG_LOG_PAGE_SZ(fs)/sizeof(u8_t); i++) {
   d875c:	3001      	adds	r0, #1
   d875e:	e7ee      	b.n	d873e <spiffs_obj_lu_find_free_obj_id+0x146>
   d8760:	4601      	mov	r1, r0
        SPIFFS_DBG("free_obj_id: COMP select index:"_SPIPRIi" min_count:"_SPIPRIi" min:"_SPIPRIid" max:"_SPIPRIid" compact:"_SPIPRIi"\n", min_i, min_count, state.min_obj_id, state.max_obj_id, state.compaction);
   d8762:	e9cd 2c00 	strd	r2, ip, [sp]
   d8766:	4648      	mov	r0, r9
   d8768:	4622      	mov	r2, r4
   d876a:	9107      	str	r1, [sp, #28]
   d876c:	f008 f92c 	bl	e09c8 <spiffsParticleInfoLog>
        if (min_count == 0) {
   d8770:	9907      	ldr	r1, [sp, #28]
   d8772:	980a      	ldr	r0, [sp, #40]	; 0x28
   d8774:	b28e      	uxth	r6, r1
   d8776:	b944      	cbnz	r4, d878a <spiffs_obj_lu_find_free_obj_id+0x192>
          *obj_id = min_i * state.compaction + state.min_obj_id;
   d8778:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
   d877c:	fb10 1606 	smlabb	r6, r0, r6, r1
   d8780:	803e      	strh	r6, [r7, #0]
          return SPIFFS_OK;
   d8782:	4620      	mov	r0, r4
   d8784:	e7a4      	b.n	d86d0 <spiffs_obj_lu_find_free_obj_id+0xd8>
   d8786:	4634      	mov	r4, r6
   d8788:	e7eb      	b.n	d8762 <spiffs_obj_lu_find_free_obj_id+0x16a>
          SPIFFS_DBG("free_obj_id: COMP SEL chunk:"_SPIPRIi" min:"_SPIPRIid" -> "_SPIPRIid"\n", state.compaction, state.min_obj_id, state.min_obj_id + min_i *  state.compaction);
   d878a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d878e:	fb01 2300 	mla	r3, r1, r0, r2
   d8792:	4601      	mov	r1, r0
   d8794:	4650      	mov	r0, sl
   d8796:	f008 f917 	bl	e09c8 <spiffsParticleInfoLog>
          state.min_obj_id += min_i *  state.compaction;
   d879a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   d879e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
        if ((state.max_obj_id - state.min_obj_id <= (spiffs_obj_id)SPIFFS_CFG_LOG_PAGE_SZ(fs)*8)) {
   d87a2:	8baa      	ldrh	r2, [r5, #28]
          state.min_obj_id += min_i *  state.compaction;
   d87a4:	fb13 1606 	smlabb	r6, r3, r6, r1
   d87a8:	b2b6      	uxth	r6, r6
          state.max_obj_id = state.min_obj_id + state.compaction;
   d87aa:	4433      	add	r3, r6
   d87ac:	b29b      	uxth	r3, r3
   d87ae:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        if ((state.max_obj_id - state.min_obj_id <= (spiffs_obj_id)SPIFFS_CFG_LOG_PAGE_SZ(fs)*8)) {
   d87b2:	1b9b      	subs	r3, r3, r6
   d87b4:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
          state.min_obj_id += min_i *  state.compaction;
   d87b8:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
        if ((state.max_obj_id - state.min_obj_id <= (spiffs_obj_id)SPIFFS_CFG_LOG_PAGE_SZ(fs)*8)) {
   d87bc:	dc95      	bgt.n	d86ea <spiffs_obj_lu_find_free_obj_id+0xf2>
   d87be:	e749      	b.n	d8654 <spiffs_obj_lu_find_free_obj_id+0x5c>
      SPIFFS_CHECK_RES(res);
   d87c0:	2800      	cmp	r0, #0
   d87c2:	db85      	blt.n	d86d0 <spiffs_obj_lu_find_free_obj_id+0xd8>
      state.conflicting_name = 0; // searched for conflicting name once, no need to do it again
   d87c4:	960b      	str	r6, [sp, #44]	; 0x2c
  while (res == SPIFFS_OK && free_obj_id == SPIFFS_OBJ_ID_FREE) {
   d87c6:	f43f af45 	beq.w	d8654 <spiffs_obj_lu_find_free_obj_id+0x5c>
   d87ca:	e781      	b.n	d86d0 <spiffs_obj_lu_find_free_obj_id+0xd8>
   d87cc:	000e6cbe 	.word	0x000e6cbe
   d87d0:	000d5e99 	.word	0x000d5e99
   d87d4:	ffffd8a8 	.word	0xffffd8a8
   d87d8:	ffffd8ef 	.word	0xffffd8ef
   d87dc:	000d6169 	.word	0x000d6169
   d87e0:	000e6d13 	.word	0x000e6d13
   d87e4:	000e6d39 	.word	0x000e6d39
   d87e8:	000e6d86 	.word	0x000e6d86
   d87ec:	000e6ce3 	.word	0x000e6ce3

000d87f0 <spiffs_fd_find_new>:
#endif

s32_t spiffs_fd_find_new(spiffs *fs, spiffs_fd **fd, const char *name) {
   d87f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d87f4:	4604      	mov	r4, r0
   d87f6:	4689      	mov	r9, r1
#if SPIFFS_TEMPORAL_FD_CACHE
  u32_t i;
  u16_t min_score = 0xffff;
  u32_t cand_ix = (u32_t)-1;
  u32_t name_hash = name ? spiffs_hash(fs, (const u8_t *)name) : 0;
   d87f8:	4615      	mov	r5, r2
   d87fa:	4610      	mov	r0, r2
   d87fc:	b10a      	cbz	r2, d8802 <spiffs_fd_find_new+0x12>
   d87fe:	f7fd fbbd 	bl	d5f7c <spiffs_hash.isra.0>
  spiffs_fd *fds = (spiffs_fd *)fs->fd_space;
   d8802:	6be3      	ldr	r3, [r4, #60]	; 0x3c

  if (name) {
   d8804:	b125      	cbz	r5, d8810 <spiffs_fd_find_new+0x20>
   d8806:	461a      	mov	r2, r3
    // first, decrease score of all closed descriptors
    for (i = 0; i < fs->fd_count; i++) {
   d8808:	2700      	movs	r7, #0
   d880a:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d880c:	42b9      	cmp	r1, r7
   d880e:	d80d      	bhi.n	d882c <spiffs_fd_find_new+0x3c>
      }
    }
  }

  // find the free fd with least score or name match
  for (i = 0; i < fs->fd_count; i++) {
   d8810:	f8d4 8040 	ldr.w	r8, [r4, #64]	; 0x40
   d8814:	461f      	mov	r7, r3
  u32_t cand_ix = (u32_t)-1;
   d8816:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  u16_t min_score = 0xffff;
   d881a:	f64f 7cff 	movw	ip, #65535	; 0xffff
  for (i = 0; i < fs->fd_count; i++) {
   d881e:	2100      	movs	r1, #0
   d8820:	4588      	cmp	r8, r1
   d8822:	d10f      	bne.n	d8844 <spiffs_fd_find_new+0x54>
        cand_ix = i;
      }
    }
  }

  if (cand_ix != (u32_t)-1) {
   d8824:	1c51      	adds	r1, r2, #1
   d8826:	d120      	bne.n	d886a <spiffs_fd_find_new+0x7a>
    }
    cur_fd->file_nbr = cand_ix+1;
    *fd = cur_fd;
    return SPIFFS_OK;
  } else {
    return SPIFFS_ERR_OUT_OF_FILE_DESCS;
   d8828:	482a      	ldr	r0, [pc, #168]	; (d88d4 <spiffs_fd_find_new+0xe4>)
   d882a:	e04c      	b.n	d88c6 <spiffs_fd_find_new+0xd6>
      if (cur_fd->file_nbr == 0) {
   d882c:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
   d8830:	b929      	cbnz	r1, d883e <spiffs_fd_find_new+0x4e>
        if (cur_fd->score > 1) { // score == 0 indicates never used fd
   d8832:	8d11      	ldrh	r1, [r2, #40]	; 0x28
   d8834:	2901      	cmp	r1, #1
          cur_fd->score--;
   d8836:	bf84      	itt	hi
   d8838:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   d883c:	8511      	strhhi	r1, [r2, #40]	; 0x28
    for (i = 0; i < fs->fd_count; i++) {
   d883e:	3701      	adds	r7, #1
   d8840:	3230      	adds	r2, #48	; 0x30
   d8842:	e7e2      	b.n	d880a <spiffs_fd_find_new+0x1a>
    if (cur_fd->file_nbr == 0) {
   d8844:	f9b7 e004 	ldrsh.w	lr, [r7, #4]
   d8848:	f1be 0f00 	cmp.w	lr, #0
   d884c:	d109      	bne.n	d8862 <spiffs_fd_find_new+0x72>
      if (name && cur_fd->name_hash == name_hash) {
   d884e:	b115      	cbz	r5, d8856 <spiffs_fd_find_new+0x66>
   d8850:	6a7e      	ldr	r6, [r7, #36]	; 0x24
   d8852:	4286      	cmp	r6, r0
   d8854:	d008      	beq.n	d8868 <spiffs_fd_find_new+0x78>
      if (cur_fd->score < min_score) {
   d8856:	f8b7 e028 	ldrh.w	lr, [r7, #40]	; 0x28
   d885a:	45e6      	cmp	lr, ip
   d885c:	bf3c      	itt	cc
   d885e:	460a      	movcc	r2, r1
   d8860:	46f4      	movcc	ip, lr
  for (i = 0; i < fs->fd_count; i++) {
   d8862:	3101      	adds	r1, #1
   d8864:	3730      	adds	r7, #48	; 0x30
   d8866:	e7db      	b.n	d8820 <spiffs_fd_find_new+0x30>
   d8868:	460a      	mov	r2, r1
    spiffs_fd *cur_fd = &fds[cand_ix];
   d886a:	2130      	movs	r1, #48	; 0x30
   d886c:	fb01 3302 	mla	r3, r1, r2, r3
    if (name) {
   d8870:	b325      	cbz	r5, d88bc <spiffs_fd_find_new+0xcc>
      if (cur_fd->name_hash == name_hash && cur_fd->score > 0) {
   d8872:	6a59      	ldr	r1, [r3, #36]	; 0x24
   d8874:	4281      	cmp	r1, r0
   d8876:	d128      	bne.n	d88ca <spiffs_fd_find_new+0xda>
   d8878:	8d19      	ldrh	r1, [r3, #40]	; 0x28
   d887a:	b331      	cbz	r1, d88ca <spiffs_fd_find_new+0xda>
        fs->cursor_block_ix = SPIFFS_BLOCK_FOR_PAGE(fs, cur_fd->objix_hdr_pix);
   d887c:	e9d4 0706 	ldrd	r0, r7, [r4, #24]
   d8880:	8999      	ldrh	r1, [r3, #12]
   d8882:	fbb0 f0f7 	udiv	r0, r0, r7
   d8886:	fbb1 f1f0 	udiv	r1, r1, r0
   d888a:	85a1      	strh	r1, [r4, #44]	; 0x2c
        fs->cursor_obj_lu_entry = SPIFFS_OBJ_LOOKUP_ENTRY_FOR_PAGE(fs, cur_fd->objix_hdr_pix);
   d888c:	899d      	ldrh	r5, [r3, #12]
   d888e:	fbb5 f1f0 	udiv	r1, r5, r0
   d8892:	ebb7 0f40 	cmp.w	r7, r0, lsl #1
   d8896:	fb00 5111 	mls	r1, r0, r1, r5
   d889a:	ea4f 0540 	mov.w	r5, r0, lsl #1
   d889e:	bf8c      	ite	hi
   d88a0:	2001      	movhi	r0, #1
   d88a2:	fbb5 f0f7 	udivls	r0, r5, r7
   d88a6:	1a08      	subs	r0, r1, r0
   d88a8:	6320      	str	r0, [r4, #48]	; 0x30
        if (cur_fd->score < 0xffff-SPIFFS_TEMPORAL_CACHE_HIT_SCORE) {
   d88aa:	8d19      	ldrh	r1, [r3, #40]	; 0x28
   d88ac:	f64f 70fa 	movw	r0, #65530	; 0xfffa
   d88b0:	4281      	cmp	r1, r0
          cur_fd->score += SPIFFS_TEMPORAL_CACHE_HIT_SCORE;
   d88b2:	bf94      	ite	ls
   d88b4:	3104      	addls	r1, #4
          cur_fd->score = 0xffff;
   d88b6:	f64f 71ff 	movwhi	r1, #65535	; 0xffff
   d88ba:	8519      	strh	r1, [r3, #40]	; 0x28
    cur_fd->file_nbr = cand_ix+1;
   d88bc:	3201      	adds	r2, #1
   d88be:	809a      	strh	r2, [r3, #4]
    return SPIFFS_OK;
   d88c0:	2000      	movs	r0, #0
    *fd = cur_fd;
   d88c2:	f8c9 3000 	str.w	r3, [r9]
      return SPIFFS_OK;
    }
  }
  return SPIFFS_ERR_OUT_OF_FILE_DESCS;
#endif
}
   d88c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        cur_fd->score = SPIFFS_TEMPORAL_CACHE_HIT_SCORE;
   d88ca:	2104      	movs	r1, #4
   d88cc:	8519      	strh	r1, [r3, #40]	; 0x28
        cur_fd->name_hash = name_hash;
   d88ce:	6258      	str	r0, [r3, #36]	; 0x24
   d88d0:	e7f4      	b.n	d88bc <spiffs_fd_find_new+0xcc>
   d88d2:	bf00      	nop
   d88d4:	ffffd8e9 	.word	0xffffd8e9

000d88d8 <spiffs_fd_return>:

s32_t spiffs_fd_return(spiffs *fs, spiffs_file f) {
  if (f <= 0 || f > (s16_t)fs->fd_count) {
   d88d8:	2900      	cmp	r1, #0
   d88da:	dd11      	ble.n	d8900 <spiffs_fd_return+0x28>
   d88dc:	f9b0 3040 	ldrsh.w	r3, [r0, #64]	; 0x40
   d88e0:	428b      	cmp	r3, r1
   d88e2:	db0d      	blt.n	d8900 <spiffs_fd_return+0x28>
    return SPIFFS_ERR_BAD_DESCRIPTOR;
  }
  spiffs_fd *fds = (spiffs_fd *)fs->fd_space;
  spiffs_fd *fd = &fds[f-1];
   d88e4:	f06f 032f 	mvn.w	r3, #47	; 0x2f
   d88e8:	2230      	movs	r2, #48	; 0x30
   d88ea:	fb11 3102 	smlabb	r1, r1, r2, r3
   d88ee:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   d88f0:	4419      	add	r1, r3
  if (fd->file_nbr == 0) {
   d88f2:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d88f6:	b12b      	cbz	r3, d8904 <spiffs_fd_return+0x2c>
    return SPIFFS_ERR_FILE_CLOSED;
  }
  fd->file_nbr = 0;
   d88f8:	2000      	movs	r0, #0
   d88fa:	8088      	strh	r0, [r1, #4]
#if SPIFFS_IX_MAP
  fd->ix_map = 0;
   d88fc:	62c8      	str	r0, [r1, #44]	; 0x2c
#endif
  return SPIFFS_OK;
   d88fe:	4770      	bx	lr
    return SPIFFS_ERR_BAD_DESCRIPTOR;
   d8900:	4801      	ldr	r0, [pc, #4]	; (d8908 <spiffs_fd_return+0x30>)
   d8902:	4770      	bx	lr
    return SPIFFS_ERR_FILE_CLOSED;
   d8904:	4801      	ldr	r0, [pc, #4]	; (d890c <spiffs_fd_return+0x34>)
}
   d8906:	4770      	bx	lr
   d8908:	ffffd8e6 	.word	0xffffd8e6
   d890c:	ffffd8e8 	.word	0xffffd8e8

000d8910 <spiffs_fd_get>:

s32_t spiffs_fd_get(spiffs *fs, spiffs_file f, spiffs_fd **fd) {
  if (f <= 0 || f > (s16_t)fs->fd_count) {
   d8910:	2900      	cmp	r1, #0
s32_t spiffs_fd_get(spiffs *fs, spiffs_file f, spiffs_fd **fd) {
   d8912:	b510      	push	{r4, lr}
  if (f <= 0 || f > (s16_t)fs->fd_count) {
   d8914:	dd12      	ble.n	d893c <spiffs_fd_get+0x2c>
   d8916:	f9b0 3040 	ldrsh.w	r3, [r0, #64]	; 0x40
   d891a:	428b      	cmp	r3, r1
   d891c:	db0e      	blt.n	d893c <spiffs_fd_get+0x2c>
    return SPIFFS_ERR_BAD_DESCRIPTOR;
  }
  spiffs_fd *fds = (spiffs_fd *)fs->fd_space;
  *fd = &fds[f-1];
   d891e:	f06f 032f 	mvn.w	r3, #47	; 0x2f
   d8922:	2430      	movs	r4, #48	; 0x30
   d8924:	fb11 3104 	smlabb	r1, r1, r4, r3
   d8928:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  if ((*fd)->file_nbr == 0) {
    return SPIFFS_ERR_FILE_CLOSED;
   d892a:	4805      	ldr	r0, [pc, #20]	; (d8940 <spiffs_fd_get+0x30>)
  *fd = &fds[f-1];
   d892c:	4419      	add	r1, r3
   d892e:	6011      	str	r1, [r2, #0]
  if ((*fd)->file_nbr == 0) {
   d8930:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d8934:	2b00      	cmp	r3, #0
    return SPIFFS_ERR_FILE_CLOSED;
   d8936:	bf18      	it	ne
   d8938:	2000      	movne	r0, #0
  }
  return SPIFFS_OK;
}
   d893a:	bd10      	pop	{r4, pc}
    return SPIFFS_ERR_BAD_DESCRIPTOR;
   d893c:	4801      	ldr	r0, [pc, #4]	; (d8944 <spiffs_fd_get+0x34>)
   d893e:	e7fc      	b.n	d893a <spiffs_fd_get+0x2a>
   d8940:	ffffd8e8 	.word	0xffffd8e8
   d8944:	ffffd8e6 	.word	0xffffd8e6

000d8948 <_ZN17Adafruit_MAX31865C1Eaaaa>:
    @param spi_miso the SPI MISO pin to use
    @param spi_clk the SPI clock pin to use
*/
/**************************************************************************/
//
Adafruit_MAX31865::Adafruit_MAX31865(int8_t spi_cs, int8_t spi_mosi,
   d8948:	b530      	push	{r4, r5, lr}
                                     int8_t spi_miso, int8_t spi_clk)
    : spi_dev(spi_cs, spi_clk, spi_miso, spi_mosi, 1000000,
              SPI_BITORDER_MSBFIRST, SPI_MODE1) {}
   d894a:	2501      	movs	r5, #1
Adafruit_MAX31865::Adafruit_MAX31865(int8_t spi_cs, int8_t spi_mosi,
   d894c:	b085      	sub	sp, #20
              SPI_BITORDER_MSBFIRST, SPI_MODE1) {}
   d894e:	e9cd 5502 	strd	r5, r5, [sp, #8]
   d8952:	4d05      	ldr	r5, [pc, #20]	; (d8968 <_ZN17Adafruit_MAX31865C1Eaaaa+0x20>)
   d8954:	e9cd 2500 	strd	r2, r5, [sp]
   d8958:	f99d 2020 	ldrsb.w	r2, [sp, #32]
Adafruit_MAX31865::Adafruit_MAX31865(int8_t spi_cs, int8_t spi_mosi,
   d895c:	4604      	mov	r4, r0
              SPI_BITORDER_MSBFIRST, SPI_MODE1) {}
   d895e:	f000 f9df 	bl	d8d20 <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh>
   d8962:	4620      	mov	r0, r4
   d8964:	b005      	add	sp, #20
   d8966:	bd30      	pop	{r4, r5, pc}
   d8968:	000f4240 	.word	0x000f4240

000d896c <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>:

  return ret;
}

void Adafruit_MAX31865::readRegisterN(uint8_t addr, uint8_t buffer[],
                                      uint8_t n) {
   d896c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  addr &= 0x7F; // make sure top bit is not set
   d896e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   d8972:	f88d 100f 	strb.w	r1, [sp, #15]

  spi_dev.write_then_read(&addr, 1, buffer, n);
   d8976:	21ff      	movs	r1, #255	; 0xff
   d8978:	e9cd 3100 	strd	r3, r1, [sp]
   d897c:	4613      	mov	r3, r2
   d897e:	f10d 010f 	add.w	r1, sp, #15
   d8982:	2201      	movs	r2, #1
   d8984:	f000 fb79 	bl	d907a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
}
   d8988:	b005      	add	sp, #20
   d898a:	f85d fb04 	ldr.w	pc, [sp], #4

000d898e <_ZN17Adafruit_MAX3186513readRegister8Eh>:
uint8_t Adafruit_MAX31865::readRegister8(uint8_t addr) {
   d898e:	b507      	push	{r0, r1, r2, lr}
  uint8_t ret = 0;
   d8990:	2300      	movs	r3, #0
   d8992:	f88d 3007 	strb.w	r3, [sp, #7]
  readRegisterN(addr, &ret, 1);
   d8996:	f10d 0207 	add.w	r2, sp, #7
   d899a:	2301      	movs	r3, #1
   d899c:	f7ff ffe6 	bl	d896c <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>
}
   d89a0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d89a4:	b003      	add	sp, #12
   d89a6:	f85d fb04 	ldr.w	pc, [sp], #4

000d89aa <_ZN17Adafruit_MAX318659readFaultEv>:
  return readRegister8(MAX31865_FAULTSTAT_REG);
   d89aa:	2107      	movs	r1, #7
   d89ac:	f7ff bfef 	b.w	d898e <_ZN17Adafruit_MAX3186513readRegister8Eh>

000d89b0 <_ZN17Adafruit_MAX3186514readRegister16Eh>:
uint16_t Adafruit_MAX31865::readRegister16(uint8_t addr) {
   d89b0:	b507      	push	{r0, r1, r2, lr}
  uint8_t buffer[2] = {0, 0};
   d89b2:	2300      	movs	r3, #0
   d89b4:	f8ad 3004 	strh.w	r3, [sp, #4]
  readRegisterN(addr, buffer, 2);
   d89b8:	aa01      	add	r2, sp, #4
   d89ba:	2302      	movs	r3, #2
   d89bc:	f7ff ffd6 	bl	d896c <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>
  return ret;
   d89c0:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   d89c4:	ba40      	rev16	r0, r0
}
   d89c6:	b280      	uxth	r0, r0
   d89c8:	b003      	add	sp, #12
   d89ca:	f85d fb04 	ldr.w	pc, [sp], #4

000d89ce <_ZN17Adafruit_MAX3186514writeRegister8Ehh>:

void Adafruit_MAX31865::writeRegister8(uint8_t addr, uint8_t data) {
   d89ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  addr |= 0x80; // make sure top bit is set

  uint8_t buffer[2] = {addr, data};
  spi_dev.write(buffer, 2);
   d89d0:	2300      	movs	r3, #0
  addr |= 0x80; // make sure top bit is set
   d89d2:	f061 017f 	orn	r1, r1, #127	; 0x7f
  uint8_t buffer[2] = {addr, data};
   d89d6:	f88d 100c 	strb.w	r1, [sp, #12]
   d89da:	f88d 200d 	strb.w	r2, [sp, #13]
  spi_dev.write(buffer, 2);
   d89de:	9300      	str	r3, [sp, #0]
   d89e0:	2202      	movs	r2, #2
   d89e2:	a903      	add	r1, sp, #12
   d89e4:	f000 fb17 	bl	d9016 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
}
   d89e8:	b005      	add	sp, #20
   d89ea:	f85d fb04 	ldr.w	pc, [sp], #4

000d89ee <_ZN17Adafruit_MAX3186510clearFaultEv>:
void Adafruit_MAX31865::clearFault(void) {
   d89ee:	b510      	push	{r4, lr}
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
   d89f0:	2100      	movs	r1, #0
void Adafruit_MAX31865::clearFault(void) {
   d89f2:	4604      	mov	r4, r0
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
   d89f4:	f7ff ffcb 	bl	d898e <_ZN17Adafruit_MAX3186513readRegister8Eh>
  t &= ~0x2C;
   d89f8:	f000 00d3 	and.w	r0, r0, #211	; 0xd3
  writeRegister8(MAX31865_CONFIG_REG, t);
   d89fc:	f040 0202 	orr.w	r2, r0, #2
   d8a00:	2100      	movs	r1, #0
   d8a02:	4620      	mov	r0, r4
}
   d8a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister8(MAX31865_CONFIG_REG, t);
   d8a08:	f7ff bfe1 	b.w	d89ce <_ZN17Adafruit_MAX3186514writeRegister8Ehh>

000d8a0c <_ZN17Adafruit_MAX3186510enableBiasEb>:
void Adafruit_MAX31865::enableBias(bool b) {
   d8a0c:	b538      	push	{r3, r4, r5, lr}
   d8a0e:	460d      	mov	r5, r1
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
   d8a10:	2100      	movs	r1, #0
void Adafruit_MAX31865::enableBias(bool b) {
   d8a12:	4604      	mov	r4, r0
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
   d8a14:	f7ff ffbb 	bl	d898e <_ZN17Adafruit_MAX3186513readRegister8Eh>
  if (b) {
   d8a18:	b145      	cbz	r5, d8a2c <_ZN17Adafruit_MAX3186510enableBiasEb+0x20>
    t |= MAX31865_CONFIG_BIAS; // enable bias
   d8a1a:	f060 027f 	orn	r2, r0, #127	; 0x7f
   d8a1e:	b2d2      	uxtb	r2, r2
  writeRegister8(MAX31865_CONFIG_REG, t);
   d8a20:	4620      	mov	r0, r4
   d8a22:	2100      	movs	r1, #0
}
   d8a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(MAX31865_CONFIG_REG, t);
   d8a28:	f7ff bfd1 	b.w	d89ce <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
    t &= ~MAX31865_CONFIG_BIAS; // disable bias
   d8a2c:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   d8a30:	e7f6      	b.n	d8a20 <_ZN17Adafruit_MAX3186510enableBiasEb+0x14>

000d8a32 <_ZN17Adafruit_MAX3186511autoConvertEb>:
void Adafruit_MAX31865::autoConvert(bool b) {
   d8a32:	b538      	push	{r3, r4, r5, lr}
   d8a34:	460d      	mov	r5, r1
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
   d8a36:	2100      	movs	r1, #0
void Adafruit_MAX31865::autoConvert(bool b) {
   d8a38:	4604      	mov	r4, r0
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
   d8a3a:	f7ff ffa8 	bl	d898e <_ZN17Adafruit_MAX3186513readRegister8Eh>
  if (b) {
   d8a3e:	b145      	cbz	r5, d8a52 <_ZN17Adafruit_MAX3186511autoConvertEb+0x20>
    t |= MAX31865_CONFIG_MODEAUTO; // enable autoconvert
   d8a40:	f040 0240 	orr.w	r2, r0, #64	; 0x40
   d8a44:	b2d2      	uxtb	r2, r2
  writeRegister8(MAX31865_CONFIG_REG, t);
   d8a46:	4620      	mov	r0, r4
   d8a48:	2100      	movs	r1, #0
}
   d8a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(MAX31865_CONFIG_REG, t);
   d8a4e:	f7ff bfbe 	b.w	d89ce <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
    t &= ~MAX31865_CONFIG_MODEAUTO; // disable autoconvert
   d8a52:	f000 02bf 	and.w	r2, r0, #191	; 0xbf
   d8a56:	e7f6      	b.n	d8a46 <_ZN17Adafruit_MAX3186511autoConvertEb+0x14>

000d8a58 <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires>:
void Adafruit_MAX31865::setWires(max31865_numwires_t wires) {
   d8a58:	b538      	push	{r3, r4, r5, lr}
   d8a5a:	460d      	mov	r5, r1
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
   d8a5c:	2100      	movs	r1, #0
void Adafruit_MAX31865::setWires(max31865_numwires_t wires) {
   d8a5e:	4604      	mov	r4, r0
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
   d8a60:	f7ff ff95 	bl	d898e <_ZN17Adafruit_MAX3186513readRegister8Eh>
  if (wires == MAX31865_3WIRE) {
   d8a64:	2d01      	cmp	r5, #1
    t |= MAX31865_CONFIG_3WIRE;
   d8a66:	bf0a      	itet	eq
   d8a68:	f040 0210 	orreq.w	r2, r0, #16
    t &= ~MAX31865_CONFIG_3WIRE;
   d8a6c:	f000 02ef 	andne.w	r2, r0, #239	; 0xef
    t |= MAX31865_CONFIG_3WIRE;
   d8a70:	b2d2      	uxtbeq	r2, r2
  writeRegister8(MAX31865_CONFIG_REG, t);
   d8a72:	4620      	mov	r0, r4
   d8a74:	2100      	movs	r1, #0
}
   d8a76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(MAX31865_CONFIG_REG, t);
   d8a7a:	f7ff bfa8 	b.w	d89ce <_ZN17Adafruit_MAX3186514writeRegister8Ehh>

000d8a7e <_ZN17Adafruit_MAX318655beginE17max31865_numwires>:
bool Adafruit_MAX31865::begin(max31865_numwires_t wires) {
   d8a7e:	b513      	push	{r0, r1, r4, lr}
   d8a80:	4604      	mov	r4, r0
   d8a82:	9101      	str	r1, [sp, #4]
  spi_dev.begin();
   d8a84:	f000 f9d5 	bl	d8e32 <_ZN18Adafruit_SPIDevice5beginEv>
  setWires(wires);
   d8a88:	9901      	ldr	r1, [sp, #4]
   d8a8a:	4620      	mov	r0, r4
   d8a8c:	f7ff ffe4 	bl	d8a58 <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires>
  enableBias(false);
   d8a90:	4620      	mov	r0, r4
   d8a92:	2100      	movs	r1, #0
   d8a94:	f7ff ffba 	bl	d8a0c <_ZN17Adafruit_MAX3186510enableBiasEb>
  autoConvert(false);
   d8a98:	2100      	movs	r1, #0
   d8a9a:	4620      	mov	r0, r4
   d8a9c:	f7ff ffc9 	bl	d8a32 <_ZN17Adafruit_MAX3186511autoConvertEb>
  clearFault();
   d8aa0:	4620      	mov	r0, r4
   d8aa2:	f7ff ffa4 	bl	d89ee <_ZN17Adafruit_MAX3186510clearFaultEv>
}
   d8aa6:	2001      	movs	r0, #1
   d8aa8:	b002      	add	sp, #8
   d8aaa:	bd10      	pop	{r4, pc}

000d8aac <_ZN17Adafruit_MAX318657readRTDEv>:
uint16_t Adafruit_MAX31865::readRTD(void) {
   d8aac:	b538      	push	{r3, r4, r5, lr}
   d8aae:	4604      	mov	r4, r0
  clearFault();
   d8ab0:	f7ff ff9d 	bl	d89ee <_ZN17Adafruit_MAX3186510clearFaultEv>
  enableBias(true);
   d8ab4:	2101      	movs	r1, #1
   d8ab6:	4620      	mov	r0, r4
   d8ab8:	f7ff ffa8 	bl	d8a0c <_ZN17Adafruit_MAX3186510enableBiasEb>
  delay(10);
   d8abc:	200a      	movs	r0, #10
   d8abe:	f008 fce6 	bl	e148e <delay>
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
   d8ac2:	2100      	movs	r1, #0
   d8ac4:	4620      	mov	r0, r4
   d8ac6:	f7ff ff62 	bl	d898e <_ZN17Adafruit_MAX3186513readRegister8Eh>
  t |= MAX31865_CONFIG_1SHOT;
   d8aca:	f040 0020 	orr.w	r0, r0, #32
  writeRegister8(MAX31865_CONFIG_REG, t);
   d8ace:	b2c2      	uxtb	r2, r0
   d8ad0:	2100      	movs	r1, #0
   d8ad2:	4620      	mov	r0, r4
   d8ad4:	f7ff ff7b 	bl	d89ce <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
  delay(65);
   d8ad8:	2041      	movs	r0, #65	; 0x41
   d8ada:	f008 fcd8 	bl	e148e <delay>
  uint16_t rtd = readRegister16(MAX31865_RTDMSB_REG);
   d8ade:	2101      	movs	r1, #1
   d8ae0:	4620      	mov	r0, r4
   d8ae2:	f7ff ff65 	bl	d89b0 <_ZN17Adafruit_MAX3186514readRegister16Eh>
  enableBias(false); // Disable bias current again to reduce selfheating.
   d8ae6:	2100      	movs	r1, #0
  uint16_t rtd = readRegister16(MAX31865_RTDMSB_REG);
   d8ae8:	4605      	mov	r5, r0
  enableBias(false); // Disable bias current again to reduce selfheating.
   d8aea:	4620      	mov	r0, r4
   d8aec:	f7ff ff8e 	bl	d8a0c <_ZN17Adafruit_MAX3186510enableBiasEb>
}
   d8af0:	f3c5 004f 	ubfx	r0, r5, #1, #16
   d8af4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8af8 <_ZN17Adafruit_MAX3186511temperatureEff>:
float Adafruit_MAX31865::temperature(float RTDnominal, float refResistor) {
   d8af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8afa:	ed2d 8b04 	vpush	{d8-d9}
   d8afe:	eeb0 9a40 	vmov.f32	s18, s0
   d8b02:	eef0 8a60 	vmov.f32	s17, s1
  Rt = readRTD();
   d8b06:	f7ff ffd1 	bl	d8aac <_ZN17Adafruit_MAX318657readRTDEv>
  Rt /= 32768;
   d8b0a:	ee08 0a10 	vmov	s16, r0
  Z3 = (4 * RTD_B) / RTDnominal;
   d8b0e:	ee19 0a10 	vmov	r0, s18
   d8b12:	f00c f883 	bl	e4c1c <__aeabi_f2d>
   d8b16:	4602      	mov	r2, r0
   d8b18:	460b      	mov	r3, r1
   d8b1a:	a15f      	add	r1, pc, #380	; (adr r1, d8c98 <_ZN17Adafruit_MAX3186511temperatureEff+0x1a0>)
   d8b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8b20:	f00c f9fe 	bl	e4f20 <__aeabi_ddiv>
   d8b24:	f00c fb8c 	bl	e5240 <__aeabi_d2f>
  Rt /= 32768;
   d8b28:	eebb 8ae8 	vcvt.f32.u32	s16, s16, #15
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
   d8b2c:	ee07 0a90 	vmov	s15, r0
  Rt *= refResistor;
   d8b30:	ee28 8a28 	vmul.f32	s16, s16, s17
   d8b34:	ed9f 0a54 	vldr	s0, [pc, #336]	; d8c88 <_ZN17Adafruit_MAX3186511temperatureEff+0x190>
   d8b38:	eea8 0a27 	vfma.f32	s0, s16, s15
   d8b3c:	f00b feac 	bl	e4898 <sqrtf>
  temp = (sqrt(temp) + Z1) / Z4;
   d8b40:	eddf 7a52 	vldr	s15, [pc, #328]	; d8c8c <_ZN17Adafruit_MAX3186511temperatureEff+0x194>
   d8b44:	ed9f 7a52 	vldr	s14, [pc, #328]	; d8c90 <_ZN17Adafruit_MAX3186511temperatureEff+0x198>
   d8b48:	ee30 0a67 	vsub.f32	s0, s0, s15
   d8b4c:	eec0 7a07 	vdiv.f32	s15, s0, s14
  if (temp >= 0)
   d8b50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d8b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8b58:	da77      	bge.n	d8c4a <_ZN17Adafruit_MAX3186511temperatureEff+0x152>
  Rt /= RTDnominal;
   d8b5a:	eec8 8a09 	vdiv.f32	s17, s16, s18
  Rt *= 100; // normalize to 100 ohm
   d8b5e:	eddf 7a4d 	vldr	s15, [pc, #308]	; d8c94 <_ZN17Adafruit_MAX3186511temperatureEff+0x19c>
   d8b62:	ee68 8aa7 	vmul.f32	s17, s17, s15
  temp += 2.2228 * rpoly;
   d8b66:	ee18 0a90 	vmov	r0, s17
   d8b6a:	f00c f857 	bl	e4c1c <__aeabi_f2d>
   d8b6e:	a33a      	add	r3, pc, #232	; (adr r3, d8c58 <_ZN17Adafruit_MAX3186511temperatureEff+0x160>)
   d8b70:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8b74:	f00c f8aa 	bl	e4ccc <__aeabi_dmul>
   d8b78:	a339      	add	r3, pc, #228	; (adr r3, d8c60 <_ZN17Adafruit_MAX3186511temperatureEff+0x168>)
   d8b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8b7e:	f00b feed 	bl	e495c <__aeabi_dsub>
   d8b82:	f00c fb5d 	bl	e5240 <__aeabi_d2f>
  temp += 2.5859e-3 * rpoly;
   d8b86:	f00c f849 	bl	e4c1c <__aeabi_f2d>
  rpoly *= Rt; // square
   d8b8a:	ee28 8aa8 	vmul.f32	s16, s17, s17
  temp += 2.5859e-3 * rpoly;
   d8b8e:	4604      	mov	r4, r0
   d8b90:	ee18 0a10 	vmov	r0, s16
   d8b94:	460d      	mov	r5, r1
   d8b96:	f00c f841 	bl	e4c1c <__aeabi_f2d>
   d8b9a:	a333      	add	r3, pc, #204	; (adr r3, d8c68 <_ZN17Adafruit_MAX3186511temperatureEff+0x170>)
   d8b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8ba0:	f00c f894 	bl	e4ccc <__aeabi_dmul>
   d8ba4:	4602      	mov	r2, r0
   d8ba6:	460b      	mov	r3, r1
   d8ba8:	4620      	mov	r0, r4
   d8baa:	4629      	mov	r1, r5
   d8bac:	f00b fed8 	bl	e4960 <__adddf3>
   d8bb0:	f00c fb46 	bl	e5240 <__aeabi_d2f>
  temp -= 4.8260e-6 * rpoly;
   d8bb4:	f00c f832 	bl	e4c1c <__aeabi_f2d>
  rpoly *= Rt; // ^3
   d8bb8:	ee28 8a88 	vmul.f32	s16, s17, s16
  temp -= 4.8260e-6 * rpoly;
   d8bbc:	4604      	mov	r4, r0
   d8bbe:	ee18 0a10 	vmov	r0, s16
   d8bc2:	460d      	mov	r5, r1
   d8bc4:	f00c f82a 	bl	e4c1c <__aeabi_f2d>
   d8bc8:	a329      	add	r3, pc, #164	; (adr r3, d8c70 <_ZN17Adafruit_MAX3186511temperatureEff+0x178>)
   d8bca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8bce:	f00c f87d 	bl	e4ccc <__aeabi_dmul>
   d8bd2:	4602      	mov	r2, r0
   d8bd4:	460b      	mov	r3, r1
   d8bd6:	4620      	mov	r0, r4
   d8bd8:	4629      	mov	r1, r5
   d8bda:	f00b febf 	bl	e495c <__aeabi_dsub>
   d8bde:	f00c fb2f 	bl	e5240 <__aeabi_d2f>
  temp -= 2.8183e-8 * rpoly;
   d8be2:	f00c f81b 	bl	e4c1c <__aeabi_f2d>
  rpoly *= Rt; // ^4
   d8be6:	ee28 8a88 	vmul.f32	s16, s17, s16
  temp -= 2.8183e-8 * rpoly;
   d8bea:	4604      	mov	r4, r0
   d8bec:	ee18 0a10 	vmov	r0, s16
   d8bf0:	460d      	mov	r5, r1
   d8bf2:	f00c f813 	bl	e4c1c <__aeabi_f2d>
   d8bf6:	a320      	add	r3, pc, #128	; (adr r3, d8c78 <_ZN17Adafruit_MAX3186511temperatureEff+0x180>)
   d8bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8bfc:	f00c f866 	bl	e4ccc <__aeabi_dmul>
   d8c00:	4602      	mov	r2, r0
   d8c02:	460b      	mov	r3, r1
   d8c04:	4620      	mov	r0, r4
   d8c06:	4629      	mov	r1, r5
   d8c08:	f00b fea8 	bl	e495c <__aeabi_dsub>
  temp += 1.5243e-10 * rpoly;
   d8c0c:	ee68 7a88 	vmul.f32	s15, s17, s16
  temp -= 2.8183e-8 * rpoly;
   d8c10:	4606      	mov	r6, r0
  temp += 1.5243e-10 * rpoly;
   d8c12:	ee17 0a90 	vmov	r0, s15
  temp -= 2.8183e-8 * rpoly;
   d8c16:	460f      	mov	r7, r1
  temp += 1.5243e-10 * rpoly;
   d8c18:	f00c f800 	bl	e4c1c <__aeabi_f2d>
   d8c1c:	a318      	add	r3, pc, #96	; (adr r3, d8c80 <_ZN17Adafruit_MAX3186511temperatureEff+0x188>)
   d8c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8c22:	f00c f853 	bl	e4ccc <__aeabi_dmul>
   d8c26:	4604      	mov	r4, r0
   d8c28:	460d      	mov	r5, r1
  temp -= 2.8183e-8 * rpoly;
   d8c2a:	4630      	mov	r0, r6
   d8c2c:	4639      	mov	r1, r7
   d8c2e:	f00c fb07 	bl	e5240 <__aeabi_d2f>
  temp += 1.5243e-10 * rpoly;
   d8c32:	f00b fff3 	bl	e4c1c <__aeabi_f2d>
   d8c36:	4602      	mov	r2, r0
   d8c38:	460b      	mov	r3, r1
   d8c3a:	4620      	mov	r0, r4
   d8c3c:	4629      	mov	r1, r5
   d8c3e:	f00b fe8f 	bl	e4960 <__adddf3>
   d8c42:	f00c fafd 	bl	e5240 <__aeabi_d2f>
   d8c46:	ee07 0a90 	vmov	s15, r0
}
   d8c4a:	ecbd 8b04 	vpop	{d8-d9}
   d8c4e:	eeb0 0a67 	vmov.f32	s0, s15
   d8c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8c54:	f3af 8000 	nop.w
   d8c58:	5dcc63f1 	.word	0x5dcc63f1
   d8c5c:	4001c84b 	.word	0x4001c84b
   d8c60:	e0000000 	.word	0xe0000000
   d8c64:	406e40a3 	.word	0x406e40a3
   d8c68:	7dc882bb 	.word	0x7dc882bb
   d8c6c:	3f652f06 	.word	0x3f652f06
   d8c70:	c766c293 	.word	0xc766c293
   d8c74:	3ed43de0 	.word	0x3ed43de0
   d8c78:	513156ce 	.word	0x513156ce
   d8c7c:	3e5e42e2 	.word	0x3e5e42e2
   d8c80:	61e4fa3e 	.word	0x61e4fa3e
   d8c84:	3de4f327 	.word	0x3de4f327
   d8c88:	37938317 	.word	0x37938317
   d8c8c:	3b801132 	.word	0x3b801132
   d8c90:	b59b057f 	.word	0xb59b057f
   d8c94:	42c80000 	.word	0x42c80000
   d8c98:	ee19ce88 	.word	0xee19ce88
   d8c9c:	bec360af 	.word	0xbec360af

000d8ca0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d8ca0:	4770      	bx	lr

000d8ca2 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d8ca2:	b510      	push	{r4, lr}
  }
   d8ca4:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d8ca6:	4604      	mov	r4, r0
  }
   d8ca8:	f00b fded 	bl	e4886 <_ZdlPvj>
   d8cac:	4620      	mov	r0, r4
   d8cae:	bd10      	pop	{r4, pc}

000d8cb0 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d8cb0:	b40e      	push	{r1, r2, r3}
   d8cb2:	b503      	push	{r0, r1, lr}
   d8cb4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d8cb6:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d8cb8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d8cbc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d8cbe:	f00a fdd9 	bl	e3874 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d8cc2:	b002      	add	sp, #8
   d8cc4:	f85d eb04 	ldr.w	lr, [sp], #4
   d8cc8:	b003      	add	sp, #12
   d8cca:	4770      	bx	lr

000d8ccc <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d8ccc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8cce:	4604      	mov	r4, r0
   d8cd0:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d8cd2:	7922      	ldrb	r2, [r4, #4]
   d8cd4:	68a3      	ldr	r3, [r4, #8]
   d8cd6:	b132      	cbz	r2, d8ce6 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d8cd8:	b9a3      	cbnz	r3, d8d04 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d8cda:	490b      	ldr	r1, [pc, #44]	; (d8d08 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d8cdc:	b002      	add	sp, #8
   d8cde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d8ce2:	f00a bd8c 	b.w	e37fe <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d8ce6:	4a09      	ldr	r2, [pc, #36]	; (d8d0c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d8ce8:	7b26      	ldrb	r6, [r4, #12]
   d8cea:	4d09      	ldr	r5, [pc, #36]	; (d8d10 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d8cec:	4909      	ldr	r1, [pc, #36]	; (d8d14 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d8cee:	7b64      	ldrb	r4, [r4, #13]
   d8cf0:	2e01      	cmp	r6, #1
   d8cf2:	bf18      	it	ne
   d8cf4:	4629      	movne	r1, r5
   d8cf6:	e9cd 1400 	strd	r1, r4, [sp]
   d8cfa:	4907      	ldr	r1, [pc, #28]	; (d8d18 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d8cfc:	f7ff ffd8 	bl	d8cb0 <_ZN5Print6printfEPKcz>
  }
   d8d00:	b002      	add	sp, #8
   d8d02:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d8d04:	4a05      	ldr	r2, [pc, #20]	; (d8d1c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d8d06:	e7ef      	b.n	d8ce8 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d8d08:	000e6de1 	.word	0x000e6de1
   d8d0c:	000e827d 	.word	0x000e827d
   d8d10:	000e6ddd 	.word	0x000e6ddd
   d8d14:	000e6dd9 	.word	0x000e6dd9
   d8d18:	000e6df7 	.word	0x000e6df7
   d8d1c:	000e6dd0 	.word	0x000e6dd0

000d8d20 <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh>:
 *    @param  freq The SPI clock frequency to use, defaults to 1MHz
 *    @param  dataOrder The SPI data order to use for bits within each byte,
 * defaults to SPI_BITORDER_MSBFIRST
 *    @param  dataMode The SPI mode to use, defaults to SPI_MODE0
 */
Adafruit_SPIDevice::Adafruit_SPIDevice(int8_t cspin, int8_t sckpin,
   d8d20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8d24:	f99d 9028 	ldrsb.w	r9, [sp, #40]	; 0x28
                                       int8_t misopin, int8_t mosipin,
                                       uint32_t freq, BitOrder dataOrder,
                                       uint8_t dataMode) {
  _cs = cspin;
   d8d28:	7381      	strb	r1, [r0, #14]
  _sck = sckpin;
   d8d2a:	73c2      	strb	r2, [r0, #15]
  _miso = misopin;
   d8d2c:	7443      	strb	r3, [r0, #17]
  _mosi = mosipin;
   d8d2e:	f880 9010 	strb.w	r9, [r0, #16]
Adafruit_SPIDevice::Adafruit_SPIDevice(int8_t cspin, int8_t sckpin,
   d8d32:	4604      	mov	r4, r0
   d8d34:	468a      	mov	sl, r1
   d8d36:	4616      	mov	r6, r2
   d8d38:	461d      	mov	r5, r3
   d8d3a:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
   d8d3e:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34

#ifdef BUSIO_USE_FAST_PINIO
  csPort = (BusIO_PortReg *)portOutputRegister(digitalPinToPort(cspin));
   d8d42:	f8df b0d4 	ldr.w	fp, [pc, #212]	; d8e18 <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh+0xf8>
   d8d46:	f008 f81d 	bl	e0d84 <HAL_Pin_Map>
   d8d4a:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
   d8d4e:	f810 200a 	ldrb.w	r2, [r0, sl]
   d8d52:	2a00      	cmp	r2, #0
   d8d54:	bf14      	ite	ne
   d8d56:	465a      	movne	r2, fp
   d8d58:	f04f 42a0 	moveq.w	r2, #1342177280	; 0x50000000
   d8d5c:	f202 5204 	addw	r2, r2, #1284	; 0x504
   d8d60:	6222      	str	r2, [r4, #32]
  csPinMask = digitalPinToBitMask(cspin);
   d8d62:	f008 f80f 	bl	e0d84 <HAL_Pin_Map>
   d8d66:	4482      	add	sl, r0
  if (mosipin != -1) {
   d8d68:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
  csPinMask = digitalPinToBitMask(cspin);
   d8d6c:	f89a 2001 	ldrb.w	r2, [sl, #1]
   d8d70:	6322      	str	r2, [r4, #48]	; 0x30
  if (mosipin != -1) {
   d8d72:	d012      	beq.n	d8d9a <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh+0x7a>
    mosiPort = (BusIO_PortReg *)portOutputRegister(digitalPinToPort(mosipin));
   d8d74:	f008 f806 	bl	e0d84 <HAL_Pin_Map>
   d8d78:	ea4f 1a09 	mov.w	sl, r9, lsl #4
   d8d7c:	f810 300a 	ldrb.w	r3, [r0, sl]
   d8d80:	2b00      	cmp	r3, #0
   d8d82:	bf14      	ite	ne
   d8d84:	465b      	movne	r3, fp
   d8d86:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
   d8d8a:	f203 5304 	addw	r3, r3, #1284	; 0x504
   d8d8e:	6163      	str	r3, [r4, #20]
    mosiPinMask = digitalPinToBitMask(mosipin);
   d8d90:	f007 fff8 	bl	e0d84 <HAL_Pin_Map>
   d8d94:	4450      	add	r0, sl
   d8d96:	7843      	ldrb	r3, [r0, #1]
   d8d98:	6263      	str	r3, [r4, #36]	; 0x24
  }
  if (misopin != -1) {
   d8d9a:	1c6b      	adds	r3, r5, #1
   d8d9c:	d010      	beq.n	d8dc0 <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh+0xa0>
    misoPort = (BusIO_PortReg *)portInputRegister(digitalPinToPort(misopin));
   d8d9e:	f007 fff1 	bl	e0d84 <HAL_Pin_Map>
   d8da2:	012d      	lsls	r5, r5, #4
   d8da4:	4a1c      	ldr	r2, [pc, #112]	; (d8e18 <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh+0xf8>)
   d8da6:	5d43      	ldrb	r3, [r0, r5]
   d8da8:	2b00      	cmp	r3, #0
   d8daa:	bf08      	it	eq
   d8dac:	f04f 42a0 	moveq.w	r2, #1342177280	; 0x50000000
   d8db0:	f502 62a2 	add.w	r2, r2, #1296	; 0x510
   d8db4:	61e2      	str	r2, [r4, #28]
    misoPinMask = digitalPinToBitMask(misopin);
   d8db6:	f007 ffe5 	bl	e0d84 <HAL_Pin_Map>
   d8dba:	4428      	add	r0, r5
   d8dbc:	7843      	ldrb	r3, [r0, #1]
   d8dbe:	62a3      	str	r3, [r4, #40]	; 0x28
  }
  clkPort = (BusIO_PortReg *)portOutputRegister(digitalPinToPort(sckpin));
   d8dc0:	f007 ffe0 	bl	e0d84 <HAL_Pin_Map>
   d8dc4:	0136      	lsls	r6, r6, #4
#endif

  _freq = freq;
  _dataOrder = dataOrder;
  _dataMode = dataMode;
  _begun = false;
   d8dc6:	2500      	movs	r5, #0
  clkPort = (BusIO_PortReg *)portOutputRegister(digitalPinToPort(sckpin));
   d8dc8:	5d83      	ldrb	r3, [r0, r6]
   d8dca:	2b00      	cmp	r3, #0
   d8dcc:	4b12      	ldr	r3, [pc, #72]	; (d8e18 <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh+0xf8>)
   d8dce:	bf08      	it	eq
   d8dd0:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
   d8dd4:	f203 5304 	addw	r3, r3, #1284	; 0x504
   d8dd8:	61a3      	str	r3, [r4, #24]
  clkPinMask = digitalPinToBitMask(sckpin);
   d8dda:	f007 ffd3 	bl	e0d84 <HAL_Pin_Map>
   d8dde:	4406      	add	r6, r0
  _spiSetting = new SPISettings(freq, dataOrder, dataMode);
   d8de0:	2010      	movs	r0, #16
  clkPinMask = digitalPinToBitMask(sckpin);
   d8de2:	7873      	ldrb	r3, [r6, #1]
   d8de4:	62e3      	str	r3, [r4, #44]	; 0x2c
  _freq = freq;
   d8de6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d8de8:	60a3      	str	r3, [r4, #8]
  _dataOrder = dataOrder;
   d8dea:	f884 800c 	strb.w	r8, [r4, #12]
  _dataMode = dataMode;
   d8dee:	7367      	strb	r7, [r4, #13]
  _begun = false;
   d8df0:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  _spiSetting = new SPISettings(freq, dataOrder, dataMode);
   d8df4:	f7fb f94f 	bl	d4096 <_Znwj>
   d8df8:	b138      	cbz	r0, d8e0a <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh+0xea>
      dataMode_{dataMode}
   d8dfa:	4b08      	ldr	r3, [pc, #32]	; (d8e1c <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh+0xfc>)
   d8dfc:	6003      	str	r3, [r0, #0]
   d8dfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d8e00:	7105      	strb	r5, [r0, #4]
   d8e02:	6083      	str	r3, [r0, #8]
   d8e04:	f880 800c 	strb.w	r8, [r0, #12]
   d8e08:	7347      	strb	r7, [r0, #13]
  _spi = NULL;
   d8e0a:	2300      	movs	r3, #0
  _spiSetting = new SPISettings(freq, dataOrder, dataMode);
   d8e0c:	6060      	str	r0, [r4, #4]
  _spi = NULL;
   d8e0e:	6023      	str	r3, [r4, #0]
}
   d8e10:	4620      	mov	r0, r4
   d8e12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8e16:	bf00      	nop
   d8e18:	50000300 	.word	0x50000300
   d8e1c:	000e6e1c 	.word	0x000e6e1c

000d8e20 <_ZN18Adafruit_SPIDeviceD1Ev>:

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
   d8e20:	b510      	push	{r4, lr}
   d8e22:	4604      	mov	r4, r0
  if (_spiSetting) {
   d8e24:	6840      	ldr	r0, [r0, #4]
   d8e26:	b110      	cbz	r0, d8e2e <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
   d8e28:	6803      	ldr	r3, [r0, #0]
   d8e2a:	689b      	ldr	r3, [r3, #8]
   d8e2c:	4798      	blx	r3
    _spiSetting = nullptr;
  }
}
   d8e2e:	4620      	mov	r0, r4
   d8e30:	bd10      	pop	{r4, pc}

000d8e32 <_ZN18Adafruit_SPIDevice5beginEv>:
/*!
 *    @brief  Initializes SPI bus and sets CS pin high
 *    @return Always returns true because there's no way to test success of SPI
 * init
 */
bool Adafruit_SPIDevice::begin(void) {
   d8e32:	b538      	push	{r3, r4, r5, lr}
   d8e34:	4604      	mov	r4, r0
  pinMode(_cs, OUTPUT);
   d8e36:	f990 000e 	ldrsb.w	r0, [r0, #14]
   d8e3a:	2101      	movs	r1, #1
   d8e3c:	b280      	uxth	r0, r0
   d8e3e:	f00b fc45 	bl	e46cc <pinMode>
  digitalWrite(_cs, HIGH);
   d8e42:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d8e46:	2101      	movs	r1, #1
   d8e48:	b280      	uxth	r0, r0
   d8e4a:	f00b fc50 	bl	e46ee <digitalWrite>

  if (_spi) { // hardware SPI
   d8e4e:	6825      	ldr	r5, [r4, #0]
   d8e50:	b135      	cbz	r5, d8e60 <_ZN18Adafruit_SPIDevice5beginEv+0x2e>
    _spi->begin();
   d8e52:	4628      	mov	r0, r5
   d8e54:	f00a fd64 	bl	e3920 <_ZN8SPIClass5beginEv>
    if (_miso != -1) {
      pinMode(_miso, INPUT);
    }
  }

  _begun = true;
   d8e58:	2001      	movs	r0, #1
   d8e5a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return true;
}
   d8e5e:	bd38      	pop	{r3, r4, r5, pc}
    pinMode(_sck, OUTPUT);
   d8e60:	f994 000f 	ldrsb.w	r0, [r4, #15]
   d8e64:	2101      	movs	r1, #1
   d8e66:	b280      	uxth	r0, r0
   d8e68:	f00b fc30 	bl	e46cc <pinMode>
    if ((_dataMode == SPI_MODE0) || (_dataMode == SPI_MODE1)) {
   d8e6c:	7b63      	ldrb	r3, [r4, #13]
   d8e6e:	f994 000f 	ldrsb.w	r0, [r4, #15]
   d8e72:	2b01      	cmp	r3, #1
      digitalWrite(_sck, LOW);
   d8e74:	bf94      	ite	ls
   d8e76:	4629      	movls	r1, r5
      digitalWrite(_sck, HIGH);
   d8e78:	2101      	movhi	r1, #1
   d8e7a:	b280      	uxth	r0, r0
   d8e7c:	f00b fc37 	bl	e46ee <digitalWrite>
    if (_mosi != -1) {
   d8e80:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d8e84:	1c42      	adds	r2, r0, #1
   d8e86:	d009      	beq.n	d8e9c <_ZN18Adafruit_SPIDevice5beginEv+0x6a>
      pinMode(_mosi, OUTPUT);
   d8e88:	2101      	movs	r1, #1
   d8e8a:	b280      	uxth	r0, r0
   d8e8c:	f00b fc1e 	bl	e46cc <pinMode>
      digitalWrite(_mosi, HIGH);
   d8e90:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d8e94:	2101      	movs	r1, #1
   d8e96:	b280      	uxth	r0, r0
   d8e98:	f00b fc29 	bl	e46ee <digitalWrite>
    if (_miso != -1) {
   d8e9c:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d8ea0:	1c43      	adds	r3, r0, #1
   d8ea2:	d0d9      	beq.n	d8e58 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
      pinMode(_miso, INPUT);
   d8ea4:	2100      	movs	r1, #0
   d8ea6:	b280      	uxth	r0, r0
   d8ea8:	f00b fc10 	bl	e46cc <pinMode>
   d8eac:	e7d4      	b.n	d8e58 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
	...

000d8eb0 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   d8eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8eb4:	4604      	mov	r4, r0
  if (_spi) {
   d8eb6:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   d8eb8:	b085      	sub	sp, #20
   d8eba:	460d      	mov	r5, r1
  if (_spi) {
   d8ebc:	b140      	cbz	r0, d8ed0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   d8ebe:	2300      	movs	r3, #0
   d8ec0:	9300      	str	r3, [sp, #0]
   d8ec2:	4613      	mov	r3, r2
   d8ec4:	460a      	mov	r2, r1
   d8ec6:	f00a fde5 	bl	e3a94 <_ZN8SPIClass8transferEPvS0_jPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   d8eca:	b005      	add	sp, #20
   d8ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   d8ed0:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   d8ed2:	68a0      	ldr	r0, [r4, #8]
   d8ed4:	4f48      	ldr	r7, [pc, #288]	; (d8ff8 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   d8ed6:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   d8eda:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   d8edc:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   d8ede:	bf0c      	ite	eq
   d8ee0:	f04f 0b01 	moveq.w	fp, #1
   d8ee4:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   d8ee8:	ea1b 0f03 	tst.w	fp, r3
   d8eec:	eb01 0302 	add.w	r3, r1, r2
   d8ef0:	bf0c      	ite	eq
   d8ef2:	f04f 0901 	moveq.w	r9, #1
   d8ef6:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   d8efa:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   d8efc:	9303      	str	r3, [sp, #12]
   d8efe:	9b03      	ldr	r3, [sp, #12]
   d8f00:	42ab      	cmp	r3, r5
   d8f02:	d0e2      	beq.n	d8eca <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   d8f04:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   d8f08:	465e      	mov	r6, fp
    uint8_t reply = 0;
   d8f0a:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   d8f0e:	b117      	cbz	r7, d8f16 <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d8f10:	4638      	mov	r0, r7
   d8f12:	f007 feff 	bl	e0d14 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   d8f16:	7b63      	ldrb	r3, [r4, #13]
   d8f18:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   d8f1c:	d141      	bne.n	d8fa2 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   d8f1e:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d8f22:	1c5a      	adds	r2, r3, #1
   d8f24:	d00f      	beq.n	d8f46 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   d8f26:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   d8f2a:	bf14      	ite	ne
   d8f2c:	2301      	movne	r3, #1
   d8f2e:	2300      	moveq	r3, #0
   d8f30:	454b      	cmp	r3, r9
   d8f32:	d008      	beq.n	d8f46 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
          if (towrite)
   d8f34:	6963      	ldr	r3, [r4, #20]
   d8f36:	6a60      	ldr	r0, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
   d8f38:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   d8f3a:	2900      	cmp	r1, #0
   d8f3c:	d02c      	beq.n	d8f98 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   d8f3e:	4302      	orrs	r2, r0
   d8f40:	601a      	str	r2, [r3, #0]
   d8f42:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   d8f46:	69a1      	ldr	r1, [r4, #24]
   d8f48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d8f4a:	680a      	ldr	r2, [r1, #0]
   d8f4c:	4313      	orrs	r3, r2
   d8f4e:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   d8f50:	b117      	cbz	r7, d8f58 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   d8f52:	4638      	mov	r0, r7
   d8f54:	f007 fede 	bl	e0d14 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   d8f58:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d8f5c:	3301      	adds	r3, #1
   d8f5e:	d006      	beq.n	d8f6e <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   d8f60:	69e3      	ldr	r3, [r4, #28]
   d8f62:	681a      	ldr	r2, [r3, #0]
   d8f64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d8f66:	421a      	tst	r2, r3
            reply |= b;
   d8f68:	bf18      	it	ne
   d8f6a:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   d8f6e:	69a1      	ldr	r1, [r4, #24]
   d8f70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d8f72:	680a      	ldr	r2, [r1, #0]
   d8f74:	ea22 0303 	bic.w	r3, r2, r3
   d8f78:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   d8f7a:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d8f7e:	3301      	adds	r3, #1
        buffer[i] = reply;
   d8f80:	bf18      	it	ne
   d8f82:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   d8f86:	7b23      	ldrb	r3, [r4, #12]
   d8f88:	2b00      	cmp	r3, #0
   d8f8a:	d132      	bne.n	d8ff2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   d8f8c:	0076      	lsls	r6, r6, #1
   d8f8e:	b2f6      	uxtb	r6, r6
   d8f90:	2e00      	cmp	r6, #0
   d8f92:	d1bc      	bne.n	d8f0e <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   d8f94:	3501      	adds	r5, #1
   d8f96:	e7b2      	b.n	d8efe <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   d8f98:	ea22 0200 	bic.w	r2, r2, r0
   d8f9c:	601a      	str	r2, [r3, #0]
   d8f9e:	4689      	mov	r9, r1
   d8fa0:	e7d1      	b.n	d8f46 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   d8fa2:	69a1      	ldr	r1, [r4, #24]
   d8fa4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d8fa6:	680a      	ldr	r2, [r1, #0]
   d8fa8:	4313      	orrs	r3, r2
   d8faa:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   d8fac:	b117      	cbz	r7, d8fb4 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   d8fae:	4638      	mov	r0, r7
   d8fb0:	f007 feb0 	bl	e0d14 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   d8fb4:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d8fb8:	3301      	adds	r3, #1
   d8fba:	d008      	beq.n	d8fce <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
          if (send & b)
   d8fbc:	6963      	ldr	r3, [r4, #20]
   d8fbe:	6a61      	ldr	r1, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
   d8fc0:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   d8fc2:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   d8fc6:	bf14      	ite	ne
   d8fc8:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   d8fca:	438a      	biceq	r2, r1
   d8fcc:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   d8fce:	69a1      	ldr	r1, [r4, #24]
   d8fd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d8fd2:	680a      	ldr	r2, [r1, #0]
   d8fd4:	ea22 0303 	bic.w	r3, r2, r3
   d8fd8:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   d8fda:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d8fde:	3301      	adds	r3, #1
   d8fe0:	d0cb      	beq.n	d8f7a <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   d8fe2:	69e3      	ldr	r3, [r4, #28]
   d8fe4:	681a      	ldr	r2, [r3, #0]
   d8fe6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d8fe8:	421a      	tst	r2, r3
            reply |= b;
   d8fea:	bf18      	it	ne
   d8fec:	ea46 0808 	orrne.w	r8, r6, r8
   d8ff0:	e7c3      	b.n	d8f7a <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   d8ff2:	0876      	lsrs	r6, r6, #1
   d8ff4:	e7cc      	b.n	d8f90 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   d8ff6:	bf00      	nop
   d8ff8:	0007a120 	.word	0x0007a120

000d8ffc <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   d8ffc:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   d8ffe:	2201      	movs	r2, #1
  uint8_t data = send;
   d9000:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   d9004:	f10d 0107 	add.w	r1, sp, #7
   d9008:	f7ff ff52 	bl	d8eb0 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   d900c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d9010:	b003      	add	sp, #12
   d9012:	f85d fb04 	ldr.w	pc, [sp], #4

000d9016 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   d9016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d901a:	4604      	mov	r4, r0
  if (_spi) {
   d901c:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   d901e:	460e      	mov	r6, r1
   d9020:	4617      	mov	r7, r2
   d9022:	461d      	mov	r5, r3
  if (_spi) {
   d9024:	b110      	cbz	r0, d902c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   d9026:	6861      	ldr	r1, [r4, #4]
   d9028:	f00a fcc6 	bl	e39b8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   d902c:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d9030:	2100      	movs	r1, #0
   d9032:	b280      	uxth	r0, r0
   d9034:	f00b fb5b 	bl	e46ee <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   d9038:	9b06      	ldr	r3, [sp, #24]
   d903a:	eb05 0803 	add.w	r8, r5, r3
   d903e:	4545      	cmp	r5, r8
   d9040:	d108      	bne.n	d9054 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   d9042:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   d9044:	42b7      	cmp	r7, r6
   d9046:	d00b      	beq.n	d9060 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   d9048:	f816 1b01 	ldrb.w	r1, [r6], #1
   d904c:	4620      	mov	r0, r4
   d904e:	f7ff ffd5 	bl	d8ffc <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   d9052:	e7f7      	b.n	d9044 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   d9054:	f815 1b01 	ldrb.w	r1, [r5], #1
   d9058:	4620      	mov	r0, r4
   d905a:	f7ff ffcf 	bl	d8ffc <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   d905e:	e7ee      	b.n	d903e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   d9060:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d9064:	2101      	movs	r1, #1
   d9066:	b280      	uxth	r0, r0
   d9068:	f00b fb41 	bl	e46ee <digitalWrite>

  if (_spi) {
   d906c:	6820      	ldr	r0, [r4, #0]
   d906e:	b108      	cbz	r0, d9074 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   d9070:	f00a fc89 	bl	e3986 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   d9074:	2001      	movs	r0, #1
   d9076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d907a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   d907a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d907e:	4604      	mov	r4, r0
  if (_spi) {
   d9080:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
   d9082:	f89d 801c 	ldrb.w	r8, [sp, #28]
   d9086:	460e      	mov	r6, r1
   d9088:	4617      	mov	r7, r2
   d908a:	461d      	mov	r5, r3
  if (_spi) {
   d908c:	b110      	cbz	r0, d9094 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
   d908e:	6861      	ldr	r1, [r4, #4]
   d9090:	f00a fc92 	bl	e39b8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   d9094:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d9098:	2100      	movs	r1, #0
   d909a:	b280      	uxth	r0, r0
   d909c:	f00b fb27 	bl	e46ee <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
   d90a0:	4437      	add	r7, r6
   d90a2:	42be      	cmp	r6, r7
   d90a4:	d10a      	bne.n	d90bc <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
   d90a6:	9b06      	ldr	r3, [sp, #24]
   d90a8:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   d90aa:	42ae      	cmp	r6, r5
   d90ac:	d00c      	beq.n	d90c8 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
   d90ae:	4641      	mov	r1, r8
   d90b0:	4620      	mov	r0, r4
   d90b2:	f7ff ffa3 	bl	d8ffc <_ZN18Adafruit_SPIDevice8transferEh>
   d90b6:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
   d90ba:	e7f6      	b.n	d90aa <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
   d90bc:	f816 1b01 	ldrb.w	r1, [r6], #1
   d90c0:	4620      	mov	r0, r4
   d90c2:	f7ff ff9b 	bl	d8ffc <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
   d90c6:	e7ec      	b.n	d90a2 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
   d90c8:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d90cc:	2101      	movs	r1, #1
   d90ce:	b280      	uxth	r0, r0
   d90d0:	f00b fb0d 	bl	e46ee <digitalWrite>

  if (_spi) {
   d90d4:	6820      	ldr	r0, [r4, #0]
   d90d6:	b108      	cbz	r0, d90dc <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
   d90d8:	f00a fc55 	bl	e3986 <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
   d90dc:	2001      	movs	r0, #1
   d90de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d90e2 <_ZN21Apm303GensetQueryBankC1Ev>:

Apm303GensetQueryBank::Apm303GensetQueryBank()
{
    //******** Apm303 MAIN_DATA QUERY GROUP ********//

    apm303MainDatakey[GEN_QUERY1].start_addr = APM303_START_ADDR1;
   d90e2:	2224      	movs	r2, #36	; 0x24
   d90e4:	8002      	strh	r2, [r0, #0]
    apm303MainDatakey[GEN_QUERY1].num_of_regs = APM303_NUM_OF_REGS1;
   d90e6:	2207      	movs	r2, #7
Apm303GensetQueryBank::Apm303GensetQueryBank()
   d90e8:	b510      	push	{r4, lr}
    apm303MainDatakey[GEN_QUERY1].num_of_regs = APM303_NUM_OF_REGS1;
   d90ea:	8042      	strh	r2, [r0, #2]

    apm303MainDatakey[GEN_QUERY2].start_addr = APM303_START_ADDR2;
   d90ec:	2228      	movs	r2, #40	; 0x28
   d90ee:	8082      	strh	r2, [r0, #4]
    apm303MainDatakey[GEN_QUERY4].start_addr = APM303_START_ADDR4;
    apm303MainDatakey[GEN_QUERY4].num_of_regs = APM303_NUM_OF_REGS4;

    //******** Apm303 BASIC_INSTRUMENTATION_DATA QUERY GROUP ********//

    apm303BasInstDataKey[GEN_QUERY1].start_addr = APM303_START_ADDR5;
   d90f0:	2400      	movs	r4, #0
    apm303MainDatakey[GEN_QUERY3].start_addr = APM303_START_ADDR3;
   d90f2:	222c      	movs	r2, #44	; 0x2c
   d90f4:	8102      	strh	r2, [r0, #8]
    apm303BasInstDataKey[GEN_QUERY1].start_addr = APM303_START_ADDR5;
   d90f6:	8204      	strh	r4, [r0, #16]
    apm303MainDatakey[GEN_QUERY3].num_of_regs = APM303_NUM_OF_REGS3;
   d90f8:	220b      	movs	r2, #11
    apm303BasInstDataKey[GEN_QUERY1].num_of_regs = APM303_NUM_OF_REGS5;
   d90fa:	240f      	movs	r4, #15
    apm303MainDatakey[GEN_QUERY3].num_of_regs = APM303_NUM_OF_REGS3;
   d90fc:	8142      	strh	r2, [r0, #10]
    apm303BasInstDataKey[GEN_QUERY1].num_of_regs = APM303_NUM_OF_REGS5;
   d90fe:	8244      	strh	r4, [r0, #18]
    apm303MainDatakey[GEN_QUERY4].start_addr = APM303_START_ADDR4;
   d9100:	2237      	movs	r2, #55	; 0x37

    apm303BasInstDataKey[GEN_QUERY2].start_addr = APM303_START_ADDR6;
   d9102:	2415      	movs	r4, #21
    apm303MainDatakey[GEN_QUERY2].num_of_regs = APM303_NUM_OF_REGS2;
   d9104:	2109      	movs	r1, #9
    apm303MainDatakey[GEN_QUERY4].start_addr = APM303_START_ADDR4;
   d9106:	8182      	strh	r2, [r0, #12]
    apm303BasInstDataKey[GEN_QUERY2].start_addr = APM303_START_ADDR6;
   d9108:	8284      	strh	r4, [r0, #20]
    apm303MainDatakey[GEN_QUERY4].num_of_regs = APM303_NUM_OF_REGS4;
   d910a:	220c      	movs	r2, #12
    apm303BasInstDataKey[GEN_QUERY2].num_of_regs = APM303_NUM_OF_REGS6;
   d910c:	240e      	movs	r4, #14
    apm303MainDatakey[GEN_QUERY2].num_of_regs = APM303_NUM_OF_REGS2;
   d910e:	80c1      	strh	r1, [r0, #6]
    apm303MainDatakey[GEN_QUERY4].num_of_regs = APM303_NUM_OF_REGS4;
   d9110:	81c2      	strh	r2, [r0, #14]
    apm303BasInstDataKey[GEN_QUERY2].num_of_regs = APM303_NUM_OF_REGS6;
   d9112:	82c4      	strh	r4, [r0, #22]

    //******** Apm303 DERIVED_INSTRUMENTATION_DATA QUERY GROUP ********//

    apm303DerInstDataKey[GEN_QUERY1].start_addr = APM303_START_ADDR7;
   d9114:	8301      	strh	r1, [r0, #24]
    apm303DerInstDataKey[GEN_QUERY1].num_of_regs = APM303_NUM_OF_REGS7;
   d9116:	8342      	strh	r2, [r0, #26]
}
   d9118:	bd10      	pop	{r4, pc}

000d911a <_ZN21Apm303GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>:

void Apm303GensetQueryBank::getGenQueryKey(GeneratorDataSet gen_data_set, uint8_t gen_query_unit, 
                        GeneratorQueryKey *apm303Key)
{
    switch (gen_data_set)
   d911a:	2903      	cmp	r1, #3
   d911c:	d80a      	bhi.n	d9134 <_ZN21Apm303GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x1a>
   d911e:	e8df f001 	tbb	[pc, r1]
   d9122:	0a02      	.short	0x0a02
   d9124:	1610      	.short	0x1610
    {
        case GEN_MAIN:
        {
            apm303Key->start_addr = apm303MainDatakey[gen_query_unit].start_addr;
   d9126:	eb00 0182 	add.w	r1, r0, r2, lsl #2
   d912a:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
   d912e:	801a      	strh	r2, [r3, #0]
            apm303Key->num_of_regs = apm303MainDatakey[gen_query_unit].num_of_regs;
   d9130:	884a      	ldrh	r2, [r1, #2]
        }

        case GEN_ENG_STATUS:
        {
            apm303Key->start_addr = APM303_ENGINE_STATE_ADDR;
            apm303Key->num_of_regs = NUM_OF_ENGSTATE_REGS;
   d9132:	805a      	strh	r2, [r3, #2]

            break;
        }
    }

}
   d9134:	4770      	bx	lr
            apm303Key->start_addr = apm303BasInstDataKey[gen_query_unit].start_addr;
   d9136:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   d913a:	8a11      	ldrh	r1, [r2, #16]
   d913c:	8019      	strh	r1, [r3, #0]
            apm303Key->num_of_regs = apm303BasInstDataKey[gen_query_unit].num_of_regs;
   d913e:	8a52      	ldrh	r2, [r2, #18]
   d9140:	e7f7      	b.n	d9132 <_ZN21Apm303GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x18>
            apm303Key->start_addr = apm303DerInstDataKey[gen_query_unit].start_addr;
   d9142:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   d9146:	8b02      	ldrh	r2, [r0, #24]
   d9148:	801a      	strh	r2, [r3, #0]
            apm303Key->num_of_regs = apm303DerInstDataKey[gen_query_unit].num_of_regs;
   d914a:	8b42      	ldrh	r2, [r0, #26]
   d914c:	e7f1      	b.n	d9132 <_ZN21Apm303GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x18>
            apm303Key->start_addr = APM303_ENGINE_STATE_ADDR;
   d914e:	2217      	movs	r2, #23
   d9150:	801a      	strh	r2, [r3, #0]
            apm303Key->num_of_regs = NUM_OF_ENGSTATE_REGS;
   d9152:	2201      	movs	r2, #1
   d9154:	e7ed      	b.n	d9132 <_ZN21Apm303GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x18>

000d9156 <_ZN21Apm303GensetQueryBankD1Ev>:

Apm303GensetQueryBank::~Apm303GensetQueryBank(){}
   d9156:	4770      	bx	lr

000d9158 <_Z21processApm303MainDataPmPt>:
        }
    }
}

void processApm303MainData(uint32_t *modbus_buffer, uint16_t *alarm_buffer)
{
   d9158:	b570      	push	{r4, r5, r6, lr}
   d915a:	4605      	mov	r5, r0
     main_gen_data[RUN_HRS] = modbus_buffer[RUN_HRS]*0.1;
   d915c:	6800      	ldr	r0, [r0, #0]
   d915e:	4e24      	ldr	r6, [pc, #144]	; (d91f0 <_Z21processApm303MainDataPmPt+0x98>)
{
   d9160:	460c      	mov	r4, r1
     main_gen_data[RUN_HRS] = modbus_buffer[RUN_HRS]*0.1;
   d9162:	f00b fd39 	bl	e4bd8 <__aeabi_ui2d>
   d9166:	a320      	add	r3, pc, #128	; (adr r3, d91e8 <_Z21processApm303MainDataPmPt+0x90>)
   d9168:	e9d3 2300 	ldrd	r2, r3, [r3]
   d916c:	f00b fdae 	bl	e4ccc <__aeabi_dmul>
   d9170:	f00c f866 	bl	e5240 <__aeabi_d2f>
   d9174:	6030      	str	r0, [r6, #0]
     main_gen_data[NUM_OF_STARTS] = modbus_buffer[NUM_OF_STARTS];
   d9176:	edd5 7a01 	vldr	s15, [r5, #4]
   d917a:	eef8 7a67 	vcvt.f32.u32	s15, s15
     main_gen_data[CTRL_MODE] = modbus_buffer[CTRL_MODE] == 1 ? GEN_AUTO_MODE : GEN_MANUAL_MODE;
   d917e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
     main_gen_data[NUM_OF_STARTS] = modbus_buffer[NUM_OF_STARTS];
   d9182:	edc6 7a01 	vstr	s15, [r6, #4]
     main_gen_data[CTRL_MODE] = modbus_buffer[CTRL_MODE] == 1 ? GEN_AUTO_MODE : GEN_MANUAL_MODE;
   d9186:	68aa      	ldr	r2, [r5, #8]
   d9188:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d918c:	2a01      	cmp	r2, #1
   d918e:	bf18      	it	ne
   d9190:	eef0 7a47 	vmovne.f32	s15, s14
   d9194:	edc6 7a02 	vstr	s15, [r6, #8]
     main_gen_data[ENGINE_STATE] = modbus_buffer[ENGINE_STATE] == 1 ? ENGINE_RUNNING : ENGINE_AT_REST;
   d9198:	68ea      	ldr	r2, [r5, #12]
   d919a:	ed9f 7a16 	vldr	s14, [pc, #88]	; d91f4 <_Z21processApm303MainDataPmPt+0x9c>
   d919e:	2a01      	cmp	r2, #1
   d91a0:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
   d91a4:	bf08      	it	eq
   d91a6:	eeb0 7a67 	vmoveq.f32	s14, s15
   d91aa:	4633      	mov	r3, r6
   d91ac:	ed86 7a03 	vstr	s14, [r6, #12]

     //TODO: Since FC=2 is yet to be implemented in Modbus library, these would always return 0.
     //Run through the 24 possible alarms to get which ones are present and append to main_gen_data[]
     uint8_t metric_indx = ALARM_CODE1;
     uint8_t alarm_code = 1;
     for (uint8_t alarm_reg_indx = ALARM_REG1; alarm_reg_indx < MBDATA_ALRM_BUFF_SIZE; alarm_reg_indx++)
   d91b0:	1ea1      	subs	r1, r4, #2
     uint8_t alarm_code = 1;
   d91b2:	2201      	movs	r2, #1
     uint8_t metric_indx = ALARM_CODE1;
   d91b4:	2004      	movs	r0, #4
     {
        if (alarm_buffer[alarm_reg_indx] == 1)
   d91b6:	f831 4f02 	ldrh.w	r4, [r1, #2]!
   d91ba:	2c01      	cmp	r4, #1
   d91bc:	d10f      	bne.n	d91de <_Z21processApm303MainDataPmPt+0x86>
        {
            main_gen_data[metric_indx++] = alarm_code;
   d91be:	ee07 2a10 	vmov	s14, r2
   d91c2:	1c44      	adds	r4, r0, #1
   d91c4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   d91c8:	b2e4      	uxtb	r4, r4
   d91ca:	eb03 0580 	add.w	r5, r3, r0, lsl #2
            main_gen_data[metric_indx++] = 3;
   d91ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d91d2:	3002      	adds	r0, #2
            main_gen_data[metric_indx++] = alarm_code;
   d91d4:	ed85 7a00 	vstr	s14, [r5]
            main_gen_data[metric_indx++] = 3;
   d91d8:	b2c0      	uxtb	r0, r0
   d91da:	edc4 7a00 	vstr	s15, [r4]
        }
        alarm_code++;
   d91de:	3201      	adds	r2, #1
   d91e0:	b2d2      	uxtb	r2, r2
     for (uint8_t alarm_reg_indx = ALARM_REG1; alarm_reg_indx < MBDATA_ALRM_BUFF_SIZE; alarm_reg_indx++)
   d91e2:	2a19      	cmp	r2, #25
   d91e4:	d1e7      	bne.n	d91b6 <_Z21processApm303MainDataPmPt+0x5e>
    }
}
   d91e6:	bd70      	pop	{r4, r5, r6, pc}
   d91e8:	9999999a 	.word	0x9999999a
   d91ec:	3fb99999 	.word	0x3fb99999
   d91f0:	2003e11c 	.word	0x2003e11c
   d91f4:	00000000 	.word	0x00000000

000d91f8 <_Z24processApm303BasInstDataPmPt>:

void processApm303BasInstData(uint32_t *modbus_buffer, uint16_t *alarm_buffer)
{
   d91f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t metric_indx = TOTAL_KWH;
    bas_inst_gen_data[metric_indx++] = MB_UNAVAIL_VAL;
   d91fc:	4d36      	ldr	r5, [pc, #216]	; (d92d8 <_Z24processApm303BasInstDataPmPt+0xe0>)
   d91fe:	4f37      	ldr	r7, [pc, #220]	; (d92dc <_Z24processApm303BasInstDataPmPt+0xe4>)
   d9200:	602f      	str	r7, [r5, #0]
{
   d9202:	4606      	mov	r6, r0
    bas_inst_gen_data[metric_indx++] = modbus_buffer[OIL_PRESSR] * 0.1;
   d9204:	6840      	ldr	r0, [r0, #4]
   d9206:	f00b fce7 	bl	e4bd8 <__aeabi_ui2d>
   d920a:	a331      	add	r3, pc, #196	; (adr r3, d92d0 <_Z24processApm303BasInstDataPmPt+0xd8>)
   d920c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9210:	f00b fd5c 	bl	e4ccc <__aeabi_dmul>
   d9214:	f00c f814 	bl	e5240 <__aeabi_d2f>
   d9218:	6068      	str	r0, [r5, #4]
    bas_inst_gen_data[metric_indx++] = modbus_buffer[COOL_TEMP];
   d921a:	edd6 7a02 	vldr	s15, [r6, #8]
    bas_inst_gen_data[metric_indx++] = MB_UNAVAIL_VAL;
   d921e:	60ef      	str	r7, [r5, #12]
    bas_inst_gen_data[metric_indx++] = modbus_buffer[COOL_TEMP];
   d9220:	eef8 7a67 	vcvt.f32.u32	s15, s15
    bas_inst_gen_data[metric_indx++] = MB_UNAVAIL_VAL;
   d9224:	612f      	str	r7, [r5, #16]
    bas_inst_gen_data[metric_indx++] = modbus_buffer[COOL_TEMP];
   d9226:	edc5 7a02 	vstr	s15, [r5, #8]
    bas_inst_gen_data[metric_indx++] = modbus_buffer[CHARGER_ALT_VOLT] * 0.1;
   d922a:	6970      	ldr	r0, [r6, #20]
   d922c:	f00b fcd4 	bl	e4bd8 <__aeabi_ui2d>
   d9230:	a327      	add	r3, pc, #156	; (adr r3, d92d0 <_Z24processApm303BasInstDataPmPt+0xd8>)
   d9232:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9236:	f00b fd49 	bl	e4ccc <__aeabi_dmul>
   d923a:	f00c f801 	bl	e5240 <__aeabi_d2f>

    for (; metric_indx < L1_CURR; metric_indx++)
    {
        if ((metric_indx == ENGINE_BATT_VOLT) || (metric_indx == GEN_FREQCY))
        { bas_inst_gen_data[metric_indx] = modbus_buffer[metric_indx] * 0.1; }
   d923e:	f20f 0990 	addw	r9, pc, #144	; 0x90
   d9242:	e9d9 8900 	ldrd	r8, r9, [r9]
    bas_inst_gen_data[metric_indx++] = modbus_buffer[CHARGER_ALT_VOLT] * 0.1;
   d9246:	6168      	str	r0, [r5, #20]
   d9248:	2406      	movs	r4, #6
   d924a:	46aa      	mov	sl, r5
        if ((metric_indx == ENGINE_BATT_VOLT) || (metric_indx == GEN_FREQCY))
   d924c:	2c06      	cmp	r4, #6
   d924e:	b2e3      	uxtb	r3, r4
   d9250:	d001      	beq.n	d9256 <_Z24processApm303BasInstDataPmPt+0x5e>
   d9252:	2b08      	cmp	r3, #8
   d9254:	d122      	bne.n	d929c <_Z24processApm303BasInstDataPmPt+0xa4>
        { bas_inst_gen_data[metric_indx] = modbus_buffer[metric_indx] * 0.1; }
   d9256:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   d925a:	f00b fcbd 	bl	e4bd8 <__aeabi_ui2d>
   d925e:	4642      	mov	r2, r8
   d9260:	464b      	mov	r3, r9
   d9262:	f00b fd33 	bl	e4ccc <__aeabi_dmul>
   d9266:	f00b ffeb 	bl	e5240 <__aeabi_d2f>
   d926a:	61a8      	str	r0, [r5, #24]
    for (; metric_indx < L1_CURR; metric_indx++)
   d926c:	3401      	adds	r4, #1
   d926e:	2c0f      	cmp	r4, #15
   d9270:	f105 0504 	add.w	r5, r5, #4
   d9274:	d1ea      	bne.n	d924c <_Z24processApm303BasInstDataPmPt+0x54>
    for (; metric_indx < CURR_LAG_LEAD; metric_indx++)
    {
        if (metric_indx == EARTH_CURR)
        { bas_inst_gen_data[metric_indx] = MB_UNAVAIL_VAL; }
        else
        { bas_inst_gen_data[metric_indx] = modbus_buffer[metric_indx] * 0.1; }    
   d9276:	f20f 0958 	addw	r9, pc, #88	; 0x58
   d927a:	e9d9 8900 	ldrd	r8, r9, [r9]
        if (metric_indx == EARTH_CURR)
   d927e:	2c12      	cmp	r4, #18
   d9280:	d115      	bne.n	d92ae <_Z24processApm303BasInstDataPmPt+0xb6>
        { bas_inst_gen_data[metric_indx] = MB_UNAVAIL_VAL; }
   d9282:	f8ca 7048 	str.w	r7, [sl, #72]	; 0x48
    for (; metric_indx < CURR_LAG_LEAD; metric_indx++)
   d9286:	3401      	adds	r4, #1
   d9288:	2c16      	cmp	r4, #22
   d928a:	d1f8      	bne.n	d927e <_Z24processApm303BasInstDataPmPt+0x86>
    }

    bas_inst_gen_data[metric_indx] = modbus_buffer[CURR_LAG_LEAD];
   d928c:	edd6 7a16 	vldr	s15, [r6, #88]	; 0x58
   d9290:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d9294:	edca 7a16 	vstr	s15, [sl, #88]	; 0x58
}
   d9298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        { bas_inst_gen_data[metric_indx] = modbus_buffer[metric_indx]; }   
   d929c:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   d92a0:	ee07 3a90 	vmov	s15, r3
   d92a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d92a8:	edc5 7a06 	vstr	s15, [r5, #24]
   d92ac:	e7de      	b.n	d926c <_Z24processApm303BasInstDataPmPt+0x74>
        { bas_inst_gen_data[metric_indx] = modbus_buffer[metric_indx] * 0.1; }    
   d92ae:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   d92b2:	f00b fc91 	bl	e4bd8 <__aeabi_ui2d>
   d92b6:	4642      	mov	r2, r8
   d92b8:	464b      	mov	r3, r9
   d92ba:	f00b fd07 	bl	e4ccc <__aeabi_dmul>
   d92be:	f00b ffbf 	bl	e5240 <__aeabi_d2f>
   d92c2:	eb0a 0584 	add.w	r5, sl, r4, lsl #2
   d92c6:	6028      	str	r0, [r5, #0]
   d92c8:	e7dd      	b.n	d9286 <_Z24processApm303BasInstDataPmPt+0x8e>
   d92ca:	bf00      	nop
   d92cc:	f3af 8000 	nop.w
   d92d0:	9999999a 	.word	0x9999999a
   d92d4:	3fb99999 	.word	0x3fb99999
   d92d8:	2003da0c 	.word	0x2003da0c
   d92dc:	ccc0a468 	.word	0xccc0a468

000d92e0 <_Z24processApm303DerInstDataPmPt>:

void processApm303DerInstData(uint32_t *modbus_buffer, uint16_t *alarm_buffer)
{
   d92e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d92e4:	4f20      	ldr	r7, [pc, #128]	; (d9368 <_Z24processApm303DerInstDataPmPt+0x88>)
     uint8_t metric_indx = TOTAL_WATT;
     for (; metric_indx < L1_KVAR; metric_indx++)
     { der_inst_gen_data[metric_indx] = modbus_buffer[metric_indx] * 0.1; }
   d92e6:	f20f 0970 	addw	r9, pc, #112	; 0x70
   d92ea:	e9d9 8900 	ldrd	r8, r9, [r9]
{
   d92ee:	4604      	mov	r4, r0
   d92f0:	1f05      	subs	r5, r0, #4
   d92f2:	f100 0a10 	add.w	sl, r0, #16
   d92f6:	463e      	mov	r6, r7
     { der_inst_gen_data[metric_indx] = modbus_buffer[metric_indx] * 0.1; }
   d92f8:	f855 0f04 	ldr.w	r0, [r5, #4]!
   d92fc:	f00b fc6c 	bl	e4bd8 <__aeabi_ui2d>
   d9300:	4642      	mov	r2, r8
   d9302:	464b      	mov	r3, r9
   d9304:	f00b fce2 	bl	e4ccc <__aeabi_dmul>
   d9308:	f00b ff9a 	bl	e5240 <__aeabi_d2f>
     for (; metric_indx < L1_KVAR; metric_indx++)
   d930c:	4555      	cmp	r5, sl
     { der_inst_gen_data[metric_indx] = modbus_buffer[metric_indx] * 0.1; }
   d930e:	f847 0b04 	str.w	r0, [r7], #4
     for (; metric_indx < L1_KVAR; metric_indx++)
   d9312:	d1f1      	bne.n	d92f8 <_Z24processApm303DerInstDataPmPt+0x18>

     for (; metric_indx < L1_PF; metric_indx++)
     { der_inst_gen_data[metric_indx] = MB_UNAVAIL_VAL; }
   d9314:	4b15      	ldr	r3, [pc, #84]	; (d936c <_Z24processApm303DerInstDataPmPt+0x8c>)
   d9316:	f8df a058 	ldr.w	sl, [pc, #88]	; d9370 <_Z24processApm303DerInstDataPmPt+0x90>
   d931a:	6173      	str	r3, [r6, #20]

     for (; metric_indx < PERCENT_OF_FULL_POWER; metric_indx++)
     { der_inst_gen_data[metric_indx] = modbus_buffer[metric_indx] * 0.01; }
   d931c:	f20f 0940 	addw	r9, pc, #64	; 0x40
   d9320:	e9d9 8900 	ldrd	r8, r9, [r9]
   d9324:	f104 0720 	add.w	r7, r4, #32
     { der_inst_gen_data[metric_indx] = MB_UNAVAIL_VAL; }
   d9328:	61b3      	str	r3, [r6, #24]
   d932a:	61f3      	str	r3, [r6, #28]
   d932c:	6233      	str	r3, [r6, #32]
     for (; metric_indx < PERCENT_OF_FULL_POWER; metric_indx++)
   d932e:	3430      	adds	r4, #48	; 0x30
   d9330:	461d      	mov	r5, r3
     { der_inst_gen_data[metric_indx] = modbus_buffer[metric_indx] * 0.01; }
   d9332:	f857 0f04 	ldr.w	r0, [r7, #4]!
   d9336:	f00b fc4f 	bl	e4bd8 <__aeabi_ui2d>
   d933a:	4642      	mov	r2, r8
   d933c:	464b      	mov	r3, r9
   d933e:	f00b fcc5 	bl	e4ccc <__aeabi_dmul>
   d9342:	f00b ff7d 	bl	e5240 <__aeabi_d2f>
     for (; metric_indx < PERCENT_OF_FULL_POWER; metric_indx++)
   d9346:	42bc      	cmp	r4, r7
     { der_inst_gen_data[metric_indx] = modbus_buffer[metric_indx] * 0.01; }
   d9348:	f84a 0b04 	str.w	r0, [sl], #4
     for (; metric_indx < PERCENT_OF_FULL_POWER; metric_indx++)
   d934c:	d1f1      	bne.n	d9332 <_Z24processApm303DerInstDataPmPt+0x52>

     der_inst_gen_data[PERCENT_OF_FULL_POWER] = MB_UNAVAIL_VAL;
   d934e:	6375      	str	r5, [r6, #52]	; 0x34
   d9350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9354:	f3af 8000 	nop.w
   d9358:	9999999a 	.word	0x9999999a
   d935c:	3fb99999 	.word	0x3fb99999
   d9360:	47ae147b 	.word	0x47ae147b
   d9364:	3f847ae1 	.word	0x3f847ae1
   d9368:	2003daa8 	.word	0x2003daa8
   d936c:	ccc0a468 	.word	0xccc0a468
   d9370:	2003dacc 	.word	0x2003dacc

000d9374 <_Z19formatGenDataApm30316GeneratorDataSetPmPt>:
{
   d9374:	4603      	mov	r3, r0
    switch (data_group)
   d9376:	2b01      	cmp	r3, #1
{
   d9378:	4608      	mov	r0, r1
   d937a:	4611      	mov	r1, r2
    switch (data_group)
   d937c:	d004      	beq.n	d9388 <_Z19formatGenDataApm30316GeneratorDataSetPmPt+0x14>
   d937e:	2b02      	cmp	r3, #2
   d9380:	d004      	beq.n	d938c <_Z19formatGenDataApm30316GeneratorDataSetPmPt+0x18>
   d9382:	b92b      	cbnz	r3, d9390 <_Z19formatGenDataApm30316GeneratorDataSetPmPt+0x1c>
            processApm303MainData(modbus_buffer, alarm_buffer);
   d9384:	f7ff bee8 	b.w	d9158 <_Z21processApm303MainDataPmPt>
            processApm303BasInstData(modbus_buffer, alarm_buffer);
   d9388:	f7ff bf36 	b.w	d91f8 <_Z24processApm303BasInstDataPmPt>
            processApm303DerInstData(modbus_buffer, alarm_buffer);
   d938c:	f7ff bfa8 	b.w	d92e0 <_Z24processApm303DerInstDataPmPt>
}
   d9390:	4770      	bx	lr

000d9392 <_ZN20Dcp10GensetQueryBankC1Ev>:

Dcp10GensetQueryBank::Dcp10GensetQueryBank()
{
    //******** DCP10 MAIN_DATA QUERY GROUP ********//

    dcp10MainDatakey[GEN_QUERY1].start_addr = DCP10_START_ADDR1;
   d9392:	f242 0230 	movw	r2, #8240	; 0x2030
   d9396:	8002      	strh	r2, [r0, #0]
    dcp10MainDatakey[GEN_QUERY1].num_of_regs = DCP10_NUM_OF_REGS1;
   d9398:	2201      	movs	r2, #1
   d939a:	8042      	strh	r2, [r0, #2]

    dcp10MainDatakey[GEN_QUERY2].start_addr = DCP10_START_ADDR2;
    dcp10MainDatakey[GEN_QUERY2].num_of_regs = DCP10_NUM_OF_REGS2;

    dcp10MainDatakey[GEN_QUERY3].start_addr = DCP10_START_ADDR3;
    dcp10MainDatakey[GEN_QUERY3].num_of_regs = DCP10_NUM_OF_REGS3;
   d939c:	8142      	strh	r2, [r0, #10]

    //******** DCP10 BASIC_INSTRUMENTATION_DATA QUERY GROUP ********//

    dcp10BasInstDataKey[GEN_QUERY1].start_addr = DCP10_START_ADDR4;
   d939e:	f241 0216 	movw	r2, #4118	; 0x1016
    dcp10MainDatakey[GEN_QUERY2].start_addr = DCP10_START_ADDR2;
   d93a2:	f241 011e 	movw	r1, #4126	; 0x101e
    dcp10BasInstDataKey[GEN_QUERY1].start_addr = DCP10_START_ADDR4;
   d93a6:	8182      	strh	r2, [r0, #12]
    dcp10BasInstDataKey[GEN_QUERY1].num_of_regs = DCP10_NUM_OF_REGS4;
   d93a8:	2205      	movs	r2, #5
    dcp10MainDatakey[GEN_QUERY2].start_addr = DCP10_START_ADDR2;
   d93aa:	8081      	strh	r1, [r0, #4]
    dcp10BasInstDataKey[GEN_QUERY1].num_of_regs = DCP10_NUM_OF_REGS4;
   d93ac:	81c2      	strh	r2, [r0, #14]
    dcp10MainDatakey[GEN_QUERY2].num_of_regs = DCP10_NUM_OF_REGS2;
   d93ae:	2103      	movs	r1, #3

    dcp10BasInstDataKey[GEN_QUERY2].start_addr = DCP10_START_ADDR5;
   d93b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    dcp10MainDatakey[GEN_QUERY2].num_of_regs = DCP10_NUM_OF_REGS2;
   d93b4:	80c1      	strh	r1, [r0, #6]
    dcp10BasInstDataKey[GEN_QUERY2].start_addr = DCP10_START_ADDR5;
   d93b6:	8202      	strh	r2, [r0, #16]
    dcp10MainDatakey[GEN_QUERY3].start_addr = DCP10_START_ADDR3;
   d93b8:	f241 010c 	movw	r1, #4108	; 0x100c
    dcp10BasInstDataKey[GEN_QUERY2].num_of_regs = DCP10_NUM_OF_REGS5;
   d93bc:	220d      	movs	r2, #13
    dcp10MainDatakey[GEN_QUERY3].start_addr = DCP10_START_ADDR3;
   d93be:	8101      	strh	r1, [r0, #8]
    dcp10BasInstDataKey[GEN_QUERY2].num_of_regs = DCP10_NUM_OF_REGS5;
   d93c0:	8242      	strh	r2, [r0, #18]
}
   d93c2:	4770      	bx	lr

000d93c4 <_ZN20Dcp10GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>:

void Dcp10GensetQueryBank::getGenQueryKey(GeneratorDataSet gen_data_set, uint8_t gen_query_unit, 
                        GeneratorQueryKey *dcp10Key)
{
    switch (gen_data_set)
   d93c4:	2901      	cmp	r1, #1
   d93c6:	d00a      	beq.n	d93de <_ZN20Dcp10GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x1a>
   d93c8:	2903      	cmp	r1, #3
   d93ca:	d00e      	beq.n	d93ea <_ZN20Dcp10GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x26>
   d93cc:	b931      	cbnz	r1, d93dc <_ZN20Dcp10GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x18>
    {
        case GEN_MAIN:
        {
            dcp10Key->start_addr = dcp10MainDatakey[gen_query_unit].start_addr;
   d93ce:	eb00 0182 	add.w	r1, r0, r2, lsl #2
   d93d2:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
   d93d6:	801a      	strh	r2, [r3, #0]
            dcp10Key->num_of_regs = dcp10MainDatakey[gen_query_unit].num_of_regs;
   d93d8:	884a      	ldrh	r2, [r1, #2]
        }

        case GEN_ENG_STATUS:
        {
            dcp10Key->start_addr = DCP10_ENGINE_STATE_ADDR;
            dcp10Key->num_of_regs = NUM_OF_ENGSTATE_REGS;
   d93da:	805a      	strh	r2, [r3, #2]

            break;
        }
    }
}
   d93dc:	4770      	bx	lr
            dcp10Key->start_addr = dcp10BasInstDataKey[gen_query_unit].start_addr;
   d93de:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   d93e2:	8982      	ldrh	r2, [r0, #12]
   d93e4:	801a      	strh	r2, [r3, #0]
            dcp10Key->num_of_regs = dcp10BasInstDataKey[gen_query_unit].num_of_regs;
   d93e6:	89c2      	ldrh	r2, [r0, #14]
   d93e8:	e7f7      	b.n	d93da <_ZN20Dcp10GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x16>
            dcp10Key->start_addr = DCP10_ENGINE_STATE_ADDR;
   d93ea:	f241 020c 	movw	r2, #4108	; 0x100c
   d93ee:	801a      	strh	r2, [r3, #0]
            dcp10Key->num_of_regs = NUM_OF_ENGSTATE_REGS;
   d93f0:	2201      	movs	r2, #1
   d93f2:	e7f2      	b.n	d93da <_ZN20Dcp10GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x16>

000d93f4 <_ZN20Dcp10GensetQueryBankD1Ev>:

Dcp10GensetQueryBank::~Dcp10GensetQueryBank(){}
   d93f4:	4770      	bx	lr
	...

000d93f8 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt>:

void formatGenDataDCP10(GeneratorDataSet data_group, uint32_t *modbus_buffer, uint16_t *alarm_buffer)
{
   d93f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d93fa:	460d      	mov	r5, r1
    switch (data_group)
   d93fc:	b110      	cbz	r0, d9404 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0xc>
   d93fe:	2801      	cmp	r0, #1
   d9400:	d054      	beq.n	d94ac <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0xb4>
            }

            break;
        }
    }
   d9402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            main_gen_data[RUN_HRS] = modbus_buffer[RUN_HRS];
   d9404:	edd1 7a00 	vldr	s15, [r1]
   d9408:	4b51      	ldr	r3, [pc, #324]	; (d9550 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0x158>)
            main_gen_data[NUM_OF_STARTS] = MB_UNAVAIL_VAL;
   d940a:	4952      	ldr	r1, [pc, #328]	; (d9554 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0x15c>)
   d940c:	6059      	str	r1, [r3, #4]
            main_gen_data[RUN_HRS] = modbus_buffer[RUN_HRS];
   d940e:	eef8 7a67 	vcvt.f32.u32	s15, s15
            main_gen_data[CTRL_MODE] = main_gen_data[CTRL_MODE] == 0 ? GEN_MANUAL_MODE : GEN_AUTO_MODE;
   d9412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
            main_gen_data[RUN_HRS] = modbus_buffer[RUN_HRS];
   d9416:	edc3 7a00 	vstr	s15, [r3]
            main_gen_data[CTRL_MODE] = modbus_buffer[CTRL_MODE] & DCP10_CTRL_MOD_MASK;
   d941a:	68a9      	ldr	r1, [r5, #8]
   d941c:	f001 0120 	and.w	r1, r1, #32
   d9420:	ee07 1a90 	vmov	s15, r1
   d9424:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
            main_gen_data[CTRL_MODE] = main_gen_data[CTRL_MODE] == 0 ? GEN_MANUAL_MODE : GEN_AUTO_MODE;
   d9428:	eddf 7a4b 	vldr	s15, [pc, #300]	; d9558 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0x160>
   d942c:	eeb4 7a67 	vcmp.f32	s14, s15
   d9430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9434:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d9438:	bf18      	it	ne
   d943a:	eeb0 7a66 	vmovne.f32	s14, s13
   d943e:	ed83 7a02 	vstr	s14, [r3, #8]
            main_gen_data[ENGINE_STATE] = modbus_buffer[ENGINE_STATE] > 497 ? ENGINE_RUNNING : ENGINE_AT_REST;
   d9442:	68e9      	ldr	r1, [r5, #12]
   d9444:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
   d9448:	f5b1 7ff9 	cmp.w	r1, #498	; 0x1f2
   d944c:	bf34      	ite	cc
   d944e:	eeb0 6a67 	vmovcc.f32	s12, s15
   d9452:	eeb0 6a47 	vmovcs.f32	s12, s14
   d9456:	ed83 6a03 	vstr	s12, [r3, #12]
            main_gen_data[alrm_indx++] = alarm_buffer[ALARM_REG1] & DCP10_SHT_ALRM_MASK;
   d945a:	8811      	ldrh	r1, [r2, #0]
   d945c:	f001 0110 	and.w	r1, r1, #16
   d9460:	4618      	mov	r0, r3
            if (main_gen_data[ALARM_CODE1] == DCP10_SHT_ALRM_MASK)
   d9462:	b121      	cbz	r1, d946e <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0x76>
                main_gen_data[ALARM_CODE1] = 1;
   d9464:	edc3 6a04 	vstr	s13, [r3, #16]
                main_gen_data[alrm_indx] = 3;
   d9468:	ed83 7a05 	vstr	s14, [r3, #20]
                return;
   d946c:	e7c9      	b.n	d9402 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0xa>
            main_gen_data[ALARM_CODE1] = 0;
   d946e:	edc3 7a04 	vstr	s15, [r3, #16]
            main_gen_data[alrm_indx++] = alarm_buffer[ALARM_REG2];
   d9472:	8852      	ldrh	r2, [r2, #2]
   d9474:	ee06 2a90 	vmov	s13, r2
   d9478:	eef8 6a66 	vcvt.f32.u32	s13, s13
   d947c:	edc3 6a04 	vstr	s13, [r3, #16]
            if ( main_gen_data[alrm_indx++] > 0 &&  main_gen_data[alrm_indx++] <= 15)
   d9480:	edd3 6a05 	vldr	s13, [r3, #20]
   d9484:	eef5 6ac0 	vcmpe.f32	s13, #0.0
   d9488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d948c:	dd0b      	ble.n	d94a6 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0xae>
   d948e:	ed93 6a06 	vldr	s12, [r3, #24]
   d9492:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
   d9496:	eeb4 6ae6 	vcmpe.f32	s12, s13
   d949a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d949e:	d802      	bhi.n	d94a6 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0xae>
                main_gen_data[alrm_indx] = 3;
   d94a0:	ed83 7a07 	vstr	s14, [r3, #28]
                return;
   d94a4:	e7ad      	b.n	d9402 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0xa>
            main_gen_data[ALARM_CODE1] = 0;
   d94a6:	edc0 7a04 	vstr	s15, [r0, #16]
            break;
   d94aa:	e7aa      	b.n	d9402 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0xa>
            bas_inst_gen_data[TOTAL_KWH] = MB_UNAVAIL_VAL;
   d94ac:	4c2b      	ldr	r4, [pc, #172]	; (d955c <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0x164>)
   d94ae:	4e29      	ldr	r6, [pc, #164]	; (d9554 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0x15c>)
   d94b0:	6026      	str	r6, [r4, #0]
            bas_inst_gen_data[OIL_PRESSR] = modbus_buffer[OIL_PRESSR];
   d94b2:	edd1 7a01 	vldr	s15, [r1, #4]
   d94b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
            bas_inst_gen_data[GEN_FREQCY] = modbus_buffer[GEN_FREQCY] * 0.1;
   d94ba:	462f      	mov	r7, r5
            bas_inst_gen_data[OIL_PRESSR] = modbus_buffer[OIL_PRESSR];
   d94bc:	edc4 7a01 	vstr	s15, [r4, #4]
            bas_inst_gen_data[COOL_TEMP] = modbus_buffer[COOL_TEMP];
   d94c0:	edd1 7a02 	vldr	s15, [r1, #8]
            bas_inst_gen_data[OIL_TEMP] = MB_UNAVAIL_VAL;
   d94c4:	60e6      	str	r6, [r4, #12]
            bas_inst_gen_data[COOL_TEMP] = modbus_buffer[COOL_TEMP];
   d94c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
            bas_inst_gen_data[FUEL_LEVEL] = MB_UNAVAIL_VAL;
   d94ca:	6126      	str	r6, [r4, #16]
            bas_inst_gen_data[COOL_TEMP] = modbus_buffer[COOL_TEMP];
   d94cc:	edc4 7a02 	vstr	s15, [r4, #8]
            bas_inst_gen_data[CHARGER_ALT_VOLT] = modbus_buffer [CHARGER_ALT_VOLT] * 0.1;
   d94d0:	6948      	ldr	r0, [r1, #20]
   d94d2:	f00b fb81 	bl	e4bd8 <__aeabi_ui2d>
   d94d6:	a31c      	add	r3, pc, #112	; (adr r3, d9548 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0x150>)
   d94d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d94dc:	f00b fbf6 	bl	e4ccc <__aeabi_dmul>
   d94e0:	f00b feae 	bl	e5240 <__aeabi_d2f>
   d94e4:	6160      	str	r0, [r4, #20]
            bas_inst_gen_data[ENGINE_BATT_VOLT] = modbus_buffer[ENGINE_BATT_VOLT] * 0.1;
   d94e6:	69a8      	ldr	r0, [r5, #24]
   d94e8:	f00b fb76 	bl	e4bd8 <__aeabi_ui2d>
   d94ec:	a316      	add	r3, pc, #88	; (adr r3, d9548 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0x150>)
   d94ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   d94f2:	f00b fbeb 	bl	e4ccc <__aeabi_dmul>
   d94f6:	f00b fea3 	bl	e5240 <__aeabi_d2f>
   d94fa:	61a0      	str	r0, [r4, #24]
            bas_inst_gen_data[ENGINE_SPEED] = modbus_buffer[ENGINE_SPEED];
   d94fc:	edd5 7a07 	vldr	s15, [r5, #28]
   d9500:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d9504:	3544      	adds	r5, #68	; 0x44
   d9506:	edc4 7a07 	vstr	s15, [r4, #28]
            bas_inst_gen_data[GEN_FREQCY] = modbus_buffer[GEN_FREQCY] * 0.1;
   d950a:	f857 0f20 	ldr.w	r0, [r7, #32]!
   d950e:	f00b fb63 	bl	e4bd8 <__aeabi_ui2d>
   d9512:	a30d      	add	r3, pc, #52	; (adr r3, d9548 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0x150>)
   d9514:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9518:	f00b fbd8 	bl	e4ccc <__aeabi_dmul>
   d951c:	f00b fe90 	bl	e5240 <__aeabi_d2f>
   d9520:	f104 0224 	add.w	r2, r4, #36	; 0x24
   d9524:	6220      	str	r0, [r4, #32]
            for (; metrc_indx < EARTH_CURR; metrc_indx++)
   d9526:	4633      	mov	r3, r6
                bas_inst_gen_data[metrc_indx] = modbus_buffer[metrc_indx];
   d9528:	edd7 7a01 	vldr	s15, [r7, #4]
   d952c:	3704      	adds	r7, #4
   d952e:	eef8 7a67 	vcvt.f32.u32	s15, s15
            for (; metrc_indx < EARTH_CURR; metrc_indx++)
   d9532:	42bd      	cmp	r5, r7
                bas_inst_gen_data[metrc_indx] = modbus_buffer[metrc_indx];
   d9534:	ece2 7a01 	vstmia	r2!, {s15}
            for (; metrc_indx < EARTH_CURR; metrc_indx++)
   d9538:	d1f6      	bne.n	d9528 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0x130>
                bas_inst_gen_data[metrc_indx] = MB_UNAVAIL_VAL;
   d953a:	64a3      	str	r3, [r4, #72]	; 0x48
   d953c:	64e3      	str	r3, [r4, #76]	; 0x4c
   d953e:	6523      	str	r3, [r4, #80]	; 0x50
   d9540:	6563      	str	r3, [r4, #84]	; 0x54
   d9542:	65a3      	str	r3, [r4, #88]	; 0x58
            for ( ; metrc_indx <= CURR_LAG_LEAD; metrc_indx++)
   d9544:	e75d      	b.n	d9402 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0xa>
   d9546:	bf00      	nop
   d9548:	9999999a 	.word	0x9999999a
   d954c:	3fb99999 	.word	0x3fb99999
   d9550:	2003e11c 	.word	0x2003e11c
   d9554:	ccc0a468 	.word	0xccc0a468
   d9558:	00000000 	.word	0x00000000
   d955c:	2003da0c 	.word	0x2003da0c

000d9560 <_ZN18DseGensetQueryBankC1Ev>:

DseGensetQueryBank::DseGensetQueryBank()
{
    //******** DSE MAIN_DATA QUERY GROUP ********//

    dseMainDatakey[GEN_QUERY1].start_addr = DSE_START_ADDR1;
   d9560:	f240 7206 	movw	r2, #1798	; 0x706
   d9564:	8002      	strh	r2, [r0, #0]
    dseMainDatakey[GEN_QUERY1].num_of_regs = DSE_NUM_OF_REGS1;
   d9566:	220c      	movs	r2, #12
   d9568:	8042      	strh	r2, [r0, #2]

    dseMainDatakey[GEN_QUERY2].start_addr = DSE_START_ADDR2;
   d956a:	f44f 7241 	mov.w	r2, #772	; 0x304
   d956e:	8082      	strh	r2, [r0, #4]
    dseMainDatakey[GEN_QUERY2].num_of_regs = DSE_NUM_OF_REGS2;
   d9570:	2201      	movs	r2, #1
   d9572:	80c2      	strh	r2, [r0, #6]

    dseMainDatakey[GEN_QUERY3].start_addr = DSE_START_ADDR3;
    dseMainDatakey[GEN_QUERY3].num_of_regs = DSE_NUM_OF_REGS3;
   d9574:	8142      	strh	r2, [r0, #10]

    dseMainDatakey[GEN_QUERY4].start_addr = DSE_START_ADDR4;
   d9576:	f649 2201 	movw	r2, #39425	; 0x9a01
   d957a:	8182      	strh	r2, [r0, #12]
    dseMainDatakey[GEN_QUERY4].num_of_regs = DSE_NUM_OF_REGS4;
   d957c:	2206      	movs	r2, #6
   d957e:	81c2      	strh	r2, [r0, #14]

    //******** DSE BASIC_INSTRUMENTATION_DATA QUERY GROUP ********//

    dseBasInstDataKey[GEN_QUERY1].start_addr = DSE_START_ADDR5;
   d9580:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   d9584:	8202      	strh	r2, [r0, #16]
    dseBasInstDataKey[GEN_QUERY1].num_of_regs = DSE_NUM_OF_REGS5;

    dseBasInstDataKey[GEN_QUERY2].start_addr = DSE_START_ADDR6;
   d9586:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d958a:	8282      	strh	r2, [r0, #20]
    dseBasInstDataKey[GEN_QUERY2].num_of_regs = DSE_NUM_OF_REGS6;
   d958c:	2214      	movs	r2, #20
DseGensetQueryBank::DseGensetQueryBank()
   d958e:	b530      	push	{r4, r5, lr}
    dseMainDatakey[GEN_QUERY3].start_addr = DSE_START_ADDR3;
   d9590:	f240 4107 	movw	r1, #1031	; 0x407
    dseBasInstDataKey[GEN_QUERY2].num_of_regs = DSE_NUM_OF_REGS6;
   d9594:	82c2      	strh	r2, [r0, #22]

    dseBasInstDataKey[GEN_QUERY3].start_addr = DSE_START_ADDR7;
   d9596:	f240 4214 	movw	r2, #1044	; 0x414
    dseMainDatakey[GEN_QUERY3].start_addr = DSE_START_ADDR3;
   d959a:	8101      	strh	r1, [r0, #8]
    dseBasInstDataKey[GEN_QUERY3].start_addr = DSE_START_ADDR7;
   d959c:	8302      	strh	r2, [r0, #24]
    dseBasInstDataKey[GEN_QUERY1].num_of_regs = DSE_NUM_OF_REGS5;
   d959e:	2102      	movs	r1, #2
    dseBasInstDataKey[GEN_QUERY3].num_of_regs = DSE_NUM_OF_REGS7;

    //******** DSE DERIVED_INSTRUMENTATION_DATA QUERY GROUP ********//

    dseDerInstDataKey.start_addr = DSE_START_ADDR8;
   d95a0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    dseBasInstDataKey[GEN_QUERY1].num_of_regs = DSE_NUM_OF_REGS5;
   d95a4:	8241      	strh	r1, [r0, #18]
    dseDerInstDataKey.start_addr = DSE_START_ADDR8;
   d95a6:	8382      	strh	r2, [r0, #28]

    dseGridBasInstDataKey[GEN_QUERY2].start_addr = DSE_START_ADDR10;
    dseGridBasInstDataKey[GEN_QUERY2].num_of_regs = DSE_NUM_OF_REGS10;

    dseGridBasInstDataKey[GEN_QUERY3].start_addr = DSE_START_ADDR11;
    dseGridBasInstDataKey[GEN_QUERY3].num_of_regs = DSE_NUM_OF_REGS11;
   d95a8:	8541      	strh	r1, [r0, #42]	; 0x2a
    dseDerInstDataKey.num_of_regs = DSE_NUM_OF_REGS8;
   d95aa:	2217      	movs	r2, #23

    //******** GRID-DSE DERIVED_INSTRUMENTATION_DATA QUERY GROUP ********//
    dseGridDerInstDataKey[GEN_QUERY1].start_addr = DSE_START_ADDR12;
   d95ac:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    dseBasInstDataKey[GEN_QUERY3].num_of_regs = DSE_NUM_OF_REGS7;
   d95b0:	240f      	movs	r4, #15
    dseDerInstDataKey.num_of_regs = DSE_NUM_OF_REGS8;
   d95b2:	83c2      	strh	r2, [r0, #30]
    dseGridDerInstDataKey[GEN_QUERY1].start_addr = DSE_START_ADDR12;
   d95b4:	8581      	strh	r1, [r0, #44]	; 0x2c
    dseGridBasInstDataKey[GEN_QUERY1].start_addr = DSE_START_ADDR9;
   d95b6:	f240 4223 	movw	r2, #1059	; 0x423
    dseGridDerInstDataKey[GEN_QUERY1].num_of_regs = DSE_NUM_OF_REGS12;
   d95ba:	210a      	movs	r1, #10
    dseBasInstDataKey[GEN_QUERY3].num_of_regs = DSE_NUM_OF_REGS7;
   d95bc:	8344      	strh	r4, [r0, #26]
    dseGridBasInstDataKey[GEN_QUERY1].start_addr = DSE_START_ADDR9;
   d95be:	8402      	strh	r2, [r0, #32]
    dseGridBasInstDataKey[GEN_QUERY2].start_addr = DSE_START_ADDR10;
   d95c0:	f240 4533 	movw	r5, #1075	; 0x433
    dseGridBasInstDataKey[GEN_QUERY1].num_of_regs = DSE_NUM_OF_REGS9;
   d95c4:	220d      	movs	r2, #13
    dseGridBasInstDataKey[GEN_QUERY2].num_of_regs = DSE_NUM_OF_REGS10;
   d95c6:	84c4      	strh	r4, [r0, #38]	; 0x26
    dseGridDerInstDataKey[GEN_QUERY1].num_of_regs = DSE_NUM_OF_REGS12;
   d95c8:	85c1      	strh	r1, [r0, #46]	; 0x2e
    dseGridBasInstDataKey[GEN_QUERY3].start_addr = DSE_START_ADDR11;
   d95ca:	f240 7412 	movw	r4, #1810	; 0x712

    dseGridDerInstDataKey[GEN_QUERY2].start_addr = DSE_START_ADDR13;
   d95ce:	f240 6122 	movw	r1, #1570	; 0x622
    dseGridBasInstDataKey[GEN_QUERY1].num_of_regs = DSE_NUM_OF_REGS9;
   d95d2:	8442      	strh	r2, [r0, #34]	; 0x22
    dseGridBasInstDataKey[GEN_QUERY2].start_addr = DSE_START_ADDR10;
   d95d4:	8485      	strh	r5, [r0, #36]	; 0x24
    dseGridBasInstDataKey[GEN_QUERY3].start_addr = DSE_START_ADDR11;
   d95d6:	8504      	strh	r4, [r0, #40]	; 0x28
    dseGridDerInstDataKey[GEN_QUERY2].start_addr = DSE_START_ADDR13;
   d95d8:	8601      	strh	r1, [r0, #48]	; 0x30
    dseGridDerInstDataKey[GEN_QUERY2].num_of_regs = DSE_NUM_OF_REGS13;
   d95da:	8642      	strh	r2, [r0, #50]	; 0x32
}
   d95dc:	bd30      	pop	{r4, r5, pc}

000d95de <_ZN18DseGensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>:

void DseGensetQueryBank::getGenQueryKey(GeneratorDataSet gen_data_set, uint8_t gen_query_unit,
                                        GeneratorQueryKey *dseKey)
{
  switch (gen_data_set)
   d95de:	2903      	cmp	r1, #3
   d95e0:	d80a      	bhi.n	d95f8 <_ZN18DseGensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x1a>
   d95e2:	e8df f001 	tbb	[pc, r1]
   d95e6:	0a02      	.short	0x0a02
   d95e8:	1410      	.short	0x1410
  {
    case GEN_MAIN:
    {
      dseKey->start_addr = dseMainDatakey[gen_query_unit].start_addr;
   d95ea:	eb00 0182 	add.w	r1, r0, r2, lsl #2
   d95ee:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
   d95f2:	801a      	strh	r2, [r3, #0]
      dseKey->num_of_regs = dseMainDatakey[gen_query_unit].num_of_regs;
   d95f4:	884a      	ldrh	r2, [r1, #2]
    }

    case GEN_ENG_STATUS:
    {
      dseKey->start_addr = DSE_ENGINE_STATE_ADDR;
      dseKey->num_of_regs = NUM_OF_ENGSTATE_REGS;
   d95f6:	805a      	strh	r2, [r3, #2]

      break;
    }
  }   
}
   d95f8:	4770      	bx	lr
      dseKey->start_addr = dseBasInstDataKey[gen_query_unit].start_addr;
   d95fa:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   d95fe:	8a02      	ldrh	r2, [r0, #16]
   d9600:	801a      	strh	r2, [r3, #0]
      dseKey->num_of_regs = dseBasInstDataKey[gen_query_unit].num_of_regs;
   d9602:	8a42      	ldrh	r2, [r0, #18]
   d9604:	e7f7      	b.n	d95f6 <_ZN18DseGensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x18>
      dseKey->start_addr = dseDerInstDataKey.start_addr;
   d9606:	8b82      	ldrh	r2, [r0, #28]
   d9608:	801a      	strh	r2, [r3, #0]
      dseKey->num_of_regs = dseDerInstDataKey.num_of_regs;
   d960a:	8bc2      	ldrh	r2, [r0, #30]
   d960c:	e7f3      	b.n	d95f6 <_ZN18DseGensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x18>
      dseKey->start_addr = DSE_ENGINE_STATE_ADDR;
   d960e:	f240 4207 	movw	r2, #1031	; 0x407
   d9612:	801a      	strh	r2, [r3, #0]
      dseKey->num_of_regs = NUM_OF_ENGSTATE_REGS;
   d9614:	2201      	movs	r2, #1
   d9616:	e7ee      	b.n	d95f6 <_ZN18DseGensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x18>

000d9618 <_ZN18DseGensetQueryBank15getGridQueryKeyE11GridDataSethP17GeneratorQueryKey>:

void DseGensetQueryBank::getGridQueryKey(GridDataSet grid_data_set, uint8_t grid_query_unit, 
                         GeneratorQueryKey *dseKey)
{
  switch (grid_data_set)
   d9618:	2901      	cmp	r1, #1
   d961a:	d002      	beq.n	d9622 <_ZN18DseGensetQueryBank15getGridQueryKeyE11GridDataSethP17GeneratorQueryKey+0xa>
   d961c:	2902      	cmp	r1, #2
   d961e:	d007      	beq.n	d9630 <_ZN18DseGensetQueryBank15getGridQueryKeyE11GridDataSethP17GeneratorQueryKey+0x18>
   d9620:	4770      	bx	lr
  {
    case GRID_BAS_INST:
    {
      dseKey->start_addr = dseGridBasInstDataKey[grid_query_unit].start_addr;
   d9622:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   d9626:	8c11      	ldrh	r1, [r2, #32]
   d9628:	8019      	strh	r1, [r3, #0]
      dseKey->num_of_regs = dseGridBasInstDataKey[grid_query_unit].num_of_regs;
   d962a:	8c52      	ldrh	r2, [r2, #34]	; 0x22
    }

    case GRID_DER_INST:
    {
      dseKey->start_addr = dseGridDerInstDataKey[grid_query_unit].start_addr;
      dseKey->num_of_regs = dseGridDerInstDataKey[grid_query_unit].num_of_regs;
   d962c:	805a      	strh	r2, [r3, #2]

      break;
    } 
  }
}
   d962e:	4770      	bx	lr
      dseKey->start_addr = dseGridDerInstDataKey[grid_query_unit].start_addr;
   d9630:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   d9634:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
   d9636:	8019      	strh	r1, [r3, #0]
      dseKey->num_of_regs = dseGridDerInstDataKey[grid_query_unit].num_of_regs;
   d9638:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
   d963a:	e7f7      	b.n	d962c <_ZN18DseGensetQueryBank15getGridQueryKeyE11GridDataSethP17GeneratorQueryKey+0x14>

000d963c <_ZN18DseGensetQueryBankD1Ev>:

DseGensetQueryBank::~DseGensetQueryBank(){}
   d963c:	4770      	bx	lr
	...

000d9640 <_Z18processDseMainDataPmPt>:
    }
  }
}

void processDseMainData(uint32_t *modbus_buffer, uint16_t *alarm_buffer)
{
   d9640:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  main_gen_data[RUN_HRS] = modbus_buffer[RUN_HRS] / 3600;
   d9644:	f44f 6461 	mov.w	r4, #3600	; 0xe10
   d9648:	6803      	ldr	r3, [r0, #0]
   d964a:	fbb3 f3f4 	udiv	r3, r3, r4
   d964e:	ee07 3a90 	vmov	s15, r3
   d9652:	4f2b      	ldr	r7, [pc, #172]	; (d9700 <_Z18processDseMainDataPmPt+0xc0>)
  main_gen_data[NUM_OF_STARTS] = modbus_buffer[NUM_OF_STARTS];
  main_gen_data[CTRL_MODE] = modbus_buffer[CTRL_MODE];
      
  // If the Gen frequeny is greater than 49.7Hz, then Gen is running, otherwise the Gen is not running
  main_gen_data[ENGINE_STATE] = modbus_buffer[ENGINE_STATE] > 497 ? ENGINE_RUNNING : ENGINE_AT_REST;
   d9654:	ed9f 7a2b 	vldr	s14, [pc, #172]	; d9704 <_Z18processDseMainDataPmPt+0xc4>
  main_gen_data[RUN_HRS] = modbus_buffer[RUN_HRS] / 3600;
   d9658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d965c:	4689      	mov	r9, r1
   d965e:	edc7 7a00 	vstr	s15, [r7]
  main_gen_data[NUM_OF_STARTS] = modbus_buffer[NUM_OF_STARTS];
   d9662:	edd0 7a01 	vldr	s15, [r0, #4]
   d9666:	eef8 7a67 	vcvt.f32.u32	s15, s15

  // Alarms; Cycle through the 6 alarm registers and apply bitwise ops to get actual alarms
  uint8_t alarm_code = 1;
  uint8_t data_indx = ALARM_CODE1;
   d966a:	2504      	movs	r5, #4
  main_gen_data[NUM_OF_STARTS] = modbus_buffer[NUM_OF_STARTS];
   d966c:	edc7 7a01 	vstr	s15, [r7, #4]
  main_gen_data[CTRL_MODE] = modbus_buffer[CTRL_MODE];
   d9670:	edd0 7a02 	vldr	s15, [r0, #8]
   d9674:	eef8 7a67 	vcvt.f32.u32	s15, s15
  uint8_t alarm_code = 1;
   d9678:	2401      	movs	r4, #1
  main_gen_data[CTRL_MODE] = modbus_buffer[CTRL_MODE];
   d967a:	edc7 7a02 	vstr	s15, [r7, #8]
  main_gen_data[ENGINE_STATE] = modbus_buffer[ENGINE_STATE] > 497 ? ENGINE_RUNNING : ENGINE_AT_REST;
   d967e:	68c3      	ldr	r3, [r0, #12]
   d9680:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
   d9684:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
   d9688:	bf38      	it	cc
   d968a:	eef0 7a47 	vmovcc.f32	s15, s14
   d968e:	edc7 7a03 	vstr	s15, [r7, #12]
  uint8_t alarm_code = 1;
   d9692:	46a2      	mov	sl, r4
   d9694:	f04f 0b0c 	mov.w	fp, #12
  for(uint8_t alarm_reg_indx = 0; alarm_reg_indx < DSE_ALARM_REGS; alarm_reg_indx++)
  {
    for (int bit_shift_offset = 3; bit_shift_offset >= 0; bit_shift_offset--)
    {
      uint8_t alarm_status = (alarm_buffer[alarm_reg_indx] >> (DSE_BIT_SHIFT_VAL * bit_shift_offset)) & DSE_ALARM_BIT_MASK;
   d9698:	f8b9 6000 	ldrh.w	r6, [r9]
   d969c:	fa46 f60b 	asr.w	r6, r6, fp
   d96a0:	f006 060f 	and.w	r6, r6, #15

      // Check if alarm is active
      if (alarm_status > INACTIVE && alarm_status <= CONTROLLED_SHUTDOWN_ALARM)
   d96a4:	1eb3      	subs	r3, r6, #2
   d96a6:	2b03      	cmp	r3, #3
   d96a8:	d818      	bhi.n	d96dc <_Z18processDseMainDataPmPt+0x9c>
      {
        main_gen_data[data_indx++] = alarm_code * 1.0;     // Alarm code
   d96aa:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   d96ae:	4650      	mov	r0, sl
   d96b0:	9301      	str	r3, [sp, #4]
   d96b2:	f00b faa1 	bl	e4bf8 <__aeabi_i2d>
   d96b6:	f00b fdc3 	bl	e5240 <__aeabi_d2f>
   d96ba:	9b01      	ldr	r3, [sp, #4]
   d96bc:	6018      	str	r0, [r3, #0]
        main_gen_data[data_indx++] = alarm_status * 1.0;   // Alarm status
   d96be:	4630      	mov	r0, r6
   d96c0:	f00b fa9a 	bl	e4bf8 <__aeabi_i2d>
        main_gen_data[data_indx++] = alarm_code * 1.0;     // Alarm code
   d96c4:	f105 0801 	add.w	r8, r5, #1
        main_gen_data[data_indx++] = alarm_status * 1.0;   // Alarm status
   d96c8:	f00b fdba 	bl	e5240 <__aeabi_d2f>
        main_gen_data[data_indx++] = alarm_code * 1.0;     // Alarm code
   d96cc:	fa5f f888 	uxtb.w	r8, r8
        main_gen_data[data_indx++] = alarm_status * 1.0;   // Alarm status
   d96d0:	eb07 0888 	add.w	r8, r7, r8, lsl #2
   d96d4:	3502      	adds	r5, #2
   d96d6:	b2ed      	uxtb	r5, r5
   d96d8:	f8c8 0000 	str.w	r0, [r8]
      }

      alarm_code++;
   d96dc:	f1ab 0b04 	sub.w	fp, fp, #4
   d96e0:	f10a 0a01 	add.w	sl, sl, #1
    for (int bit_shift_offset = 3; bit_shift_offset >= 0; bit_shift_offset--)
   d96e4:	f11b 0f04 	cmn.w	fp, #4
      alarm_code++;
   d96e8:	fa5f fa8a 	uxtb.w	sl, sl
    for (int bit_shift_offset = 3; bit_shift_offset >= 0; bit_shift_offset--)
   d96ec:	d1d4      	bne.n	d9698 <_Z18processDseMainDataPmPt+0x58>
   d96ee:	3404      	adds	r4, #4
   d96f0:	b2e4      	uxtb	r4, r4
  for(uint8_t alarm_reg_indx = 0; alarm_reg_indx < DSE_ALARM_REGS; alarm_reg_indx++)
   d96f2:	2c19      	cmp	r4, #25
   d96f4:	f109 0902 	add.w	r9, r9, #2
   d96f8:	d1cb      	bne.n	d9692 <_Z18processDseMainDataPmPt+0x52>
    }
  }
}
   d96fa:	b003      	add	sp, #12
   d96fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9700:	2003e11c 	.word	0x2003e11c
   d9704:	00000000 	.word	0x00000000

000d9708 <_Z21processDseBasInstDataPm>:

void processDseBasInstData(uint32_t *modbus_buffer)
{
  uint8_t data_indx = TOTAL_KWH;

  bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_U32BIT_SENTINEL_VALUE ? 
   d9708:	6803      	ldr	r3, [r0, #0]
   d970a:	f06f 1206 	mvn.w	r2, #393222	; 0x60006
   d970e:	4293      	cmp	r3, r2
                                 modbus_buffer[data_indx] * MULTPLR_PT1 : MB_SENTL_VAL;        // Gen Cummulative Kilowatt hours
   d9710:	bf3c      	itt	cc
   d9712:	ee07 3a90 	vmovcc	s15, r3
  bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_U32BIT_SENTINEL_VALUE ? 
   d9716:	ed9f 7a51 	vldrcc	s14, [pc, #324]	; d985c <_Z21processDseBasInstDataPm+0x154>
   d971a:	4b51      	ldr	r3, [pc, #324]	; (d9860 <_Z21processDseBasInstDataPm+0x158>)
   d971c:	bf2c      	ite	cs
   d971e:	eddf 7a51 	vldrcs	s15, [pc, #324]	; d9864 <_Z21processDseBasInstDataPm+0x15c>
                                 modbus_buffer[data_indx] * MULTPLR_PT1 : MB_SENTL_VAL;        // Gen Cummulative Kilowatt hours
   d9722:	eef8 7a67 	vcvtcc.f32.u32	s15, s15
  bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_U32BIT_SENTINEL_VALUE ? 
   d9726:	4619      	mov	r1, r3
   d9728:	bf38      	it	cc
   d972a:	ee67 7a87 	vmulcc.f32	s15, s15, s14
      
  for (data_indx = OIL_PRESSR; data_indx < CHARGER_ALT_VOLT; data_indx++)
  {
    // Oil pressure, Coolant tmep, Oil temp, Fuel level
    bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?
   d972e:	ed9f 7a4d 	vldr	s14, [pc, #308]	; d9864 <_Z21processDseBasInstDataPm+0x15c>
{
   d9732:	b570      	push	{r4, r5, r6, lr}
  bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_U32BIT_SENTINEL_VALUE ? 
   d9734:	ece1 7a01 	vstmia	r1!, {s15}
  for (data_indx = OIL_PRESSR; data_indx < CHARGER_ALT_VOLT; data_indx++)
   d9738:	f100 0510 	add.w	r5, r0, #16
  bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_U32BIT_SENTINEL_VALUE ? 
   d973c:	4604      	mov	r4, r0
    bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?
   d973e:	f647 76f8 	movw	r6, #32760	; 0x7ff8
   d9742:	f854 2f04 	ldr.w	r2, [r4, #4]!
   d9746:	42b2      	cmp	r2, r6
   d9748:	bf9a      	itte	ls
   d974a:	ee07 2a90 	vmovls	s15, r2
   d974e:	eef8 7ae7 	vcvtls.f32.s32	s15, s15
   d9752:	eef0 7a47 	vmovhi.f32	s15, s14
  for (data_indx = OIL_PRESSR; data_indx < CHARGER_ALT_VOLT; data_indx++)
   d9756:	42ac      	cmp	r4, r5
    bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?
   d9758:	ece1 7a01 	vstmia	r1!, {s15}
  for (data_indx = OIL_PRESSR; data_indx < CHARGER_ALT_VOLT; data_indx++)
   d975c:	d1f1      	bne.n	d9742 <_Z21processDseBasInstDataPm+0x3a>
                                 modbus_buffer[data_indx] : MB_SENTL_VAL;
  }
   
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ?
   d975e:	6942      	ldr	r2, [r0, #20]
   d9760:	4c41      	ldr	r4, [pc, #260]	; (d9868 <_Z21processDseBasInstDataPm+0x160>)
                                   modbus_buffer[data_indx] * MULTPLR_PT1 : MB_SENTL_VAL;      // Gen frequency

  for (; data_indx < L1_WATT; data_indx++) // data_indx starts at 9
  {
    // L1-N, L2-N, L3-N, L1-L2, L2-L3, L3-L1 votlages, L1-L2, L2-L3, L3-L1 Currents, Earth current
    bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
   d9762:	4e42      	ldr	r6, [pc, #264]	; (d986c <_Z21processDseBasInstDataPm+0x164>)
   d9764:	eddf 6a3d 	vldr	s13, [pc, #244]	; d985c <_Z21processDseBasInstDataPm+0x154>
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ?
   d9768:	f64f 71f8 	movw	r1, #65528	; 0xfff8
   d976c:	428a      	cmp	r2, r1
                                   modbus_buffer[data_indx] * MULTPLR_PT1 : MB_SENTL_VAL;      // Charger alternator voltage
   d976e:	bf9b      	ittet	ls
   d9770:	ee07 2a90 	vmovls	s15, r2
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ?
   d9774:	ed9f 7a39 	vldrls	s14, [pc, #228]	; d985c <_Z21processDseBasInstDataPm+0x154>
   d9778:	eddf 7a3a 	vldrhi	s15, [pc, #232]	; d9864 <_Z21processDseBasInstDataPm+0x15c>
                                   modbus_buffer[data_indx] * MULTPLR_PT1 : MB_SENTL_VAL;      // Charger alternator voltage
   d977c:	eef8 7ae7 	vcvtls.f32.s32	s15, s15
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ? 
   d9780:	f64f 71f8 	movw	r1, #65528	; 0xfff8
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ?
   d9784:	bf98      	it	ls
   d9786:	ee67 7a87 	vmulls.f32	s15, s15, s14
   d978a:	f100 0548 	add.w	r5, r0, #72	; 0x48
   d978e:	edc3 7a05 	vstr	s15, [r3, #20]
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ? 
   d9792:	6982      	ldr	r2, [r0, #24]
   d9794:	428a      	cmp	r2, r1
                                   modbus_buffer[data_indx] * MULTPLR_PT1 : MB_SENTL_VAL;      // Enigne battery voltage
   d9796:	bf9b      	ittet	ls
   d9798:	ee07 2a90 	vmovls	s15, r2
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ? 
   d979c:	ed9f 7a2f 	vldrls	s14, [pc, #188]	; d985c <_Z21processDseBasInstDataPm+0x154>
   d97a0:	eddf 7a30 	vldrhi	s15, [pc, #192]	; d9864 <_Z21processDseBasInstDataPm+0x15c>
                                   modbus_buffer[data_indx] * MULTPLR_PT1 : MB_SENTL_VAL;      // Enigne battery voltage
   d97a4:	eef8 7ae7 	vcvtls.f32.s32	s15, s15
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ? 
   d97a8:	f64f 71f8 	movw	r1, #65528	; 0xfff8
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ? 
   d97ac:	bf98      	it	ls
   d97ae:	ee67 7a87 	vmulls.f32	s15, s15, s14
   d97b2:	edc3 7a06 	vstr	s15, [r3, #24]
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ? 
   d97b6:	69c2      	ldr	r2, [r0, #28]
   d97b8:	428a      	cmp	r2, r1
   d97ba:	bf96      	itet	ls
   d97bc:	ee07 2a90 	vmovls	s15, r2
   d97c0:	eddf 7a28 	vldrhi	s15, [pc, #160]	; d9864 <_Z21processDseBasInstDataPm+0x15c>
   d97c4:	eef8 7ae7 	vcvtls.f32.s32	s15, s15
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ? 
   d97c8:	f64f 71f8 	movw	r1, #65528	; 0xfff8
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ? 
   d97cc:	edc3 7a07 	vstr	s15, [r3, #28]
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ? 
   d97d0:	6a02      	ldr	r2, [r0, #32]
   d97d2:	428a      	cmp	r2, r1
                                   modbus_buffer[data_indx] * MULTPLR_PT1 : MB_SENTL_VAL;      // Gen frequency
   d97d4:	bf9b      	ittet	ls
   d97d6:	ee07 2a90 	vmovls	s15, r2
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ? 
   d97da:	ed9f 7a20 	vldrls	s14, [pc, #128]	; d985c <_Z21processDseBasInstDataPm+0x154>
   d97de:	eddf 7a21 	vldrhi	s15, [pc, #132]	; d9864 <_Z21processDseBasInstDataPm+0x15c>
                                   modbus_buffer[data_indx] * MULTPLR_PT1 : MB_SENTL_VAL;      // Gen frequency
   d97e2:	eef8 7ae7 	vcvtls.f32.s32	s15, s15
   d97e6:	f100 0220 	add.w	r2, r0, #32
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ? 
   d97ea:	bf98      	it	ls
   d97ec:	ee67 7a87 	vmulls.f32	s15, s15, s14
    bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
   d97f0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; d9864 <_Z21processDseBasInstDataPm+0x15c>
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ? 
   d97f4:	edc3 7a08 	vstr	s15, [r3, #32]
    bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
   d97f8:	f852 1f04 	ldr.w	r1, [r2, #4]!
   d97fc:	42b1      	cmp	r1, r6
                                   modbus_buffer[data_indx] * MULTPLR_PT1 : MB_SENTL_VAL;
   d97fe:	bf3b      	ittet	cc
   d9800:	ee07 1a90 	vmovcc	s15, r1
   d9804:	eef8 7ae7 	vcvtcc.f32.s32	s15, s15
    bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
   d9808:	eef0 7a47 	vmovcs.f32	s15, s14
   d980c:	ee67 7aa6 	vmulcc.f32	s15, s15, s13
  for (; data_indx < L1_WATT; data_indx++) // data_indx starts at 9
   d9810:	42aa      	cmp	r2, r5
    bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
   d9812:	ece4 7a01 	vstmia	r4!, {s15}
  for (; data_indx < L1_WATT; data_indx++) // data_indx starts at 9
   d9816:	d1ef      	bne.n	d97f8 <_Z21processDseBasInstDataPm+0xf0>
   d9818:	4c15      	ldr	r4, [pc, #84]	; (d9870 <_Z21processDseBasInstDataPm+0x168>)
  }

  for(;data_indx < CURR_LAG_LEAD; data_indx++) // data_indx starts at 19
  {
    // L1, L2 & L3 Wattage
    bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
   d981a:	4e14      	ldr	r6, [pc, #80]	; (d986c <_Z21processDseBasInstDataPm+0x164>)
   d981c:	ed9f 7a11 	vldr	s14, [pc, #68]	; d9864 <_Z21processDseBasInstDataPm+0x15c>
   d9820:	f100 0554 	add.w	r5, r0, #84	; 0x54
   d9824:	f852 1f04 	ldr.w	r1, [r2, #4]!
   d9828:	42b1      	cmp	r1, r6
   d982a:	bf3a      	itte	cc
   d982c:	ee07 1a90 	vmovcc	s15, r1
   d9830:	eef8 7ae7 	vcvtcc.f32.s32	s15, s15
   d9834:	eef0 7a47 	vmovcs.f32	s15, s14
  for(;data_indx < CURR_LAG_LEAD; data_indx++) // data_indx starts at 19
   d9838:	42aa      	cmp	r2, r5
    bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
   d983a:	ece4 7a01 	vstmia	r4!, {s15}
  for(;data_indx < CURR_LAG_LEAD; data_indx++) // data_indx starts at 19
   d983e:	d1f1      	bne.n	d9824 <_Z21processDseBasInstDataPm+0x11c>
                                   modbus_buffer[data_indx] : MB_SENTL_VAL;
  }

  bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ? 
   d9840:	6d82      	ldr	r2, [r0, #88]	; 0x58
   d9842:	f647 71f8 	movw	r1, #32760	; 0x7ff8
   d9846:	428a      	cmp	r2, r1
   d9848:	bf96      	itet	ls
   d984a:	ee07 2a90 	vmovls	s15, r2
   d984e:	eddf 7a05 	vldrhi	s15, [pc, #20]	; d9864 <_Z21processDseBasInstDataPm+0x15c>
   d9852:	eef8 7ae7 	vcvtls.f32.s32	s15, s15
   d9856:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
                                 modbus_buffer[data_indx] : MB_SENTL_VAL;                      // Current Lag-Lead
}
   d985a:	bd70      	pop	{r4, r5, r6, pc}
   d985c:	3dcccccd 	.word	0x3dcccccd
   d9860:	2003da0c 	.word	0x2003da0c
   d9864:	ccbebc20 	.word	0xccbebc20
   d9868:	2003da30 	.word	0x2003da30
   d986c:	7ff97ff9 	.word	0x7ff97ff9
   d9870:	2003da58 	.word	0x2003da58

000d9874 <_Z21processDseDerInstDataPm>:

void processDseDerInstData(uint32_t *modbus_buffer)
{
  uint8_t data_indx = TOTAL_WATT;
  for (; data_indx < L1_PF; data_indx++)
   d9874:	4921      	ldr	r1, [pc, #132]	; (d98fc <_Z21processDseDerInstDataPm+0x88>)
  {
    // Gen total W, L1 L2 L3 VA, Gen total VA, L1 L2 L3 VAr, Gen total VAr
    der_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ? 
   d9876:	ed9f 7a22 	vldr	s14, [pc, #136]	; d9900 <_Z21processDseDerInstDataPm+0x8c>
{
   d987a:	b570      	push	{r4, r5, r6, lr}
    der_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ? 
   d987c:	4e21      	ldr	r6, [pc, #132]	; (d9904 <_Z21processDseDerInstDataPm+0x90>)
   d987e:	1f03      	subs	r3, r0, #4
   d9880:	f100 0520 	add.w	r5, r0, #32
   d9884:	460c      	mov	r4, r1
   d9886:	f853 2f04 	ldr.w	r2, [r3, #4]!
   d988a:	42b2      	cmp	r2, r6
   d988c:	bf3a      	itte	cc
   d988e:	ee07 2a90 	vmovcc	s15, r2
   d9892:	eef8 7ae7 	vcvtcc.f32.s32	s15, s15
   d9896:	eef0 7a47 	vmovcs.f32	s15, s14
  for (; data_indx < L1_PF; data_indx++)
   d989a:	42ab      	cmp	r3, r5
    der_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ? 
   d989c:	ece1 7a01 	vstmia	r1!, {s15}
  for (; data_indx < L1_PF; data_indx++)
   d98a0:	d1f1      	bne.n	d9886 <_Z21processDseDerInstDataPm+0x12>
   d98a2:	4919      	ldr	r1, [pc, #100]	; (d9908 <_Z21processDseDerInstDataPm+0x94>)
  }

  for (; data_indx < PERCENT_OF_FULL_POWER; data_indx++) // data_indx starts at 9,
  {
    // L1 L2 L3 PF, Gen Average PF
    der_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?  
   d98a4:	ed9f 7a16 	vldr	s14, [pc, #88]	; d9900 <_Z21processDseDerInstDataPm+0x8c>
   d98a8:	eddf 6a18 	vldr	s13, [pc, #96]	; d990c <_Z21processDseDerInstDataPm+0x98>
   d98ac:	f100 0530 	add.w	r5, r0, #48	; 0x30
   d98b0:	f647 76f8 	movw	r6, #32760	; 0x7ff8
   d98b4:	f853 2f04 	ldr.w	r2, [r3, #4]!
   d98b8:	42b2      	cmp	r2, r6
                                   modbus_buffer[data_indx] * MULTPLR_PT01 : MB_SENTL_VAL;
   d98ba:	bf9b      	ittet	ls
   d98bc:	ee07 2a90 	vmovls	s15, r2
   d98c0:	eef8 7ae7 	vcvtls.f32.s32	s15, s15
    der_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?  
   d98c4:	eef0 7a47 	vmovhi.f32	s15, s14
   d98c8:	ee67 7aa6 	vmulls.f32	s15, s15, s13
  for (; data_indx < PERCENT_OF_FULL_POWER; data_indx++) // data_indx starts at 9,
   d98cc:	42ab      	cmp	r3, r5
    der_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?  
   d98ce:	ece1 7a01 	vstmia	r1!, {s15}
  for (; data_indx < PERCENT_OF_FULL_POWER; data_indx++) // data_indx starts at 9,
   d98d2:	d1ef      	bne.n	d98b4 <_Z21processDseDerInstDataPm+0x40>
  }

  der_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ? 
   d98d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   d98d6:	f647 72f8 	movw	r2, #32760	; 0x7ff8
   d98da:	4293      	cmp	r3, r2
                                 modbus_buffer[data_indx] * MULTPLR_PT1 : MB_SENTL_VAL;      // Gen Full Power percent
   d98dc:	bf9b      	ittet	ls
   d98de:	ee07 3a90 	vmovls	s15, r3
  der_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ? 
   d98e2:	ed9f 7a0b 	vldrls	s14, [pc, #44]	; d9910 <_Z21processDseDerInstDataPm+0x9c>
   d98e6:	eddf 7a06 	vldrhi	s15, [pc, #24]	; d9900 <_Z21processDseDerInstDataPm+0x8c>
                                 modbus_buffer[data_indx] * MULTPLR_PT1 : MB_SENTL_VAL;      // Gen Full Power percent
   d98ea:	eef8 7ae7 	vcvtls.f32.s32	s15, s15
  der_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ? 
   d98ee:	bf98      	it	ls
   d98f0:	ee67 7a87 	vmulls.f32	s15, s15, s14
   d98f4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
}
   d98f8:	bd70      	pop	{r4, r5, r6, pc}
   d98fa:	bf00      	nop
   d98fc:	2003daa8 	.word	0x2003daa8
   d9900:	ccbebc20 	.word	0xccbebc20
   d9904:	7ff97ff9 	.word	0x7ff97ff9
   d9908:	2003dacc 	.word	0x2003dacc
   d990c:	3c23d70a 	.word	0x3c23d70a
   d9910:	3dcccccd 	.word	0x3dcccccd

000d9914 <_Z16formatGenDataDSE16GeneratorDataSetPmPt>:
{
   d9914:	4603      	mov	r3, r0
  switch (data_group)
   d9916:	2b01      	cmp	r3, #1
{
   d9918:	4608      	mov	r0, r1
   d991a:	4611      	mov	r1, r2
  switch (data_group)
   d991c:	d004      	beq.n	d9928 <_Z16formatGenDataDSE16GeneratorDataSetPmPt+0x14>
   d991e:	2b02      	cmp	r3, #2
   d9920:	d004      	beq.n	d992c <_Z16formatGenDataDSE16GeneratorDataSetPmPt+0x18>
   d9922:	b92b      	cbnz	r3, d9930 <_Z16formatGenDataDSE16GeneratorDataSetPmPt+0x1c>
      processDseMainData(modbus_buffer, alarm_buffer);
   d9924:	f7ff be8c 	b.w	d9640 <_Z18processDseMainDataPmPt>
      processDseBasInstData(modbus_buffer);
   d9928:	f7ff beee 	b.w	d9708 <_Z21processDseBasInstDataPm>
      processDseDerInstData(modbus_buffer);
   d992c:	f7ff bfa2 	b.w	d9874 <_Z21processDseDerInstDataPm>
}
   d9930:	4770      	bx	lr
	...

000d9934 <_Z25processDseGridBasInstDataPm>:

void processDseGridBasInstData(uint32_t *modbus_buffer)
{
   d9934:	b530      	push	{r4, r5, lr}
  uint8_t data_indx = GRID_ACCUM_KWH;

  bas_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
   d9936:	4a1f      	ldr	r2, [pc, #124]	; (d99b4 <_Z25processDseGridBasInstDataPm+0x80>)
   d9938:	6803      	ldr	r3, [r0, #0]
   d993a:	491f      	ldr	r1, [pc, #124]	; (d99b8 <_Z25processDseGridBasInstDataPm+0x84>)
                                  (modbus_buffer[data_indx] * MULTPLR_PT1) : MB_SENTL_VAL;

  // Grid:Frequency | Grid:l1,l2,l3,l1l2,l2l3,l3l1 voltage | Grid:CurrLaglead | Grid:l1,l2,l3,earth current
  for(data_indx = GRID_FREQ; data_indx <= GRID_EARTH_AMP; data_indx++)
  {
    bas_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?
   d993c:	eddf 6a1f 	vldr	s13, [pc, #124]	; d99bc <_Z25processDseGridBasInstDataPm+0x88>
  bas_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
   d9940:	4293      	cmp	r3, r2
                                  (modbus_buffer[data_indx] * MULTPLR_PT1) : MB_SENTL_VAL;
   d9942:	bf3b      	ittet	cc
   d9944:	ee07 3a90 	vmovcc	s15, r3
  bas_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
   d9948:	ed9f 7a1c 	vldrcc	s14, [pc, #112]	; d99bc <_Z25processDseGridBasInstDataPm+0x88>
   d994c:	eddf 7a1c 	vldrcs	s15, [pc, #112]	; d99c0 <_Z25processDseGridBasInstDataPm+0x8c>
                                  (modbus_buffer[data_indx] * MULTPLR_PT1) : MB_SENTL_VAL;
   d9950:	eef8 7ae7 	vcvtcc.f32.s32	s15, s15
   d9954:	f100 0430 	add.w	r4, r0, #48	; 0x30
  bas_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
   d9958:	bf38      	it	cc
   d995a:	ee67 7a87 	vmulcc.f32	s15, s15, s14
    bas_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?
   d995e:	ed9f 7a18 	vldr	s14, [pc, #96]	; d99c0 <_Z25processDseGridBasInstDataPm+0x8c>
  bas_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
   d9962:	ece1 7a01 	vstmia	r1!, {s15}
   d9966:	4603      	mov	r3, r0
    bas_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?
   d9968:	f647 75f8 	movw	r5, #32760	; 0x7ff8
   d996c:	f853 2f04 	ldr.w	r2, [r3, #4]!
   d9970:	42aa      	cmp	r2, r5
                                    (modbus_buffer[data_indx] * MULTPLR_PT1) : MB_SENTL_VAL;
   d9972:	bf9b      	ittet	ls
   d9974:	ee07 2a90 	vmovls	s15, r2
   d9978:	eef8 7ae7 	vcvtls.f32.s32	s15, s15
    bas_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?
   d997c:	eef0 7a47 	vmovhi.f32	s15, s14
   d9980:	ee67 7aa6 	vmulls.f32	s15, s15, s13
  for(data_indx = GRID_FREQ; data_indx <= GRID_EARTH_AMP; data_indx++)
   d9984:	42a3      	cmp	r3, r4
    bas_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?
   d9986:	ece1 7a01 	vstmia	r1!, {s15}
  for(data_indx = GRID_FREQ; data_indx <= GRID_EARTH_AMP; data_indx++)
   d998a:	d1ef      	bne.n	d996c <_Z25processDseGridBasInstDataPm+0x38>
   d998c:	490d      	ldr	r1, [pc, #52]	; (d99c4 <_Z25processDseGridBasInstDataPm+0x90>)
  }

  // Grid:l1,l2,l3 watts
  for(data_indx = GRID_L1_WATT; data_indx <= GRID_L3_WATT; data_indx++)
  {
    bas_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
   d998e:	4c09      	ldr	r4, [pc, #36]	; (d99b4 <_Z25processDseGridBasInstDataPm+0x80>)
   d9990:	ed9f 7a0b 	vldr	s14, [pc, #44]	; d99c0 <_Z25processDseGridBasInstDataPm+0x8c>
   d9994:	303c      	adds	r0, #60	; 0x3c
   d9996:	f853 2f04 	ldr.w	r2, [r3, #4]!
   d999a:	42a2      	cmp	r2, r4
   d999c:	bf3a      	itte	cc
   d999e:	ee07 2a90 	vmovcc	s15, r2
   d99a2:	eef8 7ae7 	vcvtcc.f32.s32	s15, s15
   d99a6:	eef0 7a47 	vmovcs.f32	s15, s14
  for(data_indx = GRID_L1_WATT; data_indx <= GRID_L3_WATT; data_indx++)
   d99aa:	4283      	cmp	r3, r0
    bas_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
   d99ac:	ece1 7a01 	vstmia	r1!, {s15}
  for(data_indx = GRID_L1_WATT; data_indx <= GRID_L3_WATT; data_indx++)
   d99b0:	d1f1      	bne.n	d9996 <_Z25processDseGridBasInstDataPm+0x62>
                                    modbus_buffer[data_indx] : MB_SENTL_VAL;
  }

}
   d99b2:	bd30      	pop	{r4, r5, pc}
   d99b4:	7ff97ff9 	.word	0x7ff97ff9
   d99b8:	2003da68 	.word	0x2003da68
   d99bc:	3dcccccd 	.word	0x3dcccccd
   d99c0:	ccbebc20 	.word	0xccbebc20
   d99c4:	2003da9c 	.word	0x2003da9c

000d99c8 <_Z25processDseGridDerInstDataPm>:

void processDseGridDerInstData(uint32_t *modbus_buffer)
{
  // Grid:totalWatts | Grid:l1,l2,l3,total VA | Grid:l1,l2,l3,total VAr
  for (uint8_t data_indx = TOTAL_GRID_KW; data_indx <= GRID_TOTAL_VAR; data_indx++)
   d99c8:	4921      	ldr	r1, [pc, #132]	; (d9a50 <_Z25processDseGridDerInstDataPm+0x88>)
  {
    der_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
   d99ca:	ed9f 7a22 	vldr	s14, [pc, #136]	; d9a54 <_Z25processDseGridDerInstDataPm+0x8c>
{
   d99ce:	b570      	push	{r4, r5, r6, lr}
    der_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
   d99d0:	4e21      	ldr	r6, [pc, #132]	; (d9a58 <_Z25processDseGridDerInstDataPm+0x90>)
   d99d2:	1f03      	subs	r3, r0, #4
   d99d4:	f100 0520 	add.w	r5, r0, #32
   d99d8:	460c      	mov	r4, r1
   d99da:	f853 2f04 	ldr.w	r2, [r3, #4]!
   d99de:	42b2      	cmp	r2, r6
   d99e0:	bf3a      	itte	cc
   d99e2:	ee07 2a90 	vmovcc	s15, r2
   d99e6:	eef8 7ae7 	vcvtcc.f32.s32	s15, s15
   d99ea:	eef0 7a47 	vmovcs.f32	s15, s14
  for (uint8_t data_indx = TOTAL_GRID_KW; data_indx <= GRID_TOTAL_VAR; data_indx++)
   d99ee:	42ab      	cmp	r3, r5
    der_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
   d99f0:	ece1 7a01 	vstmia	r1!, {s15}
  for (uint8_t data_indx = TOTAL_GRID_KW; data_indx <= GRID_TOTAL_VAR; data_indx++)
   d99f4:	d1f1      	bne.n	d99da <_Z25processDseGridDerInstDataPm+0x12>
   d99f6:	4919      	ldr	r1, [pc, #100]	; (d9a5c <_Z25processDseGridDerInstDataPm+0x94>)
  }

  // Grid:l1,l2,l3,average powerFactor
  for (uint8_t data_indx = GRID_L1_PF; data_indx <= GRID_AVERAGE_PF; data_indx++)
  {
    der_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?
   d99f8:	ed9f 7a16 	vldr	s14, [pc, #88]	; d9a54 <_Z25processDseGridDerInstDataPm+0x8c>
   d99fc:	eddf 6a18 	vldr	s13, [pc, #96]	; d9a60 <_Z25processDseGridDerInstDataPm+0x98>
   d9a00:	f100 0530 	add.w	r5, r0, #48	; 0x30
   d9a04:	f647 76f8 	movw	r6, #32760	; 0x7ff8
   d9a08:	f853 2f04 	ldr.w	r2, [r3, #4]!
   d9a0c:	42b2      	cmp	r2, r6
                                    (modbus_buffer[data_indx] * MULTPLR_PT01) : MB_SENTL_VAL;
   d9a0e:	bf9b      	ittet	ls
   d9a10:	ee07 2a90 	vmovls	s15, r2
   d9a14:	eef8 7ae7 	vcvtls.f32.s32	s15, s15
    der_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?
   d9a18:	eef0 7a47 	vmovhi.f32	s15, s14
   d9a1c:	ee67 7aa6 	vmulls.f32	s15, s15, s13
  for (uint8_t data_indx = GRID_L1_PF; data_indx <= GRID_AVERAGE_PF; data_indx++)
   d9a20:	42ab      	cmp	r3, r5
    der_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?
   d9a22:	ece1 7a01 	vstmia	r1!, {s15}
  for (uint8_t data_indx = GRID_L1_PF; data_indx <= GRID_AVERAGE_PF; data_indx++)
   d9a26:	d1ef      	bne.n	d9a08 <_Z25processDseGridDerInstDataPm+0x40>
  }

  // Grid:percentOfPower
  der_inst_grid_data[PERCENT_OF_GRID_POWER] = modbus_buffer[PERCENT_OF_GRID_POWER] < DSE_16BIT_SENTINEL_VALUE ?
   d9a28:	6b43      	ldr	r3, [r0, #52]	; 0x34
   d9a2a:	f647 72f8 	movw	r2, #32760	; 0x7ff8
   d9a2e:	4293      	cmp	r3, r2
                                              (modbus_buffer[PERCENT_OF_GRID_POWER] * MULTPLR_PT1) : MB_SENTL_VAL; 
   d9a30:	bf9b      	ittet	ls
   d9a32:	ee07 3a90 	vmovls	s15, r3
  der_inst_grid_data[PERCENT_OF_GRID_POWER] = modbus_buffer[PERCENT_OF_GRID_POWER] < DSE_16BIT_SENTINEL_VALUE ?
   d9a36:	ed9f 7a0b 	vldrls	s14, [pc, #44]	; d9a64 <_Z25processDseGridDerInstDataPm+0x9c>
   d9a3a:	eddf 7a06 	vldrhi	s15, [pc, #24]	; d9a54 <_Z25processDseGridDerInstDataPm+0x8c>
                                              (modbus_buffer[PERCENT_OF_GRID_POWER] * MULTPLR_PT1) : MB_SENTL_VAL; 
   d9a3e:	eef8 7ae7 	vcvtls.f32.s32	s15, s15
  der_inst_grid_data[PERCENT_OF_GRID_POWER] = modbus_buffer[PERCENT_OF_GRID_POWER] < DSE_16BIT_SENTINEL_VALUE ?
   d9a42:	bf98      	it	ls
   d9a44:	ee67 7a87 	vmulls.f32	s15, s15, s14
   d9a48:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
   d9a4c:	bd70      	pop	{r4, r5, r6, pc}
   d9a4e:	bf00      	nop
   d9a50:	2003dae0 	.word	0x2003dae0
   d9a54:	ccbebc20 	.word	0xccbebc20
   d9a58:	7ff97ff9 	.word	0x7ff97ff9
   d9a5c:	2003db04 	.word	0x2003db04
   d9a60:	3c23d70a 	.word	0x3c23d70a
   d9a64:	3dcccccd 	.word	0x3dcccccd

000d9a68 <_Z17formatGridDataDSE11GridDataSetPm>:
{
   d9a68:	4603      	mov	r3, r0
  switch (metric_grp)
   d9a6a:	2b01      	cmp	r3, #1
{
   d9a6c:	4608      	mov	r0, r1
  switch (metric_grp)
   d9a6e:	d002      	beq.n	d9a76 <_Z17formatGridDataDSE11GridDataSetPm+0xe>
   d9a70:	2b02      	cmp	r3, #2
   d9a72:	d002      	beq.n	d9a7a <_Z17formatGridDataDSE11GridDataSetPm+0x12>
   d9a74:	4770      	bx	lr
      processDseGridBasInstData(modbus_buffer);
   d9a76:	f7ff bf5d 	b.w	d9934 <_Z25processDseGridBasInstDataPm>
      processDseGridDerInstData(modbus_buffer);
   d9a7a:	f7ff bfa5 	b.w	d99c8 <_Z25processDseGridDerInstDataPm>
	...

000d9a80 <__tcf_0>:
// Array of Grid metrics ready to be published to the cloud.
float bas_inst_grid_data[BASINST_GRID_DATA_SIZE];
float der_inst_grid_data[DERINST_GRID_DATA_SIZE];

// Instantiate 6 objects of the GXGenerator class
GXGenerator gxGen[MAXIMUM_GENSETS];
   d9a80:	b570      	push	{r4, r5, r6, lr}
   d9a82:	4d05      	ldr	r5, [pc, #20]	; (d9a98 <__tcf_0+0x18>)
   d9a84:	2405      	movs	r4, #5
   d9a86:	26e8      	movs	r6, #232	; 0xe8
   d9a88:	fb06 5004 	mla	r0, r6, r4, r5
   d9a8c:	f003 fb1c 	bl	dd0c8 <_ZN11GXGeneratorD1Ev>
   d9a90:	3c01      	subs	r4, #1
   d9a92:	d2f9      	bcs.n	d9a88 <__tcf_0+0x8>
   d9a94:	bd70      	pop	{r4, r5, r6, pc}
   d9a96:	bf00      	nop
   d9a98:	2003dbac 	.word	0x2003dbac

000d9a9c <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d9a9c:	b513      	push	{r0, r1, r4, lr}
   d9a9e:	4b05      	ldr	r3, [pc, #20]	; (d9ab4 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   d9aa0:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d9aa2:	f88d 3000 	strb.w	r3, [sp]
   d9aa6:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d9aa8:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d9aaa:	f007 fed7 	bl	e185c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   d9aae:	4620      	mov	r0, r4
   d9ab0:	b002      	add	sp, #8
   d9ab2:	bd10      	pop	{r4, pc}
   d9ab4:	2003da08 	.word	0x2003da08

000d9ab8 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d9ab8:	b40e      	push	{r1, r2, r3}
   d9aba:	b510      	push	{r4, lr}
   d9abc:	b08d      	sub	sp, #52	; 0x34
   d9abe:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d9ac0:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d9ac2:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d9ac6:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d9ac8:	2300      	movs	r3, #0
   d9aca:	2020      	movs	r0, #32
   d9acc:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d9ad0:	e9cd 4200 	strd	r4, r2, [sp]
   d9ad4:	201e      	movs	r0, #30
   d9ad6:	aa04      	add	r2, sp, #16
   d9ad8:	f007 fafc 	bl	e10d4 <log_message_v>
}
   d9adc:	b00d      	add	sp, #52	; 0x34
   d9ade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d9ae2:	b003      	add	sp, #12
   d9ae4:	4770      	bx	lr
	...

000d9ae8 <_Z28test_checkInitialisedGenSetsv>:

  return true;
}

void test_checkInitialisedGenSets()
{
   d9ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  for (uint8_t k = NO_GEN_SPECIFIED; k < num_of_gensets; k++)
   d9aec:	f8df 803c 	ldr.w	r8, [pc, #60]	; d9b2c <_Z28test_checkInitialisedGenSetsv+0x44>
  {
    GeneratorType genC_Type;
    genC_Type = gxGen[k].getControllerId();
   d9af0:	4f0b      	ldr	r7, [pc, #44]	; (d9b20 <_Z28test_checkInitialisedGenSetsv+0x38>)

    Log.info("\nGEN%d TYPE:%d\n", k+ZERO_INDEX_CORRECTION, genC_Type);
   d9af2:	4e0c      	ldr	r6, [pc, #48]	; (d9b24 <_Z28test_checkInitialisedGenSetsv+0x3c>)
{
   d9af4:	2400      	movs	r4, #0
  for (uint8_t k = NO_GEN_SPECIFIED; k < num_of_gensets; k++)
   d9af6:	f898 3000 	ldrb.w	r3, [r8]
   d9afa:	b2e5      	uxtb	r5, r4
   d9afc:	42ab      	cmp	r3, r5
   d9afe:	d90c      	bls.n	d9b1a <_Z28test_checkInitialisedGenSetsv+0x32>
    genC_Type = gxGen[k].getControllerId();
   d9b00:	20e8      	movs	r0, #232	; 0xe8
   d9b02:	fb00 7005 	mla	r0, r0, r5, r7
   d9b06:	f002 fe74 	bl	dc7f2 <_ZN11GXGenerator15getControllerIdEv>
    Log.info("\nGEN%d TYPE:%d\n", k+ZERO_INDEX_CORRECTION, genC_Type);
   d9b0a:	1c6a      	adds	r2, r5, #1
    genC_Type = gxGen[k].getControllerId();
   d9b0c:	4603      	mov	r3, r0
    Log.info("\nGEN%d TYPE:%d\n", k+ZERO_INDEX_CORRECTION, genC_Type);
   d9b0e:	4631      	mov	r1, r6
   d9b10:	4805      	ldr	r0, [pc, #20]	; (d9b28 <_Z28test_checkInitialisedGenSetsv+0x40>)
   d9b12:	f7ff ffd1 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
  for (uint8_t k = NO_GEN_SPECIFIED; k < num_of_gensets; k++)
   d9b16:	3401      	adds	r4, #1
   d9b18:	e7ed      	b.n	d9af6 <_Z28test_checkInitialisedGenSetsv+0xe>
  }
  
}
   d9b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9b1e:	bf00      	nop
   d9b20:	2003dbac 	.word	0x2003dbac
   d9b24:	000e6e28 	.word	0x000e6e28
   d9b28:	2003e61c 	.word	0x2003e61c
   d9b2c:	2003e1ec 	.word	0x2003e1ec

000d9b30 <_Z20initialiseGenDevicesP15GeneratorConfig>:
{
   d9b30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d9b34:	4c1b      	ldr	r4, [pc, #108]	; (d9ba4 <_Z20initialiseGenDevicesP15GeneratorConfig+0x74>)
   d9b36:	7823      	ldrb	r3, [r4, #0]
   d9b38:	4605      	mov	r5, r0
   d9b3a:	4602      	mov	r2, r0
   d9b3c:	2100      	movs	r1, #0
   d9b3e:	3054      	adds	r0, #84	; 0x54
    if (!(genconFigVals[i].type == UINT8_MAX))
   d9b40:	7996      	ldrb	r6, [r2, #6]
   d9b42:	2eff      	cmp	r6, #255	; 0xff
       num_of_gensets++;
   d9b44:	bf18      	it	ne
   d9b46:	3301      	addne	r3, #1
   d9b48:	f102 020e 	add.w	r2, r2, #14
   d9b4c:	bf1c      	itt	ne
   d9b4e:	b2db      	uxtbne	r3, r3
   d9b50:	2101      	movne	r1, #1
  for (uint8_t i = NO_GEN_SPECIFIED; i < GEN6; i++)
   d9b52:	4282      	cmp	r2, r0
   d9b54:	d1f4      	bne.n	d9b40 <_Z20initialiseGenDevicesP15GeneratorConfig+0x10>
   d9b56:	b101      	cbz	r1, d9b5a <_Z20initialiseGenDevicesP15GeneratorConfig+0x2a>
   d9b58:	7023      	strb	r3, [r4, #0]
  if ((num_of_gensets > NO_GENSET) && (num_of_gensets <= MAXIMUM_GENSETS))
   d9b5a:	7823      	ldrb	r3, [r4, #0]
    gxGen[j].setCrendentials(gen_slave_id, baud_code, given_gx_relay, gen_type);
   d9b5c:	4f12      	ldr	r7, [pc, #72]	; (d9ba8 <_Z20initialiseGenDevicesP15GeneratorConfig+0x78>)
  if ((num_of_gensets > NO_GENSET) && (num_of_gensets <= MAXIMUM_GENSETS))
   d9b5e:	3b01      	subs	r3, #1
   d9b60:	2b05      	cmp	r3, #5
  { gxgen_config_state = true; }
   d9b62:	bf9e      	ittt	ls
   d9b64:	4b11      	ldrls	r3, [pc, #68]	; (d9bac <_Z20initialiseGenDevicesP15GeneratorConfig+0x7c>)
   d9b66:	2201      	movls	r2, #1
   d9b68:	701a      	strbls	r2, [r3, #0]
   d9b6a:	2600      	movs	r6, #0
    gen_type = static_cast<GeneratorType>(genconFigVals[j].type);
   d9b6c:	f04f 090e 	mov.w	r9, #14
    gxGen[j].setCrendentials(gen_slave_id, baud_code, given_gx_relay, gen_type);
   d9b70:	f04f 08e8 	mov.w	r8, #232	; 0xe8
  for (uint8_t j = NO_GEN_SPECIFIED; j < num_of_gensets; j++)
   d9b74:	7823      	ldrb	r3, [r4, #0]
   d9b76:	b2f0      	uxtb	r0, r6
   d9b78:	4283      	cmp	r3, r0
   d9b7a:	d90c      	bls.n	d9b96 <_Z20initialiseGenDevicesP15GeneratorConfig+0x66>
    gen_type = static_cast<GeneratorType>(genconFigVals[j].type);
   d9b7c:	fb09 5100 	mla	r1, r9, r0, r5
    gxGen[j].setCrendentials(gen_slave_id, baud_code, given_gx_relay, gen_type);
   d9b80:	fb08 7000 	mla	r0, r8, r0, r7
   d9b84:	798b      	ldrb	r3, [r1, #6]
   d9b86:	9300      	str	r3, [sp, #0]
   d9b88:	7a0b      	ldrb	r3, [r1, #8]
   d9b8a:	7b0a      	ldrb	r2, [r1, #12]
   d9b8c:	79c9      	ldrb	r1, [r1, #7]
   d9b8e:	f002 fe25 	bl	dc7dc <_ZN11GXGenerator15setCrendentialsEhhh13GeneratorType>
  for (uint8_t j = NO_GEN_SPECIFIED; j < num_of_gensets; j++)
   d9b92:	3601      	adds	r6, #1
   d9b94:	e7ee      	b.n	d9b74 <_Z20initialiseGenDevicesP15GeneratorConfig+0x44>
  test_checkInitialisedGenSets();
   d9b96:	f7ff ffa7 	bl	d9ae8 <_Z28test_checkInitialisedGenSetsv>
}
   d9b9a:	2001      	movs	r0, #1
   d9b9c:	b003      	add	sp, #12
   d9b9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d9ba2:	bf00      	nop
   d9ba4:	2003e1ec 	.word	0x2003e1ec
   d9ba8:	2003dbac 	.word	0x2003dbac
   d9bac:	2003e466 	.word	0x2003e466

000d9bb0 <_Z18readGenMainMetricshh>:
  return (static_cast<GeneratorSlot>(gen_unit + ZERO_INDEX_CORRECTION));
  
}

GeneratorDataSet readGenMainMetrics(uint8_t gen_unit, uint8_t num_of_queries)
{
   d9bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t gendata_error_count = NO_GEN_SPECIFIED;

  for (uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
  {
    modbus_t genMainQuery;
    gxGen[gen_unit].getMainQueryPacket(i, &genMainQuery);
   d9bb4:	4c2b      	ldr	r4, [pc, #172]	; (d9c64 <_Z18readGenMainMetricshh+0xb4>)
{
   d9bb6:	b089      	sub	sp, #36	; 0x24
    gxGen[gen_unit].getMainQueryPacket(i, &genMainQuery);
   d9bb8:	23e8      	movs	r3, #232	; 0xe8
   d9bba:	fb00 4703 	mla	r7, r0, r3, r4
   d9bbe:	2600      	movs	r6, #0
{
   d9bc0:	9103      	str	r1, [sp, #12]
  uint8_t gendata_error_count = NO_GEN_SPECIFIED;
   d9bc2:	46b2      	mov	sl, r6

    Log.info("MAIN_DATA Slave_ID:%d, Func_Code:%d, Start_Address:%d, Num_Of_Regs:%d", 
             genMainQuery.u8id, genMainQuery.u8fct, genMainQuery.u16RegAdd, genMainQuery.u16CoilsNo);

    gxGen[gen_unit].validate_ans = false;
   d9bc4:	463c      	mov	r4, r7
  for (uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
   d9bc6:	9b03      	ldr	r3, [sp, #12]
   d9bc8:	42b3      	cmp	r3, r6
   d9bca:	fa5f fb86 	uxtb.w	fp, r6
   d9bce:	d040      	beq.n	d9c52 <_Z18readGenMainMetricshh+0xa2>
    gxGen[gen_unit].getMainQueryPacket(i, &genMainQuery);
   d9bd0:	f10d 0914 	add.w	r9, sp, #20
   d9bd4:	464a      	mov	r2, r9
   d9bd6:	4659      	mov	r1, fp
   d9bd8:	4638      	mov	r0, r7
   d9bda:	f002 fe0d 	bl	dc7f8 <_ZN11GXGenerator18getMainQueryPacketEhP8modbus_t>
    Log.info("MAIN_DATA Slave_ID:%d, Func_Code:%d, Start_Address:%d, Num_Of_Regs:%d", 
   d9bde:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d9be2:	9301      	str	r3, [sp, #4]
   d9be4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   d9be8:	9300      	str	r3, [sp, #0]
   d9bea:	f89d 2014 	ldrb.w	r2, [sp, #20]
   d9bee:	f89d 3015 	ldrb.w	r3, [sp, #21]
   d9bf2:	491d      	ldr	r1, [pc, #116]	; (d9c68 <_Z18readGenMainMetricshh+0xb8>)
   d9bf4:	481d      	ldr	r0, [pc, #116]	; (d9c6c <_Z18readGenMainMetricshh+0xbc>)
   d9bf6:	f7ff ff5f 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
    gxGen[gen_unit].validate_ans = false;
   d9bfa:	2300      	movs	r3, #0
   d9bfc:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62

    for (uint8_t j = MB_1_POLL; j < MB_12_POLLS; j++)
   d9c00:	2501      	movs	r5, #1
    {
      // Pass the Modbus query packet to the Genset controller
      gxGen[gen_unit].query(genMainQuery);
   d9c02:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
   d9c06:	4638      	mov	r0, r7
   d9c08:	f006 fa14 	bl	e0034 <_ZN6Modbus5queryE8modbus_t>
      delay(20);
   d9c0c:	2014      	movs	r0, #20
   d9c0e:	f007 fc3e 	bl	e148e <delay>

      gxGen[gen_unit].poll();
   d9c12:	4638      	mov	r0, r7
   d9c14:	f006 f8a2 	bl	dfd5c <_ZN6Modbus4pollEv>

      if (gxGen[gen_unit].validate_ans == true)
   d9c18:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   d9c1c:	b143      	cbz	r3, d9c30 <_Z18readGenMainMetricshh+0x80>
      {
        gxGen[gen_unit].extractMainMetrics(i);
   d9c1e:	4659      	mov	r1, fp
   d9c20:	4638      	mov	r0, r7
   d9c22:	f002 ff7b 	bl	dcb1c <_ZN11GXGenerator18extractMainMetricsEh>
        gendata_error_count = NO_GEN_SPECIFIED;
   d9c26:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
   d9c2a:	3601      	adds	r6, #1
   d9c2c:	46c2      	mov	sl, r8
   d9c2e:	e7ca      	b.n	d9bc6 <_Z18readGenMainMetricshh+0x16>
        break;
      }
      else gendata_error_count++;  
   d9c30:	eb0a 0805 	add.w	r8, sl, r5

      if (gxGen[gen_unit].getState() == COM_IDLE)
   d9c34:	4638      	mov	r0, r7
      else gendata_error_count++;  
   d9c36:	fa5f f888 	uxtb.w	r8, r8
      if (gxGen[gen_unit].getState() == COM_IDLE)
   d9c3a:	f005 fe4a 	bl	df8d2 <_ZN6Modbus8getStateEv>
   d9c3e:	b918      	cbnz	r0, d9c48 <_Z18readGenMainMetricshh+0x98>
      {
        Log.info("Running main_Modbus data poll from the GenSet");
   d9c40:	490b      	ldr	r1, [pc, #44]	; (d9c70 <_Z18readGenMainMetricshh+0xc0>)
   d9c42:	480a      	ldr	r0, [pc, #40]	; (d9c6c <_Z18readGenMainMetricshh+0xbc>)
   d9c44:	f7ff ff38 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
    for (uint8_t j = MB_1_POLL; j < MB_12_POLLS; j++)
   d9c48:	3501      	adds	r5, #1
   d9c4a:	b2ed      	uxtb	r5, r5
   d9c4c:	2d0c      	cmp	r5, #12
   d9c4e:	d1d8      	bne.n	d9c02 <_Z18readGenMainMetricshh+0x52>
   d9c50:	e7eb      	b.n	d9c2a <_Z18readGenMainMetricshh+0x7a>
      } 
    }
  }
  
  if(gendata_error_count > NO_GEN_SPECIFIED)
     return GEN_NOT_READY;
   d9c52:	f1ba 0f00 	cmp.w	sl, #0

  return GEN_BASINST;
}
   d9c56:	bf0c      	ite	eq
   d9c58:	2001      	moveq	r0, #1
   d9c5a:	2005      	movne	r0, #5
   d9c5c:	b009      	add	sp, #36	; 0x24
   d9c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9c62:	bf00      	nop
   d9c64:	2003dbac 	.word	0x2003dbac
   d9c68:	000e6e38 	.word	0x000e6e38
   d9c6c:	2003e61c 	.word	0x2003e61c
   d9c70:	000e6e7e 	.word	0x000e6e7e

000d9c74 <_Z21readGenBasInstMetricshh>:

GeneratorDataSet readGenBasInstMetrics(uint8_t gen_unit, uint8_t num_of_queries)
{
   d9c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t gendata_error_count = NO_GEN_SPECIFIED;

  for (uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
  {
    modbus_t genBasInstQuery;
    gxGen[gen_unit].getBasInstQueryPacket(i, &genBasInstQuery);
   d9c78:	4c2b      	ldr	r4, [pc, #172]	; (d9d28 <_Z21readGenBasInstMetricshh+0xb4>)
{
   d9c7a:	b089      	sub	sp, #36	; 0x24
    gxGen[gen_unit].getBasInstQueryPacket(i, &genBasInstQuery);
   d9c7c:	23e8      	movs	r3, #232	; 0xe8
   d9c7e:	fb00 4703 	mla	r7, r0, r3, r4
   d9c82:	2600      	movs	r6, #0
{
   d9c84:	9103      	str	r1, [sp, #12]
  uint8_t gendata_error_count = NO_GEN_SPECIFIED;
   d9c86:	46b2      	mov	sl, r6

    Log.info("BASINST_DATA Slave_ID:%d, Func_Code:%d, Start_Address:%d, Num_Of_Regs:%d", 
             genBasInstQuery.u8id, genBasInstQuery.u8fct, genBasInstQuery.u16RegAdd, genBasInstQuery.u16CoilsNo);

    gxGen[gen_unit].validate_ans = false;
   d9c88:	463c      	mov	r4, r7
  for (uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
   d9c8a:	9b03      	ldr	r3, [sp, #12]
   d9c8c:	42b3      	cmp	r3, r6
   d9c8e:	fa5f fb86 	uxtb.w	fp, r6
   d9c92:	d040      	beq.n	d9d16 <_Z21readGenBasInstMetricshh+0xa2>
    gxGen[gen_unit].getBasInstQueryPacket(i, &genBasInstQuery);
   d9c94:	f10d 0914 	add.w	r9, sp, #20
   d9c98:	464a      	mov	r2, r9
   d9c9a:	4659      	mov	r1, fp
   d9c9c:	4638      	mov	r0, r7
   d9c9e:	f002 fdfd 	bl	dc89c <_ZN11GXGenerator21getBasInstQueryPacketEhP8modbus_t>
    Log.info("BASINST_DATA Slave_ID:%d, Func_Code:%d, Start_Address:%d, Num_Of_Regs:%d", 
   d9ca2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d9ca6:	9301      	str	r3, [sp, #4]
   d9ca8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   d9cac:	9300      	str	r3, [sp, #0]
   d9cae:	f89d 2014 	ldrb.w	r2, [sp, #20]
   d9cb2:	f89d 3015 	ldrb.w	r3, [sp, #21]
   d9cb6:	491d      	ldr	r1, [pc, #116]	; (d9d2c <_Z21readGenBasInstMetricshh+0xb8>)
   d9cb8:	481d      	ldr	r0, [pc, #116]	; (d9d30 <_Z21readGenBasInstMetricshh+0xbc>)
   d9cba:	f7ff fefd 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
    gxGen[gen_unit].validate_ans = false;
   d9cbe:	2300      	movs	r3, #0
   d9cc0:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62

    for (uint8_t j = MB_1_POLL; j < MB_12_POLLS; j++)
   d9cc4:	2501      	movs	r5, #1
    {
      // Pass the Modbus query packet to the Genset controller
      gxGen[gen_unit].query(genBasInstQuery);
   d9cc6:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
   d9cca:	4638      	mov	r0, r7
   d9ccc:	f006 f9b2 	bl	e0034 <_ZN6Modbus5queryE8modbus_t>
      delay(20);
   d9cd0:	2014      	movs	r0, #20
   d9cd2:	f007 fbdc 	bl	e148e <delay>

      gxGen[gen_unit].poll();
   d9cd6:	4638      	mov	r0, r7
   d9cd8:	f006 f840 	bl	dfd5c <_ZN6Modbus4pollEv>

      if (gxGen[gen_unit].validate_ans == true)
   d9cdc:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   d9ce0:	b143      	cbz	r3, d9cf4 <_Z21readGenBasInstMetricshh+0x80>
      {
        gxGen[gen_unit].extractBasInstMetrics(i);
   d9ce2:	4659      	mov	r1, fp
   d9ce4:	4638      	mov	r0, r7
   d9ce6:	f002 ffb9 	bl	dcc5c <_ZN11GXGenerator21extractBasInstMetricsEh>
        gendata_error_count = NO_GEN_SPECIFIED;
   d9cea:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
   d9cee:	3601      	adds	r6, #1
   d9cf0:	46c2      	mov	sl, r8
   d9cf2:	e7ca      	b.n	d9c8a <_Z21readGenBasInstMetricshh+0x16>
        break;
      }
      else gendata_error_count++;
   d9cf4:	eb0a 0805 	add.w	r8, sl, r5

      if (gxGen[gen_unit].getState() == COM_IDLE)
   d9cf8:	4638      	mov	r0, r7
      else gendata_error_count++;
   d9cfa:	fa5f f888 	uxtb.w	r8, r8
      if (gxGen[gen_unit].getState() == COM_IDLE)
   d9cfe:	f005 fde8 	bl	df8d2 <_ZN6Modbus8getStateEv>
   d9d02:	b918      	cbnz	r0, d9d0c <_Z21readGenBasInstMetricshh+0x98>
      {
        Log.info("Running BasInst_Modbus data poll from the GenSet");
   d9d04:	490b      	ldr	r1, [pc, #44]	; (d9d34 <_Z21readGenBasInstMetricshh+0xc0>)
   d9d06:	480a      	ldr	r0, [pc, #40]	; (d9d30 <_Z21readGenBasInstMetricshh+0xbc>)
   d9d08:	f7ff fed6 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
    for (uint8_t j = MB_1_POLL; j < MB_12_POLLS; j++)
   d9d0c:	3501      	adds	r5, #1
   d9d0e:	b2ed      	uxtb	r5, r5
   d9d10:	2d0c      	cmp	r5, #12
   d9d12:	d1d8      	bne.n	d9cc6 <_Z21readGenBasInstMetricshh+0x52>
   d9d14:	e7eb      	b.n	d9cee <_Z21readGenBasInstMetricshh+0x7a>
      } 
    }
  }

  if(gendata_error_count > NO_GEN_SPECIFIED)
     return GEN_NOT_READY;
   d9d16:	f1ba 0f00 	cmp.w	sl, #0

  return GEN_DERINST;
}
   d9d1a:	bf0c      	ite	eq
   d9d1c:	2002      	moveq	r0, #2
   d9d1e:	2005      	movne	r0, #5
   d9d20:	b009      	add	sp, #36	; 0x24
   d9d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9d26:	bf00      	nop
   d9d28:	2003dbac 	.word	0x2003dbac
   d9d2c:	000e6eac 	.word	0x000e6eac
   d9d30:	2003e61c 	.word	0x2003e61c
   d9d34:	000e6ef5 	.word	0x000e6ef5

000d9d38 <_Z21readGenDerInstMetricshh>:

GeneratorDataSet readGenDerInstMetrics(uint8_t gen_unit, uint8_t num_of_queries) 
{
   d9d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t gendata_error_count = NO_GEN_SPECIFIED;

  for (uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
  {
    modbus_t genDerInstQuery;
    gxGen[gen_unit].getDerInstQueryPacket(i, &genDerInstQuery);
   d9d3c:	4c2b      	ldr	r4, [pc, #172]	; (d9dec <_Z21readGenDerInstMetricshh+0xb4>)
{
   d9d3e:	b089      	sub	sp, #36	; 0x24
    gxGen[gen_unit].getDerInstQueryPacket(i, &genDerInstQuery);
   d9d40:	23e8      	movs	r3, #232	; 0xe8
   d9d42:	fb00 4703 	mla	r7, r0, r3, r4
   d9d46:	2600      	movs	r6, #0
{
   d9d48:	9103      	str	r1, [sp, #12]
  uint8_t gendata_error_count = NO_GEN_SPECIFIED;
   d9d4a:	46b2      	mov	sl, r6

    Log.info("DERINST_DATA Slave_ID:%d, Func_Code:%d, Start_Address:%d, Num_Of_Regs:%d", 
             genDerInstQuery.u8id, genDerInstQuery.u8fct, genDerInstQuery.u16RegAdd, genDerInstQuery.u16CoilsNo);

    gxGen[gen_unit].validate_ans = false;
   d9d4c:	463c      	mov	r4, r7
  for (uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
   d9d4e:	9b03      	ldr	r3, [sp, #12]
   d9d50:	42b3      	cmp	r3, r6
   d9d52:	fa5f fb86 	uxtb.w	fp, r6
   d9d56:	d040      	beq.n	d9dda <_Z21readGenDerInstMetricshh+0xa2>
    gxGen[gen_unit].getDerInstQueryPacket(i, &genDerInstQuery);
   d9d58:	f10d 0914 	add.w	r9, sp, #20
   d9d5c:	464a      	mov	r2, r9
   d9d5e:	4659      	mov	r1, fp
   d9d60:	4638      	mov	r0, r7
   d9d62:	f002 fdeb 	bl	dc93c <_ZN11GXGenerator21getDerInstQueryPacketEhP8modbus_t>
    Log.info("DERINST_DATA Slave_ID:%d, Func_Code:%d, Start_Address:%d, Num_Of_Regs:%d", 
   d9d66:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d9d6a:	9301      	str	r3, [sp, #4]
   d9d6c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   d9d70:	9300      	str	r3, [sp, #0]
   d9d72:	f89d 2014 	ldrb.w	r2, [sp, #20]
   d9d76:	f89d 3015 	ldrb.w	r3, [sp, #21]
   d9d7a:	491d      	ldr	r1, [pc, #116]	; (d9df0 <_Z21readGenDerInstMetricshh+0xb8>)
   d9d7c:	481d      	ldr	r0, [pc, #116]	; (d9df4 <_Z21readGenDerInstMetricshh+0xbc>)
   d9d7e:	f7ff fe9b 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
    gxGen[gen_unit].validate_ans = false;
   d9d82:	2300      	movs	r3, #0
   d9d84:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62

    for (uint8_t j = MB_1_POLL; j < MB_12_POLLS; j++)
   d9d88:	2501      	movs	r5, #1
    {
      // Pass the Modbus query packet to the Genset controller
      gxGen[gen_unit].query(genDerInstQuery);
   d9d8a:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
   d9d8e:	4638      	mov	r0, r7
   d9d90:	f006 f950 	bl	e0034 <_ZN6Modbus5queryE8modbus_t>
      delay(20);
   d9d94:	2014      	movs	r0, #20
   d9d96:	f007 fb7a 	bl	e148e <delay>

      gxGen[gen_unit].poll();
   d9d9a:	4638      	mov	r0, r7
   d9d9c:	f005 ffde 	bl	dfd5c <_ZN6Modbus4pollEv>

      if (gxGen[gen_unit].validate_ans == true)
   d9da0:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   d9da4:	b143      	cbz	r3, d9db8 <_Z21readGenDerInstMetricshh+0x80>
      {
        gxGen[gen_unit].extractDerInstMetrics(i);
   d9da6:	4659      	mov	r1, fp
   d9da8:	4638      	mov	r0, r7
   d9daa:	f003 f847 	bl	dce3c <_ZN11GXGenerator21extractDerInstMetricsEh>
        gendata_error_count = NO_GEN_SPECIFIED;
   d9dae:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
   d9db2:	3601      	adds	r6, #1
   d9db4:	46c2      	mov	sl, r8
   d9db6:	e7ca      	b.n	d9d4e <_Z21readGenDerInstMetricshh+0x16>
        break;
      }
      else gendata_error_count++;
   d9db8:	eb0a 0805 	add.w	r8, sl, r5

      if (gxGen[gen_unit].getState() == COM_IDLE)
   d9dbc:	4638      	mov	r0, r7
      else gendata_error_count++;
   d9dbe:	fa5f f888 	uxtb.w	r8, r8
      if (gxGen[gen_unit].getState() == COM_IDLE)
   d9dc2:	f005 fd86 	bl	df8d2 <_ZN6Modbus8getStateEv>
   d9dc6:	b918      	cbnz	r0, d9dd0 <_Z21readGenDerInstMetricshh+0x98>
      {
        Log.info("Running DerInst_Modbus data poll from the GenSet");
   d9dc8:	490b      	ldr	r1, [pc, #44]	; (d9df8 <_Z21readGenDerInstMetricshh+0xc0>)
   d9dca:	480a      	ldr	r0, [pc, #40]	; (d9df4 <_Z21readGenDerInstMetricshh+0xbc>)
   d9dcc:	f7ff fe74 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
    for (uint8_t j = MB_1_POLL; j < MB_12_POLLS; j++)
   d9dd0:	3501      	adds	r5, #1
   d9dd2:	b2ed      	uxtb	r5, r5
   d9dd4:	2d0c      	cmp	r5, #12
   d9dd6:	d1d8      	bne.n	d9d8a <_Z21readGenDerInstMetricshh+0x52>
   d9dd8:	e7eb      	b.n	d9db2 <_Z21readGenDerInstMetricshh+0x7a>
      }
    }
  }

  if(gendata_error_count > NO_GEN_SPECIFIED)
     return GEN_NOT_READY;
   d9dda:	f1ba 0f00 	cmp.w	sl, #0

  return GEN_READY;
}
   d9dde:	bf0c      	ite	eq
   d9de0:	2004      	moveq	r0, #4
   d9de2:	2005      	movne	r0, #5
   d9de4:	b009      	add	sp, #36	; 0x24
   d9de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9dea:	bf00      	nop
   d9dec:	2003dbac 	.word	0x2003dbac
   d9df0:	000e6f26 	.word	0x000e6f26
   d9df4:	2003e61c 	.word	0x2003e61c
   d9df8:	000e6f6f 	.word	0x000e6f6f

000d9dfc <_Z27readGridBasInstMetrcFromGenh>:

GridDataSet readGridBasInstMetrcFromGen(uint8_t num_of_queries)
{
   d9dfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   d9e00:	2400      	movs	r4, #0

  for(uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
  {
    // Prepare the Modbus query packet(from the Genset query Bank) and set validate ans to false
    modbus_t gridBasInstQuery;
    gxGen[gen_unit].getGridBasInstQueryPacket(i, &gridBasInstQuery);
   d9e02:	4d19      	ldr	r5, [pc, #100]	; (d9e68 <_Z27readGridBasInstMetrcFromGenh+0x6c>)
{
   d9e04:	4680      	mov	r8, r0
    gxGen[gen_unit].getGridBasInstQueryPacket(i, &gridBasInstQuery);
   d9e06:	af01      	add	r7, sp, #4
  uint8_t gridmetrc_error_val = GRID_DONE;
   d9e08:	4620      	mov	r0, r4
    gxGen[gen_unit].validate_ans = false;
   d9e0a:	46a2      	mov	sl, r4
  for(uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
   d9e0c:	4544      	cmp	r4, r8
   d9e0e:	fa5f f984 	uxtb.w	r9, r4
   d9e12:	d022      	beq.n	d9e5a <_Z27readGridBasInstMetrcFromGenh+0x5e>
    gxGen[gen_unit].getGridBasInstQueryPacket(i, &gridBasInstQuery);
   d9e14:	4814      	ldr	r0, [pc, #80]	; (d9e68 <_Z27readGridBasInstMetrcFromGenh+0x6c>)
   d9e16:	463a      	mov	r2, r7
   d9e18:	4649      	mov	r1, r9
   d9e1a:	f002 fe07 	bl	dca2c <_ZN11GXGenerator25getGridBasInstQueryPacketEhP8modbus_t>
    gxGen[gen_unit].validate_ans = false;
   d9e1e:	260b      	movs	r6, #11
   d9e20:	f885 a062 	strb.w	sl, [r5, #98]	; 0x62

    for(uint8_t j = MB_1_POLL; j < MB_12_POLLS; j++)
    {
      // Send Modbus Query (packet) to the Modbus device and poll for response after a 20ms delay
      gxGen[gen_unit].query(gridBasInstQuery);
   d9e24:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
   d9e28:	4628      	mov	r0, r5
   d9e2a:	f006 f903 	bl	e0034 <_ZN6Modbus5queryE8modbus_t>
      delay(20);
   d9e2e:	2014      	movs	r0, #20
   d9e30:	f007 fb2d 	bl	e148e <delay>
      gxGen[gen_unit].poll();
   d9e34:	4628      	mov	r0, r5
   d9e36:	f005 ff91 	bl	dfd5c <_ZN6Modbus4pollEv>

      // If there's a valid respond, extract the raw metrics and break out of this polling loop
      if(gxGen[gen_unit].validate_ans == true)
   d9e3a:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
   d9e3e:	b133      	cbz	r3, d9e4e <_Z27readGridBasInstMetrcFromGenh+0x52>
      {
        gxGen[gen_unit].extractGridBasInstMetrics(i);
   d9e40:	4628      	mov	r0, r5
   d9e42:	4649      	mov	r1, r9
   d9e44:	f003 f858 	bl	dcef8 <_ZN11GXGenerator25extractGridBasInstMetricsEh>
        gridmetrc_error_val = GRID_DONE;
   d9e48:	2000      	movs	r0, #0
  for(uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
   d9e4a:	3401      	adds	r4, #1
   d9e4c:	e7de      	b.n	d9e0c <_Z27readGridBasInstMetrcFromGenh+0x10>
    for(uint8_t j = MB_1_POLL; j < MB_12_POLLS; j++)
   d9e4e:	3e01      	subs	r6, #1
   d9e50:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d9e54:	d1e6      	bne.n	d9e24 <_Z27readGridBasInstMetrcFromGenh+0x28>
        break;
      }
      else gridmetrc_error_val = GRID_UNDONE;
   d9e56:	2003      	movs	r0, #3
   d9e58:	e7f7      	b.n	d9e4a <_Z27readGridBasInstMetrcFromGenh+0x4e>

  // Return GRID_UNDONE if there was no Valid for GX to publish error message to the cloud
  if(gridmetrc_error_val == GRID_UNDONE)
     return GRID_UNDONE;
  
  return GRID_DER_INST;
   d9e5a:	2803      	cmp	r0, #3
}
   d9e5c:	bf18      	it	ne
   d9e5e:	2002      	movne	r0, #2
   d9e60:	b004      	add	sp, #16
   d9e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9e66:	bf00      	nop
   d9e68:	2003dbac 	.word	0x2003dbac

000d9e6c <_Z27readGridDerInstMetrcFromGenh>:

GridDataSet readGridDerInstMetrcFromGen(uint8_t num_of_queries)
{
   d9e6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   d9e70:	2400      	movs	r4, #0

  for(uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
  {
    // Prepare the Modbus query packet(from the Genset query Bank) and set validate ans to false
    modbus_t gridDerInstQuery;
    gxGen[gen_unit].getGridDerInstQueryPacket(i, &gridDerInstQuery);
   d9e72:	4d19      	ldr	r5, [pc, #100]	; (d9ed8 <_Z27readGridDerInstMetrcFromGenh+0x6c>)
{
   d9e74:	4680      	mov	r8, r0
    gxGen[gen_unit].getGridDerInstQueryPacket(i, &gridDerInstQuery);
   d9e76:	af01      	add	r7, sp, #4
  uint8_t gridmetrc_error_val = GRID_DONE;
   d9e78:	4620      	mov	r0, r4
    gxGen[gen_unit].validate_ans = false;
   d9e7a:	46a2      	mov	sl, r4
  for(uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
   d9e7c:	4544      	cmp	r4, r8
   d9e7e:	fa5f f984 	uxtb.w	r9, r4
   d9e82:	d022      	beq.n	d9eca <_Z27readGridDerInstMetrcFromGenh+0x5e>
    gxGen[gen_unit].getGridDerInstQueryPacket(i, &gridDerInstQuery);
   d9e84:	4814      	ldr	r0, [pc, #80]	; (d9ed8 <_Z27readGridDerInstMetrcFromGenh+0x6c>)
   d9e86:	463a      	mov	r2, r7
   d9e88:	4649      	mov	r1, r9
   d9e8a:	f002 fded 	bl	dca68 <_ZN11GXGenerator25getGridDerInstQueryPacketEhP8modbus_t>
    gxGen[gen_unit].validate_ans = false;
   d9e8e:	260b      	movs	r6, #11
   d9e90:	f885 a062 	strb.w	sl, [r5, #98]	; 0x62

    for(uint8_t j = MB_1_POLL; j < MB_12_POLLS; j++)
    {
      // Send Modbus Query (packet) to the Modbus device and poll for response after a 20ms delay
      gxGen[gen_unit].query(gridDerInstQuery);
   d9e94:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
   d9e98:	4628      	mov	r0, r5
   d9e9a:	f006 f8cb 	bl	e0034 <_ZN6Modbus5queryE8modbus_t>
      delay(20);
   d9e9e:	2014      	movs	r0, #20
   d9ea0:	f007 faf5 	bl	e148e <delay>
      gxGen[gen_unit].poll();
   d9ea4:	4628      	mov	r0, r5
   d9ea6:	f005 ff59 	bl	dfd5c <_ZN6Modbus4pollEv>

      // If there's a valid respond, extract the raw metrics and break out of this polling loop
      if(gxGen[gen_unit].validate_ans == true)
   d9eaa:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
   d9eae:	b133      	cbz	r3, d9ebe <_Z27readGridDerInstMetrcFromGenh+0x52>
      {
        gxGen[gen_unit].extractGridDerInstMetrics(i);
   d9eb0:	4628      	mov	r0, r5
   d9eb2:	4649      	mov	r1, r9
   d9eb4:	f003 f86a 	bl	dcf8c <_ZN11GXGenerator25extractGridDerInstMetricsEh>
        gridmetrc_error_val = GRID_DONE;
   d9eb8:	2000      	movs	r0, #0
  for(uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
   d9eba:	3401      	adds	r4, #1
   d9ebc:	e7de      	b.n	d9e7c <_Z27readGridDerInstMetrcFromGenh+0x10>
    for(uint8_t j = MB_1_POLL; j < MB_12_POLLS; j++)
   d9ebe:	3e01      	subs	r6, #1
   d9ec0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d9ec4:	d1e6      	bne.n	d9e94 <_Z27readGridDerInstMetrcFromGenh+0x28>
        break;
      }
      else gridmetrc_error_val = GRID_UNDONE;
   d9ec6:	2003      	movs	r0, #3
   d9ec8:	e7f7      	b.n	d9eba <_Z27readGridDerInstMetrcFromGenh+0x4e>

  // Return GRID_UNDONE if there was no Valid for GX to publish error message to the cloud
  if(gridmetrc_error_val == GRID_UNDONE)
     return GRID_UNDONE;
  
  return GRID_DONE;
   d9eca:	2803      	cmp	r0, #3
}
   d9ecc:	bf18      	it	ne
   d9ece:	2000      	movne	r0, #0
   d9ed0:	b004      	add	sp, #16
   d9ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9ed6:	bf00      	nop
   d9ed8:	2003dbac 	.word	0x2003dbac

000d9edc <_Z19checkGenEngineStateh>:

GeneratorDataSet checkGenEngineState(uint8_t gen_unit)
{
   d9edc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  // Setup the communication baudrate for the Modbus Rtu interface with the Genset controller 
  uint8_t baud_code = gxGen[gen_unit].getBaudIndex();
   d9ee0:	4d22      	ldr	r5, [pc, #136]	; (d9f6c <_Z19checkGenEngineStateh+0x90>)
   d9ee2:	f04f 08e8 	mov.w	r8, #232	; 0xe8
   d9ee6:	fb00 5608 	mla	r6, r0, r8, r5
   d9eea:	4630      	mov	r0, r6
   d9eec:	f003 f8a6 	bl	dd03c <_ZN11GXGenerator12getBaudIndexEv>
  uint32_t gen_baud_rate = GEN_BAUD_RATE[baud_code];
   d9ef0:	4b1f      	ldr	r3, [pc, #124]	; (d9f70 <_Z19checkGenEngineStateh+0x94>)
      break;
    }
    else gendata_error_count++;

    if (gxGen[gen_unit].getState() == COM_IDLE)
    { Log.info("Running Engine_State data poll from the GenSet"); }
   d9ef2:	f8df 8084 	ldr.w	r8, [pc, #132]	; d9f78 <_Z19checkGenEngineStateh+0x9c>
  gxGen[gen_unit].begin(gen_baud_rate);
   d9ef6:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   d9efa:	4630      	mov	r0, r6
   d9efc:	f005 fe40 	bl	dfb80 <_ZN6Modbus5beginEl>
  gxGen[gen_unit].setTimeOut(MODBUS_ROLL_OVER_TIME);
   d9f00:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
   d9f04:	4630      	mov	r0, r6
   d9f06:	f005 fce1 	bl	df8cc <_ZN6Modbus10setTimeOutEt>
  gxGen[gen_unit].getEngStateQueryPacket(GEN_QUERY1, &genEngStateQuery);
   d9f0a:	af01      	add	r7, sp, #4
  delay(25);
   d9f0c:	2019      	movs	r0, #25
   d9f0e:	f007 fabe 	bl	e148e <delay>
  gxGen[gen_unit].validate_ans = false;
   d9f12:	2400      	movs	r4, #0
  gxGen[gen_unit].getEngStateQueryPacket(GEN_QUERY1, &genEngStateQuery);
   d9f14:	463a      	mov	r2, r7
   d9f16:	2100      	movs	r1, #0
   d9f18:	4630      	mov	r0, r6
   d9f1a:	f002 fd43 	bl	dc9a4 <_ZN11GXGenerator22getEngStateQueryPacketEhP8modbus_t>
    if (gxGen[gen_unit].validate_ans == true)
   d9f1e:	4635      	mov	r5, r6
  gxGen[gen_unit].validate_ans = false;
   d9f20:	f886 4062 	strb.w	r4, [r6, #98]	; 0x62
    gxGen[gen_unit].query(genEngStateQuery);
   d9f24:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
   d9f28:	4630      	mov	r0, r6
   d9f2a:	f006 f883 	bl	e0034 <_ZN6Modbus5queryE8modbus_t>
    delay(20);
   d9f2e:	2014      	movs	r0, #20
   d9f30:	f007 faad 	bl	e148e <delay>
    gxGen[gen_unit].poll();
   d9f34:	4630      	mov	r0, r6
   d9f36:	f005 ff11 	bl	dfd5c <_ZN6Modbus4pollEv>
    if (gxGen[gen_unit].validate_ans == true)
   d9f3a:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
   d9f3e:	b99b      	cbnz	r3, d9f68 <_Z19checkGenEngineStateh+0x8c>
    else gendata_error_count++;
   d9f40:	3401      	adds	r4, #1
    if (gxGen[gen_unit].getState() == COM_IDLE)
   d9f42:	4630      	mov	r0, r6
    else gendata_error_count++;
   d9f44:	b2e4      	uxtb	r4, r4
    if (gxGen[gen_unit].getState() == COM_IDLE)
   d9f46:	f005 fcc4 	bl	df8d2 <_ZN6Modbus8getStateEv>
   d9f4a:	b918      	cbnz	r0, d9f54 <_Z19checkGenEngineStateh+0x78>
    { Log.info("Running Engine_State data poll from the GenSet"); }
   d9f4c:	4809      	ldr	r0, [pc, #36]	; (d9f74 <_Z19checkGenEngineStateh+0x98>)
   d9f4e:	4641      	mov	r1, r8
   d9f50:	f7ff fdb2 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
  for (uint8_t i = MB_1_POLL; i < MB_12_POLLS; i++)
   d9f54:	2c0b      	cmp	r4, #11
   d9f56:	d1e5      	bne.n	d9f24 <_Z19checkGenEngineStateh+0x48>
  }

  // Update the engine_state variable within the Generator class with the latest value
  gxGen[gen_unit].updateEngineStatus(gendata_error_count);
   d9f58:	4630      	mov	r0, r6
   d9f5a:	4621      	mov	r1, r4
   d9f5c:	f003 f850 	bl	dd000 <_ZN11GXGenerator18updateEngineStatusEh>
  return GEN_READY;
}
   d9f60:	2004      	movs	r0, #4
   d9f62:	b004      	add	sp, #16
   d9f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      gendata_error_count = NO_GEN_SPECIFIED;
   d9f68:	2400      	movs	r4, #0
   d9f6a:	e7f5      	b.n	d9f58 <_Z19checkGenEngineStateh+0x7c>
   d9f6c:	2003dbac 	.word	0x2003dbac
   d9f70:	2003d6c0 	.word	0x2003d6c0
   d9f74:	2003e61c 	.word	0x2003e61c
   d9f78:	000e6fa0 	.word	0x000e6fa0

000d9f7c <_Z13formatGenDatah16GeneratorDataSet>:

void formatGenData(uint8_t gen_unit, GeneratorDataSet gen_data_group)
{
  GeneratorType gen_type = gxGen[gen_unit].getControllerId();
   d9f7c:	4b15      	ldr	r3, [pc, #84]	; (d9fd4 <_Z13formatGenDatah16GeneratorDataSet+0x58>)
   d9f7e:	22e8      	movs	r2, #232	; 0xe8
{
   d9f80:	b510      	push	{r4, lr}
  GeneratorType gen_type = gxGen[gen_unit].getControllerId();
   d9f82:	fb00 3002 	mla	r0, r0, r2, r3
{
   d9f86:	460c      	mov	r4, r1
  GeneratorType gen_type = gxGen[gen_unit].getControllerId();
   d9f88:	f002 fc33 	bl	dc7f2 <_ZN11GXGenerator15getControllerIdEv>

  switch (gen_type)
   d9f8c:	3801      	subs	r0, #1
   d9f8e:	2803      	cmp	r0, #3
   d9f90:	d81f      	bhi.n	d9fd2 <_Z13formatGenDatah16GeneratorDataSet+0x56>
   d9f92:	e8df f000 	tbb	[pc, r0]
   d9f96:	0902      	.short	0x0902
   d9f98:	1710      	.short	0x1710
  {
    case DCP_10:
    {
      formatGenDataDCP10(gen_data_group, extracted_modbus_databuff, gen_alrm_regval);
   d9f9a:	4620      	mov	r0, r4
   d9f9c:	4a0e      	ldr	r2, [pc, #56]	; (d9fd8 <_Z13formatGenDatah16GeneratorDataSet+0x5c>)
   d9f9e:	490f      	ldr	r1, [pc, #60]	; (d9fdc <_Z13formatGenDatah16GeneratorDataSet+0x60>)
    {
      formatGenDataApm303(gen_data_group, extracted_modbus_databuff, gen_alrm_regval);
      break;
    }
  }
}
   d9fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      formatGenDataDCP10(gen_data_group, extracted_modbus_databuff, gen_alrm_regval);
   d9fa4:	f7ff ba28 	b.w	d93f8 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt>
      formatGenDataDSE(gen_data_group, extracted_modbus_databuff, gen_alrm_regval);
   d9fa8:	4620      	mov	r0, r4
   d9faa:	4a0b      	ldr	r2, [pc, #44]	; (d9fd8 <_Z13formatGenDatah16GeneratorDataSet+0x5c>)
   d9fac:	490b      	ldr	r1, [pc, #44]	; (d9fdc <_Z13formatGenDatah16GeneratorDataSet+0x60>)
}
   d9fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      formatGenDataDSE(gen_data_group, extracted_modbus_databuff, gen_alrm_regval);
   d9fb2:	f7ff bcaf 	b.w	d9914 <_Z16formatGenDataDSE16GeneratorDataSetPmPt>
      formatGenDataCummins1302(gen_data_group, extracted_modbus_databuff, gen_alrm_regval);
   d9fb6:	4620      	mov	r0, r4
   d9fb8:	4a07      	ldr	r2, [pc, #28]	; (d9fd8 <_Z13formatGenDatah16GeneratorDataSet+0x5c>)
   d9fba:	4908      	ldr	r1, [pc, #32]	; (d9fdc <_Z13formatGenDatah16GeneratorDataSet+0x60>)
}
   d9fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      formatGenDataCummins1302(gen_data_group, extracted_modbus_databuff, gen_alrm_regval);
   d9fc0:	f003 ba6a 	b.w	dd498 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt>
      formatGenDataApm303(gen_data_group, extracted_modbus_databuff, gen_alrm_regval);
   d9fc4:	4620      	mov	r0, r4
   d9fc6:	4a04      	ldr	r2, [pc, #16]	; (d9fd8 <_Z13formatGenDatah16GeneratorDataSet+0x5c>)
   d9fc8:	4904      	ldr	r1, [pc, #16]	; (d9fdc <_Z13formatGenDatah16GeneratorDataSet+0x60>)
}
   d9fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      formatGenDataApm303(gen_data_group, extracted_modbus_databuff, gen_alrm_regval);
   d9fce:	f7ff b9d1 	b.w	d9374 <_Z19formatGenDataApm30316GeneratorDataSetPmPt>
}
   d9fd2:	bd10      	pop	{r4, pc}
   d9fd4:	2003dbac 	.word	0x2003dbac
   d9fd8:	2003db7c 	.word	0x2003db7c
   d9fdc:	2003db18 	.word	0x2003db18

000d9fe0 <_Z21formatGridDataFromGen11GridDataSet>:

void formatGridDataFromGen(GridDataSet grid_data_grp)
{
   d9fe0:	b510      	push	{r4, lr}
   d9fe2:	4604      	mov	r4, r0
  uint8_t gen_unit = GEN1 - ZERO_INDEX_CORRECTION;
  GeneratorType gen_type = gxGen[gen_unit].getControllerId();
   d9fe4:	4805      	ldr	r0, [pc, #20]	; (d9ffc <_Z21formatGridDataFromGen11GridDataSet+0x1c>)
   d9fe6:	f002 fc04 	bl	dc7f2 <_ZN11GXGenerator15getControllerIdEv>

  if(gen_type == DSE_857)
   d9fea:	2802      	cmp	r0, #2
   d9fec:	d105      	bne.n	d9ffa <_Z21formatGridDataFromGen11GridDataSet+0x1a>
   formatGridDataDSE(grid_data_grp, extracted_modbus_databuff);
   d9fee:	4620      	mov	r0, r4
   d9ff0:	4903      	ldr	r1, [pc, #12]	; (da000 <_Z21formatGridDataFromGen11GridDataSet+0x20>)
}
   d9ff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   formatGridDataDSE(grid_data_grp, extracted_modbus_databuff);
   d9ff6:	f7ff bd37 	b.w	d9a68 <_Z17formatGridDataDSE11GridDataSetPm>
}
   d9ffa:	bd10      	pop	{r4, pc}
   d9ffc:	2003dbac 	.word	0x2003dbac
   da000:	2003db18 	.word	0x2003db18

000da004 <_Z15pubGenMainMtrcsh>:
    }
  }
}

GeneratorDataSet pubGenMainMtrcs(uint8_t gen_spot)
{
   da004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da008:	ed2d 8b02 	vpush	{d8}
   da00c:	b090      	sub	sp, #64	; 0x40
   da00e:	4604      	mov	r4, r0

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   da010:	496b      	ldr	r1, [pc, #428]	; (da1c0 <_Z15pubGenMainMtrcsh+0x1bc>)
  String gxGenMetricString = "{\n\"v\":\"1\",\n\"gen" + String(gen_spot + ZERO_INDEX_CORRECTION) + 
                             "\":\"" + String(Time.now()) + ":";

  gxGenMetricString.concat(String(main_gen_data[RUN_HRS], 1) + ":");
   da012:	4d6c      	ldr	r5, [pc, #432]	; (da1c4 <_Z15pubGenMainMtrcsh+0x1c0>)

  for (uint8_t data_indx = NUM_OF_STARTS; data_indx < ALARM_CODE1; data_indx++)
  {
    if ((main_gen_data[data_indx] == MB_UNAVAIL_VAL) || 
   da014:	ed9f 8a6c 	vldr	s16, [pc, #432]	; da1c8 <_Z15pubGenMainMtrcsh+0x1c4>
        (main_gen_data[data_indx] == MB_SENTL_VAL))
    { gxGenMetricString.concat(":"); }
   da018:	4e6c      	ldr	r6, [pc, #432]	; (da1cc <_Z15pubGenMainMtrcsh+0x1c8>)
    if ((main_gen_data[data_indx] == MB_UNAVAIL_VAL) || 
   da01a:	eddf 8a6d 	vldr	s17, [pc, #436]	; da1d0 <_Z15pubGenMainMtrcsh+0x1cc>
   da01e:	a808      	add	r0, sp, #32
   da020:	f009 fdf5 	bl	e3c0e <_ZN6StringC1EPKc>
  String gxGenMetricString = "{\n\"v\":\"1\",\n\"gen" + String(gen_spot + ZERO_INDEX_CORRECTION) + 
   da024:	220a      	movs	r2, #10
   da026:	1c61      	adds	r1, r4, #1
   da028:	a804      	add	r0, sp, #16
   da02a:	f009 fe72 	bl	e3d12 <_ZN6StringC1Eih>
   da02e:	a904      	add	r1, sp, #16
   da030:	a808      	add	r0, sp, #32
   da032:	f009 ff22 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
                             "\":\"" + String(Time.now()) + ":";
   da036:	4967      	ldr	r1, [pc, #412]	; (da1d4 <_Z15pubGenMainMtrcsh+0x1d0>)
   da038:	f009 ff2b 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   da03c:	4604      	mov	r4, r0
   da03e:	f00a f893 	bl	e4168 <_ZN9TimeClass3nowEv>
   da042:	220a      	movs	r2, #10
   da044:	4601      	mov	r1, r0
   da046:	a80c      	add	r0, sp, #48	; 0x30
   da048:	f009 fe89 	bl	e3d5e <_ZN6StringC1Elh>
   da04c:	a90c      	add	r1, sp, #48	; 0x30
   da04e:	4620      	mov	r0, r4
   da050:	f009 ff13 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
   da054:	495d      	ldr	r1, [pc, #372]	; (da1cc <_Z15pubGenMainMtrcsh+0x1c8>)
   da056:	f009 ff1c 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   da05a:	4601      	mov	r1, r0
   da05c:	4668      	mov	r0, sp
   da05e:	f009 fe21 	bl	e3ca4 <_ZN6StringC1ERKS_>
   da062:	a80c      	add	r0, sp, #48	; 0x30
   da064:	f009 fd88 	bl	e3b78 <_ZN6StringD1Ev>
  String gxGenMetricString = "{\n\"v\":\"1\",\n\"gen" + String(gen_spot + ZERO_INDEX_CORRECTION) + 
   da068:	a804      	add	r0, sp, #16
   da06a:	f009 fd85 	bl	e3b78 <_ZN6StringD1Ev>
class StringSumHelper : public String
   da06e:	a808      	add	r0, sp, #32
   da070:	f009 fd82 	bl	e3b78 <_ZN6StringD1Ev>
  gxGenMetricString.concat(String(main_gen_data[RUN_HRS], 1) + ":");
   da074:	ecb5 0a01 	vldmia	r5!, {s0}
   da078:	2101      	movs	r1, #1
   da07a:	a808      	add	r0, sp, #32
   da07c:	f009 fe96 	bl	e3dac <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
   da080:	a908      	add	r1, sp, #32
   da082:	a80c      	add	r0, sp, #48	; 0x30
   da084:	f009 fe0e 	bl	e3ca4 <_ZN6StringC1ERKS_>
   da088:	4950      	ldr	r1, [pc, #320]	; (da1cc <_Z15pubGenMainMtrcsh+0x1c8>)
   da08a:	a80c      	add	r0, sp, #48	; 0x30
   da08c:	f009 ff01 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   da090:	4601      	mov	r1, r0
   da092:	4668      	mov	r0, sp
   da094:	f009 fecf 	bl	e3e36 <_ZN6String6concatERKS_>
class StringSumHelper : public String
   da098:	a80c      	add	r0, sp, #48	; 0x30
   da09a:	f009 fd6d 	bl	e3b78 <_ZN6StringD1Ev>
   da09e:	a808      	add	r0, sp, #32
   da0a0:	f009 fd6a 	bl	e3b78 <_ZN6StringD1Ev>
   da0a4:	2403      	movs	r4, #3
    if ((main_gen_data[data_indx] == MB_UNAVAIL_VAL) || 
   da0a6:	ecb5 0a01 	vldmia	r5!, {s0}
   da0aa:	eeb4 0a48 	vcmp.f32	s0, s16
   da0ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da0b2:	d004      	beq.n	da0be <_Z15pubGenMainMtrcsh+0xba>
   da0b4:	eeb4 0a68 	vcmp.f32	s0, s17
   da0b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da0bc:	d169      	bne.n	da192 <_Z15pubGenMainMtrcsh+0x18e>
    { gxGenMetricString.concat(":"); }
   da0be:	4631      	mov	r1, r6
   da0c0:	4668      	mov	r0, sp
   da0c2:	f009 febc 	bl	e3e3e <_ZN6String6concatEPKc>
  for (uint8_t data_indx = NUM_OF_STARTS; data_indx < ALARM_CODE1; data_indx++)
   da0c6:	3c01      	subs	r4, #1
   da0c8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   da0cc:	d1eb      	bne.n	da0a6 <_Z15pubGenMainMtrcsh+0xa2>
   da0ce:	4e3d      	ldr	r6, [pc, #244]	; (da1c4 <_Z15pubGenMainMtrcsh+0x1c0>)

  for (uint8_t alrm_indx = ALARM_CODE1; alrm_indx < MAIN_GEN_DATA_SIZE; alrm_indx += 2)
  {
    if ((main_gen_data[alrm_indx] > GEN_ALM_NONE) && (main_gen_data[alrm_indx] <= TOTAL_SUPPORTED_ALARMS))
    {
      gxGenMetricString.concat(String(main_gen_data[alrm_indx], 0) + ",");
   da0d0:	4f41      	ldr	r7, [pc, #260]	; (da1d8 <_Z15pubGenMainMtrcsh+0x1d4>)
      gxGenMetricString.concat(String(main_gen_data[alrm_indx + ZERO_INDEX_CORRECTION], 0) + ";");
   da0d2:	f8df 8110 	ldr.w	r8, [pc, #272]	; da1e4 <_Z15pubGenMainMtrcsh+0x1e0>
  for (uint8_t data_indx = NUM_OF_STARTS; data_indx < ALARM_CODE1; data_indx++)
   da0d6:	4635      	mov	r5, r6
   da0d8:	2404      	movs	r4, #4
    if ((main_gen_data[alrm_indx] > GEN_ALM_NONE) && (main_gen_data[alrm_indx] <= TOTAL_SUPPORTED_ALARMS))
   da0da:	eeb3 8a08 	vmov.f32	s16, #56	; 0x41c00000  24.0
   da0de:	ed95 0a04 	vldr	s0, [r5, #16]
   da0e2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   da0e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da0ea:	dd32      	ble.n	da152 <_Z15pubGenMainMtrcsh+0x14e>
   da0ec:	eeb4 0ac8 	vcmpe.f32	s0, s16
   da0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da0f4:	d82d      	bhi.n	da152 <_Z15pubGenMainMtrcsh+0x14e>
      gxGenMetricString.concat(String(main_gen_data[alrm_indx], 0) + ",");
   da0f6:	2100      	movs	r1, #0
   da0f8:	a808      	add	r0, sp, #32
   da0fa:	f009 fe57 	bl	e3dac <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
   da0fe:	a908      	add	r1, sp, #32
   da100:	a80c      	add	r0, sp, #48	; 0x30
   da102:	f009 fdcf 	bl	e3ca4 <_ZN6StringC1ERKS_>
   da106:	4639      	mov	r1, r7
   da108:	a80c      	add	r0, sp, #48	; 0x30
   da10a:	f009 fec2 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   da10e:	4601      	mov	r1, r0
   da110:	4668      	mov	r0, sp
   da112:	f009 fe90 	bl	e3e36 <_ZN6String6concatERKS_>
class StringSumHelper : public String
   da116:	a80c      	add	r0, sp, #48	; 0x30
   da118:	f009 fd2e 	bl	e3b78 <_ZN6StringD1Ev>
   da11c:	a808      	add	r0, sp, #32
   da11e:	f009 fd2b 	bl	e3b78 <_ZN6StringD1Ev>
      gxGenMetricString.concat(String(main_gen_data[alrm_indx + ZERO_INDEX_CORRECTION], 0) + ";");
   da122:	ed95 0a05 	vldr	s0, [r5, #20]
   da126:	2100      	movs	r1, #0
   da128:	a808      	add	r0, sp, #32
   da12a:	f009 fe3f 	bl	e3dac <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
   da12e:	a908      	add	r1, sp, #32
   da130:	a80c      	add	r0, sp, #48	; 0x30
   da132:	f009 fdb7 	bl	e3ca4 <_ZN6StringC1ERKS_>
   da136:	4641      	mov	r1, r8
   da138:	a80c      	add	r0, sp, #48	; 0x30
   da13a:	f009 feaa 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   da13e:	4601      	mov	r1, r0
   da140:	4668      	mov	r0, sp
   da142:	f009 fe78 	bl	e3e36 <_ZN6String6concatERKS_>
class StringSumHelper : public String
   da146:	a80c      	add	r0, sp, #48	; 0x30
   da148:	f009 fd16 	bl	e3b78 <_ZN6StringD1Ev>
   da14c:	a808      	add	r0, sp, #32
   da14e:	f009 fd13 	bl	e3b78 <_ZN6StringD1Ev>
  for (uint8_t alrm_indx = ALARM_CODE1; alrm_indx < MAIN_GEN_DATA_SIZE; alrm_indx += 2)
   da152:	3402      	adds	r4, #2
   da154:	2c34      	cmp	r4, #52	; 0x34
   da156:	f105 0508 	add.w	r5, r5, #8
   da15a:	d1c0      	bne.n	da0de <_Z15pubGenMainMtrcsh+0xda>
    }      
  }

  gxGenMetricString.concat("\"\n}");
   da15c:	491f      	ldr	r1, [pc, #124]	; (da1dc <_Z15pubGenMainMtrcsh+0x1d8>)
   da15e:	4668      	mov	r0, sp
   da160:	f009 fe6d 	bl	e3e3e <_ZN6String6concatEPKc>

  Log.info(gxGenMetricString);
   da164:	9900      	ldr	r1, [sp, #0]
   da166:	481e      	ldr	r0, [pc, #120]	; (da1e0 <_Z15pubGenMainMtrcsh+0x1dc>)
   da168:	f7ff fca6 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
  saveAndPublishMetrics(gxGenMetricString);
   da16c:	4668      	mov	r0, sp
   da16e:	f003 ff33 	bl	ddfd8 <_Z21saveAndPublishMetricsR6String>

  for (uint8_t i = 0; i < MAIN_GEN_DATA_SIZE; i++)
  { main_gen_data[i] = 0.0f; }
   da172:	2300      	movs	r3, #0
   da174:	3c01      	subs	r4, #1
  for (uint8_t i = 0; i < MAIN_GEN_DATA_SIZE; i++)
   da176:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  { main_gen_data[i] = 0.0f; }
   da17a:	f846 3b04 	str.w	r3, [r6], #4
  for (uint8_t i = 0; i < MAIN_GEN_DATA_SIZE; i++)
   da17e:	d1f9      	bne.n	da174 <_Z15pubGenMainMtrcsh+0x170>
                             "\":\"" + String(Time.now()) + ":";
   da180:	4668      	mov	r0, sp
   da182:	f009 fcf9 	bl	e3b78 <_ZN6StringD1Ev>
  
  return GEN_BASINST;
}
   da186:	2001      	movs	r0, #1
   da188:	b010      	add	sp, #64	; 0x40
   da18a:	ecbd 8b02 	vpop	{d8}
   da18e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    { gxGenMetricString.concat(String(main_gen_data[data_indx], 0) + ":"); }
   da192:	2100      	movs	r1, #0
   da194:	a808      	add	r0, sp, #32
   da196:	f009 fe09 	bl	e3dac <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
   da19a:	a908      	add	r1, sp, #32
   da19c:	a80c      	add	r0, sp, #48	; 0x30
   da19e:	f009 fd81 	bl	e3ca4 <_ZN6StringC1ERKS_>
   da1a2:	4631      	mov	r1, r6
   da1a4:	a80c      	add	r0, sp, #48	; 0x30
   da1a6:	f009 fe74 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   da1aa:	4601      	mov	r1, r0
   da1ac:	4668      	mov	r0, sp
   da1ae:	f009 fe42 	bl	e3e36 <_ZN6String6concatERKS_>
class StringSumHelper : public String
   da1b2:	a80c      	add	r0, sp, #48	; 0x30
   da1b4:	f009 fce0 	bl	e3b78 <_ZN6StringD1Ev>
   da1b8:	a808      	add	r0, sp, #32
   da1ba:	f009 fcdd 	bl	e3b78 <_ZN6StringD1Ev>
   da1be:	e782      	b.n	da0c6 <_Z15pubGenMainMtrcsh+0xc2>
   da1c0:	000e6fcf 	.word	0x000e6fcf
   da1c4:	2003e11c 	.word	0x2003e11c
   da1c8:	ccc0a468 	.word	0xccc0a468
   da1cc:	000e73f5 	.word	0x000e73f5
   da1d0:	ccbebc20 	.word	0xccbebc20
   da1d4:	000e704d 	.word	0x000e704d
   da1d8:	000e7d84 	.word	0x000e7d84
   da1dc:	000e70b3 	.word	0x000e70b3
   da1e0:	2003e61c 	.word	0x2003e61c
   da1e4:	000e6fdf 	.word	0x000e6fdf

000da1e8 <_Z18pubGenBasInstMtrcsh>:

GeneratorDataSet pubGenBasInstMtrcs(uint8_t gen_spot)
{
   da1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   da1ea:	ed2d 8b02 	vpush	{d8}
   da1ee:	b091      	sub	sp, #68	; 0x44
   da1f0:	4604      	mov	r4, r0
	StringSumHelper(const char *p) : String(p) {}
   da1f2:	4938      	ldr	r1, [pc, #224]	; (da2d4 <_Z18pubGenBasInstMtrcsh+0xec>)
   da1f4:	4d38      	ldr	r5, [pc, #224]	; (da2d8 <_Z18pubGenBasInstMtrcsh+0xf0>)
  String gxGenMetricString = "{\n\"v\":\"1\",\n\"gen" + String(gen_spot + ZERO_INDEX_CORRECTION) + 
                             "_basInst\":\n\"" + String(Time.now()) + ",";

  for (uint8_t metric_indx = TOTAL_KWH; metric_indx <= CURR_LAG_LEAD; metric_indx++)
  {
    if ((bas_inst_gen_data[metric_indx] == MB_SENTL_VAL) || 
   da1f6:	ed9f 8a39 	vldr	s16, [pc, #228]	; da2dc <_Z18pubGenBasInstMtrcsh+0xf4>
        (bas_inst_gen_data[metric_indx] == MB_UNAVAIL_VAL))
    { gxGenMetricString.concat(","); }
   da1fa:	4f39      	ldr	r7, [pc, #228]	; (da2e0 <_Z18pubGenBasInstMtrcsh+0xf8>)
    if ((bas_inst_gen_data[metric_indx] == MB_SENTL_VAL) || 
   da1fc:	eddf 8a39 	vldr	s17, [pc, #228]	; da2e4 <_Z18pubGenBasInstMtrcsh+0xfc>
   da200:	a808      	add	r0, sp, #32
   da202:	f009 fd04 	bl	e3c0e <_ZN6StringC1EPKc>
  String gxGenMetricString = "{\n\"v\":\"1\",\n\"gen" + String(gen_spot + ZERO_INDEX_CORRECTION) + 
   da206:	220a      	movs	r2, #10
   da208:	1c61      	adds	r1, r4, #1
   da20a:	a804      	add	r0, sp, #16
   da20c:	f009 fd81 	bl	e3d12 <_ZN6StringC1Eih>
   da210:	a904      	add	r1, sp, #16
   da212:	a808      	add	r0, sp, #32
   da214:	f009 fe31 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
                             "_basInst\":\n\"" + String(Time.now()) + ",";
   da218:	4933      	ldr	r1, [pc, #204]	; (da2e8 <_Z18pubGenBasInstMtrcsh+0x100>)
   da21a:	f009 fe3a 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   da21e:	4604      	mov	r4, r0
   da220:	f009 ffa2 	bl	e4168 <_ZN9TimeClass3nowEv>
   da224:	220a      	movs	r2, #10
   da226:	4601      	mov	r1, r0
   da228:	a80c      	add	r0, sp, #48	; 0x30
   da22a:	f009 fd98 	bl	e3d5e <_ZN6StringC1Elh>
   da22e:	a90c      	add	r1, sp, #48	; 0x30
   da230:	4620      	mov	r0, r4
   da232:	f009 fe22 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
   da236:	492a      	ldr	r1, [pc, #168]	; (da2e0 <_Z18pubGenBasInstMtrcsh+0xf8>)
   da238:	f009 fe2b 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   da23c:	4601      	mov	r1, r0
   da23e:	4668      	mov	r0, sp
   da240:	f009 fd30 	bl	e3ca4 <_ZN6StringC1ERKS_>
   da244:	a80c      	add	r0, sp, #48	; 0x30
   da246:	f009 fc97 	bl	e3b78 <_ZN6StringD1Ev>
  String gxGenMetricString = "{\n\"v\":\"1\",\n\"gen" + String(gen_spot + ZERO_INDEX_CORRECTION) + 
   da24a:	a804      	add	r0, sp, #16
   da24c:	f009 fc94 	bl	e3b78 <_ZN6StringD1Ev>
class StringSumHelper : public String
   da250:	a808      	add	r0, sp, #32
   da252:	f009 fc91 	bl	e3b78 <_ZN6StringD1Ev>
   da256:	462e      	mov	r6, r5
  for (uint8_t metric_indx = TOTAL_KWH; metric_indx <= CURR_LAG_LEAD; metric_indx++)
   da258:	2400      	movs	r4, #0
    if ((bas_inst_gen_data[metric_indx] == MB_SENTL_VAL) || 
   da25a:	ecb6 0a01 	vldmia	r6!, {s0}
   da25e:	eeb4 0a48 	vcmp.f32	s0, s16
   da262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da266:	d004      	beq.n	da272 <_Z18pubGenBasInstMtrcsh+0x8a>
   da268:	eeb4 0a68 	vcmp.f32	s0, s17
   da26c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da270:	d121      	bne.n	da2b6 <_Z18pubGenBasInstMtrcsh+0xce>
    { gxGenMetricString.concat(","); }
   da272:	4639      	mov	r1, r7
   da274:	4668      	mov	r0, sp
   da276:	f009 fde2 	bl	e3e3e <_ZN6String6concatEPKc>
  for (uint8_t metric_indx = TOTAL_KWH; metric_indx <= CURR_LAG_LEAD; metric_indx++)
   da27a:	3401      	adds	r4, #1
   da27c:	b2e4      	uxtb	r4, r4
   da27e:	2c17      	cmp	r4, #23
   da280:	d1eb      	bne.n	da25a <_Z18pubGenBasInstMtrcsh+0x72>
      if (!(metric_indx == CURR_LAG_LEAD))
      { gxGenMetricString.concat(","); }
    }      
  }

  gxGenMetricString.concat("\"\n}");
   da282:	491a      	ldr	r1, [pc, #104]	; (da2ec <_Z18pubGenBasInstMtrcsh+0x104>)
   da284:	4668      	mov	r0, sp
   da286:	f009 fdda 	bl	e3e3e <_ZN6String6concatEPKc>

  Log.info(gxGenMetricString);
   da28a:	9900      	ldr	r1, [sp, #0]
   da28c:	4818      	ldr	r0, [pc, #96]	; (da2f0 <_Z18pubGenBasInstMtrcsh+0x108>)
   da28e:	f7ff fc13 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
  saveAndPublishMetrics(gxGenMetricString);
   da292:	4668      	mov	r0, sp
   da294:	f003 fea0 	bl	ddfd8 <_Z21saveAndPublishMetricsR6String>

  for (uint8_t i = 0; i < BASIC_INST_GEN_DATA_SIZE; i++)
  { bas_inst_gen_data[i] = 0.0f; }
   da298:	2300      	movs	r3, #0
   da29a:	3c01      	subs	r4, #1
  for (uint8_t i = 0; i < BASIC_INST_GEN_DATA_SIZE; i++)
   da29c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  { bas_inst_gen_data[i] = 0.0f; }
   da2a0:	f845 3b04 	str.w	r3, [r5], #4
  for (uint8_t i = 0; i < BASIC_INST_GEN_DATA_SIZE; i++)
   da2a4:	d1f9      	bne.n	da29a <_Z18pubGenBasInstMtrcsh+0xb2>
                             "_basInst\":\n\"" + String(Time.now()) + ",";
   da2a6:	4668      	mov	r0, sp
   da2a8:	f009 fc66 	bl	e3b78 <_ZN6StringD1Ev>
  
  return GEN_DERINST;
}
   da2ac:	2002      	movs	r0, #2
   da2ae:	b011      	add	sp, #68	; 0x44
   da2b0:	ecbd 8b02 	vpop	{d8}
   da2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      gxGenMetricString.concat(String(bas_inst_gen_data[metric_indx], 1));
   da2b6:	2101      	movs	r1, #1
   da2b8:	a80c      	add	r0, sp, #48	; 0x30
   da2ba:	f009 fd77 	bl	e3dac <_ZN6StringC1Efi>
   da2be:	a90c      	add	r1, sp, #48	; 0x30
   da2c0:	4668      	mov	r0, sp
   da2c2:	f009 fdb8 	bl	e3e36 <_ZN6String6concatERKS_>
   da2c6:	a80c      	add	r0, sp, #48	; 0x30
   da2c8:	f009 fc56 	bl	e3b78 <_ZN6StringD1Ev>
      if (!(metric_indx == CURR_LAG_LEAD))
   da2cc:	2c16      	cmp	r4, #22
   da2ce:	d1d0      	bne.n	da272 <_Z18pubGenBasInstMtrcsh+0x8a>
   da2d0:	e7d3      	b.n	da27a <_Z18pubGenBasInstMtrcsh+0x92>
   da2d2:	bf00      	nop
   da2d4:	000e6fcf 	.word	0x000e6fcf
   da2d8:	2003da0c 	.word	0x2003da0c
   da2dc:	ccbebc20 	.word	0xccbebc20
   da2e0:	000e7d84 	.word	0x000e7d84
   da2e4:	ccc0a468 	.word	0xccc0a468
   da2e8:	000e6fe1 	.word	0x000e6fe1
   da2ec:	000e70b3 	.word	0x000e70b3
   da2f0:	2003e61c 	.word	0x2003e61c

000da2f4 <_Z18pubGenDerInstMtrcsh>:

GeneratorDataSet pubGenDerInstMtrcs(uint8_t gen_spot)
{
   da2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   da2f6:	ed2d 8b02 	vpush	{d8}
   da2fa:	b091      	sub	sp, #68	; 0x44
   da2fc:	4604      	mov	r4, r0
	StringSumHelper(const char *p) : String(p) {}
   da2fe:	4938      	ldr	r1, [pc, #224]	; (da3e0 <_Z18pubGenDerInstMtrcsh+0xec>)
   da300:	4d38      	ldr	r5, [pc, #224]	; (da3e4 <_Z18pubGenDerInstMtrcsh+0xf0>)
  String gxGenMetricString = "{\n\"v\":\"1\",\n\"gen" + String(gen_spot + ZERO_INDEX_CORRECTION) + 
                             "_derInst\":\n\"" + String(Time.now()) + ",";
  for (uint8_t metric_indx = TOTAL_WATT; metric_indx <= PERCENT_OF_FULL_POWER; metric_indx++)
  {
    if ((der_inst_gen_data[metric_indx] == MB_SENTL_VAL) || 
   da302:	ed9f 8a39 	vldr	s16, [pc, #228]	; da3e8 <_Z18pubGenDerInstMtrcsh+0xf4>
        (der_inst_gen_data[metric_indx] == MB_UNAVAIL_VAL))
    { gxGenMetricString.concat(","); }
   da306:	4f39      	ldr	r7, [pc, #228]	; (da3ec <_Z18pubGenDerInstMtrcsh+0xf8>)
    if ((der_inst_gen_data[metric_indx] == MB_SENTL_VAL) || 
   da308:	eddf 8a39 	vldr	s17, [pc, #228]	; da3f0 <_Z18pubGenDerInstMtrcsh+0xfc>
   da30c:	a808      	add	r0, sp, #32
   da30e:	f009 fc7e 	bl	e3c0e <_ZN6StringC1EPKc>
  String gxGenMetricString = "{\n\"v\":\"1\",\n\"gen" + String(gen_spot + ZERO_INDEX_CORRECTION) + 
   da312:	220a      	movs	r2, #10
   da314:	1c61      	adds	r1, r4, #1
   da316:	a804      	add	r0, sp, #16
   da318:	f009 fcfb 	bl	e3d12 <_ZN6StringC1Eih>
   da31c:	a904      	add	r1, sp, #16
   da31e:	a808      	add	r0, sp, #32
   da320:	f009 fdab 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
                             "_derInst\":\n\"" + String(Time.now()) + ",";
   da324:	4933      	ldr	r1, [pc, #204]	; (da3f4 <_Z18pubGenDerInstMtrcsh+0x100>)
   da326:	f009 fdb4 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   da32a:	4604      	mov	r4, r0
   da32c:	f009 ff1c 	bl	e4168 <_ZN9TimeClass3nowEv>
   da330:	220a      	movs	r2, #10
   da332:	4601      	mov	r1, r0
   da334:	a80c      	add	r0, sp, #48	; 0x30
   da336:	f009 fd12 	bl	e3d5e <_ZN6StringC1Elh>
   da33a:	a90c      	add	r1, sp, #48	; 0x30
   da33c:	4620      	mov	r0, r4
   da33e:	f009 fd9c 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
   da342:	492a      	ldr	r1, [pc, #168]	; (da3ec <_Z18pubGenDerInstMtrcsh+0xf8>)
   da344:	f009 fda5 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   da348:	4601      	mov	r1, r0
   da34a:	4668      	mov	r0, sp
   da34c:	f009 fcaa 	bl	e3ca4 <_ZN6StringC1ERKS_>
   da350:	a80c      	add	r0, sp, #48	; 0x30
   da352:	f009 fc11 	bl	e3b78 <_ZN6StringD1Ev>
  String gxGenMetricString = "{\n\"v\":\"1\",\n\"gen" + String(gen_spot + ZERO_INDEX_CORRECTION) + 
   da356:	a804      	add	r0, sp, #16
   da358:	f009 fc0e 	bl	e3b78 <_ZN6StringD1Ev>
class StringSumHelper : public String
   da35c:	a808      	add	r0, sp, #32
   da35e:	f009 fc0b 	bl	e3b78 <_ZN6StringD1Ev>
   da362:	462e      	mov	r6, r5
  for (uint8_t metric_indx = TOTAL_WATT; metric_indx <= PERCENT_OF_FULL_POWER; metric_indx++)
   da364:	2400      	movs	r4, #0
    if ((der_inst_gen_data[metric_indx] == MB_SENTL_VAL) || 
   da366:	ecb6 0a01 	vldmia	r6!, {s0}
   da36a:	eeb4 0a48 	vcmp.f32	s0, s16
   da36e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da372:	d004      	beq.n	da37e <_Z18pubGenDerInstMtrcsh+0x8a>
   da374:	eeb4 0a68 	vcmp.f32	s0, s17
   da378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da37c:	d121      	bne.n	da3c2 <_Z18pubGenDerInstMtrcsh+0xce>
    { gxGenMetricString.concat(","); }
   da37e:	4639      	mov	r1, r7
   da380:	4668      	mov	r0, sp
   da382:	f009 fd5c 	bl	e3e3e <_ZN6String6concatEPKc>
  for (uint8_t metric_indx = TOTAL_WATT; metric_indx <= PERCENT_OF_FULL_POWER; metric_indx++)
   da386:	3401      	adds	r4, #1
   da388:	b2e4      	uxtb	r4, r4
   da38a:	2c0e      	cmp	r4, #14
   da38c:	d1eb      	bne.n	da366 <_Z18pubGenDerInstMtrcsh+0x72>
      if (!(metric_indx == PERCENT_OF_FULL_POWER))
      { gxGenMetricString.concat(","); }
    }    
  }
  
  gxGenMetricString.concat("\"\n}");
   da38e:	491a      	ldr	r1, [pc, #104]	; (da3f8 <_Z18pubGenDerInstMtrcsh+0x104>)
   da390:	4668      	mov	r0, sp
   da392:	f009 fd54 	bl	e3e3e <_ZN6String6concatEPKc>

  Log.info(gxGenMetricString);
   da396:	9900      	ldr	r1, [sp, #0]
   da398:	4818      	ldr	r0, [pc, #96]	; (da3fc <_Z18pubGenDerInstMtrcsh+0x108>)
   da39a:	f7ff fb8d 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
  saveAndPublishMetrics(gxGenMetricString);
   da39e:	4668      	mov	r0, sp
   da3a0:	f003 fe1a 	bl	ddfd8 <_Z21saveAndPublishMetricsR6String>

  for (uint8_t i = 0; i < DERIV_INST_GEN_DATA_SIZE; i++)
  { der_inst_gen_data[i] = 0.0f; }
   da3a4:	2300      	movs	r3, #0
   da3a6:	3c01      	subs	r4, #1
  for (uint8_t i = 0; i < DERIV_INST_GEN_DATA_SIZE; i++)
   da3a8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  { der_inst_gen_data[i] = 0.0f; }
   da3ac:	f845 3b04 	str.w	r3, [r5], #4
  for (uint8_t i = 0; i < DERIV_INST_GEN_DATA_SIZE; i++)
   da3b0:	d1f9      	bne.n	da3a6 <_Z18pubGenDerInstMtrcsh+0xb2>
                             "_derInst\":\n\"" + String(Time.now()) + ",";
   da3b2:	4668      	mov	r0, sp
   da3b4:	f009 fbe0 	bl	e3b78 <_ZN6StringD1Ev>
  
  return GEN_MAIN;
}
   da3b8:	4620      	mov	r0, r4
   da3ba:	b011      	add	sp, #68	; 0x44
   da3bc:	ecbd 8b02 	vpop	{d8}
   da3c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      gxGenMetricString.concat(String(der_inst_gen_data[metric_indx], 1));
   da3c2:	2101      	movs	r1, #1
   da3c4:	a80c      	add	r0, sp, #48	; 0x30
   da3c6:	f009 fcf1 	bl	e3dac <_ZN6StringC1Efi>
   da3ca:	a90c      	add	r1, sp, #48	; 0x30
   da3cc:	4668      	mov	r0, sp
   da3ce:	f009 fd32 	bl	e3e36 <_ZN6String6concatERKS_>
   da3d2:	a80c      	add	r0, sp, #48	; 0x30
   da3d4:	f009 fbd0 	bl	e3b78 <_ZN6StringD1Ev>
      if (!(metric_indx == PERCENT_OF_FULL_POWER))
   da3d8:	2c0d      	cmp	r4, #13
   da3da:	d1d0      	bne.n	da37e <_Z18pubGenDerInstMtrcsh+0x8a>
   da3dc:	e7d3      	b.n	da386 <_Z18pubGenDerInstMtrcsh+0x92>
   da3de:	bf00      	nop
   da3e0:	000e6fcf 	.word	0x000e6fcf
   da3e4:	2003daa8 	.word	0x2003daa8
   da3e8:	ccbebc20 	.word	0xccbebc20
   da3ec:	000e7d84 	.word	0x000e7d84
   da3f0:	ccc0a468 	.word	0xccc0a468
   da3f4:	000e6fee 	.word	0x000e6fee
   da3f8:	000e70b3 	.word	0x000e70b3
   da3fc:	2003e61c 	.word	0x2003e61c

000da400 <_Z17publishGenMetricsh>:
{
   da400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (gxGen[gen_unit].derInstAvailable() == false)
   da402:	4b17      	ldr	r3, [pc, #92]	; (da460 <_Z17publishGenMetricsh+0x60>)
   da404:	27e8      	movs	r7, #232	; 0xe8
{
   da406:	4606      	mov	r6, r0
      if (gxGen[gen_unit].derInstAvailable() == false)
   da408:	fb00 3707 	mla	r7, r0, r7, r3
      gen_metric_group = pubGenMainMtrcs(gen_unit);
   da40c:	4630      	mov	r0, r6
   da40e:	f7ff fdf9 	bl	da004 <_Z15pubGenMainMtrcsh>
   da412:	4604      	mov	r4, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   da414:	f006 fc86 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
      pubgen_metrics_interval = millis() + GEN_METRICS_PUBLISH_INTERVAL; 
   da418:	f200 454c 	addw	r5, r0, #1100	; 0x44c
    if ((gen_metric_group == GEN_BASINST) && (millis() > pubgen_metrics_interval))
   da41c:	2c01      	cmp	r4, #1
   da41e:	d10f      	bne.n	da440 <_Z17publishGenMetricsh+0x40>
   da420:	f006 fc80 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
   da424:	42a8      	cmp	r0, r5
   da426:	d9fb      	bls.n	da420 <_Z17publishGenMetricsh+0x20>
      gen_metric_group = pubGenBasInstMtrcs(gen_unit);
   da428:	4630      	mov	r0, r6
   da42a:	f7ff fedd 	bl	da1e8 <_Z18pubGenBasInstMtrcsh>
   da42e:	4604      	mov	r4, r0
      if (gxGen[gen_unit].derInstAvailable() == false)
   da430:	4638      	mov	r0, r7
   da432:	f002 fdf9 	bl	dd028 <_ZN11GXGenerator16derInstAvailableEv>
   da436:	b188      	cbz	r0, da45c <_Z17publishGenMetricsh+0x5c>
   da438:	f006 fc74 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
      pubgen_metrics_interval = millis() + GEN_METRICS_PUBLISH_INTERVAL; 
   da43c:	f200 454c 	addw	r5, r0, #1100	; 0x44c
    if ((gen_metric_group == GEN_DERINST) && (millis() > pubgen_metrics_interval))
   da440:	2c02      	cmp	r4, #2
   da442:	d108      	bne.n	da456 <_Z17publishGenMetricsh+0x56>
   da444:	f006 fc6e 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
   da448:	42a8      	cmp	r0, r5
   da44a:	d9fb      	bls.n	da444 <_Z17publishGenMetricsh+0x44>
      gen_metric_group = pubGenDerInstMtrcs(gen_unit);
   da44c:	4630      	mov	r0, r6
}
   da44e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      gen_metric_group = pubGenDerInstMtrcs(gen_unit);
   da452:	f7ff bf4f 	b.w	da2f4 <_Z18pubGenDerInstMtrcsh>
    if (gen_metric_group == GEN_MAIN)
   da456:	2c00      	cmp	r4, #0
   da458:	d1e0      	bne.n	da41c <_Z17publishGenMetricsh+0x1c>
   da45a:	e7d7      	b.n	da40c <_Z17publishGenMetricsh+0xc>
}
   da45c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   da45e:	bf00      	nop
   da460:	2003dbac 	.word	0x2003dbac

000da464 <_Z19pubGridBasInstMtrcsv>:

GridDataSet pubGridBasInstMtrcs()
{
   da464:	b5f0      	push	{r4, r5, r6, r7, lr}
   da466:	ed2d 8b02 	vpush	{d8}
   da46a:	b091      	sub	sp, #68	; 0x44
	StringSumHelper(const char *p) : String(p) {}
   da46c:	4934      	ldr	r1, [pc, #208]	; (da540 <_Z19pubGridBasInstMtrcsv+0xdc>)
   da46e:	4d35      	ldr	r5, [pc, #212]	; (da544 <_Z19pubGridBasInstMtrcsv+0xe0>)
  String gxGridMetricString = "{\"v\":\"1\",\"s\":" + String(gridmetrics_active) + 
                              ",\"grid_basInst\":\"" + String(Time.now()) + ",";
  
  for(uint8_t metrc_indx = GRID_ACCUM_KWH; metrc_indx <= GRID_L3_WATT; metrc_indx++)
  {
    if(bas_inst_grid_data[metrc_indx] == MB_SENTL_VAL)
   da470:	ed9f 8a35 	vldr	s16, [pc, #212]	; da548 <_Z19pubGridBasInstMtrcsv+0xe4>
    { gxGridMetricString.concat(","); }
   da474:	4f35      	ldr	r7, [pc, #212]	; (da54c <_Z19pubGridBasInstMtrcsv+0xe8>)
   da476:	a808      	add	r0, sp, #32
   da478:	f009 fbc9 	bl	e3c0e <_ZN6StringC1EPKc>
  String gxGridMetricString = "{\"v\":\"1\",\"s\":" + String(gridmetrics_active) + 
   da47c:	4b34      	ldr	r3, [pc, #208]	; (da550 <_Z19pubGridBasInstMtrcsv+0xec>)
   da47e:	220a      	movs	r2, #10
   da480:	7819      	ldrb	r1, [r3, #0]
   da482:	a804      	add	r0, sp, #16
   da484:	f009 fc33 	bl	e3cee <_ZN6StringC1Ehh>
   da488:	a904      	add	r1, sp, #16
   da48a:	a808      	add	r0, sp, #32
   da48c:	f009 fcf5 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
                              ",\"grid_basInst\":\"" + String(Time.now()) + ",";
   da490:	4930      	ldr	r1, [pc, #192]	; (da554 <_Z19pubGridBasInstMtrcsv+0xf0>)
   da492:	f009 fcfe 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   da496:	4604      	mov	r4, r0
   da498:	f009 fe66 	bl	e4168 <_ZN9TimeClass3nowEv>
   da49c:	220a      	movs	r2, #10
   da49e:	4601      	mov	r1, r0
   da4a0:	a80c      	add	r0, sp, #48	; 0x30
   da4a2:	f009 fc5c 	bl	e3d5e <_ZN6StringC1Elh>
   da4a6:	a90c      	add	r1, sp, #48	; 0x30
   da4a8:	4620      	mov	r0, r4
   da4aa:	f009 fce6 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
   da4ae:	4927      	ldr	r1, [pc, #156]	; (da54c <_Z19pubGridBasInstMtrcsv+0xe8>)
   da4b0:	f009 fcef 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   da4b4:	4601      	mov	r1, r0
   da4b6:	4668      	mov	r0, sp
   da4b8:	f009 fbf4 	bl	e3ca4 <_ZN6StringC1ERKS_>
   da4bc:	a80c      	add	r0, sp, #48	; 0x30
   da4be:	f009 fb5b 	bl	e3b78 <_ZN6StringD1Ev>
  String gxGridMetricString = "{\"v\":\"1\",\"s\":" + String(gridmetrics_active) + 
   da4c2:	a804      	add	r0, sp, #16
   da4c4:	f009 fb58 	bl	e3b78 <_ZN6StringD1Ev>
class StringSumHelper : public String
   da4c8:	a808      	add	r0, sp, #32
   da4ca:	f009 fb55 	bl	e3b78 <_ZN6StringD1Ev>
   da4ce:	462e      	mov	r6, r5
  for(uint8_t metrc_indx = GRID_ACCUM_KWH; metrc_indx <= GRID_L3_WATT; metrc_indx++)
   da4d0:	2400      	movs	r4, #0
    if(bas_inst_grid_data[metrc_indx] == MB_SENTL_VAL)
   da4d2:	ecb6 0a01 	vldmia	r6!, {s0}
   da4d6:	eeb4 0a48 	vcmp.f32	s0, s16
   da4da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da4de:	d121      	bne.n	da524 <_Z19pubGridBasInstMtrcsv+0xc0>
    { gxGridMetricString.concat(","); }
   da4e0:	4639      	mov	r1, r7
   da4e2:	4668      	mov	r0, sp
   da4e4:	f009 fcab 	bl	e3e3e <_ZN6String6concatEPKc>
  for(uint8_t metrc_indx = GRID_ACCUM_KWH; metrc_indx <= GRID_L3_WATT; metrc_indx++)
   da4e8:	3401      	adds	r4, #1
   da4ea:	b2e4      	uxtb	r4, r4
   da4ec:	2c10      	cmp	r4, #16
   da4ee:	d1f0      	bne.n	da4d2 <_Z19pubGridBasInstMtrcsv+0x6e>
      if(!(metrc_indx == GRID_L3_WATT))
      { gxGridMetricString.concat(","); }
    }
  }

  gxGridMetricString.concat("\"}");
   da4f0:	4919      	ldr	r1, [pc, #100]	; (da558 <_Z19pubGridBasInstMtrcsv+0xf4>)
   da4f2:	4668      	mov	r0, sp
   da4f4:	f009 fca3 	bl	e3e3e <_ZN6String6concatEPKc>

  Log.info(gxGridMetricString); 
   da4f8:	9900      	ldr	r1, [sp, #0]
   da4fa:	4818      	ldr	r0, [pc, #96]	; (da55c <_Z19pubGridBasInstMtrcsv+0xf8>)
   da4fc:	f7ff fadc 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
  saveAndPublishMetrics(gxGridMetricString);
   da500:	4668      	mov	r0, sp
   da502:	f003 fd69 	bl	ddfd8 <_Z21saveAndPublishMetricsR6String>
  
  for(uint8_t i = GRID_DONE; i < BASINST_GRID_DATA_SIZE; i++)
  { bas_inst_grid_data[i] = 0.0f; }
   da506:	2300      	movs	r3, #0
   da508:	3c01      	subs	r4, #1
  for(uint8_t i = GRID_DONE; i < BASINST_GRID_DATA_SIZE; i++)
   da50a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  { bas_inst_grid_data[i] = 0.0f; }
   da50e:	f845 3b04 	str.w	r3, [r5], #4
  for(uint8_t i = GRID_DONE; i < BASINST_GRID_DATA_SIZE; i++)
   da512:	d1f9      	bne.n	da508 <_Z19pubGridBasInstMtrcsv+0xa4>
                              ",\"grid_basInst\":\"" + String(Time.now()) + ",";
   da514:	4668      	mov	r0, sp
   da516:	f009 fb2f 	bl	e3b78 <_ZN6StringD1Ev>

  return GRID_DER_INST;
}
   da51a:	2002      	movs	r0, #2
   da51c:	b011      	add	sp, #68	; 0x44
   da51e:	ecbd 8b02 	vpop	{d8}
   da522:	bdf0      	pop	{r4, r5, r6, r7, pc}
      gxGridMetricString.concat(String(bas_inst_grid_data[metrc_indx], 2));
   da524:	2102      	movs	r1, #2
   da526:	a80c      	add	r0, sp, #48	; 0x30
   da528:	f009 fc40 	bl	e3dac <_ZN6StringC1Efi>
   da52c:	a90c      	add	r1, sp, #48	; 0x30
   da52e:	4668      	mov	r0, sp
   da530:	f009 fc81 	bl	e3e36 <_ZN6String6concatERKS_>
   da534:	a80c      	add	r0, sp, #48	; 0x30
   da536:	f009 fb1f 	bl	e3b78 <_ZN6StringD1Ev>
      if(!(metrc_indx == GRID_L3_WATT))
   da53a:	2c0f      	cmp	r4, #15
   da53c:	d1d0      	bne.n	da4e0 <_Z19pubGridBasInstMtrcsv+0x7c>
   da53e:	e7d3      	b.n	da4e8 <_Z19pubGridBasInstMtrcsv+0x84>
   da540:	000e6ffb 	.word	0x000e6ffb
   da544:	2003da68 	.word	0x2003da68
   da548:	ccbebc20 	.word	0xccbebc20
   da54c:	000e7d84 	.word	0x000e7d84
   da550:	2003e45c 	.word	0x2003e45c
   da554:	000e7009 	.word	0x000e7009
   da558:	000e71a2 	.word	0x000e71a2
   da55c:	2003e61c 	.word	0x2003e61c

000da560 <_Z19pubGridDerInstMtrcsv>:

GridDataSet pubGridDerInstMtrcs()
{
   da560:	b5f0      	push	{r4, r5, r6, r7, lr}
   da562:	ed2d 8b02 	vpush	{d8}
   da566:	b091      	sub	sp, #68	; 0x44
	StringSumHelper(const char *p) : String(p) {}
   da568:	4934      	ldr	r1, [pc, #208]	; (da63c <_Z19pubGridDerInstMtrcsv+0xdc>)
   da56a:	4d35      	ldr	r5, [pc, #212]	; (da640 <_Z19pubGridDerInstMtrcsv+0xe0>)
  String gxGridMetricString = "{\"v\":\"1\",\"s\":" + String(gridmetrics_active) + 
                              ",\"grid_DerInst\":\"" + String(Time.now()) + ",";
  
  for(uint8_t metrc_indx = TOTAL_GRID_KW; metrc_indx <= PERCENT_OF_GRID_POWER; metrc_indx++)
  {
    if(der_inst_grid_data[metrc_indx] == MB_SENTL_VAL)
   da56c:	ed9f 8a35 	vldr	s16, [pc, #212]	; da644 <_Z19pubGridDerInstMtrcsv+0xe4>
    { gxGridMetricString.concat(","); }
   da570:	4f35      	ldr	r7, [pc, #212]	; (da648 <_Z19pubGridDerInstMtrcsv+0xe8>)
   da572:	a808      	add	r0, sp, #32
   da574:	f009 fb4b 	bl	e3c0e <_ZN6StringC1EPKc>
  String gxGridMetricString = "{\"v\":\"1\",\"s\":" + String(gridmetrics_active) + 
   da578:	4b34      	ldr	r3, [pc, #208]	; (da64c <_Z19pubGridDerInstMtrcsv+0xec>)
   da57a:	220a      	movs	r2, #10
   da57c:	7819      	ldrb	r1, [r3, #0]
   da57e:	a804      	add	r0, sp, #16
   da580:	f009 fbb5 	bl	e3cee <_ZN6StringC1Ehh>
   da584:	a904      	add	r1, sp, #16
   da586:	a808      	add	r0, sp, #32
   da588:	f009 fc77 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
                              ",\"grid_DerInst\":\"" + String(Time.now()) + ",";
   da58c:	4930      	ldr	r1, [pc, #192]	; (da650 <_Z19pubGridDerInstMtrcsv+0xf0>)
   da58e:	f009 fc80 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   da592:	4604      	mov	r4, r0
   da594:	f009 fde8 	bl	e4168 <_ZN9TimeClass3nowEv>
   da598:	220a      	movs	r2, #10
   da59a:	4601      	mov	r1, r0
   da59c:	a80c      	add	r0, sp, #48	; 0x30
   da59e:	f009 fbde 	bl	e3d5e <_ZN6StringC1Elh>
   da5a2:	a90c      	add	r1, sp, #48	; 0x30
   da5a4:	4620      	mov	r0, r4
   da5a6:	f009 fc68 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
   da5aa:	4927      	ldr	r1, [pc, #156]	; (da648 <_Z19pubGridDerInstMtrcsv+0xe8>)
   da5ac:	f009 fc71 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   da5b0:	4601      	mov	r1, r0
   da5b2:	4668      	mov	r0, sp
   da5b4:	f009 fb76 	bl	e3ca4 <_ZN6StringC1ERKS_>
   da5b8:	a80c      	add	r0, sp, #48	; 0x30
   da5ba:	f009 fadd 	bl	e3b78 <_ZN6StringD1Ev>
  String gxGridMetricString = "{\"v\":\"1\",\"s\":" + String(gridmetrics_active) + 
   da5be:	a804      	add	r0, sp, #16
   da5c0:	f009 fada 	bl	e3b78 <_ZN6StringD1Ev>
class StringSumHelper : public String
   da5c4:	a808      	add	r0, sp, #32
   da5c6:	f009 fad7 	bl	e3b78 <_ZN6StringD1Ev>
   da5ca:	462e      	mov	r6, r5
  for(uint8_t metrc_indx = TOTAL_GRID_KW; metrc_indx <= PERCENT_OF_GRID_POWER; metrc_indx++)
   da5cc:	2400      	movs	r4, #0
    if(der_inst_grid_data[metrc_indx] == MB_SENTL_VAL)
   da5ce:	ecb6 0a01 	vldmia	r6!, {s0}
   da5d2:	eeb4 0a48 	vcmp.f32	s0, s16
   da5d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da5da:	d121      	bne.n	da620 <_Z19pubGridDerInstMtrcsv+0xc0>
    { gxGridMetricString.concat(","); }
   da5dc:	4639      	mov	r1, r7
   da5de:	4668      	mov	r0, sp
   da5e0:	f009 fc2d 	bl	e3e3e <_ZN6String6concatEPKc>
  for(uint8_t metrc_indx = TOTAL_GRID_KW; metrc_indx <= PERCENT_OF_GRID_POWER; metrc_indx++)
   da5e4:	3401      	adds	r4, #1
   da5e6:	b2e4      	uxtb	r4, r4
   da5e8:	2c0e      	cmp	r4, #14
   da5ea:	d1f0      	bne.n	da5ce <_Z19pubGridDerInstMtrcsv+0x6e>
      if(!(metrc_indx == PERCENT_OF_GRID_POWER))
      { gxGridMetricString.concat(","); }
    }
  }

  gxGridMetricString.concat("\"}");
   da5ec:	4919      	ldr	r1, [pc, #100]	; (da654 <_Z19pubGridDerInstMtrcsv+0xf4>)
   da5ee:	4668      	mov	r0, sp
   da5f0:	f009 fc25 	bl	e3e3e <_ZN6String6concatEPKc>

  Log.info(gxGridMetricString); 
   da5f4:	9900      	ldr	r1, [sp, #0]
   da5f6:	4818      	ldr	r0, [pc, #96]	; (da658 <_Z19pubGridDerInstMtrcsv+0xf8>)
   da5f8:	f7ff fa5e 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
  saveAndPublishMetrics(gxGridMetricString);
   da5fc:	4668      	mov	r0, sp
   da5fe:	f003 fceb 	bl	ddfd8 <_Z21saveAndPublishMetricsR6String>

  for(uint8_t i = GRID_DONE; i < DERINST_GRID_DATA_SIZE; i++)
  { der_inst_grid_data[i] = 0.0f; }
   da602:	2300      	movs	r3, #0
   da604:	3c01      	subs	r4, #1
  for(uint8_t i = GRID_DONE; i < DERINST_GRID_DATA_SIZE; i++)
   da606:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  { der_inst_grid_data[i] = 0.0f; }
   da60a:	f845 3b04 	str.w	r3, [r5], #4
  for(uint8_t i = GRID_DONE; i < DERINST_GRID_DATA_SIZE; i++)
   da60e:	d1f9      	bne.n	da604 <_Z19pubGridDerInstMtrcsv+0xa4>
                              ",\"grid_DerInst\":\"" + String(Time.now()) + ",";
   da610:	4668      	mov	r0, sp
   da612:	f009 fab1 	bl	e3b78 <_ZN6StringD1Ev>

  return GRID_BAS_INST;
}
   da616:	2001      	movs	r0, #1
   da618:	b011      	add	sp, #68	; 0x44
   da61a:	ecbd 8b02 	vpop	{d8}
   da61e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      gxGridMetricString.concat(String(der_inst_grid_data[metrc_indx], 2));
   da620:	2102      	movs	r1, #2
   da622:	a80c      	add	r0, sp, #48	; 0x30
   da624:	f009 fbc2 	bl	e3dac <_ZN6StringC1Efi>
   da628:	a90c      	add	r1, sp, #48	; 0x30
   da62a:	4668      	mov	r0, sp
   da62c:	f009 fc03 	bl	e3e36 <_ZN6String6concatERKS_>
   da630:	a80c      	add	r0, sp, #48	; 0x30
   da632:	f009 faa1 	bl	e3b78 <_ZN6StringD1Ev>
      if(!(metrc_indx == PERCENT_OF_GRID_POWER))
   da636:	2c0d      	cmp	r4, #13
   da638:	d1d0      	bne.n	da5dc <_Z19pubGridDerInstMtrcsv+0x7c>
   da63a:	e7d3      	b.n	da5e4 <_Z19pubGridDerInstMtrcsv+0x84>
   da63c:	000e6ffb 	.word	0x000e6ffb
   da640:	2003dae0 	.word	0x2003dae0
   da644:	ccbebc20 	.word	0xccbebc20
   da648:	000e7d84 	.word	0x000e7d84
   da64c:	2003e45c 	.word	0x2003e45c
   da650:	000e701b 	.word	0x000e701b
   da654:	000e71a2 	.word	0x000e71a2
   da658:	2003e61c 	.word	0x2003e61c

000da65c <_Z18publishGridMetricsv>:
{
   da65c:	b538      	push	{r3, r4, r5, lr}
      grid_metrc_grp = pubGridBasInstMtrcs();
   da65e:	f7ff ff01 	bl	da464 <_Z19pubGridBasInstMtrcsv>
   da662:	4604      	mov	r4, r0
   da664:	f006 fb5e 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
      pubgrid_metrics_interval = millis() + GEN_METRICS_PUBLISH_INTERVAL;
   da668:	f200 454c 	addw	r5, r0, #1100	; 0x44c
   da66c:	e001      	b.n	da672 <_Z18publishGridMetricsv+0x16>
    if(grid_metrc_grp == GRID_BAS_INST)
   da66e:	2c01      	cmp	r4, #1
   da670:	d0f5      	beq.n	da65e <_Z18publishGridMetricsv+0x2>
    if((grid_metrc_grp == GRID_DER_INST) && (millis() > pubgrid_metrics_interval))
   da672:	2c02      	cmp	r4, #2
   da674:	d1fb      	bne.n	da66e <_Z18publishGridMetricsv+0x12>
   da676:	f006 fb55 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
   da67a:	4285      	cmp	r5, r0
   da67c:	d2fb      	bcs.n	da676 <_Z18publishGridMetricsv+0x1a>
}
   da67e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      grid_metrc_grp = pubGridDerInstMtrcs();
   da682:	f7ff bf6d 	b.w	da560 <_Z19pubGridDerInstMtrcsv>

000da686 <_Z17saveStateOfRelays17GenControlCommanda>:
  }
  return gridmetrics_active;
}

void saveStateOfRelays(GenControlCommand ctrlCommand, int8_t relay_name)
{
   da686:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t old_rly_states = RELAY_1_2_OFF;
   da688:	2300      	movs	r3, #0
   da68a:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t new_rly_states = RELAY_1_2_OFF;
   da68e:	f88d 3007 	strb.w	r3, [sp, #7]
{
   da692:	460c      	mov	r4, r1
   da694:	4605      	mov	r5, r0

  EEPROM.get(EEPROM_ADDR_RELAYS_STATE, old_rly_states);
   da696:	f00a f85b 	bl	e4750 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   da69a:	2201      	movs	r2, #1
   da69c:	f10d 0106 	add.w	r1, sp, #6
   da6a0:	f44f 701f 	mov.w	r0, #636	; 0x27c
   da6a4:	f006 fb4e 	bl	e0d44 <HAL_EEPROM_Get>

  switch (old_rly_states)
   da6a8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   da6ac:	2b03      	cmp	r3, #3
   da6ae:	d809      	bhi.n	da6c4 <_Z17saveStateOfRelays17GenControlCommanda+0x3e>
   da6b0:	e8df f003 	tbb	[pc, r3]
   da6b4:	18131302 	.word	0x18131302
  {
    /* old states: Both relays are OFF. If we triggered relay-1, then relay-1 would come ON while relay-2 stays OFF.
       If we triggered relay-2, then relay-2 would come ON while relay-1 stays OFF */ 
    case RELAY_1_2_OFF:
    {
      new_rly_states = (relay_name == GX_RELAY_1) ? RELAY_1_ON : RELAY_2_ON;
   da6b8:	2c01      	cmp	r4, #1
   da6ba:	bf0c      	ite	eq
   da6bc:	2301      	moveq	r3, #1
   da6be:	2302      	movne	r3, #2

    /* old states: Both relays are ON. If we triggered relay-1, then relay-1 would go OFF while relay-2 stays ON.
       If we triggered relay-2, then relay-2 would go OFF while relay-1 stays ON */ 
    case RELAY_1_2_ON:
    {
      new_rly_states = (relay_name == GX_RELAY_1) ? RELAY_2_ON : RELAY_1_ON;
   da6c0:	f88d 3007 	strb.w	r3, [sp, #7]
      break;
    }
  }

  EEPROM.put(EEPROM_ADDR_RELAYS_STATE, new_rly_states); 
   da6c4:	f00a f844 	bl	e4750 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   da6c8:	2201      	movs	r2, #1
   da6ca:	f10d 0107 	add.w	r1, sp, #7
   da6ce:	f44f 701f 	mov.w	r0, #636	; 0x27c
   da6d2:	f006 fb3f 	bl	e0d54 <HAL_EEPROM_Put>
}
   da6d6:	b003      	add	sp, #12
   da6d8:	bd30      	pop	{r4, r5, pc}
      new_rly_states = (ctrlCommand == RUN_GEN) ? RELAY_1_2_ON : RELAY_1_2_OFF;
   da6da:	2d01      	cmp	r5, #1
   da6dc:	bf0c      	ite	eq
   da6de:	2303      	moveq	r3, #3
   da6e0:	2300      	movne	r3, #0
   da6e2:	e7ed      	b.n	da6c0 <_Z17saveStateOfRelays17GenControlCommanda+0x3a>
      new_rly_states = (relay_name == GX_RELAY_1) ? RELAY_2_ON : RELAY_1_ON;
   da6e4:	2c01      	cmp	r4, #1
   da6e6:	bf0c      	ite	eq
   da6e8:	2302      	moveq	r3, #2
   da6ea:	2301      	movne	r3, #1
   da6ec:	e7e8      	b.n	da6c0 <_Z17saveStateOfRelays17GenControlCommanda+0x3a>

000da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   da6ee:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   da6f0:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   da6f2:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   da6f4:	b17c      	cbz	r4, da716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   da6f6:	6863      	ldr	r3, [r4, #4]
   da6f8:	3b01      	subs	r3, #1
   da6fa:	6063      	str	r3, [r4, #4]
   da6fc:	b95b      	cbnz	r3, da716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   da6fe:	6823      	ldr	r3, [r4, #0]
   da700:	4620      	mov	r0, r4
   da702:	689b      	ldr	r3, [r3, #8]
   da704:	4798      	blx	r3
          if (--_M_weak_count == 0)
   da706:	68a3      	ldr	r3, [r4, #8]
   da708:	3b01      	subs	r3, #1
   da70a:	60a3      	str	r3, [r4, #8]
   da70c:	b91b      	cbnz	r3, da716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   da70e:	6823      	ldr	r3, [r4, #0]
   da710:	4620      	mov	r0, r4
   da712:	68db      	ldr	r3, [r3, #12]
   da714:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   da716:	4628      	mov	r0, r5
   da718:	bd38      	pop	{r3, r4, r5, pc}
	...

000da71c <_Z16runGridDataPollsv>:
{
   da71c:	b570      	push	{r4, r5, r6, lr}
  if((gridmetrics_active > GRID_MTRCS_GEN) || (gxgen_config_state == false)) 
   da71e:	4b4c      	ldr	r3, [pc, #304]	; (da850 <_Z16runGridDataPollsv+0x134>)
   da720:	781b      	ldrb	r3, [r3, #0]
   da722:	2b01      	cmp	r3, #1
{
   da724:	b092      	sub	sp, #72	; 0x48
  if((gridmetrics_active > GRID_MTRCS_GEN) || (gxgen_config_state == false)) 
   da726:	d835      	bhi.n	da794 <_Z16runGridDataPollsv+0x78>
   da728:	4b4a      	ldr	r3, [pc, #296]	; (da854 <_Z16runGridDataPollsv+0x138>)
   da72a:	781b      	ldrb	r3, [r3, #0]
   da72c:	2b00      	cmp	r3, #0
   da72e:	d031      	beq.n	da794 <_Z16runGridDataPollsv+0x78>
  commLed.led_mode = LED_SOLID;
   da730:	4d49      	ldr	r5, [pc, #292]	; (da858 <_Z16runGridDataPollsv+0x13c>)
        total_query = gxGen[gen_unit].getGridDerInstQueryNum();
   da732:	4e4a      	ldr	r6, [pc, #296]	; (da85c <_Z16runGridDataPollsv+0x140>)
  commLed.ledRoutine();
   da734:	4628      	mov	r0, r5
  commLed.led_mode = LED_SOLID;
   da736:	2401      	movs	r4, #1
   da738:	722c      	strb	r4, [r5, #8]
  commLed.ledRoutine();
   da73a:	f002 fd23 	bl	dd184 <_ZN3LED10ledRoutineEv>
  uint8_t baud_code = gxGen[gen_unit].getBaudIndex();
   da73e:	4847      	ldr	r0, [pc, #284]	; (da85c <_Z16runGridDataPollsv+0x140>)
   da740:	f002 fc7c 	bl	dd03c <_ZN11GXGenerator12getBaudIndexEv>
  uint32_t gen_baud_rate = GEN_BAUD_RATE[baud_code];
   da744:	4b46      	ldr	r3, [pc, #280]	; (da860 <_Z16runGridDataPollsv+0x144>)
  gxGen[gen_unit].begin(gen_baud_rate);
   da746:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   da74a:	4844      	ldr	r0, [pc, #272]	; (da85c <_Z16runGridDataPollsv+0x140>)
   da74c:	f005 fa18 	bl	dfb80 <_ZN6Modbus5beginEl>
  gxGen[gen_unit].setTimeOut(MODBUS_ROLL_OVER_TIME);
   da750:	4842      	ldr	r0, [pc, #264]	; (da85c <_Z16runGridDataPollsv+0x140>)
   da752:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
   da756:	f005 f8b9 	bl	df8cc <_ZN6Modbus10setTimeOutEt>
  delay(25);
   da75a:	2019      	movs	r0, #25
   da75c:	f006 fe97 	bl	e148e <delay>
    switch (grid_metrc_grp)
   da760:	2c03      	cmp	r4, #3
   da762:	d8fd      	bhi.n	da760 <_Z16runGridDataPollsv+0x44>
   da764:	e8df f004 	tbb	[pc, r4]
   da768:	2a221802 	.word	0x2a221802
        commLed.led_mode = LED_OFF;
   da76c:	2300      	movs	r3, #0
        commLed.ledRoutine();
   da76e:	483a      	ldr	r0, [pc, #232]	; (da858 <_Z16runGridDataPollsv+0x13c>)
        commLed.led_mode = LED_OFF;
   da770:	722b      	strb	r3, [r5, #8]
        commLed.ledRoutine();
   da772:	f002 fd07 	bl	dd184 <_ZN3LED10ledRoutineEv>
        publishGridMetrics();
   da776:	f7ff ff71 	bl	da65c <_Z18publishGridMetricsv>
  memset(extracted_modbus_databuff, 0, sizeof(extracted_modbus_databuff));
   da77a:	2264      	movs	r2, #100	; 0x64
   da77c:	2100      	movs	r1, #0
   da77e:	4839      	ldr	r0, [pc, #228]	; (da864 <_Z16runGridDataPollsv+0x148>)
   da780:	f00a ff96 	bl	e56b0 <memset>
  memset(gen_alrm_regval, 0, sizeof(gen_alrm_regval));
   da784:	2230      	movs	r2, #48	; 0x30
   da786:	4838      	ldr	r0, [pc, #224]	; (da868 <_Z16runGridDataPollsv+0x14c>)
   da788:	2100      	movs	r1, #0
   da78a:	f00a ff91 	bl	e56b0 <memset>
  poll_griddata_flag = false;
   da78e:	4b37      	ldr	r3, [pc, #220]	; (da86c <_Z16runGridDataPollsv+0x150>)
   da790:	2200      	movs	r2, #0
   da792:	701a      	strb	r2, [r3, #0]
}
   da794:	b012      	add	sp, #72	; 0x48
   da796:	bd70      	pop	{r4, r5, r6, pc}
        total_query = gxGen[gen_unit].getGridBasInstQueryNum();
   da798:	4630      	mov	r0, r6
   da79a:	f002 f9b1 	bl	dcb00 <_ZN11GXGenerator22getGridBasInstQueryNumEv>
        grid_metrc_grp = readGridBasInstMetrcFromGen(total_query);
   da79e:	f7ff fb2d 	bl	d9dfc <_Z27readGridBasInstMetrcFromGenh>
   da7a2:	4604      	mov	r4, r0
        formatGridDataFromGen(GRID_BAS_INST);
   da7a4:	2001      	movs	r0, #1
        formatGridDataFromGen(GRID_DER_INST);
   da7a6:	f7ff fc1b 	bl	d9fe0 <_Z21formatGridDataFromGen11GridDataSet>
        break;
   da7aa:	e7d9      	b.n	da760 <_Z16runGridDataPollsv+0x44>
        total_query = gxGen[gen_unit].getGridDerInstQueryNum();
   da7ac:	4630      	mov	r0, r6
   da7ae:	f002 f9ae 	bl	dcb0e <_ZN11GXGenerator22getGridDerInstQueryNumEv>
        grid_metrc_grp = readGridDerInstMetrcFromGen(total_query);
   da7b2:	f7ff fb5b 	bl	d9e6c <_Z27readGridDerInstMetrcFromGenh>
   da7b6:	4604      	mov	r4, r0
        formatGridDataFromGen(GRID_DER_INST);
   da7b8:	2002      	movs	r0, #2
   da7ba:	e7f4      	b.n	da7a6 <_Z16runGridDataPollsv+0x8a>
        commLed.led_mode = LED_BLINK_ERROR;
   da7bc:	2303      	movs	r3, #3
        commLed.ledRoutine();
   da7be:	4826      	ldr	r0, [pc, #152]	; (da858 <_Z16runGridDataPollsv+0x13c>)
        commLed.led_mode = LED_BLINK_ERROR;
   da7c0:	722b      	strb	r3, [r5, #8]
        commLed.ledRoutine();
   da7c2:	f002 fcdf 	bl	dd184 <_ZN3LED10ledRoutineEv>
	StringSumHelper(const char *p) : String(p) {}
   da7c6:	492a      	ldr	r1, [pc, #168]	; (da870 <_Z16runGridDataPollsv+0x154>)
   da7c8:	a806      	add	r0, sp, #24
   da7ca:	f009 fa20 	bl	e3c0e <_ZN6StringC1EPKc>
        String gxGenErrorString = "{\n\"e\":\"gx_error\",\n\"s\":\"grid\",\n\"c\":\"" + String(gen_unit + ZERO_INDEX_CORRECTION) +
   da7ce:	220a      	movs	r2, #10
   da7d0:	2101      	movs	r1, #1
   da7d2:	a80a      	add	r0, sp, #40	; 0x28
   da7d4:	f009 fa9d 	bl	e3d12 <_ZN6StringC1Eih>
   da7d8:	a90a      	add	r1, sp, #40	; 0x28
   da7da:	a806      	add	r0, sp, #24
   da7dc:	f009 fb4d 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
                                  "\",\n\"ts\":\"" + String(Time.now()) + "\"\n}";
   da7e0:	4924      	ldr	r1, [pc, #144]	; (da874 <_Z16runGridDataPollsv+0x158>)
   da7e2:	f009 fb56 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   da7e6:	4604      	mov	r4, r0
   da7e8:	f009 fcbe 	bl	e4168 <_ZN9TimeClass3nowEv>
   da7ec:	220a      	movs	r2, #10
   da7ee:	4601      	mov	r1, r0
   da7f0:	a80e      	add	r0, sp, #56	; 0x38
   da7f2:	f009 fab4 	bl	e3d5e <_ZN6StringC1Elh>
   da7f6:	a90e      	add	r1, sp, #56	; 0x38
   da7f8:	4620      	mov	r0, r4
   da7fa:	f009 fb3e 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
   da7fe:	491e      	ldr	r1, [pc, #120]	; (da878 <_Z16runGridDataPollsv+0x15c>)
   da800:	f009 fb47 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   da804:	4601      	mov	r1, r0
   da806:	a802      	add	r0, sp, #8
   da808:	f009 fa4c 	bl	e3ca4 <_ZN6StringC1ERKS_>
   da80c:	a80e      	add	r0, sp, #56	; 0x38
   da80e:	f009 f9b3 	bl	e3b78 <_ZN6StringD1Ev>
        String gxGenErrorString = "{\n\"e\":\"gx_error\",\n\"s\":\"grid\",\n\"c\":\"" + String(gen_unit + ZERO_INDEX_CORRECTION) +
   da812:	a80a      	add	r0, sp, #40	; 0x28
   da814:	f009 f9b0 	bl	e3b78 <_ZN6StringD1Ev>
class StringSumHelper : public String
   da818:	a806      	add	r0, sp, #24
   da81a:	f009 f9ad 	bl	e3b78 <_ZN6StringD1Ev>
        Log.info(gxGenErrorString);
   da81e:	9902      	ldr	r1, [sp, #8]
   da820:	4816      	ldr	r0, [pc, #88]	; (da87c <_Z16runGridDataPollsv+0x160>)
   da822:	f7ff f949 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   da826:	4b16      	ldr	r3, [pc, #88]	; (da880 <_Z16runGridDataPollsv+0x164>)
   da828:	4a16      	ldr	r2, [pc, #88]	; (da884 <_Z16runGridDataPollsv+0x168>)
   da82a:	781b      	ldrb	r3, [r3, #0]
   da82c:	7812      	ldrb	r2, [r2, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   da82e:	4916      	ldr	r1, [pc, #88]	; (da888 <_Z16runGridDataPollsv+0x16c>)
   da830:	4313      	orrs	r3, r2
   da832:	f88d 3000 	strb.w	r3, [sp]
   da836:	9a02      	ldr	r2, [sp, #8]
   da838:	233c      	movs	r3, #60	; 0x3c
   da83a:	a80e      	add	r0, sp, #56	; 0x38
   da83c:	f007 f80e 	bl	e185c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   da840:	a80f      	add	r0, sp, #60	; 0x3c
   da842:	f7ff ff54 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                                  "\",\n\"ts\":\"" + String(Time.now()) + "\"\n}";
   da846:	a802      	add	r0, sp, #8
   da848:	f009 f996 	bl	e3b78 <_ZN6StringD1Ev>
  while (continue_grid_metrc_poll == true)
   da84c:	e795      	b.n	da77a <_Z16runGridDataPollsv+0x5e>
   da84e:	bf00      	nop
   da850:	2003e45c 	.word	0x2003e45c
   da854:	2003e466 	.word	0x2003e466
   da858:	2003e3b0 	.word	0x2003e3b0
   da85c:	2003dbac 	.word	0x2003dbac
   da860:	2003d6c0 	.word	0x2003d6c0
   da864:	2003db18 	.word	0x2003db18
   da868:	2003db7c 	.word	0x2003db7c
   da86c:	2003e489 	.word	0x2003e489
   da870:	000e702d 	.word	0x000e702d
   da874:	000e7051 	.word	0x000e7051
   da878:	000e70b3 	.word	0x000e70b3
   da87c:	2003e61c 	.word	0x2003e61c
   da880:	2003da09 	.word	0x2003da09
   da884:	2003da0a 	.word	0x2003da0a
   da888:	000e705b 	.word	0x000e705b

000da88c <_Z17collectGenMetricsh>:
{
   da88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        query_count = gxGen[gen_unit].getMainQueryNum();
   da890:	4b59      	ldr	r3, [pc, #356]	; (da9f8 <_Z17collectGenMetricsh+0x16c>)
        commLed.led_mode = LED_BLINK_ERROR;
   da892:	f8df 8184 	ldr.w	r8, [pc, #388]	; daa18 <_Z17collectGenMetricsh+0x18c>
        query_count = gxGen[gen_unit].getMainQueryNum();
   da896:	26e8      	movs	r6, #232	; 0xe8
{
   da898:	b093      	sub	sp, #76	; 0x4c
   da89a:	4604      	mov	r4, r0
        query_count = gxGen[gen_unit].getMainQueryNum();
   da89c:	fb00 3606 	mla	r6, r0, r6, r3
        formatGenData(gen_unit, GEN_MAIN);
   da8a0:	f04f 0b00 	mov.w	fp, #0
        query_count = gxGen[gen_unit].getMainQueryNum();
   da8a4:	4630      	mov	r0, r6
   da8a6:	f002 f8ff 	bl	dcaa8 <_ZN11GXGenerator15getMainQueryNumEv>
   da8aa:	4601      	mov	r1, r0
        gen_metric_group = readGenMainMetrics(gen_unit, query_count);
   da8ac:	4620      	mov	r0, r4
   da8ae:	f7ff f97f 	bl	d9bb0 <_Z18readGenMainMetricshh>
        formatGenData(gen_unit, GEN_MAIN);
   da8b2:	2100      	movs	r1, #0
        gen_metric_group = readGenMainMetrics(gen_unit, query_count);
   da8b4:	4605      	mov	r5, r0
        formatGenData(gen_unit, GEN_MAIN);
   da8b6:	4620      	mov	r0, r4
   da8b8:	f7ff fb60 	bl	d9f7c <_Z13formatGenDatah16GeneratorDataSet>
    memset(extracted_modbus_databuff, 0, sizeof(extracted_modbus_databuff));
   da8bc:	f8df a15c 	ldr.w	sl, [pc, #348]	; daa1c <_Z17collectGenMetricsh+0x190>
    memset(gen_alrm_regval, 0, sizeof(gen_alrm_regval));
   da8c0:	f8df 915c 	ldr.w	r9, [pc, #348]	; daa20 <_Z17collectGenMetricsh+0x194>
        break;
   da8c4:	2701      	movs	r7, #1
    memset(extracted_modbus_databuff, 0, sizeof(extracted_modbus_databuff));
   da8c6:	2264      	movs	r2, #100	; 0x64
   da8c8:	2100      	movs	r1, #0
   da8ca:	4650      	mov	r0, sl
   da8cc:	f00a fef0 	bl	e56b0 <memset>
    memset(gen_alrm_regval, 0, sizeof(gen_alrm_regval));
   da8d0:	2230      	movs	r2, #48	; 0x30
   da8d2:	2100      	movs	r1, #0
   da8d4:	4648      	mov	r0, r9
   da8d6:	f00a feeb 	bl	e56b0 <memset>
  while (check_gen_metric == true)
   da8da:	b927      	cbnz	r7, da8e6 <_Z17collectGenMetricsh+0x5a>
  return (static_cast<GeneratorSlot>(gen_unit + ZERO_INDEX_CORRECTION));
   da8dc:	1c60      	adds	r0, r4, #1
}
   da8de:	b2c0      	uxtb	r0, r0
   da8e0:	b013      	add	sp, #76	; 0x4c
   da8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (gen_metric_group)
   da8e6:	2d05      	cmp	r5, #5
   da8e8:	d8ed      	bhi.n	da8c6 <_Z17collectGenMetricsh+0x3a>
   da8ea:	a301      	add	r3, pc, #4	; (adr r3, da8f0 <_Z17collectGenMetricsh+0x64>)
   da8ec:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   da8f0:	000da8a5 	.word	0x000da8a5
   da8f4:	000da909 	.word	0x000da909
   da8f8:	000da935 	.word	0x000da935
   da8fc:	000da8c7 	.word	0x000da8c7
   da900:	000da951 	.word	0x000da951
   da904:	000da965 	.word	0x000da965
        query_count = gxGen[gen_unit].getBasInstQueryNum();
   da908:	4630      	mov	r0, r6
   da90a:	f002 f8df 	bl	dcacc <_ZN11GXGenerator18getBasInstQueryNumEv>
   da90e:	4601      	mov	r1, r0
        gen_metric_group = readGenBasInstMetrics(gen_unit, query_count);
   da910:	4620      	mov	r0, r4
   da912:	f7ff f9af 	bl	d9c74 <_Z21readGenBasInstMetricshh>
        formatGenData(gen_unit, GEN_BASINST);
   da916:	2101      	movs	r1, #1
        gen_metric_group = readGenBasInstMetrics(gen_unit, query_count);
   da918:	4605      	mov	r5, r0
        formatGenData(gen_unit, GEN_BASINST);
   da91a:	4620      	mov	r0, r4
   da91c:	f7ff fb2e 	bl	d9f7c <_Z13formatGenDatah16GeneratorDataSet>
        if (gxGen[gen_unit].derInstAvailable() == false)
   da920:	4630      	mov	r0, r6
   da922:	f002 fb81 	bl	dd028 <_ZN11GXGenerator16derInstAvailableEv>
   da926:	2800      	cmp	r0, #0
   da928:	4603      	mov	r3, r0
   da92a:	bf04      	itt	eq
   da92c:	2504      	moveq	r5, #4
   da92e:	463b      	moveq	r3, r7
            gen_metric_group = GEN_READY;
   da930:	461f      	mov	r7, r3
   da932:	e7c8      	b.n	da8c6 <_Z17collectGenMetricsh+0x3a>
        query_count = gxGen[gen_unit].getDerInstQueryNum();
   da934:	4630      	mov	r0, r6
   da936:	f002 f8d9 	bl	dcaec <_ZN11GXGenerator18getDerInstQueryNumEv>
   da93a:	4601      	mov	r1, r0
        gen_metric_group = readGenDerInstMetrics(gen_unit, query_count);
   da93c:	4620      	mov	r0, r4
   da93e:	f7ff f9fb 	bl	d9d38 <_Z21readGenDerInstMetricshh>
        formatGenData(gen_unit, GEN_DERINST);
   da942:	2102      	movs	r1, #2
        gen_metric_group = readGenDerInstMetrics(gen_unit, query_count);
   da944:	4605      	mov	r5, r0
        formatGenData(gen_unit, GEN_DERINST);
   da946:	4620      	mov	r0, r4
   da948:	f7ff fb18 	bl	d9f7c <_Z13formatGenDatah16GeneratorDataSet>
        break;
   da94c:	463b      	mov	r3, r7
   da94e:	e7ef      	b.n	da930 <_Z17collectGenMetricsh+0xa4>
        commLed.ledRoutine();
   da950:	4640      	mov	r0, r8
        commLed.led_mode = LED_OFF;
   da952:	f888 b008 	strb.w	fp, [r8, #8]
        commLed.ledRoutine();
   da956:	f002 fc15 	bl	dd184 <_ZN3LED10ledRoutineEv>
        publishGenMetrics(gen_unit);
   da95a:	4620      	mov	r0, r4
   da95c:	f7ff fd50 	bl	da400 <_Z17publishGenMetricsh>
        check_gen_metric = false;
   da960:	2300      	movs	r3, #0
   da962:	e7e5      	b.n	da930 <_Z17collectGenMetricsh+0xa4>
        commLed.led_mode = LED_BLINK_ERROR;
   da964:	2303      	movs	r3, #3
        commLed.ledRoutine();
   da966:	4640      	mov	r0, r8
        commLed.led_mode = LED_BLINK_ERROR;
   da968:	f888 3008 	strb.w	r3, [r8, #8]
        commLed.ledRoutine();
   da96c:	f002 fc0a 	bl	dd184 <_ZN3LED10ledRoutineEv>
	StringSumHelper(const char *p) : String(p) {}
   da970:	4922      	ldr	r1, [pc, #136]	; (da9fc <_Z17collectGenMetricsh+0x170>)
   da972:	a80a      	add	r0, sp, #40	; 0x28
   da974:	f009 f94b 	bl	e3c0e <_ZN6StringC1EPKc>
        String gxGenErrorString = "{\n\"e\":\"gx_error\",\n\"s\":\"gen\",\n\"c\":\"" + String(gen_unit + ZERO_INDEX_CORRECTION) +
   da978:	220a      	movs	r2, #10
   da97a:	1c61      	adds	r1, r4, #1
   da97c:	a806      	add	r0, sp, #24
   da97e:	f009 f9c8 	bl	e3d12 <_ZN6StringC1Eih>
   da982:	a906      	add	r1, sp, #24
   da984:	a80a      	add	r0, sp, #40	; 0x28
   da986:	f009 fa78 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
                                  "\",\n\"ts\":\"" + String(Time.now()) + "\"\n}";
   da98a:	491d      	ldr	r1, [pc, #116]	; (daa00 <_Z17collectGenMetricsh+0x174>)
   da98c:	f009 fa81 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   da990:	4607      	mov	r7, r0
   da992:	f009 fbe9 	bl	e4168 <_ZN9TimeClass3nowEv>
   da996:	220a      	movs	r2, #10
   da998:	4601      	mov	r1, r0
   da99a:	a80e      	add	r0, sp, #56	; 0x38
   da99c:	f009 f9df 	bl	e3d5e <_ZN6StringC1Elh>
   da9a0:	a90e      	add	r1, sp, #56	; 0x38
   da9a2:	4638      	mov	r0, r7
   da9a4:	f009 fa69 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
   da9a8:	4916      	ldr	r1, [pc, #88]	; (daa04 <_Z17collectGenMetricsh+0x178>)
   da9aa:	f009 fa72 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   da9ae:	4601      	mov	r1, r0
   da9b0:	a802      	add	r0, sp, #8
   da9b2:	f009 f977 	bl	e3ca4 <_ZN6StringC1ERKS_>
   da9b6:	a80e      	add	r0, sp, #56	; 0x38
   da9b8:	f009 f8de 	bl	e3b78 <_ZN6StringD1Ev>
        String gxGenErrorString = "{\n\"e\":\"gx_error\",\n\"s\":\"gen\",\n\"c\":\"" + String(gen_unit + ZERO_INDEX_CORRECTION) +
   da9bc:	a806      	add	r0, sp, #24
   da9be:	f009 f8db 	bl	e3b78 <_ZN6StringD1Ev>
class StringSumHelper : public String
   da9c2:	a80a      	add	r0, sp, #40	; 0x28
   da9c4:	f009 f8d8 	bl	e3b78 <_ZN6StringD1Ev>
        Log.info(gxGenErrorString);
   da9c8:	9902      	ldr	r1, [sp, #8]
   da9ca:	480f      	ldr	r0, [pc, #60]	; (daa08 <_Z17collectGenMetricsh+0x17c>)
   da9cc:	f7ff f874 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
   da9d0:	4b0e      	ldr	r3, [pc, #56]	; (daa0c <_Z17collectGenMetricsh+0x180>)
   da9d2:	4a0f      	ldr	r2, [pc, #60]	; (daa10 <_Z17collectGenMetricsh+0x184>)
   da9d4:	781b      	ldrb	r3, [r3, #0]
   da9d6:	7812      	ldrb	r2, [r2, #0]
   da9d8:	490e      	ldr	r1, [pc, #56]	; (daa14 <_Z17collectGenMetricsh+0x188>)
   da9da:	4313      	orrs	r3, r2
   da9dc:	f88d 3000 	strb.w	r3, [sp]
   da9e0:	9a02      	ldr	r2, [sp, #8]
   da9e2:	233c      	movs	r3, #60	; 0x3c
   da9e4:	a80e      	add	r0, sp, #56	; 0x38
   da9e6:	f006 ff39 	bl	e185c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   da9ea:	a80f      	add	r0, sp, #60	; 0x3c
   da9ec:	f7ff fe7f 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                                  "\",\n\"ts\":\"" + String(Time.now()) + "\"\n}";
   da9f0:	a802      	add	r0, sp, #8
   da9f2:	f009 f8c1 	bl	e3b78 <_ZN6StringD1Ev>
   da9f6:	e7b3      	b.n	da960 <_Z17collectGenMetricsh+0xd4>
   da9f8:	2003dbac 	.word	0x2003dbac
   da9fc:	000e7064 	.word	0x000e7064
   daa00:	000e7051 	.word	0x000e7051
   daa04:	000e70b3 	.word	0x000e70b3
   daa08:	2003e61c 	.word	0x2003e61c
   daa0c:	2003da09 	.word	0x2003da09
   daa10:	2003da0a 	.word	0x2003da0a
   daa14:	000e7087 	.word	0x000e7087
   daa18:	2003e3b0 	.word	0x2003e3b0
   daa1c:	2003db18 	.word	0x2003db18
   daa20:	2003db7c 	.word	0x2003db7c

000daa24 <_Z15runGenDataPollsv>:
{
   daa24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  commLed.led_mode = LED_SOLID;
   daa28:	481a      	ldr	r0, [pc, #104]	; (daa94 <_Z15runGenDataPollsv+0x70>)
  for (uint8_t i = NO_GEN_SPECIFIED; i < num_of_gensets; i++)
   daa2a:	f8df 907c 	ldr.w	r9, [pc, #124]	; daaa8 <_Z15runGenDataPollsv+0x84>
    uint8_t baud_code = gxGen[i].getBaudIndex();
   daa2e:	f8df 807c 	ldr.w	r8, [pc, #124]	; daaac <_Z15runGenDataPollsv+0x88>
    uint32_t gen_baud_rate = GEN_BAUD_RATE[baud_code];
   daa32:	4f19      	ldr	r7, [pc, #100]	; (daa98 <_Z15runGenDataPollsv+0x74>)
  commLed.led_mode = LED_SOLID;
   daa34:	2301      	movs	r3, #1
   daa36:	7203      	strb	r3, [r0, #8]
  commLed.ledRoutine();
   daa38:	f002 fba4 	bl	dd184 <_ZN3LED10ledRoutineEv>
   daa3c:	2600      	movs	r6, #0
  for (uint8_t i = NO_GEN_SPECIFIED; i < num_of_gensets; i++)
   daa3e:	f899 3000 	ldrb.w	r3, [r9]
   daa42:	b2f5      	uxtb	r5, r6
   daa44:	42ab      	cmp	r3, r5
   daa46:	d91f      	bls.n	daa88 <_Z15runGenDataPollsv+0x64>
    uint8_t baud_code = gxGen[i].getBaudIndex();
   daa48:	24e8      	movs	r4, #232	; 0xe8
   daa4a:	fb04 8405 	mla	r4, r4, r5, r8
   daa4e:	4620      	mov	r0, r4
   daa50:	f002 faf4 	bl	dd03c <_ZN11GXGenerator12getBaudIndexEv>
    uint32_t gen_baud_rate = GEN_BAUD_RATE[baud_code];
   daa54:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
    gxGen[i].begin(gen_baud_rate);
   daa58:	9301      	str	r3, [sp, #4]
   daa5a:	4619      	mov	r1, r3
   daa5c:	4620      	mov	r0, r4
   daa5e:	f005 f88f 	bl	dfb80 <_ZN6Modbus5beginEl>
    gxGen[i].setTimeOut(MODBUS_ROLL_OVER_TIME);
   daa62:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
   daa66:	4620      	mov	r0, r4
   daa68:	f004 ff30 	bl	df8cc <_ZN6Modbus10setTimeOutEt>
    Log.info("\nGEN%d BAUDRATE:%d", i+ZERO_INDEX_CORRECTION, gen_baud_rate);
   daa6c:	9b01      	ldr	r3, [sp, #4]
   daa6e:	490b      	ldr	r1, [pc, #44]	; (daa9c <_Z15runGenDataPollsv+0x78>)
   daa70:	480b      	ldr	r0, [pc, #44]	; (daaa0 <_Z15runGenDataPollsv+0x7c>)
   daa72:	1c6a      	adds	r2, r5, #1
   daa74:	f7ff f820 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
    delay(25);
   daa78:	2019      	movs	r0, #25
   daa7a:	f006 fd08 	bl	e148e <delay>
    collectGenMetrics(i);
   daa7e:	4628      	mov	r0, r5
   daa80:	f7ff ff04 	bl	da88c <_Z17collectGenMetricsh>
  for (uint8_t i = NO_GEN_SPECIFIED; i < num_of_gensets; i++)
   daa84:	3601      	adds	r6, #1
   daa86:	e7da      	b.n	daa3e <_Z15runGenDataPollsv+0x1a>
  poll_gendata_flag = false; 
   daa88:	4b06      	ldr	r3, [pc, #24]	; (daaa4 <_Z15runGenDataPollsv+0x80>)
   daa8a:	2200      	movs	r2, #0
   daa8c:	701a      	strb	r2, [r3, #0]
}
   daa8e:	b003      	add	sp, #12
   daa90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   daa94:	2003e3b0 	.word	0x2003e3b0
   daa98:	2003d6c0 	.word	0x2003d6c0
   daa9c:	000e7090 	.word	0x000e7090
   daaa0:	2003e61c 	.word	0x2003e61c
   daaa4:	2003e488 	.word	0x2003e488
   daaa8:	2003e1ec 	.word	0x2003e1ec
   daaac:	2003dbac 	.word	0x2003dbac

000daab0 <_Z15publishEngStateh>:
{
   daab0:	b530      	push	{r4, r5, lr}
   daab2:	b093      	sub	sp, #76	; 0x4c
   daab4:	4604      	mov	r4, r0
	StringSumHelper(const char *p) : String(p) {}
   daab6:	4930      	ldr	r1, [pc, #192]	; (dab78 <_Z15publishEngStateh+0xc8>)
   daab8:	a80a      	add	r0, sp, #40	; 0x28
   daaba:	f009 f8a8 	bl	e3c0e <_ZN6StringC1EPKc>
  String gxGenEngStateString = "{\n\"v\":\"1\",\n\"gen" + String(gen_unit + ZERO_INDEX_CORRECTION) + 
   daabe:	220a      	movs	r2, #10
   daac0:	1c61      	adds	r1, r4, #1
   daac2:	a806      	add	r0, sp, #24
   daac4:	f009 f925 	bl	e3d12 <_ZN6StringC1Eih>
   daac8:	a906      	add	r1, sp, #24
   daaca:	a80a      	add	r0, sp, #40	; 0x28
   daacc:	f009 f9d5 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
                             "_engState\":\n\"" + String(Time.now()) + ":";
   daad0:	492a      	ldr	r1, [pc, #168]	; (dab7c <_Z15publishEngStateh+0xcc>)
   daad2:	f009 f9de 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   daad6:	4605      	mov	r5, r0
   daad8:	f009 fb46 	bl	e4168 <_ZN9TimeClass3nowEv>
   daadc:	220a      	movs	r2, #10
   daade:	4601      	mov	r1, r0
   daae0:	a80e      	add	r0, sp, #56	; 0x38
   daae2:	f009 f93c 	bl	e3d5e <_ZN6StringC1Elh>
   daae6:	a90e      	add	r1, sp, #56	; 0x38
   daae8:	4628      	mov	r0, r5
   daaea:	f009 f9c6 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
   daaee:	4924      	ldr	r1, [pc, #144]	; (dab80 <_Z15publishEngStateh+0xd0>)
   daaf0:	f009 f9cf 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   daaf4:	4601      	mov	r1, r0
   daaf6:	a802      	add	r0, sp, #8
   daaf8:	f009 f8d4 	bl	e3ca4 <_ZN6StringC1ERKS_>
   daafc:	a80e      	add	r0, sp, #56	; 0x38
   daafe:	f009 f83b 	bl	e3b78 <_ZN6StringD1Ev>
  String gxGenEngStateString = "{\n\"v\":\"1\",\n\"gen" + String(gen_unit + ZERO_INDEX_CORRECTION) + 
   dab02:	a806      	add	r0, sp, #24
   dab04:	f009 f838 	bl	e3b78 <_ZN6StringD1Ev>
class StringSumHelper : public String
   dab08:	a80a      	add	r0, sp, #40	; 0x28
   dab0a:	f009 f835 	bl	e3b78 <_ZN6StringD1Ev>
  String val = "NA\"\n}";
   dab0e:	491d      	ldr	r1, [pc, #116]	; (dab84 <_Z15publishEngStateh+0xd4>)
   dab10:	a80e      	add	r0, sp, #56	; 0x38
   dab12:	f009 f87c 	bl	e3c0e <_ZN6StringC1EPKc>
  if (gxGen[gen_unit].getEngineStatus() == ENGINE_RUNNING) {val = "ON\"\n}";}
   dab16:	481c      	ldr	r0, [pc, #112]	; (dab88 <_Z15publishEngStateh+0xd8>)
   dab18:	23e8      	movs	r3, #232	; 0xe8
   dab1a:	fb04 0403 	mla	r4, r4, r3, r0
   dab1e:	4620      	mov	r0, r4
   dab20:	f002 fa8f 	bl	dd042 <_ZN11GXGenerator15getEngineStatusEv>
   dab24:	2803      	cmp	r0, #3
   dab26:	d11f      	bne.n	dab68 <_Z15publishEngStateh+0xb8>
   dab28:	4918      	ldr	r1, [pc, #96]	; (dab8c <_Z15publishEngStateh+0xdc>)
  else if(gxGen[gen_unit].getEngineStatus() == ENGINE_AT_REST) {val = "OFF\"\n}";}
   dab2a:	a80e      	add	r0, sp, #56	; 0x38
   dab2c:	f009 f8cd 	bl	e3cca <_ZN6StringaSEPKc>
  gxGenEngStateString.concat(val); 
   dab30:	a90e      	add	r1, sp, #56	; 0x38
   dab32:	a802      	add	r0, sp, #8
   dab34:	f009 f97f 	bl	e3e36 <_ZN6String6concatERKS_>
   dab38:	4b15      	ldr	r3, [pc, #84]	; (dab90 <_Z15publishEngStateh+0xe0>)
   dab3a:	4a16      	ldr	r2, [pc, #88]	; (dab94 <_Z15publishEngStateh+0xe4>)
   dab3c:	781b      	ldrb	r3, [r3, #0]
   dab3e:	7812      	ldrb	r2, [r2, #0]
   dab40:	4915      	ldr	r1, [pc, #84]	; (dab98 <_Z15publishEngStateh+0xe8>)
   dab42:	4313      	orrs	r3, r2
   dab44:	f88d 3000 	strb.w	r3, [sp]
   dab48:	9a02      	ldr	r2, [sp, #8]
   dab4a:	233c      	movs	r3, #60	; 0x3c
   dab4c:	a80a      	add	r0, sp, #40	; 0x28
   dab4e:	f006 fe85 	bl	e185c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   dab52:	a80b      	add	r0, sp, #44	; 0x2c
   dab54:	f7ff fdcb 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String val = "NA\"\n}";
   dab58:	a80e      	add	r0, sp, #56	; 0x38
   dab5a:	f009 f80d 	bl	e3b78 <_ZN6StringD1Ev>
                             "_engState\":\n\"" + String(Time.now()) + ":";
   dab5e:	a802      	add	r0, sp, #8
   dab60:	f009 f80a 	bl	e3b78 <_ZN6StringD1Ev>
}
   dab64:	b013      	add	sp, #76	; 0x4c
   dab66:	bd30      	pop	{r4, r5, pc}
  else if(gxGen[gen_unit].getEngineStatus() == ENGINE_AT_REST) {val = "OFF\"\n}";}
   dab68:	4620      	mov	r0, r4
   dab6a:	f002 fa6a 	bl	dd042 <_ZN11GXGenerator15getEngineStatusEv>
   dab6e:	2800      	cmp	r0, #0
   dab70:	d1de      	bne.n	dab30 <_Z15publishEngStateh+0x80>
   dab72:	490a      	ldr	r1, [pc, #40]	; (dab9c <_Z15publishEngStateh+0xec>)
   dab74:	e7d9      	b.n	dab2a <_Z15publishEngStateh+0x7a>
   dab76:	bf00      	nop
   dab78:	000e6fcf 	.word	0x000e6fcf
   dab7c:	000e70a3 	.word	0x000e70a3
   dab80:	000e73f5 	.word	0x000e73f5
   dab84:	000e70b1 	.word	0x000e70b1
   dab88:	2003dbac 	.word	0x2003dbac
   dab8c:	000e70b7 	.word	0x000e70b7
   dab90:	2003da09 	.word	0x2003da09
   dab94:	2003da0a 	.word	0x2003da0a
   dab98:	000e70c4 	.word	0x000e70c4
   dab9c:	000e70bd 	.word	0x000e70bd

000daba0 <_Z10genControl6String>:

int genControl(String ctrlParameter)
{
   daba0:	b530      	push	{r4, r5, lr}
   daba2:	b089      	sub	sp, #36	; 0x24
  // Get the desired Generator unit from the received string.
  uint8_t gen_unit = atoi(getStringValueAtIndex(ctrlParameter, COMMA_CHAR, 0));
   daba4:	4601      	mov	r1, r0
{
   daba6:	4605      	mov	r5, r0
  uint8_t gen_unit = atoi(getStringValueAtIndex(ctrlParameter, COMMA_CHAR, 0));
   daba8:	4668      	mov	r0, sp
   dabaa:	f009 f87b 	bl	e3ca4 <_ZN6StringC1ERKS_>
   dabae:	2300      	movs	r3, #0
   dabb0:	222c      	movs	r2, #44	; 0x2c
   dabb2:	4669      	mov	r1, sp
   dabb4:	a804      	add	r0, sp, #16
   dabb6:	f002 fd93 	bl	dd6e0 <_Z21getStringValueAtIndex6Stringci>
   dabba:	9804      	ldr	r0, [sp, #16]
   dabbc:	f00a fd2a 	bl	e5614 <atoi>
   dabc0:	b2c4      	uxtb	r4, r0
   dabc2:	a804      	add	r0, sp, #16
   dabc4:	f008 ffd8 	bl	e3b78 <_ZN6StringD1Ev>
   dabc8:	4668      	mov	r0, sp
   dabca:	f008 ffd5 	bl	e3b78 <_ZN6StringD1Ev>
  if ((gen_unit < MINIMUM_GENSETS) || (gen_unit > num_of_gensets)) return UNCONFIGURED_GEN_UNIT_ERROR;
   dabce:	2c00      	cmp	r4, #0
   dabd0:	d051      	beq.n	dac76 <_Z10genControl6String+0xd6>
   dabd2:	4b2a      	ldr	r3, [pc, #168]	; (dac7c <_Z10genControl6String+0xdc>)
   dabd4:	781b      	ldrb	r3, [r3, #0]
   dabd6:	42a3      	cmp	r3, r4
   dabd8:	d34d      	bcc.n	dac76 <_Z10genControl6String+0xd6>
  gen_unit = gen_unit - ZERO_INDEX_CORRECTION;

  // Retrieve the desired control command to be executed from the received string.
  uint8_t ctrl_cmmnd;
  String ctrlCmmdString = getStringValueAtIndex(ctrlParameter, COMMA_CHAR, 1); 
   dabda:	4629      	mov	r1, r5
   dabdc:	a804      	add	r0, sp, #16
   dabde:	f009 f861 	bl	e3ca4 <_ZN6StringC1ERKS_>
   dabe2:	a904      	add	r1, sp, #16
   dabe4:	2301      	movs	r3, #1
   dabe6:	222c      	movs	r2, #44	; 0x2c
   dabe8:	4668      	mov	r0, sp
   dabea:	f002 fd79 	bl	dd6e0 <_Z21getStringValueAtIndex6Stringci>
   dabee:	a804      	add	r0, sp, #16
   dabf0:	f008 ffc2 	bl	e3b78 <_ZN6StringD1Ev>
  gen_unit = gen_unit - ZERO_INDEX_CORRECTION;
   dabf4:	3c01      	subs	r4, #1
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   dabf6:	4922      	ldr	r1, [pc, #136]	; (dac80 <_Z10genControl6String+0xe0>)
   dabf8:	4668      	mov	r0, sp
   dabfa:	b2e4      	uxtb	r4, r4
   dabfc:	f009 f980 	bl	e3f00 <_ZNK6String6equalsEPKc>
  if(ctrlCmmdString == "stop") ctrl_cmmnd = SHUTDOWN_GEN;
   dac00:	b9d8      	cbnz	r0, dac3a <_Z10genControl6String+0x9a>
   dac02:	4920      	ldr	r1, [pc, #128]	; (dac84 <_Z10genControl6String+0xe4>)
   dac04:	4668      	mov	r0, sp
   dac06:	f009 f97b 	bl	e3f00 <_ZNK6String6equalsEPKc>
  else if(ctrlCmmdString == "start") ctrl_cmmnd = RUN_GEN;
   dac0a:	b9c0      	cbnz	r0, dac3e <_Z10genControl6String+0x9e>
   dac0c:	491e      	ldr	r1, [pc, #120]	; (dac88 <_Z10genControl6String+0xe8>)
   dac0e:	4668      	mov	r0, sp
   dac10:	f009 f976 	bl	e3f00 <_ZNK6String6equalsEPKc>
  else if(ctrlCmmdString == "state") ctrl_cmmnd = GET_GEN_STATE;
   dac14:	b360      	cbz	r0, dac70 <_Z10genControl6String+0xd0>
   dac16:	2502      	movs	r5, #2
  else return GEN_CTRL_CMD_ERROR;

  // Read the engine status of the desired Genset and update it in the Generator class
  checkGenEngineState(gen_unit);
   dac18:	4620      	mov	r0, r4
   dac1a:	f7ff f95f 	bl	d9edc <_Z19checkGenEngineStateh>

  // Process the received control command
  int8_t ctrl_relay_id;
  switch (ctrl_cmmnd)
   dac1e:	2d01      	cmp	r5, #1
   dac20:	d01f      	beq.n	dac62 <_Z10genControl6String+0xc2>
   dac22:	2d02      	cmp	r5, #2
   dac24:	d10d      	bne.n	dac42 <_Z10genControl6String+0xa2>
  {
    case GET_GEN_STATE:
    {
      publishEngState(gen_unit);
   dac26:	4620      	mov	r0, r4
   dac28:	f7ff ff42 	bl	daab0 <_Z15publishEngStateh>
      return ctrl_cmmnd;
   dac2c:	462c      	mov	r4, r5
  String ctrlCmmdString = getStringValueAtIndex(ctrlParameter, COMMA_CHAR, 1); 
   dac2e:	4668      	mov	r0, sp
   dac30:	f008 ffa2 	bl	e3b78 <_ZN6StringD1Ev>
  
  // Saved the latest state of the relays if the control command ran successfully. 
  saveStateOfRelays(static_cast<GenControlCommand>(ctrl_cmmnd), ctrl_relay_id); 

  return ctrl_relay_id;
   dac34:	4620      	mov	r0, r4
   dac36:	b009      	add	sp, #36	; 0x24
   dac38:	bd30      	pop	{r4, r5, pc}
  if(ctrlCmmdString == "stop") ctrl_cmmnd = SHUTDOWN_GEN;
   dac3a:	2500      	movs	r5, #0
   dac3c:	e7ec      	b.n	dac18 <_Z10genControl6String+0x78>
  else if(ctrlCmmdString == "start") ctrl_cmmnd = RUN_GEN;
   dac3e:	2501      	movs	r5, #1
   dac40:	e7ea      	b.n	dac18 <_Z10genControl6String+0x78>
      ctrl_relay_id = gxGen[gen_unit].setGenToStop();
   dac42:	4b12      	ldr	r3, [pc, #72]	; (dac8c <_Z10genControl6String+0xec>)
   dac44:	20e8      	movs	r0, #232	; 0xe8
   dac46:	fb04 3000 	mla	r0, r4, r0, r3
   dac4a:	f002 fa1d 	bl	dd088 <_ZN11GXGenerator12setGenToStopEv>
  if(!((ctrl_relay_id == GX_RELAY_1) || (ctrl_relay_id == GX_RELAY_2)))
   dac4e:	1e43      	subs	r3, r0, #1
   dac50:	b2db      	uxtb	r3, r3
   dac52:	2b01      	cmp	r3, #1
   dac54:	4604      	mov	r4, r0
   dac56:	d8ea      	bhi.n	dac2e <_Z10genControl6String+0x8e>
  saveStateOfRelays(static_cast<GenControlCommand>(ctrl_cmmnd), ctrl_relay_id); 
   dac58:	4601      	mov	r1, r0
   dac5a:	4628      	mov	r0, r5
   dac5c:	f7ff fd13 	bl	da686 <_Z17saveStateOfRelays17GenControlCommanda>
  return ctrl_relay_id;
   dac60:	e7e5      	b.n	dac2e <_Z10genControl6String+0x8e>
      ctrl_relay_id = gxGen[gen_unit].setGenToStart();
   dac62:	4b0a      	ldr	r3, [pc, #40]	; (dac8c <_Z10genControl6String+0xec>)
   dac64:	20e8      	movs	r0, #232	; 0xe8
   dac66:	fb04 3000 	mla	r0, r4, r0, r3
   dac6a:	f002 f9ed 	bl	dd048 <_ZN11GXGenerator13setGenToStartEv>
      break;
   dac6e:	e7ee      	b.n	dac4e <_Z10genControl6String+0xae>
  else return GEN_CTRL_CMD_ERROR;
   dac70:	f06f 0409 	mvn.w	r4, #9
   dac74:	e7db      	b.n	dac2e <_Z10genControl6String+0x8e>
  if ((gen_unit < MINIMUM_GENSETS) || (gen_unit > num_of_gensets)) return UNCONFIGURED_GEN_UNIT_ERROR;
   dac76:	f06f 0408 	mvn.w	r4, #8
   dac7a:	e7db      	b.n	dac34 <_Z10genControl6String+0x94>
   dac7c:	2003e1ec 	.word	0x2003e1ec
   dac80:	000e70cf 	.word	0x000e70cf
   dac84:	000e70d4 	.word	0x000e70d4
   dac88:	000e70e6 	.word	0x000e70e6
   dac8c:	2003dbac 	.word	0x2003dbac

000dac90 <_Z14genMetricsSTATv>:
{
   dac90:	b513      	push	{r0, r1, r4, lr}
  if (genmetrics_active == 1)
   dac92:	4c08      	ldr	r4, [pc, #32]	; (dacb4 <_Z14genMetricsSTATv+0x24>)
    Particle.publish("Gen Metrics state", "OFF");
   dac94:	4908      	ldr	r1, [pc, #32]	; (dacb8 <_Z14genMetricsSTATv+0x28>)
  if (genmetrics_active == 1)
   dac96:	7822      	ldrb	r2, [r4, #0]
   dac98:	2a01      	cmp	r2, #1
    Particle.publish("Gen Metrics state", "ON");
   dac9a:	bf0c      	ite	eq
   dac9c:	4a07      	ldreq	r2, [pc, #28]	; (dacbc <_Z14genMetricsSTATv+0x2c>)
    Particle.publish("Gen Metrics state", "OFF");
   dac9e:	4a08      	ldrne	r2, [pc, #32]	; (dacc0 <_Z14genMetricsSTATv+0x30>)
   daca0:	4668      	mov	r0, sp
   daca2:	f7fe fefb 	bl	d9a9c <_ZN10CloudClass7publishEPKcS1_.isra.0>
   daca6:	a801      	add	r0, sp, #4
   daca8:	f7ff fd21 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   dacac:	7820      	ldrb	r0, [r4, #0]
   dacae:	b002      	add	sp, #8
   dacb0:	bd10      	pop	{r4, pc}
   dacb2:	bf00      	nop
   dacb4:	2003e454 	.word	0x2003e454
   dacb8:	000e70da 	.word	0x000e70da
   dacbc:	000e82ff 	.word	0x000e82ff
   dacc0:	000e70ec 	.word	0x000e70ec

000dacc4 <_Z12genMetricsSW6String>:
{
   dacc4:	b530      	push	{r4, r5, lr}
   dacc6:	4929      	ldr	r1, [pc, #164]	; (dad6c <_Z12genMetricsSW6String+0xa8>)
   dacc8:	b089      	sub	sp, #36	; 0x24
   dacca:	4604      	mov	r4, r0
   daccc:	f009 f918 	bl	e3f00 <_ZNK6String6equalsEPKc>
  if (commandParameter == "")
   dacd0:	b1e8      	cbz	r0, dad0e <_Z12genMetricsSW6String+0x4a>
    EEPROM.get(EEPROM_ADDR_GENMETRICS_ACTIVE, val);
   dacd2:	f009 fd3d 	bl	e4750 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   dacd6:	2201      	movs	r2, #1
   dacd8:	f10d 0107 	add.w	r1, sp, #7
   dacdc:	f44f 7002 	mov.w	r0, #520	; 0x208
   dace0:	f006 f830 	bl	e0d44 <HAL_EEPROM_Get>
    Particle.publish("Gen Metrics state", String(val));
   dace4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   dace8:	220a      	movs	r2, #10
   dacea:	a804      	add	r0, sp, #16
   dacec:	f008 ffff 	bl	e3cee <_ZN6StringC1Ehh>
   dacf0:	9a04      	ldr	r2, [sp, #16]
   dacf2:	491f      	ldr	r1, [pc, #124]	; (dad70 <_Z12genMetricsSW6String+0xac>)
   dacf4:	a802      	add	r0, sp, #8
   dacf6:	f7fe fed1 	bl	d9a9c <_ZN10CloudClass7publishEPKcS1_.isra.0>
   dacfa:	a803      	add	r0, sp, #12
   dacfc:	f7ff fcf7 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dad00:	a804      	add	r0, sp, #16
   dad02:	f008 ff39 	bl	e3b78 <_ZN6StringD1Ev>
    return val;
   dad06:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
   dad0a:	b009      	add	sp, #36	; 0x24
   dad0c:	bd30      	pop	{r4, r5, pc}
  else if(atoi(commandParameter) == 1 || atoi(commandParameter) == 0)
   dad0e:	6820      	ldr	r0, [r4, #0]
   dad10:	f00a fc80 	bl	e5614 <atoi>
   dad14:	2801      	cmp	r0, #1
   dad16:	d11c      	bne.n	dad52 <_Z12genMetricsSW6String+0x8e>
    switch (atoi(commandParameter))
   dad18:	6820      	ldr	r0, [r4, #0]
   dad1a:	4d16      	ldr	r5, [pc, #88]	; (dad74 <_Z12genMetricsSW6String+0xb0>)
   dad1c:	f00a fc7a 	bl	e5614 <atoi>
   dad20:	2801      	cmp	r0, #1
   dad22:	d11e      	bne.n	dad62 <_Z12genMetricsSW6String+0x9e>
      Particle.publish("Gen Metrics state", "Gen Metrics queries Activated");
   dad24:	4a14      	ldr	r2, [pc, #80]	; (dad78 <_Z12genMetricsSW6String+0xb4>)
      genmetrics_active = 1;
   dad26:	7028      	strb	r0, [r5, #0]
      Particle.publish("Gen Metrics state", "Gen Metrics queries Deactivated");
   dad28:	4911      	ldr	r1, [pc, #68]	; (dad70 <_Z12genMetricsSW6String+0xac>)
   dad2a:	a804      	add	r0, sp, #16
   dad2c:	f7fe feb6 	bl	d9a9c <_ZN10CloudClass7publishEPKcS1_.isra.0>
   dad30:	a805      	add	r0, sp, #20
   dad32:	f7ff fcdc 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    genmetrics_active = atoi(commandParameter);
   dad36:	6820      	ldr	r0, [r4, #0]
   dad38:	f00a fc6c 	bl	e5614 <atoi>
   dad3c:	7028      	strb	r0, [r5, #0]
    EEPROM.put(EEPROM_ADDR_GENMETRICS_ACTIVE, genmetrics_active);
   dad3e:	f009 fd07 	bl	e4750 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   dad42:	f44f 7002 	mov.w	r0, #520	; 0x208
   dad46:	490b      	ldr	r1, [pc, #44]	; (dad74 <_Z12genMetricsSW6String+0xb0>)
   dad48:	2201      	movs	r2, #1
   dad4a:	f006 f803 	bl	e0d54 <HAL_EEPROM_Put>
    return genmetrics_active;
   dad4e:	7828      	ldrb	r0, [r5, #0]
   dad50:	e7db      	b.n	dad0a <_Z12genMetricsSW6String+0x46>
  else if(atoi(commandParameter) == 1 || atoi(commandParameter) == 0)
   dad52:	6820      	ldr	r0, [r4, #0]
   dad54:	f00a fc5e 	bl	e5614 <atoi>
   dad58:	2800      	cmp	r0, #0
   dad5a:	d0dd      	beq.n	dad18 <_Z12genMetricsSW6String+0x54>
  return -1;
   dad5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dad60:	e7d3      	b.n	dad0a <_Z12genMetricsSW6String+0x46>
      genmetrics_active = 0;
   dad62:	2300      	movs	r3, #0
      Particle.publish("Gen Metrics state", "Gen Metrics queries Deactivated");
   dad64:	4a05      	ldr	r2, [pc, #20]	; (dad7c <_Z12genMetricsSW6String+0xb8>)
      genmetrics_active = 0;
   dad66:	702b      	strb	r3, [r5, #0]
      Particle.publish("Gen Metrics state", "Gen Metrics queries Deactivated");
   dad68:	e7de      	b.n	dad28 <_Z12genMetricsSW6String+0x64>
   dad6a:	bf00      	nop
   dad6c:	000e827d 	.word	0x000e827d
   dad70:	000e70da 	.word	0x000e70da
   dad74:	2003e454 	.word	0x2003e454
   dad78:	000e70f0 	.word	0x000e70f0
   dad7c:	000e710e 	.word	0x000e710e

000dad80 <_Z13gridMetricsSW6String>:
{
   dad80:	b510      	push	{r4, lr}
   dad82:	4926      	ldr	r1, [pc, #152]	; (dae1c <_Z13gridMetricsSW6String+0x9c>)
   dad84:	b088      	sub	sp, #32
   dad86:	4604      	mov	r4, r0
   dad88:	f009 f8ba 	bl	e3f00 <_ZNK6String6equalsEPKc>
  if (commandParameter == "")
   dad8c:	b1e8      	cbz	r0, dadca <_Z13gridMetricsSW6String+0x4a>
    EEPROM.get(EEPROM_ADDR_GRIDMETRICS_ACTIVE, grid_state_val);
   dad8e:	f009 fcdf 	bl	e4750 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   dad92:	2201      	movs	r2, #1
   dad94:	f10d 0107 	add.w	r1, sp, #7
   dad98:	f240 207d 	movw	r0, #637	; 0x27d
   dad9c:	f005 ffd2 	bl	e0d44 <HAL_EEPROM_Get>
    Particle.publish("Grid_Mtrcs_state", String(grid_state_val));
   dada0:	f89d 1007 	ldrb.w	r1, [sp, #7]
   dada4:	220a      	movs	r2, #10
   dada6:	a804      	add	r0, sp, #16
   dada8:	f008 ffa1 	bl	e3cee <_ZN6StringC1Ehh>
   dadac:	9a04      	ldr	r2, [sp, #16]
   dadae:	491c      	ldr	r1, [pc, #112]	; (dae20 <_Z13gridMetricsSW6String+0xa0>)
   dadb0:	a802      	add	r0, sp, #8
   dadb2:	f7fe fe73 	bl	d9a9c <_ZN10CloudClass7publishEPKcS1_.isra.0>
   dadb6:	a803      	add	r0, sp, #12
   dadb8:	f7ff fc99 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dadbc:	a804      	add	r0, sp, #16
   dadbe:	f008 fedb 	bl	e3b78 <_ZN6StringD1Ev>
    return grid_state_val;
   dadc2:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
   dadc6:	b008      	add	sp, #32
   dadc8:	bd10      	pop	{r4, pc}
  switch (atoi(commandParameter))
   dadca:	6820      	ldr	r0, [r4, #0]
   dadcc:	f00a fc22 	bl	e5614 <atoi>
   dadd0:	2801      	cmp	r0, #1
   dadd2:	d017      	beq.n	dae04 <_Z13gridMetricsSW6String+0x84>
   dadd4:	2802      	cmp	r0, #2
   dadd6:	d019      	beq.n	dae0c <_Z13gridMetricsSW6String+0x8c>
   dadd8:	b9e0      	cbnz	r0, dae14 <_Z13gridMetricsSW6String+0x94>
      gridmetrics_active = GRID_MTRCS_OFF;
   dadda:	4b12      	ldr	r3, [pc, #72]	; (dae24 <_Z13gridMetricsSW6String+0xa4>)
      Particle.publish("Grid_Mtrcs_state", "Grid Metrics Deactivated");
   daddc:	4a12      	ldr	r2, [pc, #72]	; (dae28 <_Z13gridMetricsSW6String+0xa8>)
      gridmetrics_active = GRID_MTRCS_OFF;
   dadde:	7018      	strb	r0, [r3, #0]
      Particle.publish("Grid_Mtrcs_state", "Grid Metrics Activated: Meter");
   dade0:	490f      	ldr	r1, [pc, #60]	; (dae20 <_Z13gridMetricsSW6String+0xa0>)
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   dade2:	4c10      	ldr	r4, [pc, #64]	; (dae24 <_Z13gridMetricsSW6String+0xa4>)
   dade4:	a804      	add	r0, sp, #16
   dade6:	f7fe fe59 	bl	d9a9c <_ZN10CloudClass7publishEPKcS1_.isra.0>
   dadea:	a805      	add	r0, sp, #20
   dadec:	f7ff fc7f 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  EEPROM.put(EEPROM_ADDR_GRIDMETRICS_ACTIVE, gridmetrics_active);
   dadf0:	f009 fcae 	bl	e4750 <_Z21__fetch_global_EEPROMv>
   dadf4:	f240 207d 	movw	r0, #637	; 0x27d
   dadf8:	2201      	movs	r2, #1
   dadfa:	4621      	mov	r1, r4
   dadfc:	f005 ffaa 	bl	e0d54 <HAL_EEPROM_Put>
  return gridmetrics_active;
   dae00:	7820      	ldrb	r0, [r4, #0]
   dae02:	e7e0      	b.n	dadc6 <_Z13gridMetricsSW6String+0x46>
      gridmetrics_active = GRID_MTRCS_GEN;
   dae04:	4b07      	ldr	r3, [pc, #28]	; (dae24 <_Z13gridMetricsSW6String+0xa4>)
      Particle.publish("Grid_Mtrcs_state", "Grid Metrics Activated: Genset");
   dae06:	4a09      	ldr	r2, [pc, #36]	; (dae2c <_Z13gridMetricsSW6String+0xac>)
      gridmetrics_active = GRID_MTRCS_GEN;
   dae08:	7018      	strb	r0, [r3, #0]
      Particle.publish("Grid_Mtrcs_state", "Grid Metrics Activated: Genset");
   dae0a:	e7e9      	b.n	dade0 <_Z13gridMetricsSW6String+0x60>
      gridmetrics_active = GRID_MTRCS_METER;
   dae0c:	4b05      	ldr	r3, [pc, #20]	; (dae24 <_Z13gridMetricsSW6String+0xa4>)
      Particle.publish("Grid_Mtrcs_state", "Grid Metrics Activated: Meter");
   dae0e:	4a08      	ldr	r2, [pc, #32]	; (dae30 <_Z13gridMetricsSW6String+0xb0>)
      gridmetrics_active = GRID_MTRCS_METER;
   dae10:	7018      	strb	r0, [r3, #0]
      Particle.publish("Grid_Mtrcs_state", "Grid Metrics Activated: Meter");
   dae12:	e7e5      	b.n	dade0 <_Z13gridMetricsSW6String+0x60>
  switch (atoi(commandParameter))
   dae14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dae18:	e7d5      	b.n	dadc6 <_Z13gridMetricsSW6String+0x46>
   dae1a:	bf00      	nop
   dae1c:	000e827d 	.word	0x000e827d
   dae20:	000e712e 	.word	0x000e712e
   dae24:	2003e45c 	.word	0x2003e45c
   dae28:	000e713f 	.word	0x000e713f
   dae2c:	000e7158 	.word	0x000e7158
   dae30:	000e7177 	.word	0x000e7177

000dae34 <_Z15gridMetricsSTATv>:
{
   dae34:	b513      	push	{r0, r1, r4, lr}
  switch (gridmetrics_active)
   dae36:	4c0b      	ldr	r4, [pc, #44]	; (dae64 <_Z15gridMetricsSTATv+0x30>)
   dae38:	7822      	ldrb	r2, [r4, #0]
   dae3a:	2a01      	cmp	r2, #1
   dae3c:	d00d      	beq.n	dae5a <_Z15gridMetricsSTATv+0x26>
   dae3e:	2a02      	cmp	r2, #2
   dae40:	d00d      	beq.n	dae5e <_Z15gridMetricsSTATv+0x2a>
   dae42:	b93a      	cbnz	r2, dae54 <_Z15gridMetricsSTATv+0x20>
      Particle.publish("Grid_Mtrcs_state", "{\"State\":\"OFF\"}");
   dae44:	4a08      	ldr	r2, [pc, #32]	; (dae68 <_Z15gridMetricsSTATv+0x34>)
      Particle.publish("Grid_Mtrcs_state", "{\"State\":\"ON\",\"Source\":\"Meter\"}");
   dae46:	4909      	ldr	r1, [pc, #36]	; (dae6c <_Z15gridMetricsSTATv+0x38>)
   dae48:	4668      	mov	r0, sp
   dae4a:	f7fe fe27 	bl	d9a9c <_ZN10CloudClass7publishEPKcS1_.isra.0>
   dae4e:	a801      	add	r0, sp, #4
   dae50:	f7ff fc4d 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   dae54:	7820      	ldrb	r0, [r4, #0]
   dae56:	b002      	add	sp, #8
   dae58:	bd10      	pop	{r4, pc}
      Particle.publish("Grid_Mtrcs_state", "{\"State\":\"ON\",\"Source\":\"Genset\"}");
   dae5a:	4a05      	ldr	r2, [pc, #20]	; (dae70 <_Z15gridMetricsSTATv+0x3c>)
   dae5c:	e7f3      	b.n	dae46 <_Z15gridMetricsSTATv+0x12>
      Particle.publish("Grid_Mtrcs_state", "{\"State\":\"ON\",\"Source\":\"Meter\"}");
   dae5e:	4a05      	ldr	r2, [pc, #20]	; (dae74 <_Z15gridMetricsSTATv+0x40>)
   dae60:	e7f1      	b.n	dae46 <_Z15gridMetricsSTATv+0x12>
   dae62:	bf00      	nop
   dae64:	2003e45c 	.word	0x2003e45c
   dae68:	000e7195 	.word	0x000e7195
   dae6c:	000e712e 	.word	0x000e712e
   dae70:	000e71a5 	.word	0x000e71a5
   dae74:	000e71c6 	.word	0x000e71c6

000dae78 <_GLOBAL__sub_I_GEN_BAUD_RATE>:
   dae78:	b538      	push	{r3, r4, r5, lr}
        val_(val) {
   dae7a:	4b0c      	ldr	r3, [pc, #48]	; (daeac <_GLOBAL__sub_I_GEN_BAUD_RATE+0x34>)
GXGenerator gxGen[MAXIMUM_GENSETS];
   dae7c:	4d0c      	ldr	r5, [pc, #48]	; (daeb0 <_GLOBAL__sub_I_GEN_BAUD_RATE+0x38>)
   dae7e:	2400      	movs	r4, #0
   dae80:	701c      	strb	r4, [r3, #0]
   dae82:	4b0c      	ldr	r3, [pc, #48]	; (daeb4 <_GLOBAL__sub_I_GEN_BAUD_RATE+0x3c>)
   dae84:	2201      	movs	r2, #1
   dae86:	701a      	strb	r2, [r3, #0]
   dae88:	4b0b      	ldr	r3, [pc, #44]	; (daeb8 <_GLOBAL__sub_I_GEN_BAUD_RATE+0x40>)
   dae8a:	2208      	movs	r2, #8
   dae8c:	701a      	strb	r2, [r3, #0]
   dae8e:	1928      	adds	r0, r5, r4
   dae90:	34e8      	adds	r4, #232	; 0xe8
   dae92:	f001 fc7d 	bl	dc790 <_ZN11GXGeneratorC1Ev>
   dae96:	f5b4 6fae 	cmp.w	r4, #1392	; 0x570
   dae9a:	d1f8      	bne.n	dae8e <_GLOBAL__sub_I_GEN_BAUD_RATE+0x16>
   dae9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
GXGenerator gxGen[MAXIMUM_GENSETS];
   daea0:	4a06      	ldr	r2, [pc, #24]	; (daebc <_GLOBAL__sub_I_GEN_BAUD_RATE+0x44>)
   daea2:	4907      	ldr	r1, [pc, #28]	; (daec0 <_GLOBAL__sub_I_GEN_BAUD_RATE+0x48>)
   daea4:	2000      	movs	r0, #0
   daea6:	f009 bce9 	b.w	e487c <__aeabi_atexit>
   daeaa:	bf00      	nop
   daeac:	2003da08 	.word	0x2003da08
   daeb0:	2003dbac 	.word	0x2003dbac
   daeb4:	2003da09 	.word	0x2003da09
   daeb8:	2003da0a 	.word	0x2003da0a
   daebc:	2003d9f8 	.word	0x2003d9f8
   daec0:	000d9a81 	.word	0x000d9a81

000daec4 <_ZNK5spark6Logger4warnEPKcz>:
inline void spark::Logger::warn(const char *fmt, ...) const {
   daec4:	b40e      	push	{r1, r2, r3}
   daec6:	b510      	push	{r4, lr}
   daec8:	b08d      	sub	sp, #52	; 0x34
   daeca:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_WARN, fmt, args);
   daecc:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::warn(const char *fmt, ...) const {
   daece:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   daed2:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   daed4:	2300      	movs	r3, #0
   daed6:	2020      	movs	r0, #32
   daed8:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   daedc:	e9cd 4200 	strd	r4, r2, [sp]
   daee0:	2028      	movs	r0, #40	; 0x28
   daee2:	aa04      	add	r2, sp, #16
   daee4:	f006 f8f6 	bl	e10d4 <log_message_v>
}
   daee8:	b00d      	add	sp, #52	; 0x34
   daeea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   daeee:	b003      	add	sp, #12
   daef0:	4770      	bx	lr
	...

000daef4 <_Z17binaryInputChangeh>:
const long min_in = 1486;
const long max_in = 4359;

int binaryInputChange(uint8_t pin)
{
  switch (pin)
   daef4:	3801      	subs	r0, #1
   daef6:	2803      	cmp	r0, #3
   daef8:	d815      	bhi.n	daf26 <_Z17binaryInputChangeh+0x32>
   daefa:	e8df f000 	tbb	[pc, r0]
   daefe:	0c10      	.short	0x0c10
   daf00:	0208      	.short	0x0208
  {
  case 4:
    return !gx_interval.bin_input4;
   daf02:	4b0a      	ldr	r3, [pc, #40]	; (daf2c <_Z17binaryInputChangeh+0x38>)
   daf04:	f893 01b8 	ldrb.w	r0, [r3, #440]	; 0x1b8
    break;

  case 3:
    return !gx_interval.bin_input3;
   daf08:	f080 0001 	eor.w	r0, r0, #1
   daf0c:	4770      	bx	lr
   daf0e:	4b07      	ldr	r3, [pc, #28]	; (daf2c <_Z17binaryInputChangeh+0x38>)
   daf10:	f893 01b9 	ldrb.w	r0, [r3, #441]	; 0x1b9
   daf14:	e7f8      	b.n	daf08 <_Z17binaryInputChangeh+0x14>
    break;

  case 2:
    return !gx_interval.bin_input2;
   daf16:	4b05      	ldr	r3, [pc, #20]	; (daf2c <_Z17binaryInputChangeh+0x38>)
   daf18:	f893 01ba 	ldrb.w	r0, [r3, #442]	; 0x1ba
   daf1c:	e7f4      	b.n	daf08 <_Z17binaryInputChangeh+0x14>
    break;

  case 1:
    return !gx_interval.bin_input1;
   daf1e:	4b03      	ldr	r3, [pc, #12]	; (daf2c <_Z17binaryInputChangeh+0x38>)
   daf20:	f893 01bb 	ldrb.w	r0, [r3, #443]	; 0x1bb
   daf24:	e7f0      	b.n	daf08 <_Z17binaryInputChangeh+0x14>
{
   daf26:	f44f 70ca 	mov.w	r0, #404	; 0x194
    return 404;
    break;
  }

  return 0;
}
   daf2a:	4770      	bx	lr
   daf2c:	2003d7c0 	.word	0x2003d7c0

000daf30 <_Z16readBinaryInputsv>:
  readBinaryInputs();
  return 200;
}

void readBinaryInputs()
{
   daf30:	b570      	push	{r4, r5, r6, lr}
   daf32:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
  // Store the cummulative state of the binary inputs; for interrupt checks
  static volatile uint8_t PrevBinInputSum = 0;
  volatile uint8_t currBinInputSum = 0;
   daf36:	2300      	movs	r3, #0

  portExpander.digitalRead(D_IN4, &gx_interval.bin_input4);
   daf38:	4a49      	ldr	r2, [pc, #292]	; (db060 <_Z16readBinaryInputsv+0x130>)
   daf3a:	484a      	ldr	r0, [pc, #296]	; (db064 <_Z16readBinaryInputsv+0x134>)
  volatile uint8_t currBinInputSum = 0;
   daf3c:	f88d 31b7 	strb.w	r3, [sp, #439]	; 0x1b7
  portExpander.digitalRead(D_IN4, &gx_interval.bin_input4);
   daf40:	210c      	movs	r1, #12
   daf42:	f005 fe3e 	bl	e0bc2 <_ZN7TCA953511digitalReadEtPb>
  portExpander.digitalRead(D_IN3, &gx_interval.bin_input3);
   daf46:	4a48      	ldr	r2, [pc, #288]	; (db068 <_Z16readBinaryInputsv+0x138>)
   daf48:	4846      	ldr	r0, [pc, #280]	; (db064 <_Z16readBinaryInputsv+0x134>)
   * state all 4 Binary inputs.
   * The raw boolean results were inverted due to the nature of the opto-coupler IC of the Binary Inputs circuit on the GX board;
   * The IC usually inverts the value of it's input.
   */
  currBinInputSum = static_cast<uint8_t>(!gx_interval.bin_input1) + (static_cast<uint8_t>(!gx_interval.bin_input2) * 2) +
                    (static_cast<uint8_t>(!gx_interval.bin_input3) * 3) + (static_cast<uint8_t>(!gx_interval.bin_input4) * 4); 
   daf4a:	4c48      	ldr	r4, [pc, #288]	; (db06c <_Z16readBinaryInputsv+0x13c>)
   * Comparing the current state of the Binary inputs against the previous state. 
   * If there's a variance, it means that one or more of the binary inputs have changed state.
   * It sets the _app_state_ variable to inputUpdate for immediate publishing of the "device" 
   * event to the particle console and running of a modbus poll for Alarms
   */
  if (currBinInputSum != PrevBinInputSum)
   daf4c:	4d48      	ldr	r5, [pc, #288]	; (db070 <_Z16readBinaryInputsv+0x140>)
  portExpander.digitalRead(D_IN3, &gx_interval.bin_input3);
   daf4e:	210d      	movs	r1, #13
   daf50:	f005 fe37 	bl	e0bc2 <_ZN7TCA953511digitalReadEtPb>
  portExpander.digitalRead(D_IN2, &gx_interval.bin_input2);
   daf54:	4a47      	ldr	r2, [pc, #284]	; (db074 <_Z16readBinaryInputsv+0x144>)
   daf56:	4843      	ldr	r0, [pc, #268]	; (db064 <_Z16readBinaryInputsv+0x134>)
   daf58:	210e      	movs	r1, #14
   daf5a:	f005 fe32 	bl	e0bc2 <_ZN7TCA953511digitalReadEtPb>
  portExpander.digitalRead(D_IN1, &gx_interval.bin_input1);
   daf5e:	4a46      	ldr	r2, [pc, #280]	; (db078 <_Z16readBinaryInputsv+0x148>)
   daf60:	4840      	ldr	r0, [pc, #256]	; (db064 <_Z16readBinaryInputsv+0x134>)
   daf62:	210f      	movs	r1, #15
   daf64:	f005 fe2d 	bl	e0bc2 <_ZN7TCA953511digitalReadEtPb>
                    (static_cast<uint8_t>(!gx_interval.bin_input3) * 3) + (static_cast<uint8_t>(!gx_interval.bin_input4) * 4); 
   daf68:	f894 31b9 	ldrb.w	r3, [r4, #441]	; 0x1b9
  currBinInputSum = static_cast<uint8_t>(!gx_interval.bin_input1) + (static_cast<uint8_t>(!gx_interval.bin_input2) * 2) +
   daf6c:	f894 21ba 	ldrb.w	r2, [r4, #442]	; 0x1ba
                    (static_cast<uint8_t>(!gx_interval.bin_input3) * 3) + (static_cast<uint8_t>(!gx_interval.bin_input4) * 4); 
   daf70:	f083 0301 	eor.w	r3, r3, #1
  currBinInputSum = static_cast<uint8_t>(!gx_interval.bin_input1) + (static_cast<uint8_t>(!gx_interval.bin_input2) * 2) +
   daf74:	f082 0201 	eor.w	r2, r2, #1
   daf78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   daf7c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   daf80:	f894 21bb 	ldrb.w	r2, [r4, #443]	; 0x1bb
   daf84:	f082 0201 	eor.w	r2, r2, #1
   daf88:	4413      	add	r3, r2
                    (static_cast<uint8_t>(!gx_interval.bin_input3) * 3) + (static_cast<uint8_t>(!gx_interval.bin_input4) * 4); 
   daf8a:	f894 21b8 	ldrb.w	r2, [r4, #440]	; 0x1b8
   daf8e:	f082 0201 	eor.w	r2, r2, #1
   daf92:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   daf96:	b2db      	uxtb	r3, r3
  currBinInputSum = static_cast<uint8_t>(!gx_interval.bin_input1) + (static_cast<uint8_t>(!gx_interval.bin_input2) * 2) +
   daf98:	f88d 31b7 	strb.w	r3, [sp, #439]	; 0x1b7
  if (currBinInputSum != PrevBinInputSum)
   daf9c:	f89d 21b7 	ldrb.w	r2, [sp, #439]	; 0x1b7
   dafa0:	782b      	ldrb	r3, [r5, #0]
   dafa2:	429a      	cmp	r2, r3
   dafa4:	d054      	beq.n	db050 <_Z16readBinaryInputsv+0x120>
	StringSumHelper(const char *p) : String(p) {}
   dafa6:	4935      	ldr	r1, [pc, #212]	; (db07c <_Z16readBinaryInputsv+0x14c>)
   dafa8:	a872      	add	r0, sp, #456	; 0x1c8
   dafaa:	f008 fe30 	bl	e3c0e <_ZN6StringC1EPKc>
  { 
    Log.info("BINARY INPUTS HAVE CHANGED: " 
    + String(!gx_interval.bin_input1)
   dafae:	f894 11bb 	ldrb.w	r1, [r4, #443]	; 0x1bb
   dafb2:	220a      	movs	r2, #10
   dafb4:	f081 0101 	eor.w	r1, r1, #1
   dafb8:	a86e      	add	r0, sp, #440	; 0x1b8
   dafba:	f008 feaa 	bl	e3d12 <_ZN6StringC1Eih>
   dafbe:	a96e      	add	r1, sp, #440	; 0x1b8
   dafc0:	a872      	add	r0, sp, #456	; 0x1c8
   dafc2:	f008 ff5a 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
    + String(!gx_interval.bin_input2)
   dafc6:	f894 11ba 	ldrb.w	r1, [r4, #442]	; 0x1ba
    + String(!gx_interval.bin_input1)
   dafca:	4606      	mov	r6, r0
    + String(!gx_interval.bin_input2)
   dafcc:	220a      	movs	r2, #10
   dafce:	f081 0101 	eor.w	r1, r1, #1
   dafd2:	a876      	add	r0, sp, #472	; 0x1d8
   dafd4:	f008 fe9d 	bl	e3d12 <_ZN6StringC1Eih>
   dafd8:	a976      	add	r1, sp, #472	; 0x1d8
   dafda:	4630      	mov	r0, r6
   dafdc:	f008 ff4d 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
    + String(!gx_interval.bin_input3)
   dafe0:	f894 11b9 	ldrb.w	r1, [r4, #441]	; 0x1b9
    + String(!gx_interval.bin_input2)
   dafe4:	4606      	mov	r6, r0
    + String(!gx_interval.bin_input3)
   dafe6:	220a      	movs	r2, #10
   dafe8:	f081 0101 	eor.w	r1, r1, #1
   dafec:	a87a      	add	r0, sp, #488	; 0x1e8
   dafee:	f008 fe90 	bl	e3d12 <_ZN6StringC1Eih>
   daff2:	a97a      	add	r1, sp, #488	; 0x1e8
   daff4:	4630      	mov	r0, r6
   daff6:	f008 ff40 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
    + String(!gx_interval.bin_input4));
   daffa:	f894 11b8 	ldrb.w	r1, [r4, #440]	; 0x1b8
   daffe:	220a      	movs	r2, #10
    + String(!gx_interval.bin_input3)
   db000:	4606      	mov	r6, r0
    + String(!gx_interval.bin_input4));
   db002:	f081 0101 	eor.w	r1, r1, #1
   db006:	a87e      	add	r0, sp, #504	; 0x1f8
   db008:	f008 fe83 	bl	e3d12 <_ZN6StringC1Eih>
   db00c:	a97e      	add	r1, sp, #504	; 0x1f8
   db00e:	4630      	mov	r0, r6
   db010:	f008 ff33 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
    Log.info("BINARY INPUTS HAVE CHANGED: " 
   db014:	6801      	ldr	r1, [r0, #0]
   db016:	481a      	ldr	r0, [pc, #104]	; (db080 <_Z16readBinaryInputsv+0x150>)
   db018:	f7fe fd4e 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
    + String(!gx_interval.bin_input4));
   db01c:	a87e      	add	r0, sp, #504	; 0x1f8
   db01e:	f008 fdab 	bl	e3b78 <_ZN6StringD1Ev>
    + String(!gx_interval.bin_input3)
   db022:	a87a      	add	r0, sp, #488	; 0x1e8
   db024:	f008 fda8 	bl	e3b78 <_ZN6StringD1Ev>
    + String(!gx_interval.bin_input2)
   db028:	a876      	add	r0, sp, #472	; 0x1d8
   db02a:	f008 fda5 	bl	e3b78 <_ZN6StringD1Ev>
    + String(!gx_interval.bin_input1)
   db02e:	a86e      	add	r0, sp, #440	; 0x1b8
   db030:	f008 fda2 	bl	e3b78 <_ZN6StringD1Ev>
class StringSumHelper : public String
   db034:	a872      	add	r0, sp, #456	; 0x1c8
   db036:	f008 fd9f 	bl	e3b78 <_ZN6StringD1Ev>

    publishDeviceState(gx_interval);
   db03a:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
   db03e:	f104 0110 	add.w	r1, r4, #16
   db042:	4668      	mov	r0, sp
   db044:	f00a fb0c 	bl	e5660 <memcpy>
   db048:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   db04c:	f003 f86a 	bl	de124 <_Z18publishDeviceState18HiResSensorReading>
    
  }

  PrevBinInputSum = currBinInputSum;    
   db050:	f89d 31b7 	ldrb.w	r3, [sp, #439]	; 0x1b7
   db054:	b2db      	uxtb	r3, r3
   db056:	702b      	strb	r3, [r5, #0]
}
   db058:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   db05c:	bd70      	pop	{r4, r5, r6, pc}
   db05e:	bf00      	nop
   db060:	2003d978 	.word	0x2003d978
   db064:	2003e48a 	.word	0x2003e48a
   db068:	2003d979 	.word	0x2003d979
   db06c:	2003d7c0 	.word	0x2003d7c0
   db070:	2003e1fe 	.word	0x2003e1fe
   db074:	2003d97a 	.word	0x2003d97a
   db078:	2003d97b 	.word	0x2003d97b
   db07c:	000e71e6 	.word	0x000e71e6
   db080:	2003e61c 	.word	0x2003e61c

000db084 <_Z16checkTemperaturev>:

float checkTemperature()
{
   db084:	b510      	push	{r4, lr}
  thermo.begin(MAX31865_2WIRE);    // Open the SPI comm port for ThermoCpl Sensor
   db086:	2100      	movs	r1, #0
{
   db088:	ed2d 8b02 	vpush	{d8}
  thermo.begin(MAX31865_2WIRE);    // Open the SPI comm port for ThermoCpl Sensor
   db08c:	4825      	ldr	r0, [pc, #148]	; (db124 <_Z16checkTemperaturev+0xa0>)
   db08e:	f7fd fcf6 	bl	d8a7e <_ZN17Adafruit_MAX318655beginE17max31865_numwires>

  uint8_t temp_sensor_fault = 0;
  float temperature_value = thermo.temperature(RNOMINAL, RREF);
   db092:	4824      	ldr	r0, [pc, #144]	; (db124 <_Z16checkTemperaturev+0xa0>)
   db094:	eddf 0a24 	vldr	s1, [pc, #144]	; db128 <_Z16checkTemperaturev+0xa4>
   db098:	ed9f 0a24 	vldr	s0, [pc, #144]	; db12c <_Z16checkTemperaturev+0xa8>
   db09c:	f7fd fd2c 	bl	d8af8 <_ZN17Adafruit_MAX3186511temperatureEff>
  temp_sensor_fault = thermo.readFault();
   db0a0:	4820      	ldr	r0, [pc, #128]	; (db124 <_Z16checkTemperaturev+0xa0>)
  float temperature_value = thermo.temperature(RNOMINAL, RREF);
   db0a2:	eeb0 8a40 	vmov.f32	s16, s0
  temp_sensor_fault = thermo.readFault();
   db0a6:	f7fd fc80 	bl	d89aa <_ZN17Adafruit_MAX318659readFaultEv>

  if (temp_sensor_fault == 0) return temperature_value;
   db0aa:	b1f0      	cbz	r0, db0ea <_Z16checkTemperaturev+0x66>
  
  // If there's a fault, write it on the serial log
  if (temp_sensor_fault == UINT8_MAX) Log.warn("RTD SPi comm error");
   db0ac:	28ff      	cmp	r0, #255	; 0xff
   db0ae:	d121      	bne.n	db0f4 <_Z16checkTemperaturev+0x70>
   db0b0:	491f      	ldr	r1, [pc, #124]	; (db130 <_Z16checkTemperaturev+0xac>)
  else if (temp_sensor_fault == MAX31865_FAULT_HIGHTHRESH) Log.warn("RTD High Threshold");
  else if (temp_sensor_fault == MAX31865_FAULT_LOWTHRESH) Log.warn("RTD Low Threshold");
  else if (temp_sensor_fault == MAX31865_FAULT_REFINLOW) Log.warn("REFIN > 0.85*Bais");
  else if (temp_sensor_fault == MAX31865_FAULT_REFINHIGH) Log.warn("REFIN < 0.85*Bais, FORCE-open");
  else if (temp_sensor_fault == MAX31865_FAULT_RTDINLOW) Log.warn("RTD < 0.85*Bais, FORCE-open");
  else if (temp_sensor_fault == MAX31865_FAULT_OVUV) Log.warn("over/under voltage");
   db0b2:	4820      	ldr	r0, [pc, #128]	; (db134 <_Z16checkTemperaturev+0xb0>)
   db0b4:	f7ff ff06 	bl	daec4 <_ZNK5spark6Logger4warnEPKcz>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   db0b8:	4c1f      	ldr	r4, [pc, #124]	; (db138 <_Z16checkTemperaturev+0xb4>)

  thermo.clearFault(); // Clear any fault value
   db0ba:	481a      	ldr	r0, [pc, #104]	; (db124 <_Z16checkTemperaturev+0xa0>)
   db0bc:	f7fd fc97 	bl	d89ee <_ZN17Adafruit_MAX3186510clearFaultEv>
   db0c0:	7823      	ldrb	r3, [r4, #0]
   db0c2:	f3bf 8f5b 	dmb	ish
   db0c6:	07db      	lsls	r3, r3, #31
   db0c8:	d40a      	bmi.n	db0e0 <_Z16checkTemperaturev+0x5c>
   db0ca:	4620      	mov	r0, r4
   db0cc:	f7f8 fff6 	bl	d40bc <__cxa_guard_acquire>
   db0d0:	b130      	cbz	r0, db0e0 <_Z16checkTemperaturev+0x5c>
   db0d2:	481a      	ldr	r0, [pc, #104]	; (db13c <_Z16checkTemperaturev+0xb8>)
   db0d4:	2101      	movs	r1, #1
   db0d6:	f008 fc19 	bl	e390c <_ZN8SPIClassC1E19hal_spi_interface_t>
   db0da:	4620      	mov	r0, r4
   db0dc:	f7f8 fff3 	bl	d40c6 <__cxa_guard_release>
    }
    void begin(hal_spi_mode_t mode, uint16_t ss_pin = SPI_DEFAULT_SS) {
        instance().begin(mode, ss_pin);
    }
    void end() {
        instance().end();
   db0e0:	4816      	ldr	r0, [pc, #88]	; (db13c <_Z16checkTemperaturev+0xb8>)

  SPI1.end();          // Close the SPI comm Port for the ThermoCpl Sensor

  return TEMP_SENSOR_SENTINEL_VALUE; 
   db0e2:	ed9f 8a17 	vldr	s16, [pc, #92]	; db140 <_Z16checkTemperaturev+0xbc>
   db0e6:	f008 fc3f 	bl	e3968 <_ZN8SPIClass3endEv>
}
   db0ea:	eeb0 0a48 	vmov.f32	s0, s16
   db0ee:	ecbd 8b02 	vpop	{d8}
   db0f2:	bd10      	pop	{r4, pc}
  else if (temp_sensor_fault == MAX31865_FAULT_HIGHTHRESH) Log.warn("RTD High Threshold");
   db0f4:	2880      	cmp	r0, #128	; 0x80
   db0f6:	d101      	bne.n	db0fc <_Z16checkTemperaturev+0x78>
   db0f8:	4912      	ldr	r1, [pc, #72]	; (db144 <_Z16checkTemperaturev+0xc0>)
   db0fa:	e7da      	b.n	db0b2 <_Z16checkTemperaturev+0x2e>
  else if (temp_sensor_fault == MAX31865_FAULT_LOWTHRESH) Log.warn("RTD Low Threshold");
   db0fc:	2840      	cmp	r0, #64	; 0x40
   db0fe:	d101      	bne.n	db104 <_Z16checkTemperaturev+0x80>
   db100:	4911      	ldr	r1, [pc, #68]	; (db148 <_Z16checkTemperaturev+0xc4>)
   db102:	e7d6      	b.n	db0b2 <_Z16checkTemperaturev+0x2e>
  else if (temp_sensor_fault == MAX31865_FAULT_REFINLOW) Log.warn("REFIN > 0.85*Bais");
   db104:	2820      	cmp	r0, #32
   db106:	d101      	bne.n	db10c <_Z16checkTemperaturev+0x88>
   db108:	4910      	ldr	r1, [pc, #64]	; (db14c <_Z16checkTemperaturev+0xc8>)
   db10a:	e7d2      	b.n	db0b2 <_Z16checkTemperaturev+0x2e>
  else if (temp_sensor_fault == MAX31865_FAULT_REFINHIGH) Log.warn("REFIN < 0.85*Bais, FORCE-open");
   db10c:	2810      	cmp	r0, #16
   db10e:	d101      	bne.n	db114 <_Z16checkTemperaturev+0x90>
   db110:	490f      	ldr	r1, [pc, #60]	; (db150 <_Z16checkTemperaturev+0xcc>)
   db112:	e7ce      	b.n	db0b2 <_Z16checkTemperaturev+0x2e>
  else if (temp_sensor_fault == MAX31865_FAULT_RTDINLOW) Log.warn("RTD < 0.85*Bais, FORCE-open");
   db114:	2808      	cmp	r0, #8
   db116:	d101      	bne.n	db11c <_Z16checkTemperaturev+0x98>
   db118:	490e      	ldr	r1, [pc, #56]	; (db154 <_Z16checkTemperaturev+0xd0>)
   db11a:	e7ca      	b.n	db0b2 <_Z16checkTemperaturev+0x2e>
  else if (temp_sensor_fault == MAX31865_FAULT_OVUV) Log.warn("over/under voltage");
   db11c:	2804      	cmp	r0, #4
   db11e:	d1cb      	bne.n	db0b8 <_Z16checkTemperaturev+0x34>
   db120:	490d      	ldr	r1, [pc, #52]	; (db158 <_Z16checkTemperaturev+0xd4>)
   db122:	e7c6      	b.n	db0b2 <_Z16checkTemperaturev+0x2e>
   db124:	2003e56c 	.word	0x2003e56c
   db128:	43d70000 	.word	0x43d70000
   db12c:	42c80000 	.word	0x42c80000
   db130:	000e7203 	.word	0x000e7203
   db134:	2003e61c 	.word	0x2003e61c
   db138:	2003e1f0 	.word	0x2003e1f0
   db13c:	2003e1f4 	.word	0x2003e1f4
   db140:	448ae38d 	.word	0x448ae38d
   db144:	000e7216 	.word	0x000e7216
   db148:	000e7229 	.word	0x000e7229
   db14c:	000e723b 	.word	0x000e723b
   db150:	000e724d 	.word	0x000e724d
   db154:	000e726b 	.word	0x000e726b
   db158:	000e7287 	.word	0x000e7287

000db15c <_Z14getBattVoltagev>:

float getBattVoltage()
{
   db15c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   db15e:	2506      	movs	r5, #6
  int batt_adc_rollavg = 0;
   db160:	2400      	movs	r4, #0

  for (int i = 0; i <= NUMBER_OF_SAMPLES; i++)
  { 
    // Sample battery voltage ADC channel
    batt_adc_rollavg += analogRead(VIN_INPUT);
   db162:	2012      	movs	r0, #18
   db164:	f009 fadc 	bl	e4720 <analogRead>
   db168:	4404      	add	r4, r0
    delay(1);
   db16a:	2001      	movs	r0, #1
   db16c:	f006 f98f 	bl	e148e <delay>
  for (int i = 0; i <= NUMBER_OF_SAMPLES; i++)
   db170:	3d01      	subs	r5, #1
   db172:	d1f6      	bne.n	db162 <_Z14getBattVoltagev+0x6>
  }

  batt_adc_rollavg /= NUMBER_OF_SAMPLES;
  uint16_t batt_volt = map((long)batt_adc_rollavg, min_in, max_in, 1000, 2900);
   db174:	f640 3354 	movw	r3, #2900	; 0xb54
   db178:	9300      	str	r3, [sp, #0]
   db17a:	f241 1207 	movw	r2, #4359	; 0x1107
   db17e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db182:	f240 51ce 	movw	r1, #1486	; 0x5ce
   db186:	2005      	movs	r0, #5
   db188:	fb94 f0f0 	sdiv	r0, r4, r0
   db18c:	f006 f930 	bl	e13f0 <_Z3mapiiiii>

  float batt_f = (float)batt_volt / 100.0;
   db190:	b283      	uxth	r3, r0
   db192:	ee00 3a10 	vmov	s0, r3

  return batt_f;
}
   db196:	eddf 7a04 	vldr	s15, [pc, #16]	; db1a8 <_Z14getBattVoltagev+0x4c>
  float batt_f = (float)batt_volt / 100.0;
   db19a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   db19e:	ee80 0a27 	vdiv.f32	s0, s0, s15
   db1a2:	b003      	add	sp, #12
   db1a4:	bd30      	pop	{r4, r5, pc}
   db1a6:	bf00      	nop
   db1a8:	42c80000 	.word	0x42c80000

000db1ac <_Z14getFuelVoltagev>:

// Sample voltage corresponding to fuel level
float getFuelVoltage()
{
   db1ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   db1ae:	2406      	movs	r4, #6
  int fuel_adc_rollavg = 0;
   db1b0:	2500      	movs	r5, #0

  for (int i = 0; i <= NUMBER_OF_SAMPLES; i++)
  { 
    // Sample fuel level voltage ADC channel
    fuel_adc_rollavg += analogRead(ANALOG_INPUT_1);
   db1b2:	2011      	movs	r0, #17
   db1b4:	f009 fab4 	bl	e4720 <analogRead>
   db1b8:	4405      	add	r5, r0
    delay(1);
   db1ba:	2001      	movs	r0, #1
   db1bc:	f006 f967 	bl	e148e <delay>
  for (int i = 0; i <= NUMBER_OF_SAMPLES; i++)
   db1c0:	3c01      	subs	r4, #1
   db1c2:	d1f6      	bne.n	db1b2 <_Z14getFuelVoltagev+0x6>
  }

  fuel_adc_rollavg /= NUMBER_OF_SAMPLES;
  uint16_t fuel_volt = map((long)fuel_adc_rollavg, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 1000);
   db1c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db1c8:	9300      	str	r3, [sp, #0]
   db1ca:	f640 62a1 	movw	r2, #3745	; 0xea1
   db1ce:	4623      	mov	r3, r4
   db1d0:	4621      	mov	r1, r4
   db1d2:	2005      	movs	r0, #5
   db1d4:	fb95 f0f0 	sdiv	r0, r5, r0
   db1d8:	f006 f90a 	bl	e13f0 <_Z3mapiiiii>
  float fuel_f = fuel_volt / 100.0;
   db1dc:	b280      	uxth	r0, r0
   db1de:	f009 fd0b 	bl	e4bf8 <__aeabi_i2d>
   db1e2:	4b05      	ldr	r3, [pc, #20]	; (db1f8 <_Z14getFuelVoltagev+0x4c>)
   db1e4:	2200      	movs	r2, #0
   db1e6:	f009 fe9b 	bl	e4f20 <__aeabi_ddiv>
   db1ea:	f00a f829 	bl	e5240 <__aeabi_d2f>

  return fuel_f;
}
   db1ee:	ee00 0a10 	vmov	s0, r0
   db1f2:	b003      	add	sp, #12
   db1f4:	bd30      	pop	{r4, r5, pc}
   db1f6:	bf00      	nop
   db1f8:	40590000 	.word	0x40590000
   db1fc:	00000000 	.word	0x00000000

000db200 <_Z21getPyranomterReadingsv>:

// Sample voltage corresponding to pyranomter sensor readings
float getPyranomterReadings()
{
   db200:	b538      	push	{r3, r4, r5, lr}
   db202:	2506      	movs	r5, #6
  int pyr_adc_rollavg = 0;
   db204:	2400      	movs	r4, #0

  for (int i = 0; i <= NUMBER_OF_SAMPLES; i++)
  { 
    // Sample ADC channel
    pyr_adc_rollavg += analogRead(ANALOG_INPUT_2);
   db206:	2013      	movs	r0, #19
   db208:	f009 fa8a 	bl	e4720 <analogRead>
   db20c:	4404      	add	r4, r0
    delay(1);
   db20e:	2001      	movs	r0, #1
   db210:	f006 f93d 	bl	e148e <delay>
  for (int i = 0; i <= NUMBER_OF_SAMPLES; i++)
   db214:	3d01      	subs	r5, #1
   db216:	d1f6      	bne.n	db206 <_Z21getPyranomterReadingsv+0x6>
  }

  pyr_adc_rollavg /= NUMBER_OF_SAMPLES;

  // Calculate real world voltage
  double pyr_volt = map((double)pyr_adc_rollavg, (double)MIN_ADC_VALUE, (double)MAX_ADC_VALUE, (double)0, (double)1000);
   db218:	2005      	movs	r0, #5
   db21a:	fb94 f0f0 	sdiv	r0, r4, r0
   db21e:	f009 fceb 	bl	e4bf8 <__aeabi_i2d>
   db222:	ed9f 3b11 	vldr	d3, [pc, #68]	; db268 <_Z21getPyranomterReadingsv+0x68>
   db226:	ed9f 4b12 	vldr	d4, [pc, #72]	; db270 <_Z21getPyranomterReadingsv+0x70>
   db22a:	eeb0 1a43 	vmov.f32	s2, s6
   db22e:	eef0 1a63 	vmov.f32	s3, s7
   db232:	ed9f 2b11 	vldr	d2, [pc, #68]	; db278 <_Z21getPyranomterReadingsv+0x78>
   db236:	ec41 0b10 	vmov	d0, r0, r1
   db23a:	f006 f8e5 	bl	e1408 <_Z3mapddddd>
  // Pyranometer input voltage in mv
  pyr_volt = (pyr_volt / 100.0) * 1000;
   db23e:	4b12      	ldr	r3, [pc, #72]	; (db288 <_Z21getPyranomterReadingsv+0x88>)
  double pyr_volt = map((double)pyr_adc_rollavg, (double)MIN_ADC_VALUE, (double)MAX_ADC_VALUE, (double)0, (double)1000);
   db240:	ec51 0b10 	vmov	r0, r1, d0
  pyr_volt = (pyr_volt / 100.0) * 1000;
   db244:	2200      	movs	r2, #0
   db246:	f009 fe6b 	bl	e4f20 <__aeabi_ddiv>
   db24a:	4b10      	ldr	r3, [pc, #64]	; (db28c <_Z21getPyranomterReadingsv+0x8c>)
   db24c:	2200      	movs	r2, #0
   db24e:	f009 fd3d 	bl	e4ccc <__aeabi_dmul>
  
  // Return shortwave radiation from the input analog voltage (W m^-2)
  return PYRANOMETER_CALIBRATION_FACTOR * pyr_volt;
   db252:	a30b      	add	r3, pc, #44	; (adr r3, db280 <_Z21getPyranomterReadingsv+0x80>)
   db254:	e9d3 2300 	ldrd	r2, r3, [r3]
   db258:	f009 fd38 	bl	e4ccc <__aeabi_dmul>
   db25c:	f009 fff0 	bl	e5240 <__aeabi_d2f>
}
   db260:	ee00 0a10 	vmov	s0, r0
   db264:	bd38      	pop	{r3, r4, r5, pc}
   db266:	bf00      	nop
	...
   db274:	408f4000 	.word	0x408f4000
   db278:	00000000 	.word	0x00000000
   db27c:	40ad4200 	.word	0x40ad4200
   db280:	9999999a 	.word	0x9999999a
   db284:	3fd99999 	.word	0x3fd99999
   db288:	40590000 	.word	0x40590000
   db28c:	408f4000 	.word	0x408f4000

000db290 <_Z18initSensorReadingsv>:

void initSensorReadings()
{
   db290:	b510      	push	{r4, lr}
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   db292:	4c0b      	ldr	r4, [pc, #44]	; (db2c0 <_Z18initSensorReadingsv+0x30>)
  // get status of all sensor readings
  EEPROM.get(EEPROM_SENSOR_READINGS_STATUS, sensor_reading_status);
   db294:	f009 fa5c 	bl	e4750 <_Z21__fetch_global_EEPROMv>
   db298:	490a      	ldr	r1, [pc, #40]	; (db2c4 <_Z18initSensorReadingsv+0x34>)
   db29a:	2202      	movs	r2, #2
   db29c:	f44f 701d 	mov.w	r0, #628	; 0x274
   db2a0:	f005 fd50 	bl	e0d44 <HAL_EEPROM_Get>
  //checks if it's a new device or an already configured one ( checks if EEPROM is EMPTY)
  if (sensor_reading_status == 0xFFFF){
    sensor_reading_status = SENSOR_READINGS_DEFAULT_STATUS;
  }
  // get selected temperature sensor
  EEPROM.get(EEPROM_SELECTED_TEMPERATURE_SENSOR, selected_temperature_sensor);
   db2a4:	f009 fa54 	bl	e4750 <_Z21__fetch_global_EEPROMv>
   db2a8:	2201      	movs	r2, #1
   db2aa:	4621      	mov	r1, r4
   db2ac:	f240 207a 	movw	r0, #634	; 0x27a
   db2b0:	f005 fd48 	bl	e0d44 <HAL_EEPROM_Get>
  if ( selected_temperature_sensor < 0 || selected_temperature_sensor > 1 )
   db2b4:	7823      	ldrb	r3, [r4, #0]
   db2b6:	2b01      	cmp	r3, #1
    selected_temperature_sensor = 0;
   db2b8:	bf84      	itt	hi
   db2ba:	2300      	movhi	r3, #0
   db2bc:	7023      	strbhi	r3, [r4, #0]
}
   db2be:	bd10      	pop	{r4, pc}
   db2c0:	2003e1ff 	.word	0x2003e1ff
   db2c4:	2003e200 	.word	0x2003e200

000db2c8 <_Z16getSensorBitMask6String>:

uint16_t getSensorBitMask(String sensor)
{
   db2c8:	b510      	push	{r4, lr}
   db2ca:	4604      	mov	r4, r0
  sensor = sensor.toLowerCase();
   db2cc:	f008 fe56 	bl	e3f7c <_ZN6String11toLowerCaseEv>
   db2d0:	4601      	mov	r1, r0
   db2d2:	4620      	mov	r0, r4
   db2d4:	f008 fcd7 	bl	e3c86 <_ZN6StringaSERKS_>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   db2d8:	4912      	ldr	r1, [pc, #72]	; (db324 <_Z16getSensorBitMask6String+0x5c>)
   db2da:	4620      	mov	r0, r4
   db2dc:	f008 fe10 	bl	e3f00 <_ZNK6String6equalsEPKc>
  if(sensor == "voltage")
   db2e0:	b9b8      	cbnz	r0, db312 <_Z16getSensorBitMask6String+0x4a>
   db2e2:	4911      	ldr	r1, [pc, #68]	; (db328 <_Z16getSensorBitMask6String+0x60>)
   db2e4:	4620      	mov	r0, r4
   db2e6:	f008 fe0b 	bl	e3f00 <_ZNK6String6equalsEPKc>
    return VOLT_READINGS;
  else if(sensor == "fuel level")
   db2ea:	b9a0      	cbnz	r0, db316 <_Z16getSensorBitMask6String+0x4e>
   db2ec:	490f      	ldr	r1, [pc, #60]	; (db32c <_Z16getSensorBitMask6String+0x64>)
   db2ee:	4620      	mov	r0, r4
   db2f0:	f008 fe06 	bl	e3f00 <_ZNK6String6equalsEPKc>
    return FUEL_LEVEL_READINGS;
  else if(sensor == "pyranometer")
   db2f4:	b988      	cbnz	r0, db31a <_Z16getSensorBitMask6String+0x52>
   db2f6:	490e      	ldr	r1, [pc, #56]	; (db330 <_Z16getSensorBitMask6String+0x68>)
   db2f8:	4620      	mov	r0, r4
   db2fa:	f008 fe01 	bl	e3f00 <_ZNK6String6equalsEPKc>
    return PYRANOMETER_READINGS;
  else if(sensor == "temperature")
   db2fe:	b970      	cbnz	r0, db31e <_Z16getSensorBitMask6String+0x56>
   db300:	490c      	ldr	r1, [pc, #48]	; (db334 <_Z16getSensorBitMask6String+0x6c>)
   db302:	4620      	mov	r0, r4
   db304:	f008 fdfc 	bl	e3f00 <_ZNK6String6equalsEPKc>
    return TEMPERATURE_READINGS;
  else if(sensor == "res sensor")
   db308:	2800      	cmp	r0, #0
    return RES_SENSOR_READINGS;
   db30a:	bf0c      	ite	eq
   db30c:	2000      	moveq	r0, #0
   db30e:	2010      	movne	r0, #16
  return 0;
}
   db310:	bd10      	pop	{r4, pc}
    return VOLT_READINGS;
   db312:	2001      	movs	r0, #1
   db314:	e7fc      	b.n	db310 <_Z16getSensorBitMask6String+0x48>
    return FUEL_LEVEL_READINGS;
   db316:	2002      	movs	r0, #2
   db318:	e7fa      	b.n	db310 <_Z16getSensorBitMask6String+0x48>
    return PYRANOMETER_READINGS;
   db31a:	2004      	movs	r0, #4
   db31c:	e7f8      	b.n	db310 <_Z16getSensorBitMask6String+0x48>
    return TEMPERATURE_READINGS;
   db31e:	2008      	movs	r0, #8
   db320:	e7f6      	b.n	db310 <_Z16getSensorBitMask6String+0x48>
   db322:	bf00      	nop
   db324:	000e7292 	.word	0x000e7292
   db328:	000e729a 	.word	0x000e729a
   db32c:	000e72a5 	.word	0x000e72a5
   db330:	000e72b1 	.word	0x000e72b1
   db334:	000e72bd 	.word	0x000e72bd

000db338 <_Z22setSensorReadingStatus6String>:

int setSensorReadingStatus(String commandParameter)
{
   db338:	b510      	push	{r4, lr}
   db33a:	b08c      	sub	sp, #48	; 0x30
   db33c:	4604      	mov	r4, r0
  String sensor = getStringValueAtIndex(commandParameter, ',', 0);
   db33e:	4601      	mov	r1, r0
   db340:	a808      	add	r0, sp, #32
   db342:	f008 fcaf 	bl	e3ca4 <_ZN6StringC1ERKS_>
   db346:	2300      	movs	r3, #0
   db348:	222c      	movs	r2, #44	; 0x2c
   db34a:	a908      	add	r1, sp, #32
   db34c:	4668      	mov	r0, sp
   db34e:	f002 f9c7 	bl	dd6e0 <_Z21getStringValueAtIndex6Stringci>
   db352:	a808      	add	r0, sp, #32
   db354:	f008 fc10 	bl	e3b78 <_ZN6StringD1Ev>
  String status = getStringValueAtIndex(commandParameter, ',', 1);
   db358:	4621      	mov	r1, r4
   db35a:	a808      	add	r0, sp, #32
   db35c:	f008 fca2 	bl	e3ca4 <_ZN6StringC1ERKS_>
   db360:	2301      	movs	r3, #1
   db362:	222c      	movs	r2, #44	; 0x2c
   db364:	a908      	add	r1, sp, #32
   db366:	a804      	add	r0, sp, #16
   db368:	f002 f9ba 	bl	dd6e0 <_Z21getStringValueAtIndex6Stringci>
   db36c:	a808      	add	r0, sp, #32
   db36e:	f008 fc03 	bl	e3b78 <_ZN6StringD1Ev>

  uint16_t sensor_bit_mask = getSensorBitMask(sensor);
   db372:	4669      	mov	r1, sp
   db374:	a808      	add	r0, sp, #32
   db376:	f008 fc95 	bl	e3ca4 <_ZN6StringC1ERKS_>
   db37a:	a808      	add	r0, sp, #32
   db37c:	f7ff ffa4 	bl	db2c8 <_Z16getSensorBitMask6String>
   db380:	4604      	mov	r4, r0
   db382:	a808      	add	r0, sp, #32
   db384:	f008 fbf8 	bl	e3b78 <_ZN6StringD1Ev>
  // If sensor name is incorrect
  if(sensor_bit_mask == 0)
   db388:	b954      	cbnz	r4, db3a0 <_Z22setSensorReadingStatus6String+0x68>
    return -1;
   db38a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  String status = getStringValueAtIndex(commandParameter, ',', 1);
   db38e:	a804      	add	r0, sp, #16
   db390:	f008 fbf2 	bl	e3b78 <_ZN6StringD1Ev>
  String sensor = getStringValueAtIndex(commandParameter, ',', 0);
   db394:	4668      	mov	r0, sp
   db396:	f008 fbef 	bl	e3b78 <_ZN6StringD1Ev>
  else
    return -1; // If command is neither 0 or 1 

  EEPROM.put(EEPROM_SENSOR_READINGS_STATUS, sensor_reading_status);
  return 1;
}
   db39a:	4620      	mov	r0, r4
   db39c:	b00c      	add	sp, #48	; 0x30
   db39e:	bd10      	pop	{r4, pc}
  if(atoi(status) == 1)
   db3a0:	9804      	ldr	r0, [sp, #16]
   db3a2:	f00a f937 	bl	e5614 <atoi>
   db3a6:	2801      	cmp	r0, #1
   db3a8:	d10d      	bne.n	db3c6 <_Z22setSensorReadingStatus6String+0x8e>
    sensor_reading_status |= sensor_bit_mask;
   db3aa:	4b0c      	ldr	r3, [pc, #48]	; (db3dc <_Z22setSensorReadingStatus6String+0xa4>)
   db3ac:	8818      	ldrh	r0, [r3, #0]
   db3ae:	4304      	orrs	r4, r0
    sensor_reading_status &= ~sensor_bit_mask;
   db3b0:	801c      	strh	r4, [r3, #0]
  EEPROM.put(EEPROM_SENSOR_READINGS_STATUS, sensor_reading_status);
   db3b2:	f009 f9cd 	bl	e4750 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   db3b6:	4909      	ldr	r1, [pc, #36]	; (db3dc <_Z22setSensorReadingStatus6String+0xa4>)
   db3b8:	2202      	movs	r2, #2
   db3ba:	f44f 701d 	mov.w	r0, #628	; 0x274
   db3be:	f005 fcc9 	bl	e0d54 <HAL_EEPROM_Put>
  return 1;
   db3c2:	2401      	movs	r4, #1
        return t;
   db3c4:	e7e3      	b.n	db38e <_Z22setSensorReadingStatus6String+0x56>
  else if(atoi(status) == 0)
   db3c6:	9804      	ldr	r0, [sp, #16]
   db3c8:	f00a f924 	bl	e5614 <atoi>
   db3cc:	2800      	cmp	r0, #0
   db3ce:	d1dc      	bne.n	db38a <_Z22setSensorReadingStatus6String+0x52>
    sensor_reading_status &= ~sensor_bit_mask;
   db3d0:	4b02      	ldr	r3, [pc, #8]	; (db3dc <_Z22setSensorReadingStatus6String+0xa4>)
   db3d2:	8818      	ldrh	r0, [r3, #0]
   db3d4:	ea20 0404 	bic.w	r4, r0, r4
   db3d8:	e7ea      	b.n	db3b0 <_Z22setSensorReadingStatus6String+0x78>
   db3da:	bf00      	nop
   db3dc:	2003e200 	.word	0x2003e200

000db3e0 <_Z10binaryRead6String>:

int binaryRead(String commandParameter)
{
   db3e0:	b510      	push	{r4, lr}
   db3e2:	4908      	ldr	r1, [pc, #32]	; (db404 <_Z10binaryRead6String+0x24>)
   db3e4:	4604      	mov	r4, r0
   db3e6:	f008 fd8b 	bl	e3f00 <_ZNK6String6equalsEPKc>
  return (commandParameter == "") ? binaryInputChange() : binaryInputChange((uint8_t)atoi(commandParameter));
   db3ea:	b938      	cbnz	r0, db3fc <_Z10binaryRead6String+0x1c>
   db3ec:	6820      	ldr	r0, [r4, #0]
   db3ee:	f00a f911 	bl	e5614 <atoi>
}
   db3f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (commandParameter == "") ? binaryInputChange() : binaryInputChange((uint8_t)atoi(commandParameter));
   db3f6:	b2c0      	uxtb	r0, r0
   db3f8:	f7ff bd7c 	b.w	daef4 <_Z17binaryInputChangeh>
  readBinaryInputs();
   db3fc:	f7ff fd98 	bl	daf30 <_Z16readBinaryInputsv>
}
   db400:	20c8      	movs	r0, #200	; 0xc8
   db402:	bd10      	pop	{r4, pc}
   db404:	000e827d 	.word	0x000e827d

000db408 <_Z23selectTemperatureSensor6String>:

int selectTemperatureSensor(String commandParameter)
{
   db408:	b538      	push	{r3, r4, r5, lr}
   db40a:	4604      	mov	r4, r0
  commandParameter = commandParameter.toLowerCase();
   db40c:	f008 fdb6 	bl	e3f7c <_ZN6String11toLowerCaseEv>
   db410:	4601      	mov	r1, r0
   db412:	4620      	mov	r0, r4
   db414:	f008 fc37 	bl	e3c86 <_ZN6StringaSERKS_>
   db418:	490e      	ldr	r1, [pc, #56]	; (db454 <_Z23selectTemperatureSensor6String+0x4c>)
   db41a:	4620      	mov	r0, r4
   db41c:	f008 fd70 	bl	e3f00 <_ZNK6String6equalsEPKc>
  if(commandParameter == "digital")
   db420:	4605      	mov	r5, r0
   db422:	b160      	cbz	r0, db43e <_Z23selectTemperatureSensor6String+0x36>
    selected_temperature_sensor = DIGITAL_INPUT;
   db424:	4b0c      	ldr	r3, [pc, #48]	; (db458 <_Z23selectTemperatureSensor6String+0x50>)
   db426:	2201      	movs	r2, #1
   db428:	701a      	strb	r2, [r3, #0]
  else if(commandParameter == "analog")
    selected_temperature_sensor = ANALOG_INPUT;
  else 
    return -1;
  EEPROM.put(EEPROM_SELECTED_TEMPERATURE_SENSOR, selected_temperature_sensor);
   db42a:	f009 f991 	bl	e4750 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   db42e:	f240 207a 	movw	r0, #634	; 0x27a
   db432:	4909      	ldr	r1, [pc, #36]	; (db458 <_Z23selectTemperatureSensor6String+0x50>)
   db434:	2201      	movs	r2, #1
   db436:	f005 fc8d 	bl	e0d54 <HAL_EEPROM_Put>
  return 1;
   db43a:	2001      	movs	r0, #1
}
   db43c:	bd38      	pop	{r3, r4, r5, pc}
   db43e:	4907      	ldr	r1, [pc, #28]	; (db45c <_Z23selectTemperatureSensor6String+0x54>)
   db440:	4620      	mov	r0, r4
   db442:	f008 fd5d 	bl	e3f00 <_ZNK6String6equalsEPKc>
  else if(commandParameter == "analog")
   db446:	b110      	cbz	r0, db44e <_Z23selectTemperatureSensor6String+0x46>
    selected_temperature_sensor = ANALOG_INPUT;
   db448:	4b03      	ldr	r3, [pc, #12]	; (db458 <_Z23selectTemperatureSensor6String+0x50>)
   db44a:	701d      	strb	r5, [r3, #0]
   db44c:	e7ed      	b.n	db42a <_Z23selectTemperatureSensor6String+0x22>
    return -1;
   db44e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db452:	e7f3      	b.n	db43c <_Z23selectTemperatureSensor6String+0x34>
   db454:	000e72c8 	.word	0x000e72c8
   db458:	2003e1ff 	.word	0x2003e1ff
   db45c:	000e72d0 	.word	0x000e72d0

000db460 <_Z25selectedTemperatureSensorv>:

int selectedTemperatureSensor()
{
   db460:	b530      	push	{r4, r5, lr}
  String jsonString = String("{\"v\": \"1\",\n\"temp_sensor\": ");
  if (selected_temperature_sensor == ANALOG_INPUT)
   db462:	4d1d      	ldr	r5, [pc, #116]	; (db4d8 <_Z25selectedTemperatureSensorv+0x78>)
  String jsonString = String("{\"v\": \"1\",\n\"temp_sensor\": ");
   db464:	491d      	ldr	r1, [pc, #116]	; (db4dc <_Z25selectedTemperatureSensorv+0x7c>)
{
   db466:	b089      	sub	sp, #36	; 0x24
  String jsonString = String("{\"v\": \"1\",\n\"temp_sensor\": ");
   db468:	a804      	add	r0, sp, #16
   db46a:	f008 fbd0 	bl	e3c0e <_ZN6StringC1EPKc>
  if (selected_temperature_sensor == ANALOG_INPUT)
   db46e:	782b      	ldrb	r3, [r5, #0]
   db470:	2b00      	cmp	r3, #0
   db472:	d12d      	bne.n	db4d0 <_Z25selectedTemperatureSensorv+0x70>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   db474:	491a      	ldr	r1, [pc, #104]	; (db4e0 <_Z25selectedTemperatureSensorv+0x80>)
   db476:	a804      	add	r0, sp, #16
   db478:	f008 fce1 	bl	e3e3e <_ZN6String6concatEPKc>
   db47c:	4919      	ldr	r1, [pc, #100]	; (db4e4 <_Z25selectedTemperatureSensorv+0x84>)
   db47e:	a804      	add	r0, sp, #16
   db480:	f008 fcdd 	bl	e3e3e <_ZN6String6concatEPKc>
    return Flags<TagT, ValueT>(val_ | flags.val_);
   db484:	4b18      	ldr	r3, [pc, #96]	; (db4e8 <_Z25selectedTemperatureSensorv+0x88>)
   db486:	4a19      	ldr	r2, [pc, #100]	; (db4ec <_Z25selectedTemperatureSensorv+0x8c>)
   db488:	781b      	ldrb	r3, [r3, #0]
   db48a:	7812      	ldrb	r2, [r2, #0]
   db48c:	4918      	ldr	r1, [pc, #96]	; (db4f0 <_Z25selectedTemperatureSensorv+0x90>)
   db48e:	4313      	orrs	r3, r2
   db490:	f88d 3000 	strb.w	r3, [sp]
   db494:	9a04      	ldr	r2, [sp, #16]
   db496:	233c      	movs	r3, #60	; 0x3c
   db498:	a802      	add	r0, sp, #8
   db49a:	f006 f9df 	bl	e185c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   db49e:	9c03      	ldr	r4, [sp, #12]
   db4a0:	b17c      	cbz	r4, db4c2 <_Z25selectedTemperatureSensorv+0x62>
      if (--_M_use_count == 0)
   db4a2:	6863      	ldr	r3, [r4, #4]
   db4a4:	3b01      	subs	r3, #1
   db4a6:	6063      	str	r3, [r4, #4]
   db4a8:	b95b      	cbnz	r3, db4c2 <_Z25selectedTemperatureSensorv+0x62>
          _M_dispose();
   db4aa:	6823      	ldr	r3, [r4, #0]
   db4ac:	4620      	mov	r0, r4
   db4ae:	689b      	ldr	r3, [r3, #8]
   db4b0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   db4b2:	68a3      	ldr	r3, [r4, #8]
   db4b4:	3b01      	subs	r3, #1
   db4b6:	60a3      	str	r3, [r4, #8]
   db4b8:	b91b      	cbnz	r3, db4c2 <_Z25selectedTemperatureSensorv+0x62>
            _M_destroy();
   db4ba:	6823      	ldr	r3, [r4, #0]
   db4bc:	4620      	mov	r0, r4
   db4be:	68db      	ldr	r3, [r3, #12]
   db4c0:	4798      	blx	r3
  String jsonString = String("{\"v\": \"1\",\n\"temp_sensor\": ");
   db4c2:	a804      	add	r0, sp, #16
  else if (selected_temperature_sensor == DIGITAL_INPUT)
    jsonString += "\"Digital\"\n";

  jsonString += "}\n";
  Particle.publish("gx_event", jsonString, PRIVATE, WITH_ACK);
  return selected_temperature_sensor;
   db4c4:	782c      	ldrb	r4, [r5, #0]
  String jsonString = String("{\"v\": \"1\",\n\"temp_sensor\": ");
   db4c6:	f008 fb57 	bl	e3b78 <_ZN6StringD1Ev>
}
   db4ca:	4620      	mov	r0, r4
   db4cc:	b009      	add	sp, #36	; 0x24
   db4ce:	bd30      	pop	{r4, r5, pc}
  else if (selected_temperature_sensor == DIGITAL_INPUT)
   db4d0:	2b01      	cmp	r3, #1
   db4d2:	d1d3      	bne.n	db47c <_Z25selectedTemperatureSensorv+0x1c>
   db4d4:	4907      	ldr	r1, [pc, #28]	; (db4f4 <_Z25selectedTemperatureSensorv+0x94>)
   db4d6:	e7ce      	b.n	db476 <_Z25selectedTemperatureSensorv+0x16>
   db4d8:	2003e1ff 	.word	0x2003e1ff
   db4dc:	000e72d7 	.word	0x000e72d7
   db4e0:	000e7a3e 	.word	0x000e7a3e
   db4e4:	000e72fd 	.word	0x000e72fd
   db4e8:	2003e1fc 	.word	0x2003e1fc
   db4ec:	2003e1fd 	.word	0x2003e1fd
   db4f0:	000e705b 	.word	0x000e705b
   db4f4:	000e72f2 	.word	0x000e72f2

000db4f8 <_GLOBAL__sub_I_sensor_reading_status>:
        val_(val) {
   db4f8:	4b03      	ldr	r3, [pc, #12]	; (db508 <_GLOBAL__sub_I_sensor_reading_status+0x10>)
   db4fa:	2201      	movs	r2, #1
   db4fc:	701a      	strb	r2, [r3, #0]
   db4fe:	4b03      	ldr	r3, [pc, #12]	; (db50c <_GLOBAL__sub_I_sensor_reading_status+0x14>)
   db500:	2208      	movs	r2, #8
   db502:	701a      	strb	r2, [r3, #0]
}
   db504:	4770      	bx	lr
   db506:	bf00      	nop
   db508:	2003e1fc 	.word	0x2003e1fc
   db50c:	2003e1fd 	.word	0x2003e1fd

000db510 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   db510:	b510      	push	{r4, lr}
          _M_dispose();
   db512:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   db514:	4604      	mov	r4, r0
          _M_dispose();
   db516:	689b      	ldr	r3, [r3, #8]
   db518:	4798      	blx	r3
          if (--_M_weak_count == 0)
   db51a:	68a3      	ldr	r3, [r4, #8]
   db51c:	3b01      	subs	r3, #1
   db51e:	60a3      	str	r3, [r4, #8]
   db520:	b92b      	cbnz	r3, db52e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   db522:	6823      	ldr	r3, [r4, #0]
   db524:	4620      	mov	r0, r4
   db526:	68db      	ldr	r3, [r3, #12]
    }
   db528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   db52c:	4718      	bx	r3
    }
   db52e:	bd10      	pop	{r4, pc}

000db530 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list.isra.0>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   db530:	b510      	push	{r4, lr}
    attr.flags = 0;
   db532:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   db536:	b08a      	sub	sp, #40	; 0x28
   db538:	4604      	mov	r4, r0
   db53a:	4608      	mov	r0, r1
    attr.flags = 0;
   db53c:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   db53e:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   db542:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   db546:	460b      	mov	r3, r1
   db548:	aa02      	add	r2, sp, #8
   db54a:	4621      	mov	r1, r4
   db54c:	f005 fdc2 	bl	e10d4 <log_message_v>
}
   db550:	b00a      	add	sp, #40	; 0x28
   db552:	bd10      	pop	{r4, pc}

000db554 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   db554:	b40e      	push	{r1, r2, r3}
   db556:	b503      	push	{r0, r1, lr}
   db558:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   db55a:	6800      	ldr	r0, [r0, #0]
inline void spark::Logger::trace(const char *fmt, ...) const {
   db55c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   db560:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   db562:	2101      	movs	r1, #1
   db564:	f7ff ffe4 	bl	db530 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list.isra.0>
}
   db568:	b002      	add	sp, #8
   db56a:	f85d eb04 	ldr.w	lr, [sp], #4
   db56e:	b003      	add	sp, #12
   db570:	4770      	bx	lr

000db572 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   db572:	b40e      	push	{r1, r2, r3}
   db574:	b503      	push	{r0, r1, lr}
   db576:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   db578:	6800      	ldr	r0, [r0, #0]
inline void spark::Logger::error(const char *fmt, ...) const {
   db57a:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   db57e:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   db580:	2132      	movs	r1, #50	; 0x32
   db582:	f7ff ffd5 	bl	db530 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list.isra.0>
}
   db586:	b002      	add	sp, #8
   db588:	f85d eb04 	ldr.w	lr, [sp], #4
   db58c:	b003      	add	sp, #12
   db58e:	4770      	bx	lr

000db590 <_Z17performSHYFTResetv>:
  Log.info("Hitting resetDelay timer!");
  performSHYFTReset();
}

void performSHYFTReset()
{
   db590:	b507      	push	{r0, r1, r2, lr}
  Log.trace("Going down for system reset. See ya later.");
   db592:	490b      	ldr	r1, [pc, #44]	; (db5c0 <_Z17performSHYFTResetv+0x30>)
   db594:	480b      	ldr	r0, [pc, #44]	; (db5c4 <_Z17performSHYFTResetv+0x34>)
   db596:	f7ff ffdd 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>

  if (hardResetRequested)
   db59a:	4b0b      	ldr	r3, [pc, #44]	; (db5c8 <_Z17performSHYFTResetv+0x38>)
   db59c:	781b      	ldrb	r3, [r3, #0]
   db59e:	b14b      	cbz	r3, db5b4 <_Z17performSHYFTResetv+0x24>
  {
    System.sleep(SLEEP_MODE_DEEP, 5);
   db5a0:	4b0a      	ldr	r3, [pc, #40]	; (db5cc <_Z17performSHYFTResetv+0x3c>)
   db5a2:	2205      	movs	r2, #5
   db5a4:	681b      	ldr	r3, [r3, #0]
   db5a6:	2101      	movs	r1, #1
   db5a8:	4668      	mov	r0, sp
   db5aa:	f008 fd6f 	bl	e408c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
  }
  else
  {
    System.reset();
  }
}
   db5ae:	b003      	add	sp, #12
   db5b0:	f85d fb04 	ldr.w	pc, [sp], #4
   db5b4:	b003      	add	sp, #12
   db5b6:	f85d eb04 	ldr.w	lr, [sp], #4
    System.reset();
   db5ba:	f008 bd64 	b.w	e4086 <_ZN11SystemClass5resetEv>
   db5be:	bf00      	nop
   db5c0:	000e7300 	.word	0x000e7300
   db5c4:	2003e61c 	.word	0x2003e61c
   db5c8:	2003e21a 	.word	0x2003e21a
   db5cc:	2003e214 	.word	0x2003e214

000db5d0 <_Z20setPerformSHYFTResetv>:
{
   db5d0:	b508      	push	{r3, lr}
  shouldPerformSHYFTReset = true;
   db5d2:	4b05      	ldr	r3, [pc, #20]	; (db5e8 <_Z20setPerformSHYFTResetv+0x18>)
  Log.info("Hitting resetDelay timer!");
   db5d4:	4905      	ldr	r1, [pc, #20]	; (db5ec <_Z20setPerformSHYFTResetv+0x1c>)
   db5d6:	4806      	ldr	r0, [pc, #24]	; (db5f0 <_Z20setPerformSHYFTResetv+0x20>)
  shouldPerformSHYFTReset = true;
   db5d8:	2201      	movs	r2, #1
   db5da:	701a      	strb	r2, [r3, #0]
  Log.info("Hitting resetDelay timer!");
   db5dc:	f7fe fa6c 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
}
   db5e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  performSHYFTReset();
   db5e4:	f7ff bfd4 	b.w	db590 <_Z17performSHYFTResetv>
   db5e8:	2003e21b 	.word	0x2003e21b
   db5ec:	000e732b 	.word	0x000e732b
   db5f0:	2003e61c 	.word	0x2003e61c

000db5f4 <_Z17triggerCloudReset6String>:

int triggerCloudReset(String command)
{
   db5f4:	b513      	push	{r0, r1, r4, lr}
  Log.info("Received cloud reset command: resetting momentarily.");
   db5f6:	4916      	ldr	r1, [pc, #88]	; (db650 <_Z17triggerCloudReset6String+0x5c>)
{
   db5f8:	4604      	mov	r4, r0
  Log.info("Received cloud reset command: resetting momentarily.");
   db5fa:	4816      	ldr	r0, [pc, #88]	; (db654 <_Z17triggerCloudReset6String+0x60>)
   db5fc:	f7fe fa5c 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   db600:	4915      	ldr	r1, [pc, #84]	; (db658 <_Z17triggerCloudReset6String+0x64>)
   db602:	4620      	mov	r0, r4
   db604:	f008 fc7c 	bl	e3f00 <_ZNK6String6equalsEPKc>

  Reset::Reason resetReason;

  if (command == "1")
   db608:	b1f8      	cbz	r0, db64a <_Z17triggerCloudReset6String+0x56>
  {
    hardResetRequested = true;
   db60a:	4b14      	ldr	r3, [pc, #80]	; (db65c <_Z17triggerCloudReset6String+0x68>)
   db60c:	2201      	movs	r2, #1
   db60e:	701a      	strb	r2, [r3, #0]
    resetReason = Reset::Reason::CLOUD_RESET_HARD;
   db610:	218a      	movs	r1, #138	; 0x8a
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   db612:	4c13      	ldr	r4, [pc, #76]	; (db660 <_Z17triggerCloudReset6String+0x6c>)
  else
  {
    resetReason = Reset::Reason::CLOUD_RESET;
  }

  shyftStateMan.syncResetReason(resetReason, false);
   db614:	4813      	ldr	r0, [pc, #76]	; (db664 <_Z17triggerCloudReset6String+0x70>)
   db616:	2200      	movs	r2, #0
   db618:	f002 f832 	bl	dd680 <_ZN14SHYFTStateSync15syncResetReasonEN5Reset6ReasonEb>
   db61c:	68a0      	ldr	r0, [r4, #8]
   db61e:	b130      	cbz	r0, db62e <_Z17triggerCloudReset6String+0x3a>
   db620:	2300      	movs	r3, #0
   db622:	e9cd 3300 	strd	r3, r3, [sp]
   db626:	461a      	mov	r2, r3
   db628:	2102      	movs	r1, #2
   db62a:	f005 fb23 	bl	e0c74 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   db62e:	68a0      	ldr	r0, [r4, #8]
   db630:	b140      	cbz	r0, db644 <_Z17triggerCloudReset6String+0x50>
   db632:	2300      	movs	r3, #0
   db634:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   db638:	e9cd 2300 	strd	r2, r3, [sp]
   db63c:	4619      	mov	r1, r3
   db63e:	461a      	mov	r2, r3
   db640:	f005 fb18 	bl	e0c74 <os_timer_change>

  resetDelay.start();
  return 1;
}
   db644:	2001      	movs	r0, #1
   db646:	b002      	add	sp, #8
   db648:	bd10      	pop	{r4, pc}
    resetReason = Reset::Reason::CLOUD_RESET;
   db64a:	2194      	movs	r1, #148	; 0x94
   db64c:	e7e1      	b.n	db612 <_Z17triggerCloudReset6String+0x1e>
   db64e:	bf00      	nop
   db650:	000e7345 	.word	0x000e7345
   db654:	2003e61c 	.word	0x2003e61c
   db658:	000e7f31 	.word	0x000e7f31
   db65c:	2003e21a 	.word	0x2003e21a
   db660:	2003e4ac 	.word	0x2003e4ac
   db664:	2003e4cc 	.word	0x2003e4cc

000db668 <_Z16checkHwdWatchdogv>:

void checkHwdWatchdog()
{
   db668:	b508      	push	{r3, lr}
  digitalWrite(timer_pin, LOW);
   db66a:	2100      	movs	r1, #0
   db66c:	2008      	movs	r0, #8
   db66e:	f009 f83e 	bl	e46ee <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   db672:	2001      	movs	r0, #1
   db674:	f005 fb4e 	bl	e0d14 <HAL_Delay_Microseconds>
  delayMicroseconds(1);
  digitalWrite(timer_pin, HIGH);
}
   db678:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(timer_pin, HIGH);
   db67c:	2101      	movs	r1, #1
   db67e:	2008      	movs	r0, #8
   db680:	f009 b835 	b.w	e46ee <digitalWrite>

000db684 <_Z18setElectronChrgOffb>:

void setElectronChrgOff(bool disable)
{
   db684:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   db686:	4604      	mov	r4, r0
  PMIC pmic;
   db688:	2100      	movs	r1, #0
   db68a:	a801      	add	r0, sp, #4
   db68c:	f007 ff95 	bl	e35ba <_ZN4PMICC1Eb>

  if (disable)
   db690:	b1dc      	cbz	r4, db6ca <_Z18setElectronChrgOffb+0x46>
  {
    Log.trace("Setting PMIC Charger Off, and FuelGauge to sleep.");
   db692:	4915      	ldr	r1, [pc, #84]	; (db6e8 <_Z18setElectronChrgOffb+0x64>)
   db694:	4815      	ldr	r0, [pc, #84]	; (db6ec <_Z18setElectronChrgOffb+0x68>)
   db696:	f7ff ff5d 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>
    pmic.begin();
   db69a:	a801      	add	r0, sp, #4
   db69c:	f007 ff95 	bl	e35ca <_ZN4PMIC5beginEv>
    pmic.disableBATFET();
   db6a0:	a801      	add	r0, sp, #4
   db6a2:	f008 f86e 	bl	e3782 <_ZN4PMIC13disableBATFETEv>
    pmic.disableCharging();
   db6a6:	a801      	add	r0, sp, #4
   db6a8:	f008 f841 	bl	e372e <_ZN4PMIC15disableChargingEv>

    FuelGauge fg;
   db6ac:	2100      	movs	r1, #0
   db6ae:	a802      	add	r0, sp, #8
   db6b0:	f006 fa94 	bl	e1bdc <_ZN9FuelGaugeC1Eb>
    fg.sleep();
   db6b4:	a802      	add	r0, sp, #8
   db6b6:	f006 fbbb 	bl	e1e30 <_ZN9FuelGauge5sleepEv>
    FuelGauge fg;
   db6ba:	a802      	add	r0, sp, #8
   db6bc:	f006 fa9e 	bl	e1bfc <_ZN9FuelGaugeD1Ev>
  PMIC pmic;
   db6c0:	a801      	add	r0, sp, #4
   db6c2:	f007 ff99 	bl	e35f8 <_ZN4PMICD1Ev>
    Log.trace("Setting PMIC Charger On");
    pmic.begin();
    pmic.enableBATFET();
    pmic.enableCharging();
  }
}
   db6c6:	b004      	add	sp, #16
   db6c8:	bd10      	pop	{r4, pc}
    Log.trace("Setting PMIC Charger On");
   db6ca:	4909      	ldr	r1, [pc, #36]	; (db6f0 <_Z18setElectronChrgOffb+0x6c>)
   db6cc:	4807      	ldr	r0, [pc, #28]	; (db6ec <_Z18setElectronChrgOffb+0x68>)
   db6ce:	f7ff ff41 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>
    pmic.begin();
   db6d2:	a801      	add	r0, sp, #4
   db6d4:	f007 ff79 	bl	e35ca <_ZN4PMIC5beginEv>
    pmic.enableBATFET();
   db6d8:	a801      	add	r0, sp, #4
   db6da:	f008 f83d 	bl	e3758 <_ZN4PMIC12enableBATFETEv>
    pmic.enableCharging();
   db6de:	a801      	add	r0, sp, #4
   db6e0:	f008 f80e 	bl	e3700 <_ZN4PMIC14enableChargingEv>
   db6e4:	e7ec      	b.n	db6c0 <_Z18setElectronChrgOffb+0x3c>
   db6e6:	bf00      	nop
   db6e8:	000e737a 	.word	0x000e737a
   db6ec:	2003e61c 	.word	0x2003e61c
   db6f0:	000e73ac 	.word	0x000e73ac

000db6f4 <_Z17checkLastLoopTimev>:

void checkLastLoopTime()
{
   db6f4:	b538      	push	{r3, r4, r5, lr}
  unsigned long lastLoopMillis = loop_millis;
   db6f6:	4d07      	ldr	r5, [pc, #28]	; (db714 <_Z17checkLastLoopTimev+0x20>)
   db6f8:	682c      	ldr	r4, [r5, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   db6fa:	f005 fb13 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
  loop_millis = millis();
   db6fe:	6028      	str	r0, [r5, #0]
  unsigned long diff = loop_millis - lastLoopMillis;

  if (lastLoopMillis != 0 && diff > LONG_LOOP_THRESHOLD)
   db700:	b13c      	cbz	r4, db712 <_Z17checkLastLoopTimev+0x1e>
  unsigned long diff = loop_millis - lastLoopMillis;
   db702:	1b02      	subs	r2, r0, r4
  if (lastLoopMillis != 0 && diff > LONG_LOOP_THRESHOLD)
   db704:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
   db708:	d903      	bls.n	db712 <_Z17checkLastLoopTimev+0x1e>
  {
    Log.warn("Warning: long loops of %lums", diff);
   db70a:	4903      	ldr	r1, [pc, #12]	; (db718 <_Z17checkLastLoopTimev+0x24>)
   db70c:	4803      	ldr	r0, [pc, #12]	; (db71c <_Z17checkLastLoopTimev+0x28>)
   db70e:	f7ff fbd9 	bl	daec4 <_ZNK5spark6Logger4warnEPKcz>
  }
}
   db712:	bd38      	pop	{r3, r4, r5, pc}
   db714:	2003e47c 	.word	0x2003e47c
   db718:	000e73c4 	.word	0x000e73c4
   db71c:	2003e61c 	.word	0x2003e61c

000db720 <_Z23checkAndCleanFileSystemR8GXSpiffsR6StringPKc>:

void checkAndCleanFileSystem(GXSpiffs &GXPartition, SPIFFS_FILE_KEY &file_key, SPIFFS_PARTITION_KEY_FRMT file_name_format)
{
	GXPartition.cleanStorage(file_key, file_name_format);
   db720:	f000 bc78 	b.w	dc014 <_ZN8GXSpiffs12cleanStorageER6StringPKc>

000db724 <_Z12publishErrorPKcs>:
  publishError(src, ec);
  Log.error(err_log);
}

void publishError(const char* src, ErrCode ec)
{
   db724:	b530      	push	{r4, r5, lr}
   db726:	b08f      	sub	sp, #60	; 0x3c
   db728:	4605      	mov	r5, r0
   db72a:	460c      	mov	r4, r1
  String jsonString = "{\"e\":\"gx_error\", \"s\":";
   db72c:	a802      	add	r0, sp, #8
   db72e:	4939      	ldr	r1, [pc, #228]	; (db814 <_Z12publishErrorPKcs+0xf0>)
   db730:	f008 fa6d 	bl	e3c0e <_ZN6StringC1EPKc>
	StringSumHelper(const char *p) : String(p) {}
   db734:	4938      	ldr	r1, [pc, #224]	; (db818 <_Z12publishErrorPKcs+0xf4>)
   db736:	a80a      	add	r0, sp, #40	; 0x28
   db738:	f008 fa69 	bl	e3c0e <_ZN6StringC1EPKc>
  jsonString += "\"" + String(src) + "\",";
   db73c:	4629      	mov	r1, r5
   db73e:	a806      	add	r0, sp, #24
   db740:	f008 fa65 	bl	e3c0e <_ZN6StringC1EPKc>
   db744:	a906      	add	r1, sp, #24
   db746:	a80a      	add	r0, sp, #40	; 0x28
   db748:	f008 fb97 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
   db74c:	4933      	ldr	r1, [pc, #204]	; (db81c <_Z12publishErrorPKcs+0xf8>)
   db74e:	f008 fba0 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   db752:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   db754:	a802      	add	r0, sp, #8
   db756:	f008 fb6e 	bl	e3e36 <_ZN6String6concatERKS_>
   db75a:	a806      	add	r0, sp, #24
   db75c:	f008 fa0c 	bl	e3b78 <_ZN6StringD1Ev>
class StringSumHelper : public String
   db760:	a80a      	add	r0, sp, #40	; 0x28
   db762:	f008 fa09 	bl	e3b78 <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
   db766:	492e      	ldr	r1, [pc, #184]	; (db820 <_Z12publishErrorPKcs+0xfc>)
   db768:	a80a      	add	r0, sp, #40	; 0x28
   db76a:	f008 fa50 	bl	e3c0e <_ZN6StringC1EPKc>
  jsonString += "\"c\":\"" + String(ec) + "\"";
   db76e:	220a      	movs	r2, #10
   db770:	4621      	mov	r1, r4
   db772:	a806      	add	r0, sp, #24
   db774:	f008 facd 	bl	e3d12 <_ZN6StringC1Eih>
   db778:	a906      	add	r1, sp, #24
   db77a:	a80a      	add	r0, sp, #40	; 0x28
   db77c:	f008 fb7d 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
   db780:	4925      	ldr	r1, [pc, #148]	; (db818 <_Z12publishErrorPKcs+0xf4>)
   db782:	f008 fb86 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   db786:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   db788:	a802      	add	r0, sp, #8
   db78a:	f008 fb54 	bl	e3e36 <_ZN6String6concatERKS_>
   db78e:	a806      	add	r0, sp, #24
   db790:	f008 f9f2 	bl	e3b78 <_ZN6StringD1Ev>
class StringSumHelper : public String
   db794:	a80a      	add	r0, sp, #40	; 0x28
   db796:	f008 f9ef 	bl	e3b78 <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
   db79a:	4922      	ldr	r1, [pc, #136]	; (db824 <_Z12publishErrorPKcs+0x100>)
   db79c:	a80a      	add	r0, sp, #40	; 0x28
   db79e:	f008 fa36 	bl	e3c0e <_ZN6StringC1EPKc>
  jsonString += (", \"ts\":" + String(Time.now()));
   db7a2:	f008 fce1 	bl	e4168 <_ZN9TimeClass3nowEv>
   db7a6:	220a      	movs	r2, #10
   db7a8:	4601      	mov	r1, r0
   db7aa:	a806      	add	r0, sp, #24
   db7ac:	f008 fad7 	bl	e3d5e <_ZN6StringC1Elh>
   db7b0:	a906      	add	r1, sp, #24
   db7b2:	a80a      	add	r0, sp, #40	; 0x28
   db7b4:	f008 fb61 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
   db7b8:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   db7ba:	a802      	add	r0, sp, #8
   db7bc:	f008 fb3b 	bl	e3e36 <_ZN6String6concatERKS_>
   db7c0:	a806      	add	r0, sp, #24
   db7c2:	f008 f9d9 	bl	e3b78 <_ZN6StringD1Ev>
class StringSumHelper : public String
   db7c6:	a80a      	add	r0, sp, #40	; 0x28
   db7c8:	f008 f9d6 	bl	e3b78 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   db7cc:	4916      	ldr	r1, [pc, #88]	; (db828 <_Z12publishErrorPKcs+0x104>)
   db7ce:	a802      	add	r0, sp, #8
   db7d0:	f008 fb35 	bl	e3e3e <_ZN6String6concatEPKc>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   db7d4:	f005 fd2c 	bl	e1230 <spark_cloud_flag_connected>
  jsonString += "}";

  if (!Particle.connected()) return;
   db7d8:	b920      	cbnz	r0, db7e4 <_Z12publishErrorPKcs+0xc0>
  String jsonString = "{\"e\":\"gx_error\", \"s\":";
   db7da:	a802      	add	r0, sp, #8
   db7dc:	f008 f9cc 	bl	e3b78 <_ZN6StringD1Ev>
  Particle.publish("gx_error", jsonString, PRIVATE, WITH_ACK);
}
   db7e0:	b00f      	add	sp, #60	; 0x3c
   db7e2:	bd30      	pop	{r4, r5, pc}
    return Flags<TagT, ValueT>(val_ | flags.val_);
   db7e4:	4b11      	ldr	r3, [pc, #68]	; (db82c <_Z12publishErrorPKcs+0x108>)
   db7e6:	4a12      	ldr	r2, [pc, #72]	; (db830 <_Z12publishErrorPKcs+0x10c>)
   db7e8:	781b      	ldrb	r3, [r3, #0]
   db7ea:	7812      	ldrb	r2, [r2, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   db7ec:	4911      	ldr	r1, [pc, #68]	; (db834 <_Z12publishErrorPKcs+0x110>)
   db7ee:	4313      	orrs	r3, r2
   db7f0:	f88d 3000 	strb.w	r3, [sp]
   db7f4:	a80a      	add	r0, sp, #40	; 0x28
   db7f6:	9a02      	ldr	r2, [sp, #8]
   db7f8:	233c      	movs	r3, #60	; 0x3c
   db7fa:	f006 f82f 	bl	e185c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   db7fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
   db800:	2800      	cmp	r0, #0
   db802:	d0ea      	beq.n	db7da <_Z12publishErrorPKcs+0xb6>
      if (--_M_use_count == 0)
   db804:	6843      	ldr	r3, [r0, #4]
   db806:	3b01      	subs	r3, #1
   db808:	6043      	str	r3, [r0, #4]
   db80a:	2b00      	cmp	r3, #0
   db80c:	d1e5      	bne.n	db7da <_Z12publishErrorPKcs+0xb6>
   db80e:	f7ff fe7f 	bl	db510 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
   db812:	e7e2      	b.n	db7da <_Z12publishErrorPKcs+0xb6>
   db814:	000e73e1 	.word	0x000e73e1
   db818:	000e70af 	.word	0x000e70af
   db81c:	000e7d83 	.word	0x000e7d83
   db820:	000e704b 	.word	0x000e704b
   db824:	000e73f7 	.word	0x000e73f7
   db828:	000e70b5 	.word	0x000e70b5
   db82c:	2003e218 	.word	0x2003e218
   db830:	2003e219 	.word	0x2003e219
   db834:	000e7087 	.word	0x000e7087

000db838 <_Z20publishAndLogMetricsR6StringPKc>:

bool publishAndLogMetrics(String &publishString, const char* logString)
{
   db838:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   db83a:	4606      	mov	r6, r0
   db83c:	460d      	mov	r5, r1
    static bool connected(void) { return spark_cloud_flag_connected(); }
   db83e:	f005 fcf7 	bl	e1230 <spark_cloud_flag_connected>
  if (!Particle.connected()) return false;
   db842:	4604      	mov	r4, r0
   db844:	b1c0      	cbz	r0, db878 <_Z20publishAndLogMetricsR6StringPKc+0x40>
   db846:	4b0e      	ldr	r3, [pc, #56]	; (db880 <_Z20publishAndLogMetricsR6StringPKc+0x48>)
   db848:	4a0e      	ldr	r2, [pc, #56]	; (db884 <_Z20publishAndLogMetricsR6StringPKc+0x4c>)
   db84a:	781b      	ldrb	r3, [r3, #0]
   db84c:	7812      	ldrb	r2, [r2, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   db84e:	490e      	ldr	r1, [pc, #56]	; (db888 <_Z20publishAndLogMetricsR6StringPKc+0x50>)
   db850:	4313      	orrs	r3, r2
   db852:	f88d 3000 	strb.w	r3, [sp]
   db856:	a802      	add	r0, sp, #8
   db858:	6832      	ldr	r2, [r6, #0]
   db85a:	233c      	movs	r3, #60	; 0x3c
   db85c:	f005 fffe 	bl	e185c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   db860:	9803      	ldr	r0, [sp, #12]
   db862:	b128      	cbz	r0, db870 <_Z20publishAndLogMetricsR6StringPKc+0x38>
      if (--_M_use_count == 0)
   db864:	6843      	ldr	r3, [r0, #4]
   db866:	3b01      	subs	r3, #1
   db868:	6043      	str	r3, [r0, #4]
   db86a:	b90b      	cbnz	r3, db870 <_Z20publishAndLogMetricsR6StringPKc+0x38>
   db86c:	f7ff fe50 	bl	db510 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>

  Particle.publish("gx_metrics", publishString, PRIVATE, WITH_ACK);
  Log.info(logString);
   db870:	4806      	ldr	r0, [pc, #24]	; (db88c <_Z20publishAndLogMetricsR6StringPKc+0x54>)
   db872:	4629      	mov	r1, r5
   db874:	f7fe f920 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
  return true;
}
   db878:	4620      	mov	r0, r4
   db87a:	b004      	add	sp, #16
   db87c:	bd70      	pop	{r4, r5, r6, pc}
   db87e:	bf00      	nop
   db880:	2003e218 	.word	0x2003e218
   db884:	2003e219 	.word	0x2003e219
   db888:	000e70c4 	.word	0x000e70c4
   db88c:	2003e61c 	.word	0x2003e61c

000db890 <_Z11enableFlashR6String>:

int enableFlash(String &command)
{
   db890:	b570      	push	{r4, r5, r6, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   db892:	491d      	ldr	r1, [pc, #116]	; (db908 <_Z11enableFlashR6String+0x78>)
   db894:	4604      	mov	r4, r0
   db896:	f008 fb33 	bl	e3f00 <_ZNK6String6equalsEPKc>
  if (command == "") return EEPROM.get(EEPROM_ADDR_USE_FLASH, use_flash);
   db89a:	b150      	cbz	r0, db8b2 <_Z11enableFlashR6String+0x22>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   db89c:	4c1b      	ldr	r4, [pc, #108]	; (db90c <_Z11enableFlashR6String+0x7c>)
   db89e:	f008 ff57 	bl	e4750 <_Z21__fetch_global_EEPROMv>
   db8a2:	f240 207b 	movw	r0, #635	; 0x27b
   db8a6:	2201      	movs	r2, #1
   db8a8:	4621      	mov	r1, r4
   db8aa:	f005 fa4b 	bl	e0d44 <HAL_EEPROM_Get>
   db8ae:	7820      	ldrb	r0, [r4, #0]
    use_flash = comm;
    EEPROM.put(EEPROM_ADDR_USE_FLASH, use_flash);
    shouldPerformSHYFTReset = true;
  }
  return comm;
}
   db8b0:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t comm = atoi(command);
   db8b2:	6820      	ldr	r0, [r4, #0]
   db8b4:	f009 feae 	bl	e5614 <atoi>
   db8b8:	b2c4      	uxtb	r4, r0
  if (comm > 1) return -1;
   db8ba:	2c01      	cmp	r4, #1
   db8bc:	d820      	bhi.n	db900 <_Z11enableFlashR6String+0x70>
  if (comm == 0 && use_flash != comm) {
   db8be:	4d13      	ldr	r5, [pc, #76]	; (db90c <_Z11enableFlashR6String+0x7c>)
   db8c0:	782b      	ldrb	r3, [r5, #0]
   db8c2:	b974      	cbnz	r4, db8e2 <_Z11enableFlashR6String+0x52>
   db8c4:	b15b      	cbz	r3, db8de <_Z11enableFlashR6String+0x4e>
    use_flash = comm;
   db8c6:	702c      	strb	r4, [r5, #0]
    EEPROM.put(EEPROM_ADDR_USE_FLASH, use_flash);
   db8c8:	f008 ff42 	bl	e4750 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   db8cc:	2201      	movs	r2, #1
   db8ce:	4629      	mov	r1, r5
   db8d0:	f240 207b 	movw	r0, #635	; 0x27b
   db8d4:	f005 fa3e 	bl	e0d54 <HAL_EEPROM_Put>
    shouldPerformSHYFTReset = true;
   db8d8:	4b0d      	ldr	r3, [pc, #52]	; (db910 <_Z11enableFlashR6String+0x80>)
   db8da:	2201      	movs	r2, #1
   db8dc:	701a      	strb	r2, [r3, #0]
  return comm;
   db8de:	4620      	mov	r0, r4
   db8e0:	e7e6      	b.n	db8b0 <_Z11enableFlashR6String+0x20>
  else if (comm == 1 && use_flash != comm){
   db8e2:	2b01      	cmp	r3, #1
   db8e4:	d0fb      	beq.n	db8de <_Z11enableFlashR6String+0x4e>
    use_flash = comm;
   db8e6:	2601      	movs	r6, #1
   db8e8:	702e      	strb	r6, [r5, #0]
    EEPROM.put(EEPROM_ADDR_USE_FLASH, use_flash);
   db8ea:	f008 ff31 	bl	e4750 <_Z21__fetch_global_EEPROMv>
   db8ee:	4632      	mov	r2, r6
   db8f0:	4629      	mov	r1, r5
   db8f2:	f240 207b 	movw	r0, #635	; 0x27b
   db8f6:	f005 fa2d 	bl	e0d54 <HAL_EEPROM_Put>
    shouldPerformSHYFTReset = true;
   db8fa:	4b05      	ldr	r3, [pc, #20]	; (db910 <_Z11enableFlashR6String+0x80>)
   db8fc:	701e      	strb	r6, [r3, #0]
   db8fe:	e7ee      	b.n	db8de <_Z11enableFlashR6String+0x4e>
  if (comm > 1) return -1;
   db900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db904:	e7d4      	b.n	db8b0 <_Z11enableFlashR6String+0x20>
   db906:	bf00      	nop
   db908:	000e827d 	.word	0x000e827d
   db90c:	2003d980 	.word	0x2003d980
   db910:	2003e21b 	.word	0x2003e21b

000db914 <_Z22saveGXPublishIntervalsR6String>:

int saveGXPublishIntervals(String &command)
{
   db914:	b530      	push	{r4, r5, lr}
  // Baundary values to check before storing an interval for GX a metric to the EEPROM 
  const uint16_t MIN_MTRC_INTERVL = 30, MAX_MTRC_INTERVL = 7200;
  const int MTRC_INTERVL_ERROR = -98;

  // EEPROM Addresses for the metric intervals
  const uint16_t MTRC_INTRVL_EEPROM_ADDR[NUM_OF_GX_METRICS] = 
   db916:	4b20      	ldr	r3, [pc, #128]	; (db998 <_Z22saveGXPublishIntervalsR6String+0x84>)
   db918:	4920      	ldr	r1, [pc, #128]	; (db99c <_Z22saveGXPublishIntervalsR6String+0x88>)
{
   db91a:	b08d      	sub	sp, #52	; 0x34
   db91c:	4605      	mov	r5, r0
  const uint16_t MTRC_INTRVL_EEPROM_ADDR[NUM_OF_GX_METRICS] = 
   db91e:	9302      	str	r3, [sp, #8]
   db920:	f103 1304 	add.w	r3, r3, #262148	; 0x40004
   db924:	9303      	str	r3, [sp, #12]
   db926:	f008 faeb 	bl	e3f00 <_ZNK6String6equalsEPKc>
  {EEPROM_ADDR_DEVICE_MTRC_INTERVL, EEPROM_ADDR_SENSOR_MTRC_INTERVL,
   EEPROM_ADDR_GEN_MTRC_INTERVL, EEPROM_ADDR_GRID_MTRC_INTERVL};

  // If the comand received is an empty string, raise the flag to publish the saved metric intervals.
  if (command == "")
   db92a:	b128      	cbz	r0, db938 <_Z22saveGXPublishIntervalsR6String+0x24>
  {
    pub_gx_intervls_flag = true;
   db92c:	4b1c      	ldr	r3, [pc, #112]	; (db9a0 <_Z22saveGXPublishIntervalsR6String+0x8c>)
   db92e:	2201      	movs	r2, #1
   db930:	701a      	strb	r2, [r3, #0]
    return NUM_OF_GX_METRICS;
   db932:	2004      	movs	r0, #4
    else
    { EEPROM.put(MTRC_INTRVL_EEPROM_ADDR[itratr], mtrc_intervl);}  
  }

  return NUM_OF_GX_METRICS;
}
   db934:	b00d      	add	sp, #52	; 0x34
   db936:	bd30      	pop	{r4, r5, pc}
   db938:	4604      	mov	r4, r0
    uint16_t mtrc_intervl = atoi(getStringValueAtIndex(command, COMMA_CHAR, itratr));
   db93a:	4629      	mov	r1, r5
   db93c:	a804      	add	r0, sp, #16
   db93e:	f008 f9b1 	bl	e3ca4 <_ZN6StringC1ERKS_>
   db942:	4623      	mov	r3, r4
   db944:	222c      	movs	r2, #44	; 0x2c
   db946:	a904      	add	r1, sp, #16
   db948:	a808      	add	r0, sp, #32
   db94a:	f001 fec9 	bl	dd6e0 <_Z21getStringValueAtIndex6Stringci>
   db94e:	9808      	ldr	r0, [sp, #32]
   db950:	f009 fe60 	bl	e5614 <atoi>
   db954:	f8ad 0006 	strh.w	r0, [sp, #6]
   db958:	a808      	add	r0, sp, #32
   db95a:	f008 f90d 	bl	e3b78 <_ZN6StringD1Ev>
   db95e:	a804      	add	r0, sp, #16
   db960:	f008 f90a 	bl	e3b78 <_ZN6StringD1Ev>
    if((mtrc_intervl < MIN_MTRC_INTERVL) || (mtrc_intervl > MAX_MTRC_INTERVL))
   db964:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   db968:	3b1e      	subs	r3, #30
   db96a:	b29b      	uxth	r3, r3
   db96c:	f641 4202 	movw	r2, #7170	; 0x1c02
   db970:	4293      	cmp	r3, r2
   db972:	d902      	bls.n	db97a <_Z22saveGXPublishIntervalsR6String+0x66>
    { return MTRC_INTERVL_ERROR; }
   db974:	f06f 0061 	mvn.w	r0, #97	; 0x61
   db978:	e7dc      	b.n	db934 <_Z22saveGXPublishIntervalsR6String+0x20>
    { EEPROM.put(MTRC_INTRVL_EEPROM_ADDR[itratr], mtrc_intervl);}  
   db97a:	f008 fee9 	bl	e4750 <_Z21__fetch_global_EEPROMv>
   db97e:	ab02      	add	r3, sp, #8
   db980:	2202      	movs	r2, #2
   db982:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
   db986:	f10d 0106 	add.w	r1, sp, #6
   db98a:	3401      	adds	r4, #1
   db98c:	f005 f9e2 	bl	e0d54 <HAL_EEPROM_Put>
  for (uint8_t itratr = DEVICE_MTRC; itratr < ALL_GX_MTRC; itratr++)
   db990:	2c04      	cmp	r4, #4
   db992:	d1d2      	bne.n	db93a <_Z22saveGXPublishIntervalsR6String+0x26>
  return NUM_OF_GX_METRICS;
   db994:	4620      	mov	r0, r4
   db996:	e7cd      	b.n	db934 <_Z22saveGXPublishIntervalsR6String+0x20>
   db998:	0280027e 	.word	0x0280027e
   db99c:	000e827d 	.word	0x000e827d
   db9a0:	2003e498 	.word	0x2003e498

000db9a4 <_GLOBAL__sub_I_GX_metric_key>:
        val_(val) {
   db9a4:	4b0a      	ldr	r3, [pc, #40]	; (db9d0 <_GLOBAL__sub_I_GX_metric_key+0x2c>)
SPIFFS_FILE_KEY GX_metric_key = "met";
   db9a6:	490b      	ldr	r1, [pc, #44]	; (db9d4 <_GLOBAL__sub_I_GX_metric_key+0x30>)
   db9a8:	2200      	movs	r2, #0
}
   db9aa:	b510      	push	{r4, lr}
   db9ac:	601a      	str	r2, [r3, #0]
   db9ae:	4b0a      	ldr	r3, [pc, #40]	; (db9d8 <_GLOBAL__sub_I_GX_metric_key+0x34>)
SPIFFS_FILE_KEY GX_metric_key = "met";
   db9b0:	4c0a      	ldr	r4, [pc, #40]	; (db9dc <_GLOBAL__sub_I_GX_metric_key+0x38>)
   db9b2:	2201      	movs	r2, #1
   db9b4:	701a      	strb	r2, [r3, #0]
   db9b6:	4b0a      	ldr	r3, [pc, #40]	; (db9e0 <_GLOBAL__sub_I_GX_metric_key+0x3c>)
   db9b8:	2208      	movs	r2, #8
   db9ba:	701a      	strb	r2, [r3, #0]
   db9bc:	4620      	mov	r0, r4
   db9be:	f008 f926 	bl	e3c0e <_ZN6StringC1EPKc>
   db9c2:	4620      	mov	r0, r4
   db9c4:	4a07      	ldr	r2, [pc, #28]	; (db9e4 <_GLOBAL__sub_I_GX_metric_key+0x40>)
   db9c6:	4908      	ldr	r1, [pc, #32]	; (db9e8 <_GLOBAL__sub_I_GX_metric_key+0x44>)
}
   db9c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SPIFFS_FILE_KEY GX_metric_key = "met";
   db9cc:	f008 bf56 	b.w	e487c <__aeabi_atexit>
   db9d0:	2003e214 	.word	0x2003e214
   db9d4:	000e73ff 	.word	0x000e73ff
   db9d8:	2003e218 	.word	0x2003e218
   db9dc:	2003e204 	.word	0x2003e204
   db9e0:	2003e219 	.word	0x2003e219
   db9e4:	2003d9f8 	.word	0x2003d9f8
   db9e8:	000e3b79 	.word	0x000e3b79

000db9ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE3endEv.isra.0>:
    void end() {
   db9ec:	b510      	push	{r4, lr}
        static SPIClass instance(Interface);
   db9ee:	4c0b      	ldr	r4, [pc, #44]	; (dba1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE3endEv.isra.0+0x30>)
   db9f0:	7823      	ldrb	r3, [r4, #0]
   db9f2:	f3bf 8f5b 	dmb	ish
   db9f6:	07db      	lsls	r3, r3, #31
   db9f8:	d40a      	bmi.n	dba10 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE3endEv.isra.0+0x24>
   db9fa:	4620      	mov	r0, r4
   db9fc:	f7f8 fb5e 	bl	d40bc <__cxa_guard_acquire>
   dba00:	b130      	cbz	r0, dba10 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE3endEv.isra.0+0x24>
   dba02:	4807      	ldr	r0, [pc, #28]	; (dba20 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE3endEv.isra.0+0x34>)
   dba04:	2101      	movs	r1, #1
   dba06:	f007 ff81 	bl	e390c <_ZN8SPIClassC1E19hal_spi_interface_t>
   dba0a:	4620      	mov	r0, r4
   dba0c:	f7f8 fb5b 	bl	d40c6 <__cxa_guard_release>
    }
   dba10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        instance().end();
   dba14:	4802      	ldr	r0, [pc, #8]	; (dba20 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE3endEv.isra.0+0x34>)
   dba16:	f007 bfa7 	b.w	e3968 <_ZN8SPIClass3endEv>
   dba1a:	bf00      	nop
   dba1c:	2003e1f0 	.word	0x2003e1f0
   dba20:	2003e1f4 	.word	0x2003e1f4

000dba24 <_ZN8GXSpiffsC1EP15SpiFlashWinbondP14SpiffsParticle>:
extern char last_published_metric[20];

GXSpiffs::GXSpiffs(SpiFlashWinbond *_spiFlash, SpiffsParticle *_filesys)
{
    spiFlash = _spiFlash;
    filesys = _filesys;
   dba24:	e9c0 1200 	strd	r1, r2, [r0]
}
   dba28:	4770      	bx	lr
	...

000dba2c <_ZN8GXSpiffs16checkFreeStorageE21SPIFFS_PARTITION_TYPE>:
    spiffslog.trace("The oldest file is:");
    spiffslog.trace(prt_key_format, oldest_file_ts, oldest_file_idx);
}

s32_t GXSpiffs::checkFreeStorage(SPIFFS_PARTITION_TYPE prt_type = METRICS_PRT)
{
   dba2c:	b570      	push	{r4, r5, r6, lr}
    spiFlash->begin();
   dba2e:	4606      	mov	r6, r0
{
   dba30:	4604      	mov	r4, r0
    spiFlash->begin();
   dba32:	f856 0b0c 	ldr.w	r0, [r6], #12
   dba36:	6803      	ldr	r3, [r0, #0]
   dba38:	689b      	ldr	r3, [r3, #8]
{
   dba3a:	460d      	mov	r5, r1
    spiFlash->begin();
   dba3c:	4798      	blx	r3
	 * (repeated powerlosses in mending or gc) you might have to delete some files.
	 *
	 * @param total         total number of bytes in filesystem
	 * @param used          used number of bytes in filesystem
	 */
	inline s32_t info(u32_t *total, u32_t *used) { return SPIFFS_info(&fs, total, used); };
   dba3e:	6860      	ldr	r0, [r4, #4]
   dba40:	4632      	mov	r2, r6
   dba42:	f104 0108 	add.w	r1, r4, #8
   dba46:	3028      	adds	r0, #40	; 0x28
   dba48:	f7fa f8fe 	bl	d5c48 <SPIFFS_info>

    filesys->info(&total, &used);
    s32_t left;

    spiffslog.trace("Total storage capacity on the %s partiton: %lu bytes", 
   dba4c:	490d      	ldr	r1, [pc, #52]	; (dba84 <_ZN8GXSpiffs16checkFreeStorageE21SPIFFS_PARTITION_TYPE+0x58>)
   dba4e:	4a0e      	ldr	r2, [pc, #56]	; (dba88 <_ZN8GXSpiffs16checkFreeStorageE21SPIFFS_PARTITION_TYPE+0x5c>)
   dba50:	68a3      	ldr	r3, [r4, #8]
   dba52:	480e      	ldr	r0, [pc, #56]	; (dba8c <_ZN8GXSpiffs16checkFreeStorageE21SPIFFS_PARTITION_TYPE+0x60>)
   dba54:	2d00      	cmp	r5, #0
   dba56:	bf08      	it	eq
   dba58:	460a      	moveq	r2, r1
   dba5a:	490d      	ldr	r1, [pc, #52]	; (dba90 <_ZN8GXSpiffs16checkFreeStorageE21SPIFFS_PARTITION_TYPE+0x64>)
   dba5c:	f7ff fd7a 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>
                        (prt_type == METRICS_PRT) ? "Metrics" : "Test", total);

    spiffslog.trace("Used (bytes): %lu bytes", used);
   dba60:	68e2      	ldr	r2, [r4, #12]
   dba62:	490c      	ldr	r1, [pc, #48]	; (dba94 <_ZN8GXSpiffs16checkFreeStorageE21SPIFFS_PARTITION_TYPE+0x68>)
   dba64:	4809      	ldr	r0, [pc, #36]	; (dba8c <_ZN8GXSpiffs16checkFreeStorageE21SPIFFS_PARTITION_TYPE+0x60>)
   dba66:	f7ff fd75 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>
    
    left = total - used;
   dba6a:	e9d4 2402 	ldrd	r2, r4, [r4, #8]
   dba6e:	1b14      	subs	r4, r2, r4
    spiffslog.trace("Free (bytes): %li bytes\n", left);
   dba70:	4909      	ldr	r1, [pc, #36]	; (dba98 <_ZN8GXSpiffs16checkFreeStorageE21SPIFFS_PARTITION_TYPE+0x6c>)
   dba72:	4806      	ldr	r0, [pc, #24]	; (dba8c <_ZN8GXSpiffs16checkFreeStorageE21SPIFFS_PARTITION_TYPE+0x60>)
   dba74:	4622      	mov	r2, r4
   dba76:	f7ff fd6d 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>

    // Close the SPIFFS transaction
    SPI1.end();
   dba7a:	f7ff ffb7 	bl	db9ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE3endEv.isra.0>
    return left;
}
   dba7e:	4620      	mov	r0, r4
   dba80:	bd70      	pop	{r4, r5, r6, pc}
   dba82:	bf00      	nop
   dba84:	000e7dee 	.word	0x000e7dee
   dba88:	000e740e 	.word	0x000e740e
   dba8c:	2003e220 	.word	0x2003e220
   dba90:	000e7413 	.word	0x000e7413
   dba94:	000e7448 	.word	0x000e7448
   dba98:	000e7460 	.word	0x000e7460

000dba9c <_ZN8GXSpiffs23checkFreeStoragePercentEv>:

float GXSpiffs::checkFreeStoragePercent()
{
   dba9c:	b513      	push	{r0, r1, r4, lr}
   dba9e:	4604      	mov	r4, r0
   dbaa0:	6840      	ldr	r0, [r0, #4]
   dbaa2:	f104 020c 	add.w	r2, r4, #12
   dbaa6:	f104 0108 	add.w	r1, r4, #8
   dbaaa:	3028      	adds	r0, #40	; 0x28
   dbaac:	f7fa f8cc 	bl	d5c48 <SPIFFS_info>
    filesys->info(&total, &used);
    float percent_left = float(checkFreeStorage() / (float)total) * 100;
   dbab0:	2100      	movs	r1, #0
   dbab2:	4620      	mov	r0, r4
   dbab4:	f7ff ffba 	bl	dba2c <_ZN8GXSpiffs16checkFreeStorageE21SPIFFS_PARTITION_TYPE>
   dbab8:	ee07 0a90 	vmov	s15, r0
   dbabc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   dbac0:	edd4 7a02 	vldr	s15, [r4, #8]
   dbac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
   dbac8:	ee87 0a27 	vdiv.f32	s0, s14, s15
   dbacc:	eddf 7a09 	vldr	s15, [pc, #36]	; dbaf4 <_ZN8GXSpiffs23checkFreeStoragePercentEv+0x58>
   dbad0:	ee20 0a27 	vmul.f32	s0, s0, s15
    spiffslog.info("Free storage: %.2f%%", percent_left);
   dbad4:	ee10 0a10 	vmov	r0, s0
   dbad8:	ed8d 0a01 	vstr	s0, [sp, #4]
   dbadc:	f009 f89e 	bl	e4c1c <__aeabi_f2d>
   dbae0:	4602      	mov	r2, r0
   dbae2:	460b      	mov	r3, r1
   dbae4:	4804      	ldr	r0, [pc, #16]	; (dbaf8 <_ZN8GXSpiffs23checkFreeStoragePercentEv+0x5c>)
   dbae6:	4905      	ldr	r1, [pc, #20]	; (dbafc <_ZN8GXSpiffs23checkFreeStoragePercentEv+0x60>)
   dbae8:	f7fd ffe6 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>

    return percent_left;
}
   dbaec:	ed9d 0a01 	vldr	s0, [sp, #4]
   dbaf0:	b002      	add	sp, #8
   dbaf2:	bd10      	pop	{r4, pc}
   dbaf4:	42c80000 	.word	0x42c80000
   dbaf8:	2003e220 	.word	0x2003e220
   dbafc:	000e7479 	.word	0x000e7479

000dbb00 <_Z22fetchCounterFromEEPROMv>:
		buf[ii + 3] = (uint8_t) val;
	}
}

uint16_t fetchCounterFromEEPROM()
{
   dbb00:	b507      	push	{r0, r1, r2, lr}
    uint16_t counter;
    EEPROM.get(EEPROM_ADDR_SAVED_METRIC_COUNT, counter);
   dbb02:	f008 fe25 	bl	e4750 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   dbb06:	2202      	movs	r2, #2
   dbb08:	f10d 0106 	add.w	r1, sp, #6
   dbb0c:	f240 2009 	movw	r0, #521	; 0x209
   dbb10:	f005 f918 	bl	e0d44 <HAL_EEPROM_Get>
    if (counter == 0xFFFF || counter > MAX_COUNTER_VALUE)
   dbb14:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   dbb18:	f242 730f 	movw	r3, #9999	; 0x270f
   dbb1c:	429a      	cmp	r2, r3
   dbb1e:	d90b      	bls.n	dbb38 <_Z22fetchCounterFromEEPROMv+0x38>
    {
        // Set the counter if it hasn't been initialized or reset if it reaches max value.
        counter = 1;
   dbb20:	2301      	movs	r3, #1
   dbb22:	f8ad 3006 	strh.w	r3, [sp, #6]
        EEPROM.put(EEPROM_ADDR_SAVED_METRIC_COUNT, counter);
   dbb26:	f008 fe13 	bl	e4750 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   dbb2a:	2202      	movs	r2, #2
   dbb2c:	f10d 0106 	add.w	r1, sp, #6
   dbb30:	f240 2009 	movw	r0, #521	; 0x209
   dbb34:	f005 f90e 	bl	e0d54 <HAL_EEPROM_Put>
    }
    return counter;
}
   dbb38:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   dbb3c:	b003      	add	sp, #12
   dbb3e:	f85d fb04 	ldr.w	pc, [sp], #4

000dbb42 <_Z24incrementCounterInEEPROMv>:

void incrementCounterInEEPROM()
{
   dbb42:	b507      	push	{r0, r1, r2, lr}
    uint16_t counter;
    EEPROM.get(EEPROM_ADDR_SAVED_METRIC_COUNT, counter);
   dbb44:	f008 fe04 	bl	e4750 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   dbb48:	f10d 0106 	add.w	r1, sp, #6
   dbb4c:	2202      	movs	r2, #2
   dbb4e:	f240 2009 	movw	r0, #521	; 0x209
   dbb52:	f005 f8f7 	bl	e0d44 <HAL_EEPROM_Get>
    // Increment the counter in EEPROM
    EEPROM.put(EEPROM_ADDR_SAVED_METRIC_COUNT, ++counter);
   dbb56:	f008 fdfb 	bl	e4750 <_Z21__fetch_global_EEPROMv>
   dbb5a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   dbb5e:	2202      	movs	r2, #2
   dbb60:	3301      	adds	r3, #1
   dbb62:	f10d 0106 	add.w	r1, sp, #6
   dbb66:	f240 2009 	movw	r0, #521	; 0x209
   dbb6a:	f8ad 3006 	strh.w	r3, [sp, #6]
   dbb6e:	f005 f8f1 	bl	e0d54 <HAL_EEPROM_Put>
}
   dbb72:	b003      	add	sp, #12
   dbb74:	f85d fb04 	ldr.w	pc, [sp], #4

000dbb78 <_ZN14GXPartitionOpsC1EP15SpiFlashWinbondP14SpiffsParticle>:

GXPartitionOps::GXPartitionOps(SpiFlashWinbond *_spiFlash, SpiffsParticle *_filesys)
   dbb78:	b510      	push	{r4, lr}
   dbb7a:	4604      	mov	r4, r0
{
    GXspiFlash = _spiFlash;
    GXFileSys = _filesys;
   dbb7c:	e9c4 1200 	strd	r1, r2, [r4]
GXPartitionOps::GXPartitionOps(SpiFlashWinbond *_spiFlash, SpiffsParticle *_filesys)
   dbb80:	2300      	movs	r3, #0
   dbb82:	8123      	strh	r3, [r4, #8]
   dbb84:	60e3      	str	r3, [r4, #12]

    // Start the spiffs transaction
    GXspiFlash->begin();
   dbb86:	680b      	ldr	r3, [r1, #0]
GXPartitionOps::GXPartitionOps(SpiFlashWinbond *_spiFlash, SpiffsParticle *_filesys)
   dbb88:	4608      	mov	r0, r1
    GXspiFlash->begin();
   dbb8a:	689b      	ldr	r3, [r3, #8]
   dbb8c:	4798      	blx	r3
}
   dbb8e:	4620      	mov	r0, r4
   dbb90:	bd10      	pop	{r4, pc}

000dbb92 <_ZN14GXPartitionOpsD1Ev>:

GXPartitionOps::~GXPartitionOps()
   dbb92:	b510      	push	{r4, lr}
   dbb94:	4604      	mov	r4, r0
{
    // Clean-up
    if (_dir != NULL){
   dbb96:	68c0      	ldr	r0, [r0, #12]
   dbb98:	b118      	cbz	r0, dbba2 <_ZN14GXPartitionOpsD1Ev+0x10>
	inline s32_t closedir(spiffs_DIR *d) { return SPIFFS_closedir(d); };
   dbb9a:	f7fa f835 	bl	d5c08 <SPIFFS_closedir>
        // Close open directories
        GXFileSys->closedir(_dir);
        _dir = NULL;
   dbb9e:	2300      	movs	r3, #0
   dbba0:	60e3      	str	r3, [r4, #12]
    }
    if (gx_file_handle != 0){
   dbba2:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   dbba6:	b129      	cbz	r1, dbbb4 <_ZN14GXPartitionOpsD1Ev+0x22>
	inline s32_t close( spiffs_file fh) { return SPIFFS_close(&fs, fh); };
   dbba8:	6860      	ldr	r0, [r4, #4]
   dbbaa:	3028      	adds	r0, #40	; 0x28
   dbbac:	f7f9 ff98 	bl	d5ae0 <SPIFFS_close>
        // Close open file handles
        GXFileSys->close(gx_file_handle);
        gx_file_handle = 0;
   dbbb0:	2300      	movs	r3, #0
   dbbb2:	8123      	strh	r3, [r4, #8]
    }
    SPI1.end();
   dbbb4:	f7ff ff1a 	bl	db9ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE3endEv.isra.0>
}
   dbbb8:	4620      	mov	r0, r4
   dbbba:	bd10      	pop	{r4, pc}

000dbbbc <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE>:
{
   dbbbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   dbbbe:	4604      	mov	r4, r0
   dbbc0:	460d      	mov	r5, r1
    spiffslog.info("---- INITIALIZING SPIFFS ----");
   dbbc2:	481b      	ldr	r0, [pc, #108]	; (dbc30 <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x74>)
   dbbc4:	491b      	ldr	r1, [pc, #108]	; (dbc34 <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x78>)
   dbbc6:	f7fd ff77 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
    GXPartitionOps partitionMgr(spiFlash, filesys);
   dbbca:	e9d4 1200 	ldrd	r1, r2, [r4]
   dbbce:	4668      	mov	r0, sp
   dbbd0:	f7ff ffd2 	bl	dbb78 <_ZN14GXPartitionOpsC1EP15SpiFlashWinbondP14SpiffsParticle>
    if (PRT_TYPE == METRICS_PRT)
   dbbd4:	b1fd      	cbz	r5, dbc16 <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x5a>
    else if (PRT_TYPE == TEST_PRT)
   dbbd6:	2d01      	cmp	r5, #1
   dbbd8:	d111      	bne.n	dbbfe <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x42>
	inline SpiffsParticle &withPhysicalAddr(size_t value) { config.phys_addr = value; return *this; };
   dbbda:	9b01      	ldr	r3, [sp, #4]
   dbbdc:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
   dbbe0:	619a      	str	r2, [r3, #24]
        prt_size = 2;
   dbbe2:	2602      	movs	r6, #2
    partitionMgr.setPhysicalSize(prt_size * ONE_KILOBYTE * ONE_KILOBYTE);
   dbbe4:	9801      	ldr	r0, [sp, #4]
   dbbe6:	0533      	lsls	r3, r6, #20
	inline SpiffsParticle &withPhysicalSize(size_t value) { config.phys_size = value; return *this; };
   dbbe8:	6143      	str	r3, [r0, #20]
    inline SpiffsParticle &setPhysicalSize(size_t value) { return GXFileSys->withPhysicalSize(value); }

    /**
	 * @brief Mount the file system and format if necessary
	 */
    inline s32_t mountAndFormatIfNecessary() {return GXFileSys->mountAndFormatIfNecessary(); }
   dbbea:	2100      	movs	r1, #0
   dbbec:	f004 fe16 	bl	e081c <_ZN14SpiffsParticle25mountAndFormatIfNecessaryEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE>
    if (res != SPIFFS_OK)
   dbbf0:	4604      	mov	r4, r0
   dbbf2:	b190      	cbz	r0, dbc1a <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x5e>
        publishError(SPI_FLASH, FLASH_ERRCODE::MOUNT_FAILED);
   dbbf4:	4810      	ldr	r0, [pc, #64]	; (dbc38 <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x7c>)
   dbbf6:	2101      	movs	r1, #1
   dbbf8:	f7ff fd94 	bl	db724 <_Z12publishErrorPKcs>
   dbbfc:	e003      	b.n	dbc06 <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x4a>
        spiffslog.error("Partition type uninitialized and partition size cannot be zero!");
   dbbfe:	490f      	ldr	r1, [pc, #60]	; (dbc3c <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x80>)
   dbc00:	480b      	ldr	r0, [pc, #44]	; (dbc30 <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x74>)
   dbc02:	f7ff fcb6 	bl	db572 <_ZNK5spark6Logger5errorEPKcz>
        return SPIFFS_RET::SPIFFS_FAIL;
   dbc06:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    GXPartitionOps partitionMgr(spiFlash, filesys);
   dbc0a:	4668      	mov	r0, sp
   dbc0c:	f7ff ffc1 	bl	dbb92 <_ZN14GXPartitionOpsD1Ev>
}
   dbc10:	4620      	mov	r0, r4
   dbc12:	b004      	add	sp, #16
   dbc14:	bd70      	pop	{r4, r5, r6, pc}
        prt_size = 6;
   dbc16:	2606      	movs	r6, #6
   dbc18:	e7e4      	b.n	dbbe4 <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x28>
    spiffslog.trace("%s Partition with size: %uMB mounted successfully.",
   dbc1a:	4909      	ldr	r1, [pc, #36]	; (dbc40 <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x84>)
   dbc1c:	4a09      	ldr	r2, [pc, #36]	; (dbc44 <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x88>)
   dbc1e:	4804      	ldr	r0, [pc, #16]	; (dbc30 <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x74>)
   dbc20:	2d00      	cmp	r5, #0
   dbc22:	bf08      	it	eq
   dbc24:	460a      	moveq	r2, r1
   dbc26:	4633      	mov	r3, r6
   dbc28:	4907      	ldr	r1, [pc, #28]	; (dbc48 <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x8c>)
   dbc2a:	f7ff fc93 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>
    return SPIFFS_OK;
   dbc2e:	e7ec      	b.n	dbc0a <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x4e>
   dbc30:	2003e220 	.word	0x2003e220
   dbc34:	000e748e 	.word	0x000e748e
   dbc38:	000e75d3 	.word	0x000e75d3
   dbc3c:	000e7593 	.word	0x000e7593
   dbc40:	000e7dee 	.word	0x000e7dee
   dbc44:	000e740e 	.word	0x000e740e
   dbc48:	000e75dd 	.word	0x000e75dd

000dbc4c <_ZN14GXPartitionOps10createFileEPKcR6String>:

s32_t GXPartitionOps::createFile(const char* file_name, String &content)
{
   dbc4c:	b570      	push	{r4, r5, r6, lr}
   dbc4e:	4604      	mov	r4, r0
	inline spiffs_file open(const char *path, spiffs_flags flags, spiffs_mode mode = 0777) { return SPIFFS_open(&fs, path, flags, mode); };
   dbc50:	6840      	ldr	r0, [r0, #4]
   dbc52:	4615      	mov	r5, r2
   dbc54:	f240 13ff 	movw	r3, #511	; 0x1ff
   dbc58:	221c      	movs	r2, #28
   dbc5a:	3028      	adds	r0, #40	; 0x28
   dbc5c:	460e      	mov	r6, r1
   dbc5e:	f7f9 fc99 	bl	d5594 <SPIFFS_open>
    gx_file_handle = GXFileSys->open(file_name, SPIFFS_O_CREAT | SPIFFS_O_RDWR);
    if (gx_file_handle < 0)
   dbc62:	2800      	cmp	r0, #0
    gx_file_handle = GXFileSys->open(file_name, SPIFFS_O_CREAT | SPIFFS_O_RDWR);
   dbc64:	8120      	strh	r0, [r4, #8]
    if (gx_file_handle < 0)
   dbc66:	da06      	bge.n	dbc76 <_ZN14GXPartitionOps10createFileEPKcR6String+0x2a>
    {
        spiffslog.error("Failed to create file.");
   dbc68:	490b      	ldr	r1, [pc, #44]	; (dbc98 <_ZN14GXPartitionOps10createFileEPKcR6String+0x4c>)
   dbc6a:	480c      	ldr	r0, [pc, #48]	; (dbc9c <_ZN14GXPartitionOps10createFileEPKcR6String+0x50>)
   dbc6c:	f7ff fc81 	bl	db572 <_ZNK5spark6Logger5errorEPKcz>
        return gx_file_handle;
   dbc70:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
    }
    spiffslog.trace("%s file created successfully", file_name);
    
    s32_t err = GXFileSys->write(gx_file_handle, content.c_str(), content.length() + 1);
    return err;
}
   dbc74:	bd70      	pop	{r4, r5, r6, pc}
    spiffslog.trace("%s file created successfully", file_name);
   dbc76:	4632      	mov	r2, r6
   dbc78:	4909      	ldr	r1, [pc, #36]	; (dbca0 <_ZN14GXPartitionOps10createFileEPKcR6String+0x54>)
   dbc7a:	4808      	ldr	r0, [pc, #32]	; (dbc9c <_ZN14GXPartitionOps10createFileEPKcR6String+0x50>)
   dbc7c:	f7ff fc6a 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>
    s32_t err = GXFileSys->write(gx_file_handle, content.c_str(), content.length() + 1);
   dbc80:	68ab      	ldr	r3, [r5, #8]
	inline s32_t write(spiffs_file fh, const void *buf, s32_t len) { return SPIFFS_write(&fs, fh, const_cast<void *>(buf), len); };
   dbc82:	6860      	ldr	r0, [r4, #4]
   dbc84:	682a      	ldr	r2, [r5, #0]
   dbc86:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   dbc8a:	3301      	adds	r3, #1
}
   dbc8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   dbc90:	3028      	adds	r0, #40	; 0x28
   dbc92:	f7f9 bda3 	b.w	d57dc <SPIFFS_write>
   dbc96:	bf00      	nop
   dbc98:	000e7519 	.word	0x000e7519
   dbc9c:	2003e220 	.word	0x2003e220
   dbca0:	000e7530 	.word	0x000e7530

000dbca4 <_ZN8GXSpiffs13saveGXMetricsER6String>:
{
   dbca4:	b570      	push	{r4, r5, r6, lr}
   dbca6:	b094      	sub	sp, #80	; 0x50
   dbca8:	4615      	mov	r5, r2
   dbcaa:	4604      	mov	r4, r0
    GXPartitionOps partitionMgr(spiFlash, filesys);
   dbcac:	e9d1 1200 	ldrd	r1, r2, [r1]
   dbcb0:	4668      	mov	r0, sp
   dbcb2:	f7ff ff61 	bl	dbb78 <_ZN14GXPartitionOpsC1EP15SpiFlashWinbondP14SpiffsParticle>
	StringSumHelper(const char *p) : String(p) {}
   dbcb6:	4928      	ldr	r1, [pc, #160]	; (dbd58 <_ZN8GXSpiffs13saveGXMetricsER6String+0xb4>)
   dbcb8:	a80c      	add	r0, sp, #48	; 0x30
   dbcba:	f007 ffa8 	bl	e3c0e <_ZN6StringC1EPKc>
    String metric_name = "met" + String(Time.now()) + "_" + String(fetchCounterFromEEPROM());
   dbcbe:	f008 fa53 	bl	e4168 <_ZN9TimeClass3nowEv>
   dbcc2:	220a      	movs	r2, #10
   dbcc4:	4601      	mov	r1, r0
   dbcc6:	a808      	add	r0, sp, #32
   dbcc8:	f008 f849 	bl	e3d5e <_ZN6StringC1Elh>
   dbccc:	a908      	add	r1, sp, #32
   dbcce:	a80c      	add	r0, sp, #48	; 0x30
   dbcd0:	f008 f8d3 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
   dbcd4:	4921      	ldr	r1, [pc, #132]	; (dbd5c <_ZN8GXSpiffs13saveGXMetricsER6String+0xb8>)
   dbcd6:	f008 f8dc 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   dbcda:	4606      	mov	r6, r0
   dbcdc:	f7ff ff10 	bl	dbb00 <_Z22fetchCounterFromEEPROMv>
   dbce0:	220a      	movs	r2, #10
   dbce2:	4601      	mov	r1, r0
   dbce4:	a810      	add	r0, sp, #64	; 0x40
   dbce6:	f008 f814 	bl	e3d12 <_ZN6StringC1Eih>
   dbcea:	a910      	add	r1, sp, #64	; 0x40
   dbcec:	4630      	mov	r0, r6
   dbcee:	f008 f8c4 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
   dbcf2:	4601      	mov	r1, r0
   dbcf4:	a804      	add	r0, sp, #16
   dbcf6:	f007 ffd5 	bl	e3ca4 <_ZN6StringC1ERKS_>
   dbcfa:	a810      	add	r0, sp, #64	; 0x40
   dbcfc:	f007 ff3c 	bl	e3b78 <_ZN6StringD1Ev>
   dbd00:	a808      	add	r0, sp, #32
   dbd02:	f007 ff39 	bl	e3b78 <_ZN6StringD1Ev>
class StringSumHelper : public String
   dbd06:	a80c      	add	r0, sp, #48	; 0x30
   dbd08:	f007 ff36 	bl	e3b78 <_ZN6StringD1Ev>
    s32_t err = partitionMgr.createFile(metric_name.c_str(), metric_to_save);
   dbd0c:	9904      	ldr	r1, [sp, #16]
   dbd0e:	462a      	mov	r2, r5
   dbd10:	4668      	mov	r0, sp
   dbd12:	f7ff ff9b 	bl	dbc4c <_ZN14GXPartitionOps10createFileEPKcR6String>
    if (err < 0)
   dbd16:	2800      	cmp	r0, #0
   dbd18:	da17      	bge.n	dbd4a <_ZN8GXSpiffs13saveGXMetricsER6String+0xa6>
        spiffslog.error("Failed to write metric data to file: '%s'", metric_name.c_str());
   dbd1a:	9a04      	ldr	r2, [sp, #16]
   dbd1c:	4910      	ldr	r1, [pc, #64]	; (dbd60 <_ZN8GXSpiffs13saveGXMetricsER6String+0xbc>)
   dbd1e:	4811      	ldr	r0, [pc, #68]	; (dbd64 <_ZN8GXSpiffs13saveGXMetricsER6String+0xc0>)
   dbd20:	f7ff fc27 	bl	db572 <_ZNK5spark6Logger5errorEPKcz>
        publishError(SPI_FLASH, FLASH_ERRCODE::WRITE_FAILED);
   dbd24:	4810      	ldr	r0, [pc, #64]	; (dbd68 <_ZN8GXSpiffs13saveGXMetricsER6String+0xc4>)
   dbd26:	2102      	movs	r1, #2
   dbd28:	f7ff fcfc 	bl	db724 <_Z12publishErrorPKcs>
        return String(SPIFFS_FAIL);
   dbd2c:	220a      	movs	r2, #10
   dbd2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   dbd32:	4620      	mov	r0, r4
   dbd34:	f007 ffed 	bl	e3d12 <_ZN6StringC1Eih>
    String metric_name = "met" + String(Time.now()) + "_" + String(fetchCounterFromEEPROM());
   dbd38:	a804      	add	r0, sp, #16
   dbd3a:	f007 ff1d 	bl	e3b78 <_ZN6StringD1Ev>
    GXPartitionOps partitionMgr(spiFlash, filesys);
   dbd3e:	4668      	mov	r0, sp
   dbd40:	f7ff ff27 	bl	dbb92 <_ZN14GXPartitionOpsD1Ev>
}
   dbd44:	4620      	mov	r0, r4
   dbd46:	b014      	add	sp, #80	; 0x50
   dbd48:	bd70      	pop	{r4, r5, r6, pc}
    incrementCounterInEEPROM();
   dbd4a:	f7ff fefa 	bl	dbb42 <_Z24incrementCounterInEEPROMv>
    return metric_name;
   dbd4e:	a904      	add	r1, sp, #16
   dbd50:	4620      	mov	r0, r4
   dbd52:	f007 ff8d 	bl	e3c70 <_ZN6StringC1EOS_>
   dbd56:	e7ef      	b.n	dbd38 <_ZN8GXSpiffs13saveGXMetricsER6String+0x94>
   dbd58:	000e73ff 	.word	0x000e73ff
   dbd5c:	000e7610 	.word	0x000e7610
   dbd60:	000e7612 	.word	0x000e7612
   dbd64:	2003e220 	.word	0x2003e220
   dbd68:	000e75d3 	.word	0x000e75d3

000dbd6c <_ZN14GXPartitionOps8readFileEPKcR6String>:

s32_t GXPartitionOps::readFile(const char* file_name, String &buffer_to_fill)
{
   dbd6c:	b570      	push	{r4, r5, r6, lr}
   dbd6e:	4604      	mov	r4, r0
	inline s32_t stat(const char *path, spiffs_stat *s) { return SPIFFS_stat(&fs, path, s); };
   dbd70:	6840      	ldr	r0, [r0, #4]
   dbd72:	b090      	sub	sp, #64	; 0x40
   dbd74:	4616      	mov	r6, r2
   dbd76:	3028      	adds	r0, #40	; 0x28
   dbd78:	aa05      	add	r2, sp, #20
   dbd7a:	460d      	mov	r5, r1
   dbd7c:	f7f9 fe6e 	bl	d5a5c <SPIFFS_stat>
	inline spiffs_file open(const char *path, spiffs_flags flags, spiffs_mode mode = 0777) { return SPIFFS_open(&fs, path, flags, mode); };
   dbd80:	6860      	ldr	r0, [r4, #4]
   dbd82:	2208      	movs	r2, #8
   dbd84:	f240 13ff 	movw	r3, #511	; 0x1ff
   dbd88:	4629      	mov	r1, r5
   dbd8a:	3028      	adds	r0, #40	; 0x28
   dbd8c:	f7f9 fc02 	bl	d5594 <SPIFFS_open>
    // Get the file information, e.g. file size
    spiffs_stat file_info;
    GXFileSys->stat(file_name, &file_info);

    gx_file_handle = GXFileSys->open(file_name, SPIFFS_O_RDONLY);
    if (gx_file_handle < 0)
   dbd90:	2800      	cmp	r0, #0
    gx_file_handle = GXFileSys->open(file_name, SPIFFS_O_RDONLY);
   dbd92:	8120      	strh	r0, [r4, #8]
    {
        spiffslog.error("Failed to open file %s", file_name);
   dbd94:	462a      	mov	r2, r5
    if (gx_file_handle < 0)
   dbd96:	da08      	bge.n	dbdaa <_ZN14GXPartitionOps8readFileEPKcR6String+0x3e>
        spiffslog.error("Failed to open file %s", file_name);
   dbd98:	491a      	ldr	r1, [pc, #104]	; (dbe04 <_ZN14GXPartitionOps8readFileEPKcR6String+0x98>)
   dbd9a:	481b      	ldr	r0, [pc, #108]	; (dbe08 <_ZN14GXPartitionOps8readFileEPKcR6String+0x9c>)
   dbd9c:	f7ff fbe9 	bl	db572 <_ZNK5spark6Logger5errorEPKcz>
        return gx_file_handle;
   dbda0:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
    buffer_to_fill = String((char*)dynamic_buffer);

    // Free memory
    delete [] dynamic_buffer;
    return err;
}
   dbda4:	4620      	mov	r0, r4
   dbda6:	b010      	add	sp, #64	; 0x40
   dbda8:	bd70      	pop	{r4, r5, r6, pc}
    spiffslog.trace("'%s' file opened successfully", file_name);
   dbdaa:	4918      	ldr	r1, [pc, #96]	; (dbe0c <_ZN14GXPartitionOps8readFileEPKcR6String+0xa0>)
   dbdac:	4816      	ldr	r0, [pc, #88]	; (dbe08 <_ZN14GXPartitionOps8readFileEPKcR6String+0x9c>)
   dbdae:	f7ff fbd1 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>
    spiffslog.trace("File size: %lu", file_info.size);
   dbdb2:	9a06      	ldr	r2, [sp, #24]
   dbdb4:	4916      	ldr	r1, [pc, #88]	; (dbe10 <_ZN14GXPartitionOps8readFileEPKcR6String+0xa4>)
   dbdb6:	4814      	ldr	r0, [pc, #80]	; (dbe08 <_ZN14GXPartitionOps8readFileEPKcR6String+0x9c>)
   dbdb8:	f7ff fbcc 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>
    uint8_t *dynamic_buffer = new uint8_t[file_info.size];
   dbdbc:	9806      	ldr	r0, [sp, #24]
   dbdbe:	f7f8 f96c 	bl	d409a <_Znaj>
    if (dynamic_buffer == nullptr)
   dbdc2:	4605      	mov	r5, r0
   dbdc4:	b930      	cbnz	r0, dbdd4 <_ZN14GXPartitionOps8readFileEPKcR6String+0x68>
        spiffslog.error("Memory allocation failed!");
   dbdc6:	4913      	ldr	r1, [pc, #76]	; (dbe14 <_ZN14GXPartitionOps8readFileEPKcR6String+0xa8>)
   dbdc8:	480f      	ldr	r0, [pc, #60]	; (dbe08 <_ZN14GXPartitionOps8readFileEPKcR6String+0x9c>)
   dbdca:	f7ff fbd2 	bl	db572 <_ZNK5spark6Logger5errorEPKcz>
        return -1;
   dbdce:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   dbdd2:	e7e7      	b.n	dbda4 <_ZN14GXPartitionOps8readFileEPKcR6String+0x38>
	inline s32_t read(spiffs_file fh, void *buf, s32_t len) { return SPIFFS_read(&fs, fh, buf, len); };
   dbdd4:	6860      	ldr	r0, [r4, #4]
   dbdd6:	9b06      	ldr	r3, [sp, #24]
   dbdd8:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   dbddc:	462a      	mov	r2, r5
   dbdde:	3028      	adds	r0, #40	; 0x28
   dbde0:	f7f9 fc78 	bl	d56d4 <SPIFFS_read>
    buffer_to_fill = String((char*)dynamic_buffer);
   dbde4:	4629      	mov	r1, r5
   dbde6:	4604      	mov	r4, r0
   dbde8:	a801      	add	r0, sp, #4
   dbdea:	f007 ff10 	bl	e3c0e <_ZN6StringC1EPKc>
   dbdee:	a901      	add	r1, sp, #4
   dbdf0:	4630      	mov	r0, r6
   dbdf2:	f007 ff62 	bl	e3cba <_ZN6StringaSEOS_>
   dbdf6:	a801      	add	r0, sp, #4
   dbdf8:	f007 febe 	bl	e3b78 <_ZN6StringD1Ev>
    delete [] dynamic_buffer;
   dbdfc:	4628      	mov	r0, r5
   dbdfe:	f7f8 f950 	bl	d40a2 <_ZdaPv>
    return err;
   dbe02:	e7cf      	b.n	dbda4 <_ZN14GXPartitionOps8readFileEPKcR6String+0x38>
   dbe04:	000e763c 	.word	0x000e763c
   dbe08:	2003e220 	.word	0x2003e220
   dbe0c:	000e7653 	.word	0x000e7653
   dbe10:	000e7671 	.word	0x000e7671
   dbe14:	000e7680 	.word	0x000e7680

000dbe18 <_ZN8GXSpiffs13readGXMetricsEPKc>:
{
   dbe18:	b530      	push	{r4, r5, lr}
   dbe1a:	b089      	sub	sp, #36	; 0x24
   dbe1c:	4615      	mov	r5, r2
   dbe1e:	4604      	mov	r4, r0
    GXPartitionOps partitionMgr(spiFlash, filesys);
   dbe20:	e9d1 1200 	ldrd	r1, r2, [r1]
   dbe24:	4668      	mov	r0, sp
   dbe26:	f7ff fea7 	bl	dbb78 <_ZN14GXPartitionOpsC1EP15SpiFlashWinbondP14SpiffsParticle>
    String metric_to_return;
   dbe2a:	4914      	ldr	r1, [pc, #80]	; (dbe7c <_ZN8GXSpiffs13readGXMetricsEPKc+0x64>)
   dbe2c:	a804      	add	r0, sp, #16
   dbe2e:	f007 feee 	bl	e3c0e <_ZN6StringC1EPKc>
    s32_t res = partitionMgr.readFile(metric_name, metric_to_return);
   dbe32:	aa04      	add	r2, sp, #16
   dbe34:	4629      	mov	r1, r5
   dbe36:	4668      	mov	r0, sp
   dbe38:	f7ff ff98 	bl	dbd6c <_ZN14GXPartitionOps8readFileEPKcR6String>
    if (res < 0)
   dbe3c:	2800      	cmp	r0, #0
   dbe3e:	da17      	bge.n	dbe70 <_ZN8GXSpiffs13readGXMetricsEPKc+0x58>
        spiffslog.error("Error metric reading data from: \'%s\'", metric_name);
   dbe40:	462a      	mov	r2, r5
   dbe42:	490f      	ldr	r1, [pc, #60]	; (dbe80 <_ZN8GXSpiffs13readGXMetricsEPKc+0x68>)
   dbe44:	480f      	ldr	r0, [pc, #60]	; (dbe84 <_ZN8GXSpiffs13readGXMetricsEPKc+0x6c>)
   dbe46:	f7ff fb94 	bl	db572 <_ZNK5spark6Logger5errorEPKcz>
        publishError(SPI_FLASH, FLASH_ERRCODE::READ_FAILED);
   dbe4a:	480f      	ldr	r0, [pc, #60]	; (dbe88 <_ZN8GXSpiffs13readGXMetricsEPKc+0x70>)
   dbe4c:	2103      	movs	r1, #3
   dbe4e:	f7ff fc69 	bl	db724 <_Z12publishErrorPKcs>
        return String(SPIFFS_FAIL);
   dbe52:	220a      	movs	r2, #10
   dbe54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   dbe58:	4620      	mov	r0, r4
   dbe5a:	f007 ff5a 	bl	e3d12 <_ZN6StringC1Eih>
    String metric_to_return;
   dbe5e:	a804      	add	r0, sp, #16
   dbe60:	f007 fe8a 	bl	e3b78 <_ZN6StringD1Ev>
    GXPartitionOps partitionMgr(spiFlash, filesys);
   dbe64:	4668      	mov	r0, sp
   dbe66:	f7ff fe94 	bl	dbb92 <_ZN14GXPartitionOpsD1Ev>
}
   dbe6a:	4620      	mov	r0, r4
   dbe6c:	b009      	add	sp, #36	; 0x24
   dbe6e:	bd30      	pop	{r4, r5, pc}
    return metric_to_return;
   dbe70:	a904      	add	r1, sp, #16
   dbe72:	4620      	mov	r0, r4
   dbe74:	f007 fefc 	bl	e3c70 <_ZN6StringC1EOS_>
   dbe78:	e7f1      	b.n	dbe5e <_ZN8GXSpiffs13readGXMetricsEPKc+0x46>
   dbe7a:	bf00      	nop
   dbe7c:	000e827d 	.word	0x000e827d
   dbe80:	000e769a 	.word	0x000e769a
   dbe84:	2003e220 	.word	0x2003e220
   dbe88:	000e75d3 	.word	0x000e75d3

000dbe8c <_ZN14GXPartitionOps10deleteFileEPKc>:

s32_t GXPartitionOps::deleteFile(const char* file_name)
{
   dbe8c:	b513      	push	{r0, r1, r4, lr}
   dbe8e:	4604      	mov	r4, r0
   dbe90:	460a      	mov	r2, r1
    spiffslog.trace("Attempting to delete '%s'", file_name);
   dbe92:	480c      	ldr	r0, [pc, #48]	; (dbec4 <_ZN14GXPartitionOps10deleteFileEPKc+0x38>)
   dbe94:	9101      	str	r1, [sp, #4]
   dbe96:	490c      	ldr	r1, [pc, #48]	; (dbec8 <_ZN14GXPartitionOps10deleteFileEPKc+0x3c>)
   dbe98:	f7ff fb5c 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>
	inline s32_t remove(const char *path) { return SPIFFS_remove(&fs, path); };
   dbe9c:	9a01      	ldr	r2, [sp, #4]
   dbe9e:	6860      	ldr	r0, [r4, #4]
   dbea0:	4611      	mov	r1, r2
   dbea2:	3028      	adds	r0, #40	; 0x28
   dbea4:	f7f9 fd6e 	bl	d5984 <SPIFFS_remove>
    s32_t ret = GXFileSys->remove(file_name);

    if (ret == SPIFFS_OK) return SPIFFS_OK;
   dbea8:	9a01      	ldr	r2, [sp, #4]
   dbeaa:	b148      	cbz	r0, dbec0 <_ZN14GXPartitionOps10deleteFileEPKc+0x34>

    spiffslog.error("Failed to delete '%s'!", file_name);
   dbeac:	4907      	ldr	r1, [pc, #28]	; (dbecc <_ZN14GXPartitionOps10deleteFileEPKc+0x40>)
   dbeae:	4805      	ldr	r0, [pc, #20]	; (dbec4 <_ZN14GXPartitionOps10deleteFileEPKc+0x38>)
   dbeb0:	f7ff fb5f 	bl	db572 <_ZNK5spark6Logger5errorEPKcz>
    publishError(SPI_FLASH, FLASH_ERRCODE::DELETE_FAILED);
   dbeb4:	4806      	ldr	r0, [pc, #24]	; (dbed0 <_ZN14GXPartitionOps10deleteFileEPKc+0x44>)
   dbeb6:	2104      	movs	r1, #4
   dbeb8:	f7ff fc34 	bl	db724 <_Z12publishErrorPKcs>
   dbebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return SPIFFS_FAIL;
}
   dbec0:	b002      	add	sp, #8
   dbec2:	bd10      	pop	{r4, pc}
   dbec4:	2003e220 	.word	0x2003e220
   dbec8:	000e76bf 	.word	0x000e76bf
   dbecc:	000e76d9 	.word	0x000e76d9
   dbed0:	000e75d3 	.word	0x000e75d3

000dbed4 <_ZN14GXPartitionOps13openDirectoryEP10spiffs_DIR>:

void GXPartitionOps::openDirectory(spiffs_DIR *dir)
{
   dbed4:	b538      	push	{r3, r4, r5, lr}
   dbed6:	4604      	mov	r4, r0
	inline spiffs_DIR *opendir(const char *name, spiffs_DIR *d) { return SPIFFS_opendir(&fs, name, d); };
   dbed8:	6840      	ldr	r0, [r0, #4]
   dbeda:	460d      	mov	r5, r1
   dbedc:	460a      	mov	r2, r1
   dbede:	3028      	adds	r0, #40	; 0x28
   dbee0:	2100      	movs	r1, #0
   dbee2:	f7f9 fe2f 	bl	d5b44 <SPIFFS_opendir>
    if (GXFileSys->opendir(NULL, dir) != 0)
   dbee6:	b100      	cbz	r0, dbeea <_ZN14GXPartitionOps13openDirectoryEP10spiffs_DIR+0x16>
    {
        _dir = dir;
   dbee8:	60e5      	str	r5, [r4, #12]
    }
}
   dbeea:	bd38      	pop	{r3, r4, r5, pc}

000dbeec <_ZN8GXSpiffs13getOldestFileEPKcRmRt>:
{
   dbeec:	b5f0      	push	{r4, r5, r6, r7, lr}
   dbeee:	b095      	sub	sp, #84	; 0x54
   dbef0:	460e      	mov	r6, r1
   dbef2:	4614      	mov	r4, r2
    GXPartitionOps partitionMgr(spiFlash, filesys);
   dbef4:	e9d0 1200 	ldrd	r1, r2, [r0]
   dbef8:	a805      	add	r0, sp, #20
{
   dbefa:	461d      	mov	r5, r3
    GXPartitionOps partitionMgr(spiFlash, filesys);
   dbefc:	f7ff fe3c 	bl	dbb78 <_ZN14GXPartitionOpsC1EP15SpiFlashWinbondP14SpiffsParticle>
    spiffslog.trace("Searching for the oldest file...");
   dbf00:	491b      	ldr	r1, [pc, #108]	; (dbf70 <_ZN8GXSpiffs13getOldestFileEPKcRmRt+0x84>)
   dbf02:	481c      	ldr	r0, [pc, #112]	; (dbf74 <_ZN8GXSpiffs13getOldestFileEPKcRmRt+0x88>)
   dbf04:	f7ff fb26 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>
    partitionMgr.openDirectory(&dir);
   dbf08:	a902      	add	r1, sp, #8
   dbf0a:	a805      	add	r0, sp, #20
   dbf0c:	f7ff ffe2 	bl	dbed4 <_ZN14GXPartitionOps13openDirectoryEP10spiffs_DIR>
   dbf10:	2700      	movs	r7, #0
	inline struct spiffs_dirent *readdir(spiffs_DIR *d, struct spiffs_dirent *e) { return SPIFFS_readdir(d, e); };
   dbf12:	a909      	add	r1, sp, #36	; 0x24
   dbf14:	a802      	add	r0, sp, #8
   dbf16:	f7f9 fe39 	bl	d5b8c <SPIFFS_readdir>
    while (filesys->readdir(&dir, &dirent))
   dbf1a:	b1c8      	cbz	r0, dbf50 <_ZN8GXSpiffs13getOldestFileEPKcRmRt+0x64>
        if (sscanf((const char *)dirent.name, prt_key_format, &file_ts, &file_idx) == 2)
   dbf1c:	f10d 0302 	add.w	r3, sp, #2
   dbf20:	aa01      	add	r2, sp, #4
   dbf22:	4631      	mov	r1, r6
   dbf24:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   dbf28:	f005 fa2a 	bl	e1380 <sscanf>
   dbf2c:	2802      	cmp	r0, #2
   dbf2e:	d1f0      	bne.n	dbf12 <_ZN8GXSpiffs13getOldestFileEPKcRmRt+0x26>
            if (count == 0){
   dbf30:	b2ba      	uxth	r2, r7
   dbf32:	9b01      	ldr	r3, [sp, #4]
   dbf34:	b91a      	cbnz	r2, dbf3e <_ZN8GXSpiffs13getOldestFileEPKcRmRt+0x52>
                oldest_file_idx = file_idx;
   dbf36:	f8bd 2002 	ldrh.w	r2, [sp, #2]
                oldest_file_ts = file_ts; // Hold the first file timestamp
   dbf3a:	6023      	str	r3, [r4, #0]
                oldest_file_idx = file_idx;
   dbf3c:	802a      	strh	r2, [r5, #0]
            if (file_ts < oldest_file_ts){
   dbf3e:	6822      	ldr	r2, [r4, #0]
   dbf40:	429a      	cmp	r2, r3
   dbf42:	d903      	bls.n	dbf4c <_ZN8GXSpiffs13getOldestFileEPKcRmRt+0x60>
                oldest_file_ts = file_ts; // Update the oldest file timestamp
   dbf44:	6023      	str	r3, [r4, #0]
                oldest_file_idx = file_idx;
   dbf46:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   dbf4a:	802b      	strh	r3, [r5, #0]
   dbf4c:	3701      	adds	r7, #1
   dbf4e:	e7e0      	b.n	dbf12 <_ZN8GXSpiffs13getOldestFileEPKcRmRt+0x26>
    spiffslog.trace("The oldest file is:");
   dbf50:	4909      	ldr	r1, [pc, #36]	; (dbf78 <_ZN8GXSpiffs13getOldestFileEPKcRmRt+0x8c>)
   dbf52:	4808      	ldr	r0, [pc, #32]	; (dbf74 <_ZN8GXSpiffs13getOldestFileEPKcRmRt+0x88>)
   dbf54:	f7ff fafe 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>
    spiffslog.trace(prt_key_format, oldest_file_ts, oldest_file_idx);
   dbf58:	882b      	ldrh	r3, [r5, #0]
   dbf5a:	6822      	ldr	r2, [r4, #0]
   dbf5c:	4805      	ldr	r0, [pc, #20]	; (dbf74 <_ZN8GXSpiffs13getOldestFileEPKcRmRt+0x88>)
   dbf5e:	4631      	mov	r1, r6
   dbf60:	f7ff faf8 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>
    GXPartitionOps partitionMgr(spiFlash, filesys);
   dbf64:	a805      	add	r0, sp, #20
   dbf66:	f7ff fe14 	bl	dbb92 <_ZN14GXPartitionOpsD1Ev>
}
   dbf6a:	b015      	add	sp, #84	; 0x54
   dbf6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dbf6e:	bf00      	nop
   dbf70:	000e76f0 	.word	0x000e76f0
   dbf74:	2003e220 	.word	0x2003e220
   dbf78:	000e7711 	.word	0x000e7711

000dbf7c <_ZN8GXSpiffs16deleteOldestFileE6StringPKc>:
{
   dbf7c:	b570      	push	{r4, r5, r6, lr}
   dbf7e:	4604      	mov	r4, r0
   dbf80:	b08e      	sub	sp, #56	; 0x38
   dbf82:	460d      	mov	r5, r1
   dbf84:	4616      	mov	r6, r2
    spiffslog.trace("Low storage threshold hit! Attempting to delete oldest data.");
   dbf86:	4920      	ldr	r1, [pc, #128]	; (dc008 <_ZN8GXSpiffs16deleteOldestFileE6StringPKc+0x8c>)
   dbf88:	4820      	ldr	r0, [pc, #128]	; (dc00c <_ZN8GXSpiffs16deleteOldestFileE6StringPKc+0x90>)
   dbf8a:	f7ff fae3 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>
    getOldestFile(prt_key_format, file_ts, file_idx);
   dbf8e:	f10d 0302 	add.w	r3, sp, #2
   dbf92:	aa01      	add	r2, sp, #4
   dbf94:	4631      	mov	r1, r6
   dbf96:	4620      	mov	r0, r4
   dbf98:	f7ff ffa8 	bl	dbeec <_ZN8GXSpiffs13getOldestFileEPKcRmRt>
    file_name += String(file_ts) + "_" + String(file_idx);
   dbf9c:	220a      	movs	r2, #10
   dbf9e:	9901      	ldr	r1, [sp, #4]
   dbfa0:	a802      	add	r0, sp, #8
   dbfa2:	f007 feef 	bl	e3d84 <_ZN6StringC1Emh>
	StringSumHelper(const String &s) : String(s) {}
   dbfa6:	a902      	add	r1, sp, #8
   dbfa8:	a806      	add	r0, sp, #24
   dbfaa:	f007 fe7b 	bl	e3ca4 <_ZN6StringC1ERKS_>
   dbfae:	4918      	ldr	r1, [pc, #96]	; (dc010 <_ZN8GXSpiffs16deleteOldestFileE6StringPKc+0x94>)
   dbfb0:	a806      	add	r0, sp, #24
   dbfb2:	f007 ff6e 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   dbfb6:	220a      	movs	r2, #10
   dbfb8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   dbfbc:	4606      	mov	r6, r0
   dbfbe:	a80a      	add	r0, sp, #40	; 0x28
   dbfc0:	f007 fea7 	bl	e3d12 <_ZN6StringC1Eih>
   dbfc4:	a90a      	add	r1, sp, #40	; 0x28
   dbfc6:	4630      	mov	r0, r6
   dbfc8:	f007 ff57 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
   dbfcc:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   dbfce:	4628      	mov	r0, r5
   dbfd0:	f007 ff31 	bl	e3e36 <_ZN6String6concatERKS_>
   dbfd4:	a80a      	add	r0, sp, #40	; 0x28
   dbfd6:	f007 fdcf 	bl	e3b78 <_ZN6StringD1Ev>
class StringSumHelper : public String
   dbfda:	a806      	add	r0, sp, #24
   dbfdc:	f007 fdcc 	bl	e3b78 <_ZN6StringD1Ev>
   dbfe0:	a802      	add	r0, sp, #8
   dbfe2:	f007 fdc9 	bl	e3b78 <_ZN6StringD1Ev>
    GXPartitionOps partitionMgr(spiFlash, filesys);
   dbfe6:	e9d4 1200 	ldrd	r1, r2, [r4]
   dbfea:	a80a      	add	r0, sp, #40	; 0x28
   dbfec:	f7ff fdc4 	bl	dbb78 <_ZN14GXPartitionOpsC1EP15SpiFlashWinbondP14SpiffsParticle>
    return partitionMgr.deleteFile(file_name.c_str());
   dbff0:	6829      	ldr	r1, [r5, #0]
   dbff2:	a80a      	add	r0, sp, #40	; 0x28
   dbff4:	f7ff ff4a 	bl	dbe8c <_ZN14GXPartitionOps10deleteFileEPKc>
   dbff8:	4604      	mov	r4, r0
    GXPartitionOps partitionMgr(spiFlash, filesys);
   dbffa:	a80a      	add	r0, sp, #40	; 0x28
   dbffc:	f7ff fdc9 	bl	dbb92 <_ZN14GXPartitionOpsD1Ev>
}
   dc000:	b220      	sxth	r0, r4
   dc002:	b00e      	add	sp, #56	; 0x38
   dc004:	bd70      	pop	{r4, r5, r6, pc}
   dc006:	bf00      	nop
   dc008:	000e7725 	.word	0x000e7725
   dc00c:	2003e220 	.word	0x2003e220
   dc010:	000e7610 	.word	0x000e7610

000dc014 <_ZN8GXSpiffs12cleanStorageER6StringPKc>:
{
   dc014:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc016:	ed2d 8b02 	vpush	{d8}
   dc01a:	b085      	sub	sp, #20
   dc01c:	4604      	mov	r4, r0
   dc01e:	460d      	mov	r5, r1
   dc020:	4616      	mov	r6, r2
    float storage_left = checkFreeStoragePercent();
   dc022:	f7ff fd3b 	bl	dba9c <_ZN8GXSpiffs23checkFreeStoragePercentEv>
    if (storage_left > LOW_STORAGE_THRESHOLD) return;
   dc026:	eef2 8a04 	vmov.f32	s17, #36	; 0x41200000  10.0
   dc02a:	eeb4 0ae8 	vcmpe.f32	s0, s17
   dc02e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float storage_left = checkFreeStoragePercent();
   dc032:	eeb0 8a40 	vmov.f32	s16, s0
    if (storage_left > LOW_STORAGE_THRESHOLD) return;
   dc036:	dc1e      	bgt.n	dc076 <_ZN8GXSpiffs12cleanStorageER6StringPKc+0x62>
    spiffslog.info("Cleaning storage...");
   dc038:	4911      	ldr	r1, [pc, #68]	; (dc080 <_ZN8GXSpiffs12cleanStorageER6StringPKc+0x6c>)
   dc03a:	4812      	ldr	r0, [pc, #72]	; (dc084 <_ZN8GXSpiffs12cleanStorageER6StringPKc+0x70>)
   dc03c:	f7fd fd3c 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
    float desired_storage = storage_left + NEW_STORAGE_OFFSET;
   dc040:	ee78 8a28 	vadd.f32	s17, s16, s17
    for (; storage_left < desired_storage; storage_left = checkFreeStoragePercent())
   dc044:	eeb4 8ae8 	vcmpe.f32	s16, s17
   dc048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dc04c:	d513      	bpl.n	dc076 <_ZN8GXSpiffs12cleanStorageER6StringPKc+0x62>
        spiffs_err err = deleteOldestFile(file_key, prt_key_format);
   dc04e:	4629      	mov	r1, r5
   dc050:	4668      	mov	r0, sp
   dc052:	f007 fe27 	bl	e3ca4 <_ZN6StringC1ERKS_>
   dc056:	4632      	mov	r2, r6
   dc058:	4669      	mov	r1, sp
   dc05a:	4620      	mov	r0, r4
   dc05c:	f7ff ff8e 	bl	dbf7c <_ZN8GXSpiffs16deleteOldestFileE6StringPKc>
   dc060:	4607      	mov	r7, r0
   dc062:	4668      	mov	r0, sp
   dc064:	f007 fd88 	bl	e3b78 <_ZN6StringD1Ev>
        if (err != SPIFFS_OK) return;
   dc068:	b92f      	cbnz	r7, dc076 <_ZN8GXSpiffs12cleanStorageER6StringPKc+0x62>
    for (; storage_left < desired_storage; storage_left = checkFreeStoragePercent())
   dc06a:	4620      	mov	r0, r4
   dc06c:	f7ff fd16 	bl	dba9c <_ZN8GXSpiffs23checkFreeStoragePercentEv>
   dc070:	eeb0 8a40 	vmov.f32	s16, s0
   dc074:	e7e6      	b.n	dc044 <_ZN8GXSpiffs12cleanStorageER6StringPKc+0x30>
}
   dc076:	b005      	add	sp, #20
   dc078:	ecbd 8b02 	vpop	{d8}
   dc07c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc07e:	bf00      	nop
   dc080:	000e7762 	.word	0x000e7762
   dc084:	2003e220 	.word	0x2003e220

000dc088 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt>:
{
   dc088:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc08a:	460c      	mov	r4, r1
   dc08c:	b08d      	sub	sp, #52	; 0x34
    if ((sscanf(metric_name, "met%lu_%hu", &metrics_ts, &metrics_idx) != 2) ||
   dc08e:	4932      	ldr	r1, [pc, #200]	; (dc158 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xd0>)
{
   dc090:	4605      	mov	r5, r0
   dc092:	4617      	mov	r7, r2
   dc094:	461e      	mov	r6, r3
    if ((sscanf(metric_name, "met%lu_%hu", &metrics_ts, &metrics_idx) != 2) ||
   dc096:	aa03      	add	r2, sp, #12
   dc098:	f10d 030a 	add.w	r3, sp, #10
   dc09c:	4620      	mov	r0, r4
   dc09e:	f005 f96f 	bl	e1380 <sscanf>
   dc0a2:	2802      	cmp	r0, #2
   dc0a4:	d156      	bne.n	dc154 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xcc>
   dc0a6:	9b03      	ldr	r3, [sp, #12]
   dc0a8:	42bb      	cmp	r3, r7
   dc0aa:	d353      	bcc.n	dc154 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xcc>
        (metrics_ts < last_published_ts || metrics_idx == last_published_idx)) return false;
   dc0ac:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   dc0b0:	42b3      	cmp	r3, r6
   dc0b2:	d04f      	beq.n	dc154 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xcc>
    spiffslog.trace("Getting information for %s", metric_name);
   dc0b4:	4929      	ldr	r1, [pc, #164]	; (dc15c <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xd4>)
   dc0b6:	482a      	ldr	r0, [pc, #168]	; (dc160 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xd8>)
   dc0b8:	4622      	mov	r2, r4
   dc0ba:	f7ff fa4b 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>
    String metric_to_publish = readGXMetrics(metric_name);
   dc0be:	4629      	mov	r1, r5
   dc0c0:	4622      	mov	r2, r4
   dc0c2:	a804      	add	r0, sp, #16
   dc0c4:	f7ff fea8 	bl	dbe18 <_ZN8GXSpiffs13readGXMetricsEPKc>
    if (metric_to_publish == String(SPIFFS_FAIL))
   dc0c8:	220a      	movs	r2, #10
   dc0ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   dc0ce:	a808      	add	r0, sp, #32
   dc0d0:	f007 fe1f 	bl	e3d12 <_ZN6StringC1Eih>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   dc0d4:	a908      	add	r1, sp, #32
   dc0d6:	a804      	add	r0, sp, #16
   dc0d8:	f007 ff05 	bl	e3ee6 <_ZNK6String6equalsERKS_>
   dc0dc:	4605      	mov	r5, r0
   dc0de:	a808      	add	r0, sp, #32
   dc0e0:	f007 fd4a 	bl	e3b78 <_ZN6StringD1Ev>
   dc0e4:	b155      	cbz	r5, dc0fc <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0x74>
        spiffslog.error("Metric empty or corrupted");
   dc0e6:	491f      	ldr	r1, [pc, #124]	; (dc164 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xdc>)
   dc0e8:	481d      	ldr	r0, [pc, #116]	; (dc160 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xd8>)
   dc0ea:	f7ff fa42 	bl	db572 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   dc0ee:	2400      	movs	r4, #0
    String metric_to_publish = readGXMetrics(metric_name);
   dc0f0:	a804      	add	r0, sp, #16
   dc0f2:	f007 fd41 	bl	e3b78 <_ZN6StringD1Ev>
}
   dc0f6:	4620      	mov	r0, r4
   dc0f8:	b00d      	add	sp, #52	; 0x34
   dc0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    spiffslog.info("Publishing metric '%s' from flash..", metric_name);
   dc0fc:	4622      	mov	r2, r4
   dc0fe:	491a      	ldr	r1, [pc, #104]	; (dc168 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xe0>)
   dc100:	4817      	ldr	r0, [pc, #92]	; (dc160 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xd8>)
   dc102:	f7fd fcd9 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
    return Flags<TagT, ValueT>(val_ | flags.val_);
   dc106:	4b19      	ldr	r3, [pc, #100]	; (dc16c <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xe4>)
   dc108:	4a19      	ldr	r2, [pc, #100]	; (dc170 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xe8>)
   dc10a:	781b      	ldrb	r3, [r3, #0]
   dc10c:	7812      	ldrb	r2, [r2, #0]
   dc10e:	4919      	ldr	r1, [pc, #100]	; (dc174 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xec>)
   dc110:	4313      	orrs	r3, r2
   dc112:	f88d 3000 	strb.w	r3, [sp]
   dc116:	9a04      	ldr	r2, [sp, #16]
   dc118:	233c      	movs	r3, #60	; 0x3c
   dc11a:	a808      	add	r0, sp, #32
   dc11c:	f005 fb9e 	bl	e185c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      ~__shared_ptr() = default;
   dc120:	a809      	add	r0, sp, #36	; 0x24
   dc122:	f7fe fae4 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    memset(last_published_metric, '\0', sizeof(last_published_metric));
   dc126:	2214      	movs	r2, #20
   dc128:	4629      	mov	r1, r5
   dc12a:	4813      	ldr	r0, [pc, #76]	; (dc178 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xf0>)
   dc12c:	f009 fac0 	bl	e56b0 <memset>
    strncpy(last_published_metric, metric_name, strlen(metric_name));
   dc130:	4620      	mov	r0, r4
   dc132:	f009 fb30 	bl	e5796 <strlen>
   dc136:	4621      	mov	r1, r4
   dc138:	4602      	mov	r2, r0
   dc13a:	480f      	ldr	r0, [pc, #60]	; (dc178 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xf0>)
   dc13c:	f009 fb45 	bl	e57ca <strncpy>
    EEPROM.put(EEPROM_ADDR_LAST_PUBL_METRIC, last_published_metric);
   dc140:	f008 fb06 	bl	e4750 <_Z21__fetch_global_EEPROMv>
   dc144:	490c      	ldr	r1, [pc, #48]	; (dc178 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xf0>)
   dc146:	2214      	movs	r2, #20
   dc148:	f240 200b 	movw	r0, #523	; 0x20b
   dc14c:	f004 fe02 	bl	e0d54 <HAL_EEPROM_Put>
    return true;
   dc150:	2401      	movs	r4, #1
        return t;
   dc152:	e7cd      	b.n	dc0f0 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0x68>
        (metrics_ts < last_published_ts || metrics_idx == last_published_idx)) return false;
   dc154:	2400      	movs	r4, #0
   dc156:	e7ce      	b.n	dc0f6 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0x6e>
   dc158:	000e7403 	.word	0x000e7403
   dc15c:	000e7776 	.word	0x000e7776
   dc160:	2003e220 	.word	0x2003e220
   dc164:	000e7791 	.word	0x000e7791
   dc168:	000e77ab 	.word	0x000e77ab
   dc16c:	2003e21c 	.word	0x2003e21c
   dc170:	2003e21d 	.word	0x2003e21d
   dc174:	000e70c4 	.word	0x000e70c4
   dc178:	2003e467 	.word	0x2003e467

000dc17c <_ZN8GXSpiffs16sendSavedMetricsEPKc>:
{
   dc17c:	b570      	push	{r4, r5, r6, lr}
   dc17e:	4605      	mov	r5, r0
   dc180:	b096      	sub	sp, #88	; 0x58
    spiffslog.info("In sendSavedMetrics...");
   dc182:	4831      	ldr	r0, [pc, #196]	; (dc248 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xcc>)
{
   dc184:	460c      	mov	r4, r1
    spiffslog.info("In sendSavedMetrics...");
   dc186:	4931      	ldr	r1, [pc, #196]	; (dc24c <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xd0>)
   dc188:	f7fd fc96 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
    GXPartitionOps partitionMgr(spiFlash, filesys);
   dc18c:	e9d5 1200 	ldrd	r1, r2, [r5]
   dc190:	a807      	add	r0, sp, #28
   dc192:	f7ff fcf1 	bl	dbb78 <_ZN14GXPartitionOpsC1EP15SpiFlashWinbondP14SpiffsParticle>
    sscanf(last_published_metric, "met%lu_%hu", &last_published_ts, &last_published_idx);
   dc196:	492e      	ldr	r1, [pc, #184]	; (dc250 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xd4>)
   dc198:	482e      	ldr	r0, [pc, #184]	; (dc254 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xd8>)
   dc19a:	ab01      	add	r3, sp, #4
   dc19c:	aa02      	add	r2, sp, #8
   dc19e:	f005 f8ef 	bl	e1380 <sscanf>
    sscanf(last_saved_metric, "met%lu_%hu", &last_saved_ts, &last_saved_idx);
   dc1a2:	492b      	ldr	r1, [pc, #172]	; (dc250 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xd4>)
   dc1a4:	f10d 0306 	add.w	r3, sp, #6
   dc1a8:	aa03      	add	r2, sp, #12
   dc1aa:	4620      	mov	r0, r4
   dc1ac:	f005 f8e8 	bl	e1380 <sscanf>
    spiffslog.trace("Last published metric timestamp and index: %lu, %d", last_published_ts, last_published_idx);
   dc1b0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   dc1b4:	9a02      	ldr	r2, [sp, #8]
   dc1b6:	4928      	ldr	r1, [pc, #160]	; (dc258 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xdc>)
   dc1b8:	4823      	ldr	r0, [pc, #140]	; (dc248 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xcc>)
   dc1ba:	f7ff f9cb 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>
    spiffslog.trace("Last saved metric timestamp and index: %lu, %d", last_saved_ts, last_saved_idx);
   dc1be:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   dc1c2:	9a03      	ldr	r2, [sp, #12]
   dc1c4:	4925      	ldr	r1, [pc, #148]	; (dc25c <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xe0>)
   dc1c6:	4820      	ldr	r0, [pc, #128]	; (dc248 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xcc>)
   dc1c8:	f7ff f9c4 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>
    if (last_published_ts >= last_saved_ts)
   dc1cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dc1d0:	429a      	cmp	r2, r3
   dc1d2:	d30a      	bcc.n	dc1ea <_ZN8GXSpiffs16sendSavedMetricsEPKc+0x6e>
        spiffslog.info("All saved Metrics have been published.");
   dc1d4:	4922      	ldr	r1, [pc, #136]	; (dc260 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xe4>)
   dc1d6:	481c      	ldr	r0, [pc, #112]	; (dc248 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xcc>)
   dc1d8:	f7fd fc6e 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
        return SPIFFS_RET::SPIFFS_NO_SAVED_METRICS_TO_PUBLISH;
   dc1dc:	2401      	movs	r4, #1
    GXPartitionOps partitionMgr(spiFlash, filesys);
   dc1de:	a807      	add	r0, sp, #28
   dc1e0:	f7ff fcd7 	bl	dbb92 <_ZN14GXPartitionOpsD1Ev>
}
   dc1e4:	4620      	mov	r0, r4
   dc1e6:	b016      	add	sp, #88	; 0x58
   dc1e8:	bd70      	pop	{r4, r5, r6, pc}
    partitionMgr.openDirectory(&dir);
   dc1ea:	a904      	add	r1, sp, #16
   dc1ec:	a807      	add	r0, sp, #28
   dc1ee:	f7ff fe71 	bl	dbed4 <_ZN14GXPartitionOps13openDirectoryEP10spiffs_DIR>
    spiffs_dirent GXMetric; uint8_t num_metrics_published = 0;
   dc1f2:	2600      	movs	r6, #0
   dc1f4:	a90b      	add	r1, sp, #44	; 0x2c
   dc1f6:	a804      	add	r0, sp, #16
   dc1f8:	f7f9 fcc8 	bl	d5b8c <SPIFFS_readdir>
    while(partitionMgr.readDirectory(&dir, &GXMetric))
   dc1fc:	4604      	mov	r4, r0
   dc1fe:	2800      	cmp	r0, #0
   dc200:	d0ed      	beq.n	dc1de <_ZN8GXSpiffs16sendSavedMetricsEPKc+0x62>
        if (num_metrics_published >= MAX_METRICS_TO_PUBLISH_PER_LOOP)
   dc202:	2e5f      	cmp	r6, #95	; 0x5f
   dc204:	d906      	bls.n	dc214 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0x98>
            spiffslog.warn("Maximum number (%u) of saved metrics have been published in this loop", num_metrics_published);
   dc206:	4917      	ldr	r1, [pc, #92]	; (dc264 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xe8>)
   dc208:	480f      	ldr	r0, [pc, #60]	; (dc248 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xcc>)
   dc20a:	4632      	mov	r2, r6
   dc20c:	f7fe fe5a 	bl	daec4 <_ZNK5spark6Logger4warnEPKcz>
            return SPIFFS_RET::SPIFFS_MAX_SAVED_METRICS_PUBLISHED;
   dc210:	2402      	movs	r4, #2
   dc212:	e7e4      	b.n	dc1de <_ZN8GXSpiffs16sendSavedMetricsEPKc+0x62>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   dc214:	f005 f80c 	bl	e1230 <spark_cloud_flag_connected>
        if (!Particle.connected()) return SPIFFS_INTERNET_CONN_LOST;
   dc218:	b198      	cbz	r0, dc242 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xc6>
        if(publishSavedMetrics((const char*)GXMetric.name, last_published_ts, last_published_idx))
   dc21a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   dc21e:	9a02      	ldr	r2, [sp, #8]
   dc220:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
   dc224:	4628      	mov	r0, r5
   dc226:	f7ff ff2f 	bl	dc088 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt>
   dc22a:	b128      	cbz	r0, dc238 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xbc>
            num_metrics_published++;
   dc22c:	3601      	adds	r6, #1
            delay(1010);
   dc22e:	f240 30f2 	movw	r0, #1010	; 0x3f2
            num_metrics_published++;
   dc232:	b2f6      	uxtb	r6, r6
            delay(1010);
   dc234:	f005 f92b 	bl	e148e <delay>
        spiFlash->begin();
   dc238:	6828      	ldr	r0, [r5, #0]
   dc23a:	6803      	ldr	r3, [r0, #0]
   dc23c:	689b      	ldr	r3, [r3, #8]
   dc23e:	4798      	blx	r3
    while(partitionMgr.readDirectory(&dir, &GXMetric))
   dc240:	e7d8      	b.n	dc1f4 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0x78>
        if (!Particle.connected()) return SPIFFS_INTERNET_CONN_LOST;
   dc242:	2403      	movs	r4, #3
   dc244:	e7cb      	b.n	dc1de <_ZN8GXSpiffs16sendSavedMetricsEPKc+0x62>
   dc246:	bf00      	nop
   dc248:	2003e220 	.word	0x2003e220
   dc24c:	000e77cf 	.word	0x000e77cf
   dc250:	000e7403 	.word	0x000e7403
   dc254:	2003e467 	.word	0x2003e467
   dc258:	000e77e6 	.word	0x000e77e6
   dc25c:	000e7819 	.word	0x000e7819
   dc260:	000e7848 	.word	0x000e7848
   dc264:	000e786f 	.word	0x000e786f

000dc268 <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_>:
{
   dc268:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc26a:	460c      	mov	r4, r1
   dc26c:	b08d      	sub	sp, #52	; 0x34
    if ((sscanf(metric_name, "met%lu_%hu", &metric_ts, &metric_idx) != 2)  ||
   dc26e:	4928      	ldr	r1, [pc, #160]	; (dc310 <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0xa8>)
{
   dc270:	4605      	mov	r5, r0
   dc272:	4616      	mov	r6, r2
   dc274:	461f      	mov	r7, r3
    if ((sscanf(metric_name, "met%lu_%hu", &metric_ts, &metric_idx) != 2)  ||
   dc276:	aa03      	add	r2, sp, #12
   dc278:	f10d 030a 	add.w	r3, sp, #10
   dc27c:	4620      	mov	r0, r4
   dc27e:	f005 f87f 	bl	e1380 <sscanf>
   dc282:	2802      	cmp	r0, #2
   dc284:	d141      	bne.n	dc30a <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0xa2>
        (metric_ts < start_time || metric_ts > end_time)) return false;
   dc286:	9b03      	ldr	r3, [sp, #12]
    if ((sscanf(metric_name, "met%lu_%hu", &metric_ts, &metric_idx) != 2)  ||
   dc288:	683a      	ldr	r2, [r7, #0]
   dc28a:	429a      	cmp	r2, r3
   dc28c:	d83d      	bhi.n	dc30a <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0xa2>
        (metric_ts < start_time || metric_ts > end_time)) return false;
   dc28e:	6832      	ldr	r2, [r6, #0]
   dc290:	4293      	cmp	r3, r2
   dc292:	d83a      	bhi.n	dc30a <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0xa2>
    spiffslog.trace("Getting information for %s", metric_name);
   dc294:	491f      	ldr	r1, [pc, #124]	; (dc314 <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0xac>)
   dc296:	4820      	ldr	r0, [pc, #128]	; (dc318 <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0xb0>)
   dc298:	4622      	mov	r2, r4
   dc29a:	f7ff f95b 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>
    String metric_to_publish = readGXMetrics(metric_name);
   dc29e:	4629      	mov	r1, r5
   dc2a0:	4622      	mov	r2, r4
   dc2a2:	a804      	add	r0, sp, #16
   dc2a4:	f7ff fdb8 	bl	dbe18 <_ZN8GXSpiffs13readGXMetricsEPKc>
    if (metric_to_publish == String(SPIFFS_FAIL))
   dc2a8:	220a      	movs	r2, #10
   dc2aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   dc2ae:	a808      	add	r0, sp, #32
   dc2b0:	f007 fd2f 	bl	e3d12 <_ZN6StringC1Eih>
   dc2b4:	a908      	add	r1, sp, #32
   dc2b6:	a804      	add	r0, sp, #16
   dc2b8:	f007 fe15 	bl	e3ee6 <_ZNK6String6equalsERKS_>
   dc2bc:	4605      	mov	r5, r0
   dc2be:	a808      	add	r0, sp, #32
   dc2c0:	f007 fc5a 	bl	e3b78 <_ZN6StringD1Ev>
   dc2c4:	b155      	cbz	r5, dc2dc <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0x74>
        spiffslog.error("Metric empty or corrupted");
   dc2c6:	4915      	ldr	r1, [pc, #84]	; (dc31c <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0xb4>)
   dc2c8:	4813      	ldr	r0, [pc, #76]	; (dc318 <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0xb0>)
   dc2ca:	f7ff f952 	bl	db572 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   dc2ce:	2400      	movs	r4, #0
    String metric_to_publish = readGXMetrics(metric_name);
   dc2d0:	a804      	add	r0, sp, #16
   dc2d2:	f007 fc51 	bl	e3b78 <_ZN6StringD1Ev>
}
   dc2d6:	4620      	mov	r0, r4
   dc2d8:	b00d      	add	sp, #52	; 0x34
   dc2da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    spiffslog.info("Publishing metric '%s' from flash..", metric_name);
   dc2dc:	4622      	mov	r2, r4
   dc2de:	4910      	ldr	r1, [pc, #64]	; (dc320 <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0xb8>)
   dc2e0:	480d      	ldr	r0, [pc, #52]	; (dc318 <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0xb0>)
   dc2e2:	f7fd fbe9 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
   dc2e6:	4b0f      	ldr	r3, [pc, #60]	; (dc324 <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0xbc>)
   dc2e8:	4a0f      	ldr	r2, [pc, #60]	; (dc328 <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0xc0>)
   dc2ea:	781b      	ldrb	r3, [r3, #0]
   dc2ec:	7812      	ldrb	r2, [r2, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   dc2ee:	490f      	ldr	r1, [pc, #60]	; (dc32c <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0xc4>)
   dc2f0:	4313      	orrs	r3, r2
   dc2f2:	f88d 3000 	strb.w	r3, [sp]
   dc2f6:	9a04      	ldr	r2, [sp, #16]
   dc2f8:	233c      	movs	r3, #60	; 0x3c
   dc2fa:	a808      	add	r0, sp, #32
   dc2fc:	f005 faae 	bl	e185c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   dc300:	a809      	add	r0, sp, #36	; 0x24
   dc302:	f7fe f9f4 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return true;
   dc306:	2401      	movs	r4, #1
   dc308:	e7e2      	b.n	dc2d0 <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0x68>
        (metric_ts < start_time || metric_ts > end_time)) return false;
   dc30a:	2400      	movs	r4, #0
   dc30c:	e7e3      	b.n	dc2d6 <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0x6e>
   dc30e:	bf00      	nop
   dc310:	000e7403 	.word	0x000e7403
   dc314:	000e7776 	.word	0x000e7776
   dc318:	2003e220 	.word	0x2003e220
   dc31c:	000e7791 	.word	0x000e7791
   dc320:	000e77ab 	.word	0x000e77ab
   dc324:	2003e21c 	.word	0x2003e21c
   dc328:	2003e21d 	.word	0x2003e21d
   dc32c:	000e70c4 	.word	0x000e70c4

000dc330 <_ZN8GXSpiffs15retrieveMetricsERmS0_>:
{
   dc330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc334:	4605      	mov	r5, r0
   dc336:	b092      	sub	sp, #72	; 0x48
    spiffslog.info("Publishing metrics requested from the Cloud..");
   dc338:	481d      	ldr	r0, [pc, #116]	; (dc3b0 <_ZN8GXSpiffs15retrieveMetricsERmS0_+0x80>)
{
   dc33a:	460f      	mov	r7, r1
    spiffslog.info("Publishing metrics requested from the Cloud..");
   dc33c:	491d      	ldr	r1, [pc, #116]	; (dc3b4 <_ZN8GXSpiffs15retrieveMetricsERmS0_+0x84>)
{
   dc33e:	4690      	mov	r8, r2
    spiffslog.info("Publishing metrics requested from the Cloud..");
   dc340:	f7fd fbba 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
    GXPartitionOps partitionMgr(spiFlash, filesys);
   dc344:	e9d5 1200 	ldrd	r1, r2, [r5]
   dc348:	a803      	add	r0, sp, #12
   dc34a:	f7ff fc15 	bl	dbb78 <_ZN14GXPartitionOpsC1EP15SpiFlashWinbondP14SpiffsParticle>
    partitionMgr.openDirectory(&dir);
   dc34e:	4669      	mov	r1, sp
   dc350:	a803      	add	r0, sp, #12
   dc352:	f7ff fdbf 	bl	dbed4 <_ZN14GXPartitionOps13openDirectoryEP10spiffs_DIR>
    int num_metrics_published = 0;
   dc356:	2600      	movs	r6, #0
   dc358:	a907      	add	r1, sp, #28
   dc35a:	4668      	mov	r0, sp
   dc35c:	f7f9 fc16 	bl	d5b8c <SPIFFS_readdir>
    while(partitionMgr.readDirectory(&dir, &GXMetric))
   dc360:	4604      	mov	r4, r0
   dc362:	b138      	cbz	r0, dc374 <_ZN8GXSpiffs15retrieveMetricsERmS0_+0x44>
        if (num_metrics_published >= MAX_METRICS_TO_PUBLISH_PER_LOOP)
   dc364:	2e5f      	cmp	r6, #95	; 0x5f
   dc366:	dd0c      	ble.n	dc382 <_ZN8GXSpiffs15retrieveMetricsERmS0_+0x52>
            spiffslog.warn("Maximum number (%u) of saved metrics have been published in this loop", num_metrics_published);
   dc368:	4913      	ldr	r1, [pc, #76]	; (dc3b8 <_ZN8GXSpiffs15retrieveMetricsERmS0_+0x88>)
   dc36a:	4811      	ldr	r0, [pc, #68]	; (dc3b0 <_ZN8GXSpiffs15retrieveMetricsERmS0_+0x80>)
   dc36c:	4632      	mov	r2, r6
   dc36e:	f7fe fda9 	bl	daec4 <_ZNK5spark6Logger4warnEPKcz>
            return SPIFFS_RET::SPIFFS_MAX_SAVED_METRICS_PUBLISHED;
   dc372:	2402      	movs	r4, #2
    GXPartitionOps partitionMgr(spiFlash, filesys);
   dc374:	a803      	add	r0, sp, #12
   dc376:	f7ff fc0c 	bl	dbb92 <_ZN14GXPartitionOpsD1Ev>
}
   dc37a:	4620      	mov	r0, r4
   dc37c:	b012      	add	sp, #72	; 0x48
   dc37e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   dc382:	f004 ff55 	bl	e1230 <spark_cloud_flag_connected>
        if (!Particle.connected()) return SPIFFS_INTERNET_CONN_LOST;
   dc386:	b188      	cbz	r0, dc3ac <_ZN8GXSpiffs15retrieveMetricsERmS0_+0x7c>
        if(publishSavedMetrics((const char*)GXMetric.name, end_time, start_time))
   dc388:	4643      	mov	r3, r8
   dc38a:	463a      	mov	r2, r7
   dc38c:	f10d 011e 	add.w	r1, sp, #30
   dc390:	4628      	mov	r0, r5
   dc392:	f7ff ff69 	bl	dc268 <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_>
   dc396:	b120      	cbz	r0, dc3a2 <_ZN8GXSpiffs15retrieveMetricsERmS0_+0x72>
            delay(1010);
   dc398:	f240 30f2 	movw	r0, #1010	; 0x3f2
            num_metrics_published++;
   dc39c:	3601      	adds	r6, #1
            delay(1010);
   dc39e:	f005 f876 	bl	e148e <delay>
        spiFlash->begin();
   dc3a2:	6828      	ldr	r0, [r5, #0]
   dc3a4:	6803      	ldr	r3, [r0, #0]
   dc3a6:	689b      	ldr	r3, [r3, #8]
   dc3a8:	4798      	blx	r3
    while(partitionMgr.readDirectory(&dir, &GXMetric))
   dc3aa:	e7d5      	b.n	dc358 <_ZN8GXSpiffs15retrieveMetricsERmS0_+0x28>
        if (!Particle.connected()) return SPIFFS_INTERNET_CONN_LOST;
   dc3ac:	2403      	movs	r4, #3
   dc3ae:	e7e1      	b.n	dc374 <_ZN8GXSpiffs15retrieveMetricsERmS0_+0x44>
   dc3b0:	2003e220 	.word	0x2003e220
   dc3b4:	000e78b5 	.word	0x000e78b5
   dc3b8:	000e786f 	.word	0x000e786f

000dc3bc <_GLOBAL__sub_I_spiffslog>:
        val_(val) {
   dc3bc:	4b04      	ldr	r3, [pc, #16]	; (dc3d0 <_GLOBAL__sub_I_spiffslog+0x14>)
   dc3be:	2201      	movs	r2, #1
   dc3c0:	701a      	strb	r2, [r3, #0]
   dc3c2:	4b04      	ldr	r3, [pc, #16]	; (dc3d4 <_GLOBAL__sub_I_spiffslog+0x18>)
   dc3c4:	2208      	movs	r2, #8
   dc3c6:	701a      	strb	r2, [r3, #0]
        name_(name) {
   dc3c8:	4b03      	ldr	r3, [pc, #12]	; (dc3d8 <_GLOBAL__sub_I_spiffslog+0x1c>)
   dc3ca:	4a04      	ldr	r2, [pc, #16]	; (dc3dc <_GLOBAL__sub_I_spiffslog+0x20>)
   dc3cc:	601a      	str	r2, [r3, #0]

spiffs_dirent* GXPartitionOps::readDirectory(spiffs_DIR *dir, spiffs_dirent *dirent)
{
    return GXFileSys->readdir(dir, dirent);
}
   dc3ce:	4770      	bx	lr
   dc3d0:	2003e21c 	.word	0x2003e21c
   dc3d4:	2003e21d 	.word	0x2003e21d
   dc3d8:	2003e220 	.word	0x2003e220
   dc3dc:	000e78e3 	.word	0x000e78e3

000dc3e0 <_Z14storeGenConfig13GeneratorSlot6Stringhhhth>:
}


int storeGenConfig(GeneratorSlot gen_slot, String genName, uint8_t gen_type, uint8_t gen_address,
                   uint8_t relay_assign, uint16_t kva_rating, uint8_t baudRrate)
{
   dc3e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

    uint8_t new_gen_slot = static_cast<int>(gen_slot) - ZERO_INDEX_CORRECTION;
   dc3e4:	1e44      	subs	r4, r0, #1
{
   dc3e6:	b097      	sub	sp, #92	; 0x5c
    uint8_t new_gen_slot = static_cast<int>(gen_slot) - ZERO_INDEX_CORRECTION;
   dc3e8:	b2e4      	uxtb	r4, r4
{
   dc3ea:	4606      	mov	r6, r0
   dc3ec:	4689      	mov	r9, r1
   dc3ee:	4690      	mov	r8, r2

    GeneratorConfig newGenConfig[MAXIMUM_GENSETS];
   dc3f0:	4924      	ldr	r1, [pc, #144]	; (dc484 <_Z14storeGenConfig13GeneratorSlot6Stringhhhth+0xa4>)
   dc3f2:	2254      	movs	r2, #84	; 0x54
   dc3f4:	a801      	add	r0, sp, #4
{
   dc3f6:	461f      	mov	r7, r3

    strcpy(newGenConfig[new_gen_slot].name, genName);
   dc3f8:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
    GeneratorConfig newGenConfig[MAXIMUM_GENSETS];
   dc3fc:	f009 f930 	bl	e5660 <memcpy>
    strcpy(newGenConfig[new_gen_slot].name, genName);
   dc400:	ab01      	add	r3, sp, #4
   dc402:	eb03 0545 	add.w	r5, r3, r5, lsl #1
   dc406:	f8d9 1000 	ldr.w	r1, [r9]
   dc40a:	4628      	mov	r0, r5
   dc40c:	f009 f99d 	bl	e574a <strcpy>
    newGenConfig[new_gen_slot].type = gen_type;
   dc410:	f04f 090e 	mov.w	r9, #14
   dc414:	ab16      	add	r3, sp, #88	; 0x58
   dc416:	fb09 3104 	mla	r1, r9, r4, r3
    newGenConfig[new_gen_slot].slave_id = gen_address;
    newGenConfig[new_gen_slot].relay = relay_assign;
   dc41a:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
   dc41e:	f801 3c4c 	strb.w	r3, [r1, #-76]
    newGenConfig[new_gen_slot].kva_rating = kva_rating;
   dc422:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
   dc426:	f821 3c4a 	strh.w	r3, [r1, #-74]
    newGenConfig[new_gen_slot].baud_rate = baudRrate;
   dc42a:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
    newGenConfig[new_gen_slot].type = gen_type;
   dc42e:	f801 8c4e 	strb.w	r8, [r1, #-78]
    newGenConfig[new_gen_slot].slave_id = gen_address;
   dc432:	f801 7c4d 	strb.w	r7, [r1, #-77]
    newGenConfig[new_gen_slot].baud_rate = baudRrate;
   dc436:	f801 3c48 	strb.w	r3, [r1, #-72]

    EEPROM.put(GENCONFIG_EEPROM_ADDRESS[new_gen_slot], newGenConfig[new_gen_slot]);
   dc43a:	f008 f989 	bl	e4750 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   dc43e:	4b12      	ldr	r3, [pc, #72]	; (dc488 <_Z14storeGenConfig13GeneratorSlot6Stringhhhth+0xa8>)
   dc440:	464a      	mov	r2, r9
   dc442:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
   dc446:	4629      	mov	r1, r5
   dc448:	f004 fc84 	bl	e0d54 <HAL_EEPROM_Put>
    
    uint8_t last_saved_config = new_gen_slot + ZERO_INDEX_CORRECTION;     
   dc44c:	f88d 6003 	strb.w	r6, [sp, #3]
    EEPROM.put(EEPROM_ADDR_GENCONFIGS_STATUS, last_saved_config);
   dc450:	f008 f97e 	bl	e4750 <_Z21__fetch_global_EEPROMv>
   dc454:	f10d 0103 	add.w	r1, sp, #3
   dc458:	2201      	movs	r2, #1
   dc45a:	f240 2073 	movw	r0, #627	; 0x273
   dc45e:	f004 fc79 	bl	e0d54 <HAL_EEPROM_Put>

    new_genconfig_flag = true;
   dc462:	4b0a      	ldr	r3, [pc, #40]	; (dc48c <_Z14storeGenConfig13GeneratorSlot6Stringhhhth+0xac>)
   dc464:	2201      	movs	r2, #1
   dc466:	701a      	strb	r2, [r3, #0]
   dc468:	f004 fc5c 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
    new_genconfig_resetdelay = millis() + RESET_DELAY_90S;
   dc46c:	4b08      	ldr	r3, [pc, #32]	; (dc490 <_Z14storeGenConfig13GeneratorSlot6Stringhhhth+0xb0>)
   dc46e:	f500 30af 	add.w	r0, r0, #89600	; 0x15e00
   dc472:	f500 70c8 	add.w	r0, r0, #400	; 0x190
   dc476:	6018      	str	r0, [r3, #0]

    return last_saved_config;                                
}
   dc478:	f89d 0003 	ldrb.w	r0, [sp, #3]
   dc47c:	b017      	add	sp, #92	; 0x5c
   dc47e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dc482:	bf00      	nop
   dc484:	000e7916 	.word	0x000e7916
   dc488:	2003d6e0 	.word	0x2003d6e0
   dc48c:	2003e480 	.word	0x2003e480
   dc490:	2003e484 	.word	0x2003e484

000dc494 <_Z14resetGenConfigv>:

bool resetGenConfig()
{
   dc494:	b510      	push	{r4, lr}
   dc496:	b096      	sub	sp, #88	; 0x58

    GeneratorConfig defaultGenConfig[MAXIMUM_GENSETS];
   dc498:	4913      	ldr	r1, [pc, #76]	; (dc4e8 <_Z14resetGenConfigv+0x54>)
   dc49a:	2254      	movs	r2, #84	; 0x54
   dc49c:	a801      	add	r0, sp, #4
   dc49e:	f009 f8df 	bl	e5660 <memcpy>

    EEPROM.put(EEPROM_GENCONFIGS_STARTADDR, defaultGenConfig);
   dc4a2:	f008 f955 	bl	e4750 <_Z21__fetch_global_EEPROMv>
   dc4a6:	a901      	add	r1, sp, #4
   dc4a8:	2254      	movs	r2, #84	; 0x54
   dc4aa:	f240 201f 	movw	r0, #543	; 0x21f
   dc4ae:	f004 fc51 	bl	e0d54 <HAL_EEPROM_Put>

    uint8_t last_saved_config = GENS_REMOVED;
   dc4b2:	2307      	movs	r3, #7
   dc4b4:	f88d 3003 	strb.w	r3, [sp, #3]
    EEPROM.put(EEPROM_ADDR_GENCONFIGS_STATUS, last_saved_config);
   dc4b8:	f008 f94a 	bl	e4750 <_Z21__fetch_global_EEPROMv>
   dc4bc:	2201      	movs	r2, #1
   dc4be:	f10d 0103 	add.w	r1, sp, #3
   dc4c2:	f240 2073 	movw	r0, #627	; 0x273
   dc4c6:	f004 fc45 	bl	e0d54 <HAL_EEPROM_Put>

    new_genconfig_flag = true;
   dc4ca:	4b08      	ldr	r3, [pc, #32]	; (dc4ec <_Z14resetGenConfigv+0x58>)
   dc4cc:	2401      	movs	r4, #1
   dc4ce:	701c      	strb	r4, [r3, #0]
   dc4d0:	f004 fc28 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
    new_genconfig_resetdelay = millis() + RESET_DELAY_90S;
   dc4d4:	4b06      	ldr	r3, [pc, #24]	; (dc4f0 <_Z14resetGenConfigv+0x5c>)
   dc4d6:	f500 30af 	add.w	r0, r0, #89600	; 0x15e00
   dc4da:	f500 70c8 	add.w	r0, r0, #400	; 0x190
   dc4de:	6018      	str	r0, [r3, #0]

    return true;   
}
   dc4e0:	4620      	mov	r0, r4
   dc4e2:	b016      	add	sp, #88	; 0x58
   dc4e4:	bd10      	pop	{r4, pc}
   dc4e6:	bf00      	nop
   dc4e8:	000e7916 	.word	0x000e7916
   dc4ec:	2003e480 	.word	0x2003e480
   dc4f0:	2003e484 	.word	0x2003e484

000dc4f4 <_Z18serialStorageCheck13GeneratorSlot>:

bool serialStorageCheck(GeneratorSlot gen_slot)
{
   dc4f4:	b513      	push	{r0, r1, r4, lr}
    uint8_t new_gen_slot = static_cast<uint8_t>(gen_slot);

    uint8_t last_saved_genslot = NO_GEN_SPECIFIED;
   dc4f6:	2300      	movs	r3, #0
   dc4f8:	f88d 3007 	strb.w	r3, [sp, #7]
{
   dc4fc:	4604      	mov	r4, r0
    EEPROM.get(EEPROM_ADDR_GENCONFIGS_STATUS, last_saved_genslot);
   dc4fe:	f008 f927 	bl	e4750 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   dc502:	f240 2073 	movw	r0, #627	; 0x273
   dc506:	2201      	movs	r2, #1
   dc508:	f10d 0107 	add.w	r1, sp, #7
   dc50c:	f004 fc1a 	bl	e0d44 <HAL_EEPROM_Get>

    // We have reset all Gen configurations to thier default values and now intend to fill genSlot_1
    if ((last_saved_genslot == GENS_REMOVED) && 
   dc510:	f89d 0007 	ldrb.w	r0, [sp, #7]
        (new_gen_slot == GEN1))
    { return true; }

    // We have filled genSlot_6 and now intend to fill genSlot_1
    if ((last_saved_genslot == GEN6) && 
   dc514:	1f83      	subs	r3, r0, #6
   dc516:	2b01      	cmp	r3, #1
   dc518:	d801      	bhi.n	dc51e <_Z18serialStorageCheck13GeneratorSlot+0x2a>
    if ((last_saved_genslot == GENS_REMOVED) && 
   dc51a:	2c01      	cmp	r4, #1
   dc51c:	d007      	beq.n	dc52e <_Z18serialStorageCheck13GeneratorSlot+0x3a>
        (new_gen_slot == GEN1))
    { return true; }

    // We have filled genSlot_(N) and now intend to override it or fill genSlot_(N+1)
    if ((last_saved_genslot == new_gen_slot) || 
   dc51e:	42a0      	cmp	r0, r4
   dc520:	d005      	beq.n	dc52e <_Z18serialStorageCheck13GeneratorSlot+0x3a>
        (new_gen_slot == (last_saved_genslot + ZERO_INDEX_CORRECTION)))
   dc522:	3001      	adds	r0, #1
    if ((last_saved_genslot == new_gen_slot) || 
   dc524:	1b03      	subs	r3, r0, r4
   dc526:	4258      	negs	r0, r3
   dc528:	4158      	adcs	r0, r3
    { return true; }

    return false;
}
   dc52a:	b002      	add	sp, #8
   dc52c:	bd10      	pop	{r4, pc}
    { return true; }
   dc52e:	2001      	movs	r0, #1
   dc530:	e7fb      	b.n	dc52a <_Z18serialStorageCheck13GeneratorSlot+0x36>
	...

000dc534 <_Z17genConfigurations6String>:
{
   dc534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dc538:	b095      	sub	sp, #84	; 0x54
    String genPosition = getStringValueAtIndex(fullCommand, COMMA_CHAR, 0);
   dc53a:	4601      	mov	r1, r0
{
   dc53c:	4604      	mov	r4, r0
    String genPosition = getStringValueAtIndex(fullCommand, COMMA_CHAR, 0);
   dc53e:	a810      	add	r0, sp, #64	; 0x40
   dc540:	f007 fbb0 	bl	e3ca4 <_ZN6StringC1ERKS_>
   dc544:	a910      	add	r1, sp, #64	; 0x40
   dc546:	2300      	movs	r3, #0
   dc548:	222c      	movs	r2, #44	; 0x2c
   dc54a:	a804      	add	r0, sp, #16
   dc54c:	f001 f8c8 	bl	dd6e0 <_Z21getStringValueAtIndex6Stringci>
   dc550:	a810      	add	r0, sp, #64	; 0x40
   dc552:	f007 fb11 	bl	e3b78 <_ZN6StringD1Ev>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   dc556:	4985      	ldr	r1, [pc, #532]	; (dc76c <_Z17genConfigurations6String+0x238>)
   dc558:	a804      	add	r0, sp, #16
   dc55a:	f007 fcd1 	bl	e3f00 <_ZNK6String6equalsEPKc>
    if (genPosition == "gen1") received_gen_slot = GEN1;
   dc55e:	2800      	cmp	r0, #0
   dc560:	d13e      	bne.n	dc5e0 <_Z17genConfigurations6String+0xac>
   dc562:	4983      	ldr	r1, [pc, #524]	; (dc770 <_Z17genConfigurations6String+0x23c>)
   dc564:	a804      	add	r0, sp, #16
   dc566:	f007 fccb 	bl	e3f00 <_ZNK6String6equalsEPKc>
    else if (genPosition == "gen2") received_gen_slot = GEN2;
   dc56a:	2800      	cmp	r0, #0
   dc56c:	f040 80df 	bne.w	dc72e <_Z17genConfigurations6String+0x1fa>
   dc570:	4980      	ldr	r1, [pc, #512]	; (dc774 <_Z17genConfigurations6String+0x240>)
   dc572:	a804      	add	r0, sp, #16
   dc574:	f007 fcc4 	bl	e3f00 <_ZNK6String6equalsEPKc>
    else if (genPosition == "gen3") received_gen_slot = GEN3;
   dc578:	2800      	cmp	r0, #0
   dc57a:	f040 80da 	bne.w	dc732 <_Z17genConfigurations6String+0x1fe>
   dc57e:	497e      	ldr	r1, [pc, #504]	; (dc778 <_Z17genConfigurations6String+0x244>)
   dc580:	a804      	add	r0, sp, #16
   dc582:	f007 fcbd 	bl	e3f00 <_ZNK6String6equalsEPKc>
    else if (genPosition == "gen4") received_gen_slot = GEN4;
   dc586:	2800      	cmp	r0, #0
   dc588:	f040 80d5 	bne.w	dc736 <_Z17genConfigurations6String+0x202>
   dc58c:	497b      	ldr	r1, [pc, #492]	; (dc77c <_Z17genConfigurations6String+0x248>)
   dc58e:	a804      	add	r0, sp, #16
   dc590:	f007 fcb6 	bl	e3f00 <_ZNK6String6equalsEPKc>
    else if (genPosition == "gen5") received_gen_slot = GEN5;
   dc594:	2800      	cmp	r0, #0
   dc596:	f040 80d0 	bne.w	dc73a <_Z17genConfigurations6String+0x206>
   dc59a:	4979      	ldr	r1, [pc, #484]	; (dc780 <_Z17genConfigurations6String+0x24c>)
   dc59c:	a804      	add	r0, sp, #16
   dc59e:	f007 fcaf 	bl	e3f00 <_ZNK6String6equalsEPKc>
    else if (genPosition == "gen6") received_gen_slot = GEN6;
   dc5a2:	2800      	cmp	r0, #0
   dc5a4:	f040 80cb 	bne.w	dc73e <_Z17genConfigurations6String+0x20a>
   dc5a8:	4976      	ldr	r1, [pc, #472]	; (dc784 <_Z17genConfigurations6String+0x250>)
   dc5aa:	a804      	add	r0, sp, #16
   dc5ac:	f007 fca8 	bl	e3f00 <_ZNK6String6equalsEPKc>
    else if (genPosition == "clear") received_gen_slot = GENS_REMOVED;
   dc5b0:	4604      	mov	r4, r0
   dc5b2:	b968      	cbnz	r0, dc5d0 <_Z17genConfigurations6String+0x9c>
   dc5b4:	4974      	ldr	r1, [pc, #464]	; (dc788 <_Z17genConfigurations6String+0x254>)
   dc5b6:	a804      	add	r0, sp, #16
   dc5b8:	f007 fca2 	bl	e3f00 <_ZNK6String6equalsEPKc>
    else if (genPosition == "") received_gen_slot = NO_GEN_SPECIFIED;
   dc5bc:	b960      	cbnz	r0, dc5d8 <_Z17genConfigurations6String+0xa4>
    else return GENCONFIG_SLOT_ERROR;
   dc5be:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    String genPosition = getStringValueAtIndex(fullCommand, COMMA_CHAR, 0);
   dc5c2:	a804      	add	r0, sp, #16
   dc5c4:	f007 fad8 	bl	e3b78 <_ZN6StringD1Ev>
}
   dc5c8:	4620      	mov	r0, r4
   dc5ca:	b015      	add	sp, #84	; 0x54
   dc5cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        resetGenConfig();
   dc5d0:	f7ff ff60 	bl	dc494 <_Z14resetGenConfigv>
        return (static_cast<int>(received_gen_slot));
   dc5d4:	2407      	movs	r4, #7
   dc5d6:	e7f4      	b.n	dc5c2 <_Z17genConfigurations6String+0x8e>
        publish_genconfig_flag = true;
   dc5d8:	4b6c      	ldr	r3, [pc, #432]	; (dc78c <_Z17genConfigurations6String+0x258>)
   dc5da:	2201      	movs	r2, #1
   dc5dc:	701a      	strb	r2, [r3, #0]
        return (static_cast<int>(received_gen_slot));
   dc5de:	e7f0      	b.n	dc5c2 <_Z17genConfigurations6String+0x8e>
    if (genPosition == "gen1") received_gen_slot = GEN1;
   dc5e0:	2501      	movs	r5, #1
    if (serialStorageCheck(received_gen_slot) == false)
   dc5e2:	4628      	mov	r0, r5
   dc5e4:	f7ff ff86 	bl	dc4f4 <_Z18serialStorageCheck13GeneratorSlot>
   dc5e8:	2800      	cmp	r0, #0
   dc5ea:	f000 80bc 	beq.w	dc766 <_Z17genConfigurations6String+0x232>
    String receivedGenName = getStringValueAtIndex(fullCommand, COMMA_CHAR, 1);
   dc5ee:	4621      	mov	r1, r4
   dc5f0:	a810      	add	r0, sp, #64	; 0x40
   dc5f2:	f007 fb57 	bl	e3ca4 <_ZN6StringC1ERKS_>
   dc5f6:	2301      	movs	r3, #1
   dc5f8:	222c      	movs	r2, #44	; 0x2c
   dc5fa:	a910      	add	r1, sp, #64	; 0x40
   dc5fc:	a808      	add	r0, sp, #32
   dc5fe:	f001 f86f 	bl	dd6e0 <_Z21getStringValueAtIndex6Stringci>
   dc602:	a810      	add	r0, sp, #64	; 0x40
   dc604:	f007 fab8 	bl	e3b78 <_ZN6StringD1Ev>
    if (((receivedGenName.length() < MIN_GEN_NAME_LENGTH) || (receivedGenName.length() > MAX_GEN_NAME_LENGTH)))
   dc608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc60a:	3b03      	subs	r3, #3
   dc60c:	2b02      	cmp	r3, #2
   dc60e:	f200 8098 	bhi.w	dc742 <_Z17genConfigurations6String+0x20e>
    uint8_t received_gen_type = atoi(getStringValueAtIndex(fullCommand, COMMA_CHAR, 2));
   dc612:	4621      	mov	r1, r4
   dc614:	a80c      	add	r0, sp, #48	; 0x30
   dc616:	f007 fb45 	bl	e3ca4 <_ZN6StringC1ERKS_>
   dc61a:	2302      	movs	r3, #2
   dc61c:	222c      	movs	r2, #44	; 0x2c
   dc61e:	a90c      	add	r1, sp, #48	; 0x30
   dc620:	a810      	add	r0, sp, #64	; 0x40
   dc622:	f001 f85d 	bl	dd6e0 <_Z21getStringValueAtIndex6Stringci>
   dc626:	9810      	ldr	r0, [sp, #64]	; 0x40
   dc628:	f008 fff4 	bl	e5614 <atoi>
   dc62c:	b2c6      	uxtb	r6, r0
   dc62e:	a810      	add	r0, sp, #64	; 0x40
   dc630:	f007 faa2 	bl	e3b78 <_ZN6StringD1Ev>
   dc634:	a80c      	add	r0, sp, #48	; 0x30
   dc636:	f007 fa9f 	bl	e3b78 <_ZN6StringD1Ev>
    if ((received_gen_type < DCP_10) || (received_gen_type > APM_303))
   dc63a:	1e73      	subs	r3, r6, #1
   dc63c:	2b03      	cmp	r3, #3
   dc63e:	f200 8083 	bhi.w	dc748 <_Z17genConfigurations6String+0x214>
    uint16_t received_gen_address = atoi(getStringValueAtIndex(fullCommand, COMMA_CHAR, 3));
   dc642:	4621      	mov	r1, r4
   dc644:	a80c      	add	r0, sp, #48	; 0x30
   dc646:	f007 fb2d 	bl	e3ca4 <_ZN6StringC1ERKS_>
   dc64a:	2303      	movs	r3, #3
   dc64c:	222c      	movs	r2, #44	; 0x2c
   dc64e:	a90c      	add	r1, sp, #48	; 0x30
   dc650:	a810      	add	r0, sp, #64	; 0x40
   dc652:	f001 f845 	bl	dd6e0 <_Z21getStringValueAtIndex6Stringci>
   dc656:	9810      	ldr	r0, [sp, #64]	; 0x40
   dc658:	f008 ffdc 	bl	e5614 <atoi>
   dc65c:	4607      	mov	r7, r0
   dc65e:	a810      	add	r0, sp, #64	; 0x40
   dc660:	f007 fa8a 	bl	e3b78 <_ZN6StringD1Ev>
   dc664:	a80c      	add	r0, sp, #48	; 0x30
   dc666:	f007 fa87 	bl	e3b78 <_ZN6StringD1Ev>
    if ((received_gen_address < MIN_GEN_SLAVE_ID) || (received_gen_address > MAX_GEN_SLAVE_ID))
   dc66a:	1e7b      	subs	r3, r7, #1
   dc66c:	b29b      	uxth	r3, r3
   dc66e:	2bf6      	cmp	r3, #246	; 0xf6
   dc670:	d86d      	bhi.n	dc74e <_Z17genConfigurations6String+0x21a>
    uint8_t received_relay_assign = atoi(getStringValueAtIndex(fullCommand, COMMA_CHAR, 4));
   dc672:	4621      	mov	r1, r4
   dc674:	a80c      	add	r0, sp, #48	; 0x30
   dc676:	f007 fb15 	bl	e3ca4 <_ZN6StringC1ERKS_>
   dc67a:	2304      	movs	r3, #4
   dc67c:	222c      	movs	r2, #44	; 0x2c
   dc67e:	a90c      	add	r1, sp, #48	; 0x30
   dc680:	a810      	add	r0, sp, #64	; 0x40
   dc682:	f001 f82d 	bl	dd6e0 <_Z21getStringValueAtIndex6Stringci>
   dc686:	9810      	ldr	r0, [sp, #64]	; 0x40
   dc688:	f008 ffc4 	bl	e5614 <atoi>
   dc68c:	fa5f f880 	uxtb.w	r8, r0
   dc690:	a810      	add	r0, sp, #64	; 0x40
   dc692:	f007 fa71 	bl	e3b78 <_ZN6StringD1Ev>
   dc696:	a80c      	add	r0, sp, #48	; 0x30
   dc698:	f007 fa6e 	bl	e3b78 <_ZN6StringD1Ev>
    if ((received_relay_assign < NO_GX_RELAYS) || (received_relay_assign > TOTAL_GX_RELAYS))
   dc69c:	f1b8 0f02 	cmp.w	r8, #2
   dc6a0:	d858      	bhi.n	dc754 <_Z17genConfigurations6String+0x220>
    uint16_t received_kva_rating = atoi(getStringValueAtIndex(fullCommand, COMMA_CHAR, 5));
   dc6a2:	4621      	mov	r1, r4
   dc6a4:	a80c      	add	r0, sp, #48	; 0x30
   dc6a6:	f007 fafd 	bl	e3ca4 <_ZN6StringC1ERKS_>
   dc6aa:	2305      	movs	r3, #5
   dc6ac:	222c      	movs	r2, #44	; 0x2c
   dc6ae:	a90c      	add	r1, sp, #48	; 0x30
   dc6b0:	a810      	add	r0, sp, #64	; 0x40
   dc6b2:	f001 f815 	bl	dd6e0 <_Z21getStringValueAtIndex6Stringci>
   dc6b6:	9810      	ldr	r0, [sp, #64]	; 0x40
   dc6b8:	f008 ffac 	bl	e5614 <atoi>
   dc6bc:	fa1f f980 	uxth.w	r9, r0
   dc6c0:	a810      	add	r0, sp, #64	; 0x40
   dc6c2:	f007 fa59 	bl	e3b78 <_ZN6StringD1Ev>
   dc6c6:	a80c      	add	r0, sp, #48	; 0x30
   dc6c8:	f007 fa56 	bl	e3b78 <_ZN6StringD1Ev>
    if ((received_kva_rating < MIN_GEN_KVA) || (received_kva_rating > MAX_GEN_KVA))
   dc6cc:	f1a9 030f 	sub.w	r3, r9, #15
   dc6d0:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
   dc6d4:	d241      	bcs.n	dc75a <_Z17genConfigurations6String+0x226>
    uint8_t received_baudrate = atoi(getStringValueAtIndex(fullCommand, COMMA_CHAR, 6));
   dc6d6:	4621      	mov	r1, r4
   dc6d8:	a80c      	add	r0, sp, #48	; 0x30
   dc6da:	f007 fae3 	bl	e3ca4 <_ZN6StringC1ERKS_>
   dc6de:	2306      	movs	r3, #6
   dc6e0:	222c      	movs	r2, #44	; 0x2c
   dc6e2:	a90c      	add	r1, sp, #48	; 0x30
   dc6e4:	a810      	add	r0, sp, #64	; 0x40
   dc6e6:	f000 fffb 	bl	dd6e0 <_Z21getStringValueAtIndex6Stringci>
   dc6ea:	9810      	ldr	r0, [sp, #64]	; 0x40
   dc6ec:	f008 ff92 	bl	e5614 <atoi>
   dc6f0:	b2c4      	uxtb	r4, r0
   dc6f2:	a810      	add	r0, sp, #64	; 0x40
   dc6f4:	f007 fa40 	bl	e3b78 <_ZN6StringD1Ev>
   dc6f8:	a80c      	add	r0, sp, #48	; 0x30
   dc6fa:	f007 fa3d 	bl	e3b78 <_ZN6StringD1Ev>
    if ((received_baudrate < BAUD_9K6) || (received_baudrate > BAUD_128K))
   dc6fe:	2c06      	cmp	r4, #6
   dc700:	d82e      	bhi.n	dc760 <_Z17genConfigurations6String+0x22c>
    return (storeGenConfig(received_gen_slot, receivedGenName, received_gen_type, received_gen_address,
   dc702:	a908      	add	r1, sp, #32
   dc704:	a810      	add	r0, sp, #64	; 0x40
   dc706:	f007 facd 	bl	e3ca4 <_ZN6StringC1ERKS_>
   dc70a:	e9cd 9401 	strd	r9, r4, [sp, #4]
   dc70e:	f8cd 8000 	str.w	r8, [sp]
   dc712:	b2fb      	uxtb	r3, r7
   dc714:	4632      	mov	r2, r6
   dc716:	a910      	add	r1, sp, #64	; 0x40
   dc718:	4628      	mov	r0, r5
   dc71a:	f7ff fe61 	bl	dc3e0 <_Z14storeGenConfig13GeneratorSlot6Stringhhhth>
   dc71e:	4604      	mov	r4, r0
                   received_relay_assign, received_kva_rating, received_baudrate));
   dc720:	a810      	add	r0, sp, #64	; 0x40
   dc722:	f007 fa29 	bl	e3b78 <_ZN6StringD1Ev>
    String receivedGenName = getStringValueAtIndex(fullCommand, COMMA_CHAR, 1);
   dc726:	a808      	add	r0, sp, #32
   dc728:	f007 fa26 	bl	e3b78 <_ZN6StringD1Ev>
   dc72c:	e749      	b.n	dc5c2 <_Z17genConfigurations6String+0x8e>
    else if (genPosition == "gen2") received_gen_slot = GEN2;
   dc72e:	2502      	movs	r5, #2
   dc730:	e757      	b.n	dc5e2 <_Z17genConfigurations6String+0xae>
    else if (genPosition == "gen3") received_gen_slot = GEN3;
   dc732:	2503      	movs	r5, #3
   dc734:	e755      	b.n	dc5e2 <_Z17genConfigurations6String+0xae>
    else if (genPosition == "gen4") received_gen_slot = GEN4;
   dc736:	2504      	movs	r5, #4
   dc738:	e753      	b.n	dc5e2 <_Z17genConfigurations6String+0xae>
    else if (genPosition == "gen5") received_gen_slot = GEN5;
   dc73a:	2505      	movs	r5, #5
   dc73c:	e751      	b.n	dc5e2 <_Z17genConfigurations6String+0xae>
    else if (genPosition == "gen6") received_gen_slot = GEN6;
   dc73e:	2506      	movs	r5, #6
   dc740:	e74f      	b.n	dc5e2 <_Z17genConfigurations6String+0xae>
    { return GENCONFIG_NAME_ERROR; }
   dc742:	f06f 0401 	mvn.w	r4, #1
   dc746:	e7ee      	b.n	dc726 <_Z17genConfigurations6String+0x1f2>
    { return GENCONFIG_TYPE_ERROR; }
   dc748:	f06f 0402 	mvn.w	r4, #2
   dc74c:	e7eb      	b.n	dc726 <_Z17genConfigurations6String+0x1f2>
    { return GENCONFIG_ADDRESS_ERROR; }
   dc74e:	f06f 0403 	mvn.w	r4, #3
   dc752:	e7e8      	b.n	dc726 <_Z17genConfigurations6String+0x1f2>
    { return GENCONFIG_RELAY_ERROR; }
   dc754:	f06f 0404 	mvn.w	r4, #4
   dc758:	e7e5      	b.n	dc726 <_Z17genConfigurations6String+0x1f2>
    { return GENCONFIG_KVA_ERROR; }
   dc75a:	f06f 0405 	mvn.w	r4, #5
   dc75e:	e7e2      	b.n	dc726 <_Z17genConfigurations6String+0x1f2>
    { return GENCONFIG_BAUD_ERROR; }
   dc760:	f06f 0406 	mvn.w	r4, #6
   dc764:	e7df      	b.n	dc726 <_Z17genConfigurations6String+0x1f2>
    { return GENCONFIG_SEQUENCE_ERROR; }
   dc766:	f06f 0407 	mvn.w	r4, #7
   dc76a:	e72a      	b.n	dc5c2 <_Z17genConfigurations6String+0x8e>
   dc76c:	000e78f1 	.word	0x000e78f1
   dc770:	000e78f6 	.word	0x000e78f6
   dc774:	000e78fb 	.word	0x000e78fb
   dc778:	000e7900 	.word	0x000e7900
   dc77c:	000e7905 	.word	0x000e7905
   dc780:	000e790a 	.word	0x000e790a
   dc784:	000e790f 	.word	0x000e790f
   dc788:	000e827d 	.word	0x000e827d
   dc78c:	2003e499 	.word	0x2003e499

000dc790 <_ZN11GXGeneratorC1Ev>:


/********DEFINITION OF THE GXGENERATOR CLASS********/

GXGenerator::GXGenerator() : Modbus(GX_IS_MASTER, MODBUS_ON_SERIAL1, MODBUS_RTU_DE, MODBUS_RTU_RE)
   dc790:	b513      	push	{r0, r1, r4, lr}
   dc792:	230e      	movs	r3, #14
   dc794:	4604      	mov	r4, r0
   dc796:	2201      	movs	r2, #1
   dc798:	2100      	movs	r1, #0
   dc79a:	9300      	str	r3, [sp, #0]
   dc79c:	230f      	movs	r3, #15
   dc79e:	f003 f881 	bl	df8a4 <_ZN6ModbusC1Ehhhh>
   dc7a2:	f104 006e 	add.w	r0, r4, #110	; 0x6e
   dc7a6:	f000 fe47 	bl	dd438 <_ZN22Pcc1302GensetQueryBankC1Ev>
   dc7aa:	f104 0082 	add.w	r0, r4, #130	; 0x82
   dc7ae:	f7fc fed7 	bl	d9560 <_ZN18DseGensetQueryBankC1Ev>
   dc7b2:	f104 00b6 	add.w	r0, r4, #182	; 0xb6
   dc7b6:	f7fc fdec 	bl	d9392 <_ZN20Dcp10GensetQueryBankC1Ev>
   dc7ba:	f104 00ca 	add.w	r0, r4, #202	; 0xca
   dc7be:	f7fc fc90 	bl	d90e2 <_ZN21Apm303GensetQueryBankC1Ev>
{
    slave_id = NO_GENSET;
   dc7c2:	2300      	movs	r3, #0
    gen_controller_type = NO_TYPE;
   dc7c4:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    gen_engine_state = ENGINE_AT_REST;
    gen_data_group = GEN_NOT_READY;
    genQkey.start_addr = NO_GENSET;
    genQkey.num_of_regs = NO_GENSET;
}
   dc7c8:	4620      	mov	r0, r4
    slave_id = NO_GENSET;
   dc7ca:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    gen_engine_state = ENGINE_AT_REST;
   dc7ce:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    gen_controller_type = NO_TYPE;
   dc7d2:	66a2      	str	r2, [r4, #104]	; 0x68
    genQkey.num_of_regs = NO_GENSET;
   dc7d4:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
}
   dc7d8:	b002      	add	sp, #8
   dc7da:	bd10      	pop	{r4, pc}

000dc7dc <_ZN11GXGenerator15setCrendentialsEhhh13GeneratorType>:

void GXGenerator::setCrendentials(uint8_t slave_addr, uint8_t baud_indx, uint8_t gx_relay, GeneratorType gen_con_type)
{
    slave_id = slave_addr;
    baudrate_index = baud_indx;
    assigned_gx_relay = gx_relay;
   dc7dc:	f880 3067 	strb.w	r3, [r0, #103]	; 0x67
    gen_controller_type = gen_con_type;
   dc7e0:	f89d 3000 	ldrb.w	r3, [sp]
    slave_id = slave_addr;
   dc7e4:	f880 1064 	strb.w	r1, [r0, #100]	; 0x64
    baudrate_index = baud_indx;
   dc7e8:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
    gen_controller_type = gen_con_type;
   dc7ec:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
}
   dc7f0:	4770      	bx	lr

000dc7f2 <_ZN11GXGenerator15getControllerIdEv>:

GeneratorType GXGenerator::getControllerId()
{
    return gen_controller_type;
}
   dc7f2:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
   dc7f6:	4770      	bx	lr

000dc7f8 <_ZN11GXGenerator18getMainQueryPacketEhP8modbus_t>:

void GXGenerator::getMainQueryPacket(uint8_t query_unit, modbus_t *genQueryPacket)
{
   dc7f8:	b570      	push	{r4, r5, r6, lr}
    gen_data_group = GEN_MAIN;
    
    if (gen_controller_type == DSE_857)
   dc7fa:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
{
   dc7fe:	460e      	mov	r6, r1
    if (gen_controller_type == DSE_857)
   dc800:	2b02      	cmp	r3, #2
    gen_data_group = GEN_MAIN;
   dc802:	f04f 0100 	mov.w	r1, #0
{
   dc806:	4604      	mov	r4, r0
   dc808:	4615      	mov	r5, r2
    gen_data_group = GEN_MAIN;
   dc80a:	f880 1069 	strb.w	r1, [r0, #105]	; 0x69
    if (gen_controller_type == DSE_857)
   dc80e:	d105      	bne.n	dc81c <_ZN11GXGenerator18getMainQueryPacketEhP8modbus_t+0x24>
        dseGenBank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
   dc810:	f100 036a 	add.w	r3, r0, #106	; 0x6a
   dc814:	4632      	mov	r2, r6
   dc816:	3082      	adds	r0, #130	; 0x82
   dc818:	f7fc fee1 	bl	d95de <_ZN18DseGensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>
    
    if (gen_controller_type == PCC_1302)
   dc81c:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   dc820:	2b03      	cmp	r3, #3
   dc822:	d108      	bne.n	dc836 <_ZN11GXGenerator18getMainQueryPacketEhP8modbus_t+0x3e>
        pcc1302GenBank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
   dc824:	f894 1069 	ldrb.w	r1, [r4, #105]	; 0x69
   dc828:	f104 036a 	add.w	r3, r4, #106	; 0x6a
   dc82c:	4632      	mov	r2, r6
   dc82e:	f104 006e 	add.w	r0, r4, #110	; 0x6e
   dc832:	f000 fe16 	bl	dd462 <_ZN22Pcc1302GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>
    
    if (gen_controller_type == DCP_10)
   dc836:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   dc83a:	2b01      	cmp	r3, #1
   dc83c:	d108      	bne.n	dc850 <_ZN11GXGenerator18getMainQueryPacketEhP8modbus_t+0x58>
        dcp10Genbank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
   dc83e:	f894 1069 	ldrb.w	r1, [r4, #105]	; 0x69
   dc842:	f104 036a 	add.w	r3, r4, #106	; 0x6a
   dc846:	4632      	mov	r2, r6
   dc848:	f104 00b6 	add.w	r0, r4, #182	; 0xb6
   dc84c:	f7fc fdba 	bl	d93c4 <_ZN20Dcp10GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>
    
    if (gen_controller_type == APM_303)
   dc850:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   dc854:	2b04      	cmp	r3, #4
   dc856:	d108      	bne.n	dc86a <_ZN11GXGenerator18getMainQueryPacketEhP8modbus_t+0x72>
        apm303GenBank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
   dc858:	f894 1069 	ldrb.w	r1, [r4, #105]	; 0x69
   dc85c:	f104 036a 	add.w	r3, r4, #106	; 0x6a
   dc860:	4632      	mov	r2, r6
   dc862:	f104 00ca 	add.w	r0, r4, #202	; 0xca
   dc866:	f7fc fc58 	bl	d911a <_ZN21Apm303GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>
    
    genQueryPacket->u8id = slave_id;
   dc86a:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
   dc86e:	702b      	strb	r3, [r5, #0]
    genQueryPacket->u8fct = FUNC_CODE3;
   dc870:	2303      	movs	r3, #3
   dc872:	706b      	strb	r3, [r5, #1]
    genQueryPacket->u16RegAdd = genQkey.start_addr;
   dc874:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
   dc878:	806b      	strh	r3, [r5, #2]
    genQueryPacket->u16CoilsNo = genQkey.num_of_regs;
   dc87a:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   dc87e:	80ab      	strh	r3, [r5, #4]
    genQueryPacket->au16reg = modbus_data_buffer;
   dc880:	4b05      	ldr	r3, [pc, #20]	; (dc898 <_ZN11GXGenerator18getMainQueryPacketEhP8modbus_t+0xa0>)
   dc882:	60ab      	str	r3, [r5, #8]

    if (gen_controller_type == APM_303)
   dc884:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   dc888:	2b04      	cmp	r3, #4
   dc88a:	d103      	bne.n	dc894 <_ZN11GXGenerator18getMainQueryPacketEhP8modbus_t+0x9c>
        genQueryPacket->u8fct = (query_unit == GEN_QUERY1) ? 
   dc88c:	2e00      	cmp	r6, #0
   dc88e:	bf18      	it	ne
   dc890:	2302      	movne	r3, #2
   dc892:	706b      	strb	r3, [r5, #1]
        FUNC_CODE4 : FUNC_CODE2;
}
   dc894:	bd70      	pop	{r4, r5, r6, pc}
   dc896:	bf00      	nop
   dc898:	2003e224 	.word	0x2003e224

000dc89c <_ZN11GXGenerator21getBasInstQueryPacketEhP8modbus_t>:

void GXGenerator::getBasInstQueryPacket(uint8_t query_unit, modbus_t *genQueryPacket)
{
   dc89c:	b570      	push	{r4, r5, r6, lr}
    gen_data_group = GEN_BASINST;
    
    if (gen_controller_type == DSE_857)
   dc89e:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
{
   dc8a2:	460e      	mov	r6, r1
    if (gen_controller_type == DSE_857)
   dc8a4:	2b02      	cmp	r3, #2
    gen_data_group = GEN_BASINST;
   dc8a6:	f04f 0101 	mov.w	r1, #1
{
   dc8aa:	4604      	mov	r4, r0
   dc8ac:	4615      	mov	r5, r2
    gen_data_group = GEN_BASINST;
   dc8ae:	f880 1069 	strb.w	r1, [r0, #105]	; 0x69
    if (gen_controller_type == DSE_857)
   dc8b2:	d105      	bne.n	dc8c0 <_ZN11GXGenerator21getBasInstQueryPacketEhP8modbus_t+0x24>
        dseGenBank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
   dc8b4:	f100 036a 	add.w	r3, r0, #106	; 0x6a
   dc8b8:	4632      	mov	r2, r6
   dc8ba:	3082      	adds	r0, #130	; 0x82
   dc8bc:	f7fc fe8f 	bl	d95de <_ZN18DseGensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>
    
    if (gen_controller_type == PCC_1302)
   dc8c0:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   dc8c4:	2b03      	cmp	r3, #3
   dc8c6:	d108      	bne.n	dc8da <_ZN11GXGenerator21getBasInstQueryPacketEhP8modbus_t+0x3e>
        pcc1302GenBank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
   dc8c8:	f894 1069 	ldrb.w	r1, [r4, #105]	; 0x69
   dc8cc:	f104 036a 	add.w	r3, r4, #106	; 0x6a
   dc8d0:	4632      	mov	r2, r6
   dc8d2:	f104 006e 	add.w	r0, r4, #110	; 0x6e
   dc8d6:	f000 fdc4 	bl	dd462 <_ZN22Pcc1302GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>
    
    if (gen_controller_type == DCP_10)
   dc8da:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   dc8de:	2b01      	cmp	r3, #1
   dc8e0:	d108      	bne.n	dc8f4 <_ZN11GXGenerator21getBasInstQueryPacketEhP8modbus_t+0x58>
        dcp10Genbank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
   dc8e2:	f894 1069 	ldrb.w	r1, [r4, #105]	; 0x69
   dc8e6:	f104 036a 	add.w	r3, r4, #106	; 0x6a
   dc8ea:	4632      	mov	r2, r6
   dc8ec:	f104 00b6 	add.w	r0, r4, #182	; 0xb6
   dc8f0:	f7fc fd68 	bl	d93c4 <_ZN20Dcp10GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>
    
    if (gen_controller_type == APM_303)
   dc8f4:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   dc8f8:	2b04      	cmp	r3, #4
   dc8fa:	d108      	bne.n	dc90e <_ZN11GXGenerator21getBasInstQueryPacketEhP8modbus_t+0x72>
        apm303GenBank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
   dc8fc:	f894 1069 	ldrb.w	r1, [r4, #105]	; 0x69
   dc900:	f104 036a 	add.w	r3, r4, #106	; 0x6a
   dc904:	4632      	mov	r2, r6
   dc906:	f104 00ca 	add.w	r0, r4, #202	; 0xca
   dc90a:	f7fc fc06 	bl	d911a <_ZN21Apm303GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>
    
    genQueryPacket->u8id = slave_id;
   dc90e:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
   dc912:	702b      	strb	r3, [r5, #0]
    genQueryPacket->u8fct = FUNC_CODE3;
   dc914:	2303      	movs	r3, #3
   dc916:	706b      	strb	r3, [r5, #1]
    genQueryPacket->u16RegAdd = genQkey.start_addr;
   dc918:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
   dc91c:	806a      	strh	r2, [r5, #2]
    genQueryPacket->u16CoilsNo = genQkey.num_of_regs;
   dc91e:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
   dc922:	80aa      	strh	r2, [r5, #4]
    genQueryPacket->au16reg = modbus_data_buffer; 
   dc924:	4a04      	ldr	r2, [pc, #16]	; (dc938 <_ZN11GXGenerator21getBasInstQueryPacketEhP8modbus_t+0x9c>)
   dc926:	60aa      	str	r2, [r5, #8]

    if (gen_controller_type == APM_303)
   dc928:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
   dc92c:	2a04      	cmp	r2, #4
        genQueryPacket->u8fct = FUNC_CODE4;  
   dc92e:	bf08      	it	eq
   dc930:	4613      	moveq	r3, r2
   dc932:	706b      	strb	r3, [r5, #1]
}
   dc934:	bd70      	pop	{r4, r5, r6, pc}
   dc936:	bf00      	nop
   dc938:	2003e224 	.word	0x2003e224

000dc93c <_ZN11GXGenerator21getDerInstQueryPacketEhP8modbus_t>:

void GXGenerator::getDerInstQueryPacket(uint8_t query_unit, modbus_t *genQueryPacket)
{
   dc93c:	b570      	push	{r4, r5, r6, lr}
   dc93e:	460e      	mov	r6, r1
    gen_data_group = GEN_DERINST;
    
    if (gen_controller_type == DSE_857)
   dc940:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
    gen_data_group = GEN_DERINST;
   dc944:	2302      	movs	r3, #2
    if (gen_controller_type == DSE_857)
   dc946:	4299      	cmp	r1, r3
{
   dc948:	4604      	mov	r4, r0
   dc94a:	4615      	mov	r5, r2
    gen_data_group = GEN_DERINST;
   dc94c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    if (gen_controller_type == DSE_857)
   dc950:	d105      	bne.n	dc95e <_ZN11GXGenerator21getDerInstQueryPacketEhP8modbus_t+0x22>
        dseGenBank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
   dc952:	f100 036a 	add.w	r3, r0, #106	; 0x6a
   dc956:	4632      	mov	r2, r6
   dc958:	3082      	adds	r0, #130	; 0x82
   dc95a:	f7fc fe40 	bl	d95de <_ZN18DseGensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>
    
    if (gen_controller_type == APM_303)
   dc95e:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   dc962:	2b04      	cmp	r3, #4
   dc964:	d108      	bne.n	dc978 <_ZN11GXGenerator21getDerInstQueryPacketEhP8modbus_t+0x3c>
        apm303GenBank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
   dc966:	f894 1069 	ldrb.w	r1, [r4, #105]	; 0x69
   dc96a:	f104 036a 	add.w	r3, r4, #106	; 0x6a
   dc96e:	4632      	mov	r2, r6
   dc970:	f104 00ca 	add.w	r0, r4, #202	; 0xca
   dc974:	f7fc fbd1 	bl	d911a <_ZN21Apm303GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>

    genQueryPacket->u8id = slave_id;
   dc978:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
   dc97c:	702b      	strb	r3, [r5, #0]
    genQueryPacket->u8fct = FUNC_CODE3;
   dc97e:	2303      	movs	r3, #3
   dc980:	706b      	strb	r3, [r5, #1]
    genQueryPacket->u16RegAdd = genQkey.start_addr;
   dc982:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
   dc986:	806a      	strh	r2, [r5, #2]
    genQueryPacket->u16CoilsNo = genQkey.num_of_regs;
   dc988:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
   dc98c:	80aa      	strh	r2, [r5, #4]
    genQueryPacket->au16reg = modbus_data_buffer; 
   dc98e:	4a04      	ldr	r2, [pc, #16]	; (dc9a0 <_ZN11GXGenerator21getDerInstQueryPacketEhP8modbus_t+0x64>)
   dc990:	60aa      	str	r2, [r5, #8]

    if (gen_controller_type == APM_303)
   dc992:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
   dc996:	2a04      	cmp	r2, #4
        genQueryPacket->u8fct = FUNC_CODE4;
   dc998:	bf08      	it	eq
   dc99a:	4613      	moveq	r3, r2
   dc99c:	706b      	strb	r3, [r5, #1]
}
   dc99e:	bd70      	pop	{r4, r5, r6, pc}
   dc9a0:	2003e224 	.word	0x2003e224

000dc9a4 <_ZN11GXGenerator22getEngStateQueryPacketEhP8modbus_t>:

void GXGenerator::getEngStateQueryPacket(uint8_t query_unit, modbus_t *genQueryPacket)
{
   dc9a4:	b538      	push	{r3, r4, r5, lr}
    gen_data_group = GEN_ENG_STATUS;
   dc9a6:	2303      	movs	r3, #3
   dc9a8:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    switch (gen_controller_type)
   dc9ac:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
   dc9b0:	3b01      	subs	r3, #1
{
   dc9b2:	4604      	mov	r4, r0
   dc9b4:	4615      	mov	r5, r2
   dc9b6:	2b03      	cmp	r3, #3
   dc9b8:	d80a      	bhi.n	dc9d0 <_ZN11GXGenerator22getEngStateQueryPacketEhP8modbus_t+0x2c>
   dc9ba:	e8df f003 	tbb	[pc, r3]
   dc9be:	0225      	.short	0x0225
   dc9c0:	2d1d      	.short	0x2d1d
    {
        case DSE_857:
        {
            dseGenBank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
   dc9c2:	f100 036a 	add.w	r3, r0, #106	; 0x6a
   dc9c6:	460a      	mov	r2, r1
   dc9c8:	3082      	adds	r0, #130	; 0x82
   dc9ca:	2103      	movs	r1, #3
   dc9cc:	f7fc fe07 	bl	d95de <_ZN18DseGensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>
            apm303GenBank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
            break;
        }
    }

    genQueryPacket->u8id = slave_id;
   dc9d0:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
   dc9d4:	702b      	strb	r3, [r5, #0]
    genQueryPacket->u8fct = FUNC_CODE3;
   dc9d6:	2303      	movs	r3, #3
   dc9d8:	706b      	strb	r3, [r5, #1]
    genQueryPacket->u16RegAdd = genQkey.start_addr;
   dc9da:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
   dc9de:	806a      	strh	r2, [r5, #2]
    genQueryPacket->u16CoilsNo = genQkey.num_of_regs;
   dc9e0:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
   dc9e4:	80aa      	strh	r2, [r5, #4]
    genQueryPacket->au16reg = modbus_data_buffer; 
   dc9e6:	4a10      	ldr	r2, [pc, #64]	; (dca28 <_ZN11GXGenerator22getEngStateQueryPacketEhP8modbus_t+0x84>)
   dc9e8:	60aa      	str	r2, [r5, #8]

    if (gen_controller_type == APM_303)
   dc9ea:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
   dc9ee:	2a04      	cmp	r2, #4
        genQueryPacket->u8fct = FUNC_CODE4;
   dc9f0:	bf08      	it	eq
   dc9f2:	4613      	moveq	r3, r2
   dc9f4:	706b      	strb	r3, [r5, #1]
}
   dc9f6:	bd38      	pop	{r3, r4, r5, pc}
            pcc1302GenBank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
   dc9f8:	f100 036a 	add.w	r3, r0, #106	; 0x6a
   dc9fc:	460a      	mov	r2, r1
   dc9fe:	306e      	adds	r0, #110	; 0x6e
   dca00:	2103      	movs	r1, #3
   dca02:	f000 fd2e 	bl	dd462 <_ZN22Pcc1302GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>
            break;
   dca06:	e7e3      	b.n	dc9d0 <_ZN11GXGenerator22getEngStateQueryPacketEhP8modbus_t+0x2c>
            dcp10Genbank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
   dca08:	f100 036a 	add.w	r3, r0, #106	; 0x6a
   dca0c:	460a      	mov	r2, r1
   dca0e:	30b6      	adds	r0, #182	; 0xb6
   dca10:	2103      	movs	r1, #3
   dca12:	f7fc fcd7 	bl	d93c4 <_ZN20Dcp10GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>
            break;
   dca16:	e7db      	b.n	dc9d0 <_ZN11GXGenerator22getEngStateQueryPacketEhP8modbus_t+0x2c>
            apm303GenBank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
   dca18:	f100 036a 	add.w	r3, r0, #106	; 0x6a
   dca1c:	460a      	mov	r2, r1
   dca1e:	30ca      	adds	r0, #202	; 0xca
   dca20:	2103      	movs	r1, #3
   dca22:	f7fc fb7a 	bl	d911a <_ZN21Apm303GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>
            break;
   dca26:	e7d3      	b.n	dc9d0 <_ZN11GXGenerator22getEngStateQueryPacketEhP8modbus_t+0x2c>
   dca28:	2003e224 	.word	0x2003e224

000dca2c <_ZN11GXGenerator25getGridBasInstQueryPacketEhP8modbus_t>:

void GXGenerator::getGridBasInstQueryPacket(uint8_t query_unit, modbus_t *genQueryPacket)
{
   dca2c:	b538      	push	{r3, r4, r5, lr}
    if (gen_controller_type == DSE_857)
   dca2e:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
   dca32:	2b02      	cmp	r3, #2
{
   dca34:	4604      	mov	r4, r0
   dca36:	4615      	mov	r5, r2
    if (gen_controller_type == DSE_857)
   dca38:	d106      	bne.n	dca48 <_ZN11GXGenerator25getGridBasInstQueryPacketEhP8modbus_t+0x1c>
        dseGenBank.getGridQueryKey(GRID_BAS_INST, query_unit, &genQkey); 
   dca3a:	f100 036a 	add.w	r3, r0, #106	; 0x6a
   dca3e:	460a      	mov	r2, r1
   dca40:	3082      	adds	r0, #130	; 0x82
   dca42:	2101      	movs	r1, #1
   dca44:	f7fc fde8 	bl	d9618 <_ZN18DseGensetQueryBank15getGridQueryKeyE11GridDataSethP17GeneratorQueryKey>

    genQueryPacket->u8id = slave_id;
   dca48:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
   dca4c:	702b      	strb	r3, [r5, #0]
    genQueryPacket->u8fct = FUNC_CODE3;
   dca4e:	2303      	movs	r3, #3
   dca50:	706b      	strb	r3, [r5, #1]
    genQueryPacket->u16RegAdd = genQkey.start_addr;
   dca52:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
   dca56:	806b      	strh	r3, [r5, #2]
    genQueryPacket->u16CoilsNo = genQkey.num_of_regs;
   dca58:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   dca5c:	80ab      	strh	r3, [r5, #4]
    genQueryPacket->au16reg = modbus_data_buffer;
   dca5e:	4b01      	ldr	r3, [pc, #4]	; (dca64 <_ZN11GXGenerator25getGridBasInstQueryPacketEhP8modbus_t+0x38>)
   dca60:	60ab      	str	r3, [r5, #8]
}
   dca62:	bd38      	pop	{r3, r4, r5, pc}
   dca64:	2003e224 	.word	0x2003e224

000dca68 <_ZN11GXGenerator25getGridDerInstQueryPacketEhP8modbus_t>:

void GXGenerator::getGridDerInstQueryPacket(uint8_t query_unit, modbus_t *genQueryPacket)
{
   dca68:	b538      	push	{r3, r4, r5, lr}
   dca6a:	4604      	mov	r4, r0
    if (gen_controller_type == DSE_857)
   dca6c:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
   dca70:	2802      	cmp	r0, #2
{
   dca72:	4615      	mov	r5, r2
    if (gen_controller_type == DSE_857)
   dca74:	d107      	bne.n	dca86 <_ZN11GXGenerator25getGridDerInstQueryPacketEhP8modbus_t+0x1e>
        dseGenBank.getGridQueryKey(GRID_DER_INST, query_unit, &genQkey); 
   dca76:	460a      	mov	r2, r1
   dca78:	f104 036a 	add.w	r3, r4, #106	; 0x6a
   dca7c:	4601      	mov	r1, r0
   dca7e:	f104 0082 	add.w	r0, r4, #130	; 0x82
   dca82:	f7fc fdc9 	bl	d9618 <_ZN18DseGensetQueryBank15getGridQueryKeyE11GridDataSethP17GeneratorQueryKey>

    genQueryPacket->u8id = slave_id;
   dca86:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
   dca8a:	702b      	strb	r3, [r5, #0]
    genQueryPacket->u8fct = FUNC_CODE3;
   dca8c:	2303      	movs	r3, #3
   dca8e:	706b      	strb	r3, [r5, #1]
    genQueryPacket->u16RegAdd = genQkey.start_addr;
   dca90:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
   dca94:	806b      	strh	r3, [r5, #2]
    genQueryPacket->u16CoilsNo = genQkey.num_of_regs;
   dca96:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   dca9a:	80ab      	strh	r3, [r5, #4]
    genQueryPacket->au16reg = modbus_data_buffer; 
   dca9c:	4b01      	ldr	r3, [pc, #4]	; (dcaa4 <_ZN11GXGenerator25getGridDerInstQueryPacketEhP8modbus_t+0x3c>)
   dca9e:	60ab      	str	r3, [r5, #8]
}
   dcaa0:	bd38      	pop	{r3, r4, r5, pc}
   dcaa2:	bf00      	nop
   dcaa4:	2003e224 	.word	0x2003e224

000dcaa8 <_ZN11GXGenerator15getMainQueryNumEv>:

uint8_t GXGenerator::getMainQueryNum()
{
    if (gen_controller_type == DSE_857)
   dcaa8:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
   dcaac:	2802      	cmp	r0, #2
   dcaae:	d007      	beq.n	dcac0 <_ZN11GXGenerator15getMainQueryNumEv+0x18>
       return TOTAL_DSE_MAIN_QUERY;
    
    if (gen_controller_type == PCC_1302)
   dcab0:	2803      	cmp	r0, #3
   dcab2:	d007      	beq.n	dcac4 <_ZN11GXGenerator15getMainQueryNumEv+0x1c>
       return TOTAL_PCC1302_MAIN_QUERY;
    
    if (gen_controller_type == DCP_10)
   dcab4:	2801      	cmp	r0, #1
   dcab6:	d007      	beq.n	dcac8 <_ZN11GXGenerator15getMainQueryNumEv+0x20>
       return TOTAL_DCP10_MAIN_QUERY;
    
    if (gen_controller_type == APM_303)
   dcab8:	2804      	cmp	r0, #4
       return TOTAL_APM303_MAIN_QUERY;
    
    return NO_GENSET;
   dcaba:	bf18      	it	ne
   dcabc:	2000      	movne	r0, #0
   dcabe:	4770      	bx	lr
       return TOTAL_APM303_MAIN_QUERY;
   dcac0:	2004      	movs	r0, #4
   dcac2:	4770      	bx	lr
       return TOTAL_PCC1302_MAIN_QUERY;
   dcac4:	2002      	movs	r0, #2
   dcac6:	4770      	bx	lr
       return TOTAL_DCP10_MAIN_QUERY;
   dcac8:	2003      	movs	r0, #3
}
   dcaca:	4770      	bx	lr

000dcacc <_ZN11GXGenerator18getBasInstQueryNumEv>:

uint8_t GXGenerator::getBasInstQueryNum()
{
    if (gen_controller_type == DSE_857)
   dcacc:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
   dcad0:	1e9a      	subs	r2, r3, #2
   dcad2:	2a01      	cmp	r2, #1
   dcad4:	d906      	bls.n	dcae4 <_ZN11GXGenerator18getBasInstQueryNumEv+0x18>
       return TOTAL_DSE_BASINST_QUERY;
    
    if (gen_controller_type == PCC_1302)
       return TOTAL_PCC1302_BASINST_QUERY;
    
    if (gen_controller_type == DCP_10)
   dcad6:	2b01      	cmp	r3, #1
   dcad8:	d006      	beq.n	dcae8 <_ZN11GXGenerator18getBasInstQueryNumEv+0x1c>
       return TOTAL_DCP10_BASINST_QUERY;
    
    if (gen_controller_type == APM_303)
   dcada:	2b04      	cmp	r3, #4
       return TOTAL_APM303_BASINST_QUERY;

    return NO_GENSET;
   dcadc:	bf0c      	ite	eq
   dcade:	2002      	moveq	r0, #2
   dcae0:	2000      	movne	r0, #0
   dcae2:	4770      	bx	lr
       return TOTAL_DSE_BASINST_QUERY;
   dcae4:	2003      	movs	r0, #3
   dcae6:	4770      	bx	lr
       return TOTAL_APM303_BASINST_QUERY;
   dcae8:	2002      	movs	r0, #2
}
   dcaea:	4770      	bx	lr

000dcaec <_ZN11GXGenerator18getDerInstQueryNumEv>:

uint8_t GXGenerator::getDerInstQueryNum()
{
    if (gen_controller_type == DSE_857)
   dcaec:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
   dcaf0:	2802      	cmp	r0, #2
   dcaf2:	d003      	beq.n	dcafc <_ZN11GXGenerator18getDerInstQueryNumEv+0x10>
       return TOTAL_DSE_DERINST_QUERY;
   dcaf4:	1f03      	subs	r3, r0, #4
   dcaf6:	4258      	negs	r0, r3
   dcaf8:	4158      	adcs	r0, r3
   dcafa:	4770      	bx	lr
   dcafc:	2001      	movs	r0, #1
    
    if (gen_controller_type == APM_303)
       return TOTAL_APM303_DERINST_QUERY;
    
    return NO_GENSET;
}
   dcafe:	4770      	bx	lr

000dcb00 <_ZN11GXGenerator22getGridBasInstQueryNumEv>:

uint8_t GXGenerator::getGridBasInstQueryNum()
{
    if (gen_controller_type == DSE_857)
   dcb00:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
   dcb04:	2b02      	cmp	r3, #2
       return TOTAL_DSE_GRID_BASINST_QUERY;
    
    return NO_GENSET;
}
   dcb06:	bf0c      	ite	eq
   dcb08:	2003      	moveq	r0, #3
   dcb0a:	2000      	movne	r0, #0
   dcb0c:	4770      	bx	lr

000dcb0e <_ZN11GXGenerator22getGridDerInstQueryNumEv>:

uint8_t GXGenerator::getGridDerInstQueryNum()
{
    if (gen_controller_type == DSE_857)
   dcb0e:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
   dcb12:	2802      	cmp	r0, #2
       return TOTAL_DSE_GRID_DERINST_QUERY;
    
    return NO_GENSET;
}
   dcb14:	bf18      	it	ne
   dcb16:	2000      	movne	r0, #0
   dcb18:	4770      	bx	lr
	...

000dcb1c <_ZN11GXGenerator18extractMainMetricsEh>:

void GXGenerator::extractMainMetrics(uint8_t query_unit)
{
    if (gen_controller_type == DSE_857)
   dcb1c:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
   dcb20:	2b02      	cmp	r3, #2
   dcb22:	d12c      	bne.n	dcb7e <_ZN11GXGenerator18extractMainMetricsEh+0x62>
    {
        switch (query_unit)
   dcb24:	2903      	cmp	r1, #3
   dcb26:	d80f      	bhi.n	dcb48 <_ZN11GXGenerator18extractMainMetricsEh+0x2c>
   dcb28:	e8df f001 	tbb	[pc, r1]
   dcb2c:	1d181302 	.word	0x1d181302
        {
            case GEN_QUERY1:

                 {
                    extracted_modbus_databuff[RUN_HRS] = (modbus_data_buffer[DSE_RUN_HR_H] << MOVE_16_STEP) |
   dcb30:	4b47      	ldr	r3, [pc, #284]	; (dcc50 <_ZN11GXGenerator18extractMainMetricsEh+0x134>)
   dcb32:	4948      	ldr	r1, [pc, #288]	; (dcc54 <_ZN11GXGenerator18extractMainMetricsEh+0x138>)
   dcb34:	8818      	ldrh	r0, [r3, #0]
                                                         (modbus_data_buffer[DSE_RUN_HR_L]);
   dcb36:	885a      	ldrh	r2, [r3, #2]
                    extracted_modbus_databuff[RUN_HRS] = (modbus_data_buffer[DSE_RUN_HR_H] << MOVE_16_STEP) |
   dcb38:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   dcb3c:	600a      	str	r2, [r1, #0]
                 
                    extracted_modbus_databuff[NUM_OF_STARTS] = (modbus_data_buffer[DSE_NUM_OF_ST_H] << MOVE_16_STEP) |
   dcb3e:	8a9a      	ldrh	r2, [r3, #20]
                                                               (modbus_data_buffer[DSE_NUM_OF_ST_L]);
   dcb40:	8adb      	ldrh	r3, [r3, #22]
                    extracted_modbus_databuff[NUM_OF_STARTS] = (modbus_data_buffer[DSE_NUM_OF_ST_H] << MOVE_16_STEP) |
   dcb42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   dcb46:	604b      	str	r3, [r1, #4]

                    break; 
                 }
        }
        
        memset(modbus_data_buffer, 0, sizeof(modbus_data_buffer));
   dcb48:	4841      	ldr	r0, [pc, #260]	; (dcc50 <_ZN11GXGenerator18extractMainMetricsEh+0x134>)
   dcb4a:	223c      	movs	r2, #60	; 0x3c
   dcb4c:	2100      	movs	r1, #0
   dcb4e:	f008 bdaf 	b.w	e56b0 <memset>
                    extracted_modbus_databuff[CTRL_MODE] = modbus_data_buffer[DSE_CTRL_MD];
   dcb52:	4b3f      	ldr	r3, [pc, #252]	; (dcc50 <_ZN11GXGenerator18extractMainMetricsEh+0x134>)
   dcb54:	881a      	ldrh	r2, [r3, #0]
   dcb56:	4b3f      	ldr	r3, [pc, #252]	; (dcc54 <_ZN11GXGenerator18extractMainMetricsEh+0x138>)
            
            case GEN_QUERY2:
                
                {
                    extracted_modbus_databuff[ENGINE_STATE] = modbus_data_buffer[APM303_ENG_STATE];
                    extracted_modbus_databuff[CTRL_MODE] = modbus_data_buffer[APM303_CTRL_MODE];
   dcb58:	609a      	str	r2, [r3, #8]

                    break;
   dcb5a:	e7f5      	b.n	dcb48 <_ZN11GXGenerator18extractMainMetricsEh+0x2c>
                    extracted_modbus_databuff[ENGINE_STATE] = modbus_data_buffer[DSE_ENG_STATE];
   dcb5c:	4b3c      	ldr	r3, [pc, #240]	; (dcc50 <_ZN11GXGenerator18extractMainMetricsEh+0x134>)
   dcb5e:	881a      	ldrh	r2, [r3, #0]
   dcb60:	4b3c      	ldr	r3, [pc, #240]	; (dcc54 <_ZN11GXGenerator18extractMainMetricsEh+0x138>)
   dcb62:	60da      	str	r2, [r3, #12]
                    break;
   dcb64:	e7f0      	b.n	dcb48 <_ZN11GXGenerator18extractMainMetricsEh+0x2c>
   dcb66:	493a      	ldr	r1, [pc, #232]	; (dcc50 <_ZN11GXGenerator18extractMainMetricsEh+0x134>)
   dcb68:	4a3b      	ldr	r2, [pc, #236]	; (dcc58 <_ZN11GXGenerator18extractMainMetricsEh+0x13c>)
    if (gen_controller_type == DSE_857)
   dcb6a:	2306      	movs	r3, #6
                        gen_alrm_regval[i] = modbus_data_buffer[i];
   dcb6c:	3b01      	subs	r3, #1
   dcb6e:	f831 0b02 	ldrh.w	r0, [r1], #2
   dcb72:	f822 0b02 	strh.w	r0, [r2], #2
                    for (uint8_t i = ALARM_REG1; i <= ALARM_REG6; i++)
   dcb76:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   dcb7a:	d1f7      	bne.n	dcb6c <_ZN11GXGenerator18extractMainMetricsEh+0x50>
   dcb7c:	e7e4      	b.n	dcb48 <_ZN11GXGenerator18extractMainMetricsEh+0x2c>
    if (gen_controller_type == PCC_1302)
   dcb7e:	2b03      	cmp	r3, #3
   dcb80:	d118      	bne.n	dcbb4 <_ZN11GXGenerator18extractMainMetricsEh+0x98>
        switch (query_unit)
   dcb82:	b159      	cbz	r1, dcb9c <_ZN11GXGenerator18extractMainMetricsEh+0x80>
   dcb84:	2901      	cmp	r1, #1
   dcb86:	d1df      	bne.n	dcb48 <_ZN11GXGenerator18extractMainMetricsEh+0x2c>
                    extracted_modbus_databuff[NUM_OF_STARTS] = modbus_data_buffer[PCC1302_NUM_OF_STRT];
   dcb88:	4a31      	ldr	r2, [pc, #196]	; (dcc50 <_ZN11GXGenerator18extractMainMetricsEh+0x134>)
   dcb8a:	4932      	ldr	r1, [pc, #200]	; (dcc54 <_ZN11GXGenerator18extractMainMetricsEh+0x138>)
   dcb8c:	8813      	ldrh	r3, [r2, #0]
                    extracted_modbus_databuff[RUN_HRS] = (modbus_data_buffer[PCC1302_RUN_HR_H] * CUMMINS_32BIT_SCALER) +
   dcb8e:	8850      	ldrh	r0, [r2, #2]
                    extracted_modbus_databuff[NUM_OF_STARTS] = modbus_data_buffer[PCC1302_NUM_OF_STRT];
   dcb90:	604b      	str	r3, [r1, #4]
                                                         (modbus_data_buffer[PCC1302_RUN_HR_L]);
   dcb92:	8893      	ldrh	r3, [r2, #4]
                    extracted_modbus_databuff[RUN_HRS] = (modbus_data_buffer[PCC1302_RUN_HR_H] * CUMMINS_32BIT_SCALER) +
   dcb94:	eb03 4300 	add.w	r3, r3, r0, lsl #16
   dcb98:	600b      	str	r3, [r1, #0]
                    break;
   dcb9a:	e7d5      	b.n	dcb48 <_ZN11GXGenerator18extractMainMetricsEh+0x2c>
                    extracted_modbus_databuff[CTRL_MODE] = modbus_data_buffer[PCC1302_CTRL_MD];
   dcb9c:	4b2c      	ldr	r3, [pc, #176]	; (dcc50 <_ZN11GXGenerator18extractMainMetricsEh+0x134>)
   dcb9e:	4a2d      	ldr	r2, [pc, #180]	; (dcc54 <_ZN11GXGenerator18extractMainMetricsEh+0x138>)
   dcba0:	8819      	ldrh	r1, [r3, #0]
   dcba2:	6091      	str	r1, [r2, #8]
                    extracted_modbus_databuff[ENGINE_STATE] = modbus_data_buffer[PCC1302_ENG_ST];
   dcba4:	8859      	ldrh	r1, [r3, #2]
   dcba6:	60d1      	str	r1, [r2, #12]
                    gen_alrm_regval[ALARM_REG1] = modbus_data_buffer[PCC1302_ALRM_CD];
   dcba8:	4a2b      	ldr	r2, [pc, #172]	; (dcc58 <_ZN11GXGenerator18extractMainMetricsEh+0x13c>)
   dcbaa:	8899      	ldrh	r1, [r3, #4]
                    gen_alrm_regval[ALARM_REG2] = modbus_data_buffer[PCC1302_ALRM_ST];
   dcbac:	88db      	ldrh	r3, [r3, #6]
                    gen_alrm_regval[ALARM_REG1] = modbus_data_buffer[PCC1302_ALRM_CD];
   dcbae:	8011      	strh	r1, [r2, #0]
                    gen_alrm_regval[ALARM_REG2] = modbus_data_buffer[PCC1302_ALRM_ST];
   dcbb0:	8053      	strh	r3, [r2, #2]
                    break;
   dcbb2:	e7c9      	b.n	dcb48 <_ZN11GXGenerator18extractMainMetricsEh+0x2c>
    if (gen_controller_type == DCP_10)
   dcbb4:	2b01      	cmp	r3, #1
   dcbb6:	d113      	bne.n	dcbe0 <_ZN11GXGenerator18extractMainMetricsEh+0xc4>
        switch (query_unit)
   dcbb8:	2901      	cmp	r1, #1
   dcbba:	d008      	beq.n	dcbce <_ZN11GXGenerator18extractMainMetricsEh+0xb2>
   dcbbc:	2902      	cmp	r1, #2
   dcbbe:	d0cd      	beq.n	dcb5c <_ZN11GXGenerator18extractMainMetricsEh+0x40>
   dcbc0:	2900      	cmp	r1, #0
   dcbc2:	d1c1      	bne.n	dcb48 <_ZN11GXGenerator18extractMainMetricsEh+0x2c>
                    extracted_modbus_databuff[RUN_HRS] = modbus_data_buffer[DCP10_RUN_HR];
   dcbc4:	4b22      	ldr	r3, [pc, #136]	; (dcc50 <_ZN11GXGenerator18extractMainMetricsEh+0x134>)
   dcbc6:	881a      	ldrh	r2, [r3, #0]
   dcbc8:	4b22      	ldr	r3, [pc, #136]	; (dcc54 <_ZN11GXGenerator18extractMainMetricsEh+0x138>)
                    extracted_modbus_databuff[RUN_HRS] = modbus_data_buffer[APM303_RUN_HR];
   dcbca:	601a      	str	r2, [r3, #0]
                    break;
   dcbcc:	e7bc      	b.n	dcb48 <_ZN11GXGenerator18extractMainMetricsEh+0x2c>
                    extracted_modbus_databuff[CTRL_MODE] = modbus_data_buffer[DCP10_CTRL_MODE];
   dcbce:	4a20      	ldr	r2, [pc, #128]	; (dcc50 <_ZN11GXGenerator18extractMainMetricsEh+0x134>)
   dcbd0:	4b20      	ldr	r3, [pc, #128]	; (dcc54 <_ZN11GXGenerator18extractMainMetricsEh+0x138>)
   dcbd2:	8811      	ldrh	r1, [r2, #0]
   dcbd4:	6099      	str	r1, [r3, #8]
                    gen_alrm_regval[ALARM_REG1] = modbus_data_buffer[DCP10_CTRL_MODE];
   dcbd6:	4b20      	ldr	r3, [pc, #128]	; (dcc58 <_ZN11GXGenerator18extractMainMetricsEh+0x13c>)
                    gen_alrm_regval[ALARM_REG2] = modbus_data_buffer[DCP10_ALRM_FAULT];
   dcbd8:	8892      	ldrh	r2, [r2, #4]
                    gen_alrm_regval[ALARM_REG1] = modbus_data_buffer[DCP10_CTRL_MODE];
   dcbda:	8019      	strh	r1, [r3, #0]
                    gen_alrm_regval[ALARM_REG2] = modbus_data_buffer[DCP10_ALRM_FAULT];
   dcbdc:	805a      	strh	r2, [r3, #2]
                    break;
   dcbde:	e7b3      	b.n	dcb48 <_ZN11GXGenerator18extractMainMetricsEh+0x2c>
    if (gen_controller_type == APM_303)
   dcbe0:	2b04      	cmp	r3, #4
   dcbe2:	d133      	bne.n	dcc4c <_ZN11GXGenerator18extractMainMetricsEh+0x130>
        switch (query_unit)
   dcbe4:	2903      	cmp	r1, #3
   dcbe6:	d8af      	bhi.n	dcb48 <_ZN11GXGenerator18extractMainMetricsEh+0x2c>
   dcbe8:	e8df f001 	tbb	[pc, r1]
   dcbec:	1b0e0802 	.word	0x1b0e0802
                    extracted_modbus_databuff[NUM_OF_STARTS] = modbus_data_buffer[APM303_NUM_OF_STRT];
   dcbf0:	4a17      	ldr	r2, [pc, #92]	; (dcc50 <_ZN11GXGenerator18extractMainMetricsEh+0x134>)
   dcbf2:	4b18      	ldr	r3, [pc, #96]	; (dcc54 <_ZN11GXGenerator18extractMainMetricsEh+0x138>)
   dcbf4:	8811      	ldrh	r1, [r2, #0]
   dcbf6:	6059      	str	r1, [r3, #4]
                    extracted_modbus_databuff[RUN_HRS] = modbus_data_buffer[APM303_RUN_HR];
   dcbf8:	8992      	ldrh	r2, [r2, #12]
   dcbfa:	e7e6      	b.n	dcbca <_ZN11GXGenerator18extractMainMetricsEh+0xae>
                    extracted_modbus_databuff[ENGINE_STATE] = modbus_data_buffer[APM303_ENG_STATE];
   dcbfc:	4a14      	ldr	r2, [pc, #80]	; (dcc50 <_ZN11GXGenerator18extractMainMetricsEh+0x134>)
   dcbfe:	4b15      	ldr	r3, [pc, #84]	; (dcc54 <_ZN11GXGenerator18extractMainMetricsEh+0x138>)
   dcc00:	8811      	ldrh	r1, [r2, #0]
   dcc02:	60d9      	str	r1, [r3, #12]
                    extracted_modbus_databuff[CTRL_MODE] = modbus_data_buffer[APM303_CTRL_MODE];
   dcc04:	8852      	ldrh	r2, [r2, #2]
   dcc06:	e7a7      	b.n	dcb58 <_ZN11GXGenerator18extractMainMetricsEh+0x3c>
                }
            
            case GEN_QUERY3:
                
                {
                    gen_alrm_regval[ALARM_REG11] = modbus_data_buffer[APM303_LOW_BATT];
   dcc08:	4a11      	ldr	r2, [pc, #68]	; (dcc50 <_ZN11GXGenerator18extractMainMetricsEh+0x134>)
   dcc0a:	4b13      	ldr	r3, [pc, #76]	; (dcc58 <_ZN11GXGenerator18extractMainMetricsEh+0x13c>)
   dcc0c:	8811      	ldrh	r1, [r2, #0]
   dcc0e:	8299      	strh	r1, [r3, #20]
                    gen_alrm_regval[ALARM_REG23] = modbus_data_buffer[APM303_LOW_FUEL];
   dcc10:	8851      	ldrh	r1, [r2, #2]
   dcc12:	8599      	strh	r1, [r3, #44]	; 0x2c
                    gen_alrm_regval[ALARM_REG1] = modbus_data_buffer[APM303_EMERGENCY_STP];
   dcc14:	8a11      	ldrh	r1, [r2, #16]
   dcc16:	8019      	strh	r1, [r3, #0]
                    gen_alrm_regval[ALARM_REG6] = modbus_data_buffer[APM303_OVERSPEED];
   dcc18:	8a51      	ldrh	r1, [r2, #18]
                    gen_alrm_regval[ALARM_REG5] = modbus_data_buffer[APM303_UNDERSPEED];
   dcc1a:	8a92      	ldrh	r2, [r2, #20]
                    gen_alrm_regval[ALARM_REG6] = modbus_data_buffer[APM303_OVERSPEED];
   dcc1c:	8159      	strh	r1, [r3, #10]
                    gen_alrm_regval[ALARM_REG5] = modbus_data_buffer[APM303_UNDERSPEED];
   dcc1e:	811a      	strh	r2, [r3, #8]

                    break;
   dcc20:	e792      	b.n	dcb48 <_ZN11GXGenerator18extractMainMetricsEh+0x2c>
                }
            
            case GEN_QUERY4:
                
                {
                    gen_alrm_regval[ALARM_REG2] = modbus_data_buffer[APM303_LOW_OIL_PRSS];
   dcc22:	4a0b      	ldr	r2, [pc, #44]	; (dcc50 <_ZN11GXGenerator18extractMainMetricsEh+0x134>)
   dcc24:	4b0c      	ldr	r3, [pc, #48]	; (dcc58 <_ZN11GXGenerator18extractMainMetricsEh+0x13c>)
   dcc26:	8811      	ldrh	r1, [r2, #0]
   dcc28:	8059      	strh	r1, [r3, #2]
                    gen_alrm_regval[ALARM_REG3] = modbus_data_buffer[APM303_HIGH_COOL_TEMP];
   dcc2a:	8851      	ldrh	r1, [r2, #2]
   dcc2c:	8099      	strh	r1, [r3, #4]
                    gen_alrm_regval[ALARM_REG16] = modbus_data_buffer[APM303_FAIL_TO_CLOSE];
   dcc2e:	8951      	ldrh	r1, [r2, #10]
   dcc30:	83d9      	strh	r1, [r3, #30]
                    gen_alrm_regval[ALARM_REG10] = modbus_data_buffer[APM303_HIGH_VOLT];
   dcc32:	8991      	ldrh	r1, [r2, #12]
   dcc34:	8259      	strh	r1, [r3, #18]
                    gen_alrm_regval[ALARM_REG9] = modbus_data_buffer[APM303_LOW_VOLT];
   dcc36:	89d1      	ldrh	r1, [r2, #14]
   dcc38:	8219      	strh	r1, [r3, #16]
                    gen_alrm_regval[ALARM_REG8] = modbus_data_buffer[APM303_HIGH_FREQ];
   dcc3a:	8a11      	ldrh	r1, [r2, #16]
   dcc3c:	81d9      	strh	r1, [r3, #14]
                    gen_alrm_regval[ALARM_REG7] = modbus_data_buffer[APM303_LOW_FREQ];
   dcc3e:	8a51      	ldrh	r1, [r2, #18]
   dcc40:	8199      	strh	r1, [r3, #12]
                    gen_alrm_regval[ALARM_REG14] = modbus_data_buffer[APM303_FAIL_TO_STRT];
   dcc42:	8a91      	ldrh	r1, [r2, #20]
                    gen_alrm_regval[ALARM_REG15] = modbus_data_buffer[APM303_FAIL_TO_STP];
   dcc44:	8ad2      	ldrh	r2, [r2, #22]
                    gen_alrm_regval[ALARM_REG14] = modbus_data_buffer[APM303_FAIL_TO_STRT];
   dcc46:	8359      	strh	r1, [r3, #26]
                    gen_alrm_regval[ALARM_REG15] = modbus_data_buffer[APM303_FAIL_TO_STP];
   dcc48:	839a      	strh	r2, [r3, #28]

                    break;
   dcc4a:	e77d      	b.n	dcb48 <_ZN11GXGenerator18extractMainMetricsEh+0x2c>

        memset(modbus_data_buffer, 0, sizeof(modbus_data_buffer));
        return;
    }   
        
}
   dcc4c:	4770      	bx	lr
   dcc4e:	bf00      	nop
   dcc50:	2003e224 	.word	0x2003e224
   dcc54:	2003db18 	.word	0x2003db18
   dcc58:	2003db7c 	.word	0x2003db7c

000dcc5c <_ZN11GXGenerator21extractBasInstMetricsEh>:

void GXGenerator::extractBasInstMetrics(uint8_t query_unit)
{
   dcc5c:	b410      	push	{r4}
    if (gen_controller_type == DSE_857)
   dcc5e:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
   dcc62:	2b02      	cmp	r3, #2
   dcc64:	d166      	bne.n	dcd34 <_ZN11GXGenerator21extractBasInstMetricsEh+0xd8>
    {
        switch (query_unit)
   dcc66:	2901      	cmp	r1, #1
   dcc68:	d010      	beq.n	dcc8c <_ZN11GXGenerator21extractBasInstMetricsEh+0x30>
   dcc6a:	2902      	cmp	r1, #2
   dcc6c:	d03a      	beq.n	dcce4 <_ZN11GXGenerator21extractBasInstMetricsEh+0x88>
   dcc6e:	b931      	cbnz	r1, dcc7e <_ZN11GXGenerator21extractBasInstMetricsEh+0x22>
        {
            case GEN_QUERY1:

                 {
                    extracted_modbus_databuff[TOTAL_KWH] = (modbus_data_buffer[DSE_TOTAL_KWH_H] << MOVE_16_STEP) |
   dcc70:	4a6e      	ldr	r2, [pc, #440]	; (dce2c <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d0>)
   dcc72:	8811      	ldrh	r1, [r2, #0]
                                                           (modbus_data_buffer[DSE_TOTAL_KWH_L]);
   dcc74:	8853      	ldrh	r3, [r2, #2]
                    extracted_modbus_databuff[TOTAL_KWH] = (modbus_data_buffer[DSE_TOTAL_KWH_H] << MOVE_16_STEP) |
   dcc76:	4a6e      	ldr	r2, [pc, #440]	; (dce30 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d4>)
   dcc78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dcc7c:	6013      	str	r3, [r2, #0]
                 
                    break;
                 }
        }

        memset(modbus_data_buffer, 0, sizeof(modbus_data_buffer));
   dcc7e:	486b      	ldr	r0, [pc, #428]	; (dce2c <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d0>)
        memset(modbus_data_buffer, 0, sizeof(modbus_data_buffer));
        return;
    }
    
        
}
   dcc80:	f85d 4b04 	ldr.w	r4, [sp], #4
        memset(modbus_data_buffer, 0, sizeof(modbus_data_buffer));
   dcc84:	223c      	movs	r2, #60	; 0x3c
   dcc86:	2100      	movs	r1, #0
   dcc88:	f008 bd12 	b.w	e56b0 <memset>
   dcc8c:	4967      	ldr	r1, [pc, #412]	; (dce2c <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d0>)
   dcc8e:	4869      	ldr	r0, [pc, #420]	; (dce34 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d8>)
        switch (query_unit)
   dcc90:	2208      	movs	r2, #8
   dcc92:	460b      	mov	r3, r1
                        extracted_modbus_databuff[i] = modbus_data_buffer[buff_indx];
   dcc94:	3a01      	subs	r2, #1
   dcc96:	f831 4b02 	ldrh.w	r4, [r1], #2
   dcc9a:	f840 4b04 	str.w	r4, [r0], #4
                    for (uint8_t i = OIL_PRESSR; i <= GEN_FREQCY; i++)
   dcc9e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   dcca2:	d1f7      	bne.n	dcc94 <_ZN11GXGenerator21extractBasInstMetricsEh+0x38>
                    extracted_modbus_databuff[L1_N_VOLT] = (modbus_data_buffer[DSE_L1_VOLT_H] << MOVE_16_STEP) |
   dcca4:	8a18      	ldrh	r0, [r3, #16]
                                                           (modbus_data_buffer[DSE_L1_VOLT_L]);
   dcca6:	8a59      	ldrh	r1, [r3, #18]
                    extracted_modbus_databuff[L1_N_VOLT] = (modbus_data_buffer[DSE_L1_VOLT_H] << MOVE_16_STEP) |
   dcca8:	4a61      	ldr	r2, [pc, #388]	; (dce30 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d4>)
   dccaa:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   dccae:	6251      	str	r1, [r2, #36]	; 0x24
                    extracted_modbus_databuff[L2_N_VOLT] = (modbus_data_buffer[DSE_L2_VOLT_H] << MOVE_16_STEP) |
   dccb0:	8a98      	ldrh	r0, [r3, #20]
                                                           (modbus_data_buffer[DSE_L2_VOLT_L]);
   dccb2:	8ad9      	ldrh	r1, [r3, #22]
                    extracted_modbus_databuff[L2_N_VOLT] = (modbus_data_buffer[DSE_L2_VOLT_H] << MOVE_16_STEP) |
   dccb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   dccb8:	6291      	str	r1, [r2, #40]	; 0x28
                    extracted_modbus_databuff[L3_N_VOLT] = (modbus_data_buffer[DSE_L3_VOLT_H] << MOVE_16_STEP) |
   dccba:	8b18      	ldrh	r0, [r3, #24]
                                                           (modbus_data_buffer[DSE_L3_VOLT_L]);
   dccbc:	8b59      	ldrh	r1, [r3, #26]
                    extracted_modbus_databuff[L3_N_VOLT] = (modbus_data_buffer[DSE_L3_VOLT_H] << MOVE_16_STEP) |
   dccbe:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   dccc2:	62d1      	str	r1, [r2, #44]	; 0x2c
                    extracted_modbus_databuff[L1_L2_VOLT] = (modbus_data_buffer[DSE_L1L2_VOLT_H] << MOVE_16_STEP) |
   dccc4:	8b98      	ldrh	r0, [r3, #28]
                                                            (modbus_data_buffer[DSE_L1L2_VOLT_L]);
   dccc6:	8bd9      	ldrh	r1, [r3, #30]
                    extracted_modbus_databuff[L1_L2_VOLT] = (modbus_data_buffer[DSE_L1L2_VOLT_H] << MOVE_16_STEP) |
   dccc8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   dcccc:	6311      	str	r1, [r2, #48]	; 0x30
                    extracted_modbus_databuff[L2_L3_VOLT] = (modbus_data_buffer[DSE_L2L3_VOLT_H] << MOVE_16_STEP) |
   dccce:	8c18      	ldrh	r0, [r3, #32]
                                                            (modbus_data_buffer[DSE_L2L3_VOLT_L]);
   dccd0:	8c59      	ldrh	r1, [r3, #34]	; 0x22
                    extracted_modbus_databuff[L2_L3_VOLT] = (modbus_data_buffer[DSE_L2L3_VOLT_H] << MOVE_16_STEP) |
   dccd2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   dccd6:	6351      	str	r1, [r2, #52]	; 0x34
                    extracted_modbus_databuff[L3_L1_VOLT] = (modbus_data_buffer[DSE_L3L1_VOLT_H] << MOVE_16_STEP) |
   dccd8:	8c99      	ldrh	r1, [r3, #36]	; 0x24
                                                            (modbus_data_buffer[DSE_L3L1_VOLT_L]);
   dccda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
                    extracted_modbus_databuff[L3_L1_VOLT] = (modbus_data_buffer[DSE_L3L1_VOLT_H] << MOVE_16_STEP) |
   dccdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dcce0:	6393      	str	r3, [r2, #56]	; 0x38
                    break;
   dcce2:	e7cc      	b.n	dcc7e <_ZN11GXGenerator21extractBasInstMetricsEh+0x22>
                    extracted_modbus_databuff[L1_CURR] = (modbus_data_buffer[DSE_L1_CURR_H] << MOVE_16_STEP) |
   dcce4:	4b51      	ldr	r3, [pc, #324]	; (dce2c <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d0>)
   dcce6:	4a52      	ldr	r2, [pc, #328]	; (dce30 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d4>)
   dcce8:	8818      	ldrh	r0, [r3, #0]
                                                         (modbus_data_buffer[DSE_L1_CURR_L]);
   dccea:	8859      	ldrh	r1, [r3, #2]
                    extracted_modbus_databuff[L1_CURR] = (modbus_data_buffer[DSE_L1_CURR_H] << MOVE_16_STEP) |
   dccec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   dccf0:	63d1      	str	r1, [r2, #60]	; 0x3c
                    extracted_modbus_databuff[L2_CURR] = (modbus_data_buffer[DSE_L2_CURR_H] << MOVE_16_STEP) |
   dccf2:	8898      	ldrh	r0, [r3, #4]
                                                         (modbus_data_buffer[DSE_L2_CURR_L]);
   dccf4:	88d9      	ldrh	r1, [r3, #6]
                    extracted_modbus_databuff[L2_CURR] = (modbus_data_buffer[DSE_L2_CURR_H] << MOVE_16_STEP) |
   dccf6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   dccfa:	6411      	str	r1, [r2, #64]	; 0x40
                    extracted_modbus_databuff[L3_CURR] = (modbus_data_buffer[DSE_L3_CURR_H] << MOVE_16_STEP) |
   dccfc:	8918      	ldrh	r0, [r3, #8]
                                                         (modbus_data_buffer[DSE_L3_CURR_L]);
   dccfe:	8959      	ldrh	r1, [r3, #10]
                    extracted_modbus_databuff[L3_CURR] = (modbus_data_buffer[DSE_L3_CURR_H] << MOVE_16_STEP) |
   dcd00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   dcd04:	6451      	str	r1, [r2, #68]	; 0x44
                    extracted_modbus_databuff[EARTH_CURR] = (modbus_data_buffer[DSE_EARTH_CURR_H] << MOVE_16_STEP) |
   dcd06:	8998      	ldrh	r0, [r3, #12]
                                                            (modbus_data_buffer[DSE_EARTH_CURR_L]);
   dcd08:	89d9      	ldrh	r1, [r3, #14]
                    extracted_modbus_databuff[EARTH_CURR] = (modbus_data_buffer[DSE_EARTH_CURR_H] << MOVE_16_STEP) |
   dcd0a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   dcd0e:	6491      	str	r1, [r2, #72]	; 0x48
                    extracted_modbus_databuff[L1_WATT] = (modbus_data_buffer[DSE_L1_WATT_H] << MOVE_16_STEP) |
   dcd10:	8a18      	ldrh	r0, [r3, #16]
                                                         (modbus_data_buffer[DSE_L1_WATT_L]);
   dcd12:	8a59      	ldrh	r1, [r3, #18]
                    extracted_modbus_databuff[L1_WATT] = (modbus_data_buffer[DSE_L1_WATT_H] << MOVE_16_STEP) |
   dcd14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   dcd18:	64d1      	str	r1, [r2, #76]	; 0x4c
                    extracted_modbus_databuff[L2_WATT] = (modbus_data_buffer[DSE_L2_WATT_H] << MOVE_16_STEP) |
   dcd1a:	8a98      	ldrh	r0, [r3, #20]
                                                         (modbus_data_buffer[DSE_L2_WATT_L]);
   dcd1c:	8ad9      	ldrh	r1, [r3, #22]
                    extracted_modbus_databuff[L2_WATT] = (modbus_data_buffer[DSE_L2_WATT_H] << MOVE_16_STEP) |
   dcd1e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   dcd22:	6511      	str	r1, [r2, #80]	; 0x50
                    extracted_modbus_databuff[L3_WATT] = (modbus_data_buffer[DSE_L3_WATT_H] << MOVE_16_STEP) |
   dcd24:	8b18      	ldrh	r0, [r3, #24]
                                                         (modbus_data_buffer[DSE_L3_WATT_L]);
   dcd26:	8b59      	ldrh	r1, [r3, #26]
                    extracted_modbus_databuff[CURR_LAG_LEAD] = modbus_data_buffer[DSE_CURR_LAG_LEAD];
   dcd28:	8b9b      	ldrh	r3, [r3, #28]
   dcd2a:	6593      	str	r3, [r2, #88]	; 0x58
                    extracted_modbus_databuff[L3_WATT] = (modbus_data_buffer[DSE_L3_WATT_H] << MOVE_16_STEP) |
   dcd2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   dcd30:	6551      	str	r1, [r2, #84]	; 0x54
                    break;
   dcd32:	e7a4      	b.n	dcc7e <_ZN11GXGenerator21extractBasInstMetricsEh+0x22>
    if (gen_controller_type == PCC_1302)
   dcd34:	2b03      	cmp	r3, #3
   dcd36:	d12a      	bne.n	dcd8e <_ZN11GXGenerator21extractBasInstMetricsEh+0x132>
        switch (query_unit)
   dcd38:	2901      	cmp	r1, #1
   dcd3a:	d018      	beq.n	dcd6e <_ZN11GXGenerator21extractBasInstMetricsEh+0x112>
   dcd3c:	2902      	cmp	r1, #2
   dcd3e:	d01b      	beq.n	dcd78 <_ZN11GXGenerator21extractBasInstMetricsEh+0x11c>
   dcd40:	2900      	cmp	r1, #0
   dcd42:	d19c      	bne.n	dcc7e <_ZN11GXGenerator21extractBasInstMetricsEh+0x22>
                    extracted_modbus_databuff[L1_N_VOLT] = modbus_data_buffer[PCC1302_L1_VOLT];
   dcd44:	4a39      	ldr	r2, [pc, #228]	; (dce2c <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d0>)
   dcd46:	4b3a      	ldr	r3, [pc, #232]	; (dce30 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d4>)
   dcd48:	8811      	ldrh	r1, [r2, #0]
   dcd4a:	6259      	str	r1, [r3, #36]	; 0x24
                    extracted_modbus_databuff[L2_N_VOLT] = modbus_data_buffer[PCC1302_L2_VOLT];
   dcd4c:	8851      	ldrh	r1, [r2, #2]
   dcd4e:	6299      	str	r1, [r3, #40]	; 0x28
                    extracted_modbus_databuff[L3_N_VOLT] = modbus_data_buffer[PCC1302_L3_VOLT];
   dcd50:	8891      	ldrh	r1, [r2, #4]
   dcd52:	62d9      	str	r1, [r3, #44]	; 0x2c
                    extracted_modbus_databuff[L1_L2_VOLT] = modbus_data_buffer[PCC1302_L1L2_VOLT];
   dcd54:	8911      	ldrh	r1, [r2, #8]
   dcd56:	6319      	str	r1, [r3, #48]	; 0x30
                    extracted_modbus_databuff[L2_L3_VOLT] = modbus_data_buffer[PCC1302_L2L3_VOLT];
   dcd58:	8951      	ldrh	r1, [r2, #10]
   dcd5a:	6359      	str	r1, [r3, #52]	; 0x34
                    extracted_modbus_databuff[L3_L1_VOLT] = modbus_data_buffer[PCC1302_L3L1_VOLT];
   dcd5c:	8991      	ldrh	r1, [r2, #12]
   dcd5e:	6399      	str	r1, [r3, #56]	; 0x38
                    extracted_modbus_databuff[L1_CURR] = modbus_data_buffer[PCC1302_L1_CURR];
   dcd60:	8a11      	ldrh	r1, [r2, #16]
   dcd62:	63d9      	str	r1, [r3, #60]	; 0x3c
                    extracted_modbus_databuff[L2_CURR] = modbus_data_buffer[PCC1302_L2_CURR];
   dcd64:	8a51      	ldrh	r1, [r2, #18]
                    extracted_modbus_databuff[L3_CURR] = modbus_data_buffer[PCC1302_L3_CURR];
   dcd66:	8a92      	ldrh	r2, [r2, #20]
                    extracted_modbus_databuff[L2_CURR] = modbus_data_buffer[PCC1302_L2_CURR];
   dcd68:	6419      	str	r1, [r3, #64]	; 0x40
                    extracted_modbus_databuff[L3_CURR] = modbus_data_buffer[PCC1302_L3_CURR];
   dcd6a:	645a      	str	r2, [r3, #68]	; 0x44
                    break;
   dcd6c:	e787      	b.n	dcc7e <_ZN11GXGenerator21extractBasInstMetricsEh+0x22>
                    extracted_modbus_databuff[GEN_FREQCY] = modbus_data_buffer[PCC1302_GEN_FREQ];
   dcd6e:	4b2f      	ldr	r3, [pc, #188]	; (dce2c <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d0>)
   dcd70:	881a      	ldrh	r2, [r3, #0]
                    extracted_modbus_databuff[GEN_FREQCY] = modbus_data_buffer[DCP10_GEN_FREQ];
   dcd72:	4b2f      	ldr	r3, [pc, #188]	; (dce30 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d4>)
   dcd74:	621a      	str	r2, [r3, #32]
                    break;
   dcd76:	e782      	b.n	dcc7e <_ZN11GXGenerator21extractBasInstMetricsEh+0x22>
                    extracted_modbus_databuff[ENGINE_BATT_VOLT] = modbus_data_buffer[PCC1302_BATT_VOLT];
   dcd78:	4a2c      	ldr	r2, [pc, #176]	; (dce2c <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d0>)
   dcd7a:	4b2d      	ldr	r3, [pc, #180]	; (dce30 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d4>)
   dcd7c:	8811      	ldrh	r1, [r2, #0]
   dcd7e:	6199      	str	r1, [r3, #24]
                    extracted_modbus_databuff[OIL_PRESSR] = modbus_data_buffer[PCC1302_OIL_PRESS];
   dcd80:	8851      	ldrh	r1, [r2, #2]
   dcd82:	6059      	str	r1, [r3, #4]
                    extracted_modbus_databuff[COOL_TEMP] = modbus_data_buffer[PCC1302_COOL_TEMP];
   dcd84:	88d1      	ldrh	r1, [r2, #6]
                    extracted_modbus_databuff[ENGINE_SPEED] = modbus_data_buffer[PCC1302_ENG_SPEED];
   dcd86:	89d2      	ldrh	r2, [r2, #14]
                    extracted_modbus_databuff[COOL_TEMP] = modbus_data_buffer[PCC1302_COOL_TEMP];
   dcd88:	6099      	str	r1, [r3, #8]
                    extracted_modbus_databuff[ENGINE_SPEED] = modbus_data_buffer[PCC1302_ENG_SPEED];
   dcd8a:	61da      	str	r2, [r3, #28]
                    break;
   dcd8c:	e777      	b.n	dcc7e <_ZN11GXGenerator21extractBasInstMetricsEh+0x22>
    if (gen_controller_type == DCP_10)
   dcd8e:	2b01      	cmp	r3, #1
   dcd90:	d11e      	bne.n	dcdd0 <_ZN11GXGenerator21extractBasInstMetricsEh+0x174>
        switch (query_unit)
   dcd92:	b181      	cbz	r1, dcdb6 <_ZN11GXGenerator21extractBasInstMetricsEh+0x15a>
   dcd94:	2901      	cmp	r1, #1
   dcd96:	f47f af72 	bne.w	dcc7e <_ZN11GXGenerator21extractBasInstMetricsEh+0x22>
   dcd9a:	4a24      	ldr	r2, [pc, #144]	; (dce2c <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d0>)
   dcd9c:	4926      	ldr	r1, [pc, #152]	; (dce38 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1dc>)
   dcd9e:	2309      	movs	r3, #9
   dcda0:	4610      	mov	r0, r2
                        extracted_modbus_databuff[metrc_indx] = modbus_data_buffer[data_indx++];
   dcda2:	3b01      	subs	r3, #1
   dcda4:	f832 4b02 	ldrh.w	r4, [r2], #2
   dcda8:	f841 4b04 	str.w	r4, [r1], #4
                    for (uint8_t metrc_indx = L1_N_VOLT; metrc_indx < EARTH_CURR; metrc_indx++)
   dcdac:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   dcdb0:	d1f7      	bne.n	dcda2 <_ZN11GXGenerator21extractBasInstMetricsEh+0x146>
                    extracted_modbus_databuff[GEN_FREQCY] = modbus_data_buffer[DCP10_GEN_FREQ];
   dcdb2:	8b02      	ldrh	r2, [r0, #24]
   dcdb4:	e7dd      	b.n	dcd72 <_ZN11GXGenerator21extractBasInstMetricsEh+0x116>
                    extracted_modbus_databuff[ENGINE_SPEED] = modbus_data_buffer[DCP10_ENG_SPEED];
   dcdb6:	4a1d      	ldr	r2, [pc, #116]	; (dce2c <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d0>)
   dcdb8:	4b1d      	ldr	r3, [pc, #116]	; (dce30 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d4>)
   dcdba:	8811      	ldrh	r1, [r2, #0]
   dcdbc:	61d9      	str	r1, [r3, #28]
                    extracted_modbus_databuff[OIL_PRESSR] = modbus_data_buffer[DCP10_OIL_PRESSR];
   dcdbe:	8851      	ldrh	r1, [r2, #2]
   dcdc0:	6059      	str	r1, [r3, #4]
                    extracted_modbus_databuff[COOL_TEMP] = modbus_data_buffer[DCP10_COOL_TEMP];
   dcdc2:	8891      	ldrh	r1, [r2, #4]
   dcdc4:	6099      	str	r1, [r3, #8]
                    extracted_modbus_databuff[ENGINE_BATT_VOLT] = modbus_data_buffer[DCP10_BATT_VOLT];
   dcdc6:	88d1      	ldrh	r1, [r2, #6]
                    extracted_modbus_databuff[CHARGER_ALT_VOLT] = modbus_data_buffer[DCP10_CHARGE_VOLT];
   dcdc8:	8912      	ldrh	r2, [r2, #8]
                    extracted_modbus_databuff[ENGINE_BATT_VOLT] = modbus_data_buffer[DCP10_BATT_VOLT];
   dcdca:	6199      	str	r1, [r3, #24]
                    extracted_modbus_databuff[CHARGER_ALT_VOLT] = modbus_data_buffer[APM303_CHARGER_VOLTAGE];
   dcdcc:	615a      	str	r2, [r3, #20]
                    break;
   dcdce:	e756      	b.n	dcc7e <_ZN11GXGenerator21extractBasInstMetricsEh+0x22>
    if (gen_controller_type == APM_303)
   dcdd0:	2b04      	cmp	r3, #4
   dcdd2:	d127      	bne.n	dce24 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1c8>
        switch (query_unit)
   dcdd4:	b191      	cbz	r1, dcdfc <_ZN11GXGenerator21extractBasInstMetricsEh+0x1a0>
   dcdd6:	2901      	cmp	r1, #1
   dcdd8:	f47f af51 	bne.w	dcc7e <_ZN11GXGenerator21extractBasInstMetricsEh+0x22>
                    extracted_modbus_databuff[CURR_LAG_LEAD] = modbus_data_buffer[APM303_CURR_LAG_LEAD];
   dcddc:	4a13      	ldr	r2, [pc, #76]	; (dce2c <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d0>)
   dcdde:	4b14      	ldr	r3, [pc, #80]	; (dce30 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d4>)
   dcde0:	8811      	ldrh	r1, [r2, #0]
   dcde2:	6599      	str	r1, [r3, #88]	; 0x58
                    extracted_modbus_databuff[ENGINE_SPEED] = modbus_data_buffer[APM303_ENGINE_SPEED];
   dcde4:	8851      	ldrh	r1, [r2, #2]
   dcde6:	61d9      	str	r1, [r3, #28]
                    extracted_modbus_databuff[GEN_FREQCY] = modbus_data_buffer[APM303_GEN_FREQUENCY];
   dcde8:	8891      	ldrh	r1, [r2, #4]
   dcdea:	6219      	str	r1, [r3, #32]
                    extracted_modbus_databuff[ENGINE_BATT_VOLT] = modbus_data_buffer[APM303_BATT_VOLTAGE];
   dcdec:	8911      	ldrh	r1, [r2, #8]
   dcdee:	6199      	str	r1, [r3, #24]
                    extracted_modbus_databuff[OIL_PRESSR] = modbus_data_buffer[APM303_OIL_PRESSURE];
   dcdf0:	89d1      	ldrh	r1, [r2, #14]
   dcdf2:	6059      	str	r1, [r3, #4]
                    extracted_modbus_databuff[COOL_TEMP] = modbus_data_buffer[APM303_COOL_TEMP];
   dcdf4:	8a11      	ldrh	r1, [r2, #16]
   dcdf6:	6099      	str	r1, [r3, #8]
                    extracted_modbus_databuff[CHARGER_ALT_VOLT] = modbus_data_buffer[APM303_CHARGER_VOLTAGE];
   dcdf8:	8ad2      	ldrh	r2, [r2, #22]
   dcdfa:	e7e7      	b.n	dcdcc <_ZN11GXGenerator21extractBasInstMetricsEh+0x170>
   dcdfc:	490b      	ldr	r1, [pc, #44]	; (dce2c <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d0>)
   dcdfe:	480e      	ldr	r0, [pc, #56]	; (dce38 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1dc>)
        switch (query_unit)
   dce00:	2309      	movs	r3, #9
   dce02:	460a      	mov	r2, r1
                        extracted_modbus_databuff[metrc_indx] = modbus_data_buffer[data_indx++];
   dce04:	3b01      	subs	r3, #1
   dce06:	f831 4b02 	ldrh.w	r4, [r1], #2
   dce0a:	f840 4b04 	str.w	r4, [r0], #4
                    for (uint8_t metrc_indx = L1_N_VOLT; metrc_indx < EARTH_CURR; metrc_indx++)
   dce0e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   dce12:	d1f7      	bne.n	dce04 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1a8>
                    extracted_modbus_databuff[L1_WATT] = modbus_data_buffer[APM303_L1_WATT];
   dce14:	4b06      	ldr	r3, [pc, #24]	; (dce30 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d4>)
   dce16:	8b11      	ldrh	r1, [r2, #24]
   dce18:	64d9      	str	r1, [r3, #76]	; 0x4c
                    extracted_modbus_databuff[L2_WATT] = modbus_data_buffer[APM303_L2_WATT];
   dce1a:	8b51      	ldrh	r1, [r2, #26]
                    extracted_modbus_databuff[L3_WATT] = modbus_data_buffer[APM303_L3_WATT];
   dce1c:	8b92      	ldrh	r2, [r2, #28]
                    extracted_modbus_databuff[L2_WATT] = modbus_data_buffer[APM303_L2_WATT];
   dce1e:	6519      	str	r1, [r3, #80]	; 0x50
                    extracted_modbus_databuff[L3_WATT] = modbus_data_buffer[APM303_L3_WATT];
   dce20:	655a      	str	r2, [r3, #84]	; 0x54
                    break;
   dce22:	e72c      	b.n	dcc7e <_ZN11GXGenerator21extractBasInstMetricsEh+0x22>
}
   dce24:	f85d 4b04 	ldr.w	r4, [sp], #4
   dce28:	4770      	bx	lr
   dce2a:	bf00      	nop
   dce2c:	2003e224 	.word	0x2003e224
   dce30:	2003db18 	.word	0x2003db18
   dce34:	2003db1c 	.word	0x2003db1c
   dce38:	2003db3c 	.word	0x2003db3c

000dce3c <_ZN11GXGenerator21extractDerInstMetricsEh>:

void GXGenerator::extractDerInstMetrics(uint8_t query_unit) 
{
    if (gen_controller_type == DSE_857)
   dce3c:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
   dce40:	2b02      	cmp	r3, #2
   dce42:	d13c      	bne.n	dcebe <_ZN11GXGenerator21extractDerInstMetricsEh+0x82>
    {
        extracted_modbus_databuff[TOTAL_WATT] = (modbus_data_buffer[DSE_TOTAL_WATT_H] << MOVE_16_STEP) | 
   dce44:	482a      	ldr	r0, [pc, #168]	; (dcef0 <_ZN11GXGenerator21extractDerInstMetricsEh+0xb4>)
   dce46:	4b2b      	ldr	r3, [pc, #172]	; (dcef4 <_ZN11GXGenerator21extractDerInstMetricsEh+0xb8>)
   dce48:	8801      	ldrh	r1, [r0, #0]
                                                (modbus_data_buffer[DSE_TOTAL_WATT_L]);
   dce4a:	8842      	ldrh	r2, [r0, #2]
        extracted_modbus_databuff[TOTAL_WATT] = (modbus_data_buffer[DSE_TOTAL_WATT_H] << MOVE_16_STEP) | 
   dce4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   dce50:	601a      	str	r2, [r3, #0]
        
        extracted_modbus_databuff[L1_KVA] = (modbus_data_buffer[DSE_L1_KVA_H] << MOVE_16_STEP) | 
   dce52:	8881      	ldrh	r1, [r0, #4]
                                            (modbus_data_buffer[DSE_L1_KVA_L]);
   dce54:	88c2      	ldrh	r2, [r0, #6]
        extracted_modbus_databuff[L1_KVA] = (modbus_data_buffer[DSE_L1_KVA_H] << MOVE_16_STEP) | 
   dce56:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   dce5a:	605a      	str	r2, [r3, #4]
        
        extracted_modbus_databuff[L2_KVA] = (modbus_data_buffer[DSE_L2_KVA_H] << MOVE_16_STEP) | 
   dce5c:	8901      	ldrh	r1, [r0, #8]
                                            (modbus_data_buffer[DSE_L2_KVA_L]);
   dce5e:	8942      	ldrh	r2, [r0, #10]
        extracted_modbus_databuff[L2_KVA] = (modbus_data_buffer[DSE_L2_KVA_H] << MOVE_16_STEP) | 
   dce60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   dce64:	609a      	str	r2, [r3, #8]

        extracted_modbus_databuff[L3_KVA] = (modbus_data_buffer[DSE_L3_KVA_H] << MOVE_16_STEP) | 
   dce66:	8981      	ldrh	r1, [r0, #12]
                                            (modbus_data_buffer[DSE_L3_KVA_L]);
   dce68:	89c2      	ldrh	r2, [r0, #14]
        extracted_modbus_databuff[L3_KVA] = (modbus_data_buffer[DSE_L3_KVA_H] << MOVE_16_STEP) | 
   dce6a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   dce6e:	60da      	str	r2, [r3, #12]
        
        extracted_modbus_databuff[TOTAL_KVA] = (modbus_data_buffer[DSE_TOTAL_KVA_H] << MOVE_16_STEP) | 
   dce70:	8a01      	ldrh	r1, [r0, #16]
                                               (modbus_data_buffer[DSE_TOTAL_KVA_L]);
   dce72:	8a42      	ldrh	r2, [r0, #18]
        extracted_modbus_databuff[TOTAL_KVA] = (modbus_data_buffer[DSE_TOTAL_KVA_H] << MOVE_16_STEP) | 
   dce74:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   dce78:	611a      	str	r2, [r3, #16]
        
        extracted_modbus_databuff[L1_KVAR] = (modbus_data_buffer[DSE_L1_KVAR_H] << MOVE_16_STEP) | 
   dce7a:	8a81      	ldrh	r1, [r0, #20]
                                             (modbus_data_buffer[DSE_L1_KVAR_L]);
   dce7c:	8ac2      	ldrh	r2, [r0, #22]
        extracted_modbus_databuff[L1_KVAR] = (modbus_data_buffer[DSE_L1_KVAR_H] << MOVE_16_STEP) | 
   dce7e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   dce82:	615a      	str	r2, [r3, #20]
        
        extracted_modbus_databuff[L2_KVAR] = (modbus_data_buffer[DSE_L2_KVAR_H] << MOVE_16_STEP) | 
   dce84:	8b01      	ldrh	r1, [r0, #24]
                                             (modbus_data_buffer[DSE_L2_KVAR_L]);
   dce86:	8b42      	ldrh	r2, [r0, #26]
        extracted_modbus_databuff[L2_KVAR] = (modbus_data_buffer[DSE_L2_KVAR_H] << MOVE_16_STEP) | 
   dce88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   dce8c:	619a      	str	r2, [r3, #24]
        
        extracted_modbus_databuff[L3_KVAR] = (modbus_data_buffer[DSE_L3_KVAR_H] << MOVE_16_STEP) | 
   dce8e:	8b81      	ldrh	r1, [r0, #28]
                                             (modbus_data_buffer[DSE_L3_KVAR_L]);
   dce90:	8bc2      	ldrh	r2, [r0, #30]
        extracted_modbus_databuff[L3_KVAR] = (modbus_data_buffer[DSE_L3_KVAR_H] << MOVE_16_STEP) | 
   dce92:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   dce96:	61da      	str	r2, [r3, #28]
        
        extracted_modbus_databuff[TOTAL_KVAR] = (modbus_data_buffer[DSE_TOTAL_KVAR_H] << MOVE_16_STEP) | 
   dce98:	8c01      	ldrh	r1, [r0, #32]
                                                (modbus_data_buffer[DSE_TOTAL_KVAR_L]);
   dce9a:	8c42      	ldrh	r2, [r0, #34]	; 0x22
        extracted_modbus_databuff[TOTAL_KVAR] = (modbus_data_buffer[DSE_TOTAL_KVAR_H] << MOVE_16_STEP) | 
   dce9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   dcea0:	621a      	str	r2, [r3, #32]
        
        extracted_modbus_databuff[L1_PF] = modbus_data_buffer[DSE_L1_PF];
   dcea2:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   dcea4:	625a      	str	r2, [r3, #36]	; 0x24
        extracted_modbus_databuff[L2_PF] = modbus_data_buffer[DSE_L2_PF];
   dcea6:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
   dcea8:	629a      	str	r2, [r3, #40]	; 0x28
        extracted_modbus_databuff[L3_PF] = modbus_data_buffer[DSE_L3_PF];
   dceaa:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   dceac:	62da      	str	r2, [r3, #44]	; 0x2c
        extracted_modbus_databuff[AVER_PF] = modbus_data_buffer[DSE_AVE_PF];
   dceae:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   dceb0:	631a      	str	r2, [r3, #48]	; 0x30
        extracted_modbus_databuff[PERCENT_OF_FULL_POWER] = modbus_data_buffer[DSE_PERCENT_WATT];
   dceb2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   dceb4:	635a      	str	r2, [r3, #52]	; 0x34
        extracted_modbus_databuff[L3_KVA] = modbus_data_buffer[APM303_L3_KVA];
        extracted_modbus_databuff[L1_PF] = modbus_data_buffer[APM303_L1_PF];
        extracted_modbus_databuff[L2_PF] = modbus_data_buffer[APM303_L2_PF];
        extracted_modbus_databuff[L3_PF] = modbus_data_buffer[APM303_L3_PF];

        memset(modbus_data_buffer, 0, sizeof(modbus_data_buffer));
   dceb6:	223c      	movs	r2, #60	; 0x3c
   dceb8:	2100      	movs	r1, #0
   dceba:	f008 bbf9 	b.w	e56b0 <memset>
    if (gen_controller_type == APM_303)
   dcebe:	2b04      	cmp	r3, #4
   dcec0:	d114      	bne.n	dceec <_ZN11GXGenerator21extractDerInstMetricsEh+0xb0>
        extracted_modbus_databuff[TOTAL_WATT] = modbus_data_buffer[APM303_TOTAL_KW];
   dcec2:	480b      	ldr	r0, [pc, #44]	; (dcef0 <_ZN11GXGenerator21extractDerInstMetricsEh+0xb4>)
   dcec4:	4b0b      	ldr	r3, [pc, #44]	; (dcef4 <_ZN11GXGenerator21extractDerInstMetricsEh+0xb8>)
   dcec6:	8802      	ldrh	r2, [r0, #0]
   dcec8:	601a      	str	r2, [r3, #0]
        extracted_modbus_databuff[TOTAL_KVA] = modbus_data_buffer[APM303_TOTAL_KVA];
   dceca:	8842      	ldrh	r2, [r0, #2]
   dcecc:	611a      	str	r2, [r3, #16]
        extracted_modbus_databuff[AVER_PF] = modbus_data_buffer[APM303_AVE_PF];
   dcece:	8882      	ldrh	r2, [r0, #4]
   dced0:	631a      	str	r2, [r3, #48]	; 0x30
        extracted_modbus_databuff[L1_KVA] = modbus_data_buffer[APM303_L1_KVA];
   dced2:	8982      	ldrh	r2, [r0, #12]
   dced4:	605a      	str	r2, [r3, #4]
        extracted_modbus_databuff[L2_KVA] = modbus_data_buffer[APM303_L2_KVA];
   dced6:	89c2      	ldrh	r2, [r0, #14]
   dced8:	609a      	str	r2, [r3, #8]
        extracted_modbus_databuff[L3_KVA] = modbus_data_buffer[APM303_L3_KVA];
   dceda:	8a02      	ldrh	r2, [r0, #16]
   dcedc:	60da      	str	r2, [r3, #12]
        extracted_modbus_databuff[L1_PF] = modbus_data_buffer[APM303_L1_PF];
   dcede:	8a42      	ldrh	r2, [r0, #18]
   dcee0:	625a      	str	r2, [r3, #36]	; 0x24
        extracted_modbus_databuff[L2_PF] = modbus_data_buffer[APM303_L2_PF];
   dcee2:	8a82      	ldrh	r2, [r0, #20]
   dcee4:	629a      	str	r2, [r3, #40]	; 0x28
        extracted_modbus_databuff[L3_PF] = modbus_data_buffer[APM303_L3_PF];
   dcee6:	8ac2      	ldrh	r2, [r0, #22]
   dcee8:	62da      	str	r2, [r3, #44]	; 0x2c
   dceea:	e7e4      	b.n	dceb6 <_ZN11GXGenerator21extractDerInstMetricsEh+0x7a>
        return;
    }   
    
}
   dceec:	4770      	bx	lr
   dceee:	bf00      	nop
   dcef0:	2003e224 	.word	0x2003e224
   dcef4:	2003db18 	.word	0x2003db18

000dcef8 <_ZN11GXGenerator25extractGridBasInstMetricsEh>:

void GXGenerator::extractGridBasInstMetrics(uint8_t query_unit)
{
   dcef8:	b430      	push	{r4, r5}
    if(gen_controller_type == DSE_857)
   dcefa:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
   dcefe:	2b02      	cmp	r3, #2
   dcf00:	d112      	bne.n	dcf28 <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x30>
    {
        switch (query_unit)
   dcf02:	2901      	cmp	r1, #1
   dcf04:	d016      	beq.n	dcf34 <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x3c>
   dcf06:	2902      	cmp	r1, #2
   dcf08:	d034      	beq.n	dcf74 <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x7c>
   dcf0a:	b969      	cbnz	r1, dcf28 <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x30>
        {
            case GEN_QUERY1:
            {
                extracted_modbus_databuff[GRID_FREQ] = modbus_data_buffer[DSE_GRID_FREQUENCY];
   dcf0c:	4a1d      	ldr	r2, [pc, #116]	; (dcf84 <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x8c>)
   dcf0e:	491e      	ldr	r1, [pc, #120]	; (dcf88 <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x90>)
   dcf10:	8810      	ldrh	r0, [r2, #0]
   dcf12:	6048      	str	r0, [r1, #4]
                uint8_t dt_ref1 = DSE_GRID_L1_VOLT_H;
                for (uint8_t itr = GRID_L1_N_VOLT; itr <= GRID_L3_L1_VOLT; itr++)
                {
                    extracted_modbus_databuff[itr] = ((modbus_data_buffer[dt_ref1] << MOVE_16_STEP) | 
   dcf14:	8854      	ldrh	r4, [r2, #2]
                                                       modbus_data_buffer[++dt_ref1]);
   dcf16:	f832 0f04 	ldrh.w	r0, [r2, #4]!
                    extracted_modbus_databuff[itr] = ((modbus_data_buffer[dt_ref1] << MOVE_16_STEP) | 
   dcf1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
   dcf1e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
                for (uint8_t itr = GRID_L1_N_VOLT; itr <= GRID_L3_L1_VOLT; itr++)
   dcf22:	3301      	adds	r3, #1
   dcf24:	2b08      	cmp	r3, #8
   dcf26:	d1f5      	bne.n	dcf14 <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x1c>
            }
        }
    }

    memset(modbus_data_buffer, 0, sizeof(modbus_data_buffer));
}
   dcf28:	bc30      	pop	{r4, r5}
    memset(modbus_data_buffer, 0, sizeof(modbus_data_buffer));
   dcf2a:	4816      	ldr	r0, [pc, #88]	; (dcf84 <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x8c>)
   dcf2c:	223c      	movs	r2, #60	; 0x3c
   dcf2e:	2100      	movs	r1, #0
   dcf30:	f008 bbbe 	b.w	e56b0 <memset>
                extracted_modbus_databuff[GRID_AMP_LAG_LEAD] = modbus_data_buffer[DSE_GRID_CURR_LL];
   dcf34:	4a13      	ldr	r2, [pc, #76]	; (dcf84 <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x8c>)
   dcf36:	4b14      	ldr	r3, [pc, #80]	; (dcf88 <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x90>)
   dcf38:	8811      	ldrh	r1, [r2, #0]
   dcf3a:	6219      	str	r1, [r3, #32]
   dcf3c:	2009      	movs	r0, #9
   dcf3e:	4611      	mov	r1, r2
                    extracted_modbus_databuff[itr] = ((modbus_data_buffer[dt_ref2] << MOVE_16_STEP) | 
   dcf40:	8855      	ldrh	r5, [r2, #2]
                                                       modbus_data_buffer[++dt_ref2]);
   dcf42:	f832 4f04 	ldrh.w	r4, [r2, #4]!
                    extracted_modbus_databuff[itr] = ((modbus_data_buffer[dt_ref2] << MOVE_16_STEP) | 
   dcf46:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   dcf4a:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
                for(uint8_t itr = GRID_L1_AMP; itr <= GRID_EARTH_AMP; itr++)
   dcf4e:	3001      	adds	r0, #1
   dcf50:	280d      	cmp	r0, #13
   dcf52:	d1f5      	bne.n	dcf40 <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x48>
                    extracted_modbus_databuff[itr] = ((modbus_data_buffer[dt_ref2] << MOVE_16_STEP) | 
   dcf54:	8a48      	ldrh	r0, [r1, #18]
                                                       modbus_data_buffer[++dt_ref2]);
   dcf56:	8a8a      	ldrh	r2, [r1, #20]
                    extracted_modbus_databuff[itr] = ((modbus_data_buffer[dt_ref2] << MOVE_16_STEP) | 
   dcf58:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   dcf5c:	635a      	str	r2, [r3, #52]	; 0x34
   dcf5e:	8ac8      	ldrh	r0, [r1, #22]
                                                       modbus_data_buffer[++dt_ref2]);
   dcf60:	8b0a      	ldrh	r2, [r1, #24]
                    extracted_modbus_databuff[itr] = ((modbus_data_buffer[dt_ref2] << MOVE_16_STEP) | 
   dcf62:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   dcf66:	639a      	str	r2, [r3, #56]	; 0x38
   dcf68:	8b48      	ldrh	r0, [r1, #26]
                                                       modbus_data_buffer[++dt_ref2]);
   dcf6a:	8b8a      	ldrh	r2, [r1, #28]
                    extracted_modbus_databuff[itr] = ((modbus_data_buffer[dt_ref2] << MOVE_16_STEP) | 
   dcf6c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   dcf70:	63da      	str	r2, [r3, #60]	; 0x3c
                for(uint8_t itr = GRID_L1_WATT; itr <= GRID_L3_WATT; itr++)
   dcf72:	e7d9      	b.n	dcf28 <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x30>
                extracted_modbus_databuff[GRID_ACCUM_KWH] = ((modbus_data_buffer[DSE_GRID_ACCUM_KWH_H] << MOVE_16_STEP) | 
   dcf74:	4a03      	ldr	r2, [pc, #12]	; (dcf84 <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x8c>)
   dcf76:	8811      	ldrh	r1, [r2, #0]
                                                              modbus_data_buffer[DSE_GRID_ACCUM_KWH_L]);
   dcf78:	8853      	ldrh	r3, [r2, #2]
                extracted_modbus_databuff[GRID_ACCUM_KWH] = ((modbus_data_buffer[DSE_GRID_ACCUM_KWH_H] << MOVE_16_STEP) | 
   dcf7a:	4a03      	ldr	r2, [pc, #12]	; (dcf88 <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x90>)
   dcf7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dcf80:	6013      	str	r3, [r2, #0]
                break;
   dcf82:	e7d1      	b.n	dcf28 <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x30>
   dcf84:	2003e224 	.word	0x2003e224
   dcf88:	2003db18 	.word	0x2003db18

000dcf8c <_ZN11GXGenerator25extractGridDerInstMetricsEh>:

void GXGenerator::extractGridDerInstMetrics(uint8_t query_unit)
{
   dcf8c:	b430      	push	{r4, r5}
    if(gen_controller_type == DSE_857)
   dcf8e:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
   dcf92:	2b02      	cmp	r3, #2
   dcf94:	d102      	bne.n	dcf9c <_ZN11GXGenerator25extractGridDerInstMetricsEh+0x10>
    {
        switch (query_unit)
   dcf96:	b139      	cbz	r1, dcfa8 <_ZN11GXGenerator25extractGridDerInstMetricsEh+0x1c>
   dcf98:	2901      	cmp	r1, #1
   dcf9a:	d013      	beq.n	dcfc4 <_ZN11GXGenerator25extractGridDerInstMetricsEh+0x38>
            }
        }
    }

    memset(modbus_data_buffer, 0, sizeof(modbus_data_buffer));
}
   dcf9c:	bc30      	pop	{r4, r5}
    memset(modbus_data_buffer, 0, sizeof(modbus_data_buffer));
   dcf9e:	4816      	ldr	r0, [pc, #88]	; (dcff8 <_ZN11GXGenerator25extractGridDerInstMetricsEh+0x6c>)
   dcfa0:	223c      	movs	r2, #60	; 0x3c
   dcfa2:	2100      	movs	r1, #0
   dcfa4:	f008 bb84 	b.w	e56b0 <memset>
   dcfa8:	4b13      	ldr	r3, [pc, #76]	; (dcff8 <_ZN11GXGenerator25extractGridDerInstMetricsEh+0x6c>)
   dcfaa:	4814      	ldr	r0, [pc, #80]	; (dcffc <_ZN11GXGenerator25extractGridDerInstMetricsEh+0x70>)
                    extracted_modbus_databuff[itr] = ((modbus_data_buffer[dt_ref3] << MOVE_16_STEP) | 
   dcfac:	881c      	ldrh	r4, [r3, #0]
                                                       modbus_data_buffer[++dt_ref3]);
   dcfae:	885a      	ldrh	r2, [r3, #2]
   dcfb0:	3101      	adds	r1, #1
                    extracted_modbus_databuff[itr] = ((modbus_data_buffer[dt_ref3] << MOVE_16_STEP) | 
   dcfb2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
                for(uint8_t itr = TOTAL_GRID_KW; itr <= GRID_TOTAL_VA; itr++)
   dcfb6:	2905      	cmp	r1, #5
                    extracted_modbus_databuff[itr] = ((modbus_data_buffer[dt_ref3] << MOVE_16_STEP) | 
   dcfb8:	f840 2b04 	str.w	r2, [r0], #4
                for(uint8_t itr = TOTAL_GRID_KW; itr <= GRID_TOTAL_VA; itr++)
   dcfbc:	f103 0304 	add.w	r3, r3, #4
   dcfc0:	d1f4      	bne.n	dcfac <_ZN11GXGenerator25extractGridDerInstMetricsEh+0x20>
   dcfc2:	e7eb      	b.n	dcf9c <_ZN11GXGenerator25extractGridDerInstMetricsEh+0x10>
   dcfc4:	490c      	ldr	r1, [pc, #48]	; (dcff8 <_ZN11GXGenerator25extractGridDerInstMetricsEh+0x6c>)
                    extracted_modbus_databuff[itr] = ((modbus_data_buffer[dt_ref4] << MOVE_16_STEP) | 
   dcfc6:	4b0d      	ldr	r3, [pc, #52]	; (dcffc <_ZN11GXGenerator25extractGridDerInstMetricsEh+0x70>)
        switch (query_unit)
   dcfc8:	2005      	movs	r0, #5
   dcfca:	460a      	mov	r2, r1
                    extracted_modbus_databuff[itr] = ((modbus_data_buffer[dt_ref4] << MOVE_16_STEP) | 
   dcfcc:	880d      	ldrh	r5, [r1, #0]
                                                       modbus_data_buffer[++dt_ref4]);
   dcfce:	884c      	ldrh	r4, [r1, #2]
                    extracted_modbus_databuff[itr] = ((modbus_data_buffer[dt_ref4] << MOVE_16_STEP) | 
   dcfd0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   dcfd4:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
                for(uint8_t itr = GRID_L1_VAR; itr <= GRID_TOTAL_VAR; itr++)
   dcfd8:	3001      	adds	r0, #1
   dcfda:	2809      	cmp	r0, #9
   dcfdc:	f101 0104 	add.w	r1, r1, #4
   dcfe0:	d1f4      	bne.n	dcfcc <_ZN11GXGenerator25extractGridDerInstMetricsEh+0x40>
                    extracted_modbus_databuff[itr] = modbus_data_buffer[dt_ref4++];
   dcfe2:	8a11      	ldrh	r1, [r2, #16]
   dcfe4:	6259      	str	r1, [r3, #36]	; 0x24
   dcfe6:	8a51      	ldrh	r1, [r2, #18]
   dcfe8:	6299      	str	r1, [r3, #40]	; 0x28
   dcfea:	8a91      	ldrh	r1, [r2, #20]
   dcfec:	62d9      	str	r1, [r3, #44]	; 0x2c
   dcfee:	8ad1      	ldrh	r1, [r2, #22]
                extracted_modbus_databuff[PERCENT_OF_GRID_POWER] = modbus_data_buffer[DSE_GRID_PERCENT_FULL_POWER];
   dcff0:	8b12      	ldrh	r2, [r2, #24]
                    extracted_modbus_databuff[itr] = modbus_data_buffer[dt_ref4++];
   dcff2:	6319      	str	r1, [r3, #48]	; 0x30
                extracted_modbus_databuff[PERCENT_OF_GRID_POWER] = modbus_data_buffer[DSE_GRID_PERCENT_FULL_POWER];
   dcff4:	635a      	str	r2, [r3, #52]	; 0x34
                break;
   dcff6:	e7d1      	b.n	dcf9c <_ZN11GXGenerator25extractGridDerInstMetricsEh+0x10>
   dcff8:	2003e224 	.word	0x2003e224
   dcffc:	2003db18 	.word	0x2003db18

000dd000 <_ZN11GXGenerator18updateEngineStatusEh>:

void GXGenerator::updateEngineStatus(uint8_t read_error)
{
    gen_engine_state = modbus_data_buffer[ENGSTATE_BUFF_INDX] > 497 ? ENGINE_RUNNING : ENGINE_AT_REST;
   dd000:	4b08      	ldr	r3, [pc, #32]	; (dd024 <_ZN11GXGenerator18updateEngineStatusEh+0x24>)
   dd002:	881b      	ldrh	r3, [r3, #0]
   dd004:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
   dd008:	bf2c      	ite	cs
   dd00a:	2303      	movcs	r3, #3
   dd00c:	2300      	movcc	r3, #0

    if(read_error > 0) gen_engine_state = ENGINE_STATE_UNKNOWN;
   dd00e:	b931      	cbnz	r1, dd01e <_ZN11GXGenerator18updateEngineStatusEh+0x1e>
   dd010:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66

    memset(modbus_data_buffer, 0, sizeof(modbus_data_buffer));
   dd014:	223c      	movs	r2, #60	; 0x3c
   dd016:	4803      	ldr	r0, [pc, #12]	; (dd024 <_ZN11GXGenerator18updateEngineStatusEh+0x24>)
   dd018:	2100      	movs	r1, #0
   dd01a:	f008 bb49 	b.w	e56b0 <memset>
    if(read_error > 0) gen_engine_state = ENGINE_STATE_UNKNOWN;
   dd01e:	2305      	movs	r3, #5
   dd020:	e7f6      	b.n	dd010 <_ZN11GXGenerator18updateEngineStatusEh+0x10>
   dd022:	bf00      	nop
   dd024:	2003e224 	.word	0x2003e224

000dd028 <_ZN11GXGenerator16derInstAvailableEv>:
}

bool GXGenerator::derInstAvailable()
{
    if (gen_controller_type == DSE_857)
   dd028:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
   dd02c:	2802      	cmp	r0, #2
   dd02e:	d003      	beq.n	dd038 <_ZN11GXGenerator16derInstAvailableEv+0x10>
        return true;
    
    if (gen_controller_type == APM_303)
   dd030:	1f03      	subs	r3, r0, #4
   dd032:	4258      	negs	r0, r3
   dd034:	4158      	adcs	r0, r3
   dd036:	4770      	bx	lr
        return true;
   dd038:	2001      	movs	r0, #1
        return true;

    return false;  
}
   dd03a:	4770      	bx	lr

000dd03c <_ZN11GXGenerator12getBaudIndexEv>:

uint8_t GXGenerator::getBaudIndex()
{
    return baudrate_index;
}
   dd03c:	f890 0065 	ldrb.w	r0, [r0, #101]	; 0x65
   dd040:	4770      	bx	lr

000dd042 <_ZN11GXGenerator15getEngineStatusEv>:

uint8_t GXGenerator::getEngineStatus()
{
    return gen_engine_state;
}
   dd042:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
   dd046:	4770      	bx	lr

000dd048 <_ZN11GXGenerator13setGenToStartEv>:

int8_t GXGenerator::setGenToStart()
{
   dd048:	b510      	push	{r4, lr}
    // Return immediately if the engine is already RUNING or it's state could not be determined.
    if((gen_engine_state == ENGINE_RUNNING) || 
   dd04a:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
   dd04e:	2b03      	cmp	r3, #3
{
   dd050:	4604      	mov	r4, r0
    if((gen_engine_state == ENGINE_RUNNING) || 
   dd052:	d001      	beq.n	dd058 <_ZN11GXGenerator13setGenToStartEv+0x10>
   dd054:	2b05      	cmp	r3, #5
   dd056:	d101      	bne.n	dd05c <_ZN11GXGenerator13setGenToStartEv+0x14>
       (gen_engine_state == ENGINE_STATE_UNKNOWN)) return gen_engine_state;
   dd058:	b258      	sxtb	r0, r3
        }
    }

    // Return the ID of the specific relay that was SWITCHED ON
    return (static_cast<int8_t>(assigned_gx_relay));
}
   dd05a:	bd10      	pop	{r4, pc}
    switch (assigned_gx_relay)
   dd05c:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
   dd060:	2a01      	cmp	r2, #1
   dd062:	d005      	beq.n	dd070 <_ZN11GXGenerator13setGenToStartEv+0x28>
   dd064:	2a02      	cmp	r2, #2
   dd066:	d00a      	beq.n	dd07e <_ZN11GXGenerator13setGenToStartEv+0x36>
   dd068:	b932      	cbnz	r2, dd078 <_ZN11GXGenerator13setGenToStartEv+0x30>
   dd06a:	f06f 000a 	mvn.w	r0, #10
   dd06e:	e7f4      	b.n	dd05a <_ZN11GXGenerator13setGenToStartEv+0x12>
            RLY1(HIGH);
   dd070:	2107      	movs	r1, #7
            RLY2(HIGH);
   dd072:	4804      	ldr	r0, [pc, #16]	; (dd084 <_ZN11GXGenerator13setGenToStartEv+0x3c>)
   dd074:	f003 fd8f 	bl	e0b96 <_ZN7TCA953512digitalWriteEtb>
    return (static_cast<int8_t>(assigned_gx_relay));
   dd078:	f994 0067 	ldrsb.w	r0, [r4, #103]	; 0x67
   dd07c:	e7ed      	b.n	dd05a <_ZN11GXGenerator13setGenToStartEv+0x12>
            RLY2(HIGH);
   dd07e:	2201      	movs	r2, #1
   dd080:	2106      	movs	r1, #6
   dd082:	e7f6      	b.n	dd072 <_ZN11GXGenerator13setGenToStartEv+0x2a>
   dd084:	2003e48a 	.word	0x2003e48a

000dd088 <_ZN11GXGenerator12setGenToStopEv>:

int8_t GXGenerator::setGenToStop()
{
   dd088:	b510      	push	{r4, lr}
   dd08a:	4604      	mov	r4, r0
    // Return immediately if the engine is already AT-REST or it's state could not be determined.
    if((gen_engine_state == ENGINE_AT_REST) || 
   dd08c:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
   dd090:	b108      	cbz	r0, dd096 <_ZN11GXGenerator12setGenToStopEv+0xe>
   dd092:	2805      	cmp	r0, #5
   dd094:	d101      	bne.n	dd09a <_ZN11GXGenerator12setGenToStopEv+0x12>
       (gen_engine_state == ENGINE_STATE_UNKNOWN)) return gen_engine_state;
   dd096:	b240      	sxtb	r0, r0
        }
    }

    // Return the ID of the specific relay that was SWITCHED OFF
    return (static_cast<int8_t>(assigned_gx_relay));
}
   dd098:	bd10      	pop	{r4, pc}
    switch (assigned_gx_relay)
   dd09a:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
   dd09e:	2b01      	cmp	r3, #1
   dd0a0:	d005      	beq.n	dd0ae <_ZN11GXGenerator12setGenToStopEv+0x26>
   dd0a2:	2b02      	cmp	r3, #2
   dd0a4:	d00b      	beq.n	dd0be <_ZN11GXGenerator12setGenToStopEv+0x36>
   dd0a6:	b93b      	cbnz	r3, dd0b8 <_ZN11GXGenerator12setGenToStopEv+0x30>
   dd0a8:	f06f 000a 	mvn.w	r0, #10
   dd0ac:	e7f4      	b.n	dd098 <_ZN11GXGenerator12setGenToStopEv+0x10>
            RLY1(LOW);
   dd0ae:	2200      	movs	r2, #0
   dd0b0:	2107      	movs	r1, #7
            RLY2(LOW);
   dd0b2:	4804      	ldr	r0, [pc, #16]	; (dd0c4 <_ZN11GXGenerator12setGenToStopEv+0x3c>)
   dd0b4:	f003 fd6f 	bl	e0b96 <_ZN7TCA953512digitalWriteEtb>
    return (static_cast<int8_t>(assigned_gx_relay));
   dd0b8:	f994 0067 	ldrsb.w	r0, [r4, #103]	; 0x67
   dd0bc:	e7ec      	b.n	dd098 <_ZN11GXGenerator12setGenToStopEv+0x10>
            RLY2(LOW);
   dd0be:	2200      	movs	r2, #0
   dd0c0:	2106      	movs	r1, #6
   dd0c2:	e7f6      	b.n	dd0b2 <_ZN11GXGenerator12setGenToStopEv+0x2a>
   dd0c4:	2003e48a 	.word	0x2003e48a

000dd0c8 <_ZN11GXGeneratorD1Ev>:

GXGenerator::~GXGenerator(){}
   dd0c8:	b510      	push	{r4, lr}
   dd0ca:	4604      	mov	r4, r0
   dd0cc:	30ca      	adds	r0, #202	; 0xca
   dd0ce:	f7fc f842 	bl	d9156 <_ZN21Apm303GensetQueryBankD1Ev>
   dd0d2:	f104 00b6 	add.w	r0, r4, #182	; 0xb6
   dd0d6:	f7fc f98d 	bl	d93f4 <_ZN20Dcp10GensetQueryBankD1Ev>
   dd0da:	f104 0082 	add.w	r0, r4, #130	; 0x82
   dd0de:	f7fc faad 	bl	d963c <_ZN18DseGensetQueryBankD1Ev>
   dd0e2:	f104 006e 	add.w	r0, r4, #110	; 0x6e
   dd0e6:	f000 f9d3 	bl	dd490 <_ZN22Pcc1302GensetQueryBankD1Ev>
   dd0ea:	4620      	mov	r0, r4
   dd0ec:	bd10      	pop	{r4, pc}

000dd0ee <_ZN3LEDC1Eh>:
#include "LED.h"

// Extern port expander
extern TCA9535 portExpander;

LED::LED(uint8_t led_pin_n)
   dd0ee:	2200      	movs	r2, #0
   dd0f0:	6042      	str	r2, [r0, #4]
{
    led_pin = led_pin_n;
   dd0f2:	7001      	strb	r1, [r0, #0]
    led_mode = LED_OFF;
   dd0f4:	7202      	strb	r2, [r0, #8]
    led_state = LOW;
   dd0f6:	7042      	strb	r2, [r0, #1]
    counter = 0;
   dd0f8:	7082      	strb	r2, [r0, #2]
}
   dd0fa:	4770      	bx	lr

000dd0fc <_Z9updateLEDhh>:
      counter++;
  }  
}

void updateLED(uint8_t led, uint8_t state){
    switch (led)
   dd0fc:	2802      	cmp	r0, #2
void updateLED(uint8_t led, uint8_t state){
   dd0fe:	460a      	mov	r2, r1
    switch (led)
   dd100:	d009      	beq.n	dd116 <_Z9updateLEDhh+0x1a>
   dd102:	2803      	cmp	r0, #3
   dd104:	d00b      	beq.n	dd11e <_Z9updateLEDhh+0x22>
   dd106:	2801      	cmp	r0, #1
   dd108:	d10d      	bne.n	dd126 <_Z9updateLEDhh+0x2a>
    {
    case POWER_LED:
        LED1(state);
   dd10a:	b101      	cbz	r1, dd10e <_Z9updateLEDhh+0x12>
   dd10c:	4602      	mov	r2, r0
   dd10e:	210b      	movs	r1, #11
        break;
    case CLOUD_LED:
        LED2(state);
        break;
    case COMM_LED:
        LED3(state);
   dd110:	4805      	ldr	r0, [pc, #20]	; (dd128 <_Z9updateLEDhh+0x2c>)
   dd112:	f003 bd40 	b.w	e0b96 <_ZN7TCA953512digitalWriteEtb>
        LED2(state);
   dd116:	b101      	cbz	r1, dd11a <_Z9updateLEDhh+0x1e>
   dd118:	2201      	movs	r2, #1
   dd11a:	210a      	movs	r1, #10
   dd11c:	e7f8      	b.n	dd110 <_Z9updateLEDhh+0x14>
        LED3(state);
   dd11e:	b101      	cbz	r1, dd122 <_Z9updateLEDhh+0x26>
   dd120:	2201      	movs	r2, #1
   dd122:	2109      	movs	r1, #9
   dd124:	e7f4      	b.n	dd110 <_Z9updateLEDhh+0x14>
        break;
    default:
        break;
    }
   dd126:	4770      	bx	lr
   dd128:	2003e48a 	.word	0x2003e48a

000dd12c <_ZN3LED8ledBlinkEi>:
{
   dd12c:	b538      	push	{r3, r4, r5, lr}
   dd12e:	4604      	mov	r4, r0
   dd130:	460d      	mov	r5, r1
   dd132:	f003 fdf7 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
  if (currentMillis - previousMillis >= blink_interval)
   dd136:	6863      	ldr	r3, [r4, #4]
   dd138:	1ac3      	subs	r3, r0, r3
   dd13a:	42ab      	cmp	r3, r5
   dd13c:	d310      	bcc.n	dd160 <_ZN3LED8ledBlinkEi+0x34>
    if (led_state == LOW) 
   dd13e:	7863      	ldrb	r3, [r4, #1]
    previousMillis = currentMillis;
   dd140:	6060      	str	r0, [r4, #4]
    if (led_state == LOW) 
   dd142:	b973      	cbnz	r3, dd162 <_ZN3LED8ledBlinkEi+0x36>
      led_state = HIGH;
   dd144:	2301      	movs	r3, #1
      led_state = LOW;
   dd146:	7063      	strb	r3, [r4, #1]
    updateLED(led_pin, led_state);
   dd148:	7861      	ldrb	r1, [r4, #1]
   dd14a:	7820      	ldrb	r0, [r4, #0]
   dd14c:	f7ff ffd6 	bl	dd0fc <_Z9updateLEDhh>
    if(counter > MAX_COUNTER_VAL && blink_interval == LED_ERROR_INTERVAL){
   dd150:	78a3      	ldrb	r3, [r4, #2]
   dd152:	2b07      	cmp	r3, #7
   dd154:	d90e      	bls.n	dd174 <_ZN3LED8ledBlinkEi+0x48>
   dd156:	2dfa      	cmp	r5, #250	; 0xfa
   dd158:	d10c      	bne.n	dd174 <_ZN3LED8ledBlinkEi+0x48>
      counter = 0;
   dd15a:	2300      	movs	r3, #0
   dd15c:	70a3      	strb	r3, [r4, #2]
      led_mode = LED_OFF;
   dd15e:	7223      	strb	r3, [r4, #8]
}
   dd160:	bd38      	pop	{r3, r4, r5, pc}
    else if(led_state == HIGH)
   dd162:	2b01      	cmp	r3, #1
   dd164:	d101      	bne.n	dd16a <_ZN3LED8ledBlinkEi+0x3e>
      led_state = LOW;
   dd166:	2300      	movs	r3, #0
   dd168:	e7ed      	b.n	dd146 <_ZN3LED8ledBlinkEi+0x1a>
      Log.info("Led state is invalid");
   dd16a:	4904      	ldr	r1, [pc, #16]	; (dd17c <_ZN3LED8ledBlinkEi+0x50>)
   dd16c:	4804      	ldr	r0, [pc, #16]	; (dd180 <_ZN3LED8ledBlinkEi+0x54>)
   dd16e:	f7fc fca3 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
   dd172:	e7e9      	b.n	dd148 <_ZN3LED8ledBlinkEi+0x1c>
      counter++;
   dd174:	3301      	adds	r3, #1
   dd176:	70a3      	strb	r3, [r4, #2]
}
   dd178:	e7f2      	b.n	dd160 <_ZN3LED8ledBlinkEi+0x34>
   dd17a:	bf00      	nop
   dd17c:	000e796a 	.word	0x000e796a
   dd180:	2003e61c 	.word	0x2003e61c

000dd184 <_ZN3LED10ledRoutineEv>:
{
   dd184:	b510      	push	{r4, lr}
   dd186:	7a03      	ldrb	r3, [r0, #8]
   dd188:	4604      	mov	r4, r0
   dd18a:	2b03      	cmp	r3, #3
   dd18c:	d809      	bhi.n	dd1a2 <_ZN3LED10ledRoutineEv+0x1e>
   dd18e:	e8df f003 	tbb	[pc, r3]
   dd192:	0209      	.short	0x0209
   dd194:	150f      	.short	0x150f
    updateLED(led_pin, 1);
   dd196:	7800      	ldrb	r0, [r0, #0]
   dd198:	2101      	movs	r1, #1
   dd19a:	f7ff ffaf 	bl	dd0fc <_Z9updateLEDhh>
    led_state = HIGH;
   dd19e:	2301      	movs	r3, #1
    led_state = LOW;
   dd1a0:	7063      	strb	r3, [r4, #1]
}
   dd1a2:	bd10      	pop	{r4, pc}
    updateLED(led_pin, 0);
   dd1a4:	7800      	ldrb	r0, [r0, #0]
   dd1a6:	2100      	movs	r1, #0
   dd1a8:	f7ff ffa8 	bl	dd0fc <_Z9updateLEDhh>
    led_state = LOW;
   dd1ac:	2300      	movs	r3, #0
   dd1ae:	e7f7      	b.n	dd1a0 <_ZN3LED10ledRoutineEv+0x1c>
    ledBlink(LED_INTERVAL);
   dd1b0:	2164      	movs	r1, #100	; 0x64
    ledBlink(LED_ERROR_INTERVAL);
   dd1b2:	4620      	mov	r0, r4
}
   dd1b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ledBlink(LED_ERROR_INTERVAL);
   dd1b8:	f7ff bfb8 	b.w	dd12c <_ZN3LED8ledBlinkEi>
   dd1bc:	21fa      	movs	r1, #250	; 0xfa
   dd1be:	e7f8      	b.n	dd1b2 <_ZN3LED10ledRoutineEv+0x2e>

000dd1c0 <_ZN5spark10LogHandler5writeEPKcj>:
}
   dd1c0:	4770      	bx	lr

000dd1c2 <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   dd1c2:	6a00      	ldr	r0, [r0, #32]
   dd1c4:	6803      	ldr	r3, [r0, #0]
   dd1c6:	68db      	ldr	r3, [r3, #12]
   dd1c8:	4718      	bx	r3
	...

000dd1cc <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   dd1cc:	4b0a      	ldr	r3, [pc, #40]	; (dd1f8 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   dd1ce:	b510      	push	{r4, lr}
   dd1d0:	4604      	mov	r4, r0
   dd1d2:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   dd1d4:	f005 fac6 	bl	e2764 <_ZN5spark10LogManager8instanceEv>
   dd1d8:	4621      	mov	r1, r4
   dd1da:	f005 fcc8 	bl	e2b6e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   dd1de:	f007 f8c7 	bl	e4370 <_Z16_fetch_usbserialv>
   dd1e2:	f007 f8b9 	bl	e4358 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   dd1e6:	4620      	mov	r0, r4
   dd1e8:	4b04      	ldr	r3, [pc, #16]	; (dd1fc <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   dd1ea:	f840 3b04 	str.w	r3, [r0], #4
   dd1ee:	f005 fbab 	bl	e2948 <_ZN5spark6detail9LogFilterD1Ev>
    }
   dd1f2:	4620      	mov	r0, r4
   dd1f4:	bd10      	pop	{r4, pc}
   dd1f6:	bf00      	nop
   dd1f8:	000e79c0 	.word	0x000e79c0
   dd1fc:	000e79a8 	.word	0x000e79a8

000dd200 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   dd200:	b510      	push	{r4, lr}
   dd202:	4604      	mov	r4, r0
    }
   dd204:	f7ff ffe2 	bl	dd1cc <_ZN5spark16SerialLogHandlerD1Ev>
   dd208:	4620      	mov	r0, r4
   dd20a:	2124      	movs	r1, #36	; 0x24
   dd20c:	f007 fb3b 	bl	e4886 <_ZdlPvj>
   dd210:	4620      	mov	r0, r4
   dd212:	bd10      	pop	{r4, pc}

000dd214 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   dd214:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   dd216:	e9d0 5300 	ldrd	r5, r3, [r0]
   dd21a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   dd21c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   dd21e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   dd222:	42ae      	cmp	r6, r5
   dd224:	d004      	beq.n	dd230 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   dd226:	4628      	mov	r0, r5
   dd228:	f006 fca6 	bl	e3b78 <_ZN6StringD1Ev>
   dd22c:	3514      	adds	r5, #20
   dd22e:	e7f8      	b.n	dd222 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   dd230:	6820      	ldr	r0, [r4, #0]
   dd232:	f004 f88d 	bl	e1350 <free>
    AllocatorT::free(data_);
}
   dd236:	4620      	mov	r0, r4
   dd238:	bd70      	pop	{r4, r5, r6, pc}

000dd23a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   dd23a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        if (n > 0) {
   dd23e:	f1b1 0800 	subs.w	r8, r1, #0
    bool realloc(int n) {
   dd242:	4607      	mov	r7, r0
        if (n > 0) {
   dd244:	dd35      	ble.n	dd2b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x78>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   dd246:	f04f 0914 	mov.w	r9, #20
    return ::malloc(size);
   dd24a:	fb09 f008 	mul.w	r0, r9, r8
   dd24e:	f004 f877 	bl	e1340 <malloc>
            if (!d) {
   dd252:	4605      	mov	r5, r0
   dd254:	b3a8      	cbz	r0, dd2c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x88>
            move(d, data_, data_ + size_);
   dd256:	e9d7 4600 	ldrd	r4, r6, [r7]
        if (dest > p && dest < end) {
   dd25a:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   dd25c:	fb09 4606 	mla	r6, r9, r6, r4
        if (dest > p && dest < end) {
   dd260:	d215      	bcs.n	dd28e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x54>
   dd262:	4286      	cmp	r6, r0
   dd264:	d914      	bls.n	dd290 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x56>
            --end;
   dd266:	3e14      	subs	r6, #20
            dest += end - p - 1;
   dd268:	f1a4 0914 	sub.w	r9, r4, #20
   dd26c:	1b34      	subs	r4, r6, r4
   dd26e:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   dd270:	45b1      	cmp	r9, r6
   dd272:	d01f      	beq.n	dd2b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x7a>
                new(dest) T(std::move(*end));
   dd274:	b12c      	cbz	r4, dd282 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x48>
   dd276:	4631      	mov	r1, r6
   dd278:	4620      	mov	r0, r4
   dd27a:	f006 fcf9 	bl	e3c70 <_ZN6StringC1EOS_>
   dd27e:	7c33      	ldrb	r3, [r6, #16]
   dd280:	7423      	strb	r3, [r4, #16]
   dd282:	4630      	mov	r0, r6
   dd284:	f006 fc78 	bl	e3b78 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   dd288:	3e14      	subs	r6, #20
   dd28a:	3c14      	subs	r4, #20
   dd28c:	e7f0      	b.n	dd270 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x36>
        } else if (dest != p) {
   dd28e:	d011      	beq.n	dd2b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x7a>
   dd290:	46a9      	mov	r9, r5
            for (; p != end; ++p, ++dest) {
   dd292:	42a6      	cmp	r6, r4
   dd294:	d00e      	beq.n	dd2b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x7a>
   dd296:	4621      	mov	r1, r4
   dd298:	4648      	mov	r0, r9
   dd29a:	f006 fce9 	bl	e3c70 <_ZN6StringC1EOS_>
   dd29e:	7c23      	ldrb	r3, [r4, #16]
   dd2a0:	f889 3010 	strb.w	r3, [r9, #16]
   dd2a4:	4620      	mov	r0, r4
   dd2a6:	f006 fc67 	bl	e3b78 <_ZN6StringD1Ev>
   dd2aa:	3414      	adds	r4, #20
   dd2ac:	f109 0914 	add.w	r9, r9, #20
   dd2b0:	e7ef      	b.n	dd292 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x58>
        T* d = nullptr;
   dd2b2:	2500      	movs	r5, #0
    ::free(ptr);
   dd2b4:	6838      	ldr	r0, [r7, #0]
   dd2b6:	f004 f84b 	bl	e1350 <free>
        data_ = d;
   dd2ba:	603d      	str	r5, [r7, #0]
        capacity_ = n;
   dd2bc:	f8c7 8008 	str.w	r8, [r7, #8]
        return true;
   dd2c0:	2001      	movs	r0, #1
    }
   dd2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000dd2c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   dd2c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   dd2ca:	2300      	movs	r3, #0
   dd2cc:	e9c0 3300 	strd	r3, r3, [r0]
   dd2d0:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   dd2d2:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   dd2d4:	6849      	ldr	r1, [r1, #4]
   dd2d6:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   dd2d8:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   dd2da:	dd17      	ble.n	dd30c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x46>
   dd2dc:	f7ff ffad 	bl	dd23a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   dd2e0:	b1a0      	cbz	r0, dd30c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x46>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   dd2e2:	e9d5 6300 	ldrd	r6, r3, [r5]
   dd2e6:	f04f 0814 	mov.w	r8, #20
   dd2ea:	6827      	ldr	r7, [r4, #0]
   dd2ec:	fb08 6803 	mla	r8, r8, r3, r6
        for (; it != end; ++it, ++dest) {
   dd2f0:	45b0      	cmp	r8, r6
   dd2f2:	d009      	beq.n	dd308 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x42>
            new(dest) T(*it);
   dd2f4:	b12f      	cbz	r7, dd302 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x3c>
   dd2f6:	4631      	mov	r1, r6
   dd2f8:	4638      	mov	r0, r7
   dd2fa:	f006 fcd3 	bl	e3ca4 <_ZN6StringC1ERKS_>
   dd2fe:	7c33      	ldrb	r3, [r6, #16]
   dd300:	743b      	strb	r3, [r7, #16]
        for (; it != end; ++it, ++dest) {
   dd302:	3614      	adds	r6, #20
   dd304:	3714      	adds	r7, #20
   dd306:	e7f3      	b.n	dd2f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x2a>
        size_ = vector.size_;
   dd308:	686b      	ldr	r3, [r5, #4]
   dd30a:	6063      	str	r3, [r4, #4]
}
   dd30c:	4620      	mov	r0, r4
   dd30e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000dd314 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL>:
SerialLogHandler logHandler(LOG_LEVEL_INFO, { // Logging level for non-application messages
    { "app", DEFAULT_LOG_LEVEL }, // Default logging level for all application messages
    { SHYFT_STATE_LOGGER_NAME, LOG_LEVEL_INFO  }, // Logging level for SHYFTStateSync
    { SHYFT_SPIFFS_LOGGER_NAME, LOG_LEVEL_INFO}, // Logging level for GX SPIFFS operations
    { "app.spiffs", LOG_LEVEL_WARN } // To disable spiffs internal info and trace messages, set to WARN
});
   dd314:	b5f0      	push	{r4, r5, r6, r7, lr}
   dd316:	b0a1      	sub	sp, #132	; 0x84
   dd318:	4b3c      	ldr	r3, [pc, #240]	; (dd40c <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0xf8>)
        level_(level) {
   dd31a:	493d      	ldr	r1, [pc, #244]	; (dd410 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0xfc>)
   dd31c:	781c      	ldrb	r4, [r3, #0]
   dd31e:	ae0c      	add	r6, sp, #48	; 0x30
   dd320:	4630      	mov	r0, r6
   dd322:	f006 fc74 	bl	e3c0e <_ZN6StringC1EPKc>
   dd326:	493b      	ldr	r1, [pc, #236]	; (dd414 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x100>)
   dd328:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
   dd32c:	a811      	add	r0, sp, #68	; 0x44
   dd32e:	f006 fc6e 	bl	e3c0e <_ZN6StringC1EPKc>
   dd332:	241e      	movs	r4, #30
   dd334:	4938      	ldr	r1, [pc, #224]	; (dd418 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x104>)
   dd336:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
   dd33a:	a816      	add	r0, sp, #88	; 0x58
   dd33c:	f006 fc67 	bl	e3c0e <_ZN6StringC1EPKc>
   dd340:	4936      	ldr	r1, [pc, #216]	; (dd41c <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x108>)
   dd342:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
   dd346:	a81b      	add	r0, sp, #108	; 0x6c
   dd348:	f006 fc61 	bl	e3c0e <_ZN6StringC1EPKc>
   dd34c:	2328      	movs	r3, #40	; 0x28
   dd34e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
    if (n > 0 && realloc(n)) {
   dd352:	2104      	movs	r1, #4
        capacity_(0) {
   dd354:	2300      	movs	r3, #0
    if (n > 0 && realloc(n)) {
   dd356:	4668      	mov	r0, sp
        capacity_(0) {
   dd358:	e9cd 3300 	strd	r3, r3, [sp]
   dd35c:	9302      	str	r3, [sp, #8]
    if (n > 0 && realloc(n)) {
   dd35e:	f7ff ff6c 	bl	dd23a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   dd362:	b188      	cbz	r0, dd388 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x74>
        copy(data_, values.begin(), values.end());
   dd364:	9c00      	ldr	r4, [sp, #0]
   dd366:	4635      	mov	r5, r6
   dd368:	f104 0750 	add.w	r7, r4, #80	; 0x50
            new(dest) T(*p);
   dd36c:	b12c      	cbz	r4, dd37a <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x66>
class LogCategoryFilter {
   dd36e:	4629      	mov	r1, r5
   dd370:	4620      	mov	r0, r4
   dd372:	f006 fc97 	bl	e3ca4 <_ZN6StringC1ERKS_>
   dd376:	7c2b      	ldrb	r3, [r5, #16]
   dd378:	7423      	strb	r3, [r4, #16]
        for (; p != end; ++p, ++dest) {
   dd37a:	3414      	adds	r4, #20
   dd37c:	42bc      	cmp	r4, r7
   dd37e:	f105 0514 	add.w	r5, r5, #20
   dd382:	d1f3      	bne.n	dd36c <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x58>
        size_ = n;
   dd384:	2304      	movs	r3, #4
   dd386:	9301      	str	r3, [sp, #4]
            StreamLogHandler(Serial, level, filters) {
   dd388:	f006 fff2 	bl	e4370 <_Z16_fetch_usbserialv>
   dd38c:	4669      	mov	r1, sp
   dd38e:	4605      	mov	r5, r0
   dd390:	a803      	add	r0, sp, #12
        filter_(level, filters) {
   dd392:	4c23      	ldr	r4, [pc, #140]	; (dd420 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x10c>)
   dd394:	f7ff ff97 	bl	dd2c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   dd398:	a903      	add	r1, sp, #12
   dd39a:	a806      	add	r0, sp, #24
   dd39c:	f7ff ff93 	bl	dd2c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   dd3a0:	4b20      	ldr	r3, [pc, #128]	; (dd424 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x110>)
   dd3a2:	6023      	str	r3, [r4, #0]
   dd3a4:	a906      	add	r1, sp, #24
   dd3a6:	a809      	add	r0, sp, #36	; 0x24
   dd3a8:	f7ff ff8d 	bl	dd2c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   dd3ac:	aa09      	add	r2, sp, #36	; 0x24
   dd3ae:	211e      	movs	r1, #30
   dd3b0:	1d20      	adds	r0, r4, #4
   dd3b2:	f005 fd2f 	bl	e2e14 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   dd3b6:	a809      	add	r0, sp, #36	; 0x24
   dd3b8:	f7ff ff2c 	bl	dd214 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   dd3bc:	a806      	add	r0, sp, #24
   dd3be:	f7ff ff29 	bl	dd214 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   dd3c2:	4b19      	ldr	r3, [pc, #100]	; (dd428 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x114>)
   dd3c4:	6023      	str	r3, [r4, #0]
   dd3c6:	6225      	str	r5, [r4, #32]
   dd3c8:	a803      	add	r0, sp, #12
   dd3ca:	f7ff ff23 	bl	dd214 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   dd3ce:	4b17      	ldr	r3, [pc, #92]	; (dd42c <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x118>)
   dd3d0:	6023      	str	r3, [r4, #0]
        Serial.begin();
   dd3d2:	f006 ffcd 	bl	e4370 <_Z16_fetch_usbserialv>
   dd3d6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   dd3da:	f006 ffb9 	bl	e4350 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   dd3de:	f005 f9c1 	bl	e2764 <_ZN5spark10LogManager8instanceEv>
   dd3e2:	4621      	mov	r1, r4
   dd3e4:	f005 fca8 	bl	e2d38 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
   dd3e8:	4668      	mov	r0, sp
   dd3ea:	f7ff ff13 	bl	dd214 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   dd3ee:	ac20      	add	r4, sp, #128	; 0x80
   dd3f0:	3c14      	subs	r4, #20
class LogCategoryFilter {
   dd3f2:	4620      	mov	r0, r4
   dd3f4:	f006 fbc0 	bl	e3b78 <_ZN6StringD1Ev>
   dd3f8:	42b4      	cmp	r4, r6
   dd3fa:	d1f9      	bne.n	dd3f0 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0xdc>
SerialLogHandler logHandler(LOG_LEVEL_INFO, { // Logging level for non-application messages
   dd3fc:	4a0c      	ldr	r2, [pc, #48]	; (dd430 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x11c>)
   dd3fe:	490d      	ldr	r1, [pc, #52]	; (dd434 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x120>)
   dd400:	4807      	ldr	r0, [pc, #28]	; (dd420 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x10c>)
   dd402:	f007 fa3b 	bl	e487c <__aeabi_atexit>
});
   dd406:	b021      	add	sp, #132	; 0x84
   dd408:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dd40a:	bf00      	nop
   dd40c:	2003d6ec 	.word	0x2003d6ec
   dd410:	000e797f 	.word	0x000e797f
   dd414:	000e7983 	.word	0x000e7983
   dd418:	000e78e3 	.word	0x000e78e3
   dd41c:	000e7993 	.word	0x000e7993
   dd420:	2003e260 	.word	0x2003e260
   dd424:	000e79a8 	.word	0x000e79a8
   dd428:	000e88b0 	.word	0x000e88b0
   dd42c:	000e79c0 	.word	0x000e79c0
   dd430:	2003d9f8 	.word	0x2003d9f8
   dd434:	000dd1cd 	.word	0x000dd1cd

000dd438 <_ZN22Pcc1302GensetQueryBankC1Ev>:

Pcc1302GensetQueryBank::Pcc1302GensetQueryBank()
{
    //******** DSE MAIN_DATA QUERY GROUP ********//

    pcc1302MainDataKey[GEN_QUERY1].start_addr = PCC1302_START_ADDR1;
   dd438:	2209      	movs	r2, #9
   dd43a:	8002      	strh	r2, [r0, #0]
    pcc1302MainDataKey[GEN_QUERY1].num_of_regs = PCC1302_NUM_OF_REGS1;
   dd43c:	2204      	movs	r2, #4
   dd43e:	8042      	strh	r2, [r0, #2]

    pcc1302MainDataKey[GEN_QUERY2].start_addr = PCC1302_START_ADDR2;
   dd440:	2244      	movs	r2, #68	; 0x44
   dd442:	8082      	strh	r2, [r0, #4]
    pcc1302MainDataKey[GEN_QUERY2].num_of_regs = PCC1302_NUM_OF_REGS2;
   dd444:	2203      	movs	r2, #3
   dd446:	80c2      	strh	r2, [r0, #6]

    //******** DSE BASIC_INSTRUMENTATION_DATA QUERY GROUP ********//

    pcc1302BasInstDataKey[GEN_QUERY1].start_addr = PCC1302_START_ADDR3;
   dd448:	2211      	movs	r2, #17
   dd44a:	8102      	strh	r2, [r0, #8]
    pcc1302BasInstDataKey[GEN_QUERY1].num_of_regs = PCC1302_NUM_OF_REGS3;
   dd44c:	220b      	movs	r2, #11
   dd44e:	8142      	strh	r2, [r0, #10]

    pcc1302BasInstDataKey[GEN_QUERY2].start_addr = PCC1302_START_ADDR4;
   dd450:	222b      	movs	r2, #43	; 0x2b
   dd452:	8182      	strh	r2, [r0, #12]
    pcc1302BasInstDataKey[GEN_QUERY2].num_of_regs = PCC1302_NUM_OF_REGS4;
   dd454:	2201      	movs	r2, #1
   dd456:	81c2      	strh	r2, [r0, #14]

    pcc1302BasInstDataKey[GEN_QUERY3].start_addr = PCC1302_START_ADDR5;
   dd458:	223c      	movs	r2, #60	; 0x3c
   dd45a:	8202      	strh	r2, [r0, #16]
    pcc1302BasInstDataKey[GEN_QUERY3].num_of_regs = PCC1302_NUM_OF_REGS5;
   dd45c:	2208      	movs	r2, #8
   dd45e:	8242      	strh	r2, [r0, #18]
}
   dd460:	4770      	bx	lr

000dd462 <_ZN22Pcc1302GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>:

void Pcc1302GensetQueryBank::getGenQueryKey(GeneratorDataSet gen_data_set, uint8_t gen_query_unit, 
                            GeneratorQueryKey *pcc1302Key)
{
  switch (gen_data_set)
   dd462:	2901      	cmp	r1, #1
   dd464:	d00a      	beq.n	dd47c <_ZN22Pcc1302GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x1a>
   dd466:	2903      	cmp	r1, #3
   dd468:	d00e      	beq.n	dd488 <_ZN22Pcc1302GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x26>
   dd46a:	b931      	cbnz	r1, dd47a <_ZN22Pcc1302GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x18>
  {
    case GEN_MAIN:
    {
      pcc1302Key->start_addr = pcc1302MainDataKey[gen_query_unit].start_addr;
   dd46c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
   dd470:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
   dd474:	801a      	strh	r2, [r3, #0]
      pcc1302Key->num_of_regs = pcc1302MainDataKey[gen_query_unit].num_of_regs;
   dd476:	884a      	ldrh	r2, [r1, #2]
    }

    case GEN_ENG_STATUS:
    {
      pcc1302Key->start_addr = PCC1302_ENGINE_STATE_ADDR;
      pcc1302Key->num_of_regs = NUM_OF_ENGSTATE_REGS;
   dd478:	805a      	strh	r2, [r3, #2]

      break;
    }
  }
}
   dd47a:	4770      	bx	lr
      pcc1302Key->start_addr = pcc1302BasInstDataKey[gen_query_unit].start_addr;
   dd47c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   dd480:	8902      	ldrh	r2, [r0, #8]
   dd482:	801a      	strh	r2, [r3, #0]
      pcc1302Key->num_of_regs = pcc1302BasInstDataKey[gen_query_unit].num_of_regs;
   dd484:	8942      	ldrh	r2, [r0, #10]
   dd486:	e7f7      	b.n	dd478 <_ZN22Pcc1302GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x16>
      pcc1302Key->start_addr = PCC1302_ENGINE_STATE_ADDR;
   dd488:	222b      	movs	r2, #43	; 0x2b
   dd48a:	801a      	strh	r2, [r3, #0]
      pcc1302Key->num_of_regs = NUM_OF_ENGSTATE_REGS;
   dd48c:	2201      	movs	r2, #1
   dd48e:	e7f3      	b.n	dd478 <_ZN22Pcc1302GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x16>

000dd490 <_ZN22Pcc1302GensetQueryBankD1Ev>:

Pcc1302GensetQueryBank::~Pcc1302GensetQueryBank(){}
   dd490:	4770      	bx	lr
   dd492:	0000      	movs	r0, r0
   dd494:	0000      	movs	r0, r0
	...

000dd498 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt>:

void formatGenDataCummins1302(GeneratorDataSet data_group, uint32_t *modbus_buffer, uint16_t *alarm_buffer)
{
   dd498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dd49a:	460d      	mov	r5, r1

  switch (data_group)
   dd49c:	b110      	cbz	r0, dd4a4 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0xc>
   dd49e:	2801      	cmp	r0, #1
   dd4a0:	d041      	beq.n	dd526 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0x8e>

      break;
    }
  }

}
   dd4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      main_gen_data[data_idx] = modbus_buffer[data_idx] / 3600; // Run hours
   dd4a4:	6809      	ldr	r1, [r1, #0]
   dd4a6:	4b46      	ldr	r3, [pc, #280]	; (dd5c0 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0x128>)
        if (alarm_buffer[buffer_idx] == pcc1302_alarm_code[alarm_code_idx])
   dd4a8:	4c46      	ldr	r4, [pc, #280]	; (dd5c4 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0x12c>)
      main_gen_data[data_idx] = modbus_buffer[data_idx] / 3600; // Run hours
   dd4aa:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   dd4ae:	fbb1 f1f0 	udiv	r1, r1, r0
   dd4b2:	ee07 1a90 	vmov	s15, r1
   dd4b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      for (int alarm_code_idx = ALARM_REG2; alarm_code_idx <= TOTAL_SUPPORTED_ALARMS; alarm_code_idx++)
   dd4ba:	2101      	movs	r1, #1
      main_gen_data[data_idx] = modbus_buffer[data_idx] / 3600; // Run hours
   dd4bc:	edc3 7a00 	vstr	s15, [r3]
        main_gen_data[data_idx] = modbus_buffer[data_idx];
   dd4c0:	edd5 7a01 	vldr	s15, [r5, #4]
   dd4c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
   dd4c8:	edc3 7a01 	vstr	s15, [r3, #4]
   dd4cc:	edd5 7a02 	vldr	s15, [r5, #8]
   dd4d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
   dd4d4:	edc3 7a02 	vstr	s15, [r3, #8]
   dd4d8:	edd5 7a03 	vldr	s15, [r5, #12]
   dd4dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
   dd4e0:	edc3 7a03 	vstr	s15, [r3, #12]
        if (alarm_buffer[buffer_idx] == pcc1302_alarm_code[alarm_code_idx])
   dd4e4:	8810      	ldrh	r0, [r2, #0]
   dd4e6:	f834 5011 	ldrh.w	r5, [r4, r1, lsl #1]
   dd4ea:	4285      	cmp	r5, r0
   dd4ec:	d113      	bne.n	dd516 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0x7e>
          main_gen_data[data_idx++] = alarm_code_idx;
   dd4ee:	ee07 1a90 	vmov	s15, r1
   dd4f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dd4f6:	4934      	ldr	r1, [pc, #208]	; (dd5c8 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0x130>)
   dd4f8:	edc3 7a04 	vstr	s15, [r3, #16]
        if ((alarm_buffer[buffer_idx]) == pcc1302_alarm_status[alarm_status_idx])
   dd4fc:	8850      	ldrh	r0, [r2, #2]
   dd4fe:	2200      	movs	r2, #0
   dd500:	f831 4b02 	ldrh.w	r4, [r1], #2
   dd504:	42a0      	cmp	r0, r4
   dd506:	d10a      	bne.n	dd51e <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0x86>
          main_gen_data[data_idx] = alarm_status_idx;
   dd508:	ee07 2a90 	vmov	s15, r2
   dd50c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dd510:	edc3 7a05 	vstr	s15, [r3, #20]
          break;
   dd514:	e7c5      	b.n	dd4a2 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0xa>
      for (int alarm_code_idx = ALARM_REG2; alarm_code_idx <= TOTAL_SUPPORTED_ALARMS; alarm_code_idx++)
   dd516:	3101      	adds	r1, #1
   dd518:	2919      	cmp	r1, #25
   dd51a:	d1e4      	bne.n	dd4e6 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0x4e>
   dd51c:	e7c1      	b.n	dd4a2 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0xa>
      for (int alarm_status_idx = ALARM_REG1; alarm_status_idx < MBDATA_ALRM_BUFF_SIZE; alarm_status_idx++)
   dd51e:	3201      	adds	r2, #1
   dd520:	2a18      	cmp	r2, #24
   dd522:	d1ed      	bne.n	dd500 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0x68>
   dd524:	e7bd      	b.n	dd4a2 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0xa>
      bas_inst_gen_data[TOTAL_KWH] = MB_UNAVAIL_VAL;
   dd526:	4c29      	ldr	r4, [pc, #164]	; (dd5cc <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0x134>)
   dd528:	4e29      	ldr	r6, [pc, #164]	; (dd5d0 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0x138>)
   dd52a:	6026      	str	r6, [r4, #0]
      bas_inst_gen_data[data_idx++] = modbus_buffer[data_idx];             // Oil pressure
   dd52c:	edd1 7a01 	vldr	s15, [r1, #4]
   dd530:	eef8 7a67 	vcvt.f32.u32	s15, s15
      bas_inst_gen_data[data_idx++] = modbus_buffer[data_idx] * 0.1;       // Gen Frequency
   dd534:	462f      	mov	r7, r5
      bas_inst_gen_data[data_idx++] = modbus_buffer[data_idx];             // Oil pressure
   dd536:	edc4 7a01 	vstr	s15, [r4, #4]
      bas_inst_gen_data[data_idx++] = modbus_buffer[data_idx] * 0.1;       // coolant temperature
   dd53a:	6888      	ldr	r0, [r1, #8]
   dd53c:	f007 fb4c 	bl	e4bd8 <__aeabi_ui2d>
   dd540:	a31d      	add	r3, pc, #116	; (adr r3, dd5b8 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0x120>)
   dd542:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd546:	f007 fbc1 	bl	e4ccc <__aeabi_dmul>
   dd54a:	f007 fe79 	bl	e5240 <__aeabi_d2f>
        bas_inst_gen_data[data_idx] = MB_UNAVAIL_VAL; 
   dd54e:	60e6      	str	r6, [r4, #12]
      bas_inst_gen_data[data_idx++] = modbus_buffer[data_idx] * 0.1;       // coolant temperature
   dd550:	60a0      	str	r0, [r4, #8]
        bas_inst_gen_data[data_idx] = MB_UNAVAIL_VAL; 
   dd552:	6126      	str	r6, [r4, #16]
   dd554:	6166      	str	r6, [r4, #20]
      bas_inst_gen_data[data_idx++] = modbus_buffer[data_idx] * 0.1;       // Engine battery voltage
   dd556:	69a8      	ldr	r0, [r5, #24]
   dd558:	f007 fb3e 	bl	e4bd8 <__aeabi_ui2d>
   dd55c:	a316      	add	r3, pc, #88	; (adr r3, dd5b8 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0x120>)
   dd55e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd562:	f007 fbb3 	bl	e4ccc <__aeabi_dmul>
   dd566:	f007 fe6b 	bl	e5240 <__aeabi_d2f>
   dd56a:	61a0      	str	r0, [r4, #24]
      bas_inst_gen_data[data_idx++] = modbus_buffer[data_idx];             // Engine speed
   dd56c:	edd5 7a07 	vldr	s15, [r5, #28]
   dd570:	eef8 7a67 	vcvt.f32.u32	s15, s15
   dd574:	3544      	adds	r5, #68	; 0x44
   dd576:	edc4 7a07 	vstr	s15, [r4, #28]
      bas_inst_gen_data[data_idx++] = modbus_buffer[data_idx] * 0.1;       // Gen Frequency
   dd57a:	f857 0f20 	ldr.w	r0, [r7, #32]!
   dd57e:	f007 fb2b 	bl	e4bd8 <__aeabi_ui2d>
   dd582:	a30d      	add	r3, pc, #52	; (adr r3, dd5b8 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0x120>)
   dd584:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd588:	f007 fba0 	bl	e4ccc <__aeabi_dmul>
   dd58c:	f007 fe58 	bl	e5240 <__aeabi_d2f>
   dd590:	f104 0324 	add.w	r3, r4, #36	; 0x24
   dd594:	6220      	str	r0, [r4, #32]
        bas_inst_gen_data[data_idx] = modbus_buffer[data_idx];
   dd596:	edd7 7a01 	vldr	s15, [r7, #4]
   dd59a:	3704      	adds	r7, #4
   dd59c:	eef8 7a67 	vcvt.f32.u32	s15, s15
      for (; data_idx < EARTH_CURR; data_idx++)
   dd5a0:	42bd      	cmp	r5, r7
        bas_inst_gen_data[data_idx] = modbus_buffer[data_idx];
   dd5a2:	ece3 7a01 	vstmia	r3!, {s15}
      for (; data_idx < EARTH_CURR; data_idx++)
   dd5a6:	d1f6      	bne.n	dd596 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0xfe>
        bas_inst_gen_data[data_idx] = MB_UNAVAIL_VAL;
   dd5a8:	64a6      	str	r6, [r4, #72]	; 0x48
   dd5aa:	64e6      	str	r6, [r4, #76]	; 0x4c
   dd5ac:	6526      	str	r6, [r4, #80]	; 0x50
   dd5ae:	6566      	str	r6, [r4, #84]	; 0x54
   dd5b0:	65a6      	str	r6, [r4, #88]	; 0x58
      for (; data_idx <= CURR_LAG_LEAD; data_idx++)
   dd5b2:	e776      	b.n	dd4a2 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0xa>
   dd5b4:	f3af 8000 	nop.w
   dd5b8:	9999999a 	.word	0x9999999a
   dd5bc:	3fb99999 	.word	0x3fb99999
   dd5c0:	2003e11c 	.word	0x2003e11c
   dd5c4:	2003d6f0 	.word	0x2003d6f0
   dd5c8:	2003d768 	.word	0x2003d768
   dd5cc:	2003da0c 	.word	0x2003da0c
   dd5d0:	ccc0a468 	.word	0xccc0a468

000dd5d4 <_GLOBAL__sub_I_UN_ALARM>:
                                 };
   dd5d4:	4b1d      	ldr	r3, [pc, #116]	; (dd64c <_GLOBAL__sub_I_UN_ALARM+0x78>)
   dd5d6:	881a      	ldrh	r2, [r3, #0]
   dd5d8:	4b1d      	ldr	r3, [pc, #116]	; (dd650 <_GLOBAL__sub_I_UN_ALARM+0x7c>)
   dd5da:	815a      	strh	r2, [r3, #10]
   dd5dc:	851a      	strh	r2, [r3, #40]	; 0x28
   dd5de:	85da      	strh	r2, [r3, #46]	; 0x2e
   dd5e0:	861a      	strh	r2, [r3, #48]	; 0x30
   dd5e2:	879a      	strh	r2, [r3, #60]	; 0x3c
   dd5e4:	87da      	strh	r2, [r3, #62]	; 0x3e
   dd5e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
   dd5ea:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
   dd5ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   dd5f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
   dd5f6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
   dd5fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   dd5fe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
   dd602:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
   dd606:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
   dd60a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
   dd60e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
   dd612:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
   dd616:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
   dd61a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
   dd61e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
   dd622:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
   dd626:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
   dd62a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
   dd62e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
   dd632:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
   dd636:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
   dd63a:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
   dd63e:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
   dd642:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
   dd646:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
}
   dd64a:	4770      	bx	lr
   dd64c:	2003d6ee 	.word	0x2003d6ee
   dd650:	2003d6f0 	.word	0x2003d6f0

000dd654 <_ZN14SHYFTStateSyncC1Em>:

Logger ssLogger("SHYFT_STATE_LOGGER_NAME");

// PUBLIC
SHYFTStateSync::SHYFTStateSync(uint32_t _eepromAddress) {
  intervalPending = false;
   dd654:	2200      	movs	r2, #0
   dd656:	7002      	strb	r2, [r0, #0]
  eepromAddress = _eepromAddress;
  structSize = sizeof(shyftState);
   dd658:	2240      	movs	r2, #64	; 0x40
  eepromAddress = _eepromAddress;
   dd65a:	6041      	str	r1, [r0, #4]
  structSize = sizeof(shyftState);
   dd65c:	8102      	strh	r2, [r0, #8]
}
   dd65e:	4770      	bx	lr

000dd660 <_ZN14SHYFTStateSync4saveEv>:
  shyftState.lastFuelLevel = 0;

  if (shouldSave) { save(); }
}

void SHYFTStateSync::save() {
   dd660:	b510      	push	{r4, lr}
   dd662:	4604      	mov	r4, r0
  shyftState.lastUpdated = Time.now();
   dd664:	f006 fd80 	bl	e4168 <_ZN9TimeClass3nowEv>
   dd668:	6360      	str	r0, [r4, #52]	; 0x34
  EEPROM.put(eepromAddress, shyftState);
   dd66a:	f007 f871 	bl	e4750 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   dd66e:	6860      	ldr	r0, [r4, #4]
   dd670:	f104 010c 	add.w	r1, r4, #12
   dd674:	2240      	movs	r2, #64	; 0x40
}
   dd676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   dd67a:	f003 bb6b 	b.w	e0d54 <HAL_EEPROM_Put>
	...

000dd680 <_ZN14SHYFTStateSync15syncResetReasonEN5Reset6ReasonEb>:
  if (shouldSave) {
    save();
  }
}

void SHYFTStateSync::syncResetReason(Reset::Reason resetReason, bool shouldSave) {
   dd680:	b570      	push	{r4, r5, r6, lr}
   dd682:	b088      	sub	sp, #32
   dd684:	460d      	mov	r5, r1
   dd686:	4604      	mov	r4, r0
	StringSumHelper(const char *p) : String(p) {}
   dd688:	490f      	ldr	r1, [pc, #60]	; (dd6c8 <_ZN14SHYFTStateSync15syncResetReasonEN5Reset6ReasonEb+0x48>)
   dd68a:	a804      	add	r0, sp, #16
   dd68c:	4616      	mov	r6, r2
   dd68e:	f006 fabe 	bl	e3c0e <_ZN6StringC1EPKc>
  ssLogger.trace("syncing Reset::Reason of type=" + String(resetReason));
   dd692:	220a      	movs	r2, #10
   dd694:	4629      	mov	r1, r5
   dd696:	4668      	mov	r0, sp
   dd698:	f006 fb4e 	bl	e3d38 <_ZN6StringC1Ejh>
   dd69c:	4669      	mov	r1, sp
   dd69e:	a804      	add	r0, sp, #16
   dd6a0:	f006 fbeb 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
   dd6a4:	6801      	ldr	r1, [r0, #0]
   dd6a6:	4809      	ldr	r0, [pc, #36]	; (dd6cc <_ZN14SHYFTStateSync15syncResetReasonEN5Reset6ReasonEb+0x4c>)
   dd6a8:	f7fd ff54 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>
   dd6ac:	4668      	mov	r0, sp
   dd6ae:	f006 fa63 	bl	e3b78 <_ZN6StringD1Ev>
class StringSumHelper : public String
   dd6b2:	a804      	add	r0, sp, #16
   dd6b4:	f006 fa60 	bl	e3b78 <_ZN6StringD1Ev>
  shyftState.lastResetReason = resetReason;
   dd6b8:	6425      	str	r5, [r4, #64]	; 0x40

  if (shouldSave) {
   dd6ba:	b116      	cbz	r6, dd6c2 <_ZN14SHYFTStateSync15syncResetReasonEN5Reset6ReasonEb+0x42>
    save();
   dd6bc:	4620      	mov	r0, r4
   dd6be:	f7ff ffcf 	bl	dd660 <_ZN14SHYFTStateSync4saveEv>
  }
}
   dd6c2:	b008      	add	sp, #32
   dd6c4:	bd70      	pop	{r4, r5, r6, pc}
   dd6c6:	bf00      	nop
   dd6c8:	000e79d0 	.word	0x000e79d0
   dd6cc:	2003e284 	.word	0x2003e284

000dd6d0 <_GLOBAL__sub_I_ssLogger>:
        name_(name) {
   dd6d0:	4b01      	ldr	r3, [pc, #4]	; (dd6d8 <_GLOBAL__sub_I_ssLogger+0x8>)
   dd6d2:	4a02      	ldr	r2, [pc, #8]	; (dd6dc <_GLOBAL__sub_I_ssLogger+0xc>)
   dd6d4:	601a      	str	r2, [r3, #0]

  resetInterval(intervalEnd, false);

  unsigned int intervalStart = intervalEnd - SEND_INTERVAL;
  shyftState.missedSeconds = now - intervalStart;
}
   dd6d6:	4770      	bx	lr
   dd6d8:	2003e284 	.word	0x2003e284
   dd6dc:	000e79ef 	.word	0x000e79ef

000dd6e0 <_Z21getStringValueAtIndex6Stringci>:
#include "StringHelpers.h"

String getStringValueAtIndex(String data, char separator, int index) {
   dd6e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int found = 0;
  int strIndex[] = { 0, -1 };
  int maxIndex = data.length() - 1;
   dd6e4:	688f      	ldr	r7, [r1, #8]
  int strIndex[] = { 0, -1 };
   dd6e6:	f04f 0800 	mov.w	r8, #0
String getStringValueAtIndex(String data, char separator, int index) {
   dd6ea:	4605      	mov	r5, r0
   dd6ec:	460e      	mov	r6, r1
   dd6ee:	4699      	mov	r9, r3
  int maxIndex = data.length() - 1;
   dd6f0:	3f01      	subs	r7, #1
  int strIndex[] = { 0, -1 };
   dd6f2:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff

  for (int i = 0; i <= maxIndex && found <= index; i++) {
   dd6f6:	4644      	mov	r4, r8
  int found = 0;
   dd6f8:	46c2      	mov	sl, r8
  for (int i = 0; i <= maxIndex && found <= index; i++) {
   dd6fa:	42bc      	cmp	r4, r7
   dd6fc:	9201      	str	r2, [sp, #4]
   dd6fe:	dc16      	bgt.n	dd72e <_Z21getStringValueAtIndex6Stringci+0x4e>
   dd700:	45ca      	cmp	sl, r9
   dd702:	dc16      	bgt.n	dd732 <_Z21getStringValueAtIndex6Stringci+0x52>
    if (data.charAt(i) == separator || i == maxIndex) {
   dd704:	4621      	mov	r1, r4
   dd706:	4630      	mov	r0, r6
   dd708:	f006 fc15 	bl	e3f36 <_ZNK6String6charAtEj>
   dd70c:	9a01      	ldr	r2, [sp, #4]
   dd70e:	4290      	cmp	r0, r2
   dd710:	f104 0301 	add.w	r3, r4, #1
   dd714:	d001      	beq.n	dd71a <_Z21getStringValueAtIndex6Stringci+0x3a>
   dd716:	42bc      	cmp	r4, r7
   dd718:	d107      	bne.n	dd72a <_Z21getStringValueAtIndex6Stringci+0x4a>
      found++;
      strIndex[0] = strIndex[1] + 1;
   dd71a:	f10b 0801 	add.w	r8, fp, #1
      found++;
   dd71e:	f10a 0a01 	add.w	sl, sl, #1
      strIndex[1] = (i == maxIndex) ? i+1 : i;
   dd722:	42bc      	cmp	r4, r7
   dd724:	bf14      	ite	ne
   dd726:	46a3      	movne	fp, r4
   dd728:	469b      	moveq	fp, r3
  for (int i = 0; i <= maxIndex && found <= index; i++) {
   dd72a:	461c      	mov	r4, r3
   dd72c:	e7e5      	b.n	dd6fa <_Z21getStringValueAtIndex6Stringci+0x1a>
    }
  }

  return found > index ? data.substring(strIndex[0], strIndex[1]) : "";
   dd72e:	45ca      	cmp	sl, r9
   dd730:	dd09      	ble.n	dd746 <_Z21getStringValueAtIndex6Stringci+0x66>
   dd732:	465b      	mov	r3, fp
   dd734:	4642      	mov	r2, r8
   dd736:	4631      	mov	r1, r6
   dd738:	4628      	mov	r0, r5
   dd73a:	f006 fbff 	bl	e3f3c <_ZNK6String9substringEjj>
}
   dd73e:	4628      	mov	r0, r5
   dd740:	b003      	add	sp, #12
   dd742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return found > index ? data.substring(strIndex[0], strIndex[1]) : "";
   dd746:	4902      	ldr	r1, [pc, #8]	; (dd750 <_Z21getStringValueAtIndex6Stringci+0x70>)
   dd748:	4628      	mov	r0, r5
   dd74a:	f006 fa60 	bl	e3c0e <_ZN6StringC1EPKc>
   dd74e:	e7f6      	b.n	dd73e <_Z21getStringValueAtIndex6Stringci+0x5e>
   dd750:	000e827d 	.word	0x000e827d

000dd754 <_ZN3UFSC1Ev>:

// Array of available GX baudrates for serial communication
uint32_t UFS_BAUD_RATE[TOTAL_BAUDRATES]  = {9600, 14400, 19200, 38400, 57600, 115200, 128000};

/***Defination of UFS Class***/
UFS::UFS() : Modbus(GX_IS_MASTER, MODBUS_ON_SERIAL1, MODBUS_RTU_DE, MODBUS_RTU_RE)
   dd754:	b513      	push	{r0, r1, r4, lr}
   dd756:	230e      	movs	r3, #14
   dd758:	9300      	str	r3, [sp, #0]
   dd75a:	2201      	movs	r2, #1
   dd75c:	230f      	movs	r3, #15
   dd75e:	2100      	movs	r1, #0
   dd760:	4604      	mov	r4, r0
   dd762:	f002 f89f 	bl	df8a4 <_ZN6ModbusC1Ehhhh>
{
    slave_id = 1;
   dd766:	2301      	movs	r3, #1
    baud_rate = 0;
   dd768:	2200      	movs	r2, #0
}
   dd76a:	4620      	mov	r0, r4
    slave_id = 1;
   dd76c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    baud_rate = 0;
   dd770:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72
UFS::UFS() : Modbus(GX_IS_MASTER, MODBUS_ON_SERIAL1, MODBUS_RTU_DE, MODBUS_RTU_RE)
   dd774:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
}
   dd778:	b002      	add	sp, #8
   dd77a:	bd10      	pop	{r4, pc}

000dd77c <_ZN3UFS11getDistanceEv>:
}

float UFS::getDistance()
{
    // Convert raw data to cm
    return (ufs_mbdata[0] * RAW_TO_INCHES) * INCHES_TO_CM;
   dd77c:	4b07      	ldr	r3, [pc, #28]	; (dd79c <_ZN3UFS11getDistanceEv+0x20>)
   dd77e:	ed9f 0a08 	vldr	s0, [pc, #32]	; dd7a0 <_ZN3UFS11getDistanceEv+0x24>
   dd782:	881b      	ldrh	r3, [r3, #0]
   dd784:	ee07 3a90 	vmov	s15, r3
   dd788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dd78c:	ee67 7a80 	vmul.f32	s15, s15, s0
}
   dd790:	ed9f 0a04 	vldr	s0, [pc, #16]	; dd7a4 <_ZN3UFS11getDistanceEv+0x28>
   dd794:	ee27 0a80 	vmul.f32	s0, s15, s0
   dd798:	4770      	bx	lr
   dd79a:	bf00      	nop
   dd79c:	2003e28a 	.word	0x2003e28a
   dd7a0:	3b5dc619 	.word	0x3b5dc619
   dd7a4:	40228f5c 	.word	0x40228f5c

000dd7a8 <_ZN3UFS10getVoltageEv>:
}

float UFS::getVoltage()
{
    // Convert raw integer value of the DAC to a numeric value
    return (ufs_mbdata[2] / (float)4100) * 10.0;
   dd7a8:	4b07      	ldr	r3, [pc, #28]	; (dd7c8 <_ZN3UFS10getVoltageEv+0x20>)
   dd7aa:	ed9f 7a08 	vldr	s14, [pc, #32]	; dd7cc <_ZN3UFS10getVoltageEv+0x24>
   dd7ae:	889b      	ldrh	r3, [r3, #4]
   dd7b0:	ee07 3a90 	vmov	s15, r3
   dd7b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dd7b8:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   dd7bc:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   dd7c0:	ee20 0a27 	vmul.f32	s0, s0, s15
   dd7c4:	4770      	bx	lr
   dd7c6:	bf00      	nop
   dd7c8:	2003e28a 	.word	0x2003e28a
   dd7cc:	45802000 	.word	0x45802000

000dd7d0 <_ZN3UFS20getSensorTemperatureEv>:
}

float UFS::getSensorTemperature()
{
    // Convert raw value to celsius value
    return ( ufs_mbdata[5] * RAW_TO_CELSIUS );
   dd7d0:	4b03      	ldr	r3, [pc, #12]	; (dd7e0 <_ZN3UFS20getSensorTemperatureEv+0x10>)
   dd7d2:	895b      	ldrh	r3, [r3, #10]
   dd7d4:	ee00 3a10 	vmov	s0, r3
}
   dd7d8:	eeba 0acf 	vcvt.f32.s32	s0, s0, #2
   dd7dc:	4770      	bx	lr
   dd7de:	bf00      	nop
   dd7e0:	2003e28a 	.word	0x2003e28a

000dd7e4 <_ZN3UFS21selectFuelLevelMetricE6String>:
    // Convert raw data to inches
    return (ufs_mbdata[6] * RAW_TO_INCHES) * INCHES_TO_CM;
}

int UFS::selectFuelLevelMetric(String commandParameter)
{
   dd7e4:	b570      	push	{r4, r5, r6, lr}
   dd7e6:	4605      	mov	r5, r0
  commandParameter = commandParameter.toLowerCase();
   dd7e8:	4608      	mov	r0, r1
{
   dd7ea:	460c      	mov	r4, r1
  commandParameter = commandParameter.toLowerCase();
   dd7ec:	f006 fbc6 	bl	e3f7c <_ZN6String11toLowerCaseEv>
   dd7f0:	4601      	mov	r1, r0
   dd7f2:	4620      	mov	r0, r4
   dd7f4:	f006 fa47 	bl	e3c86 <_ZN6StringaSERKS_>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   dd7f8:	490f      	ldr	r1, [pc, #60]	; (dd838 <_ZN3UFS21selectFuelLevelMetricE6String+0x54>)
   dd7fa:	4620      	mov	r0, r4
   dd7fc:	f006 fb80 	bl	e3f00 <_ZNK6String6equalsEPKc>
  if(commandParameter == "voltage")
   dd800:	4606      	mov	r6, r0
   dd802:	b168      	cbz	r0, dd820 <_ZN3UFS21selectFuelLevelMetricE6String+0x3c>
    selected_fuel_level_metric = UFS_VOLTAGE;
   dd804:	2301      	movs	r3, #1
   dd806:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
  else if(commandParameter == "distance")
    selected_fuel_level_metric = UFS_DISTANCE;
  else 
    return -1;
  EEPROM.put(EEPROM_SELECTED_FUEL_LEVEL_METRIC, selected_fuel_level_metric);
   dd80a:	f006 ffa1 	bl	e4750 <_Z21__fetch_global_EEPROMv>
   dd80e:	f240 2079 	movw	r0, #633	; 0x279
   dd812:	2201      	movs	r2, #1
   dd814:	f105 0174 	add.w	r1, r5, #116	; 0x74
   dd818:	f003 fa9c 	bl	e0d54 <HAL_EEPROM_Put>
  return 1;
   dd81c:	2001      	movs	r0, #1
}
   dd81e:	bd70      	pop	{r4, r5, r6, pc}
   dd820:	4906      	ldr	r1, [pc, #24]	; (dd83c <_ZN3UFS21selectFuelLevelMetricE6String+0x58>)
   dd822:	4620      	mov	r0, r4
   dd824:	f006 fb6c 	bl	e3f00 <_ZNK6String6equalsEPKc>
  else if(commandParameter == "distance")
   dd828:	b110      	cbz	r0, dd830 <_ZN3UFS21selectFuelLevelMetricE6String+0x4c>
    selected_fuel_level_metric = UFS_DISTANCE;
   dd82a:	f885 6074 	strb.w	r6, [r5, #116]	; 0x74
   dd82e:	e7ec      	b.n	dd80a <_ZN3UFS21selectFuelLevelMetricE6String+0x26>
    return -1;
   dd830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dd834:	e7f3      	b.n	dd81e <_ZN3UFS21selectFuelLevelMetricE6String+0x3a>
   dd836:	bf00      	nop
   dd838:	000e7292 	.word	0x000e7292
   dd83c:	000e7a07 	.word	0x000e7a07

000dd840 <_ZN3UFS21selectFuelSensorInputE6String>:

int UFS::selectFuelSensorInput(String commandParameter)
{
   dd840:	b570      	push	{r4, r5, r6, lr}
   dd842:	4605      	mov	r5, r0
  commandParameter = commandParameter.toLowerCase();
   dd844:	4608      	mov	r0, r1
{
   dd846:	460c      	mov	r4, r1
  commandParameter = commandParameter.toLowerCase();
   dd848:	f006 fb98 	bl	e3f7c <_ZN6String11toLowerCaseEv>
   dd84c:	4601      	mov	r1, r0
   dd84e:	4620      	mov	r0, r4
   dd850:	f006 fa19 	bl	e3c86 <_ZN6StringaSERKS_>
   dd854:	490f      	ldr	r1, [pc, #60]	; (dd894 <_ZN3UFS21selectFuelSensorInputE6String+0x54>)
   dd856:	4620      	mov	r0, r4
   dd858:	f006 fb52 	bl	e3f00 <_ZNK6String6equalsEPKc>
  if(commandParameter == "digital")
   dd85c:	4606      	mov	r6, r0
   dd85e:	b168      	cbz	r0, dd87c <_ZN3UFS21selectFuelSensorInputE6String+0x3c>
    selected_input = DIGITAL_INPUT;
   dd860:	2301      	movs	r3, #1
   dd862:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
  else if(commandParameter == "analog")
    selected_input = ANALOG_INPUT;
  else 
    return -1;
  EEPROM.put(EEPROM_SELECTED_FUEL_SENSOR, selected_input);
   dd866:	f006 ff73 	bl	e4750 <_Z21__fetch_global_EEPROMv>
   dd86a:	f240 2076 	movw	r0, #630	; 0x276
   dd86e:	2201      	movs	r2, #1
   dd870:	f105 0175 	add.w	r1, r5, #117	; 0x75
   dd874:	f003 fa6e 	bl	e0d54 <HAL_EEPROM_Put>
  return 1;
   dd878:	2001      	movs	r0, #1
}
   dd87a:	bd70      	pop	{r4, r5, r6, pc}
   dd87c:	4906      	ldr	r1, [pc, #24]	; (dd898 <_ZN3UFS21selectFuelSensorInputE6String+0x58>)
   dd87e:	4620      	mov	r0, r4
   dd880:	f006 fb3e 	bl	e3f00 <_ZNK6String6equalsEPKc>
  else if(commandParameter == "analog")
   dd884:	b110      	cbz	r0, dd88c <_ZN3UFS21selectFuelSensorInputE6String+0x4c>
    selected_input = ANALOG_INPUT;
   dd886:	f885 6075 	strb.w	r6, [r5, #117]	; 0x75
   dd88a:	e7ec      	b.n	dd866 <_ZN3UFS21selectFuelSensorInputE6String+0x26>
    return -1;
   dd88c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dd890:	e7f3      	b.n	dd87a <_ZN3UFS21selectFuelSensorInputE6String+0x3a>
   dd892:	bf00      	nop
   dd894:	000e72c8 	.word	0x000e72c8
   dd898:	000e72d0 	.word	0x000e72d0

000dd89c <_ZN3UFS18ufsSelectedConfigsEv>:
  /* Initialise the ufs */
  initialiseUfs(ufsConfigs);
}

int UFS::ufsSelectedConfigs()
{
   dd89c:	b510      	push	{r4, lr}
   dd89e:	4604      	mov	r4, r0
   dd8a0:	b088      	sub	sp, #32
  String jsonString = String("{\"v\": \"1\",\n\"ufs_config\": {\n");
   dd8a2:	4922      	ldr	r1, [pc, #136]	; (dd92c <_ZN3UFS18ufsSelectedConfigsEv+0x90>)
   dd8a4:	a804      	add	r0, sp, #16
   dd8a6:	f006 f9b2 	bl	e3c0e <_ZN6StringC1EPKc>
  if (selected_input == ANALOG_INPUT)
   dd8aa:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   dd8ae:	2b00      	cmp	r3, #0
   dd8b0:	d12c      	bne.n	dd90c <_ZN3UFS18ufsSelectedConfigsEv+0x70>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   dd8b2:	491f      	ldr	r1, [pc, #124]	; (dd930 <_ZN3UFS18ufsSelectedConfigsEv+0x94>)
   dd8b4:	a804      	add	r0, sp, #16
   dd8b6:	f006 fac2 	bl	e3e3e <_ZN6String6concatEPKc>
   dd8ba:	491e      	ldr	r1, [pc, #120]	; (dd934 <_ZN3UFS18ufsSelectedConfigsEv+0x98>)
   dd8bc:	a804      	add	r0, sp, #16
   dd8be:	f006 fabe 	bl	e3e3e <_ZN6String6concatEPKc>
    return Flags<TagT, ValueT>(val_ | flags.val_);
   dd8c2:	4b1d      	ldr	r3, [pc, #116]	; (dd938 <_ZN3UFS18ufsSelectedConfigsEv+0x9c>)
   dd8c4:	4a1d      	ldr	r2, [pc, #116]	; (dd93c <_ZN3UFS18ufsSelectedConfigsEv+0xa0>)
   dd8c6:	781b      	ldrb	r3, [r3, #0]
   dd8c8:	7812      	ldrb	r2, [r2, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   dd8ca:	491d      	ldr	r1, [pc, #116]	; (dd940 <_ZN3UFS18ufsSelectedConfigsEv+0xa4>)
   dd8cc:	4313      	orrs	r3, r2
   dd8ce:	f88d 3000 	strb.w	r3, [sp]
   dd8d2:	9a04      	ldr	r2, [sp, #16]
   dd8d4:	233c      	movs	r3, #60	; 0x3c
   dd8d6:	a802      	add	r0, sp, #8
   dd8d8:	f003 ffc0 	bl	e185c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   dd8dc:	9c03      	ldr	r4, [sp, #12]
   dd8de:	b17c      	cbz	r4, dd900 <_ZN3UFS18ufsSelectedConfigsEv+0x64>
      if (--_M_use_count == 0)
   dd8e0:	6863      	ldr	r3, [r4, #4]
   dd8e2:	3b01      	subs	r3, #1
   dd8e4:	6063      	str	r3, [r4, #4]
   dd8e6:	b95b      	cbnz	r3, dd900 <_ZN3UFS18ufsSelectedConfigsEv+0x64>
          _M_dispose();
   dd8e8:	6823      	ldr	r3, [r4, #0]
   dd8ea:	4620      	mov	r0, r4
   dd8ec:	689b      	ldr	r3, [r3, #8]
   dd8ee:	4798      	blx	r3
          if (--_M_weak_count == 0)
   dd8f0:	68a3      	ldr	r3, [r4, #8]
   dd8f2:	3b01      	subs	r3, #1
   dd8f4:	60a3      	str	r3, [r4, #8]
   dd8f6:	b91b      	cbnz	r3, dd900 <_ZN3UFS18ufsSelectedConfigsEv+0x64>
            _M_destroy();
   dd8f8:	6823      	ldr	r3, [r4, #0]
   dd8fa:	4620      	mov	r0, r4
   dd8fc:	68db      	ldr	r3, [r3, #12]
   dd8fe:	4798      	blx	r3
  String jsonString = String("{\"v\": \"1\",\n\"ufs_config\": {\n");
   dd900:	a804      	add	r0, sp, #16
   dd902:	f006 f939 	bl	e3b78 <_ZN6StringD1Ev>
      jsonString += "\"Selected Metric\": \"Distance\"\n";
  }
  jsonString += "}\n}";
  Particle.publish("gx_event", jsonString, PRIVATE, WITH_ACK);
  return 1;
}
   dd906:	2001      	movs	r0, #1
   dd908:	b008      	add	sp, #32
   dd90a:	bd10      	pop	{r4, pc}
  else if (selected_input == DIGITAL_INPUT)
   dd90c:	2b01      	cmp	r3, #1
   dd90e:	d1d4      	bne.n	dd8ba <_ZN3UFS18ufsSelectedConfigsEv+0x1e>
   dd910:	490c      	ldr	r1, [pc, #48]	; (dd944 <_ZN3UFS18ufsSelectedConfigsEv+0xa8>)
   dd912:	a804      	add	r0, sp, #16
   dd914:	f006 fa93 	bl	e3e3e <_ZN6String6concatEPKc>
    if (selected_fuel_level_metric == UFS_VOLTAGE)
   dd918:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   dd91c:	2b01      	cmp	r3, #1
   dd91e:	d101      	bne.n	dd924 <_ZN3UFS18ufsSelectedConfigsEv+0x88>
   dd920:	4909      	ldr	r1, [pc, #36]	; (dd948 <_ZN3UFS18ufsSelectedConfigsEv+0xac>)
   dd922:	e7c7      	b.n	dd8b4 <_ZN3UFS18ufsSelectedConfigsEv+0x18>
    else if (selected_fuel_level_metric == UFS_DISTANCE)
   dd924:	2b00      	cmp	r3, #0
   dd926:	d1c8      	bne.n	dd8ba <_ZN3UFS18ufsSelectedConfigsEv+0x1e>
   dd928:	4908      	ldr	r1, [pc, #32]	; (dd94c <_ZN3UFS18ufsSelectedConfigsEv+0xb0>)
   dd92a:	e7c3      	b.n	dd8b4 <_ZN3UFS18ufsSelectedConfigsEv+0x18>
   dd92c:	000e7a10 	.word	0x000e7a10
   dd930:	000e7a2c 	.word	0x000e7a2c
   dd934:	000e7aa3 	.word	0x000e7aa3
   dd938:	2003e288 	.word	0x2003e288
   dd93c:	2003e289 	.word	0x2003e289
   dd940:	000e705b 	.word	0x000e705b
   dd944:	000e7a48 	.word	0x000e7a48
   dd948:	000e7a66 	.word	0x000e7a66
   dd94c:	000e7a84 	.word	0x000e7a84

000dd950 <_ZN3UFSD1Ev>:

UFS::~UFS(){}
   dd950:	4770      	bx	lr
	...

000dd954 <_Z13initialiseUfs9UfsConfig>:

bool initialiseUfs(UfsConfig ufsconFigVals)
{
   dd954:	b507      	push	{r0, r1, r2, lr}
  fuelSensor.slave_id = ufsconFigVals.slave_id;
  fuelSensor.baud_rate = UFS_BAUD_RATE[ufsconFigVals.baud_rate];
   dd956:	4b0b      	ldr	r3, [pc, #44]	; (dd984 <_Z13initialiseUfs9UfsConfig+0x30>)
{
   dd958:	f8ad 0004 	strh.w	r0, [sp, #4]
  fuelSensor.slave_id = ufsconFigVals.slave_id;
   dd95c:	b2c2      	uxtb	r2, r0
  fuelSensor.baud_rate = UFS_BAUD_RATE[ufsconFigVals.baud_rate];
   dd95e:	f3c0 2007 	ubfx	r0, r0, #8, #8
  fuelSensor.slave_id = ufsconFigVals.slave_id;
   dd962:	4909      	ldr	r1, [pc, #36]	; (dd988 <_Z13initialiseUfs9UfsConfig+0x34>)
  fuelSensor.baud_rate = UFS_BAUD_RATE[ufsconFigVals.baud_rate];
   dd964:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  fuelSensor.slave_id = ufsconFigVals.slave_id;
   dd968:	f881 2070 	strb.w	r2, [r1, #112]	; 0x70
  fuelSensor.baud_rate = UFS_BAUD_RATE[ufsconFigVals.baud_rate];
   dd96c:	f8a1 3072 	strh.w	r3, [r1, #114]	; 0x72

  Log.info("UFS:%d BAUDRATE:%d", fuelSensor.slave_id, fuelSensor.baud_rate);
   dd970:	4806      	ldr	r0, [pc, #24]	; (dd98c <_Z13initialiseUfs9UfsConfig+0x38>)
   dd972:	4907      	ldr	r1, [pc, #28]	; (dd990 <_Z13initialiseUfs9UfsConfig+0x3c>)
   dd974:	b29b      	uxth	r3, r3
   dd976:	f7fc f89f 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
  return true;
}
   dd97a:	2001      	movs	r0, #1
   dd97c:	b003      	add	sp, #12
   dd97e:	f85d fb04 	ldr.w	pc, [sp], #4
   dd982:	bf00      	nop
   dd984:	2003d798 	.word	0x2003d798
   dd988:	2003e3cc 	.word	0x2003e3cc
   dd98c:	2003e61c 	.word	0x2003e61c
   dd990:	000e7aa7 	.word	0x000e7aa7

000dd994 <_ZN3UFS15fetchUfsConfigsEv>:
{
   dd994:	b513      	push	{r0, r1, r4, lr}
  UfsConfig ufsConfigs;
   dd996:	4b21      	ldr	r3, [pc, #132]	; (dda1c <_ZN3UFS15fetchUfsConfigsEv+0x88>)
   dd998:	881b      	ldrh	r3, [r3, #0]
   dd99a:	f8ad 3004 	strh.w	r3, [sp, #4]
{
   dd99e:	4604      	mov	r4, r0
  EEPROM.get(EEPROM_UFSCONFIGS_ADDR, ufsConfigs);
   dd9a0:	f006 fed6 	bl	e4750 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   dd9a4:	2202      	movs	r2, #2
   dd9a6:	a901      	add	r1, sp, #4
   dd9a8:	f240 2077 	movw	r0, #631	; 0x277
   dd9ac:	f003 f9ca 	bl	e0d44 <HAL_EEPROM_Get>
  if(( (ufsConfigs.baud_rate < 0) || (ufsConfigs.baud_rate >= TOTAL_BAUDRATES) ) && 
   dd9b0:	f89d 3005 	ldrb.w	r3, [sp, #5]
   dd9b4:	2b06      	cmp	r3, #6
   dd9b6:	d90c      	bls.n	dd9d2 <_ZN3UFS15fetchUfsConfigsEv+0x3e>
      ((ufsConfigs.slave_id < MIN_GEN_SLAVE_ID) || (ufsConfigs.slave_id > MAX_GEN_SLAVE_ID)) )
   dd9b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   dd9bc:	3b01      	subs	r3, #1
  if(( (ufsConfigs.baud_rate < 0) || (ufsConfigs.baud_rate >= TOTAL_BAUDRATES) ) && 
   dd9be:	b2db      	uxtb	r3, r3
   dd9c0:	2bf6      	cmp	r3, #246	; 0xf6
   dd9c2:	d906      	bls.n	dd9d2 <_ZN3UFS15fetchUfsConfigsEv+0x3e>
    Log.info("New device. Changing settings to default config");
   dd9c4:	4916      	ldr	r1, [pc, #88]	; (dda20 <_ZN3UFS15fetchUfsConfigsEv+0x8c>)
   dd9c6:	4817      	ldr	r0, [pc, #92]	; (dda24 <_ZN3UFS15fetchUfsConfigsEv+0x90>)
   dd9c8:	f7fc f876 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
    ufsConfigs.slave_id = 1;
   dd9cc:	2301      	movs	r3, #1
   dd9ce:	f8ad 3004 	strh.w	r3, [sp, #4]
  EEPROM.get(EEPROM_SELECTED_FUEL_LEVEL_METRIC, selected_fuel_level_metric);
   dd9d2:	f006 febd 	bl	e4750 <_Z21__fetch_global_EEPROMv>
   dd9d6:	f104 0174 	add.w	r1, r4, #116	; 0x74
   dd9da:	2201      	movs	r2, #1
   dd9dc:	f240 2079 	movw	r0, #633	; 0x279
   dd9e0:	f003 f9b0 	bl	e0d44 <HAL_EEPROM_Get>
  if ( (selected_fuel_level_metric < 0) || (selected_fuel_level_metric > 1) ) // if new devic, set to default value
   dd9e4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   dd9e8:	2b01      	cmp	r3, #1
    selected_fuel_level_metric = 0;
   dd9ea:	bf84      	itt	hi
   dd9ec:	2300      	movhi	r3, #0
   dd9ee:	f884 3074 	strbhi.w	r3, [r4, #116]	; 0x74
  EEPROM.get(EEPROM_SELECTED_FUEL_SENSOR, selected_input);
   dd9f2:	f006 fead 	bl	e4750 <_Z21__fetch_global_EEPROMv>
   dd9f6:	2201      	movs	r2, #1
   dd9f8:	f104 0175 	add.w	r1, r4, #117	; 0x75
   dd9fc:	f240 2076 	movw	r0, #630	; 0x276
   dda00:	f003 f9a0 	bl	e0d44 <HAL_EEPROM_Get>
  if( (selected_input < 0) || (selected_input > 1) ) // if new device, set to default value
   dda04:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
  initialiseUfs(ufsConfigs);
   dda08:	9801      	ldr	r0, [sp, #4]
  if( (selected_input < 0) || (selected_input > 1) ) // if new device, set to default value
   dda0a:	2b01      	cmp	r3, #1
    selected_input = 0; 
   dda0c:	bf84      	itt	hi
   dda0e:	2300      	movhi	r3, #0
   dda10:	f884 3075 	strbhi.w	r3, [r4, #117]	; 0x75
  initialiseUfs(ufsConfigs);
   dda14:	f7ff ff9e 	bl	dd954 <_Z13initialiseUfs9UfsConfig>
}
   dda18:	b002      	add	sp, #8
   dda1a:	bd10      	pop	{r4, pc}
   dda1c:	000e7b75 	.word	0x000e7b75
   dda20:	000e7aba 	.word	0x000e7aba
   dda24:	2003e61c 	.word	0x2003e61c

000dda28 <_Z14storeUfsConfighh>:

void storeUfsConfig(uint8_t ufs_address,uint8_t baudrate){
   dda28:	b507      	push	{r0, r1, r2, lr}
    UfsConfig newUfsConfig;
    
    newUfsConfig.slave_id = ufs_address;
    newUfsConfig.baud_rate = baudrate;
   dda2a:	f88d 1005 	strb.w	r1, [sp, #5]
    newUfsConfig.slave_id = ufs_address;
   dda2e:	f88d 0004 	strb.w	r0, [sp, #4]

    initialiseUfs(newUfsConfig);
   dda32:	9801      	ldr	r0, [sp, #4]
   dda34:	f7ff ff8e 	bl	dd954 <_Z13initialiseUfs9UfsConfig>
    EEPROM.put(EEPROM_UFSCONFIGS_ADDR, newUfsConfig);
   dda38:	f006 fe8a 	bl	e4750 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   dda3c:	2202      	movs	r2, #2
   dda3e:	a901      	add	r1, sp, #4
   dda40:	f240 2077 	movw	r0, #631	; 0x277
   dda44:	f003 f986 	bl	e0d54 <HAL_EEPROM_Put>
}
   dda48:	b003      	add	sp, #12
   dda4a:	f85d fb04 	ldr.w	pc, [sp], #4

000dda4e <_Z17ufsConfigurations6String>:

int ufsConfigurations(String fullCommand){
   dda4e:	b530      	push	{r4, r5, lr}
   dda50:	b089      	sub	sp, #36	; 0x24
   dda52:	4604      	mov	r4, r0
    uint8_t received_ufs_addr = atoi(getStringValueAtIndex(fullCommand, COMMA_CHAR, 0));
   dda54:	4601      	mov	r1, r0
   dda56:	4668      	mov	r0, sp
   dda58:	f006 f924 	bl	e3ca4 <_ZN6StringC1ERKS_>
   dda5c:	2300      	movs	r3, #0
   dda5e:	222c      	movs	r2, #44	; 0x2c
   dda60:	4669      	mov	r1, sp
   dda62:	a804      	add	r0, sp, #16
   dda64:	f7ff fe3c 	bl	dd6e0 <_Z21getStringValueAtIndex6Stringci>
   dda68:	9804      	ldr	r0, [sp, #16]
   dda6a:	f007 fdd3 	bl	e5614 <atoi>
   dda6e:	b2c5      	uxtb	r5, r0
   dda70:	a804      	add	r0, sp, #16
   dda72:	f006 f881 	bl	e3b78 <_ZN6StringD1Ev>
   dda76:	4668      	mov	r0, sp
   dda78:	f006 f87e 	bl	e3b78 <_ZN6StringD1Ev>
    uint8_t received_baudrate = atoi(getStringValueAtIndex(fullCommand, COMMA_CHAR, 1));
   dda7c:	4621      	mov	r1, r4
   dda7e:	4668      	mov	r0, sp
   dda80:	f006 f910 	bl	e3ca4 <_ZN6StringC1ERKS_>
   dda84:	2301      	movs	r3, #1
   dda86:	222c      	movs	r2, #44	; 0x2c
   dda88:	4669      	mov	r1, sp
   dda8a:	a804      	add	r0, sp, #16
   dda8c:	f7ff fe28 	bl	dd6e0 <_Z21getStringValueAtIndex6Stringci>
   dda90:	9804      	ldr	r0, [sp, #16]
   dda92:	f007 fdbf 	bl	e5614 <atoi>
   dda96:	4604      	mov	r4, r0
   dda98:	a804      	add	r0, sp, #16
   dda9a:	f006 f86d 	bl	e3b78 <_ZN6StringD1Ev>
   dda9e:	4668      	mov	r0, sp
   ddaa0:	f006 f86a 	bl	e3b78 <_ZN6StringD1Ev>
    
    if ((received_ufs_addr < MIN_GEN_SLAVE_ID) || (received_ufs_addr > MAX_GEN_SLAVE_ID))
   ddaa4:	1e6b      	subs	r3, r5, #1
   ddaa6:	b2db      	uxtb	r3, r3
   ddaa8:	2bf6      	cmp	r3, #246	; 0xf6
   ddaaa:	d808      	bhi.n	ddabe <_Z17ufsConfigurations6String+0x70>
    uint8_t received_baudrate = atoi(getStringValueAtIndex(fullCommand, COMMA_CHAR, 1));
   ddaac:	b2e1      	uxtb	r1, r4
        return -1;
    if ((received_baudrate < BAUD_9K6) || (received_baudrate > BAUD_128K))
   ddaae:	2906      	cmp	r1, #6
   ddab0:	d805      	bhi.n	ddabe <_Z17ufsConfigurations6String+0x70>
        return -1;

    storeUfsConfig(received_ufs_addr, received_baudrate);
   ddab2:	4628      	mov	r0, r5
   ddab4:	f7ff ffb8 	bl	dda28 <_Z14storeUfsConfighh>
    return 1;
   ddab8:	2001      	movs	r0, #1
}
   ddaba:	b009      	add	sp, #36	; 0x24
   ddabc:	bd30      	pop	{r4, r5, pc}
        return -1;
   ddabe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   ddac2:	e7fa      	b.n	ddaba <_Z17ufsConfigurations6String+0x6c>

000ddac4 <_Z13getUfsMetricsv>:

int8_t getUfsMetrics()
{
   ddac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fuelSensor.begin(fuelSensor.baud_rate);
   ddac8:	4c31      	ldr	r4, [pc, #196]	; (ddb90 <_Z13getUfsMetricsv+0xcc>)
    ufsQueryPacket->au16reg = ufs_mbdata;               
   ddaca:	4f32      	ldr	r7, [pc, #200]	; (ddb94 <_Z13getUfsMetricsv+0xd0>)
    fuelSensor.begin(fuelSensor.baud_rate);
   ddacc:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
      delay(20);
      fuelSensor.poll();

      if (fuelSensor.getState() == COM_IDLE)
      {
        Log.info("Running Modbus data poll from the UFS");
   ddad0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; ddba4 <_Z13getUfsMetricsv+0xe0>
   ddad4:	f8df 90c4 	ldr.w	r9, [pc, #196]	; ddb9c <_Z13getUfsMetricsv+0xd8>
{
   ddad8:	b087      	sub	sp, #28
    fuelSensor.begin(fuelSensor.baud_rate);
   ddada:	4620      	mov	r0, r4
   ddadc:	f002 f850 	bl	dfb80 <_ZN6Modbus5beginEl>
    fuelSensor.setTimeOut(MODBUS_ROLL_OVER_TIME);
   ddae0:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
   ddae4:	4620      	mov	r0, r4
   ddae6:	f001 fef1 	bl	df8cc <_ZN6Modbus10setTimeOutEt>
    ufsQueryPacket->u8id = slave_id;
   ddaea:	f894 6070 	ldrb.w	r6, [r4, #112]	; 0x70
    Log.info("UFS_QUERY_DATA Slave_ID:%d, Func_Code:%d, Start_Address:%d, Num_Of_Regs:%d", 
   ddaee:	492a      	ldr	r1, [pc, #168]	; (ddb98 <_Z13getUfsMetricsv+0xd4>)
   ddaf0:	482a      	ldr	r0, [pc, #168]	; (ddb9c <_Z13getUfsMetricsv+0xd8>)
    ufsQueryPacket->au16reg = ufs_mbdata;               
   ddaf2:	9705      	str	r7, [sp, #20]
    Log.info("UFS_QUERY_DATA Slave_ID:%d, Func_Code:%d, Start_Address:%d, Num_Of_Regs:%d", 
   ddaf4:	f44f 7302 	mov.w	r3, #520	; 0x208
   ddaf8:	2207      	movs	r2, #7
   ddafa:	e9cd 3200 	strd	r3, r2, [sp]
   ddafe:	2303      	movs	r3, #3
   ddb00:	4632      	mov	r2, r6
   ddb02:	f7fb ffd9 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
   ddb06:	250c      	movs	r5, #12
      fuelSensor.query(ufs_query);
   ddb08:	2303      	movs	r3, #3
   ddb0a:	f88d 300d 	strb.w	r3, [sp, #13]
   ddb0e:	f44f 7302 	mov.w	r3, #520	; 0x208
   ddb12:	f8ad 300e 	strh.w	r3, [sp, #14]
   ddb16:	2307      	movs	r3, #7
   ddb18:	f8ad 3010 	strh.w	r3, [sp, #16]
   ddb1c:	f88d 600c 	strb.w	r6, [sp, #12]
   ddb20:	ab06      	add	r3, sp, #24
   ddb22:	e913 000e 	ldmdb	r3, {r1, r2, r3}
   ddb26:	4620      	mov	r0, r4
   ddb28:	f002 fa84 	bl	e0034 <_ZN6Modbus5queryE8modbus_t>
      delay(20);
   ddb2c:	2014      	movs	r0, #20
   ddb2e:	f003 fcae 	bl	e148e <delay>
      fuelSensor.poll();
   ddb32:	4620      	mov	r0, r4
   ddb34:	f002 f912 	bl	dfd5c <_ZN6Modbus4pollEv>
      if (fuelSensor.getState() == COM_IDLE)
   ddb38:	4620      	mov	r0, r4
   ddb3a:	f001 feca 	bl	df8d2 <_ZN6Modbus8getStateEv>
   ddb3e:	b918      	cbnz	r0, ddb48 <_Z13getUfsMetricsv+0x84>
        Log.info("Running Modbus data poll from the UFS");
   ddb40:	4641      	mov	r1, r8
   ddb42:	4648      	mov	r0, r9
   ddb44:	f7fb ffb8 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
    for (uint8_t i = MB_1_POLL; i <= MB_12_POLLS; i++)
   ddb48:	1e6b      	subs	r3, r5, #1
   ddb4a:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
   ddb4e:	d1db      	bne.n	ddb08 <_Z13getUfsMetricsv+0x44>
      }
    }
    Log.info("ADDR     VALUE");
   ddb50:	4913      	ldr	r1, [pc, #76]	; (ddba0 <_Z13getUfsMetricsv+0xdc>)
   ddb52:	4812      	ldr	r0, [pc, #72]	; (ddb9c <_Z13getUfsMetricsv+0xd8>)
   ddb54:	4d0f      	ldr	r5, [pc, #60]	; (ddb94 <_Z13getUfsMetricsv+0xd0>)
    for(uint8_t i = 0; i < 7; i++){
      Log.info("%X      %d",UFS_DATA_START_ADDR+i, ufs_mbdata[i]);
   ddb56:	f8df 9050 	ldr.w	r9, [pc, #80]	; ddba8 <_Z13getUfsMetricsv+0xe4>
   ddb5a:	f8df 8040 	ldr.w	r8, [pc, #64]	; ddb9c <_Z13getUfsMetricsv+0xd8>
    Log.info("ADDR     VALUE");
   ddb5e:	f7fb ffab 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
   ddb62:	f44f 7402 	mov.w	r4, #520	; 0x208
    for(uint8_t i = 0; i < 7; i++){
   ddb66:	f240 260f 	movw	r6, #527	; 0x20f
      Log.info("%X      %d",UFS_DATA_START_ADDR+i, ufs_mbdata[i]);
   ddb6a:	4622      	mov	r2, r4
   ddb6c:	f835 3b02 	ldrh.w	r3, [r5], #2
   ddb70:	4649      	mov	r1, r9
   ddb72:	4640      	mov	r0, r8
   ddb74:	3401      	adds	r4, #1
   ddb76:	f7fb ff9f 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
    for(uint8_t i = 0; i < 7; i++){
   ddb7a:	42b4      	cmp	r4, r6
   ddb7c:	d1f5      	bne.n	ddb6a <_Z13getUfsMetricsv+0xa6>
    }
    if (ufs_mbdata[1] == 0)
   ddb7e:	887b      	ldrh	r3, [r7, #2]
      return -1;
    else 
      return 1;
   ddb80:	2b00      	cmp	r3, #0
}
   ddb82:	bf0c      	ite	eq
   ddb84:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
   ddb88:	2001      	movne	r0, #1
   ddb8a:	b007      	add	sp, #28
   ddb8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ddb90:	2003e3cc 	.word	0x2003e3cc
   ddb94:	2003e28a 	.word	0x2003e28a
   ddb98:	000e7aea 	.word	0x000e7aea
   ddb9c:	2003e61c 	.word	0x2003e61c
   ddba0:	000e7b5b 	.word	0x000e7b5b
   ddba4:	000e7b35 	.word	0x000e7b35
   ddba8:	000e7b6a 	.word	0x000e7b6a

000ddbac <_Z14clearUfsBufferv>:

void clearUfsBuffer(){
  for(uint8_t i = 0; i < UFS_DATA_SIZE; i++){
    ufs_mbdata[i] = 0;
   ddbac:	4b04      	ldr	r3, [pc, #16]	; (ddbc0 <_Z14clearUfsBufferv+0x14>)
   ddbae:	2200      	movs	r2, #0
   ddbb0:	801a      	strh	r2, [r3, #0]
   ddbb2:	805a      	strh	r2, [r3, #2]
   ddbb4:	809a      	strh	r2, [r3, #4]
   ddbb6:	80da      	strh	r2, [r3, #6]
   ddbb8:	811a      	strh	r2, [r3, #8]
   ddbba:	815a      	strh	r2, [r3, #10]
   ddbbc:	819a      	strh	r2, [r3, #12]
  }
}
   ddbbe:	4770      	bx	lr
   ddbc0:	2003e28a 	.word	0x2003e28a

000ddbc4 <_GLOBAL__sub_I_ufs_mbdata>:
        val_(val) {
   ddbc4:	4b03      	ldr	r3, [pc, #12]	; (ddbd4 <_GLOBAL__sub_I_ufs_mbdata+0x10>)
   ddbc6:	2201      	movs	r2, #1
   ddbc8:	701a      	strb	r2, [r3, #0]
   ddbca:	4b03      	ldr	r3, [pc, #12]	; (ddbd8 <_GLOBAL__sub_I_ufs_mbdata+0x14>)
   ddbcc:	2208      	movs	r2, #8
   ddbce:	701a      	strb	r2, [r3, #0]
   ddbd0:	4770      	bx	lr
   ddbd2:	bf00      	nop
   ddbd4:	2003e288 	.word	0x2003e288
   ddbd8:	2003e289 	.word	0x2003e289

000ddbdc <_Z14binaryInputISRv>:

}

void binaryInputISR()
{
  check_binary_inputs = true;
   ddbdc:	4b01      	ldr	r3, [pc, #4]	; (ddbe4 <_Z14binaryInputISRv+0x8>)
   ddbde:	2201      	movs	r2, #1
   ddbe0:	701a      	strb	r2, [r3, #0]
}
   ddbe2:	4770      	bx	lr
   ddbe4:	2003e3a0 	.word	0x2003e3a0

000ddbe8 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   ddbe8:	6803      	ldr	r3, [r0, #0]
   ddbea:	4718      	bx	r3

000ddbec <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   ddbec:	2a01      	cmp	r2, #1
   ddbee:	d003      	beq.n	ddbf8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   ddbf0:	2a02      	cmp	r2, #2
   ddbf2:	d003      	beq.n	ddbfc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   ddbf4:	2000      	movs	r0, #0
   ddbf6:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   ddbf8:	6001      	str	r1, [r0, #0]
	      break;
   ddbfa:	e7fb      	b.n	ddbf4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   ddbfc:	680b      	ldr	r3, [r1, #0]
   ddbfe:	6003      	str	r3, [r0, #0]
	}
   ddc00:	e7f8      	b.n	ddbf4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

000ddc02 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   ddc02:	6943      	ldr	r3, [r0, #20]
   ddc04:	b113      	cbz	r3, ddc0c <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ddc06:	6983      	ldr	r3, [r0, #24]
   ddc08:	300c      	adds	r0, #12
   ddc0a:	4718      	bx	r3
            callback();
        }
    }
   ddc0c:	4770      	bx	lr
	...

000ddc10 <_ZN15SpiFlashWinbondD1Ev>:
};

/**
 * @brief Class for Winbond W25Qxx modules of various sizes
 */
class SpiFlashWinbond : public SpiFlash {
   ddc10:	b510      	push	{r4, lr}
   ddc12:	4b03      	ldr	r3, [pc, #12]	; (ddc20 <_ZN15SpiFlashWinbondD1Ev+0x10>)
   ddc14:	6003      	str	r3, [r0, #0]
   ddc16:	4604      	mov	r4, r0
   ddc18:	f002 fb2e 	bl	e0278 <_ZN8SpiFlashD1Ev>
   ddc1c:	4620      	mov	r0, r4
   ddc1e:	bd10      	pop	{r4, pc}
   ddc20:	000e8120 	.word	0x000e8120

000ddc24 <_ZN15SpiFlashWinbondD0Ev>:
   ddc24:	b510      	push	{r4, lr}
   ddc26:	4604      	mov	r4, r0
   ddc28:	f7ff fff2 	bl	ddc10 <_ZN15SpiFlashWinbondD1Ev>
   ddc2c:	4620      	mov	r0, r4
   ddc2e:	2130      	movs	r1, #48	; 0x30
   ddc30:	f006 fe29 	bl	e4886 <_ZdlPvj>
   ddc34:	4620      	mov	r0, r4
   ddc36:	bd10      	pop	{r4, pc}

000ddc38 <_ZN17Adafruit_MAX31865D1Ev>:
  MAX31865_3WIRE = 1,
  MAX31865_4WIRE = 0
} max31865_numwires_t;

/*! Interface class for the MAX31865 RTD Sensor reader */
class Adafruit_MAX31865 {
   ddc38:	b510      	push	{r4, lr}
   ddc3a:	4604      	mov	r4, r0
   ddc3c:	f7fb f8f0 	bl	d8e20 <_ZN18Adafruit_SPIDeviceD1Ev>
   ddc40:	4620      	mov	r0, r4
   ddc42:	bd10      	pop	{r4, pc}

000ddc44 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   ddc44:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   ddc46:	2100      	movs	r1, #0
   ddc48:	4604      	mov	r4, r0
   ddc4a:	4608      	mov	r0, r1
   ddc4c:	f002 fff2 	bl	e0c34 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   ddc50:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   ddc52:	4620      	mov	r0, r4
   ddc54:	a901      	add	r1, sp, #4
            void* id = nullptr;
   ddc56:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   ddc58:	f003 f804 	bl	e0c64 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   ddc5c:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   ddc5e:	b10c      	cbz	r4, ddc64 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   ddc60:	2301      	movs	r3, #1
   ddc62:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   ddc64:	2100      	movs	r1, #0
   ddc66:	2001      	movs	r0, #1
   ddc68:	f002 ffe4 	bl	e0c34 <os_thread_scheduling>
            }
        }
        if (t) {
   ddc6c:	b12c      	cbz	r4, ddc7a <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   ddc6e:	6823      	ldr	r3, [r4, #0]
   ddc70:	4620      	mov	r0, r4
   ddc72:	689b      	ldr	r3, [r3, #8]
   ddc74:	4798      	blx	r3
            t->running = false;
   ddc76:	2300      	movs	r3, #0
   ddc78:	7123      	strb	r3, [r4, #4]
        }
    }
   ddc7a:	b002      	add	sp, #8
   ddc7c:	bd10      	pop	{r4, pc}

000ddc7e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   ddc7e:	b510      	push	{r4, lr}
   ddc80:	4604      	mov	r4, r0
        if (wakeupSource_) {
   ddc82:	6800      	ldr	r0, [r0, #0]
   ddc84:	b108      	cbz	r0, ddc8a <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   ddc86:	f003 fb63 	bl	e1350 <free>
class SystemClass {
   ddc8a:	4620      	mov	r0, r4
   ddc8c:	bd10      	pop	{r4, pc}

000ddc8e <_ZN10CloudClass8variableIA3_cJPbRK17CloudVariableTypeIbvEEEEbRKT_DpOT0_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   ddc8e:	2300      	movs	r3, #0
   ddc90:	2201      	movs	r2, #1
   ddc92:	f003 baad 	b.w	e11f0 <spark_variable>

000ddc96 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   ddc96:	b510      	push	{r4, lr}
      if (_M_manager)
   ddc98:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   ddc9a:	4604      	mov	r4, r0
      if (_M_manager)
   ddc9c:	b113      	cbz	r3, ddca4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   ddc9e:	2203      	movs	r2, #3
   ddca0:	4601      	mov	r1, r0
   ddca2:	4798      	blx	r3
    }
   ddca4:	4620      	mov	r0, r4
   ddca6:	bd10      	pop	{r4, pc}

000ddca8 <_ZN10CloudClass9keepAliveEj>:
    inline static void keepAlive(unsigned sec)
   ddca8:	b507      	push	{r0, r1, r2, lr}
        conn_prop.size = sizeof(conn_prop);
   ddcaa:	2208      	movs	r2, #8
        particle::protocol::connection_properties_t conn_prop = {0};
   ddcac:	2300      	movs	r3, #0
        conn_prop.size = sizeof(conn_prop);
   ddcae:	f8ad 2000 	strh.w	r2, [sp]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   ddcb2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   ddcb6:	2201      	movs	r2, #1
   ddcb8:	9201      	str	r2, [sp, #4]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   ddcba:	4341      	muls	r1, r0
   ddcbc:	466a      	mov	r2, sp
   ddcbe:	4618      	mov	r0, r3
        particle::protocol::connection_properties_t conn_prop = {0};
   ddcc0:	f8ad 3002 	strh.w	r3, [sp, #2]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   ddcc4:	f003 facc 	bl	e1260 <spark_set_connection_property>
    }
   ddcc8:	b003      	add	sp, #12
   ddcca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ddcd0 <_Z15connectionStateyi>:
  return true;
}

void connectionState(system_event_t event, int param)
{
  if (param == cloud_status_connected)
   ddcd0:	2a08      	cmp	r2, #8
{
   ddcd2:	b508      	push	{r3, lr}
  if (param == cloud_status_connected)
   ddcd4:	d106      	bne.n	ddce4 <_Z15connectionStateyi+0x14>
  {
    Particle.keepAlive(KEEP_ALIVE_PERIOD);
   ddcd6:	205a      	movs	r0, #90	; 0x5a
   ddcd8:	f7ff ffe6 	bl	ddca8 <_ZN10CloudClass9keepAliveEj>
    cloudLed.led_mode = LED_SOLID;
   ddcdc:	4b04      	ldr	r3, [pc, #16]	; (ddcf0 <_Z15connectionStateyi+0x20>)
   ddcde:	2201      	movs	r2, #1
  }

  if (param == cloud_status_disconnected)
    cloudLed.led_mode = LED_BLINK;
   ddce0:	721a      	strb	r2, [r3, #8]
}
   ddce2:	bd08      	pop	{r3, pc}
  if (param == cloud_status_disconnected)
   ddce4:	2a00      	cmp	r2, #0
   ddce6:	d1fc      	bne.n	ddce2 <_Z15connectionStateyi+0x12>
    cloudLed.led_mode = LED_BLINK;
   ddce8:	4b01      	ldr	r3, [pc, #4]	; (ddcf0 <_Z15connectionStateyi+0x20>)
   ddcea:	2202      	movs	r2, #2
   ddcec:	e7f8      	b.n	ddce0 <_Z15connectionStateyi+0x10>
   ddcee:	bf00      	nop
   ddcf0:	2003e3a4 	.word	0x2003e3a4

000ddcf4 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   ddcf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   ddcf6:	468c      	mov	ip, r1
   ddcf8:	2500      	movs	r5, #0
   ddcfa:	4914      	ldr	r1, [pc, #80]	; (ddd4c <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   ddcfc:	7105      	strb	r5, [r0, #4]
   ddcfe:	4604      	mov	r4, r0
   ddd00:	6085      	str	r5, [r0, #8]
   ddd02:	6001      	str	r1, [r0, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ddd04:	e892 0003 	ldmia.w	r2, {r0, r1}
   ddd08:	b085      	sub	sp, #20
   ddd0a:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   ddd0c:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ddd10:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   ddd14:	e896 0003 	ldmia.w	r6, {r0, r1}
   ddd18:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   ddd1c:	e897 0003 	ldmia.w	r7, {r0, r1}
   ddd20:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ddd24:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   ddd26:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   ddd28:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ddd2a:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   ddd2c:	6095      	str	r5, [r2, #8]
   ddd2e:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   ddd30:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   ddd32:	e9cd 3500 	strd	r3, r5, [sp]
   ddd36:	4a06      	ldr	r2, [pc, #24]	; (ddd50 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   ddd38:	4623      	mov	r3, r4
   ddd3a:	4661      	mov	r1, ip
   ddd3c:	f104 0008 	add.w	r0, r4, #8
   ddd40:	f002 ff80 	bl	e0c44 <os_timer_create>
    }
   ddd44:	4620      	mov	r0, r4
   ddd46:	b005      	add	sp, #20
   ddd48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ddd4a:	bf00      	nop
   ddd4c:	000e810c 	.word	0x000e810c
   ddd50:	000ddc45 	.word	0x000ddc45

000ddd54 <_ZN5Timer5_stopEjb>:
    bool _stop(unsigned block, bool fromISR=false)
   ddd54:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   ddd56:	6880      	ldr	r0, [r0, #8]
   ddd58:	2300      	movs	r3, #0
   ddd5a:	b138      	cbz	r0, ddd6c <_ZN5Timer5_stopEjb+0x18>
   ddd5c:	e9cd 1300 	strd	r1, r3, [sp]
   ddd60:	2102      	movs	r1, #2
   ddd62:	f002 ff87 	bl	e0c74 <os_timer_change>
   ddd66:	fab0 f080 	clz	r0, r0
   ddd6a:	0940      	lsrs	r0, r0, #5
    }
   ddd6c:	b003      	add	sp, #12
   ddd6e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ddd74 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   ddd74:	b538      	push	{r3, r4, r5, lr}
   ddd76:	4b10      	ldr	r3, [pc, #64]	; (dddb8 <_ZN5TimerD1Ev+0x44>)
   ddd78:	6003      	str	r3, [r0, #0]
        if (handle) {
   ddd7a:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   ddd7c:	4604      	mov	r4, r0
        if (handle) {
   ddd7e:	b1a3      	cbz	r3, dddaa <_ZN5TimerD1Ev+0x36>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   ddd80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   ddd84:	2200      	movs	r2, #0
   ddd86:	f7ff ffe5 	bl	ddd54 <_ZN5Timer5_stopEjb>
            os_timer_set_id(handle, nullptr);
   ddd8a:	68a0      	ldr	r0, [r4, #8]
   ddd8c:	2100      	movs	r1, #0
   ddd8e:	f002 ffb1 	bl	e0cf4 <os_timer_set_id>
            while (running) {
   ddd92:	7923      	ldrb	r3, [r4, #4]
   ddd94:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   ddd98:	b113      	cbz	r3, ddda0 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   ddd9a:	f002 ff43 	bl	e0c24 <os_thread_yield>
            while (running) {
   ddd9e:	e7f8      	b.n	ddd92 <_ZN5TimerD1Ev+0x1e>
            os_timer_destroy(handle, nullptr);
   ddda0:	68a0      	ldr	r0, [r4, #8]
   ddda2:	4629      	mov	r1, r5
   ddda4:	f002 ff56 	bl	e0c54 <os_timer_destroy>
            handle = nullptr;
   ddda8:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   dddaa:	f104 000c 	add.w	r0, r4, #12
   dddae:	f7ff ff72 	bl	ddc96 <_ZNSt14_Function_baseD1Ev>
    }
   dddb2:	4620      	mov	r0, r4
   dddb4:	bd38      	pop	{r3, r4, r5, pc}
   dddb6:	bf00      	nop
   dddb8:	000e810c 	.word	0x000e810c

000dddbc <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   dddbc:	b510      	push	{r4, lr}
   dddbe:	4604      	mov	r4, r0
    }
   dddc0:	f7ff ffd8 	bl	ddd74 <_ZN5TimerD1Ev>
   dddc4:	4620      	mov	r0, r4
   dddc6:	211c      	movs	r1, #28
   dddc8:	f006 fd5d 	bl	e4886 <_ZdlPvj>
   dddcc:	4620      	mov	r0, r4
   dddce:	bd10      	pop	{r4, pc}

000dddd0 <_Z11runCellTestv>:
{
   dddd0:	b570      	push	{r4, r5, r6, lr}
  Log.info("Running Cellular Tests: ");
   dddd2:	4d2c      	ldr	r5, [pc, #176]	; (dde84 <_Z11runCellTestv+0xb4>)
  String cellOperator = CellularHelper.getOperatorName();
   dddd4:	4e2c      	ldr	r6, [pc, #176]	; (dde88 <_Z11runCellTestv+0xb8>)
  Log.info("Running Cellular Tests: ");
   dddd6:	492d      	ldr	r1, [pc, #180]	; (dde8c <_Z11runCellTestv+0xbc>)
{
   dddd8:	b09c      	sub	sp, #112	; 0x70
   dddda:	4604      	mov	r4, r0
  Log.info("Running Cellular Tests: ");
   ddddc:	4628      	mov	r0, r5
   dddde:	f7fb fe6b 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
  String cellOperator = CellularHelper.getOperatorName();
   ddde2:	2209      	movs	r2, #9
   ddde4:	4631      	mov	r1, r6
   ddde6:	4620      	mov	r0, r4
   ddde8:	f001 fc5c 	bl	df6a4 <_ZNK19CellularHelperClass15getOperatorNameEi>
	StringSumHelper(const char *p) : String(p) {}
   dddec:	4928      	ldr	r1, [pc, #160]	; (dde90 <_Z11runCellTestv+0xc0>)
   dddee:	a80b      	add	r0, sp, #44	; 0x2c
   dddf0:	f005 ff0d 	bl	e3c0e <_ZN6StringC1EPKc>
  Log.info("Operator name=" + cellOperator);
   dddf4:	4621      	mov	r1, r4
   dddf6:	a80b      	add	r0, sp, #44	; 0x2c
   dddf8:	f006 f83f 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
   dddfc:	6801      	ldr	r1, [r0, #0]
   dddfe:	4628      	mov	r0, r5
   dde00:	f7fb fe5a 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
   dde04:	a80b      	add	r0, sp, #44	; 0x2c
   dde06:	f005 feb7 	bl	e3b78 <_ZN6StringD1Ev>
  CellularHelperRSSIQualResponse rssiQual = CellularHelper.getRSSIQual();
   dde0a:	4631      	mov	r1, r6
   dde0c:	a80b      	add	r0, sp, #44	; 0x2c
   dde0e:	f001 fc7b 	bl	df708 <_ZNK19CellularHelperClass11getRSSIQualEv>
  int bars = CellularHelperClass::rssiToBars(rssiQual.rssi);
   dde12:	981a      	ldr	r0, [sp, #104]	; 0x68
   dde14:	f001 fd18 	bl	df848 <_ZN19CellularHelperClass10rssiToBarsEi>
  Log.info("rssi=%d, qual=%d, bars=%d", rssiQual.rssi, rssiQual.qual, bars);
   dde18:	9000      	str	r0, [sp, #0]
   dde1a:	4628      	mov	r0, r5
	StringSumHelper(const char *p) : String(p) {}
   dde1c:	4d1d      	ldr	r5, [pc, #116]	; (dde94 <_Z11runCellTestv+0xc4>)
   dde1e:	491e      	ldr	r1, [pc, #120]	; (dde98 <_Z11runCellTestv+0xc8>)
   dde20:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   dde24:	f7fb fe48 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
   dde28:	4629      	mov	r1, r5
   dde2a:	a803      	add	r0, sp, #12
  int cellRSSI = rssiQual.rssi;
   dde2c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   dde2e:	f005 feee 	bl	e3c0e <_ZN6StringC1EPKc>
  cellOperator = ":" + cellOperator + ":" + String(cellRSSI);
   dde32:	4621      	mov	r1, r4
   dde34:	a803      	add	r0, sp, #12
   dde36:	f006 f820 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
   dde3a:	4629      	mov	r1, r5
   dde3c:	f006 f829 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   dde40:	220a      	movs	r2, #10
   dde42:	4605      	mov	r5, r0
   dde44:	4631      	mov	r1, r6
   dde46:	a807      	add	r0, sp, #28
   dde48:	f005 ff63 	bl	e3d12 <_ZN6StringC1Eih>
   dde4c:	a907      	add	r1, sp, #28
   dde4e:	4628      	mov	r0, r5
   dde50:	f006 f813 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
   dde54:	4601      	mov	r1, r0
   dde56:	4620      	mov	r0, r4
   dde58:	f005 ff15 	bl	e3c86 <_ZN6StringaSERKS_>
   dde5c:	a807      	add	r0, sp, #28
   dde5e:	f005 fe8b 	bl	e3b78 <_ZN6StringD1Ev>
class StringSumHelper : public String
   dde62:	a803      	add	r0, sp, #12
   dde64:	f005 fe88 	bl	e3b78 <_ZN6StringD1Ev>
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
   dde68:	4b0c      	ldr	r3, [pc, #48]	; (dde9c <_Z11runCellTestv+0xcc>)
   dde6a:	930b      	str	r3, [sp, #44]	; 0x2c
   dde6c:	a816      	add	r0, sp, #88	; 0x58
   dde6e:	f005 fe83 	bl	e3b78 <_ZN6StringD1Ev>
   dde72:	a812      	add	r0, sp, #72	; 0x48
   dde74:	f005 fe80 	bl	e3b78 <_ZN6StringD1Ev>
   dde78:	a80e      	add	r0, sp, #56	; 0x38
   dde7a:	f005 fe7d 	bl	e3b78 <_ZN6StringD1Ev>
}
   dde7e:	4620      	mov	r0, r4
   dde80:	b01c      	add	sp, #112	; 0x70
   dde82:	bd70      	pop	{r4, r5, r6, pc}
   dde84:	2003e61c 	.word	0x2003e61c
   dde88:	2003e5c0 	.word	0x2003e5c0
   dde8c:	000e7b77 	.word	0x000e7b77
   dde90:	000e7b90 	.word	0x000e7b90
   dde94:	000e73f5 	.word	0x000e73f5
   dde98:	000e7b9f 	.word	0x000e7b9f
   dde9c:	000e82b0 	.word	0x000e82b0

000ddea0 <_Z14readUfsMetricsv>:
{
   ddea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (iterator > 8) iterator = 0;
   ddea2:	4c1c      	ldr	r4, [pc, #112]	; (ddf14 <_Z14readUfsMetricsv+0x74>)
  Log.trace("Reading UFS...");
   ddea4:	491c      	ldr	r1, [pc, #112]	; (ddf18 <_Z14readUfsMetricsv+0x78>)
   ddea6:	481d      	ldr	r0, [pc, #116]	; (ddf1c <_Z14readUfsMetricsv+0x7c>)
  commLed.led_mode = LED_SOLID;
   ddea8:	4e1d      	ldr	r6, [pc, #116]	; (ddf20 <_Z14readUfsMetricsv+0x80>)
  Log.trace("Reading UFS...");
   ddeaa:	f7fd fb53 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>
  if (iterator > 8) iterator = 0;
   ddeae:	7823      	ldrb	r3, [r4, #0]
   ddeb0:	2b08      	cmp	r3, #8
   ddeb2:	bf84      	itt	hi
   ddeb4:	2300      	movhi	r3, #0
   ddeb6:	7023      	strbhi	r3, [r4, #0]
  commLed.ledRoutine();
   ddeb8:	4630      	mov	r0, r6
  commLed.led_mode = LED_SOLID;
   ddeba:	2301      	movs	r3, #1
   ddebc:	7233      	strb	r3, [r6, #8]
  commLed.ledRoutine();
   ddebe:	f7ff f961 	bl	dd184 <_ZN3LED10ledRoutineEv>
  int8_t error_code = getUfsMetrics();
   ddec2:	f7ff fdff 	bl	ddac4 <_Z13getUfsMetricsv>
    commLed.led_mode = LED_BLINK_ERROR;
   ddec6:	1c43      	adds	r3, r0, #1
  int8_t error_code = getUfsMetrics();
   ddec8:	4605      	mov	r5, r0
  gx_interval.ufs_fuelLevel[iterator] = fuelSensor.selected_fuel_level_metric ? (double)fuelSensor.getVoltage() : (double)fuelSensor.getDistance();
   ddeca:	4816      	ldr	r0, [pc, #88]	; (ddf24 <_Z14readUfsMetricsv+0x84>)
    commLed.led_mode = LED_BLINK_ERROR;
   ddecc:	bf14      	ite	ne
   ddece:	2300      	movne	r3, #0
   dded0:	2303      	moveq	r3, #3
   dded2:	7233      	strb	r3, [r6, #8]
  gx_interval.ufs_fuelLevel[iterator] = fuelSensor.selected_fuel_level_metric ? (double)fuelSensor.getVoltage() : (double)fuelSensor.getDistance();
   dded4:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   dded8:	b1cb      	cbz	r3, ddf0e <_Z14readUfsMetricsv+0x6e>
   ddeda:	f7ff fc65 	bl	dd7a8 <_ZN3UFS10getVoltageEv>
   ddede:	ee10 0a10 	vmov	r0, s0
   ddee2:	f006 fe9b 	bl	e4c1c <__aeabi_f2d>
   ddee6:	4e10      	ldr	r6, [pc, #64]	; (ddf28 <_Z14readUfsMetricsv+0x88>)
   ddee8:	7827      	ldrb	r7, [r4, #0]
   ddeea:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
   ddeee:	e9c3 011e 	strd	r0, r1, [r3, #120]	; 0x78
  gx_interval.ufs_temp[iterator] = fuelSensor.getSensorTemperature();
   ddef2:	480c      	ldr	r0, [pc, #48]	; (ddf24 <_Z14readUfsMetricsv+0x84>)
   ddef4:	f7ff fc6c 	bl	dd7d0 <_ZN3UFS20getSensorTemperatureEv>
   ddef8:	eb06 0687 	add.w	r6, r6, r7, lsl #2
   ddefc:	ed86 0a32 	vstr	s0, [r6, #200]	; 0xc8
  clearUfsBuffer();
   ddf00:	f7ff fe54 	bl	ddbac <_Z14clearUfsBufferv>
  iterator++;
   ddf04:	7823      	ldrb	r3, [r4, #0]
   ddf06:	3301      	adds	r3, #1
   ddf08:	7023      	strb	r3, [r4, #0]
}
   ddf0a:	4628      	mov	r0, r5
   ddf0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  gx_interval.ufs_fuelLevel[iterator] = fuelSensor.selected_fuel_level_metric ? (double)fuelSensor.getVoltage() : (double)fuelSensor.getDistance();
   ddf0e:	f7ff fc35 	bl	dd77c <_ZN3UFS11getDistanceEv>
   ddf12:	e7e4      	b.n	ddede <_Z14readUfsMetricsv+0x3e>
   ddf14:	2003e382 	.word	0x2003e382
   ddf18:	000e7bb9 	.word	0x000e7bb9
   ddf1c:	2003e61c 	.word	0x2003e61c
   ddf20:	2003e3b0 	.word	0x2003e3b0
   ddf24:	2003e3cc 	.word	0x2003e3cc
   ddf28:	2003d7c0 	.word	0x2003d7c0

000ddf2c <_Z17sampleADCReadingsv>:
{
   ddf2c:	b570      	push	{r4, r5, r6, lr}
  if (array_iterator > MAX_ITERATOR_VAL) array_iterator = 0;
   ddf2e:	4c23      	ldr	r4, [pc, #140]	; (ddfbc <_Z17sampleADCReadingsv+0x90>)
  Log.trace("Sampling ADC..");
   ddf30:	4923      	ldr	r1, [pc, #140]	; (ddfc0 <_Z17sampleADCReadingsv+0x94>)
   ddf32:	4824      	ldr	r0, [pc, #144]	; (ddfc4 <_Z17sampleADCReadingsv+0x98>)
  gx_interval.fuelLevel[array_iterator] = (double)getFuelVoltage();
   ddf34:	4d24      	ldr	r5, [pc, #144]	; (ddfc8 <_Z17sampleADCReadingsv+0x9c>)
  Log.trace("Sampling ADC..");
   ddf36:	f7fd fb0d 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>
  if (array_iterator > MAX_ITERATOR_VAL) array_iterator = 0;
   ddf3a:	7823      	ldrb	r3, [r4, #0]
   ddf3c:	2b08      	cmp	r3, #8
   ddf3e:	bf84      	itt	hi
   ddf40:	2300      	movhi	r3, #0
   ddf42:	7023      	strbhi	r3, [r4, #0]
  gx_interval.fuelLevel[array_iterator] = (double)getFuelVoltage();
   ddf44:	f7fd f932 	bl	db1ac <_Z14getFuelVoltagev>
   ddf48:	ee10 0a10 	vmov	r0, s0
   ddf4c:	f006 fe66 	bl	e4c1c <__aeabi_f2d>
   ddf50:	7823      	ldrb	r3, [r4, #0]
   ddf52:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   ddf56:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
  fuel_val = gx_interval.fuelLevel[array_iterator];
   ddf5a:	4b1c      	ldr	r3, [pc, #112]	; (ddfcc <_Z17sampleADCReadingsv+0xa0>)
   ddf5c:	e9c3 0100 	strd	r0, r1, [r3]
  gx_interval.voltage[array_iterator] = (double)getBattVoltage();
   ddf60:	f7fd f8fc 	bl	db15c <_Z14getBattVoltagev>
   ddf64:	ee10 0a10 	vmov	r0, s0
   ddf68:	f006 fe58 	bl	e4c1c <__aeabi_f2d>
   ddf6c:	7826      	ldrb	r6, [r4, #0]
   ddf6e:	eb05 03c6 	add.w	r3, r5, r6, lsl #3
   ddf72:	e9c3 013c 	strd	r0, r1, [r3, #240]	; 0xf0
  batt_val = gx_interval.voltage[array_iterator];
   ddf76:	4b16      	ldr	r3, [pc, #88]	; (ddfd0 <_Z17sampleADCReadingsv+0xa4>)
   ddf78:	e9c3 0100 	strd	r0, r1, [r3]
  gx_interval.thermcpl_RTD[array_iterator] = checkTemperature();
   ddf7c:	f7fd f882 	bl	db084 <_Z16checkTemperaturev>
   ddf80:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   ddf84:	ed86 0a5a 	vstr	s0, [r6, #360]	; 0x168
  gx_interval.pyr_value[array_iterator] = (double)getPyranomterReadings();
   ddf88:	7826      	ldrb	r6, [r4, #0]
   ddf8a:	f7fd f939 	bl	db200 <_Z21getPyranomterReadingsv>
  pyr_val = gx_interval.pyr_value[array_iterator];
   ddf8e:	7823      	ldrb	r3, [r4, #0]
  gx_interval.pyr_value[array_iterator] = (double)getPyranomterReadings();
   ddf90:	eb05 0686 	add.w	r6, r5, r6, lsl #2
  pyr_val = gx_interval.pyr_value[array_iterator];
   ddf94:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  gx_interval.pyr_value[array_iterator] = (double)getPyranomterReadings();
   ddf98:	ed86 0a50 	vstr	s0, [r6, #320]	; 0x140
  pyr_val = gx_interval.pyr_value[array_iterator];
   ddf9c:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
   ddfa0:	f006 fe3c 	bl	e4c1c <__aeabi_f2d>
   ddfa4:	4b0b      	ldr	r3, [pc, #44]	; (ddfd4 <_Z17sampleADCReadingsv+0xa8>)
   ddfa6:	e9c3 0100 	strd	r0, r1, [r3]
  gx_interval.ts[array_iterator] = Time.now(); // update the timeStamp counter
   ddfaa:	f006 f8dd 	bl	e4168 <_ZN9TimeClass3nowEv>
   ddfae:	7823      	ldrb	r3, [r4, #0]
   ddfb0:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
  array_iterator++;
   ddfb4:	3301      	adds	r3, #1
   ddfb6:	7023      	strb	r3, [r4, #0]
}
   ddfb8:	bd70      	pop	{r4, r5, r6, pc}
   ddfba:	bf00      	nop
   ddfbc:	2003e397 	.word	0x2003e397
   ddfc0:	000e7bc8 	.word	0x000e7bc8
   ddfc4:	2003e61c 	.word	0x2003e61c
   ddfc8:	2003d7c0 	.word	0x2003d7c0
   ddfcc:	2003e448 	.word	0x2003e448
   ddfd0:	2003e398 	.word	0x2003e398
   ddfd4:	2003e4a0 	.word	0x2003e4a0

000ddfd8 <_Z21saveAndPublishMetricsR6String>:
    pub_gx_intervls_flag = false;
  } 
}

void saveAndPublishMetrics(String &metric_to_publish)
{
   ddfd8:	b530      	push	{r4, r5, lr}
  if (!use_flash){
   ddfda:	4b43      	ldr	r3, [pc, #268]	; (de0e8 <_Z21saveAndPublishMetricsR6String+0x110>)
   ddfdc:	781b      	ldrb	r3, [r3, #0]
{
   ddfde:	b089      	sub	sp, #36	; 0x24
   ddfe0:	4604      	mov	r4, r0
  if (!use_flash){
   ddfe2:	b923      	cbnz	r3, ddfee <_Z21saveAndPublishMetricsR6String+0x16>
    publishAndLogMetrics(metric_to_publish, "GX Metric published successfully, but not saved to flash.");
   ddfe4:	4941      	ldr	r1, [pc, #260]	; (de0ec <_Z21saveAndPublishMetricsR6String+0x114>)
   ddfe6:	f7fd fc27 	bl	db838 <_Z20publishAndLogMetricsR6StringPKc>
    else if(result == SPIFFS_INTERNET_CONN_LOST)
    {
      Log.error("Metric publishing stopped due to connection loss!");
    }
  }
}
   ddfea:	b009      	add	sp, #36	; 0x24
   ddfec:	bd30      	pop	{r4, r5, pc}
  String metric_name = GXMetrics.saveGXMetrics(metric_to_publish).c_str();
   ddfee:	4602      	mov	r2, r0
   ddff0:	493f      	ldr	r1, [pc, #252]	; (de0f0 <_Z21saveAndPublishMetricsR6String+0x118>)
   ddff2:	a804      	add	r0, sp, #16
   ddff4:	f7fd fe56 	bl	dbca4 <_ZN8GXSpiffs13saveGXMetricsER6String>
   ddff8:	9904      	ldr	r1, [sp, #16]
   ddffa:	4668      	mov	r0, sp
   ddffc:	f005 fe07 	bl	e3c0e <_ZN6StringC1EPKc>
   de000:	a804      	add	r0, sp, #16
   de002:	f005 fdb9 	bl	e3b78 <_ZN6StringD1Ev>
  if (metric_name == String(SPIFFS_FAIL))
   de006:	220a      	movs	r2, #10
   de008:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   de00c:	a804      	add	r0, sp, #16
   de00e:	f005 fe80 	bl	e3d12 <_ZN6StringC1Eih>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   de012:	a904      	add	r1, sp, #16
   de014:	4668      	mov	r0, sp
   de016:	f005 ff66 	bl	e3ee6 <_ZNK6String6equalsERKS_>
   de01a:	4605      	mov	r5, r0
   de01c:	a804      	add	r0, sp, #16
   de01e:	f005 fdab 	bl	e3b78 <_ZN6StringD1Ev>
   de022:	b1ed      	cbz	r5, de060 <_Z21saveAndPublishMetricsR6String+0x88>
    Log.error("Failed to save GX Metric to flash");
   de024:	4933      	ldr	r1, [pc, #204]	; (de0f4 <_Z21saveAndPublishMetricsR6String+0x11c>)
   de026:	4834      	ldr	r0, [pc, #208]	; (de0f8 <_Z21saveAndPublishMetricsR6String+0x120>)
   de028:	f7fd faa3 	bl	db572 <_ZNK5spark6Logger5errorEPKcz>
    if(!publishAndLogMetrics(metric_to_publish, "GX Metric published successfully, but not saved to flash."))
   de02c:	492f      	ldr	r1, [pc, #188]	; (de0ec <_Z21saveAndPublishMetricsR6String+0x114>)
   de02e:	4620      	mov	r0, r4
   de030:	f7fd fc02 	bl	db838 <_Z20publishAndLogMetricsR6StringPKc>
   de034:	b918      	cbnz	r0, de03e <_Z21saveAndPublishMetricsR6String+0x66>
      Log.error("GX Metric was neither saved nor published!!");
   de036:	4931      	ldr	r1, [pc, #196]	; (de0fc <_Z21saveAndPublishMetricsR6String+0x124>)
   de038:	482f      	ldr	r0, [pc, #188]	; (de0f8 <_Z21saveAndPublishMetricsR6String+0x120>)
   de03a:	f7fd fa9a 	bl	db572 <_ZNK5spark6Logger5errorEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   de03e:	f003 f8f7 	bl	e1230 <spark_cloud_flag_connected>
  if (Particle.connected())
   de042:	b148      	cbz	r0, de058 <_Z21saveAndPublishMetricsR6String+0x80>
    s16_t result = GXMetrics.sendSavedMetrics(last_saved_metric);
   de044:	492e      	ldr	r1, [pc, #184]	; (de100 <_Z21saveAndPublishMetricsR6String+0x128>)
   de046:	482a      	ldr	r0, [pc, #168]	; (de0f0 <_Z21saveAndPublishMetricsR6String+0x118>)
   de048:	f7fe f898 	bl	dc17c <_ZN8GXSpiffs16sendSavedMetricsEPKc>
    if (result == SPIFFS_OK)
   de04c:	2800      	cmp	r0, #0
   de04e:	d13b      	bne.n	de0c8 <_Z21saveAndPublishMetricsR6String+0xf0>
      Log.trace("Saved GX Metrics Successfully Sent to Cloud.");
   de050:	492c      	ldr	r1, [pc, #176]	; (de104 <_Z21saveAndPublishMetricsR6String+0x12c>)
      Log.trace("Nothing to do.");
   de052:	4829      	ldr	r0, [pc, #164]	; (de0f8 <_Z21saveAndPublishMetricsR6String+0x120>)
   de054:	f7fd fa7e 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>
  String metric_name = GXMetrics.saveGXMetrics(metric_to_publish).c_str();
   de058:	4668      	mov	r0, sp
   de05a:	f005 fd8d 	bl	e3b78 <_ZN6StringD1Ev>
   de05e:	e7c4      	b.n	ddfea <_Z21saveAndPublishMetricsR6String+0x12>
    Log.info("GX Metric '%s' saved to flash successfully!", metric_name.c_str());
   de060:	9a00      	ldr	r2, [sp, #0]
   de062:	4929      	ldr	r1, [pc, #164]	; (de108 <_Z21saveAndPublishMetricsR6String+0x130>)
   de064:	4824      	ldr	r0, [pc, #144]	; (de0f8 <_Z21saveAndPublishMetricsR6String+0x120>)
   de066:	f7fb fd27 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
    if(!strcmp(last_saved_metric, last_published_metric))
   de06a:	4928      	ldr	r1, [pc, #160]	; (de10c <_Z21saveAndPublishMetricsR6String+0x134>)
   de06c:	4824      	ldr	r0, [pc, #144]	; (de100 <_Z21saveAndPublishMetricsR6String+0x128>)
   de06e:	f007 fb62 	bl	e5736 <strcmp>
   de072:	4605      	mov	r5, r0
   de074:	b9b8      	cbnz	r0, de0a6 <_Z21saveAndPublishMetricsR6String+0xce>
      if (publishAndLogMetrics(metric_to_publish,"GX Metric published successfully."))
   de076:	4926      	ldr	r1, [pc, #152]	; (de110 <_Z21saveAndPublishMetricsR6String+0x138>)
   de078:	4620      	mov	r0, r4
   de07a:	f7fd fbdd 	bl	db838 <_Z20publishAndLogMetricsR6StringPKc>
   de07e:	b1f0      	cbz	r0, de0be <_Z21saveAndPublishMetricsR6String+0xe6>
        memset(last_published_metric, '\0', sizeof(last_published_metric));
   de080:	2214      	movs	r2, #20
   de082:	4629      	mov	r1, r5
   de084:	4821      	ldr	r0, [pc, #132]	; (de10c <_Z21saveAndPublishMetricsR6String+0x134>)
   de086:	f007 fb13 	bl	e56b0 <memset>
        strncpy(last_published_metric, metric_name.c_str(), metric_name.length() + 1);
   de08a:	9a02      	ldr	r2, [sp, #8]
   de08c:	9900      	ldr	r1, [sp, #0]
   de08e:	481f      	ldr	r0, [pc, #124]	; (de10c <_Z21saveAndPublishMetricsR6String+0x134>)
   de090:	3201      	adds	r2, #1
   de092:	f007 fb9a 	bl	e57ca <strncpy>
        EEPROM.put(EEPROM_ADDR_LAST_PUBL_METRIC, last_published_metric);
   de096:	f006 fb5b 	bl	e4750 <_Z21__fetch_global_EEPROMv>
   de09a:	491c      	ldr	r1, [pc, #112]	; (de10c <_Z21saveAndPublishMetricsR6String+0x134>)
   de09c:	2214      	movs	r2, #20
   de09e:	f240 200b 	movw	r0, #523	; 0x20b
   de0a2:	f002 fe57 	bl	e0d54 <HAL_EEPROM_Put>
    memset(last_saved_metric, '\0', sizeof(last_saved_metric));
   de0a6:	2214      	movs	r2, #20
   de0a8:	2100      	movs	r1, #0
   de0aa:	4815      	ldr	r0, [pc, #84]	; (de100 <_Z21saveAndPublishMetricsR6String+0x128>)
   de0ac:	f007 fb00 	bl	e56b0 <memset>
    strncpy(last_saved_metric, metric_name.c_str(), metric_name.length() + 1);
   de0b0:	9a02      	ldr	r2, [sp, #8]
   de0b2:	9900      	ldr	r1, [sp, #0]
   de0b4:	4812      	ldr	r0, [pc, #72]	; (de100 <_Z21saveAndPublishMetricsR6String+0x128>)
   de0b6:	3201      	adds	r2, #1
   de0b8:	f007 fb87 	bl	e57ca <strncpy>
   de0bc:	e7bf      	b.n	de03e <_Z21saveAndPublishMetricsR6String+0x66>
      else{ Log.error("Internet not available! GX Metric only saved not published!");}
   de0be:	4915      	ldr	r1, [pc, #84]	; (de114 <_Z21saveAndPublishMetricsR6String+0x13c>)
   de0c0:	480d      	ldr	r0, [pc, #52]	; (de0f8 <_Z21saveAndPublishMetricsR6String+0x120>)
   de0c2:	f7fd fa56 	bl	db572 <_ZNK5spark6Logger5errorEPKcz>
   de0c6:	e7ee      	b.n	de0a6 <_Z21saveAndPublishMetricsR6String+0xce>
    else if (result == SPIFFS_NO_SAVED_METRICS_TO_PUBLISH)
   de0c8:	2801      	cmp	r0, #1
   de0ca:	d101      	bne.n	de0d0 <_Z21saveAndPublishMetricsR6String+0xf8>
      Log.trace("Nothing to do.");
   de0cc:	4912      	ldr	r1, [pc, #72]	; (de118 <_Z21saveAndPublishMetricsR6String+0x140>)
   de0ce:	e7c0      	b.n	de052 <_Z21saveAndPublishMetricsR6String+0x7a>
    else if(result == SPIFFS_MAX_SAVED_METRICS_PUBLISHED)
   de0d0:	2802      	cmp	r0, #2
   de0d2:	d101      	bne.n	de0d8 <_Z21saveAndPublishMetricsR6String+0x100>
      Log.trace("Will resume publishing in next loop!");
   de0d4:	4911      	ldr	r1, [pc, #68]	; (de11c <_Z21saveAndPublishMetricsR6String+0x144>)
   de0d6:	e7bc      	b.n	de052 <_Z21saveAndPublishMetricsR6String+0x7a>
    else if(result == SPIFFS_INTERNET_CONN_LOST)
   de0d8:	2803      	cmp	r0, #3
   de0da:	d1bd      	bne.n	de058 <_Z21saveAndPublishMetricsR6String+0x80>
      Log.error("Metric publishing stopped due to connection loss!");
   de0dc:	4910      	ldr	r1, [pc, #64]	; (de120 <_Z21saveAndPublishMetricsR6String+0x148>)
   de0de:	4806      	ldr	r0, [pc, #24]	; (de0f8 <_Z21saveAndPublishMetricsR6String+0x120>)
   de0e0:	f7fd fa47 	bl	db572 <_ZNK5spark6Logger5errorEPKcz>
   de0e4:	e7b8      	b.n	de058 <_Z21saveAndPublishMetricsR6String+0x80>
   de0e6:	bf00      	nop
   de0e8:	2003d980 	.word	0x2003d980
   de0ec:	000e7bd7 	.word	0x000e7bd7
   de0f0:	2003e298 	.word	0x2003e298
   de0f4:	000e7c11 	.word	0x000e7c11
   de0f8:	2003e61c 	.word	0x2003e61c
   de0fc:	000e7c33 	.word	0x000e7c33
   de100:	2003e383 	.word	0x2003e383
   de104:	000e7ce9 	.word	0x000e7ce9
   de108:	000e7c5f 	.word	0x000e7c5f
   de10c:	2003e467 	.word	0x2003e467
   de110:	000e7c8b 	.word	0x000e7c8b
   de114:	000e7cad 	.word	0x000e7cad
   de118:	000e7d16 	.word	0x000e7d16
   de11c:	000e7d25 	.word	0x000e7d25
   de120:	000e7d4a 	.word	0x000e7d4a

000de124 <_Z18publishDeviceState18HiResSensorReading>:
{
   de124:	b084      	sub	sp, #16
   de126:	b570      	push	{r4, r5, r6, lr}
   de128:	b09c      	sub	sp, #112	; 0x70
   de12a:	ac20      	add	r4, sp, #128	; 0x80
   de12c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  String cellInfo = runCellTest();
   de130:	4668      	mov	r0, sp
   de132:	f7ff fe4d 	bl	dddd0 <_Z11runCellTestv>
  String jsonString = "{\"v\":\"1\",";
   de136:	496a      	ldr	r1, [pc, #424]	; (de2e0 <_Z18publishDeviceState18HiResSensorReading+0x1bc>)
	StringSumHelper(const char *p) : String(p) {}
   de138:	4d6a      	ldr	r5, [pc, #424]	; (de2e4 <_Z18publishDeviceState18HiResSensorReading+0x1c0>)
  jsonString += (":" + String(!data_interval.bin_input1) + "," + String(!data_interval.bin_input2) + "," + String(!data_interval.bin_input3) + "," + String(!data_interval.bin_input4));
   de13a:	4c6b      	ldr	r4, [pc, #428]	; (de2e8 <_Z18publishDeviceState18HiResSensorReading+0x1c4>)
  String jsonString = "{\"v\":\"1\",";
   de13c:	a804      	add	r0, sp, #16
   de13e:	f005 fd66 	bl	e3c0e <_ZN6StringC1EPKc>
   de142:	496a      	ldr	r1, [pc, #424]	; (de2ec <_Z18publishDeviceState18HiResSensorReading+0x1c8>)
   de144:	a818      	add	r0, sp, #96	; 0x60
   de146:	f005 fd62 	bl	e3c0e <_ZN6StringC1EPKc>
  jsonString += ("\"device\":\"" + String(Time.now()));
   de14a:	f006 f80d 	bl	e4168 <_ZN9TimeClass3nowEv>
   de14e:	220a      	movs	r2, #10
   de150:	4601      	mov	r1, r0
   de152:	a814      	add	r0, sp, #80	; 0x50
   de154:	f005 fe03 	bl	e3d5e <_ZN6StringC1Elh>
   de158:	a914      	add	r1, sp, #80	; 0x50
   de15a:	a818      	add	r0, sp, #96	; 0x60
   de15c:	f005 fe8d 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
   de160:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   de162:	a804      	add	r0, sp, #16
   de164:	f005 fe67 	bl	e3e36 <_ZN6String6concatERKS_>
   de168:	a814      	add	r0, sp, #80	; 0x50
   de16a:	f005 fd05 	bl	e3b78 <_ZN6StringD1Ev>
class StringSumHelper : public String
   de16e:	a818      	add	r0, sp, #96	; 0x60
   de170:	f005 fd02 	bl	e3b78 <_ZN6StringD1Ev>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   de174:	4669      	mov	r1, sp
   de176:	a804      	add	r0, sp, #16
   de178:	f005 fe5d 	bl	e3e36 <_ZN6String6concatERKS_>
	StringSumHelper(const char *p) : String(p) {}
   de17c:	4629      	mov	r1, r5
   de17e:	a818      	add	r0, sp, #96	; 0x60
   de180:	f005 fd45 	bl	e3c0e <_ZN6StringC1EPKc>
  jsonString += (":" + String(fuel.getNormalizedSoC(), 1));
   de184:	485a      	ldr	r0, [pc, #360]	; (de2f0 <_Z18publishDeviceState18HiResSensorReading+0x1cc>)
   de186:	f003 fdaf 	bl	e1ce8 <_ZN9FuelGauge16getNormalizedSoCEv>
   de18a:	2101      	movs	r1, #1
   de18c:	a814      	add	r0, sp, #80	; 0x50
   de18e:	f005 fe0d 	bl	e3dac <_ZN6StringC1Efi>
   de192:	a914      	add	r1, sp, #80	; 0x50
   de194:	a818      	add	r0, sp, #96	; 0x60
   de196:	f005 fe70 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
   de19a:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   de19c:	a804      	add	r0, sp, #16
   de19e:	f005 fe4a 	bl	e3e36 <_ZN6String6concatERKS_>
   de1a2:	a814      	add	r0, sp, #80	; 0x50
   de1a4:	f005 fce8 	bl	e3b78 <_ZN6StringD1Ev>
class StringSumHelper : public String
   de1a8:	a818      	add	r0, sp, #96	; 0x60
   de1aa:	f005 fce5 	bl	e3b78 <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
   de1ae:	4629      	mov	r1, r5
   de1b0:	a80c      	add	r0, sp, #48	; 0x30
   de1b2:	f005 fd2c 	bl	e3c0e <_ZN6StringC1EPKc>
  jsonString += (":" + String(!data_interval.bin_input1) + "," + String(!data_interval.bin_input2) + "," + String(!data_interval.bin_input3) + "," + String(!data_interval.bin_input4));
   de1b6:	f89d 123b 	ldrb.w	r1, [sp, #571]	; 0x23b
   de1ba:	220a      	movs	r2, #10
   de1bc:	f081 0101 	eor.w	r1, r1, #1
   de1c0:	a808      	add	r0, sp, #32
   de1c2:	f005 fda6 	bl	e3d12 <_ZN6StringC1Eih>
   de1c6:	a908      	add	r1, sp, #32
   de1c8:	a80c      	add	r0, sp, #48	; 0x30
   de1ca:	f005 fe56 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
   de1ce:	4621      	mov	r1, r4
   de1d0:	f005 fe5f 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   de1d4:	f89d 123a 	ldrb.w	r1, [sp, #570]	; 0x23a
   de1d8:	220a      	movs	r2, #10
   de1da:	4606      	mov	r6, r0
   de1dc:	f081 0101 	eor.w	r1, r1, #1
   de1e0:	a810      	add	r0, sp, #64	; 0x40
   de1e2:	f005 fd96 	bl	e3d12 <_ZN6StringC1Eih>
   de1e6:	a910      	add	r1, sp, #64	; 0x40
   de1e8:	4630      	mov	r0, r6
   de1ea:	f005 fe46 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
   de1ee:	4621      	mov	r1, r4
   de1f0:	f005 fe4f 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   de1f4:	f89d 1239 	ldrb.w	r1, [sp, #569]	; 0x239
   de1f8:	220a      	movs	r2, #10
   de1fa:	4606      	mov	r6, r0
   de1fc:	f081 0101 	eor.w	r1, r1, #1
   de200:	a814      	add	r0, sp, #80	; 0x50
   de202:	f005 fd86 	bl	e3d12 <_ZN6StringC1Eih>
   de206:	a914      	add	r1, sp, #80	; 0x50
   de208:	4630      	mov	r0, r6
   de20a:	f005 fe36 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
   de20e:	4621      	mov	r1, r4
   de210:	f005 fe3f 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   de214:	f89d 1238 	ldrb.w	r1, [sp, #568]	; 0x238
   de218:	220a      	movs	r2, #10
   de21a:	4606      	mov	r6, r0
   de21c:	f081 0101 	eor.w	r1, r1, #1
   de220:	a818      	add	r0, sp, #96	; 0x60
   de222:	f005 fd76 	bl	e3d12 <_ZN6StringC1Eih>
   de226:	a918      	add	r1, sp, #96	; 0x60
   de228:	4630      	mov	r0, r6
   de22a:	f005 fe26 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
   de22e:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   de230:	a804      	add	r0, sp, #16
   de232:	f005 fe00 	bl	e3e36 <_ZN6String6concatERKS_>
   de236:	a818      	add	r0, sp, #96	; 0x60
   de238:	f005 fc9e 	bl	e3b78 <_ZN6StringD1Ev>
   de23c:	a814      	add	r0, sp, #80	; 0x50
   de23e:	f005 fc9b 	bl	e3b78 <_ZN6StringD1Ev>
   de242:	a810      	add	r0, sp, #64	; 0x40
   de244:	f005 fc98 	bl	e3b78 <_ZN6StringD1Ev>
  portExpander.digitalRead(RLY1_pin, &RLY1_stat);
   de248:	4e2a      	ldr	r6, [pc, #168]	; (de2f4 <_Z18publishDeviceState18HiResSensorReading+0x1d0>)
  jsonString += (":" + String(!data_interval.bin_input1) + "," + String(!data_interval.bin_input2) + "," + String(!data_interval.bin_input3) + "," + String(!data_interval.bin_input4));
   de24a:	a808      	add	r0, sp, #32
   de24c:	f005 fc94 	bl	e3b78 <_ZN6StringD1Ev>
class StringSumHelper : public String
   de250:	a80c      	add	r0, sp, #48	; 0x30
   de252:	f005 fc91 	bl	e3b78 <_ZN6StringD1Ev>
  portExpander.digitalRead(RLY1_pin, &RLY1_stat);
   de256:	aa08      	add	r2, sp, #32
   de258:	2107      	movs	r1, #7
   de25a:	4630      	mov	r0, r6
   de25c:	f002 fcb1 	bl	e0bc2 <_ZN7TCA953511digitalReadEtPb>
  portExpander.digitalRead(RLY2_pin, &RLY2_stat);
   de260:	aa0c      	add	r2, sp, #48	; 0x30
   de262:	2106      	movs	r1, #6
   de264:	4630      	mov	r0, r6
   de266:	f002 fcac 	bl	e0bc2 <_ZN7TCA953511digitalReadEtPb>
	StringSumHelper(const char *p) : String(p) {}
   de26a:	4629      	mov	r1, r5
   de26c:	a814      	add	r0, sp, #80	; 0x50
   de26e:	f005 fcce 	bl	e3c0e <_ZN6StringC1EPKc>
  jsonString += (":" + String(RLY1_stat) + "," + String(RLY2_stat));
   de272:	220a      	movs	r2, #10
   de274:	f89d 1020 	ldrb.w	r1, [sp, #32]
   de278:	a810      	add	r0, sp, #64	; 0x40
   de27a:	f005 fd4a 	bl	e3d12 <_ZN6StringC1Eih>
   de27e:	a910      	add	r1, sp, #64	; 0x40
   de280:	a814      	add	r0, sp, #80	; 0x50
   de282:	f005 fdfa 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
   de286:	4621      	mov	r1, r4
   de288:	f005 fe03 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   de28c:	220a      	movs	r2, #10
   de28e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   de292:	4604      	mov	r4, r0
   de294:	a818      	add	r0, sp, #96	; 0x60
   de296:	f005 fd3c 	bl	e3d12 <_ZN6StringC1Eih>
   de29a:	a918      	add	r1, sp, #96	; 0x60
   de29c:	4620      	mov	r0, r4
   de29e:	f005 fdec 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
   de2a2:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   de2a4:	a804      	add	r0, sp, #16
   de2a6:	f005 fdc6 	bl	e3e36 <_ZN6String6concatERKS_>
   de2aa:	a818      	add	r0, sp, #96	; 0x60
   de2ac:	f005 fc64 	bl	e3b78 <_ZN6StringD1Ev>
   de2b0:	a810      	add	r0, sp, #64	; 0x40
   de2b2:	f005 fc61 	bl	e3b78 <_ZN6StringD1Ev>
class StringSumHelper : public String
   de2b6:	a814      	add	r0, sp, #80	; 0x50
   de2b8:	f005 fc5e 	bl	e3b78 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   de2bc:	490e      	ldr	r1, [pc, #56]	; (de2f8 <_Z18publishDeviceState18HiResSensorReading+0x1d4>)
   de2be:	a804      	add	r0, sp, #16
   de2c0:	f005 fdbd 	bl	e3e3e <_ZN6String6concatEPKc>
  saveAndPublishMetrics(jsonString);
   de2c4:	a804      	add	r0, sp, #16
   de2c6:	f7ff fe87 	bl	ddfd8 <_Z21saveAndPublishMetricsR6String>
  String jsonString = "{\"v\":\"1\",";
   de2ca:	a804      	add	r0, sp, #16
   de2cc:	f005 fc54 	bl	e3b78 <_ZN6StringD1Ev>
  String cellInfo = runCellTest();
   de2d0:	4668      	mov	r0, sp
   de2d2:	f005 fc51 	bl	e3b78 <_ZN6StringD1Ev>
}
   de2d6:	b01c      	add	sp, #112	; 0x70
   de2d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   de2dc:	b004      	add	sp, #16
   de2de:	4770      	bx	lr
   de2e0:	000e7d7c 	.word	0x000e7d7c
   de2e4:	000e73f5 	.word	0x000e73f5
   de2e8:	000e7d84 	.word	0x000e7d84
   de2ec:	000e7d86 	.word	0x000e7d86
   de2f0:	2003e3c4 	.word	0x2003e3c4
   de2f4:	2003e48a 	.word	0x2003e48a
   de2f8:	000e71a2 	.word	0x000e71a2

000de2fc <_Z20publishSensorMetrics18HiResSensorReading>:
{
   de2fc:	b084      	sub	sp, #16
   de2fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   de302:	b0b4      	sub	sp, #208	; 0xd0
   de304:	ac3c      	add	r4, sp, #240	; 0xf0
  String dataString[ADC_counter], dataString_sum;
   de306:	4d89      	ldr	r5, [pc, #548]	; (de52c <_Z20publishSensorMetrics18HiResSensorReading+0x230>)
{
   de308:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   de30c:	2400      	movs	r4, #0
  String dataString[ADC_counter], dataString_sum;
   de30e:	ab0c      	add	r3, sp, #48	; 0x30
   de310:	1918      	adds	r0, r3, r4
   de312:	4629      	mov	r1, r5
   de314:	3410      	adds	r4, #16
   de316:	f005 fc7a 	bl	e3c0e <_ZN6StringC1EPKc>
   de31a:	2ca0      	cmp	r4, #160	; 0xa0
   de31c:	d1f7      	bne.n	de30e <_Z20publishSensorMetrics18HiResSensorReading+0x12>
   de31e:	4983      	ldr	r1, [pc, #524]	; (de52c <_Z20publishSensorMetrics18HiResSensorReading+0x230>)
    if ( sensor_reading_status & VOLT_READINGS )
   de320:	f8df a230 	ldr.w	sl, [pc, #560]	; de554 <_Z20publishSensorMetrics18HiResSensorReading+0x258>
   de324:	f8df 9230 	ldr.w	r9, [pc, #560]	; de558 <_Z20publishSensorMetrics18HiResSensorReading+0x25c>
  String dataString[ADC_counter], dataString_sum;
   de328:	4668      	mov	r0, sp
   de32a:	f005 fc70 	bl	e3c0e <_ZN6StringC1EPKc>
  dataString_sum += String("{\"v\":\"1\",\"sensor\":\"");
   de32e:	4980      	ldr	r1, [pc, #512]	; (de530 <_Z20publishSensorMetrics18HiResSensorReading+0x234>)
   de330:	a808      	add	r0, sp, #32
   de332:	f005 fc6c 	bl	e3c0e <_ZN6StringC1EPKc>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   de336:	a908      	add	r1, sp, #32
   de338:	4668      	mov	r0, sp
   de33a:	f005 fd7c 	bl	e3e36 <_ZN6String6concatERKS_>
   de33e:	a808      	add	r0, sp, #32
   de340:	f005 fc1a 	bl	e3b78 <_ZN6StringD1Ev>
  while (i < (ADC_counter - 1))
   de344:	ae3c      	add	r6, sp, #240	; 0xf0
  dataString_sum += String("{\"v\":\"1\",\"sensor\":\"");
   de346:	4637      	mov	r7, r6
   de348:	ac0c      	add	r4, sp, #48	; 0x30
  int i = 0;
   de34a:	2500      	movs	r5, #0
   de34c:	46d0      	mov	r8, sl
    dataString[i] = String(data_interval.ts[i]) + ":";
   de34e:	220a      	movs	r2, #10
   de350:	f856 1b04 	ldr.w	r1, [r6], #4
   de354:	a804      	add	r0, sp, #16
   de356:	f005 fcef 	bl	e3d38 <_ZN6StringC1Ejh>
	StringSumHelper(const String &s) : String(s) {}
   de35a:	a904      	add	r1, sp, #16
   de35c:	a808      	add	r0, sp, #32
   de35e:	f005 fca1 	bl	e3ca4 <_ZN6StringC1ERKS_>
   de362:	4974      	ldr	r1, [pc, #464]	; (de534 <_Z20publishSensorMetrics18HiResSensorReading+0x238>)
   de364:	a808      	add	r0, sp, #32
   de366:	f005 fd94 	bl	e3e92 <_ZplRK15StringSumHelperPKc>
   de36a:	4601      	mov	r1, r0
   de36c:	4620      	mov	r0, r4
   de36e:	f005 fc8a 	bl	e3c86 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   de372:	a808      	add	r0, sp, #32
   de374:	f005 fc00 	bl	e3b78 <_ZN6StringD1Ev>
   de378:	a804      	add	r0, sp, #16
   de37a:	f005 fbfd 	bl	e3b78 <_ZN6StringD1Ev>
    if ( sensor_reading_status & VOLT_READINGS )
   de37e:	f8ba 3000 	ldrh.w	r3, [sl]
   de382:	07db      	lsls	r3, r3, #31
   de384:	f140 80a9 	bpl.w	de4da <_Z20publishSensorMetrics18HiResSensorReading+0x1de>
      dataString[i] += String(data_interval.voltage[i], 2);
   de388:	ed97 0b3c 	vldr	d0, [r7, #240]	; 0xf0
   de38c:	2102      	movs	r1, #2
   de38e:	a808      	add	r0, sp, #32
   de390:	f005 fd26 	bl	e3de0 <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   de394:	a908      	add	r1, sp, #32
   de396:	4620      	mov	r0, r4
   de398:	f005 fd4d 	bl	e3e36 <_ZN6String6concatERKS_>
   de39c:	a808      	add	r0, sp, #32
   de39e:	f005 fbeb 	bl	e3b78 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   de3a2:	4649      	mov	r1, r9
   de3a4:	4620      	mov	r0, r4
   de3a6:	f005 fd4a 	bl	e3e3e <_ZN6String6concatEPKc>
    if ( sensor_reading_status & FUEL_LEVEL_READINGS )
   de3aa:	f8b8 3000 	ldrh.w	r3, [r8]
   de3ae:	0798      	lsls	r0, r3, #30
   de3b0:	f140 809b 	bpl.w	de4ea <_Z20publishSensorMetrics18HiResSensorReading+0x1ee>
      String fl_sensor = fuelSensor.selected_input ? String(data_interval.ufs_fuelLevel[i], 2) : String(data_interval.fuelLevel[i], 2);
   de3b4:	4b60      	ldr	r3, [pc, #384]	; (de538 <_Z20publishSensorMetrics18HiResSensorReading+0x23c>)
   de3b6:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
   de3ba:	2102      	movs	r1, #2
   de3bc:	2b00      	cmp	r3, #0
   de3be:	f000 8091 	beq.w	de4e4 <_Z20publishSensorMetrics18HiResSensorReading+0x1e8>
   de3c2:	ed97 0b1e 	vldr	d0, [r7, #120]	; 0x78
   de3c6:	a808      	add	r0, sp, #32
   de3c8:	f005 fd0a 	bl	e3de0 <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   de3cc:	a908      	add	r1, sp, #32
   de3ce:	4620      	mov	r0, r4
   de3d0:	f005 fd31 	bl	e3e36 <_ZN6String6concatERKS_>
   de3d4:	a808      	add	r0, sp, #32
   de3d6:	f005 fbcf 	bl	e3b78 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   de3da:	4649      	mov	r1, r9
   de3dc:	4620      	mov	r0, r4
   de3de:	f005 fd2e 	bl	e3e3e <_ZN6String6concatEPKc>
    if ( sensor_reading_status & PYRANOMETER_READINGS )
   de3e2:	f8b8 3000 	ldrh.w	r3, [r8]
   de3e6:	0759      	lsls	r1, r3, #29
   de3e8:	f140 8084 	bpl.w	de4f4 <_Z20publishSensorMetrics18HiResSensorReading+0x1f8>
      dataString[i] += String(data_interval.pyr_value[i], 2);
   de3ec:	ed96 0a4f 	vldr	s0, [r6, #316]	; 0x13c
   de3f0:	2102      	movs	r1, #2
   de3f2:	a808      	add	r0, sp, #32
   de3f4:	f005 fcda 	bl	e3dac <_ZN6StringC1Efi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   de3f8:	a908      	add	r1, sp, #32
   de3fa:	4620      	mov	r0, r4
   de3fc:	f005 fd1b 	bl	e3e36 <_ZN6String6concatERKS_>
   de400:	a808      	add	r0, sp, #32
   de402:	f005 fbb9 	bl	e3b78 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   de406:	4649      	mov	r1, r9
   de408:	4620      	mov	r0, r4
   de40a:	f005 fd18 	bl	e3e3e <_ZN6String6concatEPKc>
    if( sensor_reading_status & TEMPERATURE_READINGS )
   de40e:	f8b8 3000 	ldrh.w	r3, [r8]
   de412:	071a      	lsls	r2, r3, #28
   de414:	d57f      	bpl.n	de516 <_Z20publishSensorMetrics18HiResSensorReading+0x21a>
      if( selected_temperature_sensor == DIGITAL_INPUT )
   de416:	4b49      	ldr	r3, [pc, #292]	; (de53c <_Z20publishSensorMetrics18HiResSensorReading+0x240>)
   de418:	781b      	ldrb	r3, [r3, #0]
   de41a:	2b01      	cmp	r3, #1
   de41c:	d16f      	bne.n	de4fe <_Z20publishSensorMetrics18HiResSensorReading+0x202>
        dataString[i] += String(data_interval.ufs_temp[i], 2);
   de41e:	ed96 0a31 	vldr	s0, [r6, #196]	; 0xc4
   de422:	2102      	movs	r1, #2
        dataString[i] += String(data_interval.thermcpl_RTD[i], 2);
   de424:	a808      	add	r0, sp, #32
   de426:	f005 fcc1 	bl	e3dac <_ZN6StringC1Efi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   de42a:	a908      	add	r1, sp, #32
   de42c:	4620      	mov	r0, r4
   de42e:	f005 fd02 	bl	e3e36 <_ZN6String6concatERKS_>
   de432:	a808      	add	r0, sp, #32
   de434:	f005 fba0 	bl	e3b78 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   de438:	4649      	mov	r1, r9
   de43a:	4620      	mov	r0, r4
   de43c:	f005 fcff 	bl	e3e3e <_ZN6String6concatEPKc>
    if ( sensor_reading_status & RES_SENSOR_READINGS )
   de440:	f8b8 3000 	ldrh.w	r3, [r8]
   de444:	06db      	lsls	r3, r3, #27
   de446:	d56b      	bpl.n	de520 <_Z20publishSensorMetrics18HiResSensorReading+0x224>
      dataString[i] += String(data_interval.res_sensor[i], 2);
   de448:	ed96 0a63 	vldr	s0, [r6, #396]	; 0x18c
   de44c:	2102      	movs	r1, #2
   de44e:	a808      	add	r0, sp, #32
   de450:	f005 fcac 	bl	e3dac <_ZN6StringC1Efi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   de454:	a908      	add	r1, sp, #32
   de456:	4620      	mov	r0, r4
   de458:	f005 fced 	bl	e3e36 <_ZN6String6concatERKS_>
   de45c:	a808      	add	r0, sp, #32
   de45e:	f005 fb8b 	bl	e3b78 <_ZN6StringD1Ev>
    if (i != (ADC_counter - 2))
   de462:	2d08      	cmp	r5, #8
   de464:	d003      	beq.n	de46e <_Z20publishSensorMetrics18HiResSensorReading+0x172>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   de466:	4936      	ldr	r1, [pc, #216]	; (de540 <_Z20publishSensorMetrics18HiResSensorReading+0x244>)
   de468:	4620      	mov	r0, r4
   de46a:	f005 fce8 	bl	e3e3e <_ZN6String6concatEPKc>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   de46e:	4621      	mov	r1, r4
   de470:	4668      	mov	r0, sp
    i++;
   de472:	3501      	adds	r5, #1
   de474:	f005 fcdf 	bl	e3e36 <_ZN6String6concatERKS_>
  while (i < (ADC_counter - 1))
   de478:	2d09      	cmp	r5, #9
   de47a:	f104 0410 	add.w	r4, r4, #16
   de47e:	f107 0708 	add.w	r7, r7, #8
   de482:	f47f af64 	bne.w	de34e <_Z20publishSensorMetrics18HiResSensorReading+0x52>
  dataString_sum += +String("\"}");
   de486:	492f      	ldr	r1, [pc, #188]	; (de544 <_Z20publishSensorMetrics18HiResSensorReading+0x248>)
   de488:	a808      	add	r0, sp, #32
   de48a:	f005 fbc0 	bl	e3c0e <_ZN6StringC1EPKc>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   de48e:	9908      	ldr	r1, [sp, #32]
   de490:	4668      	mov	r0, sp
   de492:	f005 fcd4 	bl	e3e3e <_ZN6String6concatEPKc>
   de496:	a808      	add	r0, sp, #32
   de498:	f005 fb6e 	bl	e3b78 <_ZN6StringD1Ev>
   de49c:	492a      	ldr	r1, [pc, #168]	; (de548 <_Z20publishSensorMetrics18HiResSensorReading+0x24c>)
   de49e:	4668      	mov	r0, sp
   de4a0:	f005 fccd 	bl	e3e3e <_ZN6String6concatEPKc>
  Serial.println(dataString_sum);
   de4a4:	f005 ff64 	bl	e4370 <_Z16_fetch_usbserialv>
   de4a8:	9900      	ldr	r1, [sp, #0]
   de4aa:	f005 f9bb 	bl	e3824 <_ZN5Print7printlnEPKc>
  array_iterator = 0;
   de4ae:	4b27      	ldr	r3, [pc, #156]	; (de54c <_Z20publishSensorMetrics18HiResSensorReading+0x250>)
   de4b0:	2200      	movs	r2, #0
  saveAndPublishMetrics(dataString_sum);
   de4b2:	4668      	mov	r0, sp
  array_iterator = 0;
   de4b4:	701a      	strb	r2, [r3, #0]
  saveAndPublishMetrics(dataString_sum);
   de4b6:	f7ff fd8f 	bl	ddfd8 <_Z21saveAndPublishMetricsR6String>
  String dataString[ADC_counter], dataString_sum;
   de4ba:	4668      	mov	r0, sp
   de4bc:	f005 fb5c 	bl	e3b78 <_ZN6StringD1Ev>
   de4c0:	ab0c      	add	r3, sp, #48	; 0x30
   de4c2:	eb03 1005 	add.w	r0, r3, r5, lsl #4
   de4c6:	f005 fb57 	bl	e3b78 <_ZN6StringD1Ev>
   de4ca:	3d01      	subs	r5, #1
   de4cc:	d2f8      	bcs.n	de4c0 <_Z20publishSensorMetrics18HiResSensorReading+0x1c4>
}
   de4ce:	2001      	movs	r0, #1
   de4d0:	b034      	add	sp, #208	; 0xd0
   de4d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   de4d6:	b004      	add	sp, #16
   de4d8:	4770      	bx	lr
   de4da:	4914      	ldr	r1, [pc, #80]	; (de52c <_Z20publishSensorMetrics18HiResSensorReading+0x230>)
   de4dc:	4620      	mov	r0, r4
   de4de:	f005 fcae 	bl	e3e3e <_ZN6String6concatEPKc>
   de4e2:	e75e      	b.n	de3a2 <_Z20publishSensorMetrics18HiResSensorReading+0xa6>
      String fl_sensor = fuelSensor.selected_input ? String(data_interval.ufs_fuelLevel[i], 2) : String(data_interval.fuelLevel[i], 2);
   de4e4:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
   de4e8:	e76d      	b.n	de3c6 <_Z20publishSensorMetrics18HiResSensorReading+0xca>
   de4ea:	4910      	ldr	r1, [pc, #64]	; (de52c <_Z20publishSensorMetrics18HiResSensorReading+0x230>)
   de4ec:	4620      	mov	r0, r4
   de4ee:	f005 fca6 	bl	e3e3e <_ZN6String6concatEPKc>
   de4f2:	e772      	b.n	de3da <_Z20publishSensorMetrics18HiResSensorReading+0xde>
   de4f4:	490d      	ldr	r1, [pc, #52]	; (de52c <_Z20publishSensorMetrics18HiResSensorReading+0x230>)
   de4f6:	4620      	mov	r0, r4
   de4f8:	f005 fca1 	bl	e3e3e <_ZN6String6concatEPKc>
   de4fc:	e783      	b.n	de406 <_Z20publishSensorMetrics18HiResSensorReading+0x10a>
      else if( selected_temperature_sensor == ANALOG_INPUT && data_interval.thermcpl_RTD[i] != TEMP_SENSOR_SENTINEL_VALUE )
   de4fe:	b953      	cbnz	r3, de516 <_Z20publishSensorMetrics18HiResSensorReading+0x21a>
   de500:	ed96 0a59 	vldr	s0, [r6, #356]	; 0x164
   de504:	eddf 7a12 	vldr	s15, [pc, #72]	; de550 <_Z20publishSensorMetrics18HiResSensorReading+0x254>
   de508:	eeb4 0a67 	vcmp.f32	s0, s15
   de50c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   de510:	d001      	beq.n	de516 <_Z20publishSensorMetrics18HiResSensorReading+0x21a>
        dataString[i] += String(data_interval.thermcpl_RTD[i], 2);
   de512:	2102      	movs	r1, #2
   de514:	e786      	b.n	de424 <_Z20publishSensorMetrics18HiResSensorReading+0x128>
   de516:	4905      	ldr	r1, [pc, #20]	; (de52c <_Z20publishSensorMetrics18HiResSensorReading+0x230>)
   de518:	4620      	mov	r0, r4
   de51a:	f005 fc90 	bl	e3e3e <_ZN6String6concatEPKc>
   de51e:	e78b      	b.n	de438 <_Z20publishSensorMetrics18HiResSensorReading+0x13c>
   de520:	4902      	ldr	r1, [pc, #8]	; (de52c <_Z20publishSensorMetrics18HiResSensorReading+0x230>)
   de522:	4620      	mov	r0, r4
   de524:	f005 fc8b 	bl	e3e3e <_ZN6String6concatEPKc>
   de528:	e79b      	b.n	de462 <_Z20publishSensorMetrics18HiResSensorReading+0x166>
   de52a:	bf00      	nop
   de52c:	000e827d 	.word	0x000e827d
   de530:	000e7d91 	.word	0x000e7d91
   de534:	000e73f5 	.word	0x000e73f5
   de538:	2003e3cc 	.word	0x2003e3cc
   de53c:	2003e1ff 	.word	0x2003e1ff
   de540:	000e7da5 	.word	0x000e7da5
   de544:	000e71a2 	.word	0x000e71a2
   de548:	000e827c 	.word	0x000e827c
   de54c:	2003e397 	.word	0x2003e397
   de550:	448ae38d 	.word	0x448ae38d
   de554:	2003e200 	.word	0x2003e200
   de558:	000e7d84 	.word	0x000e7d84

000de55c <_Z21handleTimedOperationsv>:
{
   de55c:	b530      	push	{r4, r5, lr}
  if (millis() > gx_10secs_cnt)
   de55e:	4c4a      	ldr	r4, [pc, #296]	; (de688 <_Z21handleTimedOperationsv+0x12c>)
{
   de560:	b0ed      	sub	sp, #436	; 0x1b4
   de562:	f002 fbdf 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
  if (millis() > gx_10secs_cnt)
   de566:	6822      	ldr	r2, [r4, #0]
   de568:	4282      	cmp	r2, r0
   de56a:	d212      	bcs.n	de592 <_Z21handleTimedOperationsv+0x36>
    sample_adc = true;
   de56c:	4a47      	ldr	r2, [pc, #284]	; (de68c <_Z21handleTimedOperationsv+0x130>)
   de56e:	2301      	movs	r3, #1
   de570:	7013      	strb	r3, [r2, #0]
    run_system_checks = true;
   de572:	4a47      	ldr	r2, [pc, #284]	; (de690 <_Z21handleTimedOperationsv+0x134>)
   de574:	7013      	strb	r3, [r2, #0]
    check_binary_inputs = true;
   de576:	4a47      	ldr	r2, [pc, #284]	; (de694 <_Z21handleTimedOperationsv+0x138>)
   de578:	7013      	strb	r3, [r2, #0]
    if(genmetrics_active == 1)
   de57a:	4b47      	ldr	r3, [pc, #284]	; (de698 <_Z21handleTimedOperationsv+0x13c>)
   de57c:	781b      	ldrb	r3, [r3, #0]
   de57e:	2b01      	cmp	r3, #1
      read_ufs_data = true;
   de580:	bf04      	itt	eq
   de582:	4a46      	ldreq	r2, [pc, #280]	; (de69c <_Z21handleTimedOperationsv+0x140>)
   de584:	7013      	strbeq	r3, [r2, #0]
   de586:	f002 fbcd 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
    gx_10secs_cnt = millis() + GX_10_SECONDS;
   de58a:	f500 501c 	add.w	r0, r0, #9984	; 0x2700
   de58e:	3010      	adds	r0, #16
   de590:	6020      	str	r0, [r4, #0]
   de592:	f002 fbc7 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
  if (millis() > MILLIS_RESET_THRESHOLD)
   de596:	4b42      	ldr	r3, [pc, #264]	; (de6a0 <_Z21handleTimedOperationsv+0x144>)
   de598:	4298      	cmp	r0, r3
   de59a:	d901      	bls.n	de5a0 <_Z21handleTimedOperationsv+0x44>
    setPerformSHYFTReset();
   de59c:	f7fd f818 	bl	db5d0 <_Z20setPerformSHYFTResetv>
  if (millis() > clean_file_system_at)
   de5a0:	4c40      	ldr	r4, [pc, #256]	; (de6a4 <_Z21handleTimedOperationsv+0x148>)
   de5a2:	f002 fbbf 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
   de5a6:	6823      	ldr	r3, [r4, #0]
   de5a8:	4283      	cmp	r3, r0
   de5aa:	d20a      	bcs.n	de5c2 <_Z21handleTimedOperationsv+0x66>
    checkAndCleanFileSystem(GXMetrics);
   de5ac:	4b3e      	ldr	r3, [pc, #248]	; (de6a8 <_Z21handleTimedOperationsv+0x14c>)
   de5ae:	493f      	ldr	r1, [pc, #252]	; (de6ac <_Z21handleTimedOperationsv+0x150>)
   de5b0:	681a      	ldr	r2, [r3, #0]
   de5b2:	483f      	ldr	r0, [pc, #252]	; (de6b0 <_Z21handleTimedOperationsv+0x154>)
   de5b4:	f7fd f8b4 	bl	db720 <_Z23checkAndCleanFileSystemR8GXSpiffsR6StringPKc>
   de5b8:	f002 fbb4 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
    clean_file_system_at = millis() + MILLIS_6HRS;
   de5bc:	4b3d      	ldr	r3, [pc, #244]	; (de6b4 <_Z21handleTimedOperationsv+0x158>)
   de5be:	4403      	add	r3, r0
   de5c0:	6023      	str	r3, [r4, #0]
  if (millis() > publish_sensor_metrics_at)
   de5c2:	4d3d      	ldr	r5, [pc, #244]	; (de6b8 <_Z21handleTimedOperationsv+0x15c>)
   de5c4:	f002 fbae 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
   de5c8:	682b      	ldr	r3, [r5, #0]
   de5ca:	4283      	cmp	r3, r0
   de5cc:	d214      	bcs.n	de5f8 <_Z21handleTimedOperationsv+0x9c>
    publishSensorMetrics(gx_interval);
   de5ce:	4c3b      	ldr	r4, [pc, #236]	; (de6bc <_Z21handleTimedOperationsv+0x160>)
   de5d0:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
   de5d4:	f104 0110 	add.w	r1, r4, #16
   de5d8:	4668      	mov	r0, sp
   de5da:	f007 f841 	bl	e5660 <memcpy>
   de5de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   de5e2:	f7ff fe8b 	bl	de2fc <_Z20publishSensorMetrics18HiResSensorReading>
   de5e6:	f002 fb9d 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
    publish_sensor_metrics_at = millis() + (gx_mtrc_intervl[SENSOR_MTRC] * ONETHOUSAND_MILLIS);
   de5ea:	4b35      	ldr	r3, [pc, #212]	; (de6c0 <_Z21handleTimedOperationsv+0x164>)
   de5ec:	885b      	ldrh	r3, [r3, #2]
   de5ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   de5f2:	fb02 0003 	mla	r0, r2, r3, r0
   de5f6:	6028      	str	r0, [r5, #0]
  if ((millis() > gendata_poll_interval) && (genmetrics_active == 1))
   de5f8:	4c32      	ldr	r4, [pc, #200]	; (de6c4 <_Z21handleTimedOperationsv+0x168>)
   de5fa:	f002 fb93 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
   de5fe:	6823      	ldr	r3, [r4, #0]
   de600:	4283      	cmp	r3, r0
   de602:	d20e      	bcs.n	de622 <_Z21handleTimedOperationsv+0xc6>
   de604:	4b24      	ldr	r3, [pc, #144]	; (de698 <_Z21handleTimedOperationsv+0x13c>)
   de606:	781b      	ldrb	r3, [r3, #0]
   de608:	2b01      	cmp	r3, #1
   de60a:	d10a      	bne.n	de622 <_Z21handleTimedOperationsv+0xc6>
    poll_gendata_flag = true;
   de60c:	4a2e      	ldr	r2, [pc, #184]	; (de6c8 <_Z21handleTimedOperationsv+0x16c>)
   de60e:	7013      	strb	r3, [r2, #0]
   de610:	f002 fb88 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
    gendata_poll_interval = millis() + (gx_mtrc_intervl[GEN_MTRC] * ONETHOUSAND_MILLIS);
   de614:	4b2a      	ldr	r3, [pc, #168]	; (de6c0 <_Z21handleTimedOperationsv+0x164>)
   de616:	889b      	ldrh	r3, [r3, #4]
   de618:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   de61c:	fb02 0003 	mla	r0, r2, r3, r0
   de620:	6020      	str	r0, [r4, #0]
  if ((millis() > griddata_poll_interval) && (gridmetrics_active > GRID_MTRCS_OFF))
   de622:	4c2a      	ldr	r4, [pc, #168]	; (de6cc <_Z21handleTimedOperationsv+0x170>)
   de624:	f002 fb7e 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
   de628:	6823      	ldr	r3, [r4, #0]
   de62a:	4283      	cmp	r3, r0
   de62c:	d20e      	bcs.n	de64c <_Z21handleTimedOperationsv+0xf0>
   de62e:	4b28      	ldr	r3, [pc, #160]	; (de6d0 <_Z21handleTimedOperationsv+0x174>)
   de630:	781b      	ldrb	r3, [r3, #0]
   de632:	b15b      	cbz	r3, de64c <_Z21handleTimedOperationsv+0xf0>
    poll_griddata_flag = true;
   de634:	4b27      	ldr	r3, [pc, #156]	; (de6d4 <_Z21handleTimedOperationsv+0x178>)
   de636:	2201      	movs	r2, #1
   de638:	701a      	strb	r2, [r3, #0]
   de63a:	f002 fb73 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
    griddata_poll_interval = millis() + (gx_mtrc_intervl[GRID_MTRC] * ONETHOUSAND_MILLIS);
   de63e:	4b20      	ldr	r3, [pc, #128]	; (de6c0 <_Z21handleTimedOperationsv+0x164>)
   de640:	88db      	ldrh	r3, [r3, #6]
   de642:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   de646:	fb02 0003 	mla	r0, r2, r3, r0
   de64a:	6020      	str	r0, [r4, #0]
  if (millis() > device_metrics_interval)
   de64c:	4d22      	ldr	r5, [pc, #136]	; (de6d8 <_Z21handleTimedOperationsv+0x17c>)
   de64e:	f002 fb69 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
   de652:	682b      	ldr	r3, [r5, #0]
   de654:	4283      	cmp	r3, r0
   de656:	d214      	bcs.n	de682 <_Z21handleTimedOperationsv+0x126>
    publishDeviceState(gx_interval);
   de658:	4c18      	ldr	r4, [pc, #96]	; (de6bc <_Z21handleTimedOperationsv+0x160>)
   de65a:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
   de65e:	f104 0110 	add.w	r1, r4, #16
   de662:	4668      	mov	r0, sp
   de664:	f006 fffc 	bl	e5660 <memcpy>
   de668:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   de66c:	f7ff fd5a 	bl	de124 <_Z18publishDeviceState18HiResSensorReading>
   de670:	f002 fb58 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
    device_metrics_interval = millis() + (gx_mtrc_intervl[DEVICE_MTRC] * ONETHOUSAND_MILLIS);
   de674:	4b12      	ldr	r3, [pc, #72]	; (de6c0 <_Z21handleTimedOperationsv+0x164>)
   de676:	881b      	ldrh	r3, [r3, #0]
   de678:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   de67c:	fb02 0003 	mla	r0, r2, r3, r0
   de680:	6028      	str	r0, [r5, #0]
}
   de682:	b06d      	add	sp, #436	; 0x1b4
   de684:	bd30      	pop	{r4, r5, pc}
   de686:	bf00      	nop
   de688:	2003d7bc 	.word	0x2003d7bc
   de68c:	2003e4c9 	.word	0x2003e4c9
   de690:	2003e4c8 	.word	0x2003e4c8
   de694:	2003e3a0 	.word	0x2003e3a0
   de698:	2003e454 	.word	0x2003e454
   de69c:	2003e4a8 	.word	0x2003e4a8
   de6a0:	0a4cb800 	.word	0x0a4cb800
   de6a4:	2003d7b4 	.word	0x2003d7b4
   de6a8:	2003d6dc 	.word	0x2003d6dc
   de6ac:	2003e204 	.word	0x2003e204
   de6b0:	2003e298 	.word	0x2003e298
   de6b4:	01499700 	.word	0x01499700
   de6b8:	2003e49c 	.word	0x2003e49c
   de6bc:	2003d7c0 	.word	0x2003d7c0
   de6c0:	2003e45e 	.word	0x2003e45e
   de6c4:	2003e450 	.word	0x2003e450
   de6c8:	2003e488 	.word	0x2003e488
   de6cc:	2003e458 	.word	0x2003e458
   de6d0:	2003e45c 	.word	0x2003e45c
   de6d4:	2003e489 	.word	0x2003e489
   de6d8:	2003e3bc 	.word	0x2003e3bc

000de6dc <_Z17updateLEDRoutinesv>:

void updateLEDRoutines()
{
   de6dc:	b508      	push	{r3, lr}
  // check if supply is above 9V
  if(getBattVoltage() > MIN_INPUT_POWER)
   de6de:	f7fc fd3d 	bl	db15c <_Z14getBattVoltagev>
   de6e2:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   de6e6:	eeb4 0ae7 	vcmpe.f32	s0, s15
   de6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   de6ee:	4807      	ldr	r0, [pc, #28]	; (de70c <_Z17updateLEDRoutinesv+0x30>)
   de6f0:	bfcc      	ite	gt
   de6f2:	2301      	movgt	r3, #1
   de6f4:	2300      	movle	r3, #0
   de6f6:	7203      	strb	r3, [r0, #8]
    powerLed.led_mode = LED_SOLID;
  else
    powerLed.led_mode = LED_OFF;
  
  powerLed.ledRoutine();
   de6f8:	f7fe fd44 	bl	dd184 <_ZN3LED10ledRoutineEv>
  cloudLed.ledRoutine();
   de6fc:	4804      	ldr	r0, [pc, #16]	; (de710 <_Z17updateLEDRoutinesv+0x34>)
   de6fe:	f7fe fd41 	bl	dd184 <_ZN3LED10ledRoutineEv>
  commLed.ledRoutine();
}
   de702:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  commLed.ledRoutine();
   de706:	4803      	ldr	r0, [pc, #12]	; (de714 <_Z17updateLEDRoutinesv+0x38>)
   de708:	f7fe bd3c 	b.w	dd184 <_ZN3LED10ledRoutineEv>
   de70c:	2003e48c 	.word	0x2003e48c
   de710:	2003e3a4 	.word	0x2003e3a4
   de714:	2003e3b0 	.word	0x2003e3b0

000de718 <_Z10getMetrics6String>:

int getMetrics(String command)
{
   de718:	b530      	push	{r4, r5, lr}
   de71a:	b089      	sub	sp, #36	; 0x24
   de71c:	4604      	mov	r4, r0
  const uint16_t THREE_HOURS = 3*60*60;

  start_time = atoi(getStringValueAtIndex(command, ',', 0));
   de71e:	4601      	mov	r1, r0
   de720:	4668      	mov	r0, sp
   de722:	f005 fabf 	bl	e3ca4 <_ZN6StringC1ERKS_>
   de726:	2300      	movs	r3, #0
   de728:	222c      	movs	r2, #44	; 0x2c
   de72a:	4669      	mov	r1, sp
   de72c:	a804      	add	r0, sp, #16
   de72e:	f7fe ffd7 	bl	dd6e0 <_Z21getStringValueAtIndex6Stringci>
   de732:	9804      	ldr	r0, [sp, #16]
   de734:	4d21      	ldr	r5, [pc, #132]	; (de7bc <_Z10getMetrics6String+0xa4>)
   de736:	f006 ff6d 	bl	e5614 <atoi>
   de73a:	6028      	str	r0, [r5, #0]
   de73c:	a804      	add	r0, sp, #16
   de73e:	f005 fa1b 	bl	e3b78 <_ZN6StringD1Ev>
   de742:	4668      	mov	r0, sp
   de744:	f005 fa18 	bl	e3b78 <_ZN6StringD1Ev>
  end_time = atoi(getStringValueAtIndex(command, ',', 1));
   de748:	4621      	mov	r1, r4
   de74a:	4668      	mov	r0, sp
   de74c:	f005 faaa 	bl	e3ca4 <_ZN6StringC1ERKS_>
   de750:	2301      	movs	r3, #1
   de752:	222c      	movs	r2, #44	; 0x2c
   de754:	4669      	mov	r1, sp
   de756:	a804      	add	r0, sp, #16
   de758:	f7fe ffc2 	bl	dd6e0 <_Z21getStringValueAtIndex6Stringci>
   de75c:	9804      	ldr	r0, [sp, #16]
   de75e:	4c18      	ldr	r4, [pc, #96]	; (de7c0 <_Z10getMetrics6String+0xa8>)
   de760:	f006 ff58 	bl	e5614 <atoi>
   de764:	6020      	str	r0, [r4, #0]
   de766:	a804      	add	r0, sp, #16
   de768:	f005 fa06 	bl	e3b78 <_ZN6StringD1Ev>
   de76c:	4668      	mov	r0, sp
   de76e:	f005 fa03 	bl	e3b78 <_ZN6StringD1Ev>

  Log.info("Start time: %lu", start_time);
   de772:	682a      	ldr	r2, [r5, #0]
   de774:	4913      	ldr	r1, [pc, #76]	; (de7c4 <_Z10getMetrics6String+0xac>)
   de776:	4814      	ldr	r0, [pc, #80]	; (de7c8 <_Z10getMetrics6String+0xb0>)
   de778:	f7fb f99e 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
  Log.info("End time: %lu", end_time);
   de77c:	6822      	ldr	r2, [r4, #0]
   de77e:	4913      	ldr	r1, [pc, #76]	; (de7cc <_Z10getMetrics6String+0xb4>)
   de780:	4811      	ldr	r0, [pc, #68]	; (de7c8 <_Z10getMetrics6String+0xb0>)
   de782:	f7fb f999 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>

  // Validate arguments
  if ((end_time > Time.now() || start_time > Time.now()) ||
   de786:	f005 fcef 	bl	e4168 <_ZN9TimeClass3nowEv>
      (end_time < start_time) ||
   de78a:	6823      	ldr	r3, [r4, #0]
   de78c:	4298      	cmp	r0, r3
   de78e:	d203      	bcs.n	de798 <_Z10getMetrics6String+0x80>
      ((end_time - start_time) > THREE_HOURS)) return -1;
   de790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff


  should_retrieve_metrics = true;
  return 1;
}
   de794:	b009      	add	sp, #36	; 0x24
   de796:	bd30      	pop	{r4, r5, pc}
  if ((end_time > Time.now() || start_time > Time.now()) ||
   de798:	f005 fce6 	bl	e4168 <_ZN9TimeClass3nowEv>
   de79c:	682a      	ldr	r2, [r5, #0]
   de79e:	4290      	cmp	r0, r2
   de7a0:	d3f6      	bcc.n	de790 <_Z10getMetrics6String+0x78>
      (end_time < start_time) ||
   de7a2:	6823      	ldr	r3, [r4, #0]
  if ((end_time > Time.now() || start_time > Time.now()) ||
   de7a4:	429a      	cmp	r2, r3
   de7a6:	d8f3      	bhi.n	de790 <_Z10getMetrics6String+0x78>
      ((end_time - start_time) > THREE_HOURS)) return -1;
   de7a8:	1a9b      	subs	r3, r3, r2
      (end_time < start_time) ||
   de7aa:	f642 2230 	movw	r2, #10800	; 0x2a30
   de7ae:	4293      	cmp	r3, r2
   de7b0:	d8ee      	bhi.n	de790 <_Z10getMetrics6String+0x78>
  should_retrieve_metrics = true;
   de7b2:	4b07      	ldr	r3, [pc, #28]	; (de7d0 <_Z10getMetrics6String+0xb8>)
   de7b4:	2001      	movs	r0, #1
   de7b6:	7018      	strb	r0, [r3, #0]
  return 1;
   de7b8:	e7ec      	b.n	de794 <_Z10getMetrics6String+0x7c>
   de7ba:	bf00      	nop
   de7bc:	2003e568 	.word	0x2003e568
   de7c0:	2003e3c0 	.word	0x2003e3c0
   de7c4:	000e7da7 	.word	0x000e7da7
   de7c8:	2003e61c 	.word	0x2003e61c
   de7cc:	000e7db7 	.word	0x000e7db7
   de7d0:	2003e4ca 	.word	0x2003e4ca

000de7d4 <_Z19getFreeFlashStoragev>:

float getFreeFlashStorage()
{
  return GXMetrics.checkFreeStoragePercent();
   de7d4:	4801      	ldr	r0, [pc, #4]	; (de7dc <_Z19getFreeFlashStoragev+0x8>)
   de7d6:	f7fd b961 	b.w	dba9c <_ZN8GXSpiffs23checkFreeStoragePercentEv>
   de7da:	bf00      	nop
   de7dc:	2003e298 	.word	0x2003e298

000de7e0 <_Z18callConfigFunction6String>:
{
   de7e0:	b510      	push	{r4, lr}
   de7e2:	b090      	sub	sp, #64	; 0x40
  String functionName = getStringValueAtIndex(fullCommand, separator, 0);
   de7e4:	4601      	mov	r1, r0
{
   de7e6:	4604      	mov	r4, r0
  String functionName = getStringValueAtIndex(fullCommand, separator, 0);
   de7e8:	a80c      	add	r0, sp, #48	; 0x30
   de7ea:	f005 fa5b 	bl	e3ca4 <_ZN6StringC1ERKS_>
   de7ee:	2300      	movs	r3, #0
   de7f0:	223a      	movs	r2, #58	; 0x3a
   de7f2:	a90c      	add	r1, sp, #48	; 0x30
   de7f4:	4668      	mov	r0, sp
   de7f6:	f7fe ff73 	bl	dd6e0 <_Z21getStringValueAtIndex6Stringci>
   de7fa:	a80c      	add	r0, sp, #48	; 0x30
   de7fc:	f005 f9bc 	bl	e3b78 <_ZN6StringD1Ev>
  String commandParameter;
   de800:	4975      	ldr	r1, [pc, #468]	; (de9d8 <_Z18callConfigFunction6String+0x1f8>)
   de802:	a804      	add	r0, sp, #16
   de804:	f005 fa03 	bl	e3c0e <_ZN6StringC1EPKc>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   de808:	4973      	ldr	r1, [pc, #460]	; (de9d8 <_Z18callConfigFunction6String+0x1f8>)
   de80a:	4668      	mov	r0, sp
   de80c:	f005 fb78 	bl	e3f00 <_ZNK6String6equalsEPKc>
    functionName = fullCommand;
   de810:	4621      	mov	r1, r4
  if (functionName == "")
   de812:	b1f8      	cbz	r0, de854 <_Z18callConfigFunction6String+0x74>
    functionName = fullCommand;
   de814:	4668      	mov	r0, sp
   de816:	f005 fa36 	bl	e3c86 <_ZN6StringaSERKS_>
    commandParameter = "";
   de81a:	496f      	ldr	r1, [pc, #444]	; (de9d8 <_Z18callConfigFunction6String+0x1f8>)
   de81c:	a804      	add	r0, sp, #16
   de81e:	f005 fa54 	bl	e3cca <_ZN6StringaSEPKc>
   de822:	496e      	ldr	r1, [pc, #440]	; (de9dc <_Z18callConfigFunction6String+0x1fc>)
   de824:	4668      	mov	r0, sp
   de826:	f005 fb6b 	bl	e3f00 <_ZNK6String6equalsEPKc>
  if (functionName == "binaryRead") return binaryRead(commandParameter);
   de82a:	b338      	cbz	r0, de87c <_Z18callConfigFunction6String+0x9c>
   de82c:	a904      	add	r1, sp, #16
   de82e:	a80c      	add	r0, sp, #48	; 0x30
   de830:	f005 fa38 	bl	e3ca4 <_ZN6StringC1ERKS_>
   de834:	a80c      	add	r0, sp, #48	; 0x30
   de836:	f7fc fdd3 	bl	db3e0 <_Z10binaryRead6String>
  if (functionName == "genmetricsSW") return genMetricsSW(commandParameter);
   de83a:	4604      	mov	r4, r0
   de83c:	a80c      	add	r0, sp, #48	; 0x30
   de83e:	f005 f99b 	bl	e3b78 <_ZN6StringD1Ev>
  String commandParameter;
   de842:	a804      	add	r0, sp, #16
   de844:	f005 f998 	bl	e3b78 <_ZN6StringD1Ev>
  String functionName = getStringValueAtIndex(fullCommand, separator, 0);
   de848:	4668      	mov	r0, sp
   de84a:	f005 f995 	bl	e3b78 <_ZN6StringD1Ev>
}
   de84e:	4620      	mov	r0, r4
   de850:	b010      	add	sp, #64	; 0x40
   de852:	bd10      	pop	{r4, pc}
    commandParameter = getStringValueAtIndex(fullCommand, separator, 1);
   de854:	a808      	add	r0, sp, #32
   de856:	f005 fa25 	bl	e3ca4 <_ZN6StringC1ERKS_>
   de85a:	2301      	movs	r3, #1
   de85c:	223a      	movs	r2, #58	; 0x3a
   de85e:	a908      	add	r1, sp, #32
   de860:	a80c      	add	r0, sp, #48	; 0x30
   de862:	f7fe ff3d 	bl	dd6e0 <_Z21getStringValueAtIndex6Stringci>
   de866:	a90c      	add	r1, sp, #48	; 0x30
   de868:	a804      	add	r0, sp, #16
   de86a:	f005 fa26 	bl	e3cba <_ZN6StringaSEOS_>
   de86e:	a80c      	add	r0, sp, #48	; 0x30
   de870:	f005 f982 	bl	e3b78 <_ZN6StringD1Ev>
   de874:	a808      	add	r0, sp, #32
   de876:	f005 f97f 	bl	e3b78 <_ZN6StringD1Ev>
   de87a:	e7d2      	b.n	de822 <_Z18callConfigFunction6String+0x42>
   de87c:	4958      	ldr	r1, [pc, #352]	; (de9e0 <_Z18callConfigFunction6String+0x200>)
   de87e:	4668      	mov	r0, sp
   de880:	f005 fb3e 	bl	e3f00 <_ZNK6String6equalsEPKc>
  if (functionName == "genmetricsSW") return genMetricsSW(commandParameter);
   de884:	b138      	cbz	r0, de896 <_Z18callConfigFunction6String+0xb6>
   de886:	a904      	add	r1, sp, #16
   de888:	a80c      	add	r0, sp, #48	; 0x30
   de88a:	f005 fa0b 	bl	e3ca4 <_ZN6StringC1ERKS_>
   de88e:	a80c      	add	r0, sp, #48	; 0x30
   de890:	f7fc fa18 	bl	dacc4 <_Z12genMetricsSW6String>
   de894:	e7d1      	b.n	de83a <_Z18callConfigFunction6String+0x5a>
   de896:	4953      	ldr	r1, [pc, #332]	; (de9e4 <_Z18callConfigFunction6String+0x204>)
   de898:	4668      	mov	r0, sp
   de89a:	f005 fb31 	bl	e3f00 <_ZNK6String6equalsEPKc>
  if (functionName == "gridmetricsSW") return gridMetricsSW(commandParameter);
   de89e:	b138      	cbz	r0, de8b0 <_Z18callConfigFunction6String+0xd0>
   de8a0:	a904      	add	r1, sp, #16
   de8a2:	a80c      	add	r0, sp, #48	; 0x30
   de8a4:	f005 f9fe 	bl	e3ca4 <_ZN6StringC1ERKS_>
   de8a8:	a80c      	add	r0, sp, #48	; 0x30
   de8aa:	f7fc fa69 	bl	dad80 <_Z13gridMetricsSW6String>
   de8ae:	e7c4      	b.n	de83a <_Z18callConfigFunction6String+0x5a>
   de8b0:	494d      	ldr	r1, [pc, #308]	; (de9e8 <_Z18callConfigFunction6String+0x208>)
   de8b2:	4668      	mov	r0, sp
   de8b4:	f005 fb24 	bl	e3f00 <_ZNK6String6equalsEPKc>
  if (functionName == "getMetrics") {return getMetrics(commandParameter); }
   de8b8:	b138      	cbz	r0, de8ca <_Z18callConfigFunction6String+0xea>
   de8ba:	a904      	add	r1, sp, #16
   de8bc:	a80c      	add	r0, sp, #48	; 0x30
   de8be:	f005 f9f1 	bl	e3ca4 <_ZN6StringC1ERKS_>
   de8c2:	a80c      	add	r0, sp, #48	; 0x30
   de8c4:	f7ff ff28 	bl	de718 <_Z10getMetrics6String>
   de8c8:	e7b7      	b.n	de83a <_Z18callConfigFunction6String+0x5a>
   de8ca:	4948      	ldr	r1, [pc, #288]	; (de9ec <_Z18callConfigFunction6String+0x20c>)
   de8cc:	4668      	mov	r0, sp
   de8ce:	f005 fb17 	bl	e3f00 <_ZNK6String6equalsEPKc>
  if (functionName == "getFreeFlashStorage") {return getFreeFlashStorage(); }
   de8d2:	b130      	cbz	r0, de8e2 <_Z18callConfigFunction6String+0x102>
   de8d4:	f7ff ff7e 	bl	de7d4 <_Z19getFreeFlashStoragev>
   de8d8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   de8dc:	ee17 4a90 	vmov	r4, s15
   de8e0:	e7af      	b.n	de842 <_Z18callConfigFunction6String+0x62>
   de8e2:	4943      	ldr	r1, [pc, #268]	; (de9f0 <_Z18callConfigFunction6String+0x210>)
   de8e4:	4668      	mov	r0, sp
   de8e6:	f005 fb0b 	bl	e3f00 <_ZNK6String6equalsEPKc>
  if (functionName == "genmetricsSTAT") return genMetricsSTAT();
   de8ea:	b118      	cbz	r0, de8f4 <_Z18callConfigFunction6String+0x114>
   de8ec:	f7fc f9d0 	bl	dac90 <_Z14genMetricsSTATv>
  if (functionName == "setMetricIntervals") return saveGXPublishIntervals(commandParameter);
   de8f0:	4604      	mov	r4, r0
   de8f2:	e7a6      	b.n	de842 <_Z18callConfigFunction6String+0x62>
   de8f4:	493f      	ldr	r1, [pc, #252]	; (de9f4 <_Z18callConfigFunction6String+0x214>)
   de8f6:	4668      	mov	r0, sp
   de8f8:	f005 fb02 	bl	e3f00 <_ZNK6String6equalsEPKc>
  if (functionName == "gridmetricsSTAT") return gridMetricsSTAT();
   de8fc:	b110      	cbz	r0, de904 <_Z18callConfigFunction6String+0x124>
   de8fe:	f7fc fa99 	bl	dae34 <_Z15gridMetricsSTATv>
   de902:	e7f5      	b.n	de8f0 <_Z18callConfigFunction6String+0x110>
   de904:	493c      	ldr	r1, [pc, #240]	; (de9f8 <_Z18callConfigFunction6String+0x218>)
   de906:	4668      	mov	r0, sp
   de908:	f005 fafa 	bl	e3f00 <_ZNK6String6equalsEPKc>
  if (functionName == "setSensorReadingStatus") return setSensorReadingStatus(commandParameter);
   de90c:	b138      	cbz	r0, de91e <_Z18callConfigFunction6String+0x13e>
   de90e:	a904      	add	r1, sp, #16
   de910:	a80c      	add	r0, sp, #48	; 0x30
   de912:	f005 f9c7 	bl	e3ca4 <_ZN6StringC1ERKS_>
   de916:	a80c      	add	r0, sp, #48	; 0x30
   de918:	f7fc fd0e 	bl	db338 <_Z22setSensorReadingStatus6String>
   de91c:	e78d      	b.n	de83a <_Z18callConfigFunction6String+0x5a>
   de91e:	4937      	ldr	r1, [pc, #220]	; (de9fc <_Z18callConfigFunction6String+0x21c>)
   de920:	4668      	mov	r0, sp
   de922:	f005 faed 	bl	e3f00 <_ZNK6String6equalsEPKc>
  if (functionName == "selectFuelSensorInput") return fuelSensor.selectFuelSensorInput(commandParameter);
   de926:	b140      	cbz	r0, de93a <_Z18callConfigFunction6String+0x15a>
   de928:	a904      	add	r1, sp, #16
   de92a:	a80c      	add	r0, sp, #48	; 0x30
   de92c:	f005 f9ba 	bl	e3ca4 <_ZN6StringC1ERKS_>
   de930:	a90c      	add	r1, sp, #48	; 0x30
   de932:	4833      	ldr	r0, [pc, #204]	; (dea00 <_Z18callConfigFunction6String+0x220>)
   de934:	f7fe ff84 	bl	dd840 <_ZN3UFS21selectFuelSensorInputE6String>
   de938:	e77f      	b.n	de83a <_Z18callConfigFunction6String+0x5a>
   de93a:	4932      	ldr	r1, [pc, #200]	; (dea04 <_Z18callConfigFunction6String+0x224>)
   de93c:	4668      	mov	r0, sp
   de93e:	f005 fadf 	bl	e3f00 <_ZNK6String6equalsEPKc>
  if (functionName == "ufsConfigurations") return ufsConfigurations(commandParameter);
   de942:	b138      	cbz	r0, de954 <_Z18callConfigFunction6String+0x174>
   de944:	a904      	add	r1, sp, #16
   de946:	a80c      	add	r0, sp, #48	; 0x30
   de948:	f005 f9ac 	bl	e3ca4 <_ZN6StringC1ERKS_>
   de94c:	a80c      	add	r0, sp, #48	; 0x30
   de94e:	f7ff f87e 	bl	dda4e <_Z17ufsConfigurations6String>
   de952:	e772      	b.n	de83a <_Z18callConfigFunction6String+0x5a>
   de954:	492c      	ldr	r1, [pc, #176]	; (dea08 <_Z18callConfigFunction6String+0x228>)
   de956:	4668      	mov	r0, sp
   de958:	f005 fad2 	bl	e3f00 <_ZNK6String6equalsEPKc>
  if (functionName == "selectFuelLevelMetric") return fuelSensor.selectFuelLevelMetric(commandParameter); 
   de95c:	b140      	cbz	r0, de970 <_Z18callConfigFunction6String+0x190>
   de95e:	a904      	add	r1, sp, #16
   de960:	a80c      	add	r0, sp, #48	; 0x30
   de962:	f005 f99f 	bl	e3ca4 <_ZN6StringC1ERKS_>
   de966:	a90c      	add	r1, sp, #48	; 0x30
   de968:	4825      	ldr	r0, [pc, #148]	; (dea00 <_Z18callConfigFunction6String+0x220>)
   de96a:	f7fe ff3b 	bl	dd7e4 <_ZN3UFS21selectFuelLevelMetricE6String>
   de96e:	e764      	b.n	de83a <_Z18callConfigFunction6String+0x5a>
   de970:	4926      	ldr	r1, [pc, #152]	; (dea0c <_Z18callConfigFunction6String+0x22c>)
   de972:	4668      	mov	r0, sp
   de974:	f005 fac4 	bl	e3f00 <_ZNK6String6equalsEPKc>
  if (functionName == "ufsSelectedConfigs") return fuelSensor.ufsSelectedConfigs(); 
   de978:	b118      	cbz	r0, de982 <_Z18callConfigFunction6String+0x1a2>
   de97a:	4821      	ldr	r0, [pc, #132]	; (dea00 <_Z18callConfigFunction6String+0x220>)
   de97c:	f7fe ff8e 	bl	dd89c <_ZN3UFS18ufsSelectedConfigsEv>
   de980:	e7b6      	b.n	de8f0 <_Z18callConfigFunction6String+0x110>
   de982:	4923      	ldr	r1, [pc, #140]	; (dea10 <_Z18callConfigFunction6String+0x230>)
   de984:	4668      	mov	r0, sp
   de986:	f005 fabb 	bl	e3f00 <_ZNK6String6equalsEPKc>
  if (functionName == "selectTemperatureSensor") return selectTemperatureSensor(commandParameter);
   de98a:	b138      	cbz	r0, de99c <_Z18callConfigFunction6String+0x1bc>
   de98c:	a904      	add	r1, sp, #16
   de98e:	a80c      	add	r0, sp, #48	; 0x30
   de990:	f005 f988 	bl	e3ca4 <_ZN6StringC1ERKS_>
   de994:	a80c      	add	r0, sp, #48	; 0x30
   de996:	f7fc fd37 	bl	db408 <_Z23selectTemperatureSensor6String>
   de99a:	e74e      	b.n	de83a <_Z18callConfigFunction6String+0x5a>
   de99c:	491d      	ldr	r1, [pc, #116]	; (dea14 <_Z18callConfigFunction6String+0x234>)
   de99e:	4668      	mov	r0, sp
   de9a0:	f005 faae 	bl	e3f00 <_ZNK6String6equalsEPKc>
  if (functionName == "selectedTemperatureSensor") return selectedTemperatureSensor();
   de9a4:	b110      	cbz	r0, de9ac <_Z18callConfigFunction6String+0x1cc>
   de9a6:	f7fc fd5b 	bl	db460 <_Z25selectedTemperatureSensorv>
   de9aa:	e7a1      	b.n	de8f0 <_Z18callConfigFunction6String+0x110>
   de9ac:	491a      	ldr	r1, [pc, #104]	; (dea18 <_Z18callConfigFunction6String+0x238>)
   de9ae:	4668      	mov	r0, sp
   de9b0:	f005 faa6 	bl	e3f00 <_ZNK6String6equalsEPKc>
  if (functionName == "enableFlash") return enableFlash(commandParameter);
   de9b4:	b118      	cbz	r0, de9be <_Z18callConfigFunction6String+0x1de>
   de9b6:	a804      	add	r0, sp, #16
   de9b8:	f7fc ff6a 	bl	db890 <_Z11enableFlashR6String>
   de9bc:	e798      	b.n	de8f0 <_Z18callConfigFunction6String+0x110>
   de9be:	4917      	ldr	r1, [pc, #92]	; (dea1c <_Z18callConfigFunction6String+0x23c>)
   de9c0:	4668      	mov	r0, sp
   de9c2:	f005 fa9d 	bl	e3f00 <_ZNK6String6equalsEPKc>
  if (functionName == "setMetricIntervals") return saveGXPublishIntervals(commandParameter);
   de9c6:	b118      	cbz	r0, de9d0 <_Z18callConfigFunction6String+0x1f0>
   de9c8:	a804      	add	r0, sp, #16
   de9ca:	f7fc ffa3 	bl	db914 <_Z22saveGXPublishIntervalsR6String>
   de9ce:	e78f      	b.n	de8f0 <_Z18callConfigFunction6String+0x110>
  return -99;
   de9d0:	f06f 0462 	mvn.w	r4, #98	; 0x62
   de9d4:	e735      	b.n	de842 <_Z18callConfigFunction6String+0x62>
   de9d6:	bf00      	nop
   de9d8:	000e827d 	.word	0x000e827d
   de9dc:	000e7dc5 	.word	0x000e7dc5
   de9e0:	000e7dd0 	.word	0x000e7dd0
   de9e4:	000e7ddd 	.word	0x000e7ddd
   de9e8:	000e7deb 	.word	0x000e7deb
   de9ec:	000e7df6 	.word	0x000e7df6
   de9f0:	000e7e0a 	.word	0x000e7e0a
   de9f4:	000e7e19 	.word	0x000e7e19
   de9f8:	000e7e29 	.word	0x000e7e29
   de9fc:	000e7e40 	.word	0x000e7e40
   dea00:	2003e3cc 	.word	0x2003e3cc
   dea04:	000e7e56 	.word	0x000e7e56
   dea08:	000e7e68 	.word	0x000e7e68
   dea0c:	000e7e7e 	.word	0x000e7e7e
   dea10:	000e7e91 	.word	0x000e7e91
   dea14:	000e7ea9 	.word	0x000e7ea9
   dea18:	000e7ec3 	.word	0x000e7ec3
   dea1c:	000e7ecf 	.word	0x000e7ecf

000dea20 <_Z13triggerRelaysh>:
}

void triggerRelays(uint8_t saved_relay_states)
{
  if (saved_relay_states > RELAY_1_2_ON) return;
   dea20:	2803      	cmp	r0, #3
{
   dea22:	b510      	push	{r4, lr}
  if (saved_relay_states > RELAY_1_2_ON) return;
   dea24:	d813      	bhi.n	dea4e <_Z13triggerRelaysh+0x2e>

  uint8_t rly1_state = saved_relay_states & 1;          // The state of relay1 is the value of the 0th bit; 0000000x
  uint8_t rly2_state = saved_relay_states & 2;          // The state of relay2 is the value of the 1th bit; 000000x0

  // Trigger the relays to remain in thier previous states, prior to the system reset
  RLY1(rly1_state);
   dea26:	f010 0201 	ands.w	r2, r0, #1
  uint8_t rly2_state = saved_relay_states & 2;          // The state of relay2 is the value of the 1th bit; 000000x0
   dea2a:	f000 0402 	and.w	r4, r0, #2
  RLY1(rly1_state);
   dea2e:	bf18      	it	ne
   dea30:	2201      	movne	r2, #1
   dea32:	4807      	ldr	r0, [pc, #28]	; (dea50 <_Z13triggerRelaysh+0x30>)
   dea34:	2107      	movs	r1, #7
   dea36:	f002 f8ae 	bl	e0b96 <_ZN7TCA953512digitalWriteEtb>
  RLY2(rly2_state);
   dea3a:	b134      	cbz	r4, dea4a <_Z13triggerRelaysh+0x2a>
   dea3c:	2201      	movs	r2, #1
}
   dea3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  RLY2(rly2_state);
   dea42:	4803      	ldr	r0, [pc, #12]	; (dea50 <_Z13triggerRelaysh+0x30>)
   dea44:	2106      	movs	r1, #6
   dea46:	f002 b8a6 	b.w	e0b96 <_ZN7TCA953512digitalWriteEtb>
   dea4a:	4622      	mov	r2, r4
   dea4c:	e7f7      	b.n	dea3e <_Z13triggerRelaysh+0x1e>
}
   dea4e:	bd10      	pop	{r4, pc}
   dea50:	2003e48a 	.word	0x2003e48a

000dea54 <_Z7sysInitv>:
{
   dea54:	b537      	push	{r0, r1, r2, r4, r5, lr}
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   dea56:	2300      	movs	r3, #0
   dea58:	4990      	ldr	r1, [pc, #576]	; (dec9c <_Z7sysInitv+0x248>)
   dea5a:	4891      	ldr	r0, [pc, #580]	; (deca0 <_Z7sysInitv+0x24c>)
   dea5c:	2209      	movs	r2, #9
   dea5e:	f002 fbc7 	bl	e11f0 <spark_variable>
   dea62:	4990      	ldr	r1, [pc, #576]	; (deca4 <_Z7sysInitv+0x250>)
   dea64:	4890      	ldr	r0, [pc, #576]	; (deca8 <_Z7sysInitv+0x254>)
   dea66:	2300      	movs	r3, #0
   dea68:	2209      	movs	r2, #9
   dea6a:	f002 fbc1 	bl	e11f0 <spark_variable>
   dea6e:	498f      	ldr	r1, [pc, #572]	; (decac <_Z7sysInitv+0x258>)
   dea70:	488f      	ldr	r0, [pc, #572]	; (decb0 <_Z7sysInitv+0x25c>)
   dea72:	2300      	movs	r3, #0
   dea74:	2209      	movs	r2, #9
   dea76:	f002 fbbb 	bl	e11f0 <spark_variable>
   dea7a:	2300      	movs	r3, #0
   dea7c:	2204      	movs	r2, #4
   dea7e:	498d      	ldr	r1, [pc, #564]	; (decb4 <_Z7sysInitv+0x260>)
   dea80:	488d      	ldr	r0, [pc, #564]	; (decb8 <_Z7sysInitv+0x264>)
   dea82:	f002 fbb5 	bl	e11f0 <spark_variable>
  Particle.variable("D1", (&gx_interval.bin_input1), BOOLEAN);
   dea86:	498d      	ldr	r1, [pc, #564]	; (decbc <_Z7sysInitv+0x268>)
   dea88:	488d      	ldr	r0, [pc, #564]	; (decc0 <_Z7sysInitv+0x26c>)
   dea8a:	f7ff f900 	bl	ddc8e <_ZN10CloudClass8variableIA3_cJPbRK17CloudVariableTypeIbvEEEEbRKT_DpOT0_.isra.0>
  Particle.variable("D2", (&gx_interval.bin_input2), BOOLEAN);
   dea8e:	498d      	ldr	r1, [pc, #564]	; (decc4 <_Z7sysInitv+0x270>)
   dea90:	488d      	ldr	r0, [pc, #564]	; (decc8 <_Z7sysInitv+0x274>)
   dea92:	f7ff f8fc 	bl	ddc8e <_ZN10CloudClass8variableIA3_cJPbRK17CloudVariableTypeIbvEEEEbRKT_DpOT0_.isra.0>
  Particle.variable("D3", (&gx_interval.bin_input3), BOOLEAN);
   dea96:	498d      	ldr	r1, [pc, #564]	; (deccc <_Z7sysInitv+0x278>)
   dea98:	488d      	ldr	r0, [pc, #564]	; (decd0 <_Z7sysInitv+0x27c>)
   dea9a:	f7ff f8f8 	bl	ddc8e <_ZN10CloudClass8variableIA3_cJPbRK17CloudVariableTypeIbvEEEEbRKT_DpOT0_.isra.0>
  Particle.variable("D4", (&gx_interval.bin_input4), BOOLEAN);
   dea9e:	498d      	ldr	r1, [pc, #564]	; (decd4 <_Z7sysInitv+0x280>)
   deaa0:	488d      	ldr	r0, [pc, #564]	; (decd8 <_Z7sysInitv+0x284>)
   deaa2:	f7ff f8f4 	bl	ddc8e <_ZN10CloudClass8variableIA3_cJPbRK17CloudVariableTypeIbvEEEEbRKT_DpOT0_.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   deaa6:	4a8d      	ldr	r2, [pc, #564]	; (decdc <_Z7sysInitv+0x288>)
   deaa8:	498d      	ldr	r1, [pc, #564]	; (dece0 <_Z7sysInitv+0x28c>)
   deaaa:	488e      	ldr	r0, [pc, #568]	; (dece4 <_Z7sysInitv+0x290>)
   deaac:	f002 fdd1 	bl	e1652 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   deab0:	4a8d      	ldr	r2, [pc, #564]	; (dece8 <_Z7sysInitv+0x294>)
   deab2:	498e      	ldr	r1, [pc, #568]	; (decec <_Z7sysInitv+0x298>)
   deab4:	488b      	ldr	r0, [pc, #556]	; (dece4 <_Z7sysInitv+0x290>)
   deab6:	f002 fdcc 	bl	e1652 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   deaba:	4a8d      	ldr	r2, [pc, #564]	; (decf0 <_Z7sysInitv+0x29c>)
   deabc:	498d      	ldr	r1, [pc, #564]	; (decf4 <_Z7sysInitv+0x2a0>)
   deabe:	4889      	ldr	r0, [pc, #548]	; (dece4 <_Z7sysInitv+0x290>)
   deac0:	f002 fdc7 	bl	e1652 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   deac4:	4a8c      	ldr	r2, [pc, #560]	; (decf8 <_Z7sysInitv+0x2a4>)
   deac6:	498d      	ldr	r1, [pc, #564]	; (decfc <_Z7sysInitv+0x2a8>)
   deac8:	4886      	ldr	r0, [pc, #536]	; (dece4 <_Z7sysInitv+0x290>)
   deaca:	f002 fdc2 	bl	e1652 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  if (!portExpander.begin())
   deace:	488c      	ldr	r0, [pc, #560]	; (ded00 <_Z7sysInitv+0x2ac>)
   dead0:	f001 ffd2 	bl	e0a78 <_ZN7TCA95355beginEv>
   dead4:	2800      	cmp	r0, #0
   dead6:	f000 80d6 	beq.w	dec86 <_Z7sysInitv+0x232>
      portExpander.pinMode(i, OUTPUT);
   deada:	4d89      	ldr	r5, [pc, #548]	; (ded00 <_Z7sysInitv+0x2ac>)
   deadc:	2406      	movs	r4, #6
   deade:	4621      	mov	r1, r4
   deae0:	2201      	movs	r2, #1
   deae2:	4628      	mov	r0, r5
   deae4:	f002 f83d 	bl	e0b62 <_ZN7TCA95357pinModeEt7PinMode>
      portExpander.digitalWrite(i, LOW);
   deae8:	4621      	mov	r1, r4
   deaea:	3401      	adds	r4, #1
   deaec:	2200      	movs	r2, #0
   deaee:	4628      	mov	r0, r5
   deaf0:	b2a4      	uxth	r4, r4
   deaf2:	f002 f850 	bl	e0b96 <_ZN7TCA953512digitalWriteEtb>
    for (uint8_t i = 6; i < 12; i++)
   deaf6:	2c0c      	cmp	r4, #12
   deaf8:	d1f1      	bne.n	deade <_Z7sysInitv+0x8a>
      portExpander.pinMode(i, INPUT);
   deafa:	4d81      	ldr	r5, [pc, #516]	; (ded00 <_Z7sysInitv+0x2ac>)
   deafc:	4621      	mov	r1, r4
   deafe:	3401      	adds	r4, #1
   deb00:	2200      	movs	r2, #0
   deb02:	4628      	mov	r0, r5
   deb04:	b2a4      	uxth	r4, r4
   deb06:	f002 f82c 	bl	e0b62 <_ZN7TCA95357pinModeEt7PinMode>
    for (uint8_t i = 12; i < 16; i++)
   deb0a:	2c10      	cmp	r4, #16
   deb0c:	d1f6      	bne.n	deafc <_Z7sysInitv+0xa8>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   deb0e:	4c7d      	ldr	r4, [pc, #500]	; (ded04 <_Z7sysInitv+0x2b0>)
    EEPROM.get(EEPROM_ADDR_RELAYS_STATE, relay_states);
   deb10:	f005 fe1e 	bl	e4750 <_Z21__fetch_global_EEPROMv>
   deb14:	4621      	mov	r1, r4
   deb16:	2201      	movs	r2, #1
   deb18:	f44f 701f 	mov.w	r0, #636	; 0x27c
   deb1c:	f002 f912 	bl	e0d44 <HAL_EEPROM_Get>
    triggerRelays(relay_states);
   deb20:	7820      	ldrb	r0, [r4, #0]
   deb22:	4c79      	ldr	r4, [pc, #484]	; (ded08 <_Z7sysInitv+0x2b4>)
   deb24:	f7ff ff7c 	bl	dea20 <_Z13triggerRelaysh>
    static bool on(system_event_t events, void(*handler)(system_event_t, int,void*)) {
        return !system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), nullptr);
    }

    static bool on(system_event_t events, void(*handler)(system_event_t, int)) {
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   deb28:	4a78      	ldr	r2, [pc, #480]	; (ded0c <_Z7sysInitv+0x2b8>)
   deb2a:	2300      	movs	r3, #0
   deb2c:	2100      	movs	r1, #0
   deb2e:	2040      	movs	r0, #64	; 0x40
   deb30:	f002 fb18 	bl	e1164 <system_subscribe_event>
  Serial.begin(9600); // Init. Serial debugging @ 9600 bps
   deb34:	f005 fc1c 	bl	e4370 <_Z16_fetch_usbserialv>
   deb38:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   deb3c:	f005 fc08 	bl	e4350 <_ZN9USBSerial5beginEl>
  pinMode(timer_pin, OUTPUT); // WDT pulse pin init..
   deb40:	2101      	movs	r1, #1
   deb42:	2008      	movs	r0, #8
   deb44:	f005 fdc2 	bl	e46cc <pinMode>
  pinMode(ANALOG_INPUT_1, INPUT);
   deb48:	2100      	movs	r1, #0
   deb4a:	2011      	movs	r0, #17
   deb4c:	f005 fdbe 	bl	e46cc <pinMode>
  attachInterrupt(pe_int, binaryInputISR, CHANGE);
   deb50:	2500      	movs	r5, #0
  pinMode(pe_int, INPUT);
   deb52:	2100      	movs	r1, #0
   deb54:	2006      	movs	r0, #6
   deb56:	f005 fdb9 	bl	e46cc <pinMode>
  attachInterrupt(pe_int, binaryInputISR, CHANGE);
   deb5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   deb5e:	462a      	mov	r2, r5
   deb60:	496b      	ldr	r1, [pc, #428]	; (ded10 <_Z7sysInitv+0x2bc>)
   deb62:	9500      	str	r5, [sp, #0]
   deb64:	2006      	movs	r0, #6
   deb66:	f003 fa35 	bl	e1fd4 <_Z15attachInterrupttPFvvE13InterruptModeah>
  Log.info("INPUT VOLTAGE: %f",getBattVoltage());
   deb6a:	f7fc faf7 	bl	db15c <_Z14getBattVoltagev>
   deb6e:	ee10 0a10 	vmov	r0, s0
   deb72:	f006 f853 	bl	e4c1c <__aeabi_f2d>
   deb76:	460b      	mov	r3, r1
   deb78:	4602      	mov	r2, r0
   deb7a:	4966      	ldr	r1, [pc, #408]	; (ded14 <_Z7sysInitv+0x2c0>)
   deb7c:	4866      	ldr	r0, [pc, #408]	; (ded18 <_Z7sysInitv+0x2c4>)
   deb7e:	f7fa ff9b 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
  if(getBattVoltage() > MIN_INPUT_POWER)
   deb82:	f7fc faeb 	bl	db15c <_Z14getBattVoltagev>
   deb86:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   deb8a:	eeb4 0ae7 	vcmpe.f32	s0, s15
   deb8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   deb92:	4862      	ldr	r0, [pc, #392]	; (ded1c <_Z7sysInitv+0x2c8>)
   deb94:	bfcc      	ite	gt
   deb96:	2301      	movgt	r3, #1
   deb98:	462b      	movle	r3, r5
   deb9a:	7203      	strb	r3, [r0, #8]
  powerLed.ledRoutine();
   deb9c:	f7fe faf2 	bl	dd184 <_ZN3LED10ledRoutineEv>
  setElectronChrgOff(false);
   deba0:	4628      	mov	r0, r5
   deba2:	f7fc fd6f 	bl	db684 <_Z18setElectronChrgOffb>
  EEPROM.get(EEPROM_ADDR_GENMETRICS_ACTIVE, genmetrics_active);
   deba6:	f005 fdd3 	bl	e4750 <_Z21__fetch_global_EEPROMv>
   debaa:	2201      	movs	r2, #1
   debac:	4621      	mov	r1, r4
   debae:	f44f 7002 	mov.w	r0, #520	; 0x208
   debb2:	f002 f8c7 	bl	e0d44 <HAL_EEPROM_Get>
  if (genmetrics_active == UINT8_MAX)
   debb6:	7823      	ldrb	r3, [r4, #0]
   debb8:	2bff      	cmp	r3, #255	; 0xff
   debba:	d108      	bne.n	debce <_Z7sysInitv+0x17a>
    genmetrics_active = 0;
   debbc:	7025      	strb	r5, [r4, #0]
    EEPROM.put(EEPROM_ADDR_GENMETRICS_ACTIVE, genmetrics_active);
   debbe:	f005 fdc7 	bl	e4750 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   debc2:	2201      	movs	r2, #1
   debc4:	4621      	mov	r1, r4
   debc6:	f44f 7002 	mov.w	r0, #520	; 0x208
   debca:	f002 f8c3 	bl	e0d54 <HAL_EEPROM_Put>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   debce:	4c54      	ldr	r4, [pc, #336]	; (ded20 <_Z7sysInitv+0x2cc>)
  EEPROM.get(EEPROM_ADDR_GRIDMETRICS_ACTIVE, gridmetrics_active);
   debd0:	f005 fdbe 	bl	e4750 <_Z21__fetch_global_EEPROMv>
   debd4:	2201      	movs	r2, #1
   debd6:	4621      	mov	r1, r4
   debd8:	f240 207d 	movw	r0, #637	; 0x27d
   debdc:	f002 f8b2 	bl	e0d44 <HAL_EEPROM_Get>
  if (gridmetrics_active == UINT8_MAX)
   debe0:	7823      	ldrb	r3, [r4, #0]
   debe2:	2bff      	cmp	r3, #255	; 0xff
   debe4:	d109      	bne.n	debfa <_Z7sysInitv+0x1a6>
    gridmetrics_active = GRID_MTRCS_OFF;
   debe6:	2300      	movs	r3, #0
   debe8:	7023      	strb	r3, [r4, #0]
    EEPROM.put(EEPROM_ADDR_GRIDMETRICS_ACTIVE, gridmetrics_active);
   debea:	f005 fdb1 	bl	e4750 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   debee:	2201      	movs	r2, #1
   debf0:	4621      	mov	r1, r4
   debf2:	f240 207d 	movw	r0, #637	; 0x27d
   debf6:	f002 f8ad 	bl	e0d54 <HAL_EEPROM_Put>
  initSensorReadings(); // initialize sensor readings
   debfa:	f7fc fb49 	bl	db290 <_Z18initSensorReadingsv>
  spiFlash.begin();
   debfe:	4849      	ldr	r0, [pc, #292]	; (ded24 <_Z7sysInitv+0x2d0>)
   dec00:	4c49      	ldr	r4, [pc, #292]	; (ded28 <_Z7sysInitv+0x2d4>)
   dec02:	f001 fcd9 	bl	e05b8 <_ZN8SpiFlash5beginEv>
  if (!spiFlash.isValid()) {
   dec06:	4847      	ldr	r0, [pc, #284]	; (ded24 <_Z7sysInitv+0x2d0>)
   dec08:	f001 fb37 	bl	e027a <_ZN8SpiFlash7isValidEv>
   dec0c:	4605      	mov	r5, r0
   dec0e:	2800      	cmp	r0, #0
   dec10:	d13b      	bne.n	dec8a <_Z7sysInitv+0x236>
    Log.error("No valid flash chip");
   dec12:	4946      	ldr	r1, [pc, #280]	; (ded2c <_Z7sysInitv+0x2d8>)
   dec14:	4840      	ldr	r0, [pc, #256]	; (ded18 <_Z7sysInitv+0x2c4>)
   dec16:	f7fc fcac 	bl	db572 <_ZNK5spark6Logger5errorEPKcz>
    use_flash = false;
   dec1a:	7025      	strb	r5, [r4, #0]
    EEPROM.put(EEPROM_ADDR_USE_FLASH, use_flash);
   dec1c:	f005 fd98 	bl	e4750 <_Z21__fetch_global_EEPROMv>
   dec20:	2201      	movs	r2, #1
   dec22:	4621      	mov	r1, r4
   dec24:	f240 207b 	movw	r0, #635	; 0x27b
   dec28:	f002 f894 	bl	e0d54 <HAL_EEPROM_Put>
  EEPROM.get(EEPROM_ADDR_USE_FLASH, use_flash);
   dec2c:	f005 fd90 	bl	e4750 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   dec30:	493d      	ldr	r1, [pc, #244]	; (ded28 <_Z7sysInitv+0x2d4>)
   dec32:	2201      	movs	r2, #1
   dec34:	f240 207b 	movw	r0, #635	; 0x27b
   dec38:	f002 f884 	bl	e0d44 <HAL_EEPROM_Get>
  if (use_flash == 0xFF)
   dec3c:	7823      	ldrb	r3, [r4, #0]
   dec3e:	2bff      	cmp	r3, #255	; 0xff
   dec40:	d109      	bne.n	dec56 <_Z7sysInitv+0x202>
    use_flash = true;
   dec42:	2501      	movs	r5, #1
   dec44:	7025      	strb	r5, [r4, #0]
    EEPROM.put(EEPROM_ADDR_USE_FLASH, use_flash);
   dec46:	f005 fd83 	bl	e4750 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   dec4a:	4937      	ldr	r1, [pc, #220]	; (ded28 <_Z7sysInitv+0x2d4>)
   dec4c:	462a      	mov	r2, r5
   dec4e:	f240 207b 	movw	r0, #635	; 0x27b
   dec52:	f002 f87f 	bl	e0d54 <HAL_EEPROM_Put>
  Log.info("FLASH STATUS: %s", use_flash ? "IN USE" : "NOT USED");
   dec56:	4b36      	ldr	r3, [pc, #216]	; (ded30 <_Z7sysInitv+0x2dc>)
   dec58:	7821      	ldrb	r1, [r4, #0]
   dec5a:	4a36      	ldr	r2, [pc, #216]	; (ded34 <_Z7sysInitv+0x2e0>)
   dec5c:	482e      	ldr	r0, [pc, #184]	; (ded18 <_Z7sysInitv+0x2c4>)
   dec5e:	2900      	cmp	r1, #0
   dec60:	bf08      	it	eq
   dec62:	461a      	moveq	r2, r3
   dec64:	4934      	ldr	r1, [pc, #208]	; (ded38 <_Z7sysInitv+0x2e4>)
   dec66:	f7fa ff27 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
  EEPROM.get(EEPROM_ADDR_LAST_PUBL_METRIC, last_published_metric);
   dec6a:	f005 fd71 	bl	e4750 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   dec6e:	4911      	ldr	r1, [pc, #68]	; (decb4 <_Z7sysInitv+0x260>)
   dec70:	2214      	movs	r2, #20
   dec72:	f240 200b 	movw	r0, #523	; 0x20b
   dec76:	f002 f865 	bl	e0d44 <HAL_EEPROM_Get>
  Log.info("Last published metric as read from EEPROM: %s", last_published_metric);
   dec7a:	4827      	ldr	r0, [pc, #156]	; (ded18 <_Z7sysInitv+0x2c4>)
   dec7c:	4a0d      	ldr	r2, [pc, #52]	; (decb4 <_Z7sysInitv+0x260>)
   dec7e:	492f      	ldr	r1, [pc, #188]	; (ded3c <_Z7sysInitv+0x2e8>)
   dec80:	f7fa ff1a 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
  return INIT_SUCCESS;
   dec84:	2003      	movs	r0, #3
}
   dec86:	b003      	add	sp, #12
   dec88:	bd30      	pop	{r4, r5, pc}
    Log.info("jedecId=%06lx", spiFlash.jedecIdRead());
   dec8a:	4826      	ldr	r0, [pc, #152]	; (ded24 <_Z7sysInitv+0x2d0>)
   dec8c:	f001 fbe0 	bl	e0450 <_ZN8SpiFlash11jedecIdReadEv>
   dec90:	492b      	ldr	r1, [pc, #172]	; (ded40 <_Z7sysInitv+0x2ec>)
   dec92:	4602      	mov	r2, r0
   dec94:	4820      	ldr	r0, [pc, #128]	; (ded18 <_Z7sysInitv+0x2c4>)
   dec96:	f7fa ff0f 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
   dec9a:	e7c7      	b.n	dec2c <_Z7sysInitv+0x1d8>
   dec9c:	2003e448 	.word	0x2003e448
   deca0:	000e7ef2 	.word	0x000e7ef2
   deca4:	2003e398 	.word	0x2003e398
   deca8:	000e7efd 	.word	0x000e7efd
   decac:	2003e4a0 	.word	0x2003e4a0
   decb0:	000e7f07 	.word	0x000e7f07
   decb4:	2003e467 	.word	0x2003e467
   decb8:	000e7f1a 	.word	0x000e7f1a
   decbc:	2003d97b 	.word	0x2003d97b
   decc0:	000e7f30 	.word	0x000e7f30
   decc4:	2003d97a 	.word	0x2003d97a
   decc8:	000e7f33 	.word	0x000e7f33
   deccc:	2003d979 	.word	0x2003d979
   decd0:	000e7f36 	.word	0x000e7f36
   decd4:	2003d978 	.word	0x2003d978
   decd8:	000e7f39 	.word	0x000e7f39
   decdc:	000e7f3c 	.word	0x000e7f3c
   dece0:	000de7e1 	.word	0x000de7e1
   dece4:	000e1627 	.word	0x000e1627
   dece8:	000e7f4b 	.word	0x000e7f4b
   decec:	000dc535 	.word	0x000dc535
   decf0:	000e7f5c 	.word	0x000e7f5c
   decf4:	000daba1 	.word	0x000daba1
   decf8:	000e7f6b 	.word	0x000e7f6b
   decfc:	000db5f5 	.word	0x000db5f5
   ded00:	2003e48a 	.word	0x2003e48a
   ded04:	2003e1ed 	.word	0x2003e1ed
   ded08:	2003e454 	.word	0x2003e454
   ded0c:	000ddcd1 	.word	0x000ddcd1
   ded10:	000ddbdd 	.word	0x000ddbdd
   ded14:	000e7f71 	.word	0x000e7f71
   ded18:	2003e61c 	.word	0x2003e61c
   ded1c:	2003e48c 	.word	0x2003e48c
   ded20:	2003e45c 	.word	0x2003e45c
   ded24:	2003e538 	.word	0x2003e538
   ded28:	2003d980 	.word	0x2003d980
   ded2c:	000e7f83 	.word	0x000e7f83
   ded30:	000e7ee9 	.word	0x000e7ee9
   ded34:	000e7ee2 	.word	0x000e7ee2
   ded38:	000e7fa5 	.word	0x000e7fa5
   ded3c:	000e7fb6 	.word	0x000e7fb6
   ded40:	000e7f97 	.word	0x000e7f97

000ded44 <_Z15fetchGenConfigsv>:
{
   ded44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ded48:	b0b3      	sub	sp, #204	; 0xcc
  EEPROM.get(EEPROM_ADDR_GENCONFIGS_STATUS, last_saved_config);
   ded4a:	f005 fd01 	bl	e4750 <_Z21__fetch_global_EEPROMv>
   ded4e:	2201      	movs	r2, #1
   ded50:	f10d 011f 	add.w	r1, sp, #31
   ded54:	f240 2073 	movw	r0, #627	; 0x273
   ded58:	f001 fff4 	bl	e0d44 <HAL_EEPROM_Get>
  if ((last_saved_config < MINIMUM_GENSETS) ||
   ded5c:	f89d 301f 	ldrb.w	r3, [sp, #31]
   ded60:	3b01      	subs	r3, #1
   ded62:	2b05      	cmp	r3, #5
   ded64:	d858      	bhi.n	dee18 <_Z15fetchGenConfigsv+0xd4>
  GeneratorConfig genConfigs[MAXIMUM_GENSETS];
   ded66:	4930      	ldr	r1, [pc, #192]	; (dee28 <_Z15fetchGenConfigsv+0xe4>)
   ded68:	2254      	movs	r2, #84	; 0x54
   ded6a:	a81d      	add	r0, sp, #116	; 0x74
   ded6c:	f006 fc78 	bl	e5660 <memcpy>
  EEPROM.get(EEPROM_GENCONFIGS_STARTADDR, genConfigs);
   ded70:	f005 fcee 	bl	e4750 <_Z21__fetch_global_EEPROMv>
   ded74:	2254      	movs	r2, #84	; 0x54
   ded76:	a91d      	add	r1, sp, #116	; 0x74
   ded78:	f240 201f 	movw	r0, #543	; 0x21f
   ded7c:	f001 ffe2 	bl	e0d44 <HAL_EEPROM_Get>
  if (publish_genconfig_flag)          
   ded80:	4b2a      	ldr	r3, [pc, #168]	; (dee2c <_Z15fetchGenConfigsv+0xe8>)
   ded82:	781b      	ldrb	r3, [r3, #0]
   ded84:	2b00      	cmp	r3, #0
   ded86:	d04a      	beq.n	dee1e <_Z15fetchGenConfigsv+0xda>
    String GXGenConfigString = "{\"v\":\"1\",\"gen_configs\":{";
   ded88:	4929      	ldr	r1, [pc, #164]	; (dee30 <_Z15fetchGenConfigsv+0xec>)
      sprintf(genConfigValBuffer, "\"Gen%d\":\"%s,%d,%d,%d,%d,%u\"", j+ZERO_INDEX_CORRECTION,
   ded8a:	4f2a      	ldr	r7, [pc, #168]	; (dee34 <_Z15fetchGenConfigsv+0xf0>)
         GXGenConfigString.concat(",");  
   ded8c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; dee48 <_Z15fetchGenConfigsv+0x104>
    String GXGenConfigString = "{\"v\":\"1\",\"gen_configs\":{";
   ded90:	a808      	add	r0, sp, #32
   ded92:	f004 ff3c 	bl	e3c0e <_ZN6StringC1EPKc>
   ded96:	2500      	movs	r5, #0
   ded98:	ac1d      	add	r4, sp, #116	; 0x74
      char genConfigValBuffer[MAX_GENCONFIG_CHARS] = NULL_STRING;
   ded9a:	462e      	mov	r6, r5
   ded9c:	223d      	movs	r2, #61	; 0x3d
   ded9e:	2100      	movs	r1, #0
   deda0:	a80d      	add	r0, sp, #52	; 0x34
   deda2:	960c      	str	r6, [sp, #48]	; 0x30
   deda4:	f006 fc84 	bl	e56b0 <memset>
      sprintf(genConfigValBuffer, "\"Gen%d\":\"%s,%d,%d,%d,%d,%u\"", j+ZERO_INDEX_CORRECTION,
   deda8:	7b23      	ldrb	r3, [r4, #12]
   dedaa:	9304      	str	r3, [sp, #16]
   dedac:	8963      	ldrh	r3, [r4, #10]
   dedae:	9303      	str	r3, [sp, #12]
   dedb0:	7a23      	ldrb	r3, [r4, #8]
   dedb2:	9302      	str	r3, [sp, #8]
   dedb4:	79e3      	ldrb	r3, [r4, #7]
   dedb6:	9301      	str	r3, [sp, #4]
   dedb8:	79a3      	ldrb	r3, [r4, #6]
   dedba:	9300      	str	r3, [sp, #0]
   dedbc:	46a9      	mov	r9, r5
   dedbe:	3501      	adds	r5, #1
   dedc0:	4623      	mov	r3, r4
   dedc2:	462a      	mov	r2, r5
   dedc4:	4639      	mov	r1, r7
   dedc6:	a80c      	add	r0, sp, #48	; 0x30
   dedc8:	f002 fad2 	bl	e1370 <sprintf>
      GXGenConfigString.concat(genConfigValBuffer);
   dedcc:	a90c      	add	r1, sp, #48	; 0x30
   dedce:	a808      	add	r0, sp, #32
   dedd0:	f005 f835 	bl	e3e3e <_ZN6String6concatEPKc>
      if (j < (MAXIMUM_GENSETS - ZERO_INDEX_CORRECTION))
   dedd4:	f1b9 0f05 	cmp.w	r9, #5
   dedd8:	d003      	beq.n	dede2 <_Z15fetchGenConfigsv+0x9e>
         GXGenConfigString.concat(",");  
   dedda:	4641      	mov	r1, r8
   deddc:	a808      	add	r0, sp, #32
   dedde:	f005 f82e 	bl	e3e3e <_ZN6String6concatEPKc>
    for (uint8_t j = NO_GENSET; j < MAXIMUM_GENSETS; j++)
   dede2:	2d06      	cmp	r5, #6
   dede4:	f104 040e 	add.w	r4, r4, #14
   dede8:	d1d8      	bne.n	ded9c <_Z15fetchGenConfigsv+0x58>
    GXGenConfigString.concat("}}");
   dedea:	4913      	ldr	r1, [pc, #76]	; (dee38 <_Z15fetchGenConfigsv+0xf4>)
   dedec:	a808      	add	r0, sp, #32
   dedee:	f005 f826 	bl	e3e3e <_ZN6String6concatEPKc>
    return Flags<TagT, ValueT>(val_ | flags.val_);
   dedf2:	4b12      	ldr	r3, [pc, #72]	; (dee3c <_Z15fetchGenConfigsv+0xf8>)
   dedf4:	4a12      	ldr	r2, [pc, #72]	; (dee40 <_Z15fetchGenConfigsv+0xfc>)
   dedf6:	781b      	ldrb	r3, [r3, #0]
   dedf8:	7812      	ldrb	r2, [r2, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   dedfa:	4912      	ldr	r1, [pc, #72]	; (dee44 <_Z15fetchGenConfigsv+0x100>)
   dedfc:	4313      	orrs	r3, r2
   dedfe:	f88d 3000 	strb.w	r3, [sp]
   dee02:	9a08      	ldr	r2, [sp, #32]
   dee04:	233c      	movs	r3, #60	; 0x3c
   dee06:	a80c      	add	r0, sp, #48	; 0x30
   dee08:	f002 fd28 	bl	e185c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      ~__shared_ptr() = default;
   dee0c:	a80d      	add	r0, sp, #52	; 0x34
   dee0e:	f7fb fc6e 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    String GXGenConfigString = "{\"v\":\"1\",\"gen_configs\":{";
   dee12:	a808      	add	r0, sp, #32
   dee14:	f004 feb0 	bl	e3b78 <_ZN6StringD1Ev>
}
   dee18:	b033      	add	sp, #204	; 0xcc
   dee1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
initialiseGenDevices(genConfigs);
   dee1e:	a81d      	add	r0, sp, #116	; 0x74
   dee20:	f7fa fe86 	bl	d9b30 <_Z20initialiseGenDevicesP15GeneratorConfig>
   dee24:	e7f8      	b.n	dee18 <_Z15fetchGenConfigsv+0xd4>
   dee26:	bf00      	nop
   dee28:	000e8144 	.word	0x000e8144
   dee2c:	2003e499 	.word	0x2003e499
   dee30:	000e7fe4 	.word	0x000e7fe4
   dee34:	000e7ffd 	.word	0x000e7ffd
   dee38:	000e8019 	.word	0x000e8019
   dee3c:	2003e381 	.word	0x2003e381
   dee40:	2003e380 	.word	0x2003e380
   dee44:	000e705b 	.word	0x000e705b
   dee48:	000e7d84 	.word	0x000e7d84

000dee4c <_Z20fetchGXMtrcIntervalsv>:

void fetchGXMtrcIntervals()
{
   dee4c:	b510      	push	{r4, lr}
   dee4e:	4c31      	ldr	r4, [pc, #196]	; (def14 <_Z20fetchGXMtrcIntervalsv+0xc8>)
   dee50:	b0a2      	sub	sp, #136	; 0x88
  // The default intervals in seconds for publishing metrics to the cloud: {DEVICE, SENSOR, GEN, GRID}
  constexpr uint16_t DEFAULT_GX_MTRC_INTERVLS[NUM_OF_GX_METRICS] = {900, 90, 360, 180};

  // Read the metric intervals from the EEPROM and save them to the array of GX metric intervals.
  EEPROM.get(EEPROM_GXMETRICS_INTRVLS_STARTADDR, gx_mtrc_intervl);
   dee52:	f005 fc7d 	bl	e4750 <_Z21__fetch_global_EEPROMv>
   dee56:	2208      	movs	r2, #8
   dee58:	4621      	mov	r1, r4
   dee5a:	f240 207e 	movw	r0, #638	; 0x27e
   dee5e:	f001 ff71 	bl	e0d44 <HAL_EEPROM_Get>

  // If the metric intervals are uninitialized, assign the default intervals
  if (gx_mtrc_intervl[DEVICE_MTRC] == UINT16_MAX)
   dee62:	8822      	ldrh	r2, [r4, #0]
   dee64:	f64f 73ff 	movw	r3, #65535	; 0xffff
   dee68:	429a      	cmp	r2, r3
   dee6a:	d109      	bne.n	dee80 <_Z20fetchGXMtrcIntervalsv+0x34>
  {
    memcpy(gx_mtrc_intervl, DEFAULT_GX_MTRC_INTERVLS, sizeof(DEFAULT_GX_MTRC_INTERVLS));
   dee6c:	f44f 7361 	mov.w	r3, #900	; 0x384
   dee70:	8023      	strh	r3, [r4, #0]
   dee72:	235a      	movs	r3, #90	; 0x5a
   dee74:	8063      	strh	r3, [r4, #2]
   dee76:	f44f 73b4 	mov.w	r3, #360	; 0x168
   dee7a:	80a3      	strh	r3, [r4, #4]
   dee7c:	23b4      	movs	r3, #180	; 0xb4
   dee7e:	80e3      	strh	r3, [r4, #6]
  }

  // Publish the saved metric intervals to the cloud if the publish flag is set
  if (pub_gx_intervls_flag)
   dee80:	4b25      	ldr	r3, [pc, #148]	; (def18 <_Z20fetchGXMtrcIntervalsv+0xcc>)
   dee82:	781b      	ldrb	r3, [r3, #0]
   dee84:	2b00      	cmp	r3, #0
   dee86:	d02e      	beq.n	deee6 <_Z20fetchGXMtrcIntervalsv+0x9a>
  {
    String GXMetricIntervlString = "{\"v\":\"1\",\"metric_intervals\":{";
   dee88:	4924      	ldr	r1, [pc, #144]	; (def1c <_Z20fetchGXMtrcIntervalsv+0xd0>)
   dee8a:	a805      	add	r0, sp, #20
   dee8c:	f004 febf 	bl	e3c0e <_ZN6StringC1EPKc>
    char gx_mtrc_intervl_buff[100] = NULL_STRING;
   dee90:	2100      	movs	r1, #0
   dee92:	2260      	movs	r2, #96	; 0x60
   dee94:	a80a      	add	r0, sp, #40	; 0x28
   dee96:	9109      	str	r1, [sp, #36]	; 0x24
   dee98:	f006 fc0a 	bl	e56b0 <memset>

    sprintf(gx_mtrc_intervl_buff, "\"Device\":%d,\"Sensor\":%d,\"Gen\":%d,\"Grid\":%d",
   dee9c:	88e3      	ldrh	r3, [r4, #6]
   dee9e:	9301      	str	r3, [sp, #4]
   deea0:	88a3      	ldrh	r3, [r4, #4]
   deea2:	8822      	ldrh	r2, [r4, #0]
   deea4:	491e      	ldr	r1, [pc, #120]	; (def20 <_Z20fetchGXMtrcIntervalsv+0xd4>)
   deea6:	9300      	str	r3, [sp, #0]
   deea8:	a809      	add	r0, sp, #36	; 0x24
   deeaa:	8863      	ldrh	r3, [r4, #2]
   deeac:	f002 fa60 	bl	e1370 <sprintf>
            gx_mtrc_intervl[DEVICE_MTRC], gx_mtrc_intervl[SENSOR_MTRC], 
            gx_mtrc_intervl[GEN_MTRC], gx_mtrc_intervl[GRID_MTRC]);

    GXMetricIntervlString.concat(gx_mtrc_intervl_buff);
   deeb0:	a909      	add	r1, sp, #36	; 0x24
   deeb2:	a805      	add	r0, sp, #20
   deeb4:	f004 ffc3 	bl	e3e3e <_ZN6String6concatEPKc>
    GXMetricIntervlString.concat("}}");
   deeb8:	491a      	ldr	r1, [pc, #104]	; (def24 <_Z20fetchGXMtrcIntervalsv+0xd8>)
   deeba:	a805      	add	r0, sp, #20
   deebc:	f004 ffbf 	bl	e3e3e <_ZN6String6concatEPKc>
   deec0:	4b19      	ldr	r3, [pc, #100]	; (def28 <_Z20fetchGXMtrcIntervalsv+0xdc>)
   deec2:	4a1a      	ldr	r2, [pc, #104]	; (def2c <_Z20fetchGXMtrcIntervalsv+0xe0>)
   deec4:	781b      	ldrb	r3, [r3, #0]
   deec6:	7812      	ldrb	r2, [r2, #0]
   deec8:	4919      	ldr	r1, [pc, #100]	; (def30 <_Z20fetchGXMtrcIntervalsv+0xe4>)
   deeca:	4313      	orrs	r3, r2
   deecc:	f88d 3000 	strb.w	r3, [sp]
   deed0:	9a05      	ldr	r2, [sp, #20]
   deed2:	233c      	movs	r3, #60	; 0x3c
   deed4:	a803      	add	r0, sp, #12
   deed6:	f002 fcc1 	bl	e185c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   deeda:	a804      	add	r0, sp, #16
   deedc:	f7fb fc07 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    String GXMetricIntervlString = "{\"v\":\"1\",\"metric_intervals\":{";
   deee0:	a805      	add	r0, sp, #20
   deee2:	f004 fe49 	bl	e3b78 <_ZN6StringD1Ev>

    Particle.publish("gx_event", GXMetricIntervlString, PRIVATE, WITH_ACK);
  } 

  if (fresh_boot)
   deee6:	4b13      	ldr	r3, [pc, #76]	; (def34 <_Z20fetchGXMtrcIntervalsv+0xe8>)
   deee8:	781b      	ldrb	r3, [r3, #0]
   deeea:	b18b      	cbz	r3, def10 <_Z20fetchGXMtrcIntervalsv+0xc4>
  {
    device_metrics_interval = gx_mtrc_intervl[DEVICE_MTRC] * ONETHOUSAND_MILLIS;
   deeec:	8822      	ldrh	r2, [r4, #0]
   deeee:	4912      	ldr	r1, [pc, #72]	; (def38 <_Z20fetchGXMtrcIntervalsv+0xec>)
   deef0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   deef4:	435a      	muls	r2, r3
   deef6:	600a      	str	r2, [r1, #0]
    publish_sensor_metrics_at = gx_mtrc_intervl[SENSOR_MTRC] * ONETHOUSAND_MILLIS;
   deef8:	8862      	ldrh	r2, [r4, #2]
   deefa:	4910      	ldr	r1, [pc, #64]	; (def3c <_Z20fetchGXMtrcIntervalsv+0xf0>)
   deefc:	435a      	muls	r2, r3
   deefe:	600a      	str	r2, [r1, #0]
    gendata_poll_interval = gx_mtrc_intervl[GEN_MTRC] * ONETHOUSAND_MILLIS;
   def00:	88a2      	ldrh	r2, [r4, #4]
   def02:	490f      	ldr	r1, [pc, #60]	; (def40 <_Z20fetchGXMtrcIntervalsv+0xf4>)
   def04:	435a      	muls	r2, r3
   def06:	600a      	str	r2, [r1, #0]
    griddata_poll_interval = gx_mtrc_intervl[GRID_MTRC] * ONETHOUSAND_MILLIS;
   def08:	88e2      	ldrh	r2, [r4, #6]
   def0a:	4353      	muls	r3, r2
   def0c:	4a0d      	ldr	r2, [pc, #52]	; (def44 <_Z20fetchGXMtrcIntervalsv+0xf8>)
   def0e:	6013      	str	r3, [r2, #0]
  }  
}
   def10:	b022      	add	sp, #136	; 0x88
   def12:	bd10      	pop	{r4, pc}
   def14:	2003e45e 	.word	0x2003e45e
   def18:	2003e498 	.word	0x2003e498
   def1c:	000e801c 	.word	0x000e801c
   def20:	000e803a 	.word	0x000e803a
   def24:	000e8019 	.word	0x000e8019
   def28:	2003e380 	.word	0x2003e380
   def2c:	2003e381 	.word	0x2003e381
   def30:	000e705b 	.word	0x000e705b
   def34:	2003d7b8 	.word	0x2003d7b8
   def38:	2003e3bc 	.word	0x2003e3bc
   def3c:	2003e49c 	.word	0x2003e49c
   def40:	2003e450 	.word	0x2003e450
   def44:	2003e458 	.word	0x2003e458

000def48 <_Z16handleInterruptsv>:
{
   def48:	b510      	push	{r4, lr}
   def4a:	b086      	sub	sp, #24
    static bool connected(void) { return spark_cloud_flag_connected(); }
   def4c:	f002 f970 	bl	e1230 <spark_cloud_flag_connected>
  if (Particle.connected() && fresh_boot)
   def50:	b1a0      	cbz	r0, def7c <_Z16handleInterruptsv+0x34>
   def52:	4c39      	ldr	r4, [pc, #228]	; (df038 <_Z16handleInterruptsv+0xf0>)
   def54:	7823      	ldrb	r3, [r4, #0]
   def56:	b18b      	cbz	r3, def7c <_Z16handleInterruptsv+0x34>
   def58:	4b38      	ldr	r3, [pc, #224]	; (df03c <_Z16handleInterruptsv+0xf4>)
   def5a:	4a39      	ldr	r2, [pc, #228]	; (df040 <_Z16handleInterruptsv+0xf8>)
   def5c:	781b      	ldrb	r3, [r3, #0]
   def5e:	7812      	ldrb	r2, [r2, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   def60:	4938      	ldr	r1, [pc, #224]	; (df044 <_Z16handleInterruptsv+0xfc>)
   def62:	4313      	orrs	r3, r2
   def64:	f88d 3000 	strb.w	r3, [sp]
   def68:	4a37      	ldr	r2, [pc, #220]	; (df048 <_Z16handleInterruptsv+0x100>)
   def6a:	233c      	movs	r3, #60	; 0x3c
   def6c:	a802      	add	r0, sp, #8
   def6e:	f002 fc75 	bl	e185c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   def72:	a803      	add	r0, sp, #12
   def74:	f7fb fbbb 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    fresh_boot = false;
   def78:	2300      	movs	r3, #0
   def7a:	7023      	strb	r3, [r4, #0]
  if (sample_adc)
   def7c:	4c33      	ldr	r4, [pc, #204]	; (df04c <_Z16handleInterruptsv+0x104>)
   def7e:	7823      	ldrb	r3, [r4, #0]
   def80:	b11b      	cbz	r3, def8a <_Z16handleInterruptsv+0x42>
    sampleADCReadings();
   def82:	f7fe ffd3 	bl	ddf2c <_Z17sampleADCReadingsv>
    sample_adc = false;
   def86:	2300      	movs	r3, #0
   def88:	7023      	strb	r3, [r4, #0]
  if (run_system_checks)
   def8a:	4b31      	ldr	r3, [pc, #196]	; (df050 <_Z16handleInterruptsv+0x108>)
   def8c:	781a      	ldrb	r2, [r3, #0]
   def8e:	b10a      	cbz	r2, def94 <_Z16handleInterruptsv+0x4c>
    run_system_checks = false;
   def90:	2200      	movs	r2, #0
   def92:	701a      	strb	r2, [r3, #0]
  if (check_binary_inputs)
   def94:	4b2f      	ldr	r3, [pc, #188]	; (df054 <_Z16handleInterruptsv+0x10c>)
   def96:	781a      	ldrb	r2, [r3, #0]
   def98:	b11a      	cbz	r2, defa2 <_Z16handleInterruptsv+0x5a>
    check_binary_inputs = false;
   def9a:	2200      	movs	r2, #0
   def9c:	701a      	strb	r2, [r3, #0]
    readBinaryInputs();
   def9e:	f7fb ffc7 	bl	daf30 <_Z16readBinaryInputsv>
  if(should_retrieve_metrics)
   defa2:	4c2d      	ldr	r4, [pc, #180]	; (df058 <_Z16handleInterruptsv+0x110>)
   defa4:	7823      	ldrb	r3, [r4, #0]
   defa6:	b133      	cbz	r3, defb6 <_Z16handleInterruptsv+0x6e>
    GXMetrics.retrieveMetrics(end_time, start_time);
   defa8:	4a2c      	ldr	r2, [pc, #176]	; (df05c <_Z16handleInterruptsv+0x114>)
   defaa:	492d      	ldr	r1, [pc, #180]	; (df060 <_Z16handleInterruptsv+0x118>)
   defac:	482d      	ldr	r0, [pc, #180]	; (df064 <_Z16handleInterruptsv+0x11c>)
   defae:	f7fd f9bf 	bl	dc330 <_ZN8GXSpiffs15retrieveMetricsERmS0_>
    should_retrieve_metrics = false;
   defb2:	2300      	movs	r3, #0
   defb4:	7023      	strb	r3, [r4, #0]
  if (poll_gendata_flag && gxgen_config_state)
   defb6:	4b2c      	ldr	r3, [pc, #176]	; (df068 <_Z16handleInterruptsv+0x120>)
   defb8:	781b      	ldrb	r3, [r3, #0]
   defba:	b123      	cbz	r3, defc6 <_Z16handleInterruptsv+0x7e>
   defbc:	4b2b      	ldr	r3, [pc, #172]	; (df06c <_Z16handleInterruptsv+0x124>)
   defbe:	781b      	ldrb	r3, [r3, #0]
   defc0:	b10b      	cbz	r3, defc6 <_Z16handleInterruptsv+0x7e>
    runGenDataPolls();
   defc2:	f7fb fd2f 	bl	daa24 <_Z15runGenDataPollsv>
  if (poll_griddata_flag)
   defc6:	4b2a      	ldr	r3, [pc, #168]	; (df070 <_Z16handleInterruptsv+0x128>)
   defc8:	781b      	ldrb	r3, [r3, #0]
   defca:	b10b      	cbz	r3, defd0 <_Z16handleInterruptsv+0x88>
    runGridDataPolls();
   defcc:	f7fb fba6 	bl	da71c <_Z16runGridDataPollsv>
  if ((new_genconfig_flag) && (millis() > new_genconfig_resetdelay))
   defd0:	4c28      	ldr	r4, [pc, #160]	; (df074 <_Z16handleInterruptsv+0x12c>)
   defd2:	7823      	ldrb	r3, [r4, #0]
   defd4:	b14b      	cbz	r3, defea <_Z16handleInterruptsv+0xa2>
   defd6:	f001 fea5 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
   defda:	4b27      	ldr	r3, [pc, #156]	; (df078 <_Z16handleInterruptsv+0x130>)
   defdc:	681b      	ldr	r3, [r3, #0]
   defde:	4283      	cmp	r3, r0
   defe0:	d203      	bcs.n	defea <_Z16handleInterruptsv+0xa2>
    new_genconfig_flag = false;
   defe2:	2300      	movs	r3, #0
   defe4:	7023      	strb	r3, [r4, #0]
    performSHYFTReset();
   defe6:	f7fc fad3 	bl	db590 <_Z17performSHYFTResetv>
  if (publish_genconfig_flag)
   defea:	4c24      	ldr	r4, [pc, #144]	; (df07c <_Z16handleInterruptsv+0x134>)
   defec:	7823      	ldrb	r3, [r4, #0]
   defee:	b11b      	cbz	r3, deff8 <_Z16handleInterruptsv+0xb0>
    fetchGenConfigs();
   deff0:	f7ff fea8 	bl	ded44 <_Z15fetchGenConfigsv>
    publish_genconfig_flag = false;
   deff4:	2300      	movs	r3, #0
   deff6:	7023      	strb	r3, [r4, #0]
  if (read_ufs_data)
   deff8:	4b21      	ldr	r3, [pc, #132]	; (df080 <_Z16handleInterruptsv+0x138>)
   deffa:	781a      	ldrb	r2, [r3, #0]
   deffc:	b11a      	cbz	r2, df006 <_Z16handleInterruptsv+0xbe>
    read_ufs_data = false;
   deffe:	2200      	movs	r2, #0
   df000:	701a      	strb	r2, [r3, #0]
    readUfsMetrics();
   df002:	f7fe ff4d 	bl	ddea0 <_Z14readUfsMetricsv>
  if (shouldPerformSHYFTReset)
   df006:	4c1f      	ldr	r4, [pc, #124]	; (df084 <_Z16handleInterruptsv+0x13c>)
   df008:	7823      	ldrb	r3, [r4, #0]
   df00a:	b15b      	cbz	r3, df024 <_Z16handleInterruptsv+0xdc>
    triggerCloudReset("");
   df00c:	491e      	ldr	r1, [pc, #120]	; (df088 <_Z16handleInterruptsv+0x140>)
   df00e:	a802      	add	r0, sp, #8
   df010:	f004 fdfd 	bl	e3c0e <_ZN6StringC1EPKc>
   df014:	a802      	add	r0, sp, #8
   df016:	f7fc faed 	bl	db5f4 <_Z17triggerCloudReset6String>
   df01a:	a802      	add	r0, sp, #8
   df01c:	f004 fdac 	bl	e3b78 <_ZN6StringD1Ev>
    shouldPerformSHYFTReset = false;
   df020:	2300      	movs	r3, #0
   df022:	7023      	strb	r3, [r4, #0]
  if (pub_gx_intervls_flag)
   df024:	4c19      	ldr	r4, [pc, #100]	; (df08c <_Z16handleInterruptsv+0x144>)
   df026:	7823      	ldrb	r3, [r4, #0]
   df028:	b11b      	cbz	r3, df032 <_Z16handleInterruptsv+0xea>
    fetchGXMtrcIntervals();
   df02a:	f7ff ff0f 	bl	dee4c <_Z20fetchGXMtrcIntervalsv>
    pub_gx_intervls_flag = false;
   df02e:	2300      	movs	r3, #0
   df030:	7023      	strb	r3, [r4, #0]
}
   df032:	b006      	add	sp, #24
   df034:	bd10      	pop	{r4, pc}
   df036:	bf00      	nop
   df038:	2003d7b8 	.word	0x2003d7b8
   df03c:	2003e381 	.word	0x2003e381
   df040:	2003e380 	.word	0x2003e380
   df044:	000e705b 	.word	0x000e705b
   df048:	000e8065 	.word	0x000e8065
   df04c:	2003e4c9 	.word	0x2003e4c9
   df050:	2003e4c8 	.word	0x2003e4c8
   df054:	2003e3a0 	.word	0x2003e3a0
   df058:	2003e4ca 	.word	0x2003e4ca
   df05c:	2003e568 	.word	0x2003e568
   df060:	2003e3c0 	.word	0x2003e3c0
   df064:	2003e298 	.word	0x2003e298
   df068:	2003e488 	.word	0x2003e488
   df06c:	2003e466 	.word	0x2003e466
   df070:	2003e489 	.word	0x2003e489
   df074:	2003e480 	.word	0x2003e480
   df078:	2003e484 	.word	0x2003e484
   df07c:	2003e499 	.word	0x2003e499
   df080:	2003e4a8 	.word	0x2003e4a8
   df084:	2003e21b 	.word	0x2003e21b
   df088:	000e827d 	.word	0x000e827d
   df08c:	2003e498 	.word	0x2003e498

000df090 <loop>:
{
   df090:	b508      	push	{r3, lr}
  checkLastLoopTime();
   df092:	f7fc fb2f 	bl	db6f4 <_Z17checkLastLoopTimev>
  handleTimedOperations();
   df096:	f7ff fa61 	bl	de55c <_Z21handleTimedOperationsv>
  handleInterrupts();
   df09a:	f7ff ff55 	bl	def48 <_Z16handleInterruptsv>
  updateLEDRoutines();
   df09e:	f7ff fb1d 	bl	de6dc <_Z17updateLEDRoutinesv>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   df0a2:	f002 f8c5 	bl	e1230 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   df0a6:	b138      	cbz	r0, df0b8 <loop+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   df0a8:	f001 fe3c 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   df0ac:	4b03      	ldr	r3, [pc, #12]	; (df0bc <loop+0x2c>)
   df0ae:	6018      	str	r0, [r3, #0]
}
   df0b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   df0b4:	f002 b8ac 	b.w	e1210 <spark_process>
   df0b8:	bd08      	pop	{r3, pc}
   df0ba:	bf00      	nop
   df0bc:	2003e7b4 	.word	0x2003e7b4

000df0c0 <setup>:
{
   df0c0:	b510      	push	{r4, lr}
   df0c2:	b086      	sub	sp, #24
  checkHwdWatchdog();
   df0c4:	f7fc fad0 	bl	db668 <_Z16checkHwdWatchdogv>
  delay(2000);
   df0c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   df0cc:	f002 f9df 	bl	e148e <delay>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   df0d0:	4c39      	ldr	r4, [pc, #228]	; (df1b8 <setup+0xf8>)
  Log.info("Setup start..");
   df0d2:	493a      	ldr	r1, [pc, #232]	; (df1bc <setup+0xfc>)
   df0d4:	483a      	ldr	r0, [pc, #232]	; (df1c0 <setup+0x100>)
   df0d6:	f7fa fcef 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
   df0da:	2200      	movs	r2, #0
   df0dc:	4611      	mov	r1, r2
   df0de:	4620      	mov	r0, r4
   df0e0:	f7fe fe38 	bl	ddd54 <_ZN5Timer5_stopEjb>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   df0e4:	68a0      	ldr	r0, [r4, #8]
   df0e6:	b140      	cbz	r0, df0fa <setup+0x3a>
   df0e8:	2300      	movs	r3, #0
   df0ea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   df0ee:	e9cd 2300 	strd	r2, r3, [sp]
   df0f2:	4619      	mov	r1, r3
   df0f4:	461a      	mov	r2, r3
   df0f6:	f001 fdbd 	bl	e0c74 <os_timer_change>
  ret_error_code ret = sysInit();
   df0fa:	f7ff fcab 	bl	dea54 <_Z7sysInitv>
  switch (ret)
   df0fe:	2801      	cmp	r0, #1
   df100:	d039      	beq.n	df176 <setup+0xb6>
   df102:	2802      	cmp	r0, #2
   df104:	d035      	beq.n	df172 <setup+0xb2>
   df106:	2800      	cmp	r0, #0
   df108:	d137      	bne.n	df17a <setup+0xba>
    Log.trace("PE failed \n");
   df10a:	492e      	ldr	r1, [pc, #184]	; (df1c4 <setup+0x104>)
    Log.trace("Thermocouple failed");
   df10c:	482c      	ldr	r0, [pc, #176]	; (df1c0 <setup+0x100>)
   df10e:	f7fc fa21 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>
  fetchGenConfigs();
   df112:	f7ff fe17 	bl	ded44 <_Z15fetchGenConfigsv>

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   df116:	4c2c      	ldr	r4, [pc, #176]	; (df1c8 <setup+0x108>)
  fuelSensor.fetchUfsConfigs();
   df118:	482c      	ldr	r0, [pc, #176]	; (df1cc <setup+0x10c>)
   df11a:	f7fe fc3b 	bl	dd994 <_ZN3UFS15fetchUfsConfigsEv>
  fetchGXMtrcIntervals();
   df11e:	f7ff fe95 	bl	dee4c <_Z20fetchGXMtrcIntervalsv>
   df122:	2300      	movs	r3, #0
   df124:	461a      	mov	r2, r3
   df126:	4619      	mov	r1, r3
   df128:	6860      	ldr	r0, [r4, #4]
   df12a:	f002 f8c9 	bl	e12c0 <network_on>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   df12e:	2300      	movs	r3, #0
   df130:	461a      	mov	r2, r3
   df132:	4619      	mov	r1, r3
   df134:	6860      	ldr	r0, [r4, #4]
   df136:	f002 f8a3 	bl	e1280 <network_connect>
  delay(1500);
   df13a:	f240 50dc 	movw	r0, #1500	; 0x5dc
   df13e:	f002 f9a6 	bl	e148e <delay>
        spark_cloud_flag_connect();
   df142:	f002 f86d 	bl	e1220 <spark_cloud_flag_connect>
  Particle.keepAlive(KEEP_ALIVE_PERIOD);
   df146:	205a      	movs	r0, #90	; 0x5a
   df148:	f7fe fdae 	bl	ddca8 <_ZN10CloudClass9keepAliveEj>
  if (use_flash){
   df14c:	4b20      	ldr	r3, [pc, #128]	; (df1d0 <setup+0x110>)
   df14e:	781b      	ldrb	r3, [r3, #0]
   df150:	b14b      	cbz	r3, df166 <setup+0xa6>
    GXMetrics.initialiazeSPIFFS(METRICS_PRT);
   df152:	2100      	movs	r1, #0
   df154:	481f      	ldr	r0, [pc, #124]	; (df1d4 <setup+0x114>)
   df156:	f7fc fd31 	bl	dbbbc <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE>
    checkAndCleanFileSystem(GXMetrics);
   df15a:	4b1f      	ldr	r3, [pc, #124]	; (df1d8 <setup+0x118>)
   df15c:	491f      	ldr	r1, [pc, #124]	; (df1dc <setup+0x11c>)
   df15e:	681a      	ldr	r2, [r3, #0]
   df160:	481c      	ldr	r0, [pc, #112]	; (df1d4 <setup+0x114>)
   df162:	f7fc fadd 	bl	db720 <_Z23checkAndCleanFileSystemR8GXSpiffsR6StringPKc>
  Log.info("End of setup!");
   df166:	491e      	ldr	r1, [pc, #120]	; (df1e0 <setup+0x120>)
   df168:	4815      	ldr	r0, [pc, #84]	; (df1c0 <setup+0x100>)
   df16a:	f7fa fca5 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
}
   df16e:	b006      	add	sp, #24
   df170:	bd10      	pop	{r4, pc}
    Log.trace("Thermocouple failed");
   df172:	491c      	ldr	r1, [pc, #112]	; (df1e4 <setup+0x124>)
   df174:	e7ca      	b.n	df10c <setup+0x4c>
    Log.trace("Flash failed");
   df176:	491c      	ldr	r1, [pc, #112]	; (df1e8 <setup+0x128>)
   df178:	e7c8      	b.n	df10c <setup+0x4c>
    Log.trace("Successfully configured device");
   df17a:	491c      	ldr	r1, [pc, #112]	; (df1ec <setup+0x12c>)
   df17c:	4810      	ldr	r0, [pc, #64]	; (df1c0 <setup+0x100>)
   df17e:	f7fc f9e9 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   df182:	f002 f855 	bl	e1230 <spark_cloud_flag_connected>
    if (Particle.connected())
   df186:	b178      	cbz	r0, df1a8 <setup+0xe8>
   df188:	4b19      	ldr	r3, [pc, #100]	; (df1f0 <setup+0x130>)
   df18a:	4a1a      	ldr	r2, [pc, #104]	; (df1f4 <setup+0x134>)
   df18c:	781b      	ldrb	r3, [r3, #0]
   df18e:	7812      	ldrb	r2, [r2, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   df190:	4919      	ldr	r1, [pc, #100]	; (df1f8 <setup+0x138>)
   df192:	4313      	orrs	r3, r2
   df194:	f88d 3000 	strb.w	r3, [sp]
   df198:	a802      	add	r0, sp, #8
   df19a:	4a18      	ldr	r2, [pc, #96]	; (df1fc <setup+0x13c>)
   df19c:	233c      	movs	r3, #60	; 0x3c
   df19e:	f002 fb5d 	bl	e185c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   df1a2:	a803      	add	r0, sp, #12
   df1a4:	f7fb faa3 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    runCellTest();
   df1a8:	a802      	add	r0, sp, #8
   df1aa:	f7fe fe11 	bl	dddd0 <_Z11runCellTestv>
   df1ae:	a802      	add	r0, sp, #8
   df1b0:	f004 fce2 	bl	e3b78 <_ZN6StringD1Ev>
    break;
   df1b4:	e7ad      	b.n	df112 <setup+0x52>
   df1b6:	bf00      	nop
   df1b8:	2003e5a4 	.word	0x2003e5a4
   df1bc:	000e8071 	.word	0x000e8071
   df1c0:	2003e61c 	.word	0x2003e61c
   df1c4:	000e807f 	.word	0x000e807f
   df1c8:	2003e5d8 	.word	0x2003e5d8
   df1cc:	2003e3cc 	.word	0x2003e3cc
   df1d0:	2003d980 	.word	0x2003d980
   df1d4:	2003e298 	.word	0x2003e298
   df1d8:	2003d6dc 	.word	0x2003d6dc
   df1dc:	2003e204 	.word	0x2003e204
   df1e0:	000e80e2 	.word	0x000e80e2
   df1e4:	000e808b 	.word	0x000e808b
   df1e8:	000e809f 	.word	0x000e809f
   df1ec:	000e80ac 	.word	0x000e80ac
   df1f0:	2003e380 	.word	0x2003e380
   df1f4:	2003e381 	.word	0x2003e381
   df1f8:	000e80d3 	.word	0x000e80d3
   df1fc:	000e80cb 	.word	0x000e80cb

000df200 <_GLOBAL__sub_I___appProductID>:
}
   df200:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   df202:	4b60      	ldr	r3, [pc, #384]	; (df384 <_GLOBAL__sub_I___appProductID+0x184>)
              error_(SYSTEM_ERROR_NONE) {
   df204:	4d60      	ldr	r5, [pc, #384]	; (df388 <_GLOBAL__sub_I___appProductID+0x188>)
   df206:	2601      	movs	r6, #1
   df208:	701e      	strb	r6, [r3, #0]
   df20a:	4b60      	ldr	r3, [pc, #384]	; (df38c <_GLOBAL__sub_I___appProductID+0x18c>)
   df20c:	2708      	movs	r7, #8
   df20e:	b089      	sub	sp, #36	; 0x24
   df210:	701f      	strb	r7, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   df212:	f005 fa05 	bl	e4620 <spark_protocol_instance>
   df216:	2300      	movs	r3, #0
   df218:	461a      	mov	r2, r3
   df21a:	f643 61d3 	movw	r1, #16083	; 0x3ed3
   df21e:	f005 fa07 	bl	e4630 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   df222:	f005 f9fd 	bl	e4620 <spark_protocol_instance>
   df226:	2300      	movs	r3, #0
   df228:	461a      	mov	r2, r3
   df22a:	210f      	movs	r1, #15
   df22c:	f005 fa08 	bl	e4640 <spark_protocol_set_product_firmware_version>
   df230:	2400      	movs	r4, #0
    SleepResult() {}
   df232:	4b57      	ldr	r3, [pc, #348]	; (df390 <_GLOBAL__sub_I___appProductID+0x190>)
   df234:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   df236:	602c      	str	r4, [r5, #0]
   df238:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   df23a:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   df23c:	2003      	movs	r0, #3
   df23e:	f001 ff79 	bl	e1134 <set_system_mode>
SYSTEM_MODE(MANUAL);    // setting system mode to manual turns of cellular at startup
   df242:	4a54      	ldr	r2, [pc, #336]	; (df394 <_GLOBAL__sub_I___appProductID+0x194>)
   df244:	4954      	ldr	r1, [pc, #336]	; (df398 <_GLOBAL__sub_I___appProductID+0x198>)
   df246:	4628      	mov	r0, r5
   df248:	f005 fb18 	bl	e487c <__aeabi_atexit>
SYSTEM_THREAD(ENABLED); // Enables system threading
   df24c:	4621      	mov	r1, r4
   df24e:	4630      	mov	r0, r6
   df250:	f001 ff90 	bl	e1174 <system_thread_set_state>
STARTUP(cellular_credentials_set("eseye.com", "user", "pass", NULL)); // sets connection credentials for the cellular network(Eseye sim)
   df254:	4623      	mov	r3, r4
   df256:	4a51      	ldr	r2, [pc, #324]	; (df39c <_GLOBAL__sub_I___appProductID+0x19c>)
   df258:	4951      	ldr	r1, [pc, #324]	; (df3a0 <_GLOBAL__sub_I___appProductID+0x1a0>)
   df25a:	4852      	ldr	r0, [pc, #328]	; (df3a4 <_GLOBAL__sub_I___appProductID+0x1a4>)
   df25c:	f001 fcd2 	bl	e0c04 <cellular_credentials_set>
Adafruit_MAX31865 thermo = Adafruit_MAX31865(thermCPL_pin, D2, D3, D4);
   df260:	2304      	movs	r3, #4
   df262:	9300      	str	r3, [sp, #0]
   df264:	2202      	movs	r2, #2
   df266:	2303      	movs	r3, #3
   df268:	2105      	movs	r1, #5
   df26a:	484f      	ldr	r0, [pc, #316]	; (df3a8 <_GLOBAL__sub_I___appProductID+0x1a8>)
   df26c:	f7f9 fb6c 	bl	d8948 <_ZN17Adafruit_MAX31865C1Eaaaa>
   df270:	4a48      	ldr	r2, [pc, #288]	; (df394 <_GLOBAL__sub_I___appProductID+0x194>)
   df272:	494e      	ldr	r1, [pc, #312]	; (df3ac <_GLOBAL__sub_I___appProductID+0x1ac>)
   df274:	484c      	ldr	r0, [pc, #304]	; (df3a8 <_GLOBAL__sub_I___appProductID+0x1a8>)
   df276:	f005 fb01 	bl	e487c <__aeabi_atexit>
UFS fuelSensor;
   df27a:	484d      	ldr	r0, [pc, #308]	; (df3b0 <_GLOBAL__sub_I___appProductID+0x1b0>)
   df27c:	f7fe fa6a 	bl	dd754 <_ZN3UFSC1Ev>
   df280:	4a44      	ldr	r2, [pc, #272]	; (df394 <_GLOBAL__sub_I___appProductID+0x194>)
   df282:	494c      	ldr	r1, [pc, #304]	; (df3b4 <_GLOBAL__sub_I___appProductID+0x1b4>)
   df284:	484a      	ldr	r0, [pc, #296]	; (df3b0 <_GLOBAL__sub_I___appProductID+0x1b0>)
   df286:	f005 faf9 	bl	e487c <__aeabi_atexit>
LED powerLed(1), cloudLed(2), commLed(3);
   df28a:	4631      	mov	r1, r6
   df28c:	484a      	ldr	r0, [pc, #296]	; (df3b8 <_GLOBAL__sub_I___appProductID+0x1b8>)
   df28e:	f7fd ff2e 	bl	dd0ee <_ZN3LEDC1Eh>
   df292:	2102      	movs	r1, #2
   df294:	4849      	ldr	r0, [pc, #292]	; (df3bc <_GLOBAL__sub_I___appProductID+0x1bc>)
   df296:	f7fd ff2a 	bl	dd0ee <_ZN3LEDC1Eh>
   df29a:	2103      	movs	r1, #3
   df29c:	4848      	ldr	r0, [pc, #288]	; (df3c0 <_GLOBAL__sub_I___appProductID+0x1c0>)
   df29e:	f7fd ff26 	bl	dd0ee <_ZN3LEDC1Eh>
FuelGauge fuel;
   df2a2:	4621      	mov	r1, r4
   df2a4:	4847      	ldr	r0, [pc, #284]	; (df3c4 <_GLOBAL__sub_I___appProductID+0x1c4>)
        static SPIClass instance(Interface);
   df2a6:	4c48      	ldr	r4, [pc, #288]	; (df3c8 <_GLOBAL__sub_I___appProductID+0x1c8>)
   df2a8:	f002 fc98 	bl	e1bdc <_ZN9FuelGaugeC1Eb>
   df2ac:	4a39      	ldr	r2, [pc, #228]	; (df394 <_GLOBAL__sub_I___appProductID+0x194>)
   df2ae:	4947      	ldr	r1, [pc, #284]	; (df3cc <_GLOBAL__sub_I___appProductID+0x1cc>)
   df2b0:	4844      	ldr	r0, [pc, #272]	; (df3c4 <_GLOBAL__sub_I___appProductID+0x1c4>)
   df2b2:	f005 fae3 	bl	e487c <__aeabi_atexit>
SHYFTStateSync shyftStateMan;
   df2b6:	4639      	mov	r1, r7
   df2b8:	4845      	ldr	r0, [pc, #276]	; (df3d0 <_GLOBAL__sub_I___appProductID+0x1d0>)
   df2ba:	f7fe f9cb 	bl	dd654 <_ZN14SHYFTStateSyncC1Em>
   df2be:	7821      	ldrb	r1, [r4, #0]
   df2c0:	f3bf 8f5b 	dmb	ish
   df2c4:	4031      	ands	r1, r6
   df2c6:	d10b      	bne.n	df2e0 <_GLOBAL__sub_I___appProductID+0xe0>
   df2c8:	4620      	mov	r0, r4
   df2ca:	9103      	str	r1, [sp, #12]
   df2cc:	f7f4 fef6 	bl	d40bc <__cxa_guard_acquire>
   df2d0:	9903      	ldr	r1, [sp, #12]
   df2d2:	b128      	cbz	r0, df2e0 <_GLOBAL__sub_I___appProductID+0xe0>
   df2d4:	483f      	ldr	r0, [pc, #252]	; (df3d4 <_GLOBAL__sub_I___appProductID+0x1d4>)
   df2d6:	f004 fb19 	bl	e390c <_ZN8SPIClassC1E19hal_spi_interface_t>
   df2da:	4620      	mov	r0, r4
   df2dc:	f7f4 fef3 	bl	d40c6 <__cxa_guard_release>
public:
	inline SpiFlashWinbond(SPIClass &spi, int cs) : SpiFlash(spi, cs) {
   df2e0:	4c3d      	ldr	r4, [pc, #244]	; (df3d8 <_GLOBAL__sub_I___appProductID+0x1d8>)
   df2e2:	493c      	ldr	r1, [pc, #240]	; (df3d4 <_GLOBAL__sub_I___appProductID+0x1d4>)
	    _M_invoker = &_My_handler::_M_invoke;
   df2e4:	4d3d      	ldr	r5, [pc, #244]	; (df3dc <_GLOBAL__sub_I___appProductID+0x1dc>)
   df2e6:	2207      	movs	r2, #7
   df2e8:	4620      	mov	r0, r4
   df2ea:	f000 fff1 	bl	e02d0 <_ZN8SpiFlashC1ER8SPIClassi>
   df2ee:	4b3c      	ldr	r3, [pc, #240]	; (df3e0 <_GLOBAL__sub_I___appProductID+0x1e0>)
   df2f0:	6023      	str	r3, [r4, #0]
		sectorEraseTimeoutMs = 500;
		pageProgramTimeoutMs = 10; // 3 ms actually
   df2f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   df2f6:	230a      	movs	r3, #10
   df2f8:	e9c4 2305 	strd	r2, r3, [r4, #20]
		chipEraseTimeoutMs = 50000;
   df2fc:	f24c 3350 	movw	r3, #50000	; 0xc350
   df300:	61e3      	str	r3, [r4, #28]
		manufacturerId = 0xef;
   df302:	23ef      	movs	r3, #239	; 0xef
   df304:	7323      	strb	r3, [r4, #12]
		writeEnableDelayUs = 0;
   df306:	2300      	movs	r3, #0
   df308:	6223      	str	r3, [r4, #32]
SpiFlashWinbond spiFlash(SPI, NOR_CS);
   df30a:	4a22      	ldr	r2, [pc, #136]	; (df394 <_GLOBAL__sub_I___appProductID+0x194>)
   df30c:	4935      	ldr	r1, [pc, #212]	; (df3e4 <_GLOBAL__sub_I___appProductID+0x1e4>)
   df30e:	4620      	mov	r0, r4
   df310:	f005 fab4 	bl	e487c <__aeabi_atexit>
SpiffsParticle GXMetricsFS(spiFlash);
   df314:	4621      	mov	r1, r4
   df316:	4834      	ldr	r0, [pc, #208]	; (df3e8 <_GLOBAL__sub_I___appProductID+0x1e8>)
   df318:	f001 fa0a 	bl	e0730 <_ZN14SpiffsParticleC1ER12SpiFlashBase>
   df31c:	4a1d      	ldr	r2, [pc, #116]	; (df394 <_GLOBAL__sub_I___appProductID+0x194>)
   df31e:	4933      	ldr	r1, [pc, #204]	; (df3ec <_GLOBAL__sub_I___appProductID+0x1ec>)
   df320:	4831      	ldr	r0, [pc, #196]	; (df3e8 <_GLOBAL__sub_I___appProductID+0x1e8>)
   df322:	f005 faab 	bl	e487c <__aeabi_atexit>
GXSpiffs GXMetrics(&spiFlash, &GXMetricsFS);
   df326:	4621      	mov	r1, r4
   df328:	4a2f      	ldr	r2, [pc, #188]	; (df3e8 <_GLOBAL__sub_I___appProductID+0x1e8>)
   df32a:	4831      	ldr	r0, [pc, #196]	; (df3f0 <_GLOBAL__sub_I___appProductID+0x1f0>)
	    _M_manager = &_My_handler::_M_manager;
   df32c:	4c31      	ldr	r4, [pc, #196]	; (df3f4 <_GLOBAL__sub_I___appProductID+0x1f4>)
   df32e:	f7fc fb79 	bl	dba24 <_ZN8GXSpiffsC1EP15SpiFlashWinbondP14SpiffsParticle>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   df332:	4a31      	ldr	r2, [pc, #196]	; (df3f8 <_GLOBAL__sub_I___appProductID+0x1f8>)
   df334:	9204      	str	r2, [sp, #16]
Timer resetDelay(RESET_DELAY, setPerformSHYFTReset);
   df336:	2300      	movs	r3, #0
   df338:	aa04      	add	r2, sp, #16
   df33a:	f640 31b8 	movw	r1, #3000	; 0xbb8
   df33e:	482f      	ldr	r0, [pc, #188]	; (df3fc <_GLOBAL__sub_I___appProductID+0x1fc>)
	    _M_invoker = &_My_handler::_M_invoke;
   df340:	9507      	str	r5, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
   df342:	9406      	str	r4, [sp, #24]
   df344:	f7fe fcd6 	bl	ddcf4 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   df348:	a804      	add	r0, sp, #16
   df34a:	f7fe fca4 	bl	ddc96 <_ZNSt14_Function_baseD1Ev>
   df34e:	4a11      	ldr	r2, [pc, #68]	; (df394 <_GLOBAL__sub_I___appProductID+0x194>)
   df350:	492b      	ldr	r1, [pc, #172]	; (df400 <_GLOBAL__sub_I___appProductID+0x200>)
   df352:	482a      	ldr	r0, [pc, #168]	; (df3fc <_GLOBAL__sub_I___appProductID+0x1fc>)
   df354:	f005 fa92 	bl	e487c <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   df358:	4a2a      	ldr	r2, [pc, #168]	; (df404 <_GLOBAL__sub_I___appProductID+0x204>)
   df35a:	9204      	str	r2, [sp, #16]
Timer watchdog(WATCHDOG_INTERVAL, checkHwdWatchdog);
   df35c:	2300      	movs	r3, #0
   df35e:	aa04      	add	r2, sp, #16
   df360:	f640 31b8 	movw	r1, #3000	; 0xbb8
   df364:	4828      	ldr	r0, [pc, #160]	; (df408 <_GLOBAL__sub_I___appProductID+0x208>)
	    _M_manager = &_My_handler::_M_manager;
   df366:	e9cd 4506 	strd	r4, r5, [sp, #24]
   df36a:	f7fe fcc3 	bl	ddcf4 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   df36e:	a804      	add	r0, sp, #16
   df370:	f7fe fc91 	bl	ddc96 <_ZNSt14_Function_baseD1Ev>
   df374:	4a07      	ldr	r2, [pc, #28]	; (df394 <_GLOBAL__sub_I___appProductID+0x194>)
   df376:	4922      	ldr	r1, [pc, #136]	; (df400 <_GLOBAL__sub_I___appProductID+0x200>)
   df378:	4823      	ldr	r0, [pc, #140]	; (df408 <_GLOBAL__sub_I___appProductID+0x208>)
   df37a:	f005 fa7f 	bl	e487c <__aeabi_atexit>
}
   df37e:	b009      	add	sp, #36	; 0x24
   df380:	bdf0      	pop	{r4, r5, r6, r7, pc}
   df382:	bf00      	nop
   df384:	2003e380 	.word	0x2003e380
   df388:	2003e374 	.word	0x2003e374
   df38c:	2003e381 	.word	0x2003e381
   df390:	ffff0000 	.word	0xffff0000
   df394:	2003d9f8 	.word	0x2003d9f8
   df398:	000ddc7f 	.word	0x000ddc7f
   df39c:	000e80f0 	.word	0x000e80f0
   df3a0:	000e80f5 	.word	0x000e80f5
   df3a4:	000e80fa 	.word	0x000e80fa
   df3a8:	2003e56c 	.word	0x2003e56c
   df3ac:	000ddc39 	.word	0x000ddc39
   df3b0:	2003e3cc 	.word	0x2003e3cc
   df3b4:	000dd951 	.word	0x000dd951
   df3b8:	2003e48c 	.word	0x2003e48c
   df3bc:	2003e3a4 	.word	0x2003e3a4
   df3c0:	2003e3b0 	.word	0x2003e3b0
   df3c4:	2003e3c4 	.word	0x2003e3c4
   df3c8:	2003d9fc 	.word	0x2003d9fc
   df3cc:	000e1bfd 	.word	0x000e1bfd
   df3d0:	2003e4cc 	.word	0x2003e4cc
   df3d4:	2003da00 	.word	0x2003da00
   df3d8:	2003e538 	.word	0x2003e538
   df3dc:	000ddbe9 	.word	0x000ddbe9
   df3e0:	000e8120 	.word	0x000e8120
   df3e4:	000ddc11 	.word	0x000ddc11
   df3e8:	2003e2a8 	.word	0x2003e2a8
   df3ec:	000e071f 	.word	0x000e071f
   df3f0:	2003e298 	.word	0x2003e298
   df3f4:	000ddbed 	.word	0x000ddbed
   df3f8:	000db5d1 	.word	0x000db5d1
   df3fc:	2003e4ac 	.word	0x2003e4ac
   df400:	000ddd75 	.word	0x000ddd75
   df404:	000db669 	.word	0x000db669
   df408:	2003e5a4 	.word	0x2003e5a4

000df40c <_ZN19CellularHelperClass16responseCallbackEiPKciPv>:
	}
	return bars;
}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
   df40c:	b430      	push	{r4, r5}
   df40e:	461c      	mov	r4, r3
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
   df410:	681b      	ldr	r3, [r3, #0]
   df412:	681d      	ldr	r5, [r3, #0]
   df414:	4613      	mov	r3, r2
   df416:	46ac      	mov	ip, r5
   df418:	460a      	mov	r2, r1
   df41a:	4601      	mov	r1, r0
   df41c:	4620      	mov	r0, r4
}
   df41e:	bc30      	pop	{r4, r5}
	return presp->parse(type, buf, len);
   df420:	4760      	bx	ip
	...

000df424 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>:
void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
   df424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   df428:	b08d      	sub	sp, #52	; 0x34
   df42a:	460c      	mov	r4, r1
	String typeStr;
   df42c:	a804      	add	r0, sp, #16
   df42e:	494d      	ldr	r1, [pc, #308]	; (df564 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
   df430:	4616      	mov	r6, r2
   df432:	461d      	mov	r5, r3
	String typeStr;
   df434:	f004 fbeb 	bl	e3c0e <_ZN6StringC1EPKc>
	switch(type) {
   df438:	f5b4 1f10 	cmp.w	r4, #2359296	; 0x240000
   df43c:	d064      	beq.n	df508 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe4>
   df43e:	dc1f      	bgt.n	df480 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x5c>
   df440:	f5b4 1f04 	cmp.w	r4, #2162688	; 0x210000
   df444:	d05c      	beq.n	df500 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xdc>
   df446:	dc13      	bgt.n	df470 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x4c>
   df448:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
   df44c:	d056      	beq.n	df4fc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd8>
   df44e:	f5b4 1f90 	cmp.w	r4, #1179648	; 0x120000
   df452:	d055      	beq.n	df500 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xdc>
   df454:	b35c      	cbz	r4, df4ae <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8a>
		typeStr = String::format("type=0x%x", type);
   df456:	4622      	mov	r2, r4
   df458:	a808      	add	r0, sp, #32
   df45a:	4943      	ldr	r1, [pc, #268]	; (df568 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x144>)
   df45c:	f004 fd9c 	bl	e3f98 <_ZN6String6formatEPKcz>
   df460:	a908      	add	r1, sp, #32
   df462:	a804      	add	r0, sp, #16
   df464:	f004 fc29 	bl	e3cba <_ZN6StringaSEOS_>
   df468:	a808      	add	r0, sp, #32
   df46a:	f004 fb85 	bl	e3b78 <_ZN6StringD1Ev>
		break;
   df46e:	e022      	b.n	df4b6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x92>
	switch(type) {
   df470:	f5b4 1f08 	cmp.w	r4, #2228224	; 0x220000
   df474:	d046      	beq.n	df504 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe0>
   df476:	f5b4 1f0c 	cmp.w	r4, #2293760	; 0x230000
   df47a:	d1ec      	bne.n	df456 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_NOCARRIER";
   df47c:	493b      	ldr	r1, [pc, #236]	; (df56c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x148>)
   df47e:	e017      	b.n	df4b0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
	switch(type) {
   df480:	f5b4 0f80 	cmp.w	r4, #4194304	; 0x400000
   df484:	d046      	beq.n	df514 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf0>
   df486:	dc0a      	bgt.n	df49e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x7a>
   df488:	f5b4 1f18 	cmp.w	r4, #2490368	; 0x260000
   df48c:	d03e      	beq.n	df50c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe8>
   df48e:	f5b4 1f40 	cmp.w	r4, #3145728	; 0x300000
   df492:	d03d      	beq.n	df510 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xec>
   df494:	f5b4 1f14 	cmp.w	r4, #2424832	; 0x250000
   df498:	d1dd      	bne.n	df456 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_BUSY";
   df49a:	4935      	ldr	r1, [pc, #212]	; (df570 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x14c>)
   df49c:	e008      	b.n	df4b0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
	switch(type) {
   df49e:	f5b4 0fa0 	cmp.w	r4, #5242880	; 0x500000
   df4a2:	d037      	beq.n	df514 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf0>
   df4a4:	f5b4 0fc0 	cmp.w	r4, #6291456	; 0x600000
   df4a8:	d1d5      	bne.n	df456 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_ABORTED";
   df4aa:	4932      	ldr	r1, [pc, #200]	; (df574 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x150>)
   df4ac:	e000      	b.n	df4b0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_UNKNOWN";
   df4ae:	4932      	ldr	r1, [pc, #200]	; (df578 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x154>)
		typeStr = "TYPE_OK";
   df4b0:	a804      	add	r0, sp, #16
   df4b2:	f004 fc0a 	bl	e3cca <_ZN6StringaSEPKc>
	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
   df4b6:	9a04      	ldr	r2, [sp, #16]
   df4b8:	4930      	ldr	r1, [pc, #192]	; (df57c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x158>)
   df4ba:	4831      	ldr	r0, [pc, #196]	; (df580 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
   df4bc:	4f31      	ldr	r7, [pc, #196]	; (df584 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x160>)
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   df4be:	f8df 80e4 	ldr.w	r8, [pc, #228]	; df5a4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x180>
   df4c2:	f8df 90e4 	ldr.w	r9, [pc, #228]	; df5a8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x184>
	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
   df4c6:	462b      	mov	r3, r5
   df4c8:	f7fa faf6 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
	String out;
   df4cc:	4925      	ldr	r1, [pc, #148]	; (df564 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
   df4ce:	a808      	add	r0, sp, #32
   df4d0:	f004 fb9d 	bl	e3c0e <_ZN6StringC1EPKc>
	for(int ii = 0; ii < len; ii++) {
   df4d4:	2400      	movs	r4, #0
   df4d6:	42ac      	cmp	r4, r5
   df4d8:	da35      	bge.n	df546 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x122>
		if (buf[ii] == '\n') {
   df4da:	5d31      	ldrb	r1, [r6, r4]
   df4dc:	290a      	cmp	r1, #10
   df4de:	d11b      	bne.n	df518 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf4>
   df4e0:	4649      	mov	r1, r9
   df4e2:	a808      	add	r0, sp, #32
   df4e4:	f004 fcab 	bl	e3e3e <_ZN6String6concatEPKc>
			Log.info(out);
   df4e8:	9908      	ldr	r1, [sp, #32]
   df4ea:	4825      	ldr	r0, [pc, #148]	; (df580 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
   df4ec:	f7fa fae4 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
			out = "";
   df4f0:	491c      	ldr	r1, [pc, #112]	; (df564 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
   df4f2:	a808      	add	r0, sp, #32
   df4f4:	f004 fbe9 	bl	e3cca <_ZN6StringaSEPKc>
	for(int ii = 0; ii < len; ii++) {
   df4f8:	3401      	adds	r4, #1
   df4fa:	e7ec      	b.n	df4d6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xb2>
		typeStr = "TYPE_OK";
   df4fc:	4922      	ldr	r1, [pc, #136]	; (df588 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x164>)
   df4fe:	e7d7      	b.n	df4b0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_ERROR";
   df500:	4922      	ldr	r1, [pc, #136]	; (df58c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x168>)
   df502:	e7d5      	b.n	df4b0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_CONNECT";
   df504:	4922      	ldr	r1, [pc, #136]	; (df590 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x16c>)
   df506:	e7d3      	b.n	df4b0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_NODIALTONE";
   df508:	4922      	ldr	r1, [pc, #136]	; (df594 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
   df50a:	e7d1      	b.n	df4b0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_NOANSWER";
   df50c:	4922      	ldr	r1, [pc, #136]	; (df598 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x174>)
   df50e:	e7cf      	b.n	df4b0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_PROMPT";
   df510:	4922      	ldr	r1, [pc, #136]	; (df59c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x178>)
   df512:	e7cd      	b.n	df4b0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_PLUS";
   df514:	4922      	ldr	r1, [pc, #136]	; (df5a0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x17c>)
   df516:	e7cb      	b.n	df4b0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		if (buf[ii] == '\r') {
   df518:	290d      	cmp	r1, #13
   df51a:	d104      	bne.n	df526 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x102>
   df51c:	4641      	mov	r1, r8
			out.concat(hex);
   df51e:	a808      	add	r0, sp, #32
   df520:	f004 fc8d 	bl	e3e3e <_ZN6String6concatEPKc>
   df524:	e7e8      	b.n	df4f8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd4>
		if (buf[ii] < ' ' || buf[ii] >= 127) {
   df526:	f1a1 0320 	sub.w	r3, r1, #32
   df52a:	2b5e      	cmp	r3, #94	; 0x5e
   df52c:	d907      	bls.n	df53e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x11a>
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
   df52e:	460b      	mov	r3, r1
   df530:	463a      	mov	r2, r7
   df532:	210a      	movs	r1, #10
   df534:	a801      	add	r0, sp, #4
   df536:	f001 ff2b 	bl	e1390 <snprintf>
			out.concat(hex);
   df53a:	a901      	add	r1, sp, #4
   df53c:	e7ef      	b.n	df51e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xfa>
			out.concat(buf[ii]);
   df53e:	a808      	add	r0, sp, #32
   df540:	f004 fc8e 	bl	e3e60 <_ZN6String6concatEc>
   df544:	e7d8      	b.n	df4f8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd4>
	if (out.length() > 0) {
   df546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   df548:	b11b      	cbz	r3, df552 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x12e>
		Log.info(out);
   df54a:	9908      	ldr	r1, [sp, #32]
   df54c:	480c      	ldr	r0, [pc, #48]	; (df580 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
   df54e:	f7fa fab3 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
	String out;
   df552:	a808      	add	r0, sp, #32
   df554:	f004 fb10 	bl	e3b78 <_ZN6StringD1Ev>
	String typeStr;
   df558:	a804      	add	r0, sp, #16
   df55a:	f004 fb0d 	bl	e3b78 <_ZN6StringD1Ev>
}
   df55e:	b00d      	add	sp, #52	; 0x34
   df560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   df564:	000e827d 	.word	0x000e827d
   df568:	000e821f 	.word	0x000e821f
   df56c:	000e81c5 	.word	0x000e81c5
   df570:	000e81e4 	.word	0x000e81e4
   df574:	000e8212 	.word	0x000e8212
   df578:	000e8198 	.word	0x000e8198
   df57c:	000e8229 	.word	0x000e8229
   df580:	2003e61c 	.word	0x2003e61c
   df584:	000e8250 	.word	0x000e8250
   df588:	000e81a5 	.word	0x000e81a5
   df58c:	000e81ad 	.word	0x000e81ad
   df590:	000e81b8 	.word	0x000e81b8
   df594:	000e81d4 	.word	0x000e81d4
   df598:	000e81ee 	.word	0x000e81ee
   df59c:	000e81fc 	.word	0x000e81fc
   df5a0:	000e8208 	.word	0x000e8208
   df5a4:	000e824d 	.word	0x000e824d
   df5a8:	000e824a 	.word	0x000e824a

000df5ac <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb>:
String CellularHelperPlusStringResponse::getDoubleQuotedPart(bool onlyFirst) const {
   df5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   df5b0:	460e      	mov	r6, r1
   df5b2:	4604      	mov	r4, r0
	String result;
   df5b4:	4913      	ldr	r1, [pc, #76]	; (df604 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x58>)
String CellularHelperPlusStringResponse::getDoubleQuotedPart(bool onlyFirst) const {
   df5b6:	4690      	mov	r8, r2
	String result;
   df5b8:	f004 fb29 	bl	e3c0e <_ZN6StringC1EPKc>
	result.reserve(string.length());
   df5bc:	6a71      	ldr	r1, [r6, #36]	; 0x24
   df5be:	4620      	mov	r0, r4
   df5c0:	f004 faf8 	bl	e3bb4 <_ZN6String7reserveEj>
	for(size_t ii = 0; ii < string.length(); ii++) {
   df5c4:	2500      	movs	r5, #0
	bool inQuoted = false;
   df5c6:	462f      	mov	r7, r5
		char ch = string.charAt(ii);
   df5c8:	f106 091c 	add.w	r9, r6, #28
	for(size_t ii = 0; ii < string.length(); ii++) {
   df5cc:	6a73      	ldr	r3, [r6, #36]	; 0x24
   df5ce:	429d      	cmp	r5, r3
   df5d0:	d215      	bcs.n	df5fe <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x52>
		char ch = string.charAt(ii);
   df5d2:	4629      	mov	r1, r5
   df5d4:	4648      	mov	r0, r9
   df5d6:	f004 fcae 	bl	e3f36 <_ZNK6String6charAtEj>
		if (ch == '"') {
   df5da:	2822      	cmp	r0, #34	; 0x22
		char ch = string.charAt(ii);
   df5dc:	4601      	mov	r1, r0
		if (ch == '"') {
   df5de:	d106      	bne.n	df5ee <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x42>
			if (!inQuoted && onlyFirst) {
   df5e0:	b15f      	cbz	r7, df5fa <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x4e>
   df5e2:	f1b8 0f00 	cmp.w	r8, #0
   df5e6:	d10a      	bne.n	df5fe <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x52>
			inQuoted = !inQuoted;
   df5e8:	4647      	mov	r7, r8
	for(size_t ii = 0; ii < string.length(); ii++) {
   df5ea:	3501      	adds	r5, #1
   df5ec:	e7ee      	b.n	df5cc <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x20>
			if (inQuoted) {
   df5ee:	2f00      	cmp	r7, #0
   df5f0:	d0fb      	beq.n	df5ea <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x3e>
				result.concat(ch);
   df5f2:	4620      	mov	r0, r4
   df5f4:	f004 fc34 	bl	e3e60 <_ZN6String6concatEc>
   df5f8:	e7f7      	b.n	df5ea <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x3e>
			inQuoted = !inQuoted;
   df5fa:	2701      	movs	r7, #1
   df5fc:	e7f5      	b.n	df5ea <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x3e>
}
   df5fe:	4620      	mov	r0, r4
   df600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   df604:	000e827d 	.word	0x000e827d

000df608 <_ZN30CellularHelperRSSIQualResponse11postProcessEv>:
void CellularHelperRSSIQualResponse::postProcess() {
   df608:	b510      	push	{r4, lr}
	if (sscanf(string.c_str(), "%d,%d", &rssi, &qual) == 2) {
   df60a:	f100 0340 	add.w	r3, r0, #64	; 0x40
   df60e:	f100 023c 	add.w	r2, r0, #60	; 0x3c
   df612:	490a      	ldr	r1, [pc, #40]	; (df63c <_ZN30CellularHelperRSSIQualResponse11postProcessEv+0x34>)
void CellularHelperRSSIQualResponse::postProcess() {
   df614:	4604      	mov	r4, r0
	if (sscanf(string.c_str(), "%d,%d", &rssi, &qual) == 2) {
   df616:	69c0      	ldr	r0, [r0, #28]
   df618:	f001 feb2 	bl	e1380 <sscanf>
   df61c:	2802      	cmp	r0, #2
   df61e:	d10a      	bne.n	df636 <_ZN30CellularHelperRSSIQualResponse11postProcessEv+0x2e>
		if (rssi < 99) {
   df620:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   df622:	2b62      	cmp	r3, #98	; 0x62
			rssi = -113 + (rssi * 2);
   df624:	bfda      	itte	le
   df626:	005b      	lslle	r3, r3, #1
   df628:	3b71      	suble	r3, #113	; 0x71
			rssi = 0;
   df62a:	2300      	movgt	r3, #0
   df62c:	63e3      	str	r3, [r4, #60]	; 0x3c
		resp = RESP_OK;
   df62e:	f06f 0301 	mvn.w	r3, #1
		resp = RESP_ERROR;
   df632:	6063      	str	r3, [r4, #4]
}
   df634:	bd10      	pop	{r4, pc}
		resp = RESP_ERROR;
   df636:	f06f 0302 	mvn.w	r3, #2
   df63a:	e7fa      	b.n	df632 <_ZN30CellularHelperRSSIQualResponse11postProcessEv+0x2a>
   df63c:	000e8257 	.word	0x000e8257

000df640 <_ZN32CellularHelperPlusStringResponseC1Ev>:
class CellularHelperCommonResponse {
   df640:	f06f 0302 	mvn.w	r3, #2
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
   df644:	b510      	push	{r4, lr}
class CellularHelperCommonResponse {
   df646:	6043      	str	r3, [r0, #4]
   df648:	2300      	movs	r3, #0
   df64a:	7203      	strb	r3, [r0, #8]
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
   df64c:	4b09      	ldr	r3, [pc, #36]	; (df674 <_ZN32CellularHelperPlusStringResponseC1Ev+0x34>)
   df64e:	490a      	ldr	r1, [pc, #40]	; (df678 <_ZN32CellularHelperPlusStringResponseC1Ev+0x38>)
   df650:	4604      	mov	r4, r0
   df652:	f840 3b0c 	str.w	r3, [r0], #12
   df656:	f004 fada 	bl	e3c0e <_ZN6StringC1EPKc>
   df65a:	4907      	ldr	r1, [pc, #28]	; (df678 <_ZN32CellularHelperPlusStringResponseC1Ev+0x38>)
   df65c:	f104 001c 	add.w	r0, r4, #28
   df660:	f004 fad5 	bl	e3c0e <_ZN6StringC1EPKc>
   df664:	4904      	ldr	r1, [pc, #16]	; (df678 <_ZN32CellularHelperPlusStringResponseC1Ev+0x38>)
   df666:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   df66a:	f004 fad0 	bl	e3c0e <_ZN6StringC1EPKc>
   df66e:	4620      	mov	r0, r4
   df670:	bd10      	pop	{r4, pc}
   df672:	bf00      	nop
   df674:	000e82b0 	.word	0x000e82b0
   df678:	000e827d 	.word	0x000e827d

000df67c <_ZN32CellularHelperPlusStringResponseD1Ev>:
   df67c:	b510      	push	{r4, lr}
   df67e:	4b08      	ldr	r3, [pc, #32]	; (df6a0 <_ZN32CellularHelperPlusStringResponseD1Ev+0x24>)
   df680:	4604      	mov	r4, r0
   df682:	f840 3b2c 	str.w	r3, [r0], #44
   df686:	f004 fa77 	bl	e3b78 <_ZN6StringD1Ev>
   df68a:	f104 001c 	add.w	r0, r4, #28
   df68e:	f004 fa73 	bl	e3b78 <_ZN6StringD1Ev>
   df692:	f104 000c 	add.w	r0, r4, #12
   df696:	f004 fa6f 	bl	e3b78 <_ZN6StringD1Ev>
   df69a:	4620      	mov	r0, r4
   df69c:	bd10      	pop	{r4, pc}
   df69e:	bf00      	nop
   df6a0:	000e82b0 	.word	0x000e82b0

000df6a4 <_ZNK19CellularHelperClass15getOperatorNameEi>:
String CellularHelperClass::getOperatorName(int operatorNameType) const {
   df6a4:	b530      	push	{r4, r5, lr}
	String result;
   df6a6:	4914      	ldr	r1, [pc, #80]	; (df6f8 <_ZNK19CellularHelperClass15getOperatorNameEi+0x54>)
String CellularHelperClass::getOperatorName(int operatorNameType) const {
   df6a8:	b097      	sub	sp, #92	; 0x5c
   df6aa:	4615      	mov	r5, r2
   df6ac:	4604      	mov	r4, r0
	String result;
   df6ae:	f004 faae 	bl	e3c0e <_ZN6StringC1EPKc>
	CellularHelperPlusStringResponse resp;
   df6b2:	a807      	add	r0, sp, #28
   df6b4:	f7ff ffc4 	bl	df640 <_ZN32CellularHelperPlusStringResponseC1Ev>
	resp.command = "UDOPN";
   df6b8:	4910      	ldr	r1, [pc, #64]	; (df6fc <_ZNK19CellularHelperClass15getOperatorNameEi+0x58>)
   df6ba:	a80a      	add	r0, sp, #40	; 0x28
   df6bc:	f004 fb05 	bl	e3cca <_ZN6StringaSEPKc>

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
   df6c0:	4b0f      	ldr	r3, [pc, #60]	; (df700 <_ZNK19CellularHelperClass15getOperatorNameEi+0x5c>)
   df6c2:	4810      	ldr	r0, [pc, #64]	; (df704 <_ZNK19CellularHelperClass15getOperatorNameEi+0x60>)
   df6c4:	9500      	str	r5, [sp, #0]
   df6c6:	f242 7210 	movw	r2, #10000	; 0x2710
   df6ca:	a907      	add	r1, sp, #28
   df6cc:	f001 faa2 	bl	e0c14 <cellular_command>
	if (respCode == RESP_OK) {
   df6d0:	3002      	adds	r0, #2
   df6d2:	d10b      	bne.n	df6ec <_ZNK19CellularHelperClass15getOperatorNameEi+0x48>
		result = resp.getDoubleQuotedPart();
   df6d4:	2201      	movs	r2, #1
   df6d6:	a907      	add	r1, sp, #28
   df6d8:	a803      	add	r0, sp, #12
   df6da:	f7ff ff67 	bl	df5ac <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb>
   df6de:	a903      	add	r1, sp, #12
   df6e0:	4620      	mov	r0, r4
   df6e2:	f004 faea 	bl	e3cba <_ZN6StringaSEOS_>
   df6e6:	a803      	add	r0, sp, #12
   df6e8:	f004 fa46 	bl	e3b78 <_ZN6StringD1Ev>
	CellularHelperPlusStringResponse resp;
   df6ec:	a807      	add	r0, sp, #28
   df6ee:	f7ff ffc5 	bl	df67c <_ZN32CellularHelperPlusStringResponseD1Ev>
}
   df6f2:	4620      	mov	r0, r4
   df6f4:	b017      	add	sp, #92	; 0x5c
   df6f6:	bd30      	pop	{r4, r5, pc}
   df6f8:	000e827d 	.word	0x000e827d
   df6fc:	000e825d 	.word	0x000e825d
   df700:	000e8263 	.word	0x000e8263
   df704:	000df40d 	.word	0x000df40d

000df708 <_ZNK19CellularHelperClass11getRSSIQualEv>:
CellularHelperRSSIQualResponse CellularHelperClass::getRSSIQual() const {
   df708:	b510      	push	{r4, lr}
   df70a:	4604      	mov	r4, r0
 * Note that for 2G, qual is not available and 99 is always returned.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperRSSIQualResponse : public CellularHelperPlusStringResponse {
   df70c:	f7ff ff98 	bl	df640 <_ZN32CellularHelperPlusStringResponseC1Ev>
   df710:	4b0c      	ldr	r3, [pc, #48]	; (df744 <_ZNK19CellularHelperClass11getRSSIQualEv+0x3c>)
   df712:	6023      	str	r3, [r4, #0]
   df714:	2300      	movs	r3, #0
   df716:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
	resp.command = "CSQ";
   df71a:	490b      	ldr	r1, [pc, #44]	; (df748 <_ZNK19CellularHelperClass11getRSSIQualEv+0x40>)
   df71c:	f104 000c 	add.w	r0, r4, #12
   df720:	f004 fad3 	bl	e3cca <_ZN6StringaSEPKc>
   df724:	4b09      	ldr	r3, [pc, #36]	; (df74c <_ZNK19CellularHelperClass11getRSSIQualEv+0x44>)
   df726:	480a      	ldr	r0, [pc, #40]	; (df750 <_ZNK19CellularHelperClass11getRSSIQualEv+0x48>)
   df728:	f242 7210 	movw	r2, #10000	; 0x2710
   df72c:	4621      	mov	r1, r4
   df72e:	f001 fa71 	bl	e0c14 <cellular_command>
	resp.resp = Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CSQ\r\n");
   df732:	6060      	str	r0, [r4, #4]
	if (resp.resp == RESP_OK) {
   df734:	3002      	adds	r0, #2
   df736:	d102      	bne.n	df73e <_ZNK19CellularHelperClass11getRSSIQualEv+0x36>
		resp.postProcess();
   df738:	4620      	mov	r0, r4
   df73a:	f7ff ff65 	bl	df608 <_ZN30CellularHelperRSSIQualResponse11postProcessEv>
}
   df73e:	4620      	mov	r0, r4
   df740:	bd10      	pop	{r4, pc}
   df742:	bf00      	nop
   df744:	000e82a4 	.word	0x000e82a4
   df748:	000e8271 	.word	0x000e8271
   df74c:	000e8275 	.word	0x000e8275
   df750:	000df40d 	.word	0x000df40d

000df754 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>:
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
   df754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   df758:	460c      	mov	r4, r1
   df75a:	461e      	mov	r6, r3
	str.reserve(str.length() + (size_t)len + 1);
   df75c:	1c59      	adds	r1, r3, #1
   df75e:	68a3      	ldr	r3, [r4, #8]
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
   df760:	f89d 8018 	ldrb.w	r8, [sp, #24]
	str.reserve(str.length() + (size_t)len + 1);
   df764:	4419      	add	r1, r3
   df766:	4620      	mov	r0, r4
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
   df768:	4617      	mov	r7, r2
	str.reserve(str.length() + (size_t)len + 1);
   df76a:	f004 fa23 	bl	e3bb4 <_ZN6String7reserveEj>
	for(int ii = 0; ii < len; ii++) {
   df76e:	2500      	movs	r5, #0
   df770:	42b5      	cmp	r5, r6
   df772:	da0c      	bge.n	df78e <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
		if (!noEOL || (buf[ii] != '\r' && buf[ii] != '\n')) {
   df774:	5d79      	ldrb	r1, [r7, r5]
   df776:	f1b8 0f00 	cmp.w	r8, #0
   df77a:	d003      	beq.n	df784 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x30>
   df77c:	290d      	cmp	r1, #13
   df77e:	d004      	beq.n	df78a <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x36>
   df780:	290a      	cmp	r1, #10
   df782:	d002      	beq.n	df78a <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x36>
			str.concat(buf[ii]);
   df784:	4620      	mov	r0, r4
   df786:	f004 fb6b 	bl	e3e60 <_ZN6String6concatEc>
	for(int ii = 0; ii < len; ii++) {
   df78a:	3501      	adds	r5, #1
   df78c:	e7f0      	b.n	df770 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x1c>
}
   df78e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000df794 <_ZN32CellularHelperPlusStringResponse5parseEiPKci>:
int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
   df794:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (enableDebug) {
   df796:	f890 c008 	ldrb.w	ip, [r0, #8]
int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
   df79a:	b08b      	sub	sp, #44	; 0x2c
   df79c:	4604      	mov	r4, r0
   df79e:	460e      	mov	r6, r1
   df7a0:	4617      	mov	r7, r2
   df7a2:	461d      	mov	r5, r3
	if (enableDebug) {
   df7a4:	f1bc 0f00 	cmp.w	ip, #0
   df7a8:	d001      	beq.n	df7ae <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x1a>
		logCellularDebug(type, buf, len);
   df7aa:	f7ff fe3b 	bl	df424 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	if (type == TYPE_PLUS) {
   df7ae:	f5b6 0f80 	cmp.w	r6, #4194304	; 0x400000
   df7b2:	d13d      	bne.n	df830 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x9c>
		char *copy = (char *) malloc(len + 1);
   df7b4:	1c68      	adds	r0, r5, #1
   df7b6:	f001 fdc3 	bl	e1340 <malloc>
		if (copy) {
   df7ba:	4606      	mov	r6, r0
   df7bc:	2800      	cmp	r0, #0
   df7be:	d037      	beq.n	df830 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x9c>
			strncpy(copy, buf, len);
   df7c0:	462a      	mov	r2, r5
   df7c2:	4639      	mov	r1, r7
   df7c4:	f006 f801 	bl	e57ca <strncpy>
			copy[len] = 0;
   df7c8:	2300      	movs	r3, #0
   df7ca:	5573      	strb	r3, [r6, r5]
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
   df7cc:	4a1a      	ldr	r2, [pc, #104]	; (df838 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0xa4>)
   df7ce:	68e3      	ldr	r3, [r4, #12]
   df7d0:	2120      	movs	r1, #32
   df7d2:	a802      	add	r0, sp, #8
   df7d4:	f001 fddc 	bl	e1390 <snprintf>
			char *start = strstr(copy, searchFor);
   df7d8:	a902      	add	r1, sp, #8
   df7da:	4630      	mov	r0, r6
   df7dc:	f006 f81c 	bl	e5818 <strstr>
			if (start) {
   df7e0:	4605      	mov	r5, r0
   df7e2:	b310      	cbz	r0, df82a <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x96>
				start += strlen(searchFor);
   df7e4:	a802      	add	r0, sp, #8
   df7e6:	f005 ffd6 	bl	e5796 <strlen>
				if (delim.length() > 0 && string.length() > 0) {
   df7ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
				start += strlen(searchFor);
   df7ec:	4405      	add	r5, r0
	inline unsigned int length(void) const {return len;}
   df7ee:	f104 071c 	add.w	r7, r4, #28
				if (delim.length() > 0 && string.length() > 0) {
   df7f2:	b173      	cbz	r3, df812 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x7e>
   df7f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   df7f6:	b163      	cbz	r3, df812 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x7e>
					Log.info("adding delimiter '%s'", delim.c_str());
   df7f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   df7fa:	4910      	ldr	r1, [pc, #64]	; (df83c <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0xa8>)
   df7fc:	4810      	ldr	r0, [pc, #64]	; (df840 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0xac>)
   df7fe:	f7fa f95b 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
					CellularHelper.appendBufferToString(string, delim, delim.length());
   df802:	2301      	movs	r3, #1
   df804:	9300      	str	r3, [sp, #0]
   df806:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   df808:	6b63      	ldr	r3, [r4, #52]	; 0x34
   df80a:	480e      	ldr	r0, [pc, #56]	; (df844 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0xb0>)
   df80c:	4639      	mov	r1, r7
   df80e:	f7ff ffa1 	bl	df754 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
				char *end = strchr(start, '\r');
   df812:	210d      	movs	r1, #13
   df814:	4628      	mov	r0, r5
   df816:	f005 ff77 	bl	e5708 <strchr>
				CellularHelper.appendBufferToString(string, start, end - start);
   df81a:	2301      	movs	r3, #1
   df81c:	9300      	str	r3, [sp, #0]
   df81e:	462a      	mov	r2, r5
   df820:	1b43      	subs	r3, r0, r5
   df822:	4639      	mov	r1, r7
   df824:	4807      	ldr	r0, [pc, #28]	; (df844 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0xb0>)
   df826:	f7ff ff95 	bl	df754 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
			free(copy);
   df82a:	4630      	mov	r0, r6
   df82c:	f001 fd90 	bl	e1350 <free>
}
   df830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   df834:	b00b      	add	sp, #44	; 0x2c
   df836:	bdf0      	pop	{r4, r5, r6, r7, pc}
   df838:	000e827e 	.word	0x000e827e
   df83c:	000e8285 	.word	0x000e8285
   df840:	2003e61c 	.word	0x2003e61c
   df844:	2003e5c0 	.word	0x2003e5c0

000df848 <_ZN19CellularHelperClass10rssiToBarsEi>:
	if (rssi < 0) {
   df848:	2800      	cmp	r0, #0
   df84a:	da11      	bge.n	df870 <_ZN19CellularHelperClass10rssiToBarsEi+0x28>
		if (rssi >= -57)      bars = 5;
   df84c:	f110 0f39 	cmn.w	r0, #57	; 0x39
   df850:	da10      	bge.n	df874 <_ZN19CellularHelperClass10rssiToBarsEi+0x2c>
		else if (rssi > -68)  bars = 4;
   df852:	f110 0f43 	cmn.w	r0, #67	; 0x43
   df856:	da0f      	bge.n	df878 <_ZN19CellularHelperClass10rssiToBarsEi+0x30>
		else if (rssi > -80)  bars = 3;
   df858:	f110 0f4f 	cmn.w	r0, #79	; 0x4f
   df85c:	da0e      	bge.n	df87c <_ZN19CellularHelperClass10rssiToBarsEi+0x34>
		else if (rssi > -92)  bars = 2;
   df85e:	f110 0f5b 	cmn.w	r0, #91	; 0x5b
   df862:	da0d      	bge.n	df880 <_ZN19CellularHelperClass10rssiToBarsEi+0x38>
		else if (rssi > -104) bars = 1;
   df864:	f110 0f67 	cmn.w	r0, #103	; 0x67
   df868:	bfb4      	ite	lt
   df86a:	2000      	movlt	r0, #0
   df86c:	2001      	movge	r0, #1
   df86e:	4770      	bx	lr
	int bars = 0;
   df870:	2000      	movs	r0, #0
   df872:	4770      	bx	lr
		if (rssi >= -57)      bars = 5;
   df874:	2005      	movs	r0, #5
   df876:	4770      	bx	lr
		else if (rssi > -68)  bars = 4;
   df878:	2004      	movs	r0, #4
   df87a:	4770      	bx	lr
		else if (rssi > -80)  bars = 3;
   df87c:	2003      	movs	r0, #3
   df87e:	4770      	bx	lr
		else if (rssi > -92)  bars = 2;
   df880:	2002      	movs	r0, #2
}
   df882:	4770      	bx	lr

000df884 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>:
    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   df884:	b513      	push	{r0, r1, r4, lr}
    return Flags<TagT, ValueT>(val_ | flags.val_);
   df886:	431a      	orrs	r2, r3
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   df888:	f88d 2000 	strb.w	r2, [sp]
   df88c:	233c      	movs	r3, #60	; 0x3c
   df88e:	460a      	mov	r2, r1
   df890:	4903      	ldr	r1, [pc, #12]	; (df8a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0+0x1c>)
    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   df892:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   df894:	f001 ffe2 	bl	e185c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }
   df898:	4620      	mov	r0, r4
   df89a:	b002      	add	sp, #8
   df89c:	bd10      	pop	{r4, pc}
   df89e:	bf00      	nop
   df8a0:	000e70c4 	.word	0x000e70c4

000df8a4 <_ZN6ModbusC1Ehhhh>:
 * @param u8rxenpin pin for rxen RS-485 (=0 means USB/RS232C mode)
 * @ingroup setup
 * @overload Modbus::Modbus(uint8_t u8id, uint8_t u8serno, uint8_t u8txenpin, uint8_t u8rxenpin)
 * @overload Modbus::Modbus()
 */
Modbus::Modbus(uint8_t u8id, uint8_t u8serno, uint8_t u8txenpin, uint8_t u8rxenpin) {
   df8a4:	b530      	push	{r4, r5, lr}
/* _____PRIVATE FUNCTIONS_____________________________________________________ */

void Modbus::init(uint8_t u8id, uint8_t u8serno, uint8_t u8txenpin, uint8_t u8rxenpin) {
  this->u8id = u8id;
  this->u8serno = (u8serno > 3) ? 0 : u8serno;
  this->u8txenpin = u8txenpin;
   df8a6:	7183      	strb	r3, [r0, #6]
Modbus::Modbus(uint8_t u8id, uint8_t u8serno, uint8_t u8txenpin, uint8_t u8rxenpin) {
   df8a8:	2500      	movs	r5, #0
  this->u8rxenpin = u8rxenpin;
   df8aa:	f89d 300c 	ldrb.w	r3, [sp, #12]
   df8ae:	71c3      	strb	r3, [r0, #7]
  this->u8serno = (u8serno > 3) ? 0 : u8serno;
   df8b0:	2a03      	cmp	r2, #3
   df8b2:	bf88      	it	hi
   df8b4:	462a      	movhi	r2, r5
  this->u16timeOut = 1000;
   df8b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
Modbus::Modbus(uint8_t u8id, uint8_t u8serno, uint8_t u8txenpin, uint8_t u8rxenpin) {
   df8ba:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
   df8be:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
  this->u8id = u8id;
   df8c2:	7101      	strb	r1, [r0, #4]
  this->u8serno = (u8serno > 3) ? 0 : u8serno;
   df8c4:	7142      	strb	r2, [r0, #5]
  this->u16timeOut = 1000;
   df8c6:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
}
   df8ca:	bd30      	pop	{r4, r5, pc}

000df8cc <_ZN6Modbus10setTimeOutEt>:
  this->u16timeOut = u16timeOut;
   df8cc:	f8a0 1056 	strh.w	r1, [r0, #86]	; 0x56
}
   df8d0:	4770      	bx	lr

000df8d2 <_ZN6Modbus8getStateEv>:
}
   df8d2:	7a00      	ldrb	r0, [r0, #8]
   df8d4:	4770      	bx	lr

000df8d6 <_ZN6Modbus7calcCRCEh>:
 * This method calculates CRC
 *
 * @return uint16_t calculated CRC value for the message
 * @ingroup buffer
 */
uint16_t Modbus::calcCRC(uint8_t u8length) {
   df8d6:	b570      	push	{r4, r5, r6, lr}
   df8d8:	300a      	adds	r0, #10
   df8da:	2400      	movs	r4, #0
  unsigned int temp, temp2, flag;
  temp = 0xFFFF;
   df8dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    temp = temp ^ au8Buffer[i];
    for (unsigned char j = 1; j <= 8; j++) {
      flag = temp & 0x0001;
      temp >>=1;
      if (flag)
        temp ^= 0xA001;
   df8e0:	f24a 0501 	movw	r5, #40961	; 0xa001
  for (unsigned char i = 0; i < u8length; i++) {
   df8e4:	b2e2      	uxtb	r2, r4
   df8e6:	4291      	cmp	r1, r2
   df8e8:	d90e      	bls.n	df908 <_ZN6Modbus7calcCRCEh+0x32>
    temp = temp ^ au8Buffer[i];
   df8ea:	f810 2b01 	ldrb.w	r2, [r0], #1
   df8ee:	4053      	eors	r3, r2
   df8f0:	2208      	movs	r2, #8
      flag = temp & 0x0001;
   df8f2:	f003 0601 	and.w	r6, r3, #1
      temp >>=1;
   df8f6:	085b      	lsrs	r3, r3, #1
      if (flag)
   df8f8:	b106      	cbz	r6, df8fc <_ZN6Modbus7calcCRCEh+0x26>
        temp ^= 0xA001;
   df8fa:	406b      	eors	r3, r5
    for (unsigned char j = 1; j <= 8; j++) {
   df8fc:	3a01      	subs	r2, #1
   df8fe:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   df902:	d1f6      	bne.n	df8f2 <_ZN6Modbus7calcCRCEh+0x1c>
  for (unsigned char i = 0; i < u8length; i++) {
   df904:	3401      	adds	r4, #1
   df906:	e7ed      	b.n	df8e4 <_ZN6Modbus7calcCRCEh+0xe>
    }
  }
  // Reverse byte order.
  temp2 = temp >> 8;
  temp = (temp << 8) | temp2;
   df908:	0218      	lsls	r0, r3, #8
   df90a:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
  temp &= 0xFFFF;
  // the returned value is already swapped
  // crcLo byte is first & crcHi byte is last
  return temp;
}
   df90e:	b280      	uxth	r0, r0
   df910:	bd70      	pop	{r4, r5, r6, pc}

000df912 <_ZN6Modbus7get_FC1Ev>:
 * 
 * @ingroup register
 * Edit: Emmanuel E. Ajari(10/17/2022)
 */
void Modbus::get_FC1() 
{
   df912:	b5f0      	push	{r4, r5, r6, r7, lr}
   df914:	2400      	movs	r4, #0
  const uint8_t BYTE_MASK = 1;
  buff_indx = 3;
  array_indx = 0;
   
   // Cycle through the received bytes
   for (i=0; i < au8Buffer[2]; i++) 
   df916:	7b02      	ldrb	r2, [r0, #12]
   df918:	b2e3      	uxtb	r3, r4
   df91a:	1cd9      	adds	r1, r3, #3
   df91c:	00df      	lsls	r7, r3, #3
   df91e:	429a      	cmp	r2, r3
   df920:	b2c9      	uxtb	r1, r1
   df922:	b2ff      	uxtb	r7, r7
   df924:	d90f      	bls.n	df946 <_ZN6Modbus7get_FC1Ev+0x34>
   df926:	2300      	movs	r3, #0
   {
     // Extract the state of each bit of a byte into the ouput array
     for (byte_itr = 0; byte_itr < 8; byte_itr++)
     {
       au16regs[array_indx++] = (au8Buffer[buff_indx] >> (BYTE_MASK * byte_itr)) & BYTE_MASK;
   df928:	4401      	add	r1, r0
   df92a:	7a8a      	ldrb	r2, [r1, #10]
   df92c:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
   df92e:	18fe      	adds	r6, r7, r3
   df930:	411a      	asrs	r2, r3
   df932:	b2f6      	uxtb	r6, r6
   df934:	3301      	adds	r3, #1
   df936:	f002 0201 	and.w	r2, r2, #1
     for (byte_itr = 0; byte_itr < 8; byte_itr++)
   df93a:	2b08      	cmp	r3, #8
       au16regs[array_indx++] = (au8Buffer[buff_indx] >> (BYTE_MASK * byte_itr)) & BYTE_MASK;
   df93c:	f825 2016 	strh.w	r2, [r5, r6, lsl #1]
     for (byte_itr = 0; byte_itr < 8; byte_itr++)
   df940:	d1f3      	bne.n	df92a <_ZN6Modbus7get_FC1Ev+0x18>
   for (i=0; i < au8Buffer[2]; i++) 
   df942:	3401      	adds	r4, #1
   df944:	e7e7      	b.n	df916 <_ZN6Modbus7get_FC1Ev+0x4>
     }
     buff_indx++;  
   }
}
   df946:	bdf0      	pop	{r4, r5, r6, r7, pc}

000df948 <_ZN6Modbus7get_FC3Ev>:
 * This method processes functions 3 & 4 (for master)
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void Modbus::get_FC3() {
   df948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t u8byte, i;
  u8byte = 3;

  #ifdef LOGGING
    Log.info("MODBUS> FC3: ");
   df94a:	4913      	ldr	r1, [pc, #76]	; (df998 <_ZN6Modbus7get_FC3Ev+0x50>)
      au8Buffer[ u8byte + 1 ]
    );

    #ifdef LOGGING
      Serial.print(au16regs[ i ], HEX);
      Log.info(" ");
   df94c:	4f13      	ldr	r7, [pc, #76]	; (df99c <_ZN6Modbus7get_FC3Ev+0x54>)
   df94e:	4e14      	ldr	r6, [pc, #80]	; (df9a0 <_ZN6Modbus7get_FC3Ev+0x58>)
void Modbus::get_FC3() {
   df950:	4604      	mov	r4, r0
    Log.info("MODBUS> FC3: ");
   df952:	4813      	ldr	r0, [pc, #76]	; (df9a0 <_ZN6Modbus7get_FC3Ev+0x58>)
   df954:	f7fa f8b0 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
   df958:	2500      	movs	r5, #0
   df95a:	b2ea      	uxtb	r2, r5
  for (i=0; i < au8Buffer[ 2 ] /2; i++) {
   df95c:	7b21      	ldrb	r1, [r4, #12]
   df95e:	0053      	lsls	r3, r2, #1
   df960:	3303      	adds	r3, #3
   df962:	ebb2 0f51 	cmp.w	r2, r1, lsr #1
   df966:	b2db      	uxtb	r3, r3
   df968:	d215      	bcs.n	df996 <_ZN6Modbus7get_FC3Ev+0x4e>
    au16regs[ i ] = word(
   df96a:	4423      	add	r3, r4
   df96c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   df96e:	7a99      	ldrb	r1, [r3, #10]
   df970:	7adb      	ldrb	r3, [r3, #11]
   df972:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   df976:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
      Serial.print(au16regs[ i ], HEX);
   df97a:	f004 fcf9 	bl	e4370 <_Z16_fetch_usbserialv>
   df97e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   df980:	2210      	movs	r2, #16
   df982:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
   df986:	f003 ff57 	bl	e3838 <_ZN5Print11printNumberEmh>
      Log.info(" ");
   df98a:	4639      	mov	r1, r7
   df98c:	4630      	mov	r0, r6
   df98e:	f7fa f893 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
  for (i=0; i < au8Buffer[ 2 ] /2; i++) {
   df992:	3501      	adds	r5, #1
   df994:	e7e1      	b.n	df95a <_ZN6Modbus7get_FC3Ev+0x12>
    u8byte += 2;

  }
  #ifdef LOGGING
  #endif
}
   df996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   df998:	000e82b4 	.word	0x000e82b4
   df99c:	000e885d 	.word	0x000e885d
   df9a0:	2003e61c 	.word	0x2003e61c

000df9a4 <_ZN6Modbus14validateAnswerEv>:
uint8_t Modbus::validateAnswer() {
   df9a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ((au8Buffer[u8BufferSize - 2] << 8)
   df9a6:	f890 504a 	ldrb.w	r5, [r0, #74]	; 0x4a
uint8_t Modbus::validateAnswer() {
   df9aa:	4604      	mov	r4, r0
  if ( calcCRC( u8BufferSize-2 ) != u16MsgCRC ) {
   df9ac:	1ea9      	subs	r1, r5, #2
    ((au8Buffer[u8BufferSize - 2] << 8)
   df9ae:	4425      	add	r5, r4
  if ( calcCRC( u8BufferSize-2 ) != u16MsgCRC ) {
   df9b0:	b2c9      	uxtb	r1, r1
   df9b2:	f7ff ff90 	bl	df8d6 <_ZN6Modbus7calcCRCEh>
    ((au8Buffer[u8BufferSize - 2] << 8)
   df9b6:	7a2a      	ldrb	r2, [r5, #8]
    | au8Buffer[u8BufferSize - 1]); // combine the crc Low & High bytes
   df9b8:	7a6b      	ldrb	r3, [r5, #9]
  if ( calcCRC( u8BufferSize-2 ) != u16MsgCRC ) {
   df9ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   df9be:	4298      	cmp	r0, r3
   df9c0:	d01f      	beq.n	dfa02 <_ZN6Modbus14validateAnswerEv+0x5e>
    u16errCnt ++;
   df9c2:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
      Log.info("MODBUS> ");
   df9c6:	494e      	ldr	r1, [pc, #312]	; (dfb00 <_ZN6Modbus14validateAnswerEv+0x15c>)
   df9c8:	484e      	ldr	r0, [pc, #312]	; (dfb04 <_ZN6Modbus14validateAnswerEv+0x160>)
    u16errCnt ++;
   df9ca:	3301      	adds	r3, #1
   df9cc:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
      Log.info("MODBUS> ");
   df9d0:	f7fa f872 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("validateAnswer: NO_REPLY");
   df9d4:	494c      	ldr	r1, [pc, #304]	; (dfb08 <_ZN6Modbus14validateAnswerEv+0x164>)
   df9d6:	484b      	ldr	r0, [pc, #300]	; (dfb04 <_ZN6Modbus14validateAnswerEv+0x160>)
   df9d8:	f7fa f86e 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
      validate_ans = false;
   df9dc:	2300      	movs	r3, #0
   df9de:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      if(MODBUS_DEBUG_ON)
   df9e2:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   df9e6:	b153      	cbz	r3, df9fe <_ZN6Modbus14validateAnswerEv+0x5a>
        Particle.publish("gx_metrics", "validateAnswer: NO_REPLY", PRIVATE, WITH_ACK);
   df9e8:	4b48      	ldr	r3, [pc, #288]	; (dfb0c <_ZN6Modbus14validateAnswerEv+0x168>)
   df9ea:	4a49      	ldr	r2, [pc, #292]	; (dfb10 <_ZN6Modbus14validateAnswerEv+0x16c>)
   df9ec:	781b      	ldrb	r3, [r3, #0]
   df9ee:	7812      	ldrb	r2, [r2, #0]
   df9f0:	4945      	ldr	r1, [pc, #276]	; (dfb08 <_ZN6Modbus14validateAnswerEv+0x164>)
   df9f2:	4668      	mov	r0, sp
   df9f4:	f7ff ff46 	bl	df884 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   df9f8:	a801      	add	r0, sp, #4
   df9fa:	f7fa fe78 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return NO_REPLY;
   df9fe:	20ff      	movs	r0, #255	; 0xff
   dfa00:	e05a      	b.n	dfab8 <_ZN6Modbus14validateAnswerEv+0x114>
  if ((au8Buffer[ FUNC ] & 0x80) != 0) {
   dfa02:	f994 300b 	ldrsb.w	r3, [r4, #11]
   dfa06:	7ae1      	ldrb	r1, [r4, #11]
   dfa08:	2b00      	cmp	r3, #0
   dfa0a:	da1f      	bge.n	dfa4c <_ZN6Modbus14validateAnswerEv+0xa8>
    u16errCnt ++;
   dfa0c:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
      Log.info("MODBUS> ");
   dfa10:	493b      	ldr	r1, [pc, #236]	; (dfb00 <_ZN6Modbus14validateAnswerEv+0x15c>)
   dfa12:	483c      	ldr	r0, [pc, #240]	; (dfb04 <_ZN6Modbus14validateAnswerEv+0x160>)
    u16errCnt ++;
   dfa14:	3301      	adds	r3, #1
   dfa16:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
      Log.info("MODBUS> ");
   dfa1a:	f7fa f84d 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("validateAnswer: ERR_EXCEPTION");
   dfa1e:	493d      	ldr	r1, [pc, #244]	; (dfb14 <_ZN6Modbus14validateAnswerEv+0x170>)
   dfa20:	4838      	ldr	r0, [pc, #224]	; (dfb04 <_ZN6Modbus14validateAnswerEv+0x160>)
   dfa22:	f7fa f849 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
      validate_ans = false;
   dfa26:	2300      	movs	r3, #0
   dfa28:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      if(MODBUS_DEBUG_ON)
   dfa2c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   dfa30:	b153      	cbz	r3, dfa48 <_ZN6Modbus14validateAnswerEv+0xa4>
        Particle.publish("gx_metrics", "validateAnswer: ERR_EXCEPTION", PRIVATE, WITH_ACK);
   dfa32:	4b36      	ldr	r3, [pc, #216]	; (dfb0c <_ZN6Modbus14validateAnswerEv+0x168>)
   dfa34:	4a36      	ldr	r2, [pc, #216]	; (dfb10 <_ZN6Modbus14validateAnswerEv+0x16c>)
   dfa36:	781b      	ldrb	r3, [r3, #0]
   dfa38:	7812      	ldrb	r2, [r2, #0]
   dfa3a:	4936      	ldr	r1, [pc, #216]	; (dfb14 <_ZN6Modbus14validateAnswerEv+0x170>)
   dfa3c:	4668      	mov	r0, sp
   dfa3e:	f7ff ff21 	bl	df884 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   dfa42:	a801      	add	r0, sp, #4
   dfa44:	f7fa fe53 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return ERR_EXCEPTION;
   dfa48:	20fb      	movs	r0, #251	; 0xfb
   dfa4a:	e035      	b.n	dfab8 <_ZN6Modbus14validateAnswerEv+0x114>
   dfa4c:	4a32      	ldr	r2, [pc, #200]	; (dfb18 <_ZN6Modbus14validateAnswerEv+0x174>)
  if ((au8Buffer[ FUNC ] & 0x80) != 0) {
   dfa4e:	2308      	movs	r3, #8
    if (fctsupported[i] == au8Buffer[FUNC]) {
   dfa50:	f812 0b01 	ldrb.w	r0, [r2], #1
   dfa54:	4281      	cmp	r1, r0
   dfa56:	d131      	bne.n	dfabc <_ZN6Modbus14validateAnswerEv+0x118>
        Log.info("MODBUS> ");
   dfa58:	4929      	ldr	r1, [pc, #164]	; (dfb00 <_ZN6Modbus14validateAnswerEv+0x15c>)
   dfa5a:	482a      	ldr	r0, [pc, #168]	; (dfb04 <_ZN6Modbus14validateAnswerEv+0x160>)
   dfa5c:	f7fa f82c 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
        Log.info("validateAnswer: fctsupported");
   dfa60:	492e      	ldr	r1, [pc, #184]	; (dfb1c <_ZN6Modbus14validateAnswerEv+0x178>)
   dfa62:	4828      	ldr	r0, [pc, #160]	; (dfb04 <_ZN6Modbus14validateAnswerEv+0x160>)
   dfa64:	f7fa f828 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
        if(MODBUS_DEBUG_ON)
   dfa68:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   dfa6c:	b153      	cbz	r3, dfa84 <_ZN6Modbus14validateAnswerEv+0xe0>
          Particle.publish("gx_metrics", "validateAnswer: fctsupported", PRIVATE, WITH_ACK);
   dfa6e:	4b27      	ldr	r3, [pc, #156]	; (dfb0c <_ZN6Modbus14validateAnswerEv+0x168>)
   dfa70:	4a27      	ldr	r2, [pc, #156]	; (dfb10 <_ZN6Modbus14validateAnswerEv+0x16c>)
   dfa72:	781b      	ldrb	r3, [r3, #0]
   dfa74:	7812      	ldrb	r2, [r2, #0]
   dfa76:	4929      	ldr	r1, [pc, #164]	; (dfb1c <_ZN6Modbus14validateAnswerEv+0x178>)
   dfa78:	4668      	mov	r0, sp
   dfa7a:	f7ff ff03 	bl	df884 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   dfa7e:	a801      	add	r0, sp, #4
   dfa80:	f7fa fe35 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Log.info("MODBUS> ");
   dfa84:	491e      	ldr	r1, [pc, #120]	; (dfb00 <_ZN6Modbus14validateAnswerEv+0x15c>)
   dfa86:	481f      	ldr	r0, [pc, #124]	; (dfb04 <_ZN6Modbus14validateAnswerEv+0x160>)
   dfa88:	f7fa f816 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
    Log.info("validateAnswer: no issues");
   dfa8c:	481d      	ldr	r0, [pc, #116]	; (dfb04 <_ZN6Modbus14validateAnswerEv+0x160>)
   dfa8e:	4924      	ldr	r1, [pc, #144]	; (dfb20 <_ZN6Modbus14validateAnswerEv+0x17c>)
   dfa90:	f7fa f812 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
    if(MODBUS_DEBUG_ON)
   dfa94:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    validate_ans = true;
   dfa98:	2301      	movs	r3, #1
   dfa9a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    if(MODBUS_DEBUG_ON)
   dfa9e:	b158      	cbz	r0, dfab8 <_ZN6Modbus14validateAnswerEv+0x114>
      Particle.publish("gx_metrics", "validateAnswer: no issues", PRIVATE, WITH_ACK);
   dfaa0:	4b1a      	ldr	r3, [pc, #104]	; (dfb0c <_ZN6Modbus14validateAnswerEv+0x168>)
   dfaa2:	4a1b      	ldr	r2, [pc, #108]	; (dfb10 <_ZN6Modbus14validateAnswerEv+0x16c>)
   dfaa4:	781b      	ldrb	r3, [r3, #0]
   dfaa6:	7812      	ldrb	r2, [r2, #0]
   dfaa8:	491d      	ldr	r1, [pc, #116]	; (dfb20 <_ZN6Modbus14validateAnswerEv+0x17c>)
   dfaaa:	4668      	mov	r0, sp
   dfaac:	f7ff feea 	bl	df884 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   dfab0:	a801      	add	r0, sp, #4
   dfab2:	f7fa fe1c 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 0; // OK, no exception code thrown
   dfab6:	2000      	movs	r0, #0
}
   dfab8:	b003      	add	sp, #12
   dfaba:	bd30      	pop	{r4, r5, pc}
  for (uint8_t i = 0; i< sizeof( fctsupported ); i++) {
   dfabc:	3b01      	subs	r3, #1
   dfabe:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   dfac2:	d1c5      	bne.n	dfa50 <_ZN6Modbus14validateAnswerEv+0xac>
    u16errCnt ++;
   dfac4:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
      Log.info("MODBUS> ");
   dfac8:	490d      	ldr	r1, [pc, #52]	; (dfb00 <_ZN6Modbus14validateAnswerEv+0x15c>)
   dfaca:	480e      	ldr	r0, [pc, #56]	; (dfb04 <_ZN6Modbus14validateAnswerEv+0x160>)
    u16errCnt ++;
   dfacc:	3301      	adds	r3, #1
   dface:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
      Log.info("MODBUS> ");
   dfad2:	f7f9 fff1 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("validateAnswer: EXC_FUNC_CODE");
   dfad6:	4913      	ldr	r1, [pc, #76]	; (dfb24 <_ZN6Modbus14validateAnswerEv+0x180>)
   dfad8:	480a      	ldr	r0, [pc, #40]	; (dfb04 <_ZN6Modbus14validateAnswerEv+0x160>)
   dfada:	f7f9 ffed 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
      if(MODBUS_DEBUG_ON)
   dfade:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   dfae2:	b153      	cbz	r3, dfafa <_ZN6Modbus14validateAnswerEv+0x156>
        Particle.publish("gx_metrics", "validateAnswer: EXC_FUNC_CODE", PRIVATE, WITH_ACK);
   dfae4:	4b09      	ldr	r3, [pc, #36]	; (dfb0c <_ZN6Modbus14validateAnswerEv+0x168>)
   dfae6:	4a0a      	ldr	r2, [pc, #40]	; (dfb10 <_ZN6Modbus14validateAnswerEv+0x16c>)
   dfae8:	781b      	ldrb	r3, [r3, #0]
   dfaea:	7812      	ldrb	r2, [r2, #0]
   dfaec:	490d      	ldr	r1, [pc, #52]	; (dfb24 <_ZN6Modbus14validateAnswerEv+0x180>)
   dfaee:	4668      	mov	r0, sp
   dfaf0:	f7ff fec8 	bl	df884 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   dfaf4:	a801      	add	r0, sp, #4
   dfaf6:	f7fa fdfa 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return EXC_FUNC_CODE;
   dfafa:	2001      	movs	r0, #1
   dfafc:	e7dc      	b.n	dfab8 <_ZN6Modbus14validateAnswerEv+0x114>
   dfafe:	bf00      	nop
   dfb00:	000e82c2 	.word	0x000e82c2
   dfb04:	2003e61c 	.word	0x2003e61c
   dfb08:	000e82cb 	.word	0x000e82cb
   dfb0c:	2003e5c2 	.word	0x2003e5c2
   dfb10:	2003e5c1 	.word	0x2003e5c1
   dfb14:	000e82e4 	.word	0x000e82e4
   dfb18:	000e863e 	.word	0x000e863e
   dfb1c:	000e8302 	.word	0x000e8302
   dfb20:	000e833d 	.word	0x000e833d
   dfb24:	000e831f 	.word	0x000e831f

000dfb28 <_ZN6Modbus8rxTxModeEh.part.0>:

  return u8CopyBufferSize;
}

// this switches between RXEN (0) and TXEN (1) modes
void Modbus::rxTxMode( uint8_t mode ) {
   dfb28:	b513      	push	{r0, r1, r4, lr}
   dfb2a:	4604      	mov	r4, r0
  if (mode == RXEN) {
    if (u8txenpin > 1) digitalWrite( u8txenpin, LOW );
   dfb2c:	7980      	ldrb	r0, [r0, #6]
   dfb2e:	2801      	cmp	r0, #1
   dfb30:	d909      	bls.n	dfb46 <_ZN6Modbus8rxTxModeEh.part.0+0x1e>
   dfb32:	2100      	movs	r1, #0
   dfb34:	f004 fddb 	bl	e46ee <digitalWrite>
    if (u8txenpin > 1) digitalWrite( u8rxenpin, LOW );
   dfb38:	79a3      	ldrb	r3, [r4, #6]
   dfb3a:	2b01      	cmp	r3, #1
   dfb3c:	d903      	bls.n	dfb46 <_ZN6Modbus8rxTxModeEh.part.0+0x1e>
   dfb3e:	79e0      	ldrb	r0, [r4, #7]
   dfb40:	2100      	movs	r1, #0
   dfb42:	f004 fdd4 	bl	e46ee <digitalWrite>
    #ifdef LOGGING
      Log.info("MODBUS> Changing to RX mode.");
   dfb46:	490a      	ldr	r1, [pc, #40]	; (dfb70 <_ZN6Modbus8rxTxModeEh.part.0+0x48>)
   dfb48:	480a      	ldr	r0, [pc, #40]	; (dfb74 <_ZN6Modbus8rxTxModeEh.part.0+0x4c>)
   dfb4a:	f7f9 ffb5 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>


      if(MODBUS_DEBUG_ON)
   dfb4e:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   dfb52:	b153      	cbz	r3, dfb6a <_ZN6Modbus8rxTxModeEh.part.0+0x42>
        Particle.publish("gx_metrics", "MODBUS> Changing to RX mode.", PRIVATE, WITH_ACK);
   dfb54:	4b08      	ldr	r3, [pc, #32]	; (dfb78 <_ZN6Modbus8rxTxModeEh.part.0+0x50>)
   dfb56:	4a09      	ldr	r2, [pc, #36]	; (dfb7c <_ZN6Modbus8rxTxModeEh.part.0+0x54>)
   dfb58:	781b      	ldrb	r3, [r3, #0]
   dfb5a:	7812      	ldrb	r2, [r2, #0]
   dfb5c:	4904      	ldr	r1, [pc, #16]	; (dfb70 <_ZN6Modbus8rxTxModeEh.part.0+0x48>)
   dfb5e:	4668      	mov	r0, sp
   dfb60:	f7ff fe90 	bl	df884 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   dfb64:	a801      	add	r0, sp, #4
   dfb66:	f7fa fdc2 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      if(MODBUS_DEBUG_ON)
        Particle.publish("gx_metrics", "MODBUS> Changing to TX mode.", PRIVATE, WITH_ACK);
    #endif
  }
  return;
};
   dfb6a:	b002      	add	sp, #8
   dfb6c:	bd10      	pop	{r4, pc}
   dfb6e:	bf00      	nop
   dfb70:	000e8357 	.word	0x000e8357
   dfb74:	2003e61c 	.word	0x2003e61c
   dfb78:	2003e5c2 	.word	0x2003e5c2
   dfb7c:	2003e5c1 	.word	0x2003e5c1

000dfb80 <_ZN6Modbus5beginEl>:
void Modbus::begin(long u32speed) {
   dfb80:	b513      	push	{r0, r1, r4, lr}
  switch( u8serno ) {
   dfb82:	7943      	ldrb	r3, [r0, #5]
   dfb84:	2b02      	cmp	r3, #2
void Modbus::begin(long u32speed) {
   dfb86:	4604      	mov	r4, r0
  switch( u8serno ) {
   dfb88:	d004      	beq.n	dfb94 <_ZN6Modbus5beginEl+0x14>
   dfb8a:	9101      	str	r1, [sp, #4]
    port = &Serial1;
   dfb8c:	f004 fb64 	bl	e4258 <_Z22__fetch_global_Serial1v>
   dfb90:	9901      	ldr	r1, [sp, #4]
   dfb92:	6020      	str	r0, [r4, #0]
  port->begin(u32speed);
   dfb94:	6820      	ldr	r0, [r4, #0]
   dfb96:	f004 fb59 	bl	e424c <_ZN11USARTSerial5beginEm>
  if (u8txenpin > 1 && u8rxenpin > 1) { // pin 0 & pin 1 are reserved for RX/TX
   dfb9a:	79a0      	ldrb	r0, [r4, #6]
   dfb9c:	2801      	cmp	r0, #1
   dfb9e:	d90c      	bls.n	dfbba <_ZN6Modbus5beginEl+0x3a>
   dfba0:	79e3      	ldrb	r3, [r4, #7]
   dfba2:	2b01      	cmp	r3, #1
   dfba4:	d909      	bls.n	dfbba <_ZN6Modbus5beginEl+0x3a>
    pinMode(u8txenpin, OUTPUT);
   dfba6:	2101      	movs	r1, #1
   dfba8:	f004 fd90 	bl	e46cc <pinMode>
    pinMode(u8rxenpin, OUTPUT);
   dfbac:	79e0      	ldrb	r0, [r4, #7]
   dfbae:	2101      	movs	r1, #1
   dfbb0:	f004 fd8c 	bl	e46cc <pinMode>
  if (mode == RXEN) {
   dfbb4:	4620      	mov	r0, r4
   dfbb6:	f7ff ffb7 	bl	dfb28 <_ZN6Modbus8rxTxModeEh.part.0>
  port->flush();
   dfbba:	6820      	ldr	r0, [r4, #0]
   dfbbc:	6803      	ldr	r3, [r0, #0]
   dfbbe:	69db      	ldr	r3, [r3, #28]
   dfbc0:	4798      	blx	r3
  u8lastRec = u8BufferSize = 0;
   dfbc2:	2300      	movs	r3, #0
   dfbc4:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
  u16InCnt = u16OutCnt = u16errCnt = 0;
   dfbc8:	6523      	str	r3, [r4, #80]	; 0x50
   dfbca:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
}
   dfbce:	b002      	add	sp, #8
   dfbd0:	bd10      	pop	{r4, pc}
	...

000dfbd4 <_ZN6Modbus8rxTxModeEh>:
void Modbus::rxTxMode( uint8_t mode ) {
   dfbd4:	b513      	push	{r0, r1, r4, lr}
   dfbd6:	4604      	mov	r4, r0
  if (mode == RXEN) {
   dfbd8:	b919      	cbnz	r1, dfbe2 <_ZN6Modbus8rxTxModeEh+0xe>
   dfbda:	f7ff ffa5 	bl	dfb28 <_ZN6Modbus8rxTxModeEh.part.0>
};
   dfbde:	b002      	add	sp, #8
   dfbe0:	bd10      	pop	{r4, pc}
    if (u8txenpin > 1) digitalWrite( u8txenpin, HIGH );
   dfbe2:	7980      	ldrb	r0, [r0, #6]
   dfbe4:	2801      	cmp	r0, #1
   dfbe6:	d909      	bls.n	dfbfc <_ZN6Modbus8rxTxModeEh+0x28>
   dfbe8:	2101      	movs	r1, #1
   dfbea:	f004 fd80 	bl	e46ee <digitalWrite>
    if (u8txenpin > 1) digitalWrite( u8rxenpin, HIGH ); // always leave this pin low so its always receiving
   dfbee:	79a3      	ldrb	r3, [r4, #6]
   dfbf0:	2b01      	cmp	r3, #1
   dfbf2:	d903      	bls.n	dfbfc <_ZN6Modbus8rxTxModeEh+0x28>
   dfbf4:	79e0      	ldrb	r0, [r4, #7]
   dfbf6:	2101      	movs	r1, #1
   dfbf8:	f004 fd79 	bl	e46ee <digitalWrite>
      Log.info("MODBUS> Changing to TX mode.");
   dfbfc:	4909      	ldr	r1, [pc, #36]	; (dfc24 <_ZN6Modbus8rxTxModeEh+0x50>)
   dfbfe:	480a      	ldr	r0, [pc, #40]	; (dfc28 <_ZN6Modbus8rxTxModeEh+0x54>)
   dfc00:	f7f9 ff5a 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
      if(MODBUS_DEBUG_ON)
   dfc04:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   dfc08:	2b00      	cmp	r3, #0
   dfc0a:	d0e8      	beq.n	dfbde <_ZN6Modbus8rxTxModeEh+0xa>
        Particle.publish("gx_metrics", "MODBUS> Changing to TX mode.", PRIVATE, WITH_ACK);
   dfc0c:	4b07      	ldr	r3, [pc, #28]	; (dfc2c <_ZN6Modbus8rxTxModeEh+0x58>)
   dfc0e:	4a08      	ldr	r2, [pc, #32]	; (dfc30 <_ZN6Modbus8rxTxModeEh+0x5c>)
   dfc10:	781b      	ldrb	r3, [r3, #0]
   dfc12:	7812      	ldrb	r2, [r2, #0]
   dfc14:	4903      	ldr	r1, [pc, #12]	; (dfc24 <_ZN6Modbus8rxTxModeEh+0x50>)
   dfc16:	4668      	mov	r0, sp
   dfc18:	f7ff fe34 	bl	df884 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   dfc1c:	a801      	add	r0, sp, #4
   dfc1e:	f7fa fd66 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return;
   dfc22:	e7dc      	b.n	dfbde <_ZN6Modbus8rxTxModeEh+0xa>
   dfc24:	000e8374 	.word	0x000e8374
   dfc28:	2003e61c 	.word	0x2003e61c
   dfc2c:	2003e5c2 	.word	0x2003e5c2
   dfc30:	2003e5c1 	.word	0x2003e5c1

000dfc34 <_ZN6Modbus11getRxBufferEv>:
int8_t Modbus::getRxBuffer() {
   dfc34:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (u8txenpin > 1 && u8rxenpin > 1) rxTxMode(RXEN);
   dfc36:	7983      	ldrb	r3, [r0, #6]
   dfc38:	2b01      	cmp	r3, #1
int8_t Modbus::getRxBuffer() {
   dfc3a:	b08b      	sub	sp, #44	; 0x2c
   dfc3c:	4604      	mov	r4, r0
  if (u8txenpin > 1 && u8rxenpin > 1) rxTxMode(RXEN);
   dfc3e:	d904      	bls.n	dfc4a <_ZN6Modbus11getRxBufferEv+0x16>
   dfc40:	79c3      	ldrb	r3, [r0, #7]
   dfc42:	2b01      	cmp	r3, #1
   dfc44:	d901      	bls.n	dfc4a <_ZN6Modbus11getRxBufferEv+0x16>
  if (mode == RXEN) {
   dfc46:	f7ff ff6f 	bl	dfb28 <_ZN6Modbus8rxTxModeEh.part.0>
  u8BufferSize = 0;
   dfc4a:	2500      	movs	r5, #0
    Log.info("MODBUS> getRxbuffer output: ");
   dfc4c:	493b      	ldr	r1, [pc, #236]	; (dfd3c <_ZN6Modbus11getRxBufferEv+0x108>)
   dfc4e:	483c      	ldr	r0, [pc, #240]	; (dfd40 <_ZN6Modbus11getRxBufferEv+0x10c>)
  u8BufferSize = 0;
   dfc50:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
    Log.info("MODBUS> getRxbuffer output: ");
   dfc54:	f7f9 ff30 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info(" ");
   dfc58:	4f3a      	ldr	r7, [pc, #232]	; (dfd44 <_ZN6Modbus11getRxBufferEv+0x110>)
   dfc5a:	4e39      	ldr	r6, [pc, #228]	; (dfd40 <_ZN6Modbus11getRxBufferEv+0x10c>)
  while ( port->available() ) {
   dfc5c:	6820      	ldr	r0, [r4, #0]
   dfc5e:	6803      	ldr	r3, [r0, #0]
   dfc60:	691b      	ldr	r3, [r3, #16]
   dfc62:	4798      	blx	r3
   dfc64:	b1f0      	cbz	r0, dfca4 <_ZN6Modbus11getRxBufferEv+0x70>
    au8Buffer[ u8BufferSize ] = port->read();
   dfc66:	6820      	ldr	r0, [r4, #0]
   dfc68:	6803      	ldr	r3, [r0, #0]
   dfc6a:	695b      	ldr	r3, [r3, #20]
   dfc6c:	4798      	blx	r3
   dfc6e:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   dfc72:	4423      	add	r3, r4
   dfc74:	7298      	strb	r0, [r3, #10]
      Serial.print(au8Buffer[ u8BufferSize ], HEX);
   dfc76:	f004 fb7b 	bl	e4370 <_Z16_fetch_usbserialv>
   dfc7a:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   dfc7e:	4423      	add	r3, r4
   dfc80:	2210      	movs	r2, #16
   dfc82:	7a99      	ldrb	r1, [r3, #10]
   dfc84:	f003 fdd8 	bl	e3838 <_ZN5Print11printNumberEmh>
      Log.info(" ");
   dfc88:	4639      	mov	r1, r7
   dfc8a:	4630      	mov	r0, r6
   dfc8c:	f7f9 ff14 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
    u8BufferSize ++;
   dfc90:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   dfc94:	3301      	adds	r3, #1
   dfc96:	b2db      	uxtb	r3, r3
    if (u8BufferSize >= MAX_BUFFER) bBuffOverflow = true;
   dfc98:	2b40      	cmp	r3, #64	; 0x40
    u8BufferSize ++;
   dfc9a:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
    if (u8BufferSize >= MAX_BUFFER) bBuffOverflow = true;
   dfc9e:	bf28      	it	cs
   dfca0:	2501      	movcs	r5, #1
   dfca2:	e7db      	b.n	dfc5c <_ZN6Modbus11getRxBufferEv+0x28>
  u16InCnt++;
   dfca4:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   dfca8:	3301      	adds	r3, #1
   dfcaa:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
  if (bBuffOverflow) {
   dfcae:	b1cd      	cbz	r5, dfce4 <_ZN6Modbus11getRxBufferEv+0xb0>
    u16errCnt++;
   dfcb0:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
      Log.info("MODBUS> ERR_BUFF_OVERFLOW");
   dfcb4:	4924      	ldr	r1, [pc, #144]	; (dfd48 <_ZN6Modbus11getRxBufferEv+0x114>)
   dfcb6:	4822      	ldr	r0, [pc, #136]	; (dfd40 <_ZN6Modbus11getRxBufferEv+0x10c>)
    u16errCnt++;
   dfcb8:	3301      	adds	r3, #1
   dfcba:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
      Log.info("MODBUS> ERR_BUFF_OVERFLOW");
   dfcbe:	f7f9 fefb 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
      if(MODBUS_DEBUG_ON)
   dfcc2:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   dfcc6:	b153      	cbz	r3, dfcde <_ZN6Modbus11getRxBufferEv+0xaa>
        Particle.publish("gx_metrics", "MODBUS> ERR_BUFF_OVERFLOW", PRIVATE, WITH_ACK);
   dfcc8:	4b20      	ldr	r3, [pc, #128]	; (dfd4c <_ZN6Modbus11getRxBufferEv+0x118>)
   dfcca:	4a21      	ldr	r2, [pc, #132]	; (dfd50 <_ZN6Modbus11getRxBufferEv+0x11c>)
   dfccc:	781b      	ldrb	r3, [r3, #0]
   dfcce:	7812      	ldrb	r2, [r2, #0]
   dfcd0:	491d      	ldr	r1, [pc, #116]	; (dfd48 <_ZN6Modbus11getRxBufferEv+0x114>)
   dfcd2:	a806      	add	r0, sp, #24
   dfcd4:	f7ff fdd6 	bl	df884 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   dfcd8:	a807      	add	r0, sp, #28
   dfcda:	f7fa fd08 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return ERR_BUFF_OVERFLOW;
   dfcde:	f06f 0002 	mvn.w	r0, #2
   dfce2:	e029      	b.n	dfd38 <_ZN6Modbus11getRxBufferEv+0x104>
    Log.info("MODBUS> Buffer size: %d", u8BufferSize);
   dfce4:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
   dfce8:	491a      	ldr	r1, [pc, #104]	; (dfd54 <_ZN6Modbus11getRxBufferEv+0x120>)
   dfcea:	4815      	ldr	r0, [pc, #84]	; (dfd40 <_ZN6Modbus11getRxBufferEv+0x10c>)
   dfcec:	f7f9 fee4 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
    if(MODBUS_DEBUG_ON)
   dfcf0:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   dfcf4:	b1f3      	cbz	r3, dfd34 <_ZN6Modbus11getRxBufferEv+0x100>
	StringSumHelper(const char *p) : String(p) {}
   dfcf6:	4918      	ldr	r1, [pc, #96]	; (dfd58 <_ZN6Modbus11getRxBufferEv+0x124>)
   dfcf8:	a806      	add	r0, sp, #24
   dfcfa:	f003 ff88 	bl	e3c0e <_ZN6StringC1EPKc>
      Particle.publish("gx_metrics", "MODBUS> Buffer size: " + String(u8BufferSize), PRIVATE, WITH_ACK);
   dfcfe:	220a      	movs	r2, #10
   dfd00:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
   dfd04:	a802      	add	r0, sp, #8
   dfd06:	f003 fff2 	bl	e3cee <_ZN6StringC1Ehh>
   dfd0a:	a902      	add	r1, sp, #8
   dfd0c:	a806      	add	r0, sp, #24
   dfd0e:	f004 f8b4 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
   dfd12:	4b0e      	ldr	r3, [pc, #56]	; (dfd4c <_ZN6Modbus11getRxBufferEv+0x118>)
   dfd14:	4a0e      	ldr	r2, [pc, #56]	; (dfd50 <_ZN6Modbus11getRxBufferEv+0x11c>)
   dfd16:	6801      	ldr	r1, [r0, #0]
   dfd18:	781b      	ldrb	r3, [r3, #0]
   dfd1a:	7812      	ldrb	r2, [r2, #0]
   dfd1c:	4668      	mov	r0, sp
   dfd1e:	f7ff fdb1 	bl	df884 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   dfd22:	a801      	add	r0, sp, #4
   dfd24:	f7fa fce3 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dfd28:	a802      	add	r0, sp, #8
   dfd2a:	f003 ff25 	bl	e3b78 <_ZN6StringD1Ev>
class StringSumHelper : public String
   dfd2e:	a806      	add	r0, sp, #24
   dfd30:	f003 ff22 	bl	e3b78 <_ZN6StringD1Ev>
  return u8BufferSize;
   dfd34:	f994 004a 	ldrsb.w	r0, [r4, #74]	; 0x4a
}
   dfd38:	b00b      	add	sp, #44	; 0x2c
   dfd3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dfd3c:	000e8391 	.word	0x000e8391
   dfd40:	2003e61c 	.word	0x2003e61c
   dfd44:	000e885d 	.word	0x000e885d
   dfd48:	000e83ae 	.word	0x000e83ae
   dfd4c:	2003e5c2 	.word	0x2003e5c2
   dfd50:	2003e5c1 	.word	0x2003e5c1
   dfd54:	000e83c8 	.word	0x000e83c8
   dfd58:	000e83e0 	.word	0x000e83e0

000dfd5c <_ZN6Modbus4pollEv>:
int8_t Modbus::poll() {
   dfd5c:	b570      	push	{r4, r5, r6, lr}
   dfd5e:	4604      	mov	r4, r0
  uint8_t u8current = port->available();
   dfd60:	6800      	ldr	r0, [r0, #0]
   dfd62:	6803      	ldr	r3, [r0, #0]
   dfd64:	691b      	ldr	r3, [r3, #16]
   dfd66:	4798      	blx	r3
   dfd68:	4605      	mov	r5, r0
   dfd6a:	f000 ffdb 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
  if (millis() > u32timeOut) {
   dfd6e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   dfd70:	4283      	cmp	r3, r0
   dfd72:	d209      	bcs.n	dfd88 <_ZN6Modbus4pollEv+0x2c>
    u8state = COM_IDLE;
   dfd74:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   dfd78:	8123      	strh	r3, [r4, #8]
    u16errCnt++;
   dfd7a:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
   dfd7e:	3301      	adds	r3, #1
   dfd80:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    return 0;
   dfd84:	2000      	movs	r0, #0
}
   dfd86:	bd70      	pop	{r4, r5, r6, pc}
  if (u8current == 0) return 0;
   dfd88:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   dfd8c:	d0fa      	beq.n	dfd84 <_ZN6Modbus4pollEv+0x28>
  if (u8current != u8lastRec) {
   dfd8e:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
   dfd92:	42ab      	cmp	r3, r5
   dfd94:	d006      	beq.n	dfda4 <_ZN6Modbus4pollEv+0x48>
    u8lastRec = u8current;
   dfd96:	f884 504b 	strb.w	r5, [r4, #75]	; 0x4b
   dfd9a:	f000 ffc3 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
    u32time = millis() + T35;
   dfd9e:	3005      	adds	r0, #5
   dfda0:	65a0      	str	r0, [r4, #88]	; 0x58
   dfda2:	e7ef      	b.n	dfd84 <_ZN6Modbus4pollEv+0x28>
   dfda4:	f000 ffbe 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
  if (millis() < u32time) return 0;
   dfda8:	6da3      	ldr	r3, [r4, #88]	; 0x58
   dfdaa:	4283      	cmp	r3, r0
   dfdac:	d8ea      	bhi.n	dfd84 <_ZN6Modbus4pollEv+0x28>
  u8lastRec = 0;
   dfdae:	2600      	movs	r6, #0
   dfdb0:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
  int8_t i8state = getRxBuffer();
   dfdb4:	4620      	mov	r0, r4
   dfdb6:	f7ff ff3d 	bl	dfc34 <_ZN6Modbus11getRxBufferEv>
  if (i8state < 7) {
   dfdba:	2806      	cmp	r0, #6
   dfdbc:	dc06      	bgt.n	dfdcc <_ZN6Modbus4pollEv+0x70>
    u16errCnt++;
   dfdbe:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
    u8state = COM_IDLE;
   dfdc2:	7226      	strb	r6, [r4, #8]
    u16errCnt++;
   dfdc4:	3301      	adds	r3, #1
   dfdc6:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    return i8state;
   dfdca:	e7dc      	b.n	dfd86 <_ZN6Modbus4pollEv+0x2a>
  uint8_t u8exception = validateAnswer();
   dfdcc:	4620      	mov	r0, r4
   dfdce:	f7ff fde9 	bl	df9a4 <_ZN6Modbus14validateAnswerEv>
  if (u8exception != 0) {
   dfdd2:	4605      	mov	r5, r0
   dfdd4:	b158      	cbz	r0, dfdee <_ZN6Modbus4pollEv+0x92>
      Log.info("MODBUS> ");
   dfdd6:	4936      	ldr	r1, [pc, #216]	; (dfeb0 <_ZN6Modbus4pollEv+0x154>)
   dfdd8:	4836      	ldr	r0, [pc, #216]	; (dfeb4 <_ZN6Modbus4pollEv+0x158>)
    u8state = COM_IDLE;
   dfdda:	7226      	strb	r6, [r4, #8]
      Log.info("MODBUS> ");
   dfddc:	f7f9 fe6c 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("u8exception: %d", u8exception);
   dfde0:	4834      	ldr	r0, [pc, #208]	; (dfeb4 <_ZN6Modbus4pollEv+0x158>)
   dfde2:	4935      	ldr	r1, [pc, #212]	; (dfeb8 <_ZN6Modbus4pollEv+0x15c>)
   dfde4:	462a      	mov	r2, r5
   dfde6:	f7f9 fe67 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
    return u8exception;
   dfdea:	b268      	sxtb	r0, r5
   dfdec:	e7cb      	b.n	dfd86 <_ZN6Modbus4pollEv+0x2a>
  switch( au8Buffer[ FUNC ] ) {
   dfdee:	7ae3      	ldrb	r3, [r4, #11]
   dfdf0:	3b01      	subs	r3, #1
   dfdf2:	2b0f      	cmp	r3, #15
   dfdf4:	d856      	bhi.n	dfea4 <_ZN6Modbus4pollEv+0x148>
   dfdf6:	e8df f003 	tbb	[pc, r3]
   dfdfa:	2208      	.short	0x2208
   dfdfc:	433d2b34 	.word	0x433d2b34
   dfe00:	55555555 	.word	0x55555555
   dfe04:	55555555 	.word	0x55555555
   dfe08:	4f49      	.short	0x4f49
        Log.info("MODBUS> ");
   dfe0a:	4929      	ldr	r1, [pc, #164]	; (dfeb0 <_ZN6Modbus4pollEv+0x154>)
   dfe0c:	4829      	ldr	r0, [pc, #164]	; (dfeb4 <_ZN6Modbus4pollEv+0x158>)
   dfe0e:	f7f9 fe53 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
        Log.info("MB_FC_READ_COILS");
   dfe12:	492a      	ldr	r1, [pc, #168]	; (dfebc <_ZN6Modbus4pollEv+0x160>)
        Log.info("nothing to do in the au8 func");
   dfe14:	4827      	ldr	r0, [pc, #156]	; (dfeb4 <_ZN6Modbus4pollEv+0x158>)
   dfe16:	f7f9 fe4f 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
  u8state = COM_IDLE;
   dfe1a:	2300      	movs	r3, #0
   dfe1c:	7223      	strb	r3, [r4, #8]
    Log.info("MODBUS> ");
   dfe1e:	4924      	ldr	r1, [pc, #144]	; (dfeb0 <_ZN6Modbus4pollEv+0x154>)
   dfe20:	4824      	ldr	r0, [pc, #144]	; (dfeb4 <_ZN6Modbus4pollEv+0x158>)
   dfe22:	f7f9 fe49 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
    Log.info("poll OK! Buffer size: %d", u8BufferSize);
   dfe26:	4823      	ldr	r0, [pc, #140]	; (dfeb4 <_ZN6Modbus4pollEv+0x158>)
   dfe28:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
   dfe2c:	4924      	ldr	r1, [pc, #144]	; (dfec0 <_ZN6Modbus4pollEv+0x164>)
   dfe2e:	f7f9 fe43 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
  pollOK = true;
   dfe32:	2301      	movs	r3, #1
  return u8BufferSize;
   dfe34:	f994 004a 	ldrsb.w	r0, [r4, #74]	; 0x4a
  pollOK = true;
   dfe38:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
  return u8BufferSize;
   dfe3c:	e7a3      	b.n	dfd86 <_ZN6Modbus4pollEv+0x2a>
      get_FC1( );
   dfe3e:	4620      	mov	r0, r4
   dfe40:	f7ff fd67 	bl	df912 <_ZN6Modbus7get_FC1Ev>
        Log.info("MODBUS> ");
   dfe44:	491a      	ldr	r1, [pc, #104]	; (dfeb0 <_ZN6Modbus4pollEv+0x154>)
   dfe46:	481b      	ldr	r0, [pc, #108]	; (dfeb4 <_ZN6Modbus4pollEv+0x158>)
   dfe48:	f7f9 fe36 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
        Log.info("MB_FC_READ_DISCRETE_INPUT");
   dfe4c:	491d      	ldr	r1, [pc, #116]	; (dfec4 <_ZN6Modbus4pollEv+0x168>)
   dfe4e:	e7e1      	b.n	dfe14 <_ZN6Modbus4pollEv+0xb8>
      get_FC3( );
   dfe50:	4620      	mov	r0, r4
   dfe52:	f7ff fd79 	bl	df948 <_ZN6Modbus7get_FC3Ev>
        Log.info("MODBUS> ");
   dfe56:	4916      	ldr	r1, [pc, #88]	; (dfeb0 <_ZN6Modbus4pollEv+0x154>)
   dfe58:	4816      	ldr	r0, [pc, #88]	; (dfeb4 <_ZN6Modbus4pollEv+0x158>)
   dfe5a:	f7f9 fe2d 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
        Log.info("MB_FC_READ_INPUT_REGISTER");
   dfe5e:	491a      	ldr	r1, [pc, #104]	; (dfec8 <_ZN6Modbus4pollEv+0x16c>)
   dfe60:	e7d8      	b.n	dfe14 <_ZN6Modbus4pollEv+0xb8>
      get_FC3( );
   dfe62:	4620      	mov	r0, r4
   dfe64:	f7ff fd70 	bl	df948 <_ZN6Modbus7get_FC3Ev>
        Log.info("MODBUS> ");
   dfe68:	4911      	ldr	r1, [pc, #68]	; (dfeb0 <_ZN6Modbus4pollEv+0x154>)
   dfe6a:	4812      	ldr	r0, [pc, #72]	; (dfeb4 <_ZN6Modbus4pollEv+0x158>)
   dfe6c:	f7f9 fe24 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
        Log.info("MB_FC_READ_REGISTERS");
   dfe70:	4916      	ldr	r1, [pc, #88]	; (dfecc <_ZN6Modbus4pollEv+0x170>)
   dfe72:	e7cf      	b.n	dfe14 <_ZN6Modbus4pollEv+0xb8>
        Log.info("MODBUS> ");
   dfe74:	490e      	ldr	r1, [pc, #56]	; (dfeb0 <_ZN6Modbus4pollEv+0x154>)
   dfe76:	480f      	ldr	r0, [pc, #60]	; (dfeb4 <_ZN6Modbus4pollEv+0x158>)
   dfe78:	f7f9 fe1e 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
        Log.info("MB_FC_WRITE_COIL");
   dfe7c:	4914      	ldr	r1, [pc, #80]	; (dfed0 <_ZN6Modbus4pollEv+0x174>)
   dfe7e:	e7c9      	b.n	dfe14 <_ZN6Modbus4pollEv+0xb8>
        Log.info("MODBUS> ");
   dfe80:	490b      	ldr	r1, [pc, #44]	; (dfeb0 <_ZN6Modbus4pollEv+0x154>)
   dfe82:	480c      	ldr	r0, [pc, #48]	; (dfeb4 <_ZN6Modbus4pollEv+0x158>)
   dfe84:	f7f9 fe18 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
        Log.info("MB_FC_WRITE_REGISTER");
   dfe88:	4912      	ldr	r1, [pc, #72]	; (dfed4 <_ZN6Modbus4pollEv+0x178>)
   dfe8a:	e7c3      	b.n	dfe14 <_ZN6Modbus4pollEv+0xb8>
        Log.info("MODBUS> ");
   dfe8c:	4908      	ldr	r1, [pc, #32]	; (dfeb0 <_ZN6Modbus4pollEv+0x154>)
   dfe8e:	4809      	ldr	r0, [pc, #36]	; (dfeb4 <_ZN6Modbus4pollEv+0x158>)
   dfe90:	f7f9 fe12 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
        Log.info("MB_FC_WRITE_MULTIPLE_COILS");
   dfe94:	4910      	ldr	r1, [pc, #64]	; (dfed8 <_ZN6Modbus4pollEv+0x17c>)
   dfe96:	e7bd      	b.n	dfe14 <_ZN6Modbus4pollEv+0xb8>
        Log.info("MODBUS> ");
   dfe98:	4905      	ldr	r1, [pc, #20]	; (dfeb0 <_ZN6Modbus4pollEv+0x154>)
   dfe9a:	4806      	ldr	r0, [pc, #24]	; (dfeb4 <_ZN6Modbus4pollEv+0x158>)
   dfe9c:	f7f9 fe0c 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
        Log.info("MB_FC_WRITE_MULTIPLE_REGISTERS");
   dfea0:	490e      	ldr	r1, [pc, #56]	; (dfedc <_ZN6Modbus4pollEv+0x180>)
   dfea2:	e7b7      	b.n	dfe14 <_ZN6Modbus4pollEv+0xb8>
        Log.info("MODBUS> ");
   dfea4:	4902      	ldr	r1, [pc, #8]	; (dfeb0 <_ZN6Modbus4pollEv+0x154>)
   dfea6:	4803      	ldr	r0, [pc, #12]	; (dfeb4 <_ZN6Modbus4pollEv+0x158>)
   dfea8:	f7f9 fe06 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
        Log.info("nothing to do in the au8 func");
   dfeac:	490c      	ldr	r1, [pc, #48]	; (dfee0 <_ZN6Modbus4pollEv+0x184>)
   dfeae:	e7b1      	b.n	dfe14 <_ZN6Modbus4pollEv+0xb8>
   dfeb0:	000e82c2 	.word	0x000e82c2
   dfeb4:	2003e61c 	.word	0x2003e61c
   dfeb8:	000e83f6 	.word	0x000e83f6
   dfebc:	000e8406 	.word	0x000e8406
   dfec0:	000e84de 	.word	0x000e84de
   dfec4:	000e8417 	.word	0x000e8417
   dfec8:	000e8431 	.word	0x000e8431
   dfecc:	000e844b 	.word	0x000e844b
   dfed0:	000e8460 	.word	0x000e8460
   dfed4:	000e8471 	.word	0x000e8471
   dfed8:	000e8486 	.word	0x000e8486
   dfedc:	000e84a1 	.word	0x000e84a1
   dfee0:	000e84c0 	.word	0x000e84c0

000dfee4 <_ZN6Modbus12sendTxBufferEv>:
void Modbus::sendTxBuffer() {
   dfee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   dfee6:	4604      	mov	r4, r0
    Log.info("MODBUS> Sending tx buffer");
   dfee8:	494a      	ldr	r1, [pc, #296]	; (e0014 <_ZN6Modbus12sendTxBufferEv+0x130>)
   dfeea:	484b      	ldr	r0, [pc, #300]	; (e0018 <_ZN6Modbus12sendTxBufferEv+0x134>)
   dfeec:	f7f9 fde4 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
    if(MODBUS_DEBUG_ON)
   dfef0:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   dfef4:	b153      	cbz	r3, dff0c <_ZN6Modbus12sendTxBufferEv+0x28>
      Particle.publish("gx_metrics", "MODBUS> Sending tx buffer", PRIVATE, WITH_ACK);
   dfef6:	4b49      	ldr	r3, [pc, #292]	; (e001c <_ZN6Modbus12sendTxBufferEv+0x138>)
   dfef8:	4a49      	ldr	r2, [pc, #292]	; (e0020 <_ZN6Modbus12sendTxBufferEv+0x13c>)
   dfefa:	781b      	ldrb	r3, [r3, #0]
   dfefc:	7812      	ldrb	r2, [r2, #0]
   dfefe:	4945      	ldr	r1, [pc, #276]	; (e0014 <_ZN6Modbus12sendTxBufferEv+0x130>)
   dff00:	4668      	mov	r0, sp
   dff02:	f7ff fcbf 	bl	df884 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   dff06:	a801      	add	r0, sp, #4
   dff08:	f7fa fbf1 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  uint16_t u16crc = calcCRC( u8BufferSize );
   dff0c:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
   dff10:	4620      	mov	r0, r4
   dff12:	f7ff fce0 	bl	df8d6 <_ZN6Modbus7calcCRCEh>
  au8Buffer[ u8BufferSize ] = u16crc >> 8;
   dff16:	1863      	adds	r3, r4, r1
   dff18:	1202      	asrs	r2, r0, #8
   dff1a:	729a      	strb	r2, [r3, #10]
  u8BufferSize++;
   dff1c:	1c4b      	adds	r3, r1, #1
  au8Buffer[ u8BufferSize ] = u16crc & 0x00ff;
   dff1e:	fa54 f383 	uxtab	r3, r4, r3
  u8BufferSize++;
   dff22:	3102      	adds	r1, #2
  au8Buffer[ u8BufferSize ] = u16crc & 0x00ff;
   dff24:	7298      	strb	r0, [r3, #10]
  u8BufferSize++;
   dff26:	f884 104a 	strb.w	r1, [r4, #74]	; 0x4a
    Log.info("MODBUS> sendTxBuffer -- ");
   dff2a:	483b      	ldr	r0, [pc, #236]	; (e0018 <_ZN6Modbus12sendTxBufferEv+0x134>)
   dff2c:	493d      	ldr	r1, [pc, #244]	; (e0024 <_ZN6Modbus12sendTxBufferEv+0x140>)
   dff2e:	f7f9 fdc3 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
    if (MODBUS_DEBUG_ON)
   dff32:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   dff36:	b1d3      	cbz	r3, dff6e <_ZN6Modbus12sendTxBufferEv+0x8a>
      Particle.publish("gx_metrics", "MODBUS> sendTxBuffer -- ", PRIVATE, WITH_ACK);
   dff38:	4b38      	ldr	r3, [pc, #224]	; (e001c <_ZN6Modbus12sendTxBufferEv+0x138>)
   dff3a:	4a39      	ldr	r2, [pc, #228]	; (e0020 <_ZN6Modbus12sendTxBufferEv+0x13c>)
   dff3c:	781b      	ldrb	r3, [r3, #0]
   dff3e:	7812      	ldrb	r2, [r2, #0]
   dff40:	4938      	ldr	r1, [pc, #224]	; (e0024 <_ZN6Modbus12sendTxBufferEv+0x140>)
        Log.info("%d", au8Buffer[i]);
   dff42:	4f39      	ldr	r7, [pc, #228]	; (e0028 <_ZN6Modbus12sendTxBufferEv+0x144>)
   dff44:	4e34      	ldr	r6, [pc, #208]	; (e0018 <_ZN6Modbus12sendTxBufferEv+0x134>)
      Particle.publish("gx_metrics", "MODBUS> sendTxBuffer -- ", PRIVATE, WITH_ACK);
   dff46:	4668      	mov	r0, sp
   dff48:	f7ff fc9c 	bl	df884 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   dff4c:	a801      	add	r0, sp, #4
   dff4e:	f7fa fbce 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dff52:	2500      	movs	r5, #0
      for (uint8_t i = 0; i < u8BufferSize; i++)
   dff54:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
   dff58:	b2eb      	uxtb	r3, r5
   dff5a:	429a      	cmp	r2, r3
   dff5c:	d907      	bls.n	dff6e <_ZN6Modbus12sendTxBufferEv+0x8a>
        Log.info("%d", au8Buffer[i]);
   dff5e:	4423      	add	r3, r4
   dff60:	4639      	mov	r1, r7
   dff62:	7a9a      	ldrb	r2, [r3, #10]
   dff64:	4630      	mov	r0, r6
   dff66:	f7f9 fda7 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
      for (uint8_t i = 0; i < u8BufferSize; i++)
   dff6a:	3501      	adds	r5, #1
   dff6c:	e7f2      	b.n	dff54 <_ZN6Modbus12sendTxBufferEv+0x70>
  if (u8txenpin > 1 && u8rxenpin > 1) {
   dff6e:	79a3      	ldrb	r3, [r4, #6]
   dff70:	2b01      	cmp	r3, #1
   dff72:	d918      	bls.n	dffa6 <_ZN6Modbus12sendTxBufferEv+0xc2>
   dff74:	79e3      	ldrb	r3, [r4, #7]
   dff76:	2b01      	cmp	r3, #1
   dff78:	d915      	bls.n	dffa6 <_ZN6Modbus12sendTxBufferEv+0xc2>
      Log.info("MODBUS> tx buffer set to transmit");
   dff7a:	492c      	ldr	r1, [pc, #176]	; (e002c <_ZN6Modbus12sendTxBufferEv+0x148>)
   dff7c:	4826      	ldr	r0, [pc, #152]	; (e0018 <_ZN6Modbus12sendTxBufferEv+0x134>)
   dff7e:	f7f9 fd9b 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
      if(MODBUS_DEBUG_ON)
   dff82:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   dff86:	b153      	cbz	r3, dff9e <_ZN6Modbus12sendTxBufferEv+0xba>
        Particle.publish("gx_metrics", "MODBUS> tx buffer set to transmit", PRIVATE, WITH_ACK);
   dff88:	4b24      	ldr	r3, [pc, #144]	; (e001c <_ZN6Modbus12sendTxBufferEv+0x138>)
   dff8a:	4a25      	ldr	r2, [pc, #148]	; (e0020 <_ZN6Modbus12sendTxBufferEv+0x13c>)
   dff8c:	781b      	ldrb	r3, [r3, #0]
   dff8e:	7812      	ldrb	r2, [r2, #0]
   dff90:	4926      	ldr	r1, [pc, #152]	; (e002c <_ZN6Modbus12sendTxBufferEv+0x148>)
   dff92:	4668      	mov	r0, sp
   dff94:	f7ff fc76 	bl	df884 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   dff98:	a801      	add	r0, sp, #4
   dff9a:	f7fa fba8 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    rxTxMode(TXEN);
   dff9e:	2101      	movs	r1, #1
   dffa0:	4620      	mov	r0, r4
   dffa2:	f7ff fe17 	bl	dfbd4 <_ZN6Modbus8rxTxModeEh>
  port->write( au8Buffer, u8BufferSize );
   dffa6:	6820      	ldr	r0, [r4, #0]
   dffa8:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
   dffac:	6803      	ldr	r3, [r0, #0]
   dffae:	f104 010a 	add.w	r1, r4, #10
   dffb2:	68db      	ldr	r3, [r3, #12]
   dffb4:	4798      	blx	r3
  port->flush();	//waits for transmittion to complete before returning
   dffb6:	6820      	ldr	r0, [r4, #0]
   dffb8:	6803      	ldr	r3, [r0, #0]
   dffba:	69db      	ldr	r3, [r3, #28]
   dffbc:	4798      	blx	r3
  if (u8txenpin > 1 && u8rxenpin > 1) {
   dffbe:	79a3      	ldrb	r3, [r4, #6]
   dffc0:	2b01      	cmp	r3, #1
   dffc2:	d917      	bls.n	dfff4 <_ZN6Modbus12sendTxBufferEv+0x110>
   dffc4:	79e3      	ldrb	r3, [r4, #7]
   dffc6:	2b01      	cmp	r3, #1
   dffc8:	d914      	bls.n	dfff4 <_ZN6Modbus12sendTxBufferEv+0x110>
  if (mode == RXEN) {
   dffca:	4620      	mov	r0, r4
   dffcc:	f7ff fdac 	bl	dfb28 <_ZN6Modbus8rxTxModeEh.part.0>
      Log.info("MODBUS> tx buffer switch back to rx mode");
   dffd0:	4917      	ldr	r1, [pc, #92]	; (e0030 <_ZN6Modbus12sendTxBufferEv+0x14c>)
   dffd2:	4811      	ldr	r0, [pc, #68]	; (e0018 <_ZN6Modbus12sendTxBufferEv+0x134>)
   dffd4:	f7f9 fd70 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
      if(MODBUS_DEBUG_ON)
   dffd8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   dffdc:	b153      	cbz	r3, dfff4 <_ZN6Modbus12sendTxBufferEv+0x110>
        Particle.publish("gx_metrics", "MODBUS> tx buffer switch back to rx mode", PRIVATE, WITH_ACK);
   dffde:	4b0f      	ldr	r3, [pc, #60]	; (e001c <_ZN6Modbus12sendTxBufferEv+0x138>)
   dffe0:	4a0f      	ldr	r2, [pc, #60]	; (e0020 <_ZN6Modbus12sendTxBufferEv+0x13c>)
   dffe2:	781b      	ldrb	r3, [r3, #0]
   dffe4:	7812      	ldrb	r2, [r2, #0]
   dffe6:	4912      	ldr	r1, [pc, #72]	; (e0030 <_ZN6Modbus12sendTxBufferEv+0x14c>)
   dffe8:	4668      	mov	r0, sp
   dffea:	f7ff fc4b 	bl	df884 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   dffee:	a801      	add	r0, sp, #4
   dfff0:	f7fa fb7d 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  u8BufferSize = 0;
   dfff4:	2300      	movs	r3, #0
   dfff6:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   dfffa:	f000 fe93 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
  u32timeOut = millis() + (unsigned long) u16timeOut;
   dfffe:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
   e0002:	4418      	add	r0, r3
  u16OutCnt++;
   e0004:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
  u32timeOut = millis() + (unsigned long) u16timeOut;
   e0008:	65e0      	str	r0, [r4, #92]	; 0x5c
  u16OutCnt++;
   e000a:	3301      	adds	r3, #1
   e000c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
}
   e0010:	b003      	add	sp, #12
   e0012:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e0014:	000e84f7 	.word	0x000e84f7
   e0018:	2003e61c 	.word	0x2003e61c
   e001c:	2003e5c2 	.word	0x2003e5c2
   e0020:	2003e5c1 	.word	0x2003e5c1
   e0024:	000e8511 	.word	0x000e8511
   e0028:	000e7b72 	.word	0x000e7b72
   e002c:	000e852a 	.word	0x000e852a
   e0030:	000e854c 	.word	0x000e854c

000e0034 <_ZN6Modbus5queryE8modbus_t>:
int8_t Modbus::query( modbus_t telegram ) {
   e0034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e0038:	b08f      	sub	sp, #60	; 0x3c
   e003a:	4604      	mov	r4, r0
   e003c:	a801      	add	r0, sp, #4
   e003e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    Log.info("MODBUS> Query");
   e0042:	497e      	ldr	r1, [pc, #504]	; (e023c <_ZN6Modbus5queryE8modbus_t+0x208>)
   e0044:	487e      	ldr	r0, [pc, #504]	; (e0240 <_ZN6Modbus5queryE8modbus_t+0x20c>)
   e0046:	f8bd 9006 	ldrh.w	r9, [sp, #6]
   e004a:	f8bd 6008 	ldrh.w	r6, [sp, #8]
   e004e:	f89d 8004 	ldrb.w	r8, [sp, #4]
   e0052:	f89d 7005 	ldrb.w	r7, [sp, #5]
   e0056:	f8bd 5008 	ldrh.w	r5, [sp, #8]
   e005a:	f7f9 fd2d 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
    if(MODBUS_DEBUG_ON)
   e005e:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   e0062:	fa99 f999 	rev16.w	r9, r9
   e0066:	ba76      	rev16	r6, r6
   e0068:	b153      	cbz	r3, e0080 <_ZN6Modbus5queryE8modbus_t+0x4c>
      Particle.publish("gx_metrics", "MODBUS> Query", PRIVATE, WITH_ACK);
   e006a:	4b76      	ldr	r3, [pc, #472]	; (e0244 <_ZN6Modbus5queryE8modbus_t+0x210>)
   e006c:	4a76      	ldr	r2, [pc, #472]	; (e0248 <_ZN6Modbus5queryE8modbus_t+0x214>)
   e006e:	781b      	ldrb	r3, [r3, #0]
   e0070:	7812      	ldrb	r2, [r2, #0]
   e0072:	4972      	ldr	r1, [pc, #456]	; (e023c <_ZN6Modbus5queryE8modbus_t+0x208>)
   e0074:	a80a      	add	r0, sp, #40	; 0x28
   e0076:	f7ff fc05 	bl	df884 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   e007a:	a80b      	add	r0, sp, #44	; 0x2c
   e007c:	f7fa fb37 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  if (u8id!=0) {
   e0080:	7923      	ldrb	r3, [r4, #4]
   e0082:	b1a3      	cbz	r3, e00ae <_ZN6Modbus5queryE8modbus_t+0x7a>
      Log.info("MODBUS> Query Error: No address");
   e0084:	4971      	ldr	r1, [pc, #452]	; (e024c <_ZN6Modbus5queryE8modbus_t+0x218>)
   e0086:	486e      	ldr	r0, [pc, #440]	; (e0240 <_ZN6Modbus5queryE8modbus_t+0x20c>)
   e0088:	f7f9 fd16 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
      if(MODBUS_DEBUG_ON)
   e008c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   e0090:	b153      	cbz	r3, e00a8 <_ZN6Modbus5queryE8modbus_t+0x74>
        Particle.publish("gx_metrics", "MODBUS> Query Error: No address", PRIVATE, WITH_ACK);
   e0092:	4b6c      	ldr	r3, [pc, #432]	; (e0244 <_ZN6Modbus5queryE8modbus_t+0x210>)
   e0094:	4a6c      	ldr	r2, [pc, #432]	; (e0248 <_ZN6Modbus5queryE8modbus_t+0x214>)
   e0096:	781b      	ldrb	r3, [r3, #0]
   e0098:	7812      	ldrb	r2, [r2, #0]
   e009a:	496c      	ldr	r1, [pc, #432]	; (e024c <_ZN6Modbus5queryE8modbus_t+0x218>)
   e009c:	a80a      	add	r0, sp, #40	; 0x28
   e009e:	f7ff fbf1 	bl	df884 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   e00a2:	a80b      	add	r0, sp, #44	; 0x2c
   e00a4:	f7fa fb23 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return -2;
   e00a8:	f06f 0001 	mvn.w	r0, #1
   e00ac:	e08f      	b.n	e01ce <_ZN6Modbus5queryE8modbus_t+0x19a>
  if (u8state != COM_IDLE) {
   e00ae:	7a23      	ldrb	r3, [r4, #8]
   e00b0:	b1a3      	cbz	r3, e00dc <_ZN6Modbus5queryE8modbus_t+0xa8>
      Log.info("MODBUS> Query Error: Somebody else transmitting");
   e00b2:	4967      	ldr	r1, [pc, #412]	; (e0250 <_ZN6Modbus5queryE8modbus_t+0x21c>)
   e00b4:	4862      	ldr	r0, [pc, #392]	; (e0240 <_ZN6Modbus5queryE8modbus_t+0x20c>)
   e00b6:	f7f9 fcff 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
      if(MODBUS_DEBUG_ON)
   e00ba:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   e00be:	b153      	cbz	r3, e00d6 <_ZN6Modbus5queryE8modbus_t+0xa2>
        Particle.publish("gx_metrics", "MODBUS> Query Error: Somebody else transmitting", PRIVATE, WITH_ACK);
   e00c0:	4b60      	ldr	r3, [pc, #384]	; (e0244 <_ZN6Modbus5queryE8modbus_t+0x210>)
   e00c2:	4a61      	ldr	r2, [pc, #388]	; (e0248 <_ZN6Modbus5queryE8modbus_t+0x214>)
   e00c4:	781b      	ldrb	r3, [r3, #0]
   e00c6:	7812      	ldrb	r2, [r2, #0]
   e00c8:	4961      	ldr	r1, [pc, #388]	; (e0250 <_ZN6Modbus5queryE8modbus_t+0x21c>)
   e00ca:	a80a      	add	r0, sp, #40	; 0x28
   e00cc:	f7ff fbda 	bl	df884 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   e00d0:	a80b      	add	r0, sp, #44	; 0x2c
   e00d2:	f7fa fb0c 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return -1;
   e00d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   e00da:	e078      	b.n	e01ce <_ZN6Modbus5queryE8modbus_t+0x19a>
  if ((telegram.u8id==0) || (telegram.u8id>247)) {
   e00dc:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   e00e0:	b2db      	uxtb	r3, r3
   e00e2:	2bf6      	cmp	r3, #246	; 0xf6
   e00e4:	d931      	bls.n	e014a <_ZN6Modbus5queryE8modbus_t+0x116>
      Log.info("MODBUS> Query Error: Address out of range: ");
   e00e6:	495b      	ldr	r1, [pc, #364]	; (e0254 <_ZN6Modbus5queryE8modbus_t+0x220>)
   e00e8:	4855      	ldr	r0, [pc, #340]	; (e0240 <_ZN6Modbus5queryE8modbus_t+0x20c>)
   e00ea:	f7f9 fce5 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
      Serial.println(telegram.u8id);
   e00ee:	f004 f93f 	bl	e4370 <_Z16_fetch_usbserialv>
   e00f2:	220a      	movs	r2, #10
   e00f4:	4605      	mov	r5, r0
   e00f6:	4641      	mov	r1, r8
   e00f8:	f003 fb9e 	bl	e3838 <_ZN5Print11printNumberEmh>
        n += println();
   e00fc:	4628      	mov	r0, r5
   e00fe:	f003 fb85 	bl	e380c <_ZN5Print7printlnEv>
      if(MODBUS_DEBUG_ON)
   e0102:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   e0106:	b1eb      	cbz	r3, e0144 <_ZN6Modbus5queryE8modbus_t+0x110>
	StringSumHelper(const char *p) : String(p) {}
   e0108:	4952      	ldr	r1, [pc, #328]	; (e0254 <_ZN6Modbus5queryE8modbus_t+0x220>)
   e010a:	a80a      	add	r0, sp, #40	; 0x28
   e010c:	f003 fd7f 	bl	e3c0e <_ZN6StringC1EPKc>
        Particle.publish("gx_metrics", "MODBUS> Query Error: Address out of range: " + String(telegram.u8id), PRIVATE, WITH_ACK);
   e0110:	220a      	movs	r2, #10
   e0112:	4641      	mov	r1, r8
   e0114:	a806      	add	r0, sp, #24
   e0116:	f003 fdea 	bl	e3cee <_ZN6StringC1Ehh>
   e011a:	a906      	add	r1, sp, #24
   e011c:	a80a      	add	r0, sp, #40	; 0x28
   e011e:	f003 feac 	bl	e3e7a <_ZplRK15StringSumHelperRK6String>
   e0122:	4b48      	ldr	r3, [pc, #288]	; (e0244 <_ZN6Modbus5queryE8modbus_t+0x210>)
   e0124:	4a48      	ldr	r2, [pc, #288]	; (e0248 <_ZN6Modbus5queryE8modbus_t+0x214>)
   e0126:	6801      	ldr	r1, [r0, #0]
   e0128:	781b      	ldrb	r3, [r3, #0]
   e012a:	7812      	ldrb	r2, [r2, #0]
   e012c:	a804      	add	r0, sp, #16
   e012e:	f7ff fba9 	bl	df884 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   e0132:	a805      	add	r0, sp, #20
   e0134:	f7fa fadb 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   e0138:	a806      	add	r0, sp, #24
   e013a:	f003 fd1d 	bl	e3b78 <_ZN6StringD1Ev>
class StringSumHelper : public String
   e013e:	a80a      	add	r0, sp, #40	; 0x28
   e0140:	f003 fd1a 	bl	e3b78 <_ZN6StringD1Ev>
    return -3;
   e0144:	f06f 0002 	mvn.w	r0, #2
   e0148:	e041      	b.n	e01ce <_ZN6Modbus5queryE8modbus_t+0x19a>
  au16regs = telegram.au16reg;
   e014a:	9b03      	ldr	r3, [sp, #12]
  au8Buffer[ FUNC ]       = telegram.u8fct;
   e014c:	72e7      	strb	r7, [r4, #11]
   e014e:	3f01      	subs	r7, #1
  au16regs = telegram.au16reg;
   e0150:	64e3      	str	r3, [r4, #76]	; 0x4c
  au8Buffer[ ID_ ]         = telegram.u8id;
   e0152:	f884 800a 	strb.w	r8, [r4, #10]
  au8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
   e0156:	f8a4 900c 	strh.w	r9, [r4, #12]
  switch( telegram.u8fct ) {
   e015a:	2f0f      	cmp	r7, #15
   e015c:	d80d      	bhi.n	e017a <_ZN6Modbus5queryE8modbus_t+0x146>
   e015e:	e8df f007 	tbb	[pc, r7]
   e0162:	0808      	.short	0x0808
   e0164:	42390808 	.word	0x42390808
   e0168:	0c0c0c0c 	.word	0x0c0c0c0c
   e016c:	0c0c0c0c 	.word	0x0c0c0c0c
   e0170:	5247      	.short	0x5247
      au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
   e0172:	81e6      	strh	r6, [r4, #14]
      u8BufferSize = 6;
   e0174:	2306      	movs	r3, #6
   e0176:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
    Log.info("MODBUS> Query: tx buffer created");
   e017a:	4937      	ldr	r1, [pc, #220]	; (e0258 <_ZN6Modbus5queryE8modbus_t+0x224>)
   e017c:	4830      	ldr	r0, [pc, #192]	; (e0240 <_ZN6Modbus5queryE8modbus_t+0x20c>)
   e017e:	f7f9 fc9b 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
    if(MODBUS_DEBUG_ON)
   e0182:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   e0186:	b153      	cbz	r3, e019e <_ZN6Modbus5queryE8modbus_t+0x16a>
      Particle.publish("gx_metrics", "MODBUS> Query: tx buffer created", PRIVATE, WITH_ACK);
   e0188:	4b2e      	ldr	r3, [pc, #184]	; (e0244 <_ZN6Modbus5queryE8modbus_t+0x210>)
   e018a:	4a2f      	ldr	r2, [pc, #188]	; (e0248 <_ZN6Modbus5queryE8modbus_t+0x214>)
   e018c:	781b      	ldrb	r3, [r3, #0]
   e018e:	7812      	ldrb	r2, [r2, #0]
   e0190:	4931      	ldr	r1, [pc, #196]	; (e0258 <_ZN6Modbus5queryE8modbus_t+0x224>)
   e0192:	a80a      	add	r0, sp, #40	; 0x28
   e0194:	f7ff fb76 	bl	df884 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   e0198:	a80b      	add	r0, sp, #44	; 0x2c
   e019a:	f7fa faa8 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  sendTxBuffer();
   e019e:	4620      	mov	r0, r4
   e01a0:	f7ff fea0 	bl	dfee4 <_ZN6Modbus12sendTxBufferEv>
    Log.info("MODBUS> Query: tx buffer sent");
   e01a4:	492d      	ldr	r1, [pc, #180]	; (e025c <_ZN6Modbus5queryE8modbus_t+0x228>)
   e01a6:	4826      	ldr	r0, [pc, #152]	; (e0240 <_ZN6Modbus5queryE8modbus_t+0x20c>)
   e01a8:	f7f9 fc86 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
    if(MODBUS_DEBUG_ON)
   e01ac:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   e01b0:	b153      	cbz	r3, e01c8 <_ZN6Modbus5queryE8modbus_t+0x194>
      Particle.publish("gx_metrics", "MODBUS> Query: tx buffer sent", PRIVATE, WITH_ACK);
   e01b2:	4b24      	ldr	r3, [pc, #144]	; (e0244 <_ZN6Modbus5queryE8modbus_t+0x210>)
   e01b4:	4a24      	ldr	r2, [pc, #144]	; (e0248 <_ZN6Modbus5queryE8modbus_t+0x214>)
   e01b6:	781b      	ldrb	r3, [r3, #0]
   e01b8:	7812      	ldrb	r2, [r2, #0]
   e01ba:	4928      	ldr	r1, [pc, #160]	; (e025c <_ZN6Modbus5queryE8modbus_t+0x228>)
   e01bc:	a80a      	add	r0, sp, #40	; 0x28
   e01be:	f7ff fb61 	bl	df884 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   e01c2:	a80b      	add	r0, sp, #44	; 0x2c
   e01c4:	f7fa fa93 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  u8state = COM_WAITING;
   e01c8:	2301      	movs	r3, #1
   e01ca:	7223      	strb	r3, [r4, #8]
  return 0;
   e01cc:	2000      	movs	r0, #0
}
   e01ce:	b00f      	add	sp, #60	; 0x3c
   e01d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      au8Buffer[ NB_HI ]      = ((au16regs[0] > 0) ? 0xff : 0);
   e01d4:	881b      	ldrh	r3, [r3, #0]
   e01d6:	3b00      	subs	r3, #0
   e01d8:	bf18      	it	ne
   e01da:	2301      	movne	r3, #1
   e01dc:	425b      	negs	r3, r3
   e01de:	73a3      	strb	r3, [r4, #14]
      au8Buffer[ NB_LO ]      = 0;
   e01e0:	2300      	movs	r3, #0
   e01e2:	73e3      	strb	r3, [r4, #15]
   e01e4:	e7c6      	b.n	e0174 <_ZN6Modbus5queryE8modbus_t+0x140>
      au8Buffer[ NB_HI ]      = highByte(au16regs[0]);
   e01e6:	881a      	ldrh	r2, [r3, #0]
   e01e8:	0a12      	lsrs	r2, r2, #8
   e01ea:	73a2      	strb	r2, [r4, #14]
      au8Buffer[ NB_LO ]      = lowByte(au16regs[0]);
   e01ec:	881b      	ldrh	r3, [r3, #0]
   e01ee:	e7f8      	b.n	e01e2 <_ZN6Modbus5queryE8modbus_t+0x1ae>
      u8bytesno = u8regsno * 2;
   e01f0:	08eb      	lsrs	r3, r5, #3
   e01f2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
      if ((telegram.u16CoilsNo % 16) != 0) {
   e01f6:	072a      	lsls	r2, r5, #28
        u8bytesno++;
   e01f8:	bf1c      	itt	ne
   e01fa:	3301      	addne	r3, #1
   e01fc:	b2db      	uxtbne	r3, r3
      au8Buffer[ NB_LO+1 ]    = u8bytesno;
   e01fe:	7423      	strb	r3, [r4, #16]
      au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
   e0200:	81e6      	strh	r6, [r4, #14]
      u8BufferSize = 7;
   e0202:	2307      	movs	r3, #7
   e0204:	e7b7      	b.n	e0176 <_ZN6Modbus5queryE8modbus_t+0x142>
      au8Buffer[ NB_LO+1 ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
   e0206:	006d      	lsls	r5, r5, #1
      u8BufferSize = 7;
   e0208:	2207      	movs	r2, #7
      au8Buffer[ NB_LO+1 ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
   e020a:	7425      	strb	r5, [r4, #16]
      au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
   e020c:	81e6      	strh	r6, [r4, #14]
      u8BufferSize = 7;
   e020e:	f884 204a 	strb.w	r2, [r4, #74]	; 0x4a
      for (uint16_t i=0; i< telegram.u16CoilsNo; i++) {
   e0212:	441d      	add	r5, r3
   e0214:	42ab      	cmp	r3, r5
   e0216:	d0b0      	beq.n	e017a <_ZN6Modbus5queryE8modbus_t+0x146>
        au8Buffer[ u8BufferSize ] = highByte( au16regs[ i ] );
   e0218:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
   e021c:	881a      	ldrh	r2, [r3, #0]
   e021e:	1860      	adds	r0, r4, r1
   e0220:	0a12      	lsrs	r2, r2, #8
   e0222:	7282      	strb	r2, [r0, #10]
        u8BufferSize++;
   e0224:	1c4a      	adds	r2, r1, #1
   e0226:	b2d2      	uxtb	r2, r2
   e0228:	f884 204a 	strb.w	r2, [r4, #74]	; 0x4a
        au8Buffer[ u8BufferSize ] = lowByte( au16regs[ i ] );
   e022c:	4422      	add	r2, r4
   e022e:	f833 0b02 	ldrh.w	r0, [r3], #2
   e0232:	7290      	strb	r0, [r2, #10]
        u8BufferSize++;
   e0234:	3102      	adds	r1, #2
   e0236:	f884 104a 	strb.w	r1, [r4, #74]	; 0x4a
      for (uint16_t i=0; i< telegram.u16CoilsNo; i++) {
   e023a:	e7eb      	b.n	e0214 <_ZN6Modbus5queryE8modbus_t+0x1e0>
   e023c:	000e8575 	.word	0x000e8575
   e0240:	2003e61c 	.word	0x2003e61c
   e0244:	2003e5c2 	.word	0x2003e5c2
   e0248:	2003e5c1 	.word	0x2003e5c1
   e024c:	000e8583 	.word	0x000e8583
   e0250:	000e85a3 	.word	0x000e85a3
   e0254:	000e85d3 	.word	0x000e85d3
   e0258:	000e85ff 	.word	0x000e85ff
   e025c:	000e8620 	.word	0x000e8620

000e0260 <_GLOBAL__sub_I__ZN6ModbusC2Ev>:
        val_(val) {
   e0260:	4b03      	ldr	r3, [pc, #12]	; (e0270 <_GLOBAL__sub_I__ZN6ModbusC2Ev+0x10>)
   e0262:	2201      	movs	r2, #1
   e0264:	701a      	strb	r2, [r3, #0]
   e0266:	4b03      	ldr	r3, [pc, #12]	; (e0274 <_GLOBAL__sub_I__ZN6ModbusC2Ev+0x14>)
   e0268:	2208      	movs	r2, #8
   e026a:	701a      	strb	r2, [r3, #0]
};
   e026c:	4770      	bx	lr
   e026e:	bf00      	nop
   e0270:	2003e5c1 	.word	0x2003e5c1
   e0274:	2003e5c2 	.word	0x2003e5c2

000e0278 <_ZN8SpiFlashD1Ev>:
SpiFlash::SpiFlash(SPIClass &spi, int cs) : spi(spi), cs(cs) {
	}

SpiFlash::~SpiFlash() {

}
   e0278:	4770      	bx	lr

000e027a <_ZN8SpiFlash7isValidEv>:

	// Send release from powerdown 0xab
	wakeFromSleep();
}

bool SpiFlash::isValid() {
   e027a:	b510      	push	{r4, lr}
	uint8_t foundManufacturerId = (jedecIdRead() >> 16) & 0xff;
   e027c:	6803      	ldr	r3, [r0, #0]
   e027e:	691b      	ldr	r3, [r3, #16]
bool SpiFlash::isValid() {
   e0280:	4604      	mov	r4, r0
	uint8_t foundManufacturerId = (jedecIdRead() >> 16) & 0xff;
   e0282:	4798      	blx	r3

	return manufacturerId == foundManufacturerId;
   e0284:	7b23      	ldrb	r3, [r4, #12]
   e0286:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
   e028a:	1a1b      	subs	r3, r3, r0
   e028c:	4258      	negs	r0, r3
   e028e:	4158      	adcs	r0, r3
   e0290:	bd10      	pop	{r4, pc}

000e0292 <_ZN8SpiFlashD0Ev>:
SpiFlash::~SpiFlash() {
   e0292:	b510      	push	{r4, lr}
}
   e0294:	2130      	movs	r1, #48	; 0x30
SpiFlash::~SpiFlash() {
   e0296:	4604      	mov	r4, r0
}
   e0298:	f004 faf5 	bl	e4886 <_ZdlPvj>
   e029c:	4620      	mov	r0, r4
   e029e:	bd10      	pop	{r4, pc}

000e02a0 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   e02a0:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   e02a2:	6803      	ldr	r3, [r0, #0]
   e02a4:	2b2f      	cmp	r3, #47	; 0x2f
{
   e02a6:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   e02a8:	d904      	bls.n	e02b4 <nrf_gpio_pin_port_decode+0x14>
   e02aa:	4a07      	ldr	r2, [pc, #28]	; (e02c8 <nrf_gpio_pin_port_decode+0x28>)
   e02ac:	2100      	movs	r1, #0
   e02ae:	200a      	movs	r0, #10
   e02b0:	f000 ff08 	bl	e10c4 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   e02b4:	6823      	ldr	r3, [r4, #0]
   e02b6:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   e02b8:	bf83      	ittte	hi
   e02ba:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   e02be:	4803      	ldrhi	r0, [pc, #12]	; (e02cc <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   e02c0:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   e02c2:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   e02c6:	bd10      	pop	{r4, pc}
   e02c8:	000e0d15 	.word	0x000e0d15
   e02cc:	50000300 	.word	0x50000300

000e02d0 <_ZN8SpiFlashC1ER8SPIClassi>:
SpiFlash::SpiFlash(SPIClass &spi, int cs) : spi(spi), cs(cs) {
   e02d0:	b530      	push	{r4, r5, lr}
   e02d2:	4c0e      	ldr	r4, [pc, #56]	; (e030c <_ZN8SpiFlashC1ER8SPIClassi+0x3c>)
   e02d4:	f8df c038 	ldr.w	ip, [pc, #56]	; e0310 <_ZN8SpiFlashC1ER8SPIClassi+0x40>
   e02d8:	6004      	str	r4, [r0, #0]
	SpiFlashBase() {};
   e02da:	f44f 7580 	mov.w	r5, #256	; 0x100
   e02de:	f44f 5480 	mov.w	r4, #4096	; 0x1000
   e02e2:	e9c0 5401 	strd	r5, r4, [r0, #4]
   e02e6:	240a      	movs	r4, #10
   e02e8:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
   e02ec:	e9c0 5405 	strd	r5, r4, [r0, #20]
   e02f0:	e9c0 c403 	strd	ip, r4, [r0, #12]
   e02f4:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
   e02f8:	f24c 3550 	movw	r5, #50000	; 0xc350
   e02fc:	2403      	movs	r4, #3
   e02fe:	2200      	movs	r2, #0
   e0300:	e9c0 5407 	strd	r5, r4, [r0, #28]
   e0304:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
	}
   e0308:	bd30      	pop	{r4, r5, pc}
   e030a:	bf00      	nop
   e030c:	000e8650 	.word	0x000e8650
   e0310:	031e019d 	.word	0x031e019d

000e0314 <_ZN8SpiFlash16beginTransactionEv>:


void SpiFlash::beginTransaction() {
   e0314:	b5f0      	push	{r4, r5, r6, r7, lr}
	
	__SPISettings settings(spiClockSpeedMHz * MHZ, spiBitOrder, spiDataMode);
   e0316:	4b26      	ldr	r3, [pc, #152]	; (e03b0 <_ZN8SpiFlash16beginTransactionEv+0x9c>)
   e0318:	7b82      	ldrb	r2, [r0, #14]
   e031a:	7b41      	ldrb	r1, [r0, #13]
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   e031c:	4d25      	ldr	r5, [pc, #148]	; (e03b4 <_ZN8SpiFlash16beginTransactionEv+0xa0>)
   e031e:	4e26      	ldr	r6, [pc, #152]	; (e03b8 <_ZN8SpiFlash16beginTransactionEv+0xa4>)
void SpiFlash::beginTransaction() {
   e0320:	b087      	sub	sp, #28
	__SPISettings settings(spiClockSpeedMHz * MHZ, spiBitOrder, spiDataMode);
   e0322:	4353      	muls	r3, r2
void SpiFlash::beginTransaction() {
   e0324:	4604      	mov	r4, r0
	__SPISettings settings(spiClockSpeedMHz * MHZ, spiBitOrder, spiDataMode);
   e0326:	7bc2      	ldrb	r2, [r0, #15]
   e0328:	4824      	ldr	r0, [pc, #144]	; (e03bc <_ZN8SpiFlash16beginTransactionEv+0xa8>)
   e032a:	9002      	str	r0, [sp, #8]
   e032c:	2000      	movs	r0, #0
   e032e:	f88d 000c 	strb.w	r0, [sp, #12]
   e0332:	f88d 1014 	strb.w	r1, [sp, #20]

	spi.beginTransaction(settings);
   e0336:	6a60      	ldr	r0, [r4, #36]	; 0x24
   e0338:	9304      	str	r3, [sp, #16]
   e033a:	a902      	add	r1, sp, #8
   e033c:	f88d 2015 	strb.w	r2, [sp, #21]
   e0340:	f003 fb3a 	bl	e39b8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	pinResetFast(cs);
   e0344:	6aa4      	ldr	r4, [r4, #40]	; 0x28
   e0346:	782b      	ldrb	r3, [r5, #0]
   e0348:	f3bf 8f5b 	dmb	ish
   e034c:	f013 0f01 	tst.w	r3, #1
   e0350:	d109      	bne.n	e0366 <_ZN8SpiFlash16beginTransactionEv+0x52>
   e0352:	4628      	mov	r0, r5
   e0354:	f7f3 feb2 	bl	d40bc <__cxa_guard_acquire>
   e0358:	b128      	cbz	r0, e0366 <_ZN8SpiFlash16beginTransactionEv+0x52>
   e035a:	f000 fd13 	bl	e0d84 <HAL_Pin_Map>
   e035e:	6030      	str	r0, [r6, #0]
   e0360:	4628      	mov	r0, r5
   e0362:	f7f3 feb0 	bl	d40c6 <__cxa_guard_release>
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   e0366:	b2a4      	uxth	r4, r4
   e0368:	6833      	ldr	r3, [r6, #0]
   e036a:	0124      	lsls	r4, r4, #4
   e036c:	5d1b      	ldrb	r3, [r3, r4]
   e036e:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   e0370:	782b      	ldrb	r3, [r5, #0]
   e0372:	f3bf 8f5b 	dmb	ish
   e0376:	07db      	lsls	r3, r3, #31
   e0378:	d409      	bmi.n	e038e <_ZN8SpiFlash16beginTransactionEv+0x7a>
   e037a:	480e      	ldr	r0, [pc, #56]	; (e03b4 <_ZN8SpiFlash16beginTransactionEv+0xa0>)
   e037c:	f7f3 fe9e 	bl	d40bc <__cxa_guard_acquire>
   e0380:	b128      	cbz	r0, e038e <_ZN8SpiFlash16beginTransactionEv+0x7a>
   e0382:	f000 fcff 	bl	e0d84 <HAL_Pin_Map>
   e0386:	6030      	str	r0, [r6, #0]
   e0388:	480a      	ldr	r0, [pc, #40]	; (e03b4 <_ZN8SpiFlash16beginTransactionEv+0xa0>)
   e038a:	f7f3 fe9c 	bl	d40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   e038e:	6833      	ldr	r3, [r6, #0]
   e0390:	441c      	add	r4, r3
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   e0392:	a801      	add	r0, sp, #4
   e0394:	7863      	ldrb	r3, [r4, #1]
   e0396:	f003 031f 	and.w	r3, r3, #31
   e039a:	433b      	orrs	r3, r7
   e039c:	9301      	str	r3, [sp, #4]
   e039e:	f7ff ff7f 	bl	e02a0 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   e03a2:	9a01      	ldr	r2, [sp, #4]
   e03a4:	2301      	movs	r3, #1
   e03a6:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   e03a8:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c

	// There is some code to do this in the STM32F2xx HAL, but I don't think it's necessary to put
	// a really tiny delay before doing the SPI transfer
	// asm("mov r2, r2");
}
   e03ac:	b007      	add	sp, #28
   e03ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e03b0:	000f4240 	.word	0x000f4240
   e03b4:	2003e5c4 	.word	0x2003e5c4
   e03b8:	2003e5c8 	.word	0x2003e5c8
   e03bc:	000e6e1c 	.word	0x000e6e1c

000e03c0 <_ZN8SpiFlash14endTransactionEv>:

void SpiFlash::endTransaction() {
   e03c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   e03c4:	4d20      	ldr	r5, [pc, #128]	; (e0448 <_ZN8SpiFlash14endTransactionEv+0x88>)
	pinSetFast(cs);
   e03c6:	6a84      	ldr	r4, [r0, #40]	; 0x28
   e03c8:	782b      	ldrb	r3, [r5, #0]
   e03ca:	f8df 8080 	ldr.w	r8, [pc, #128]	; e044c <_ZN8SpiFlash14endTransactionEv+0x8c>
   e03ce:	f3bf 8f5b 	dmb	ish
   e03d2:	f013 0f01 	tst.w	r3, #1
void SpiFlash::endTransaction() {
   e03d6:	4606      	mov	r6, r0
   e03d8:	d10a      	bne.n	e03f0 <_ZN8SpiFlash14endTransactionEv+0x30>
   e03da:	4628      	mov	r0, r5
   e03dc:	f7f3 fe6e 	bl	d40bc <__cxa_guard_acquire>
   e03e0:	b130      	cbz	r0, e03f0 <_ZN8SpiFlash14endTransactionEv+0x30>
   e03e2:	f000 fccf 	bl	e0d84 <HAL_Pin_Map>
   e03e6:	f8c8 0000 	str.w	r0, [r8]
   e03ea:	4628      	mov	r0, r5
   e03ec:	f7f3 fe6b 	bl	d40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   e03f0:	b2a4      	uxth	r4, r4
   e03f2:	f8d8 3000 	ldr.w	r3, [r8]
   e03f6:	0124      	lsls	r4, r4, #4
   e03f8:	5d1b      	ldrb	r3, [r3, r4]
   e03fa:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   e03fc:	782b      	ldrb	r3, [r5, #0]
   e03fe:	f3bf 8f5b 	dmb	ish
   e0402:	07db      	lsls	r3, r3, #31
   e0404:	d40a      	bmi.n	e041c <_ZN8SpiFlash14endTransactionEv+0x5c>
   e0406:	4810      	ldr	r0, [pc, #64]	; (e0448 <_ZN8SpiFlash14endTransactionEv+0x88>)
   e0408:	f7f3 fe58 	bl	d40bc <__cxa_guard_acquire>
   e040c:	b130      	cbz	r0, e041c <_ZN8SpiFlash14endTransactionEv+0x5c>
   e040e:	f000 fcb9 	bl	e0d84 <HAL_Pin_Map>
   e0412:	f8c8 0000 	str.w	r0, [r8]
   e0416:	480c      	ldr	r0, [pc, #48]	; (e0448 <_ZN8SpiFlash14endTransactionEv+0x88>)
   e0418:	f7f3 fe55 	bl	d40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   e041c:	f8d8 3000 	ldr.w	r3, [r8]
   e0420:	441c      	add	r4, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   e0422:	a801      	add	r0, sp, #4
   e0424:	7863      	ldrb	r3, [r4, #1]
   e0426:	f003 031f 	and.w	r3, r3, #31
   e042a:	433b      	orrs	r3, r7
   e042c:	9301      	str	r3, [sp, #4]
   e042e:	f7ff ff37 	bl	e02a0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   e0432:	9a01      	ldr	r2, [sp, #4]
   e0434:	2301      	movs	r3, #1
   e0436:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   e0438:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
	spi.endTransaction();
   e043c:	6a70      	ldr	r0, [r6, #36]	; 0x24
   e043e:	f003 faa2 	bl	e3986 <_ZN8SPIClass14endTransactionEv>
}
   e0442:	b002      	add	sp, #8
   e0444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e0448:	2003e5c4 	.word	0x2003e5c4
   e044c:	2003e5c8 	.word	0x2003e5c8

000e0450 <_ZN8SpiFlash11jedecIdReadEv>:

uint32_t SpiFlash::jedecIdRead() {
   e0450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   e0452:	4604      	mov	r4, r0

	uint8_t txBuf[4], rxBuf[4];
	txBuf[0] = 0x9f;
   e0454:	239f      	movs	r3, #159	; 0x9f
   e0456:	f88d 3008 	strb.w	r3, [sp, #8]

	beginTransaction();
   e045a:	f7ff ff5b 	bl	e0314 <_ZN8SpiFlash16beginTransactionEv>
	spi.transfer(txBuf, rxBuf, sizeof(txBuf), NULL);
   e045e:	2300      	movs	r3, #0
   e0460:	6a60      	ldr	r0, [r4, #36]	; 0x24
   e0462:	9300      	str	r3, [sp, #0]
   e0464:	aa03      	add	r2, sp, #12
   e0466:	2304      	movs	r3, #4
   e0468:	a902      	add	r1, sp, #8
   e046a:	f003 fb13 	bl	e3a94 <_ZN8SPIClass8transferEPvS0_jPFvvE>
	endTransaction();
   e046e:	4620      	mov	r0, r4
   e0470:	f7ff ffa6 	bl	e03c0 <_ZN8SpiFlash14endTransactionEv>

	return (rxBuf[1] << 16) | (rxBuf[2] << 8) | (rxBuf[3]);
   e0474:	f89d 300e 	ldrb.w	r3, [sp, #14]
   e0478:	f89d 000d 	ldrb.w	r0, [sp, #13]
   e047c:	021b      	lsls	r3, r3, #8
   e047e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   e0482:	f89d 000f 	ldrb.w	r0, [sp, #15]
}
   e0486:	4318      	orrs	r0, r3
   e0488:	b004      	add	sp, #16
   e048a:	bd10      	pop	{r4, pc}

000e048c <_ZN8SpiFlash10readStatusEv>:

uint8_t SpiFlash::readStatus() {
   e048c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   e048e:	4604      	mov	r4, r0
	uint8_t txBuf[2], rxBuf[2];
	txBuf[0] = 0x05; // RDSR
   e0490:	2305      	movs	r3, #5
   e0492:	f8ad 3008 	strh.w	r3, [sp, #8]
	txBuf[1] = 0;

	beginTransaction();
   e0496:	f7ff ff3d 	bl	e0314 <_ZN8SpiFlash16beginTransactionEv>
	spi.transfer(txBuf, rxBuf, sizeof(txBuf), NULL);
   e049a:	2300      	movs	r3, #0
   e049c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   e049e:	9300      	str	r3, [sp, #0]
   e04a0:	aa03      	add	r2, sp, #12
   e04a2:	2302      	movs	r3, #2
   e04a4:	a902      	add	r1, sp, #8
   e04a6:	f003 faf5 	bl	e3a94 <_ZN8SPIClass8transferEPvS0_jPFvvE>
	endTransaction();
   e04aa:	4620      	mov	r0, r4
   e04ac:	f7ff ff88 	bl	e03c0 <_ZN8SpiFlash14endTransactionEv>

	return rxBuf[1];
}
   e04b0:	f89d 000d 	ldrb.w	r0, [sp, #13]
   e04b4:	b004      	add	sp, #16
   e04b6:	bd10      	pop	{r4, pc}

000e04b8 <_ZN8SpiFlash17isWriteInProgressEv>:

	return rxBuf[1];
}


bool SpiFlash::isWriteInProgress() {
   e04b8:	b508      	push	{r3, lr}
	return (readStatus() & STATUS_WIP) != 0;
   e04ba:	f7ff ffe7 	bl	e048c <_ZN8SpiFlash10readStatusEv>
}
   e04be:	f000 0001 	and.w	r0, r0, #1
   e04c2:	bd08      	pop	{r3, pc}

000e04c4 <_ZN8SpiFlash20waitForWriteCompleteEm>:

void SpiFlash::waitForWriteComplete(unsigned long timeout) {
   e04c4:	b570      	push	{r4, r5, r6, lr}
   e04c6:	4605      	mov	r5, r0
   e04c8:	460c      	mov	r4, r1
   e04ca:	f000 fc2b 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
   e04ce:	4606      	mov	r6, r0
	unsigned long startTime = millis();

	if (timeout == 0) {
   e04d0:	b904      	cbnz	r4, e04d4 <_ZN8SpiFlash20waitForWriteCompleteEm+0x10>
		timeout = waitWriteCompletionTimeoutMs;
   e04d2:	692c      	ldr	r4, [r5, #16]
	}

	// Wait for up to 500 ms. Most operations should take much less than that.
	while(isWriteInProgress() && millis() - startTime < timeout) {
   e04d4:	4628      	mov	r0, r5
   e04d6:	f7ff ffef 	bl	e04b8 <_ZN8SpiFlash17isWriteInProgressEv>
   e04da:	b158      	cbz	r0, e04f4 <_ZN8SpiFlash20waitForWriteCompleteEm+0x30>
   e04dc:	f000 fc22 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
   e04e0:	1b80      	subs	r0, r0, r6
   e04e2:	42a0      	cmp	r0, r4
   e04e4:	d206      	bcs.n	e04f4 <_ZN8SpiFlash20waitForWriteCompleteEm+0x30>
		// For long timeouts, yield the CPU
		if (timeout > 500) {
   e04e6:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   e04ea:	d9f3      	bls.n	e04d4 <_ZN8SpiFlash20waitForWriteCompleteEm+0x10>
			delay(1);
   e04ec:	2001      	movs	r0, #1
   e04ee:	f000 ffce 	bl	e148e <delay>
   e04f2:	e7ef      	b.n	e04d4 <_ZN8SpiFlash20waitForWriteCompleteEm+0x10>
		}
	}

	// Log.trace("isWriteInProgress=%d time=%u", isWriteInProgress(), millis() - startTime);
}
   e04f4:	bd70      	pop	{r4, r5, r6, pc}

000e04f6 <_ZN8SpiFlash15setInstWithAddrEhjPh>:
}


void SpiFlash::setInstWithAddr(uint8_t inst, size_t addr, uint8_t *buf) {
	uint8_t *p = buf;
	*p++ = inst;
   e04f6:	7019      	strb	r1, [r3, #0]
	if (addr4byte) {
   e04f8:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
   e04fc:	b931      	cbnz	r1, e050c <_ZN8SpiFlash15setInstWithAddrEhjPh+0x16>
	*p++ = inst;
   e04fe:	1c59      	adds	r1, r3, #1
		*p++ = (uint8_t) (addr >> 24);
	}
	*p++ = (uint8_t) (addr >> 16);
   e0500:	0c13      	lsrs	r3, r2, #16
   e0502:	700b      	strb	r3, [r1, #0]
	*p++ = (uint8_t) (addr >> 8);
   e0504:	0a13      	lsrs	r3, r2, #8
   e0506:	704b      	strb	r3, [r1, #1]
	*p++ = (uint8_t) addr;
   e0508:	708a      	strb	r2, [r1, #2]
}
   e050a:	4770      	bx	lr
		*p++ = (uint8_t) (addr >> 24);
   e050c:	0e10      	lsrs	r0, r2, #24
   e050e:	1c99      	adds	r1, r3, #2
   e0510:	7058      	strb	r0, [r3, #1]
   e0512:	e7f5      	b.n	e0500 <_ZN8SpiFlash15setInstWithAddrEhjPh+0xa>

000e0514 <_ZN8SpiFlash8readDataEjPvj>:
void SpiFlash::readData(size_t addr, void *buf, size_t bufLen) {
   e0514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e0518:	4605      	mov	r5, r0
   e051a:	b085      	sub	sp, #20
   e051c:	460f      	mov	r7, r1
   e051e:	4690      	mov	r8, r2
   e0520:	461e      	mov	r6, r3
		spi.transfer(txBuf, NULL, getInstWithAddrSize(), NULL);
   e0522:	f04f 0900 	mov.w	r9, #0
	while(bufLen > 0) {
   e0526:	b376      	cbz	r6, e0586 <_ZN8SpiFlash8readDataEjPvj+0x72>
		size_t pageOffset = addr % pageSize;
   e0528:	686c      	ldr	r4, [r5, #4]
   e052a:	fbb7 f3f4 	udiv	r3, r7, r4
   e052e:	fb04 7313 	mls	r3, r4, r3, r7
		size_t count = (pageStart + pageSize) - addr;
   e0532:	1ae4      	subs	r4, r4, r3
		if (count > bufLen) {
   e0534:	42b4      	cmp	r4, r6
		setInstWithAddr(0x03, addr, txBuf); // READ
   e0536:	463a      	mov	r2, r7
   e0538:	ab02      	add	r3, sp, #8
   e053a:	f04f 0103 	mov.w	r1, #3
   e053e:	4628      	mov	r0, r5
   e0540:	bf28      	it	cs
   e0542:	4634      	movcs	r4, r6
   e0544:	f7ff ffd7 	bl	e04f6 <_ZN8SpiFlash15setInstWithAddrEhjPh>
		beginTransaction();
   e0548:	4628      	mov	r0, r5
   e054a:	f7ff fee3 	bl	e0314 <_ZN8SpiFlash16beginTransactionEv>

size_t SpiFlash::getInstWithAddrSize() const {
	return addr4byte ? 5 : 4;	
   e054e:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
		spi.transfer(txBuf, NULL, getInstWithAddrSize(), NULL);
   e0552:	6a68      	ldr	r0, [r5, #36]	; 0x24
   e0554:	f8cd 9000 	str.w	r9, [sp]
	return addr4byte ? 5 : 4;	
   e0558:	2b00      	cmp	r3, #0
		spi.transfer(txBuf, NULL, getInstWithAddrSize(), NULL);
   e055a:	bf14      	ite	ne
   e055c:	2305      	movne	r3, #5
   e055e:	2304      	moveq	r3, #4
   e0560:	2200      	movs	r2, #0
   e0562:	a902      	add	r1, sp, #8
   e0564:	f003 fa96 	bl	e3a94 <_ZN8SPIClass8transferEPvS0_jPFvvE>
		spi.transfer(NULL, curBuf, bufLen, NULL);
   e0568:	4633      	mov	r3, r6
   e056a:	4642      	mov	r2, r8
   e056c:	6a68      	ldr	r0, [r5, #36]	; 0x24
   e056e:	f8cd 9000 	str.w	r9, [sp]
   e0572:	2100      	movs	r1, #0
   e0574:	f003 fa8e 	bl	e3a94 <_ZN8SPIClass8transferEPvS0_jPFvvE>
		endTransaction();
   e0578:	4628      	mov	r0, r5
   e057a:	f7ff ff21 	bl	e03c0 <_ZN8SpiFlash14endTransactionEv>
		addr += count;
   e057e:	4427      	add	r7, r4
		curBuf += count;
   e0580:	44a0      	add	r8, r4
		bufLen -= count;
   e0582:	1b36      	subs	r6, r6, r4
	while(bufLen > 0) {
   e0584:	e7cf      	b.n	e0526 <_ZN8SpiFlash8readDataEjPvj+0x12>
}
   e0586:	b005      	add	sp, #20
   e0588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e058c <_ZN8SpiFlash13wakeFromSleepEv>:
	endTransaction();

	delayMicroseconds(1);
}

void SpiFlash::wakeFromSleep() {
   e058c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   e058e:	4604      	mov	r4, r0
	// Send release from powerdown 0xab
	uint8_t txBuf[1];
	txBuf[0] = 0xab;
   e0590:	23ab      	movs	r3, #171	; 0xab
   e0592:	f88d 300c 	strb.w	r3, [sp, #12]

	beginTransaction();
   e0596:	f7ff febd 	bl	e0314 <_ZN8SpiFlash16beginTransactionEv>
	spi.transfer(txBuf, NULL, sizeof(txBuf), NULL);
   e059a:	2200      	movs	r2, #0
   e059c:	9200      	str	r2, [sp, #0]
   e059e:	2301      	movs	r3, #1
   e05a0:	a903      	add	r1, sp, #12
   e05a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   e05a4:	f003 fa76 	bl	e3a94 <_ZN8SPIClass8transferEPvS0_jPFvvE>
	endTransaction();
   e05a8:	4620      	mov	r0, r4
   e05aa:	f7ff ff09 	bl	e03c0 <_ZN8SpiFlash14endTransactionEv>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   e05ae:	2003      	movs	r0, #3
   e05b0:	f000 fbb0 	bl	e0d14 <HAL_Delay_Microseconds>

	// Need to wait tres (3 microseconds) before issuing the next command
	delayMicroseconds(3);
}
   e05b4:	b004      	add	sp, #16
   e05b6:	bd10      	pop	{r4, pc}

000e05b8 <_ZN8SpiFlash5beginEv>:
void SpiFlash::begin() {
   e05b8:	b510      	push	{r4, lr}
   e05ba:	4604      	mov	r4, r0
	spi.begin(cs);
   e05bc:	8d01      	ldrh	r1, [r0, #40]	; 0x28
   e05be:	6a40      	ldr	r0, [r0, #36]	; 0x24
   e05c0:	f003 f9bf 	bl	e3942 <_ZN8SPIClass5beginEt>
	digitalWrite(cs, HIGH);
   e05c4:	8d20      	ldrh	r0, [r4, #40]	; 0x28
   e05c6:	2101      	movs	r1, #1
   e05c8:	f004 f891 	bl	e46ee <digitalWrite>
	wakeFromSleep();
   e05cc:	4620      	mov	r0, r4
}
   e05ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	wakeFromSleep();
   e05d2:	f7ff bfdb 	b.w	e058c <_ZN8SpiFlash13wakeFromSleepEv>

000e05d6 <_ZN8SpiFlash11writeEnableEv>:
	// Need to wait tdp (10 microseconds) before issuing the next command, but since we're probably doing
	// this before sleep, it's not necessary
}


void SpiFlash::writeEnable() {
   e05d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   e05d8:	4604      	mov	r4, r0
	uint8_t txBuf[1];

	beginTransaction();
   e05da:	f7ff fe9b 	bl	e0314 <_ZN8SpiFlash16beginTransactionEv>
	txBuf[0] = 0x06; // WREN
	spi.transfer(txBuf, NULL, sizeof(txBuf), NULL);
   e05de:	2200      	movs	r2, #0
	txBuf[0] = 0x06; // WREN
   e05e0:	2306      	movs	r3, #6
	spi.transfer(txBuf, NULL, sizeof(txBuf), NULL);
   e05e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
	txBuf[0] = 0x06; // WREN
   e05e4:	f88d 300c 	strb.w	r3, [sp, #12]
	spi.transfer(txBuf, NULL, sizeof(txBuf), NULL);
   e05e8:	9200      	str	r2, [sp, #0]
   e05ea:	2301      	movs	r3, #1
   e05ec:	a903      	add	r1, sp, #12
   e05ee:	f003 fa51 	bl	e3a94 <_ZN8SPIClass8transferEPvS0_jPFvvE>
	endTransaction();
   e05f2:	4620      	mov	r0, r4
   e05f4:	f7ff fee4 	bl	e03c0 <_ZN8SpiFlash14endTransactionEv>

	// ISSI devices require a 3us delay here, but Winbond devices do not
	if (writeEnableDelayUs > 0) {
   e05f8:	6a20      	ldr	r0, [r4, #32]
   e05fa:	b108      	cbz	r0, e0600 <_ZN8SpiFlash11writeEnableEv+0x2a>
   e05fc:	f000 fb8a 	bl	e0d14 <HAL_Delay_Microseconds>
		delayMicroseconds(writeEnableDelayUs);
	}
}
   e0600:	b004      	add	sp, #16
   e0602:	bd10      	pop	{r4, pc}

000e0604 <_ZN8SpiFlash9writeDataEjPKvj>:
void SpiFlash::writeData(size_t addr, const void *buf, size_t bufLen) {
   e0604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e0608:	460e      	mov	r6, r1
   e060a:	b085      	sub	sp, #20
	waitForWriteComplete();
   e060c:	2100      	movs	r1, #0
void SpiFlash::writeData(size_t addr, const void *buf, size_t bufLen) {
   e060e:	4604      	mov	r4, r0
   e0610:	4690      	mov	r8, r2
   e0612:	461f      	mov	r7, r3
	waitForWriteComplete();
   e0614:	f7ff ff56 	bl	e04c4 <_ZN8SpiFlash20waitForWriteCompleteEm>
		spi.transfer(txBuf, NULL, getInstWithAddrSize(), NULL);
   e0618:	f04f 0900 	mov.w	r9, #0
	while(bufLen > 0) {
   e061c:	b3af      	cbz	r7, e068a <_ZN8SpiFlash9writeDataEjPKvj+0x86>
		size_t pageOffset = addr % pageSize;
   e061e:	6865      	ldr	r5, [r4, #4]
   e0620:	fbb6 f3f5 	udiv	r3, r6, r5
   e0624:	fb05 6313 	mls	r3, r5, r3, r6
		size_t count = (pageStart + pageSize) - addr;
   e0628:	1aed      	subs	r5, r5, r3
		if (count > bufLen) {
   e062a:	42bd      	cmp	r5, r7
		setInstWithAddr(0x02, addr, txBuf); // PAGE_PROG
   e062c:	4632      	mov	r2, r6
   e062e:	ab02      	add	r3, sp, #8
   e0630:	f04f 0102 	mov.w	r1, #2
   e0634:	4620      	mov	r0, r4
   e0636:	bf28      	it	cs
   e0638:	463d      	movcs	r5, r7
   e063a:	f7ff ff5c 	bl	e04f6 <_ZN8SpiFlash15setInstWithAddrEhjPh>
		writeEnable();
   e063e:	4620      	mov	r0, r4
   e0640:	f7ff ffc9 	bl	e05d6 <_ZN8SpiFlash11writeEnableEv>
		beginTransaction();
   e0644:	4620      	mov	r0, r4
   e0646:	f7ff fe65 	bl	e0314 <_ZN8SpiFlash16beginTransactionEv>
	return addr4byte ? 5 : 4;	
   e064a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
		spi.transfer(txBuf, NULL, getInstWithAddrSize(), NULL);
   e064e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   e0650:	f8cd 9000 	str.w	r9, [sp]
	return addr4byte ? 5 : 4;	
   e0654:	2b00      	cmp	r3, #0
		spi.transfer(txBuf, NULL, getInstWithAddrSize(), NULL);
   e0656:	bf14      	ite	ne
   e0658:	2305      	movne	r3, #5
   e065a:	2304      	moveq	r3, #4
   e065c:	2200      	movs	r2, #0
   e065e:	a902      	add	r1, sp, #8
   e0660:	f003 fa18 	bl	e3a94 <_ZN8SPIClass8transferEPvS0_jPFvvE>
		spi.transfer(curBuf, NULL, count, NULL);
   e0664:	4641      	mov	r1, r8
   e0666:	462b      	mov	r3, r5
   e0668:	2200      	movs	r2, #0
   e066a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   e066c:	f8cd 9000 	str.w	r9, [sp]
   e0670:	f003 fa10 	bl	e3a94 <_ZN8SPIClass8transferEPvS0_jPFvvE>
		endTransaction();
   e0674:	4620      	mov	r0, r4
   e0676:	f7ff fea3 	bl	e03c0 <_ZN8SpiFlash14endTransactionEv>
		waitForWriteComplete(pageProgramTimeoutMs);
   e067a:	69a1      	ldr	r1, [r4, #24]
   e067c:	4620      	mov	r0, r4
   e067e:	f7ff ff21 	bl	e04c4 <_ZN8SpiFlash20waitForWriteCompleteEm>
		addr += count;
   e0682:	442e      	add	r6, r5
		curBuf += count;
   e0684:	44a8      	add	r8, r5
		bufLen -= count;
   e0686:	1b7f      	subs	r7, r7, r5
	while(bufLen > 0) {
   e0688:	e7c8      	b.n	e061c <_ZN8SpiFlash9writeDataEjPKvj+0x18>
}
   e068a:	b005      	add	sp, #20
   e068c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e0690 <_ZN8SpiFlash11sectorEraseEj>:
void SpiFlash::sectorErase(size_t addr) {
   e0690:	b510      	push	{r4, lr}
   e0692:	b086      	sub	sp, #24
   e0694:	4604      	mov	r4, r0
   e0696:	9103      	str	r1, [sp, #12]
	waitForWriteComplete();
   e0698:	2100      	movs	r1, #0
   e069a:	f7ff ff13 	bl	e04c4 <_ZN8SpiFlash20waitForWriteCompleteEm>
	setInstWithAddr(0x20, addr, txBuf); // SECTOR_ER
   e069e:	9a03      	ldr	r2, [sp, #12]
   e06a0:	ab04      	add	r3, sp, #16
   e06a2:	2120      	movs	r1, #32
   e06a4:	4620      	mov	r0, r4
   e06a6:	f7ff ff26 	bl	e04f6 <_ZN8SpiFlash15setInstWithAddrEhjPh>
	writeEnable();
   e06aa:	4620      	mov	r0, r4
   e06ac:	f7ff ff93 	bl	e05d6 <_ZN8SpiFlash11writeEnableEv>
	beginTransaction();
   e06b0:	4620      	mov	r0, r4
   e06b2:	f7ff fe2f 	bl	e0314 <_ZN8SpiFlash16beginTransactionEv>
	return addr4byte ? 5 : 4;	
   e06b6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
	spi.transfer(txBuf, NULL, getInstWithAddrSize(), NULL);
   e06ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return addr4byte ? 5 : 4;	
   e06bc:	2b00      	cmp	r3, #0
	spi.transfer(txBuf, NULL, getInstWithAddrSize(), NULL);
   e06be:	f04f 0200 	mov.w	r2, #0
   e06c2:	9200      	str	r2, [sp, #0]
   e06c4:	bf14      	ite	ne
   e06c6:	2305      	movne	r3, #5
   e06c8:	2304      	moveq	r3, #4
   e06ca:	a904      	add	r1, sp, #16
   e06cc:	f003 f9e2 	bl	e3a94 <_ZN8SPIClass8transferEPvS0_jPFvvE>
	endTransaction();
   e06d0:	4620      	mov	r0, r4
   e06d2:	f7ff fe75 	bl	e03c0 <_ZN8SpiFlash14endTransactionEv>
	waitForWriteComplete(sectorEraseTimeoutMs);
   e06d6:	6961      	ldr	r1, [r4, #20]
   e06d8:	4620      	mov	r0, r4
   e06da:	f7ff fef3 	bl	e04c4 <_ZN8SpiFlash20waitForWriteCompleteEm>
}
   e06de:	b006      	add	sp, #24
   e06e0:	bd10      	pop	{r4, pc}

000e06e2 <_ZN8SpiFlash9chipEraseEv>:
void SpiFlash::chipErase() {
   e06e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   e06e4:	4604      	mov	r4, r0
	waitForWriteComplete();
   e06e6:	2100      	movs	r1, #0
   e06e8:	f7ff feec 	bl	e04c4 <_ZN8SpiFlash20waitForWriteCompleteEm>
	txBuf[0] = 0xC7; // CHIP_ER
   e06ec:	23c7      	movs	r3, #199	; 0xc7
	writeEnable();
   e06ee:	4620      	mov	r0, r4
	txBuf[0] = 0xC7; // CHIP_ER
   e06f0:	f88d 300c 	strb.w	r3, [sp, #12]
	writeEnable();
   e06f4:	f7ff ff6f 	bl	e05d6 <_ZN8SpiFlash11writeEnableEv>
	beginTransaction();
   e06f8:	4620      	mov	r0, r4
   e06fa:	f7ff fe0b 	bl	e0314 <_ZN8SpiFlash16beginTransactionEv>
	spi.transfer(txBuf, NULL, sizeof(txBuf), NULL);
   e06fe:	2200      	movs	r2, #0
   e0700:	9200      	str	r2, [sp, #0]
   e0702:	2301      	movs	r3, #1
   e0704:	a903      	add	r1, sp, #12
   e0706:	6a60      	ldr	r0, [r4, #36]	; 0x24
   e0708:	f003 f9c4 	bl	e3a94 <_ZN8SPIClass8transferEPvS0_jPFvvE>
	endTransaction();
   e070c:	4620      	mov	r0, r4
   e070e:	f7ff fe57 	bl	e03c0 <_ZN8SpiFlash14endTransactionEv>
	waitForWriteComplete(chipEraseTimeoutMs);
   e0712:	69e1      	ldr	r1, [r4, #28]
   e0714:	4620      	mov	r0, r4
   e0716:	f7ff fed5 	bl	e04c4 <_ZN8SpiFlash20waitForWriteCompleteEm>
}
   e071a:	b004      	add	sp, #16
   e071c:	bd10      	pop	{r4, pc}

000e071e <_ZN14SpiffsParticleD1Ev>:

}

SpiffsParticle::~SpiffsParticle() {

}
   e071e:	4770      	bx	lr

000e0720 <_ZN14SpiffsParticleD0Ev>:
SpiffsParticle::~SpiffsParticle() {
   e0720:	b510      	push	{r4, lr}
}
   e0722:	21cc      	movs	r1, #204	; 0xcc
SpiffsParticle::~SpiffsParticle() {
   e0724:	4604      	mov	r4, r0
}
   e0726:	f004 f8ae 	bl	e4886 <_ZdlPvj>
   e072a:	4620      	mov	r0, r4
   e072c:	bd10      	pop	{r4, pc}
	...

000e0730 <_ZN14SpiffsParticleC1ER12SpiFlashBase>:
SpiffsParticle::SpiffsParticle(SpiFlashBase &flash) : flash(flash) {
   e0730:	b510      	push	{r4, lr}
	config.hal_read_f = readCallbackStatic;
   e0732:	4c11      	ldr	r4, [pc, #68]	; (e0778 <_ZN14SpiffsParticleC1ER12SpiFlashBase+0x48>)
SpiffsParticle::SpiffsParticle(SpiFlashBase &flash) : flash(flash) {
   e0734:	4a11      	ldr	r2, [pc, #68]	; (e077c <_ZN14SpiffsParticleC1ER12SpiFlashBase+0x4c>)
	config.hal_read_f = readCallbackStatic;
   e0736:	6084      	str	r4, [r0, #8]
	config.hal_write_f = writeCallbackStatic;
   e0738:	4c11      	ldr	r4, [pc, #68]	; (e0780 <_ZN14SpiffsParticleC1ER12SpiFlashBase+0x50>)
   e073a:	60c4      	str	r4, [r0, #12]
	config.hal_erase_f = eraseCallbackStatic;
   e073c:	4c11      	ldr	r4, [pc, #68]	; (e0784 <_ZN14SpiffsParticleC1ER12SpiFlashBase+0x54>)
   e073e:	6104      	str	r4, [r0, #16]
SpiffsParticle::SpiffsParticle(SpiFlashBase &flash) : flash(flash) {
   e0740:	e9c0 2100 	strd	r2, r1, [r0]
	config.phys_erase_block = flash.getSectorSize();
   e0744:	688c      	ldr	r4, [r1, #8]
	config.log_page_size = flash.getPageSize();
   e0746:	6849      	ldr	r1, [r1, #4]
   e0748:	6241      	str	r1, [r0, #36]	; 0x24
SpiffsParticle::SpiffsParticle(SpiFlashBase &flash) : flash(flash) {
   e074a:	2204      	movs	r2, #4
   e074c:	e9c0 222a 	strd	r2, r2, [r0, #168]	; 0xa8
	config.phys_size = 1024 * 1024; // Just a guess, override for other chips
   e0750:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
SpiffsParticle::SpiffsParticle(SpiFlashBase &flash) : flash(flash) {
   e0754:	2200      	movs	r2, #0
   e0756:	e9c0 222c 	strd	r2, r2, [r0, #176]	; 0xb0
   e075a:	e9c0 222e 	strd	r2, r2, [r0, #184]	; 0xb8
	config.phys_addr = 0;
   e075e:	e9c0 1205 	strd	r1, r2, [r0, #20]
SpiffsParticle::SpiffsParticle(SpiFlashBase &flash) : flash(flash) {
   e0762:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
   e0766:	f880 20c4 	strb.w	r2, [r0, #196]	; 0xc4
   e076a:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
	config.phys_erase_block = flash.getSectorSize();
   e076e:	61c4      	str	r4, [r0, #28]
	config.log_block_size = flash.getSectorSize();
   e0770:	6204      	str	r4, [r0, #32]
	fs.user_data = this;
   e0772:	f8c0 00a0 	str.w	r0, [r0, #160]	; 0xa0
}
   e0776:	bd10      	pop	{r4, pc}
   e0778:	000e08d9 	.word	0x000e08d9
   e077c:	000e8748 	.word	0x000e8748
   e0780:	000e093d 	.word	0x000e093d
   e0784:	000e0991 	.word	0x000e0991

000e0788 <_ZN14SpiffsParticle5mountEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE>:

s32_t SpiffsParticle::mount(spiffs_check_callback callback) {
   e0788:	b530      	push	{r4, r5, lr}
	if (workBuffer == 0) {
   e078a:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
s32_t SpiffsParticle::mount(spiffs_check_callback callback) {
   e078e:	b085      	sub	sp, #20
   e0790:	4604      	mov	r4, r0
   e0792:	460d      	mov	r5, r1
	if (workBuffer == 0) {
   e0794:	b39b      	cbz	r3, e07fe <_ZN14SpiffsParticle5mountEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x76>
		workBuffer = static_cast<u8_t *>(malloc(2 * config.log_page_size));
		if (workBuffer == 0) {
			return SPIFFS_ERR_OUT_OF_MEMORY;
		}
	}
	if (fdBuffer == 0) {
   e0796:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   e079a:	b94b      	cbnz	r3, e07b0 <_ZN14SpiffsParticle5mountEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x28>
		fdBufferSize = 32 * maxOpenFiles;
   e079c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   e07a0:	0140      	lsls	r0, r0, #5
   e07a2:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		fdBuffer = static_cast<u8_t *>(malloc(fdBufferSize));
   e07a6:	f000 fdcb 	bl	e1340 <malloc>
   e07aa:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (fdBuffer == 0) {
   e07ae:	b370      	cbz	r0, e080e <_ZN14SpiffsParticle5mountEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x86>
			return SPIFFS_ERR_OUT_OF_MEMORY;
		}
	}
	if (cacheBuffer == 0) {
   e07b0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   e07b4:	b96b      	cbnz	r3, e07d2 <_ZN14SpiffsParticle5mountEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x4a>
		cacheBufferSize = (config.log_page_size + 32) * cachePages + 40;
   e07b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   e07b8:	f100 0320 	add.w	r3, r0, #32
   e07bc:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   e07c0:	4358      	muls	r0, r3
   e07c2:	3028      	adds	r0, #40	; 0x28
   e07c4:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		cacheBuffer = static_cast<u8_t *>(malloc(cacheBufferSize));
   e07c8:	f000 fdba 	bl	e1340 <malloc>
   e07cc:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (cacheBuffer == 0) {
   e07d0:	b1e8      	cbz	r0, e080e <_ZN14SpiffsParticle5mountEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x86>
			return SPIFFS_ERR_OUT_OF_MEMORY;
		}
	}
	userCheckCallback = callback; // may be null

	return SPIFFS_mount(&fs, &config, workBuffer, fdBuffer, fdBufferSize, cacheBuffer, cacheBufferSize, checkCallbackStatic);
   e07d2:	4b10      	ldr	r3, [pc, #64]	; (e0814 <_ZN14SpiffsParticle5mountEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x8c>)
   e07d4:	9303      	str	r3, [sp, #12]
   e07d6:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   e07da:	9302      	str	r3, [sp, #8]
   e07dc:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   e07e0:	9301      	str	r3, [sp, #4]
   e07e2:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   e07e6:	9300      	str	r3, [sp, #0]
	userCheckCallback = callback; // may be null
   e07e8:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
	return SPIFFS_mount(&fs, &config, workBuffer, fdBuffer, fdBufferSize, cacheBuffer, cacheBufferSize, checkCallbackStatic);
   e07ec:	e9d4 232c 	ldrd	r2, r3, [r4, #176]	; 0xb0
   e07f0:	f104 0108 	add.w	r1, r4, #8
   e07f4:	f104 0028 	add.w	r0, r4, #40	; 0x28
   e07f8:	f7f4 fdf4 	bl	d53e4 <SPIFFS_mount>
   e07fc:	e008      	b.n	e0810 <_ZN14SpiffsParticle5mountEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x88>
		workBuffer = static_cast<u8_t *>(malloc(2 * config.log_page_size));
   e07fe:	6a40      	ldr	r0, [r0, #36]	; 0x24
   e0800:	0040      	lsls	r0, r0, #1
   e0802:	f000 fd9d 	bl	e1340 <malloc>
   e0806:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
		if (workBuffer == 0) {
   e080a:	2800      	cmp	r0, #0
   e080c:	d1c3      	bne.n	e0796 <_ZN14SpiffsParticle5mountEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0xe>
			return SPIFFS_ERR_OUT_OF_MEMORY;
   e080e:	4802      	ldr	r0, [pc, #8]	; (e0818 <_ZN14SpiffsParticle5mountEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x90>)
}
   e0810:	b005      	add	sp, #20
   e0812:	bd30      	pop	{r4, r5, pc}
   e0814:	000e09c1 	.word	0x000e09c1
   e0818:	ffffd8b4 	.word	0xffffd8b4

000e081c <_ZN14SpiffsParticle25mountAndFormatIfNecessaryEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE>:

	free(cacheBuffer);
	cacheBuffer = 0;
}

s32_t SpiffsParticle::mountAndFormatIfNecessary(spiffs_check_callback callback) {
   e081c:	b538      	push	{r3, r4, r5, lr}
	s32_t res = mount(NULL);
   e081e:	2100      	movs	r1, #0
s32_t SpiffsParticle::mountAndFormatIfNecessary(spiffs_check_callback callback) {
   e0820:	4605      	mov	r5, r0
	s32_t res = mount(NULL);
   e0822:	f7ff ffb1 	bl	e0788 <_ZN14SpiffsParticle5mountEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE>
	log.info("mount res=%ld", res);
   e0826:	4910      	ldr	r1, [pc, #64]	; (e0868 <_ZN14SpiffsParticle25mountAndFormatIfNecessaryEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x4c>)
	s32_t res = mount(NULL);
   e0828:	4604      	mov	r4, r0
	log.info("mount res=%ld", res);
   e082a:	4602      	mov	r2, r0
   e082c:	480f      	ldr	r0, [pc, #60]	; (e086c <_ZN14SpiffsParticle25mountAndFormatIfNecessaryEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x50>)
   e082e:	f7f9 f943 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>

	if (res == SPIFFS_ERR_NOT_A_FS) {
   e0832:	4b0f      	ldr	r3, [pc, #60]	; (e0870 <_ZN14SpiffsParticle25mountAndFormatIfNecessaryEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x54>)
   e0834:	429c      	cmp	r4, r3
   e0836:	d114      	bne.n	e0862 <_ZN14SpiffsParticle25mountAndFormatIfNecessaryEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x46>
	inline s32_t format() { return SPIFFS_format(&fs); };
   e0838:	f105 0028 	add.w	r0, r5, #40	; 0x28
   e083c:	f7f4 fda0 	bl	d5380 <SPIFFS_format>
		res = format();
		log.info("format res=%ld", res);
   e0840:	490c      	ldr	r1, [pc, #48]	; (e0874 <_ZN14SpiffsParticle25mountAndFormatIfNecessaryEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x58>)
   e0842:	4604      	mov	r4, r0
   e0844:	4602      	mov	r2, r0
   e0846:	4809      	ldr	r0, [pc, #36]	; (e086c <_ZN14SpiffsParticle25mountAndFormatIfNecessaryEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x50>)
   e0848:	f7f9 f936 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>

		if (res == SPIFFS_OK) {
   e084c:	b94c      	cbnz	r4, e0862 <_ZN14SpiffsParticle25mountAndFormatIfNecessaryEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x46>
			res = mount(NULL);
   e084e:	4621      	mov	r1, r4
   e0850:	4628      	mov	r0, r5
   e0852:	f7ff ff99 	bl	e0788 <_ZN14SpiffsParticle5mountEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE>
			log.info("mount after format res=%ld", res);
   e0856:	4908      	ldr	r1, [pc, #32]	; (e0878 <_ZN14SpiffsParticle25mountAndFormatIfNecessaryEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x5c>)
			res = mount(NULL);
   e0858:	4604      	mov	r4, r0
			log.info("mount after format res=%ld", res);
   e085a:	4602      	mov	r2, r0
   e085c:	4803      	ldr	r0, [pc, #12]	; (e086c <_ZN14SpiffsParticle25mountAndFormatIfNecessaryEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x50>)
   e085e:	f7f9 f92b 	bl	d9ab8 <_ZNK5spark6Logger4infoEPKcz>
		}
	}
	return res;
}
   e0862:	4620      	mov	r0, r4
   e0864:	bd38      	pop	{r3, r4, r5, pc}
   e0866:	bf00      	nop
   e0868:	000e8674 	.word	0x000e8674
   e086c:	2003e5d0 	.word	0x2003e5d0
   e0870:	ffffd8d7 	.word	0xffffd8d7
   e0874:	000e868e 	.word	0x000e868e
   e0878:	000e8682 	.word	0x000e8682

000e087c <_ZN14SpiffsParticle12readCallbackEmmPh>:

	return SPIFFS_OK;
}


s32_t SpiffsParticle::readCallback(u32_t addr, u32_t size, u8_t *dst) {
   e087c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   e0880:	4607      	mov	r7, r0
	flash.readData(addr, dst, size);
   e0882:	6840      	ldr	r0, [r0, #4]
s32_t SpiffsParticle::readCallback(u32_t addr, u32_t size, u8_t *dst) {
   e0884:	461d      	mov	r5, r3
	flash.readData(addr, dst, size);
   e0886:	6803      	ldr	r3, [r0, #0]
s32_t SpiffsParticle::readCallback(u32_t addr, u32_t size, u8_t *dst) {
   e0888:	4614      	mov	r4, r2
	flash.readData(addr, dst, size);
   e088a:	f8d3 8014 	ldr.w	r8, [r3, #20]
   e088e:	4613      	mov	r3, r2
   e0890:	462a      	mov	r2, r5
s32_t SpiffsParticle::readCallback(u32_t addr, u32_t size, u8_t *dst) {
   e0892:	460e      	mov	r6, r1
	flash.readData(addr, dst, size);
   e0894:	47c0      	blx	r8

	if (lowLevelDebug) {
   e0896:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
   e089a:	b15b      	cbz	r3, e08b4 <_ZN14SpiffsParticle12readCallbackEmmPh+0x38>
		if (size == 2) {
   e089c:	2c02      	cmp	r4, #2
   e089e:	d10d      	bne.n	e08bc <_ZN14SpiffsParticle12readCallbackEmmPh+0x40>
			log.trace("read addr=0x%lx size=%lu data=%02x%02x", addr, size, dst[0], dst[1]);
   e08a0:	786b      	ldrb	r3, [r5, #1]
   e08a2:	9301      	str	r3, [sp, #4]
   e08a4:	782b      	ldrb	r3, [r5, #0]
   e08a6:	9300      	str	r3, [sp, #0]
   e08a8:	4908      	ldr	r1, [pc, #32]	; (e08cc <_ZN14SpiffsParticle12readCallbackEmmPh+0x50>)
   e08aa:	4809      	ldr	r0, [pc, #36]	; (e08d0 <_ZN14SpiffsParticle12readCallbackEmmPh+0x54>)
   e08ac:	4623      	mov	r3, r4
   e08ae:	4632      	mov	r2, r6
   e08b0:	f7fa fe50 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>
			log.trace("read addr=0x%lx size=%lu", addr, size);
		}
	}

	return SPIFFS_OK;
}
   e08b4:	2000      	movs	r0, #0
   e08b6:	b002      	add	sp, #8
   e08b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			log.trace("read addr=0x%lx size=%lu", addr, size);
   e08bc:	4905      	ldr	r1, [pc, #20]	; (e08d4 <_ZN14SpiffsParticle12readCallbackEmmPh+0x58>)
   e08be:	4804      	ldr	r0, [pc, #16]	; (e08d0 <_ZN14SpiffsParticle12readCallbackEmmPh+0x54>)
   e08c0:	4623      	mov	r3, r4
   e08c2:	4632      	mov	r2, r6
   e08c4:	f7fa fe46 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>
   e08c8:	e7f4      	b.n	e08b4 <_ZN14SpiffsParticle12readCallbackEmmPh+0x38>
   e08ca:	bf00      	nop
   e08cc:	000e869d 	.word	0x000e869d
   e08d0:	2003e5d0 	.word	0x2003e5d0
   e08d4:	000e86c4 	.word	0x000e86c4

000e08d8 <_ZN14SpiffsParticle18readCallbackStaticEP8spiffs_tmmPh>:


// [static]
s32_t SpiffsParticle::readCallbackStatic(struct spiffs_t *fs, u32_t addr, u32_t size, u8_t *dst) {
	SpiffsParticle *This = static_cast<SpiffsParticle *>(fs->user_data);
	return This->readCallback(addr, size, dst);
   e08d8:	6f80      	ldr	r0, [r0, #120]	; 0x78
   e08da:	f7ff bfcf 	b.w	e087c <_ZN14SpiffsParticle12readCallbackEmmPh>
	...

000e08e0 <_ZN14SpiffsParticle13writeCallbackEmmPh>:
s32_t SpiffsParticle::writeCallback(u32_t addr, u32_t size, u8_t *src) {
   e08e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   e08e4:	4607      	mov	r7, r0
	flash.writeData(addr, src, size);
   e08e6:	6840      	ldr	r0, [r0, #4]
s32_t SpiffsParticle::writeCallback(u32_t addr, u32_t size, u8_t *src) {
   e08e8:	461d      	mov	r5, r3
	flash.writeData(addr, src, size);
   e08ea:	6803      	ldr	r3, [r0, #0]
s32_t SpiffsParticle::writeCallback(u32_t addr, u32_t size, u8_t *src) {
   e08ec:	4614      	mov	r4, r2
	flash.writeData(addr, src, size);
   e08ee:	f8d3 8018 	ldr.w	r8, [r3, #24]
   e08f2:	4613      	mov	r3, r2
   e08f4:	462a      	mov	r2, r5
s32_t SpiffsParticle::writeCallback(u32_t addr, u32_t size, u8_t *src) {
   e08f6:	460e      	mov	r6, r1
	flash.writeData(addr, src, size);
   e08f8:	47c0      	blx	r8
	if (lowLevelDebug) {
   e08fa:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
   e08fe:	b15b      	cbz	r3, e0918 <_ZN14SpiffsParticle13writeCallbackEmmPh+0x38>
		if (size == 2) {
   e0900:	2c02      	cmp	r4, #2
   e0902:	d10d      	bne.n	e0920 <_ZN14SpiffsParticle13writeCallbackEmmPh+0x40>
			log.trace("write addr=0x%lx size=%lu data=%02x%02x", addr, size, src[0], src[1]);
   e0904:	786b      	ldrb	r3, [r5, #1]
   e0906:	9301      	str	r3, [sp, #4]
   e0908:	782b      	ldrb	r3, [r5, #0]
   e090a:	9300      	str	r3, [sp, #0]
   e090c:	4908      	ldr	r1, [pc, #32]	; (e0930 <_ZN14SpiffsParticle13writeCallbackEmmPh+0x50>)
   e090e:	4809      	ldr	r0, [pc, #36]	; (e0934 <_ZN14SpiffsParticle13writeCallbackEmmPh+0x54>)
   e0910:	4623      	mov	r3, r4
   e0912:	4632      	mov	r2, r6
   e0914:	f7fa fe1e 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>
}
   e0918:	2000      	movs	r0, #0
   e091a:	b002      	add	sp, #8
   e091c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			log.trace("write addr=0x%lx size=%lu", addr, size);
   e0920:	4905      	ldr	r1, [pc, #20]	; (e0938 <_ZN14SpiffsParticle13writeCallbackEmmPh+0x58>)
   e0922:	4804      	ldr	r0, [pc, #16]	; (e0934 <_ZN14SpiffsParticle13writeCallbackEmmPh+0x54>)
   e0924:	4623      	mov	r3, r4
   e0926:	4632      	mov	r2, r6
   e0928:	f7fa fe14 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>
   e092c:	e7f4      	b.n	e0918 <_ZN14SpiffsParticle13writeCallbackEmmPh+0x38>
   e092e:	bf00      	nop
   e0930:	000e86dd 	.word	0x000e86dd
   e0934:	2003e5d0 	.word	0x2003e5d0
   e0938:	000e8705 	.word	0x000e8705

000e093c <_ZN14SpiffsParticle19writeCallbackStaticEP8spiffs_tmmPh>:
}

// [static]
s32_t SpiffsParticle::writeCallbackStatic(struct spiffs_t *fs, u32_t addr, u32_t size, u8_t *src) {
	SpiffsParticle *This = static_cast<SpiffsParticle *>(fs->user_data);
	return This->writeCallback(addr, size, src);
   e093c:	6f80      	ldr	r0, [r0, #120]	; 0x78
   e093e:	f7ff bfcf 	b.w	e08e0 <_ZN14SpiffsParticle13writeCallbackEmmPh>
	...

000e0944 <_ZN14SpiffsParticle13eraseCallbackEmm>:
s32_t SpiffsParticle::eraseCallback(u32_t addr, u32_t size) {
   e0944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	size_t sectorSize = flash.getSectorSize();
   e0948:	6843      	ldr	r3, [r0, #4]
			log.trace("erase sector addr=0x%lx size=%lu", addr, sectorSize);
   e094a:	f8df 803c 	ldr.w	r8, [pc, #60]	; e0988 <_ZN14SpiffsParticle13eraseCallbackEmm+0x44>
	size_t sectorSize = flash.getSectorSize();
   e094e:	689f      	ldr	r7, [r3, #8]
			log.trace("erase sector addr=0x%lx size=%lu", addr, sectorSize);
   e0950:	f8df 9038 	ldr.w	r9, [pc, #56]	; e098c <_ZN14SpiffsParticle13eraseCallbackEmm+0x48>
s32_t SpiffsParticle::eraseCallback(u32_t addr, u32_t size) {
   e0954:	4606      	mov	r6, r0
   e0956:	460c      	mov	r4, r1
   e0958:	4615      	mov	r5, r2
	while(size >= sectorSize) {
   e095a:	42bd      	cmp	r5, r7
   e095c:	d310      	bcc.n	e0980 <_ZN14SpiffsParticle13eraseCallbackEmm+0x3c>
		if (lowLevelDebug) {
   e095e:	f896 30c4 	ldrb.w	r3, [r6, #196]	; 0xc4
   e0962:	b12b      	cbz	r3, e0970 <_ZN14SpiffsParticle13eraseCallbackEmm+0x2c>
			log.trace("erase sector addr=0x%lx size=%lu", addr, sectorSize);
   e0964:	463b      	mov	r3, r7
   e0966:	4622      	mov	r2, r4
   e0968:	4641      	mov	r1, r8
   e096a:	4648      	mov	r0, r9
   e096c:	f7fa fdf2 	bl	db554 <_ZNK5spark6Logger5traceEPKcz>
		flash.sectorErase(addr);
   e0970:	6870      	ldr	r0, [r6, #4]
   e0972:	6803      	ldr	r3, [r0, #0]
   e0974:	4621      	mov	r1, r4
   e0976:	69db      	ldr	r3, [r3, #28]
   e0978:	4798      	blx	r3
		addr += sectorSize;
   e097a:	443c      	add	r4, r7
		size -= sectorSize;
   e097c:	1bed      	subs	r5, r5, r7
	while(size >= sectorSize) {
   e097e:	e7ec      	b.n	e095a <_ZN14SpiffsParticle13eraseCallbackEmm+0x16>
}
   e0980:	2000      	movs	r0, #0
   e0982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e0986:	bf00      	nop
   e0988:	000e871f 	.word	0x000e871f
   e098c:	2003e5d0 	.word	0x2003e5d0

000e0990 <_ZN14SpiffsParticle19eraseCallbackStaticEP8spiffs_tmm>:
}

// [static]
s32_t SpiffsParticle::eraseCallbackStatic(struct spiffs_t *fs, u32_t addr, u32_t size) {
	SpiffsParticle *This = static_cast<SpiffsParticle *>(fs->user_data);
	return This->eraseCallback(addr, size);
   e0990:	6f80      	ldr	r0, [r0, #120]	; 0x78
   e0992:	f7ff bfd7 	b.w	e0944 <_ZN14SpiffsParticle13eraseCallbackEmm>
	...

000e0998 <_ZN14SpiffsParticle13checkCallbackE17spiffs_check_type19spiffs_check_reportmm>:
void SpiffsParticle::checkCallback(spiffs_check_type type, spiffs_check_report report, u32_t arg1, u32_t arg2) {
   e0998:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (userCheckCallback) {
   e099a:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
void SpiffsParticle::checkCallback(spiffs_check_type type, spiffs_check_report report, u32_t arg1, u32_t arg2) {
   e099e:	9d06      	ldr	r5, [sp, #24]
	if (userCheckCallback) {
   e09a0:	b114      	cbz	r4, e09a8 <_ZN14SpiffsParticle13checkCallbackE17spiffs_check_type19spiffs_check_reportmm+0x10>
		userCheckCallback(&fs, type, report, arg1, arg2);
   e09a2:	9500      	str	r5, [sp, #0]
   e09a4:	3028      	adds	r0, #40	; 0x28
   e09a6:	47a0      	blx	r4
		return HAL_Timer_Get_Milli_Seconds();
   e09a8:	f000 f9bc 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   e09ac:	4b03      	ldr	r3, [pc, #12]	; (e09bc <_ZN14SpiffsParticle13checkCallbackE17spiffs_check_type19spiffs_check_reportmm+0x24>)
   e09ae:	6018      	str	r0, [r3, #0]
}
   e09b0:	b003      	add	sp, #12
   e09b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    		spark_process();
   e09b6:	f000 bc2b 	b.w	e1210 <spark_process>
   e09ba:	bf00      	nop
   e09bc:	2003e7b4 	.word	0x2003e7b4

000e09c0 <_ZN14SpiffsParticle19checkCallbackStaticEP8spiffs_t17spiffs_check_type19spiffs_check_reportmm>:
}

// [static]
void SpiffsParticle::checkCallbackStatic(struct spiffs_t *fs, spiffs_check_type type, spiffs_check_report report, u32_t arg1, u32_t arg2) {
	SpiffsParticle *This = static_cast<SpiffsParticle *>(fs->user_data);
	This->checkCallback(type, report, arg1, arg2);
   e09c0:	6f80      	ldr	r0, [r0, #120]	; 0x78
   e09c2:	f7ff bfe9 	b.w	e0998 <_ZN14SpiffsParticle13checkCallbackE17spiffs_check_type19spiffs_check_reportmm>
	...

000e09c8 <spiffsParticleInfoLog>:
}


extern "C"
void spiffsParticleInfoLog(const char *fmt, ...) {
   e09c8:	b40f      	push	{r0, r1, r2, r3}
   e09ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return log_enabled(level, name_, nullptr);
   e09cc:	4b0a      	ldr	r3, [pc, #40]	; (e09f8 <spiffsParticleInfoLog+0x30>)
   e09ce:	2200      	movs	r2, #0
   e09d0:	6819      	ldr	r1, [r3, #0]
   e09d2:	201e      	movs	r0, #30
   e09d4:	f000 fb8e 	bl	e10f4 <log_enabled>
	if (log.isInfoEnabled()) {
   e09d8:	b140      	cbz	r0, e09ec <spiffsParticleInfoLog+0x24>
		va_list args;
		va_start(args, fmt);
   e09da:	ab07      	add	r3, sp, #28
   e09dc:	9303      	str	r3, [sp, #12]
		log_printf_v(LOG_LEVEL_INFO, "app.spiffs", nullptr, fmt, args);
   e09de:	9300      	str	r3, [sp, #0]
   e09e0:	4906      	ldr	r1, [pc, #24]	; (e09fc <spiffsParticleInfoLog+0x34>)
   e09e2:	9b06      	ldr	r3, [sp, #24]
   e09e4:	2200      	movs	r2, #0
   e09e6:	201e      	movs	r0, #30
   e09e8:	f000 fb7c 	bl	e10e4 <log_printf_v>
		va_end(args);
	}
}
   e09ec:	b005      	add	sp, #20
   e09ee:	f85d eb04 	ldr.w	lr, [sp], #4
   e09f2:	b004      	add	sp, #16
   e09f4:	4770      	bx	lr
   e09f6:	bf00      	nop
   e09f8:	2003e5d0 	.word	0x2003e5d0
   e09fc:	000e7993 	.word	0x000e7993

000e0a00 <spiffsParticleTraceLog>:

extern "C"
void spiffsParticleTraceLog(const char *fmt, ...) {
   e0a00:	b40f      	push	{r0, r1, r2, r3}
   e0a02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   e0a04:	4b0a      	ldr	r3, [pc, #40]	; (e0a30 <spiffsParticleTraceLog+0x30>)
   e0a06:	2200      	movs	r2, #0
   e0a08:	6819      	ldr	r1, [r3, #0]
   e0a0a:	2001      	movs	r0, #1
   e0a0c:	f000 fb72 	bl	e10f4 <log_enabled>
	if (log.isTraceEnabled()) {
   e0a10:	b140      	cbz	r0, e0a24 <spiffsParticleTraceLog+0x24>
		va_list args;
		va_start(args, fmt);
   e0a12:	ab07      	add	r3, sp, #28
   e0a14:	9303      	str	r3, [sp, #12]
		log_printf_v(LOG_LEVEL_TRACE, "app.spiffs", nullptr, fmt, args);
   e0a16:	9300      	str	r3, [sp, #0]
   e0a18:	4906      	ldr	r1, [pc, #24]	; (e0a34 <spiffsParticleTraceLog+0x34>)
   e0a1a:	9b06      	ldr	r3, [sp, #24]
   e0a1c:	2200      	movs	r2, #0
   e0a1e:	2001      	movs	r0, #1
   e0a20:	f000 fb60 	bl	e10e4 <log_printf_v>
		va_end(args);
	}
}
   e0a24:	b005      	add	sp, #20
   e0a26:	f85d eb04 	ldr.w	lr, [sp], #4
   e0a2a:	b004      	add	sp, #16
   e0a2c:	4770      	bx	lr
   e0a2e:	bf00      	nop
   e0a30:	2003e5d0 	.word	0x2003e5d0
   e0a34:	000e7993 	.word	0x000e7993

000e0a38 <spiffsParticleLock>:

extern "C"
void spiffsParticleLock() {
	os_mutex_lock(_spiffsMutex);
   e0a38:	4b01      	ldr	r3, [pc, #4]	; (e0a40 <spiffsParticleLock+0x8>)
   e0a3a:	6818      	ldr	r0, [r3, #0]
   e0a3c:	f000 b92a 	b.w	e0c94 <os_mutex_lock>
   e0a40:	2003e5cc 	.word	0x2003e5cc

000e0a44 <spiffsParticleUnlock>:
}

extern "C"
void spiffsParticleUnlock() {
	os_mutex_unlock(_spiffsMutex);
   e0a44:	4b01      	ldr	r3, [pc, #4]	; (e0a4c <spiffsParticleUnlock+0x8>)
   e0a46:	6818      	ldr	r0, [r3, #0]
   e0a48:	f000 b92c 	b.w	e0ca4 <os_mutex_unlock>
   e0a4c:	2003e5cc 	.word	0x2003e5cc

000e0a50 <_GLOBAL__sub_I__ZN14SpiffsParticleC2ER12SpiFlashBase>:
	s32_t res = SPIFFS_fstat(fs, fh, &stat);
	if (res == SPIFFS_OK) {
		res = (s32_t) stat.size;
	}
	return res;
}
   e0a50:	b507      	push	{r0, r1, r2, lr}
        name_(name) {
   e0a52:	4b06      	ldr	r3, [pc, #24]	; (e0a6c <_GLOBAL__sub_I__ZN14SpiffsParticleC2ER12SpiFlashBase+0x1c>)
   e0a54:	4a06      	ldr	r2, [pc, #24]	; (e0a70 <_GLOBAL__sub_I__ZN14SpiffsParticleC2ER12SpiFlashBase+0x20>)
   e0a56:	601a      	str	r2, [r3, #0]
	os_mutex_create(&m);
   e0a58:	a801      	add	r0, sp, #4
   e0a5a:	f000 f913 	bl	e0c84 <os_mutex_create>
static os_mutex_t _spiffsMutex = []() {
   e0a5e:	9a01      	ldr	r2, [sp, #4]
   e0a60:	4b04      	ldr	r3, [pc, #16]	; (e0a74 <_GLOBAL__sub_I__ZN14SpiffsParticleC2ER12SpiFlashBase+0x24>)
   e0a62:	601a      	str	r2, [r3, #0]
}
   e0a64:	b003      	add	sp, #12
   e0a66:	f85d fb04 	ldr.w	pc, [sp], #4
   e0a6a:	bf00      	nop
   e0a6c:	2003e5d0 	.word	0x2003e5d0
   e0a70:	000e7993 	.word	0x000e7993
   e0a74:	2003e5cc 	.word	0x2003e5cc

000e0a78 <_ZN7TCA95355beginEv>:
#define REG_OUTPUT(pin_)            ((pin_) < 8) ? TCA9535_REG_OUTPUT_PORT1 : TCA9535_REG_OUTPUT_PORT2
#define REG_POLARITY(pin_)          ((pin_) < 8) ? TCA9535_REG_POLARITY_PORT1 : TCA9535_REG_POLARITY_PORT2
#define REG_CONFIG(pin_)            ((pin_) < 8) ? TCA9535_REG_CONFIG_PORT1 : TCA9535_REG_CONFIG_PORT2


bool TCA9535::begin(void) {
   e0a78:	b508      	push	{r3, lr}
    // Attempt a read of the chip to verify comms

    if (!Wire.isEnabled()) {
   e0a7a:	f003 feaf 	bl	e47dc <_Z19__fetch_global_Wirev>
   e0a7e:	f001 fa91 	bl	e1fa4 <_ZN7TwoWire9isEnabledEv>
   e0a82:	b918      	cbnz	r0, e0a8c <_ZN7TCA95355beginEv+0x14>
      Wire.begin();
   e0a84:	f003 feaa 	bl	e47dc <_Z19__fetch_global_Wirev>
   e0a88:	f001 fa34 	bl	e1ef4 <_ZN7TwoWire5beginEv>
    }

    Wire.beginTransmission(I2C_ADDRESS);
   e0a8c:	f003 fea6 	bl	e47dc <_Z19__fetch_global_Wirev>
   e0a90:	2120      	movs	r1, #32
   e0a92:	f001 fa65 	bl	e1f60 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(TCA9535_REG_INPUT_PORT1);
   e0a96:	f003 fea1 	bl	e47dc <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   e0a9a:	6803      	ldr	r3, [r0, #0]
   e0a9c:	2100      	movs	r1, #0
   e0a9e:	689b      	ldr	r3, [r3, #8]
   e0aa0:	4798      	blx	r3
    byte result = Wire.endTransmission(true);
   e0aa2:	f003 fe9b 	bl	e47dc <_Z19__fetch_global_Wirev>
   e0aa6:	2101      	movs	r1, #1
   e0aa8:	f001 fa75 	bl	e1f96 <_ZN7TwoWire15endTransmissionEh>
    if (0 != result) {
        // Failed to talk to TCA chip
        return false;
    }
    return true;
}
   e0aac:	fab0 f080 	clz	r0, r0
   e0ab0:	0940      	lsrs	r0, r0, #5
   e0ab2:	bd08      	pop	{r3, pc}

000e0ab4 <_ZN7TCA95354readEhPh>:

bool TCA9535::read(byte reg, byte * value) {
   e0ab4:	b538      	push	{r3, r4, r5, lr}
   e0ab6:	4614      	mov	r4, r2
   e0ab8:	460d      	mov	r5, r1
    Wire.beginTransmission(I2C_ADDRESS);
   e0aba:	f003 fe8f 	bl	e47dc <_Z19__fetch_global_Wirev>
   e0abe:	2120      	movs	r1, #32
   e0ac0:	f001 fa4e 	bl	e1f60 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(reg);
   e0ac4:	f003 fe8a 	bl	e47dc <_Z19__fetch_global_Wirev>
   e0ac8:	6803      	ldr	r3, [r0, #0]
   e0aca:	4629      	mov	r1, r5
   e0acc:	689b      	ldr	r3, [r3, #8]
   e0ace:	4798      	blx	r3
    if (0 != Wire.endTransmission())
   e0ad0:	f003 fe84 	bl	e47dc <_Z19__fetch_global_Wirev>
   e0ad4:	f001 fa63 	bl	e1f9e <_ZN7TwoWire15endTransmissionEv>
   e0ad8:	b968      	cbnz	r0, e0af6 <_ZN7TCA95354readEhPh+0x42>
        return false;

    Wire.requestFrom(I2C_ADDRESS, 1);
   e0ada:	f003 fe7f 	bl	e47dc <_Z19__fetch_global_Wirev>
   e0ade:	2201      	movs	r2, #1
   e0ae0:	2120      	movs	r1, #32
   e0ae2:	f001 fa36 	bl	e1f52 <_ZN7TwoWire11requestFromEhj>
    *value = Wire.read();
   e0ae6:	f003 fe79 	bl	e47dc <_Z19__fetch_global_Wirev>
   e0aea:	6803      	ldr	r3, [r0, #0]
   e0aec:	695b      	ldr	r3, [r3, #20]
   e0aee:	4798      	blx	r3
   e0af0:	7020      	strb	r0, [r4, #0]
   e0af2:	2001      	movs	r0, #1
    return true;
}
   e0af4:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   e0af6:	2000      	movs	r0, #0
   e0af8:	e7fc      	b.n	e0af4 <_ZN7TCA95354readEhPh+0x40>

000e0afa <_ZN7TCA95355writeEhh>:

bool TCA9535::write(byte reg, byte value) {
   e0afa:	b538      	push	{r3, r4, r5, lr}
   e0afc:	4614      	mov	r4, r2
   e0afe:	460d      	mov	r5, r1
    Wire.beginTransmission(I2C_ADDRESS);
   e0b00:	f003 fe6c 	bl	e47dc <_Z19__fetch_global_Wirev>
   e0b04:	2120      	movs	r1, #32
   e0b06:	f001 fa2b 	bl	e1f60 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(reg);
   e0b0a:	f003 fe67 	bl	e47dc <_Z19__fetch_global_Wirev>
   e0b0e:	6803      	ldr	r3, [r0, #0]
   e0b10:	4629      	mov	r1, r5
   e0b12:	689b      	ldr	r3, [r3, #8]
   e0b14:	4798      	blx	r3
    Wire.write(value);
   e0b16:	f003 fe61 	bl	e47dc <_Z19__fetch_global_Wirev>
   e0b1a:	6803      	ldr	r3, [r0, #0]
   e0b1c:	4621      	mov	r1, r4
   e0b1e:	689b      	ldr	r3, [r3, #8]
   e0b20:	4798      	blx	r3
    if (0 != Wire.endTransmission())
   e0b22:	f003 fe5b 	bl	e47dc <_Z19__fetch_global_Wirev>
   e0b26:	f001 fa3a 	bl	e1f9e <_ZN7TwoWire15endTransmissionEv>
        return false;
    return true;
}
   e0b2a:	fab0 f080 	clz	r0, r0
   e0b2e:	0940      	lsrs	r0, r0, #5
   e0b30:	bd38      	pop	{r3, r4, r5, pc}

000e0b32 <_ZN7TCA953515readModifyWriteEhhh>:

bool TCA9535::readModifyWrite(byte reg, byte dataMask, byte pinMask) {
   e0b32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   e0b34:	4614      	mov	r4, r2
    byte value;

    if (false == this->read(reg, &value))
   e0b36:	f10d 0207 	add.w	r2, sp, #7
bool TCA9535::readModifyWrite(byte reg, byte dataMask, byte pinMask) {
   e0b3a:	4605      	mov	r5, r0
   e0b3c:	460e      	mov	r6, r1
   e0b3e:	461f      	mov	r7, r3
    if (false == this->read(reg, &value))
   e0b40:	f7ff ffb8 	bl	e0ab4 <_ZN7TCA95354readEhPh>
   e0b44:	b158      	cbz	r0, e0b5e <_ZN7TCA953515readModifyWriteEhhh+0x2c>
        return false;

    value &= ~pinMask;  //clear bit
   e0b46:	f89d 1007 	ldrb.w	r1, [sp, #7]
   e0b4a:	ea21 0307 	bic.w	r3, r1, r7
    value |= dataMask;
   e0b4e:	ea44 0203 	orr.w	r2, r4, r3

    if (false == this->write(reg, value))
   e0b52:	4631      	mov	r1, r6
   e0b54:	4628      	mov	r0, r5
    value |= dataMask;
   e0b56:	f88d 2007 	strb.w	r2, [sp, #7]
    if (false == this->write(reg, value))
   e0b5a:	f7ff ffce 	bl	e0afa <_ZN7TCA95355writeEhh>
        return false;

    return true;
}
   e0b5e:	b003      	add	sp, #12
   e0b60:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e0b62 <_ZN7TCA95357pinModeEt7PinMode>:

bool TCA9535::pinMode(uint16_t pin, PinMode setMode) {
    bool dir = false;
    byte reg, mask, data;

    if (pin > TCA9535_MAX_PIN) {
   e0b62:	290f      	cmp	r1, #15
   e0b64:	d815      	bhi.n	e0b92 <_ZN7TCA95357pinModeEt7PinMode+0x30>
        // ASSERT
        return false;
    }

    if (INPUT == setMode) {
   e0b66:	fab2 f282 	clz	r2, r2
        dir = true;
    }

    reg = REG_CONFIG(pin);
   e0b6a:	2907      	cmp	r1, #7
    if (INPUT == setMode) {
   e0b6c:	ea4f 1252 	mov.w	r2, r2, lsr #5
   e0b70:	f04f 0301 	mov.w	r3, #1
    reg = REG_CONFIG(pin);
   e0b74:	d907      	bls.n	e0b86 <_ZN7TCA95357pinModeEt7PinMode+0x24>
    mask = BITMASK_PIN(pin);
   e0b76:	3908      	subs	r1, #8
   e0b78:	408b      	lsls	r3, r1
    data = BITMASK_DATA(pin, dir);
   e0b7a:	408a      	lsls	r2, r1
    mask = BITMASK_PIN(pin);
   e0b7c:	b2db      	uxtb	r3, r3
    data = BITMASK_DATA(pin, dir);
   e0b7e:	b2d2      	uxtb	r2, r2
    reg = REG_CONFIG(pin);
   e0b80:	2107      	movs	r1, #7

    return this->readModifyWrite(reg, data, mask);
   e0b82:	f7ff bfd6 	b.w	e0b32 <_ZN7TCA953515readModifyWriteEhhh>
    mask = BITMASK_PIN(pin);
   e0b86:	408b      	lsls	r3, r1
    data = BITMASK_DATA(pin, dir);
   e0b88:	408a      	lsls	r2, r1
    mask = BITMASK_PIN(pin);
   e0b8a:	b2db      	uxtb	r3, r3
    data = BITMASK_DATA(pin, dir);
   e0b8c:	b2d2      	uxtb	r2, r2
    reg = REG_CONFIG(pin);
   e0b8e:	2106      	movs	r1, #6
   e0b90:	e7f7      	b.n	e0b82 <_ZN7TCA95357pinModeEt7PinMode+0x20>
}
   e0b92:	2000      	movs	r0, #0
   e0b94:	4770      	bx	lr

000e0b96 <_ZN7TCA953512digitalWriteEtb>:

bool TCA9535::digitalWrite(uint16_t pin, bool value) {
    byte reg, mask, data;

    if (pin > TCA9535_MAX_PIN) {
   e0b96:	290f      	cmp	r1, #15
   e0b98:	d811      	bhi.n	e0bbe <_ZN7TCA953512digitalWriteEtb+0x28>
        // ASSERT
        return false;
    }

    reg = REG_OUTPUT(pin);
   e0b9a:	2907      	cmp	r1, #7
   e0b9c:	f04f 0301 	mov.w	r3, #1
   e0ba0:	d907      	bls.n	e0bb2 <_ZN7TCA953512digitalWriteEtb+0x1c>
    mask = BITMASK_PIN(pin);
   e0ba2:	3908      	subs	r1, #8
   e0ba4:	408b      	lsls	r3, r1
    data = BITMASK_DATA(pin, value);
   e0ba6:	408a      	lsls	r2, r1
    mask = BITMASK_PIN(pin);
   e0ba8:	b2db      	uxtb	r3, r3
    data = BITMASK_DATA(pin, value);
   e0baa:	b2d2      	uxtb	r2, r2
    reg = REG_OUTPUT(pin);
   e0bac:	2103      	movs	r1, #3

    return this->readModifyWrite(reg, data, mask);
   e0bae:	f7ff bfc0 	b.w	e0b32 <_ZN7TCA953515readModifyWriteEhhh>
    mask = BITMASK_PIN(pin);
   e0bb2:	408b      	lsls	r3, r1
    data = BITMASK_DATA(pin, value);
   e0bb4:	408a      	lsls	r2, r1
    mask = BITMASK_PIN(pin);
   e0bb6:	b2db      	uxtb	r3, r3
    data = BITMASK_DATA(pin, value);
   e0bb8:	b2d2      	uxtb	r2, r2
    reg = REG_OUTPUT(pin);
   e0bba:	2102      	movs	r1, #2
   e0bbc:	e7f7      	b.n	e0bae <_ZN7TCA953512digitalWriteEtb+0x18>
}
   e0bbe:	2000      	movs	r0, #0
   e0bc0:	4770      	bx	lr

000e0bc2 <_ZN7TCA953511digitalReadEtPb>:

bool TCA9535::digitalRead(uint16_t pin, bool * value) {
    byte reg, mask, regValue;

    if (pin > TCA9535_MAX_PIN) {
   e0bc2:	290f      	cmp	r1, #15
bool TCA9535::digitalRead(uint16_t pin, bool * value) {
   e0bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   e0bc6:	460c      	mov	r4, r1
   e0bc8:	4615      	mov	r5, r2
    if (pin > TCA9535_MAX_PIN) {
   e0bca:	d818      	bhi.n	e0bfe <_ZN7TCA953511digitalReadEtPb+0x3c>
        // ASSERT
        return false;
    }

    reg = REG_INPUT(pin);
   e0bcc:	2907      	cmp	r1, #7
    mask = BITMASK_PIN(pin);
   e0bce:	bf88      	it	hi
   e0bd0:	3c08      	subhi	r4, #8
   e0bd2:	f04f 0301 	mov.w	r3, #1
    reg = REG_INPUT(pin);
   e0bd6:	bf8c      	ite	hi
   e0bd8:	2101      	movhi	r1, #1
   e0bda:	2100      	movls	r1, #0
    mask = BITMASK_PIN(pin);
   e0bdc:	fa03 f404 	lsl.w	r4, r3, r4

    if (false == this->read(reg, &regValue))
   e0be0:	f10d 0207 	add.w	r2, sp, #7
    mask = BITMASK_PIN(pin);
   e0be4:	b2e4      	uxtb	r4, r4
    if (false == this->read(reg, &regValue))
   e0be6:	f7ff ff65 	bl	e0ab4 <_ZN7TCA95354readEhPh>
   e0bea:	b130      	cbz	r0, e0bfa <_ZN7TCA953511digitalReadEtPb+0x38>
        return false;

    if (mask & regValue) {
   e0bec:	f89d 3007 	ldrb.w	r3, [sp, #7]
   e0bf0:	401c      	ands	r4, r3
        *value = true;
   e0bf2:	bf1a      	itte	ne
   e0bf4:	2301      	movne	r3, #1
   e0bf6:	702b      	strbne	r3, [r5, #0]
    }
    else {
        *value = false;
   e0bf8:	702c      	strbeq	r4, [r5, #0]
    }
    return true;
}
   e0bfa:	b003      	add	sp, #12
   e0bfc:	bd30      	pop	{r4, r5, pc}
        return false;
   e0bfe:	2000      	movs	r0, #0
   e0c00:	e7fb      	b.n	e0bfa <_ZN7TCA953511digitalReadEtPb+0x38>
	...

000e0c04 <cellular_credentials_set>:
DYNALIB_FN(5, hal_cellular, cellular_pdp_deactivate, cellular_result_t(void*))
DYNALIB_FN(6, hal_cellular, cellular_gprs_attach, cellular_result_t(CellularCredentials*, void*))
DYNALIB_FN(7, hal_cellular, cellular_gprs_detach, cellular_result_t(void*))
DYNALIB_FN(8, hal_cellular, cellular_fetch_ipconfig, cellular_result_t(CellularConfig*, void*))
DYNALIB_FN(9, hal_cellular, cellular_device_info, cellular_result_t(CellularDevice*, void*))
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
   e0c04:	b508      	push	{r3, lr}
   e0c06:	4b02      	ldr	r3, [pc, #8]	; (e0c10 <cellular_credentials_set+0xc>)
   e0c08:	681b      	ldr	r3, [r3, #0]
   e0c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e0c0c:	9301      	str	r3, [sp, #4]
   e0c0e:	bd08      	pop	{r3, pc}
   e0c10:	00030274 	.word	0x00030274

000e0c14 <cellular_command>:
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   e0c14:	b508      	push	{r3, lr}
   e0c16:	4b02      	ldr	r3, [pc, #8]	; (e0c20 <cellular_command+0xc>)
   e0c18:	681b      	ldr	r3, [r3, #0]
   e0c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   e0c1c:	9301      	str	r3, [sp, #4]
   e0c1e:	bd08      	pop	{r3, pc}
   e0c20:	00030274 	.word	0x00030274

000e0c24 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   e0c24:	b508      	push	{r3, lr}
   e0c26:	4b02      	ldr	r3, [pc, #8]	; (e0c30 <os_thread_yield+0xc>)
   e0c28:	681b      	ldr	r3, [r3, #0]
   e0c2a:	68db      	ldr	r3, [r3, #12]
   e0c2c:	9301      	str	r3, [sp, #4]
   e0c2e:	bd08      	pop	{r3, pc}
   e0c30:	00030248 	.word	0x00030248

000e0c34 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   e0c34:	b508      	push	{r3, lr}
   e0c36:	4b02      	ldr	r3, [pc, #8]	; (e0c40 <os_thread_scheduling+0xc>)
   e0c38:	681b      	ldr	r3, [r3, #0]
   e0c3a:	69db      	ldr	r3, [r3, #28]
   e0c3c:	9301      	str	r3, [sp, #4]
   e0c3e:	bd08      	pop	{r3, pc}
   e0c40:	00030248 	.word	0x00030248

000e0c44 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   e0c44:	b508      	push	{r3, lr}
   e0c46:	4b02      	ldr	r3, [pc, #8]	; (e0c50 <os_timer_create+0xc>)
   e0c48:	681b      	ldr	r3, [r3, #0]
   e0c4a:	6a1b      	ldr	r3, [r3, #32]
   e0c4c:	9301      	str	r3, [sp, #4]
   e0c4e:	bd08      	pop	{r3, pc}
   e0c50:	00030248 	.word	0x00030248

000e0c54 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   e0c54:	b508      	push	{r3, lr}
   e0c56:	4b02      	ldr	r3, [pc, #8]	; (e0c60 <os_timer_destroy+0xc>)
   e0c58:	681b      	ldr	r3, [r3, #0]
   e0c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   e0c5c:	9301      	str	r3, [sp, #4]
   e0c5e:	bd08      	pop	{r3, pc}
   e0c60:	00030248 	.word	0x00030248

000e0c64 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   e0c64:	b508      	push	{r3, lr}
   e0c66:	4b02      	ldr	r3, [pc, #8]	; (e0c70 <os_timer_get_id+0xc>)
   e0c68:	681b      	ldr	r3, [r3, #0]
   e0c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e0c6c:	9301      	str	r3, [sp, #4]
   e0c6e:	bd08      	pop	{r3, pc}
   e0c70:	00030248 	.word	0x00030248

000e0c74 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   e0c74:	b508      	push	{r3, lr}
   e0c76:	4b02      	ldr	r3, [pc, #8]	; (e0c80 <os_timer_change+0xc>)
   e0c78:	681b      	ldr	r3, [r3, #0]
   e0c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   e0c7c:	9301      	str	r3, [sp, #4]
   e0c7e:	bd08      	pop	{r3, pc}
   e0c80:	00030248 	.word	0x00030248

000e0c84 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   e0c84:	b508      	push	{r3, lr}
   e0c86:	4b02      	ldr	r3, [pc, #8]	; (e0c90 <os_mutex_create+0xc>)
   e0c88:	681b      	ldr	r3, [r3, #0]
   e0c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e0c8c:	9301      	str	r3, [sp, #4]
   e0c8e:	bd08      	pop	{r3, pc}
   e0c90:	00030248 	.word	0x00030248

000e0c94 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   e0c94:	b508      	push	{r3, lr}
   e0c96:	4b02      	ldr	r3, [pc, #8]	; (e0ca0 <os_mutex_lock+0xc>)
   e0c98:	681b      	ldr	r3, [r3, #0]
   e0c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   e0c9c:	9301      	str	r3, [sp, #4]
   e0c9e:	bd08      	pop	{r3, pc}
   e0ca0:	00030248 	.word	0x00030248

000e0ca4 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   e0ca4:	b508      	push	{r3, lr}
   e0ca6:	4b02      	ldr	r3, [pc, #8]	; (e0cb0 <os_mutex_unlock+0xc>)
   e0ca8:	681b      	ldr	r3, [r3, #0]
   e0caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   e0cac:	9301      	str	r3, [sp, #4]
   e0cae:	bd08      	pop	{r3, pc}
   e0cb0:	00030248 	.word	0x00030248

000e0cb4 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   e0cb4:	b508      	push	{r3, lr}
   e0cb6:	4b02      	ldr	r3, [pc, #8]	; (e0cc0 <os_mutex_recursive_create+0xc>)
   e0cb8:	681b      	ldr	r3, [r3, #0]
   e0cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   e0cbc:	9301      	str	r3, [sp, #4]
   e0cbe:	bd08      	pop	{r3, pc}
   e0cc0:	00030248 	.word	0x00030248

000e0cc4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   e0cc4:	b508      	push	{r3, lr}
   e0cc6:	4b02      	ldr	r3, [pc, #8]	; (e0cd0 <os_mutex_recursive_destroy+0xc>)
   e0cc8:	681b      	ldr	r3, [r3, #0]
   e0cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   e0ccc:	9301      	str	r3, [sp, #4]
   e0cce:	bd08      	pop	{r3, pc}
   e0cd0:	00030248 	.word	0x00030248

000e0cd4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   e0cd4:	b508      	push	{r3, lr}
   e0cd6:	4b02      	ldr	r3, [pc, #8]	; (e0ce0 <os_mutex_recursive_lock+0xc>)
   e0cd8:	681b      	ldr	r3, [r3, #0]
   e0cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   e0cdc:	9301      	str	r3, [sp, #4]
   e0cde:	bd08      	pop	{r3, pc}
   e0ce0:	00030248 	.word	0x00030248

000e0ce4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   e0ce4:	b508      	push	{r3, lr}
   e0ce6:	4b02      	ldr	r3, [pc, #8]	; (e0cf0 <os_mutex_recursive_unlock+0xc>)
   e0ce8:	681b      	ldr	r3, [r3, #0]
   e0cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   e0cec:	9301      	str	r3, [sp, #4]
   e0cee:	bd08      	pop	{r3, pc}
   e0cf0:	00030248 	.word	0x00030248

000e0cf4 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   e0cf4:	b508      	push	{r3, lr}
   e0cf6:	4b02      	ldr	r3, [pc, #8]	; (e0d00 <os_timer_set_id+0xc>)
   e0cf8:	681b      	ldr	r3, [r3, #0]
   e0cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   e0cfc:	9301      	str	r3, [sp, #4]
   e0cfe:	bd08      	pop	{r3, pc}
   e0d00:	00030248 	.word	0x00030248

000e0d04 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   e0d04:	b508      	push	{r3, lr}
   e0d06:	4b02      	ldr	r3, [pc, #8]	; (e0d10 <HAL_RNG_GetRandomNumber+0xc>)
   e0d08:	681b      	ldr	r3, [r3, #0]
   e0d0a:	685b      	ldr	r3, [r3, #4]
   e0d0c:	9301      	str	r3, [sp, #4]
   e0d0e:	bd08      	pop	{r3, pc}
   e0d10:	00030218 	.word	0x00030218

000e0d14 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   e0d14:	b508      	push	{r3, lr}
   e0d16:	4b02      	ldr	r3, [pc, #8]	; (e0d20 <HAL_Delay_Microseconds+0xc>)
   e0d18:	681b      	ldr	r3, [r3, #0]
   e0d1a:	68db      	ldr	r3, [r3, #12]
   e0d1c:	9301      	str	r3, [sp, #4]
   e0d1e:	bd08      	pop	{r3, pc}
   e0d20:	00030218 	.word	0x00030218

000e0d24 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   e0d24:	b508      	push	{r3, lr}
   e0d26:	4b02      	ldr	r3, [pc, #8]	; (e0d30 <HAL_Timer_Get_Milli_Seconds+0xc>)
   e0d28:	681b      	ldr	r3, [r3, #0]
   e0d2a:	695b      	ldr	r3, [r3, #20]
   e0d2c:	9301      	str	r3, [sp, #4]
   e0d2e:	bd08      	pop	{r3, pc}
   e0d30:	00030218 	.word	0x00030218

000e0d34 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   e0d34:	b508      	push	{r3, lr}
   e0d36:	4b02      	ldr	r3, [pc, #8]	; (e0d40 <HAL_EEPROM_Init+0xc>)
   e0d38:	681b      	ldr	r3, [r3, #0]
   e0d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e0d3c:	9301      	str	r3, [sp, #4]
   e0d3e:	bd08      	pop	{r3, pc}
   e0d40:	00030218 	.word	0x00030218

000e0d44 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   e0d44:	b508      	push	{r3, lr}
   e0d46:	4b02      	ldr	r3, [pc, #8]	; (e0d50 <HAL_EEPROM_Get+0xc>)
   e0d48:	681b      	ldr	r3, [r3, #0]
   e0d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   e0d4c:	9301      	str	r3, [sp, #4]
   e0d4e:	bd08      	pop	{r3, pc}
   e0d50:	00030218 	.word	0x00030218

000e0d54 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   e0d54:	b508      	push	{r3, lr}
   e0d56:	4b02      	ldr	r3, [pc, #8]	; (e0d60 <HAL_EEPROM_Put+0xc>)
   e0d58:	681b      	ldr	r3, [r3, #0]
   e0d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   e0d5c:	9301      	str	r3, [sp, #4]
   e0d5e:	bd08      	pop	{r3, pc}
   e0d60:	00030218 	.word	0x00030218

000e0d64 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   e0d64:	b508      	push	{r3, lr}
   e0d66:	4b02      	ldr	r3, [pc, #8]	; (e0d70 <hal_rtc_time_is_valid+0xc>)
   e0d68:	681b      	ldr	r3, [r3, #0]
   e0d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   e0d6c:	9301      	str	r3, [sp, #4]
   e0d6e:	bd08      	pop	{r3, pc}
   e0d70:	00030218 	.word	0x00030218

000e0d74 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   e0d74:	b508      	push	{r3, lr}
   e0d76:	4b02      	ldr	r3, [pc, #8]	; (e0d80 <hal_rtc_get_time+0xc>)
   e0d78:	681b      	ldr	r3, [r3, #0]
   e0d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   e0d7c:	9301      	str	r3, [sp, #4]
   e0d7e:	bd08      	pop	{r3, pc}
   e0d80:	00030218 	.word	0x00030218

000e0d84 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   e0d84:	b508      	push	{r3, lr}
   e0d86:	4b02      	ldr	r3, [pc, #8]	; (e0d90 <HAL_Pin_Map+0xc>)
   e0d88:	681b      	ldr	r3, [r3, #0]
   e0d8a:	681b      	ldr	r3, [r3, #0]
   e0d8c:	9301      	str	r3, [sp, #4]
   e0d8e:	bd08      	pop	{r3, pc}
   e0d90:	0003022c 	.word	0x0003022c

000e0d94 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   e0d94:	b508      	push	{r3, lr}
   e0d96:	4b02      	ldr	r3, [pc, #8]	; (e0da0 <HAL_Validate_Pin_Function+0xc>)
   e0d98:	681b      	ldr	r3, [r3, #0]
   e0d9a:	685b      	ldr	r3, [r3, #4]
   e0d9c:	9301      	str	r3, [sp, #4]
   e0d9e:	bd08      	pop	{r3, pc}
   e0da0:	0003022c 	.word	0x0003022c

000e0da4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   e0da4:	b508      	push	{r3, lr}
   e0da6:	4b02      	ldr	r3, [pc, #8]	; (e0db0 <HAL_Pin_Mode+0xc>)
   e0da8:	681b      	ldr	r3, [r3, #0]
   e0daa:	689b      	ldr	r3, [r3, #8]
   e0dac:	9301      	str	r3, [sp, #4]
   e0dae:	bd08      	pop	{r3, pc}
   e0db0:	0003022c 	.word	0x0003022c

000e0db4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   e0db4:	b508      	push	{r3, lr}
   e0db6:	4b02      	ldr	r3, [pc, #8]	; (e0dc0 <HAL_Get_Pin_Mode+0xc>)
   e0db8:	681b      	ldr	r3, [r3, #0]
   e0dba:	68db      	ldr	r3, [r3, #12]
   e0dbc:	9301      	str	r3, [sp, #4]
   e0dbe:	bd08      	pop	{r3, pc}
   e0dc0:	0003022c 	.word	0x0003022c

000e0dc4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   e0dc4:	b508      	push	{r3, lr}
   e0dc6:	4b02      	ldr	r3, [pc, #8]	; (e0dd0 <HAL_GPIO_Write+0xc>)
   e0dc8:	681b      	ldr	r3, [r3, #0]
   e0dca:	691b      	ldr	r3, [r3, #16]
   e0dcc:	9301      	str	r3, [sp, #4]
   e0dce:	bd08      	pop	{r3, pc}
   e0dd0:	0003022c 	.word	0x0003022c

000e0dd4 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   e0dd4:	b508      	push	{r3, lr}
   e0dd6:	4b02      	ldr	r3, [pc, #8]	; (e0de0 <HAL_Interrupts_Attach+0xc>)
   e0dd8:	681b      	ldr	r3, [r3, #0]
   e0dda:	699b      	ldr	r3, [r3, #24]
   e0ddc:	9301      	str	r3, [sp, #4]
   e0dde:	bd08      	pop	{r3, pc}
   e0de0:	0003022c 	.word	0x0003022c

000e0de4 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   e0de4:	b508      	push	{r3, lr}
   e0de6:	4b02      	ldr	r3, [pc, #8]	; (e0df0 <HAL_Interrupts_Detach+0xc>)
   e0de8:	681b      	ldr	r3, [r3, #0]
   e0dea:	69db      	ldr	r3, [r3, #28]
   e0dec:	9301      	str	r3, [sp, #4]
   e0dee:	bd08      	pop	{r3, pc}
   e0df0:	0003022c 	.word	0x0003022c

000e0df4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   e0df4:	b508      	push	{r3, lr}
   e0df6:	4b02      	ldr	r3, [pc, #8]	; (e0e00 <hal_adc_read+0xc>)
   e0df8:	681b      	ldr	r3, [r3, #0]
   e0dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e0dfc:	9301      	str	r3, [sp, #4]
   e0dfe:	bd08      	pop	{r3, pc}
   e0e00:	0003022c 	.word	0x0003022c

000e0e04 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   e0e04:	b508      	push	{r3, lr}
   e0e06:	4b02      	ldr	r3, [pc, #8]	; (e0e10 <hal_i2c_begin+0xc>)
   e0e08:	681b      	ldr	r3, [r3, #0]
   e0e0a:	68db      	ldr	r3, [r3, #12]
   e0e0c:	9301      	str	r3, [sp, #4]
   e0e0e:	bd08      	pop	{r3, pc}
   e0e10:	00030228 	.word	0x00030228

000e0e14 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   e0e14:	b508      	push	{r3, lr}
   e0e16:	4b02      	ldr	r3, [pc, #8]	; (e0e20 <hal_i2c_begin_transmission+0xc>)
   e0e18:	681b      	ldr	r3, [r3, #0]
   e0e1a:	699b      	ldr	r3, [r3, #24]
   e0e1c:	9301      	str	r3, [sp, #4]
   e0e1e:	bd08      	pop	{r3, pc}
   e0e20:	00030228 	.word	0x00030228

000e0e24 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   e0e24:	b508      	push	{r3, lr}
   e0e26:	4b02      	ldr	r3, [pc, #8]	; (e0e30 <hal_i2c_end_transmission+0xc>)
   e0e28:	681b      	ldr	r3, [r3, #0]
   e0e2a:	69db      	ldr	r3, [r3, #28]
   e0e2c:	9301      	str	r3, [sp, #4]
   e0e2e:	bd08      	pop	{r3, pc}
   e0e30:	00030228 	.word	0x00030228

000e0e34 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   e0e34:	b508      	push	{r3, lr}
   e0e36:	4b02      	ldr	r3, [pc, #8]	; (e0e40 <hal_i2c_write+0xc>)
   e0e38:	681b      	ldr	r3, [r3, #0]
   e0e3a:	6a1b      	ldr	r3, [r3, #32]
   e0e3c:	9301      	str	r3, [sp, #4]
   e0e3e:	bd08      	pop	{r3, pc}
   e0e40:	00030228 	.word	0x00030228

000e0e44 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   e0e44:	b508      	push	{r3, lr}
   e0e46:	4b02      	ldr	r3, [pc, #8]	; (e0e50 <hal_i2c_available+0xc>)
   e0e48:	681b      	ldr	r3, [r3, #0]
   e0e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   e0e4c:	9301      	str	r3, [sp, #4]
   e0e4e:	bd08      	pop	{r3, pc}
   e0e50:	00030228 	.word	0x00030228

000e0e54 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   e0e54:	b508      	push	{r3, lr}
   e0e56:	4b02      	ldr	r3, [pc, #8]	; (e0e60 <hal_i2c_read+0xc>)
   e0e58:	681b      	ldr	r3, [r3, #0]
   e0e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e0e5c:	9301      	str	r3, [sp, #4]
   e0e5e:	bd08      	pop	{r3, pc}
   e0e60:	00030228 	.word	0x00030228

000e0e64 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   e0e64:	b508      	push	{r3, lr}
   e0e66:	4b02      	ldr	r3, [pc, #8]	; (e0e70 <hal_i2c_peek+0xc>)
   e0e68:	681b      	ldr	r3, [r3, #0]
   e0e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   e0e6c:	9301      	str	r3, [sp, #4]
   e0e6e:	bd08      	pop	{r3, pc}
   e0e70:	00030228 	.word	0x00030228

000e0e74 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   e0e74:	b508      	push	{r3, lr}
   e0e76:	4b02      	ldr	r3, [pc, #8]	; (e0e80 <hal_i2c_flush+0xc>)
   e0e78:	681b      	ldr	r3, [r3, #0]
   e0e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e0e7c:	9301      	str	r3, [sp, #4]
   e0e7e:	bd08      	pop	{r3, pc}
   e0e80:	00030228 	.word	0x00030228

000e0e84 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   e0e84:	b508      	push	{r3, lr}
   e0e86:	4b02      	ldr	r3, [pc, #8]	; (e0e90 <hal_i2c_is_enabled+0xc>)
   e0e88:	681b      	ldr	r3, [r3, #0]
   e0e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   e0e8c:	9301      	str	r3, [sp, #4]
   e0e8e:	bd08      	pop	{r3, pc}
   e0e90:	00030228 	.word	0x00030228

000e0e94 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   e0e94:	b508      	push	{r3, lr}
   e0e96:	4b02      	ldr	r3, [pc, #8]	; (e0ea0 <hal_i2c_init+0xc>)
   e0e98:	681b      	ldr	r3, [r3, #0]
   e0e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   e0e9c:	9301      	str	r3, [sp, #4]
   e0e9e:	bd08      	pop	{r3, pc}
   e0ea0:	00030228 	.word	0x00030228

000e0ea4 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   e0ea4:	b508      	push	{r3, lr}
   e0ea6:	4b02      	ldr	r3, [pc, #8]	; (e0eb0 <hal_i2c_lock+0xc>)
   e0ea8:	681b      	ldr	r3, [r3, #0]
   e0eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   e0eac:	9301      	str	r3, [sp, #4]
   e0eae:	bd08      	pop	{r3, pc}
   e0eb0:	00030228 	.word	0x00030228

000e0eb4 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   e0eb4:	b508      	push	{r3, lr}
   e0eb6:	4b02      	ldr	r3, [pc, #8]	; (e0ec0 <hal_i2c_unlock+0xc>)
   e0eb8:	681b      	ldr	r3, [r3, #0]
   e0eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   e0ebc:	9301      	str	r3, [sp, #4]
   e0ebe:	bd08      	pop	{r3, pc}
   e0ec0:	00030228 	.word	0x00030228

000e0ec4 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   e0ec4:	b508      	push	{r3, lr}
   e0ec6:	4b02      	ldr	r3, [pc, #8]	; (e0ed0 <hal_i2c_request_ex+0xc>)
   e0ec8:	681b      	ldr	r3, [r3, #0]
   e0eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   e0ecc:	9301      	str	r3, [sp, #4]
   e0ece:	bd08      	pop	{r3, pc}
   e0ed0:	00030228 	.word	0x00030228

000e0ed4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   e0ed4:	b508      	push	{r3, lr}
   e0ed6:	4b02      	ldr	r3, [pc, #8]	; (e0ee0 <inet_inet_ntop+0xc>)
   e0ed8:	681b      	ldr	r3, [r3, #0]
   e0eda:	695b      	ldr	r3, [r3, #20]
   e0edc:	9301      	str	r3, [sp, #4]
   e0ede:	bd08      	pop	{r3, pc}
   e0ee0:	00030264 	.word	0x00030264

000e0ee4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   e0ee4:	b508      	push	{r3, lr}
   e0ee6:	4b02      	ldr	r3, [pc, #8]	; (e0ef0 <netdb_freeaddrinfo+0xc>)
   e0ee8:	681b      	ldr	r3, [r3, #0]
   e0eea:	689b      	ldr	r3, [r3, #8]
   e0eec:	9301      	str	r3, [sp, #4]
   e0eee:	bd08      	pop	{r3, pc}
   e0ef0:	00030268 	.word	0x00030268

000e0ef4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   e0ef4:	b508      	push	{r3, lr}
   e0ef6:	4b02      	ldr	r3, [pc, #8]	; (e0f00 <netdb_getaddrinfo+0xc>)
   e0ef8:	681b      	ldr	r3, [r3, #0]
   e0efa:	68db      	ldr	r3, [r3, #12]
   e0efc:	9301      	str	r3, [sp, #4]
   e0efe:	bd08      	pop	{r3, pc}
   e0f00:	00030268 	.word	0x00030268

000e0f04 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   e0f04:	b508      	push	{r3, lr}
   e0f06:	4b02      	ldr	r3, [pc, #8]	; (e0f10 <hal_spi_begin+0xc>)
   e0f08:	681b      	ldr	r3, [r3, #0]
   e0f0a:	681b      	ldr	r3, [r3, #0]
   e0f0c:	9301      	str	r3, [sp, #4]
   e0f0e:	bd08      	pop	{r3, pc}
   e0f10:	00030230 	.word	0x00030230

000e0f14 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   e0f14:	b508      	push	{r3, lr}
   e0f16:	4b02      	ldr	r3, [pc, #8]	; (e0f20 <hal_spi_end+0xc>)
   e0f18:	681b      	ldr	r3, [r3, #0]
   e0f1a:	685b      	ldr	r3, [r3, #4]
   e0f1c:	9301      	str	r3, [sp, #4]
   e0f1e:	bd08      	pop	{r3, pc}
   e0f20:	00030230 	.word	0x00030230

000e0f24 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   e0f24:	b508      	push	{r3, lr}
   e0f26:	4b02      	ldr	r3, [pc, #8]	; (e0f30 <hal_spi_init+0xc>)
   e0f28:	681b      	ldr	r3, [r3, #0]
   e0f2a:	69db      	ldr	r3, [r3, #28]
   e0f2c:	9301      	str	r3, [sp, #4]
   e0f2e:	bd08      	pop	{r3, pc}
   e0f30:	00030230 	.word	0x00030230

000e0f34 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   e0f34:	b508      	push	{r3, lr}
   e0f36:	4b02      	ldr	r3, [pc, #8]	; (e0f40 <hal_spi_is_enabled+0xc>)
   e0f38:	681b      	ldr	r3, [r3, #0]
   e0f3a:	6a1b      	ldr	r3, [r3, #32]
   e0f3c:	9301      	str	r3, [sp, #4]
   e0f3e:	bd08      	pop	{r3, pc}
   e0f40:	00030230 	.word	0x00030230

000e0f44 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   e0f44:	b508      	push	{r3, lr}
   e0f46:	4b02      	ldr	r3, [pc, #8]	; (e0f50 <hal_spi_info+0xc>)
   e0f48:	681b      	ldr	r3, [r3, #0]
   e0f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   e0f4c:	9301      	str	r3, [sp, #4]
   e0f4e:	bd08      	pop	{r3, pc}
   e0f50:	00030230 	.word	0x00030230

000e0f54 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
   e0f54:	b508      	push	{r3, lr}
   e0f56:	4b02      	ldr	r3, [pc, #8]	; (e0f60 <hal_spi_transfer_dma+0xc>)
   e0f58:	681b      	ldr	r3, [r3, #0]
   e0f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e0f5c:	9301      	str	r3, [sp, #4]
   e0f5e:	bd08      	pop	{r3, pc}
   e0f60:	00030230 	.word	0x00030230

000e0f64 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   e0f64:	b508      	push	{r3, lr}
   e0f66:	4b02      	ldr	r3, [pc, #8]	; (e0f70 <hal_spi_transfer_dma_status+0xc>)
   e0f68:	681b      	ldr	r3, [r3, #0]
   e0f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   e0f6c:	9301      	str	r3, [sp, #4]
   e0f6e:	bd08      	pop	{r3, pc}
   e0f70:	00030230 	.word	0x00030230

000e0f74 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   e0f74:	b508      	push	{r3, lr}
   e0f76:	4b02      	ldr	r3, [pc, #8]	; (e0f80 <hal_spi_set_settings+0xc>)
   e0f78:	681b      	ldr	r3, [r3, #0]
   e0f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   e0f7c:	9301      	str	r3, [sp, #4]
   e0f7e:	bd08      	pop	{r3, pc}
   e0f80:	00030230 	.word	0x00030230

000e0f84 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   e0f84:	b508      	push	{r3, lr}
   e0f86:	4b02      	ldr	r3, [pc, #8]	; (e0f90 <hal_spi_acquire+0xc>)
   e0f88:	681b      	ldr	r3, [r3, #0]
   e0f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   e0f8c:	9301      	str	r3, [sp, #4]
   e0f8e:	bd08      	pop	{r3, pc}
   e0f90:	00030230 	.word	0x00030230

000e0f94 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   e0f94:	b508      	push	{r3, lr}
   e0f96:	4b02      	ldr	r3, [pc, #8]	; (e0fa0 <hal_spi_release+0xc>)
   e0f98:	681b      	ldr	r3, [r3, #0]
   e0f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   e0f9c:	9301      	str	r3, [sp, #4]
   e0f9e:	bd08      	pop	{r3, pc}
   e0fa0:	00030230 	.word	0x00030230

000e0fa4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   e0fa4:	b508      	push	{r3, lr}
   e0fa6:	4b02      	ldr	r3, [pc, #8]	; (e0fb0 <hal_usart_init+0xc>)
   e0fa8:	681b      	ldr	r3, [r3, #0]
   e0faa:	681b      	ldr	r3, [r3, #0]
   e0fac:	9301      	str	r3, [sp, #4]
   e0fae:	bd08      	pop	{r3, pc}
   e0fb0:	0003023c 	.word	0x0003023c

000e0fb4 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   e0fb4:	b508      	push	{r3, lr}
   e0fb6:	4b02      	ldr	r3, [pc, #8]	; (e0fc0 <hal_usart_end+0xc>)
   e0fb8:	681b      	ldr	r3, [r3, #0]
   e0fba:	689b      	ldr	r3, [r3, #8]
   e0fbc:	9301      	str	r3, [sp, #4]
   e0fbe:	bd08      	pop	{r3, pc}
   e0fc0:	0003023c 	.word	0x0003023c

000e0fc4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   e0fc4:	b508      	push	{r3, lr}
   e0fc6:	4b02      	ldr	r3, [pc, #8]	; (e0fd0 <hal_usart_write+0xc>)
   e0fc8:	681b      	ldr	r3, [r3, #0]
   e0fca:	68db      	ldr	r3, [r3, #12]
   e0fcc:	9301      	str	r3, [sp, #4]
   e0fce:	bd08      	pop	{r3, pc}
   e0fd0:	0003023c 	.word	0x0003023c

000e0fd4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   e0fd4:	b508      	push	{r3, lr}
   e0fd6:	4b02      	ldr	r3, [pc, #8]	; (e0fe0 <hal_usart_available+0xc>)
   e0fd8:	681b      	ldr	r3, [r3, #0]
   e0fda:	691b      	ldr	r3, [r3, #16]
   e0fdc:	9301      	str	r3, [sp, #4]
   e0fde:	bd08      	pop	{r3, pc}
   e0fe0:	0003023c 	.word	0x0003023c

000e0fe4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   e0fe4:	b508      	push	{r3, lr}
   e0fe6:	4b02      	ldr	r3, [pc, #8]	; (e0ff0 <hal_usart_read+0xc>)
   e0fe8:	681b      	ldr	r3, [r3, #0]
   e0fea:	695b      	ldr	r3, [r3, #20]
   e0fec:	9301      	str	r3, [sp, #4]
   e0fee:	bd08      	pop	{r3, pc}
   e0ff0:	0003023c 	.word	0x0003023c

000e0ff4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   e0ff4:	b508      	push	{r3, lr}
   e0ff6:	4b02      	ldr	r3, [pc, #8]	; (e1000 <hal_usart_peek+0xc>)
   e0ff8:	681b      	ldr	r3, [r3, #0]
   e0ffa:	699b      	ldr	r3, [r3, #24]
   e0ffc:	9301      	str	r3, [sp, #4]
   e0ffe:	bd08      	pop	{r3, pc}
   e1000:	0003023c 	.word	0x0003023c

000e1004 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   e1004:	b508      	push	{r3, lr}
   e1006:	4b02      	ldr	r3, [pc, #8]	; (e1010 <hal_usart_flush+0xc>)
   e1008:	681b      	ldr	r3, [r3, #0]
   e100a:	69db      	ldr	r3, [r3, #28]
   e100c:	9301      	str	r3, [sp, #4]
   e100e:	bd08      	pop	{r3, pc}
   e1010:	0003023c 	.word	0x0003023c

000e1014 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   e1014:	b508      	push	{r3, lr}
   e1016:	4b02      	ldr	r3, [pc, #8]	; (e1020 <hal_usart_is_enabled+0xc>)
   e1018:	681b      	ldr	r3, [r3, #0]
   e101a:	6a1b      	ldr	r3, [r3, #32]
   e101c:	9301      	str	r3, [sp, #4]
   e101e:	bd08      	pop	{r3, pc}
   e1020:	0003023c 	.word	0x0003023c

000e1024 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   e1024:	b508      	push	{r3, lr}
   e1026:	4b02      	ldr	r3, [pc, #8]	; (e1030 <hal_usart_available_data_for_write+0xc>)
   e1028:	681b      	ldr	r3, [r3, #0]
   e102a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e102c:	9301      	str	r3, [sp, #4]
   e102e:	bd08      	pop	{r3, pc}
   e1030:	0003023c 	.word	0x0003023c

000e1034 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   e1034:	b508      	push	{r3, lr}
   e1036:	4b02      	ldr	r3, [pc, #8]	; (e1040 <hal_usart_begin_config+0xc>)
   e1038:	681b      	ldr	r3, [r3, #0]
   e103a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   e103c:	9301      	str	r3, [sp, #4]
   e103e:	bd08      	pop	{r3, pc}
   e1040:	0003023c 	.word	0x0003023c

000e1044 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   e1044:	b508      	push	{r3, lr}
   e1046:	4b02      	ldr	r3, [pc, #8]	; (e1050 <HAL_USB_USART_Init+0xc>)
   e1048:	681b      	ldr	r3, [r3, #0]
   e104a:	681b      	ldr	r3, [r3, #0]
   e104c:	9301      	str	r3, [sp, #4]
   e104e:	bd08      	pop	{r3, pc}
   e1050:	0003024c 	.word	0x0003024c

000e1054 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   e1054:	b508      	push	{r3, lr}
   e1056:	4b02      	ldr	r3, [pc, #8]	; (e1060 <HAL_USB_USART_Begin+0xc>)
   e1058:	681b      	ldr	r3, [r3, #0]
   e105a:	685b      	ldr	r3, [r3, #4]
   e105c:	9301      	str	r3, [sp, #4]
   e105e:	bd08      	pop	{r3, pc}
   e1060:	0003024c 	.word	0x0003024c

000e1064 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   e1064:	b508      	push	{r3, lr}
   e1066:	4b02      	ldr	r3, [pc, #8]	; (e1070 <HAL_USB_USART_End+0xc>)
   e1068:	681b      	ldr	r3, [r3, #0]
   e106a:	689b      	ldr	r3, [r3, #8]
   e106c:	9301      	str	r3, [sp, #4]
   e106e:	bd08      	pop	{r3, pc}
   e1070:	0003024c 	.word	0x0003024c

000e1074 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   e1074:	b508      	push	{r3, lr}
   e1076:	4b02      	ldr	r3, [pc, #8]	; (e1080 <HAL_USB_USART_Available_Data+0xc>)
   e1078:	681b      	ldr	r3, [r3, #0]
   e107a:	691b      	ldr	r3, [r3, #16]
   e107c:	9301      	str	r3, [sp, #4]
   e107e:	bd08      	pop	{r3, pc}
   e1080:	0003024c 	.word	0x0003024c

000e1084 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   e1084:	b508      	push	{r3, lr}
   e1086:	4b02      	ldr	r3, [pc, #8]	; (e1090 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   e1088:	681b      	ldr	r3, [r3, #0]
   e108a:	695b      	ldr	r3, [r3, #20]
   e108c:	9301      	str	r3, [sp, #4]
   e108e:	bd08      	pop	{r3, pc}
   e1090:	0003024c 	.word	0x0003024c

000e1094 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   e1094:	b508      	push	{r3, lr}
   e1096:	4b02      	ldr	r3, [pc, #8]	; (e10a0 <HAL_USB_USART_Receive_Data+0xc>)
   e1098:	681b      	ldr	r3, [r3, #0]
   e109a:	699b      	ldr	r3, [r3, #24]
   e109c:	9301      	str	r3, [sp, #4]
   e109e:	bd08      	pop	{r3, pc}
   e10a0:	0003024c 	.word	0x0003024c

000e10a4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   e10a4:	b508      	push	{r3, lr}
   e10a6:	4b02      	ldr	r3, [pc, #8]	; (e10b0 <HAL_USB_USART_Send_Data+0xc>)
   e10a8:	681b      	ldr	r3, [r3, #0]
   e10aa:	69db      	ldr	r3, [r3, #28]
   e10ac:	9301      	str	r3, [sp, #4]
   e10ae:	bd08      	pop	{r3, pc}
   e10b0:	0003024c 	.word	0x0003024c

000e10b4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   e10b4:	b508      	push	{r3, lr}
   e10b6:	4b02      	ldr	r3, [pc, #8]	; (e10c0 <HAL_USB_USART_Flush_Data+0xc>)
   e10b8:	681b      	ldr	r3, [r3, #0]
   e10ba:	6a1b      	ldr	r3, [r3, #32]
   e10bc:	9301      	str	r3, [sp, #4]
   e10be:	bd08      	pop	{r3, pc}
   e10c0:	0003024c 	.word	0x0003024c

000e10c4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   e10c4:	b508      	push	{r3, lr}
   e10c6:	4b02      	ldr	r3, [pc, #8]	; (e10d0 <panic_+0xc>)
   e10c8:	681b      	ldr	r3, [r3, #0]
   e10ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   e10cc:	9301      	str	r3, [sp, #4]
   e10ce:	bd08      	pop	{r3, pc}
   e10d0:	00030260 	.word	0x00030260

000e10d4 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   e10d4:	b508      	push	{r3, lr}
   e10d6:	4b02      	ldr	r3, [pc, #8]	; (e10e0 <log_message_v+0xc>)
   e10d8:	681b      	ldr	r3, [r3, #0]
   e10da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   e10dc:	9301      	str	r3, [sp, #4]
   e10de:	bd08      	pop	{r3, pc}
   e10e0:	00030260 	.word	0x00030260

000e10e4 <log_printf_v>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
   e10e4:	b508      	push	{r3, lr}
   e10e6:	4b02      	ldr	r3, [pc, #8]	; (e10f0 <log_printf_v+0xc>)
   e10e8:	681b      	ldr	r3, [r3, #0]
   e10ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   e10ec:	9301      	str	r3, [sp, #4]
   e10ee:	bd08      	pop	{r3, pc}
   e10f0:	00030260 	.word	0x00030260

000e10f4 <log_enabled>:
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
   e10f4:	b508      	push	{r3, lr}
   e10f6:	4b02      	ldr	r3, [pc, #8]	; (e1100 <log_enabled+0xc>)
   e10f8:	681b      	ldr	r3, [r3, #0]
   e10fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   e10fc:	9301      	str	r3, [sp, #4]
   e10fe:	bd08      	pop	{r3, pc}
   e1100:	00030260 	.word	0x00030260

000e1104 <log_level_name>:
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   e1104:	b508      	push	{r3, lr}
   e1106:	4b02      	ldr	r3, [pc, #8]	; (e1110 <log_level_name+0xc>)
   e1108:	681b      	ldr	r3, [r3, #0]
   e110a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   e110c:	9301      	str	r3, [sp, #4]
   e110e:	bd08      	pop	{r3, pc}
   e1110:	00030260 	.word	0x00030260

000e1114 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   e1114:	b508      	push	{r3, lr}
   e1116:	4b02      	ldr	r3, [pc, #8]	; (e1120 <log_set_callbacks+0xc>)
   e1118:	681b      	ldr	r3, [r3, #0]
   e111a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   e111c:	9301      	str	r3, [sp, #4]
   e111e:	bd08      	pop	{r3, pc}
   e1120:	00030260 	.word	0x00030260

000e1124 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   e1124:	b508      	push	{r3, lr}
   e1126:	4b02      	ldr	r3, [pc, #8]	; (e1130 <system_mode+0xc>)
   e1128:	681b      	ldr	r3, [r3, #0]
   e112a:	681b      	ldr	r3, [r3, #0]
   e112c:	9301      	str	r3, [sp, #4]
   e112e:	bd08      	pop	{r3, pc}
   e1130:	00030220 	.word	0x00030220

000e1134 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   e1134:	b508      	push	{r3, lr}
   e1136:	4b02      	ldr	r3, [pc, #8]	; (e1140 <set_system_mode+0xc>)
   e1138:	681b      	ldr	r3, [r3, #0]
   e113a:	685b      	ldr	r3, [r3, #4]
   e113c:	9301      	str	r3, [sp, #4]
   e113e:	bd08      	pop	{r3, pc}
   e1140:	00030220 	.word	0x00030220

000e1144 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   e1144:	b508      	push	{r3, lr}
   e1146:	4b02      	ldr	r3, [pc, #8]	; (e1150 <system_delay_ms+0xc>)
   e1148:	681b      	ldr	r3, [r3, #0]
   e114a:	695b      	ldr	r3, [r3, #20]
   e114c:	9301      	str	r3, [sp, #4]
   e114e:	bd08      	pop	{r3, pc}
   e1150:	00030220 	.word	0x00030220

000e1154 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   e1154:	b508      	push	{r3, lr}
   e1156:	4b02      	ldr	r3, [pc, #8]	; (e1160 <system_sleep+0xc>)
   e1158:	681b      	ldr	r3, [r3, #0]
   e115a:	699b      	ldr	r3, [r3, #24]
   e115c:	9301      	str	r3, [sp, #4]
   e115e:	bd08      	pop	{r3, pc}
   e1160:	00030220 	.word	0x00030220

000e1164 <system_subscribe_event>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   e1164:	b508      	push	{r3, lr}
   e1166:	4b02      	ldr	r3, [pc, #8]	; (e1170 <system_subscribe_event+0xc>)
   e1168:	681b      	ldr	r3, [r3, #0]
   e116a:	6a1b      	ldr	r3, [r3, #32]
   e116c:	9301      	str	r3, [sp, #4]
   e116e:	bd08      	pop	{r3, pc}
   e1170:	00030220 	.word	0x00030220

000e1174 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   e1174:	b508      	push	{r3, lr}
   e1176:	4b02      	ldr	r3, [pc, #8]	; (e1180 <system_thread_set_state+0xc>)
   e1178:	681b      	ldr	r3, [r3, #0]
   e117a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   e117c:	9301      	str	r3, [sp, #4]
   e117e:	bd08      	pop	{r3, pc}
   e1180:	00030220 	.word	0x00030220

000e1184 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   e1184:	b508      	push	{r3, lr}
   e1186:	4b02      	ldr	r3, [pc, #8]	; (e1190 <application_thread_current+0xc>)
   e1188:	681b      	ldr	r3, [r3, #0]
   e118a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   e118c:	9301      	str	r3, [sp, #4]
   e118e:	bd08      	pop	{r3, pc}
   e1190:	00030220 	.word	0x00030220

000e1194 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   e1194:	b508      	push	{r3, lr}
   e1196:	4b02      	ldr	r3, [pc, #8]	; (e11a0 <application_thread_invoke+0xc>)
   e1198:	681b      	ldr	r3, [r3, #0]
   e119a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   e119c:	9301      	str	r3, [sp, #4]
   e119e:	bd08      	pop	{r3, pc}
   e11a0:	00030220 	.word	0x00030220

000e11a4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   e11a4:	b508      	push	{r3, lr}
   e11a6:	4b02      	ldr	r3, [pc, #8]	; (e11b0 <system_thread_get_state+0xc>)
   e11a8:	681b      	ldr	r3, [r3, #0]
   e11aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   e11ac:	9301      	str	r3, [sp, #4]
   e11ae:	bd08      	pop	{r3, pc}
   e11b0:	00030220 	.word	0x00030220

000e11b4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   e11b4:	b508      	push	{r3, lr}
   e11b6:	4b03      	ldr	r3, [pc, #12]	; (e11c4 <system_ctrl_set_app_request_handler+0x10>)
   e11b8:	681b      	ldr	r3, [r3, #0]
   e11ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   e11be:	9301      	str	r3, [sp, #4]
   e11c0:	bd08      	pop	{r3, pc}
   e11c2:	0000      	.short	0x0000
   e11c4:	00030220 	.word	0x00030220

000e11c8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   e11c8:	b508      	push	{r3, lr}
   e11ca:	4b03      	ldr	r3, [pc, #12]	; (e11d8 <system_ctrl_set_result+0x10>)
   e11cc:	681b      	ldr	r3, [r3, #0]
   e11ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   e11d2:	9301      	str	r3, [sp, #4]
   e11d4:	bd08      	pop	{r3, pc}
   e11d6:	0000      	.short	0x0000
   e11d8:	00030220 	.word	0x00030220

000e11dc <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   e11dc:	b508      	push	{r3, lr}
   e11de:	4b03      	ldr	r3, [pc, #12]	; (e11ec <system_reset+0x10>)
   e11e0:	681b      	ldr	r3, [r3, #0]
   e11e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   e11e6:	9301      	str	r3, [sp, #4]
   e11e8:	bd08      	pop	{r3, pc}
   e11ea:	0000      	.short	0x0000
   e11ec:	00030220 	.word	0x00030220

000e11f0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   e11f0:	b508      	push	{r3, lr}
   e11f2:	4b02      	ldr	r3, [pc, #8]	; (e11fc <spark_variable+0xc>)
   e11f4:	681b      	ldr	r3, [r3, #0]
   e11f6:	681b      	ldr	r3, [r3, #0]
   e11f8:	9301      	str	r3, [sp, #4]
   e11fa:	bd08      	pop	{r3, pc}
   e11fc:	00030244 	.word	0x00030244

000e1200 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   e1200:	b508      	push	{r3, lr}
   e1202:	4b02      	ldr	r3, [pc, #8]	; (e120c <spark_function+0xc>)
   e1204:	681b      	ldr	r3, [r3, #0]
   e1206:	685b      	ldr	r3, [r3, #4]
   e1208:	9301      	str	r3, [sp, #4]
   e120a:	bd08      	pop	{r3, pc}
   e120c:	00030244 	.word	0x00030244

000e1210 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   e1210:	b508      	push	{r3, lr}
   e1212:	4b02      	ldr	r3, [pc, #8]	; (e121c <spark_process+0xc>)
   e1214:	681b      	ldr	r3, [r3, #0]
   e1216:	689b      	ldr	r3, [r3, #8]
   e1218:	9301      	str	r3, [sp, #4]
   e121a:	bd08      	pop	{r3, pc}
   e121c:	00030244 	.word	0x00030244

000e1220 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   e1220:	b508      	push	{r3, lr}
   e1222:	4b02      	ldr	r3, [pc, #8]	; (e122c <spark_cloud_flag_connect+0xc>)
   e1224:	681b      	ldr	r3, [r3, #0]
   e1226:	68db      	ldr	r3, [r3, #12]
   e1228:	9301      	str	r3, [sp, #4]
   e122a:	bd08      	pop	{r3, pc}
   e122c:	00030244 	.word	0x00030244

000e1230 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   e1230:	b508      	push	{r3, lr}
   e1232:	4b02      	ldr	r3, [pc, #8]	; (e123c <spark_cloud_flag_connected+0xc>)
   e1234:	681b      	ldr	r3, [r3, #0]
   e1236:	695b      	ldr	r3, [r3, #20]
   e1238:	9301      	str	r3, [sp, #4]
   e123a:	bd08      	pop	{r3, pc}
   e123c:	00030244 	.word	0x00030244

000e1240 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   e1240:	b508      	push	{r3, lr}
   e1242:	4b02      	ldr	r3, [pc, #8]	; (e124c <spark_send_event+0xc>)
   e1244:	681b      	ldr	r3, [r3, #0]
   e1246:	6a1b      	ldr	r3, [r3, #32]
   e1248:	9301      	str	r3, [sp, #4]
   e124a:	bd08      	pop	{r3, pc}
   e124c:	00030244 	.word	0x00030244

000e1250 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   e1250:	b508      	push	{r3, lr}
   e1252:	4b02      	ldr	r3, [pc, #8]	; (e125c <spark_sync_time_pending+0xc>)
   e1254:	681b      	ldr	r3, [r3, #0]
   e1256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e1258:	9301      	str	r3, [sp, #4]
   e125a:	bd08      	pop	{r3, pc}
   e125c:	00030244 	.word	0x00030244

000e1260 <spark_set_connection_property>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   e1260:	b508      	push	{r3, lr}
   e1262:	4b02      	ldr	r3, [pc, #8]	; (e126c <spark_set_connection_property+0xc>)
   e1264:	681b      	ldr	r3, [r3, #0]
   e1266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   e1268:	9301      	str	r3, [sp, #4]
   e126a:	bd08      	pop	{r3, pc}
   e126c:	00030244 	.word	0x00030244

000e1270 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   e1270:	b508      	push	{r3, lr}
   e1272:	4b02      	ldr	r3, [pc, #8]	; (e127c <spark_set_random_seed_from_cloud_handler+0xc>)
   e1274:	681b      	ldr	r3, [r3, #0]
   e1276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   e1278:	9301      	str	r3, [sp, #4]
   e127a:	bd08      	pop	{r3, pc}
   e127c:	00030244 	.word	0x00030244

000e1280 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   e1280:	b508      	push	{r3, lr}
   e1282:	4b02      	ldr	r3, [pc, #8]	; (e128c <network_connect+0xc>)
   e1284:	681b      	ldr	r3, [r3, #0]
   e1286:	685b      	ldr	r3, [r3, #4]
   e1288:	9301      	str	r3, [sp, #4]
   e128a:	bd08      	pop	{r3, pc}
   e128c:	00030240 	.word	0x00030240

000e1290 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   e1290:	b508      	push	{r3, lr}
   e1292:	4b02      	ldr	r3, [pc, #8]	; (e129c <network_connecting+0xc>)
   e1294:	681b      	ldr	r3, [r3, #0]
   e1296:	689b      	ldr	r3, [r3, #8]
   e1298:	9301      	str	r3, [sp, #4]
   e129a:	bd08      	pop	{r3, pc}
   e129c:	00030240 	.word	0x00030240

000e12a0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   e12a0:	b508      	push	{r3, lr}
   e12a2:	4b02      	ldr	r3, [pc, #8]	; (e12ac <network_disconnect+0xc>)
   e12a4:	681b      	ldr	r3, [r3, #0]
   e12a6:	68db      	ldr	r3, [r3, #12]
   e12a8:	9301      	str	r3, [sp, #4]
   e12aa:	bd08      	pop	{r3, pc}
   e12ac:	00030240 	.word	0x00030240

000e12b0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   e12b0:	b508      	push	{r3, lr}
   e12b2:	4b02      	ldr	r3, [pc, #8]	; (e12bc <network_ready+0xc>)
   e12b4:	681b      	ldr	r3, [r3, #0]
   e12b6:	691b      	ldr	r3, [r3, #16]
   e12b8:	9301      	str	r3, [sp, #4]
   e12ba:	bd08      	pop	{r3, pc}
   e12bc:	00030240 	.word	0x00030240

000e12c0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   e12c0:	b508      	push	{r3, lr}
   e12c2:	4b02      	ldr	r3, [pc, #8]	; (e12cc <network_on+0xc>)
   e12c4:	681b      	ldr	r3, [r3, #0]
   e12c6:	695b      	ldr	r3, [r3, #20]
   e12c8:	9301      	str	r3, [sp, #4]
   e12ca:	bd08      	pop	{r3, pc}
   e12cc:	00030240 	.word	0x00030240

000e12d0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   e12d0:	b508      	push	{r3, lr}
   e12d2:	4b02      	ldr	r3, [pc, #8]	; (e12dc <network_off+0xc>)
   e12d4:	681b      	ldr	r3, [r3, #0]
   e12d6:	699b      	ldr	r3, [r3, #24]
   e12d8:	9301      	str	r3, [sp, #4]
   e12da:	bd08      	pop	{r3, pc}
   e12dc:	00030240 	.word	0x00030240

000e12e0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   e12e0:	b508      	push	{r3, lr}
   e12e2:	4b02      	ldr	r3, [pc, #8]	; (e12ec <network_listen+0xc>)
   e12e4:	681b      	ldr	r3, [r3, #0]
   e12e6:	69db      	ldr	r3, [r3, #28]
   e12e8:	9301      	str	r3, [sp, #4]
   e12ea:	bd08      	pop	{r3, pc}
   e12ec:	00030240 	.word	0x00030240

000e12f0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   e12f0:	b508      	push	{r3, lr}
   e12f2:	4b02      	ldr	r3, [pc, #8]	; (e12fc <network_listening+0xc>)
   e12f4:	681b      	ldr	r3, [r3, #0]
   e12f6:	6a1b      	ldr	r3, [r3, #32]
   e12f8:	9301      	str	r3, [sp, #4]
   e12fa:	bd08      	pop	{r3, pc}
   e12fc:	00030240 	.word	0x00030240

000e1300 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   e1300:	b508      	push	{r3, lr}
   e1302:	4b02      	ldr	r3, [pc, #8]	; (e130c <network_set_listen_timeout+0xc>)
   e1304:	681b      	ldr	r3, [r3, #0]
   e1306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e1308:	9301      	str	r3, [sp, #4]
   e130a:	bd08      	pop	{r3, pc}
   e130c:	00030240 	.word	0x00030240

000e1310 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   e1310:	b508      	push	{r3, lr}
   e1312:	4b02      	ldr	r3, [pc, #8]	; (e131c <network_get_listen_timeout+0xc>)
   e1314:	681b      	ldr	r3, [r3, #0]
   e1316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   e1318:	9301      	str	r3, [sp, #4]
   e131a:	bd08      	pop	{r3, pc}
   e131c:	00030240 	.word	0x00030240

000e1320 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   e1320:	b508      	push	{r3, lr}
   e1322:	4b02      	ldr	r3, [pc, #8]	; (e132c <network_is_on+0xc>)
   e1324:	681b      	ldr	r3, [r3, #0]
   e1326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   e1328:	9301      	str	r3, [sp, #4]
   e132a:	bd08      	pop	{r3, pc}
   e132c:	00030240 	.word	0x00030240

000e1330 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   e1330:	b508      	push	{r3, lr}
   e1332:	4b02      	ldr	r3, [pc, #8]	; (e133c <network_is_off+0xc>)
   e1334:	681b      	ldr	r3, [r3, #0]
   e1336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   e1338:	9301      	str	r3, [sp, #4]
   e133a:	bd08      	pop	{r3, pc}
   e133c:	00030240 	.word	0x00030240

000e1340 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   e1340:	b508      	push	{r3, lr}
   e1342:	4b02      	ldr	r3, [pc, #8]	; (e134c <malloc+0xc>)
   e1344:	681b      	ldr	r3, [r3, #0]
   e1346:	681b      	ldr	r3, [r3, #0]
   e1348:	9301      	str	r3, [sp, #4]
   e134a:	bd08      	pop	{r3, pc}
   e134c:	0003021c 	.word	0x0003021c

000e1350 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   e1350:	b508      	push	{r3, lr}
   e1352:	4b02      	ldr	r3, [pc, #8]	; (e135c <free+0xc>)
   e1354:	681b      	ldr	r3, [r3, #0]
   e1356:	685b      	ldr	r3, [r3, #4]
   e1358:	9301      	str	r3, [sp, #4]
   e135a:	bd08      	pop	{r3, pc}
   e135c:	0003021c 	.word	0x0003021c

000e1360 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   e1360:	b508      	push	{r3, lr}
   e1362:	4b02      	ldr	r3, [pc, #8]	; (e136c <realloc+0xc>)
   e1364:	681b      	ldr	r3, [r3, #0]
   e1366:	689b      	ldr	r3, [r3, #8]
   e1368:	9301      	str	r3, [sp, #4]
   e136a:	bd08      	pop	{r3, pc}
   e136c:	0003021c 	.word	0x0003021c

000e1370 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   e1370:	b508      	push	{r3, lr}
   e1372:	4b02      	ldr	r3, [pc, #8]	; (e137c <sprintf+0xc>)
   e1374:	681b      	ldr	r3, [r3, #0]
   e1376:	68db      	ldr	r3, [r3, #12]
   e1378:	9301      	str	r3, [sp, #4]
   e137a:	bd08      	pop	{r3, pc}
   e137c:	0003021c 	.word	0x0003021c

000e1380 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   e1380:	b508      	push	{r3, lr}
   e1382:	4b02      	ldr	r3, [pc, #8]	; (e138c <sscanf+0xc>)
   e1384:	681b      	ldr	r3, [r3, #0]
   e1386:	695b      	ldr	r3, [r3, #20]
   e1388:	9301      	str	r3, [sp, #4]
   e138a:	bd08      	pop	{r3, pc}
   e138c:	0003021c 	.word	0x0003021c

000e1390 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   e1390:	b508      	push	{r3, lr}
   e1392:	4b02      	ldr	r3, [pc, #8]	; (e139c <snprintf+0xc>)
   e1394:	681b      	ldr	r3, [r3, #0]
   e1396:	69db      	ldr	r3, [r3, #28]
   e1398:	9301      	str	r3, [sp, #4]
   e139a:	bd08      	pop	{r3, pc}
   e139c:	0003021c 	.word	0x0003021c

000e13a0 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   e13a0:	b508      	push	{r3, lr}
   e13a2:	4b02      	ldr	r3, [pc, #8]	; (e13ac <vsnprintf+0xc>)
   e13a4:	681b      	ldr	r3, [r3, #0]
   e13a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   e13a8:	9301      	str	r3, [sp, #4]
   e13aa:	bd08      	pop	{r3, pc}
   e13ac:	0003021c 	.word	0x0003021c

000e13b0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   e13b0:	b508      	push	{r3, lr}
   e13b2:	4b02      	ldr	r3, [pc, #8]	; (e13bc <abort+0xc>)
   e13b4:	681b      	ldr	r3, [r3, #0]
   e13b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   e13b8:	9301      	str	r3, [sp, #4]
   e13ba:	bd08      	pop	{r3, pc}
   e13bc:	0003021c 	.word	0x0003021c

000e13c0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   e13c0:	b508      	push	{r3, lr}
   e13c2:	4b02      	ldr	r3, [pc, #8]	; (e13cc <_malloc_r+0xc>)
   e13c4:	681b      	ldr	r3, [r3, #0]
   e13c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e13c8:	9301      	str	r3, [sp, #4]
   e13ca:	bd08      	pop	{r3, pc}
   e13cc:	0003021c 	.word	0x0003021c

000e13d0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   e13d0:	b508      	push	{r3, lr}
   e13d2:	4b02      	ldr	r3, [pc, #8]	; (e13dc <__errno+0xc>)
   e13d4:	681b      	ldr	r3, [r3, #0]
   e13d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   e13d8:	9301      	str	r3, [sp, #4]
   e13da:	bd08      	pop	{r3, pc}
   e13dc:	0003021c 	.word	0x0003021c

000e13e0 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   e13e0:	b508      	push	{r3, lr}
   e13e2:	4b02      	ldr	r3, [pc, #8]	; (e13ec <newlib_impure_ptr_callback+0xc>)
   e13e4:	681b      	ldr	r3, [r3, #0]
   e13e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   e13e8:	9301      	str	r3, [sp, #4]
   e13ea:	bd08      	pop	{r3, pc}
   e13ec:	0003021c 	.word	0x0003021c

000e13f0 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   e13f0:	428a      	cmp	r2, r1
{
   e13f2:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   e13f4:	d007      	beq.n	e1406 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   e13f6:	9c02      	ldr	r4, [sp, #8]
   e13f8:	1a40      	subs	r0, r0, r1
   e13fa:	1ae4      	subs	r4, r4, r3
   e13fc:	4360      	muls	r0, r4
   e13fe:	1a52      	subs	r2, r2, r1
   e1400:	fb90 f0f2 	sdiv	r0, r0, r2
   e1404:	4418      	add	r0, r3
}
   e1406:	bd10      	pop	{r4, pc}

000e1408 <_Z3mapddddd>:

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
   e1408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e140c:	ec55 4b11 	vmov	r4, r5, d1
   e1410:	ec57 6b12 	vmov	r6, r7, d2
   e1414:	b085      	sub	sp, #20
    if (fromEnd == fromStart) {
   e1416:	ee11 2a10 	vmov	r2, s2
   e141a:	ee12 0a10 	vmov	r0, s4
   e141e:	462b      	mov	r3, r5
   e1420:	4639      	mov	r1, r7
{
   e1422:	ed8d 0b02 	vstr	d0, [sp, #8]
   e1426:	ed8d 4b00 	vstr	d4, [sp]
   e142a:	ec5b ab13 	vmov	sl, fp, d3
    if (fromEnd == fromStart) {
   e142e:	f003 feb5 	bl	e519c <__aeabi_dcmpeq>
   e1432:	ed9d 0b02 	vldr	d0, [sp, #8]
   e1436:	bb38      	cbnz	r0, e1488 <_Z3mapddddd+0x80>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   e1438:	ec51 0b10 	vmov	r0, r1, d0
   e143c:	4622      	mov	r2, r4
   e143e:	462b      	mov	r3, r5
   e1440:	f003 fa8c 	bl	e495c <__aeabi_dsub>
   e1444:	4652      	mov	r2, sl
   e1446:	4680      	mov	r8, r0
   e1448:	4689      	mov	r9, r1
   e144a:	465b      	mov	r3, fp
   e144c:	e9dd 0100 	ldrd	r0, r1, [sp]
   e1450:	f003 fa84 	bl	e495c <__aeabi_dsub>
   e1454:	4602      	mov	r2, r0
   e1456:	460b      	mov	r3, r1
   e1458:	4640      	mov	r0, r8
   e145a:	4649      	mov	r1, r9
   e145c:	f003 fc36 	bl	e4ccc <__aeabi_dmul>
   e1460:	4622      	mov	r2, r4
   e1462:	4680      	mov	r8, r0
   e1464:	4689      	mov	r9, r1
   e1466:	462b      	mov	r3, r5
   e1468:	4630      	mov	r0, r6
   e146a:	4639      	mov	r1, r7
   e146c:	f003 fa76 	bl	e495c <__aeabi_dsub>
   e1470:	4602      	mov	r2, r0
   e1472:	460b      	mov	r3, r1
   e1474:	4640      	mov	r0, r8
   e1476:	4649      	mov	r1, r9
   e1478:	f003 fd52 	bl	e4f20 <__aeabi_ddiv>
   e147c:	4652      	mov	r2, sl
   e147e:	465b      	mov	r3, fp
   e1480:	f003 fa6e 	bl	e4960 <__adddf3>
   e1484:	ec41 0b10 	vmov	d0, r0, r1
}
   e1488:	b005      	add	sp, #20
   e148a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e148e <delay>:

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   e148e:	2100      	movs	r1, #0
   e1490:	f7ff be58 	b.w	e1144 <system_delay_ms>

000e1494 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   e1494:	b510      	push	{r4, lr}
      if (_M_empty())
   e1496:	6883      	ldr	r3, [r0, #8]
   e1498:	4604      	mov	r4, r0
   e149a:	b90b      	cbnz	r3, e14a0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   e149c:	f003 f9f9 	bl	e4892 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   e14a0:	68c3      	ldr	r3, [r0, #12]
   e14a2:	4798      	blx	r3
      if (_M_manager)
   e14a4:	68a3      	ldr	r3, [r4, #8]
   e14a6:	b11b      	cbz	r3, e14b0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   e14a8:	2203      	movs	r2, #3
   e14aa:	4621      	mov	r1, r4
   e14ac:	4620      	mov	r0, r4
   e14ae:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   e14b0:	4620      	mov	r0, r4
   e14b2:	2110      	movs	r1, #16
}
   e14b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   e14b8:	f003 b9e5 	b.w	e4886 <_ZdlPvj>

000e14bc <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   e14bc:	b510      	push	{r4, lr}
   e14be:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   e14c0:	6800      	ldr	r0, [r0, #0]
   e14c2:	b108      	cbz	r0, e14c8 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   e14c4:	f7ff fbfe 	bl	e0cc4 <os_mutex_recursive_destroy>
    }
   e14c8:	4620      	mov	r0, r4
   e14ca:	bd10      	pop	{r4, pc}

000e14cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   e14cc:	680b      	ldr	r3, [r1, #0]
   e14ce:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   e14d0:	b113      	cbz	r3, e14d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   e14d2:	685a      	ldr	r2, [r3, #4]
   e14d4:	3201      	adds	r2, #1
   e14d6:	605a      	str	r2, [r3, #4]
      }
   e14d8:	4770      	bx	lr
	...

000e14dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   e14dc:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   e14de:	4c06      	ldr	r4, [pc, #24]	; (e14f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   e14e0:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   e14e2:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   e14e4:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   e14e6:	f7ff fbe5 	bl	e0cb4 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   e14ea:	4620      	mov	r0, r4
   e14ec:	4a03      	ldr	r2, [pc, #12]	; (e14fc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   e14ee:	4904      	ldr	r1, [pc, #16]	; (e1500 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   e14f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   e14f4:	f003 b9c2 	b.w	e487c <__aeabi_atexit>
   e14f8:	2003e5d4 	.word	0x2003e5d4
   e14fc:	2003d9f8 	.word	0x2003d9f8
   e1500:	000e14bd 	.word	0x000e14bd

000e1504 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   e1504:	2200      	movs	r2, #0
   e1506:	6840      	ldr	r0, [r0, #4]
   e1508:	4611      	mov	r1, r2
   e150a:	f7ff bed1 	b.w	e12b0 <network_ready>

000e150e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   e150e:	2200      	movs	r2, #0
   e1510:	6840      	ldr	r0, [r0, #4]
   e1512:	4611      	mov	r1, r2
   e1514:	f7ff beec 	b.w	e12f0 <network_listening>

000e1518 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   e1518:	2200      	movs	r2, #0
   e151a:	6840      	ldr	r0, [r0, #4]
   e151c:	4611      	mov	r1, r2
   e151e:	f7ff bef7 	b.w	e1310 <network_get_listen_timeout>

000e1522 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   e1522:	6840      	ldr	r0, [r0, #4]
   e1524:	2200      	movs	r2, #0
   e1526:	f7ff beeb 	b.w	e1300 <network_set_listen_timeout>

000e152a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   e152a:	6840      	ldr	r0, [r0, #4]
   e152c:	2200      	movs	r2, #0
   e152e:	f081 0101 	eor.w	r1, r1, #1
   e1532:	f7ff bed5 	b.w	e12e0 <network_listen>

000e1536 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   e1536:	2300      	movs	r3, #0
   e1538:	6840      	ldr	r0, [r0, #4]
   e153a:	461a      	mov	r2, r3
   e153c:	4619      	mov	r1, r3
   e153e:	f7ff bec7 	b.w	e12d0 <network_off>

000e1542 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   e1542:	2300      	movs	r3, #0
   e1544:	6840      	ldr	r0, [r0, #4]
   e1546:	461a      	mov	r2, r3
   e1548:	4619      	mov	r1, r3
   e154a:	f7ff beb9 	b.w	e12c0 <network_on>

000e154e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   e154e:	2200      	movs	r2, #0
   e1550:	6840      	ldr	r0, [r0, #4]
   e1552:	4611      	mov	r1, r2
   e1554:	f7ff be9c 	b.w	e1290 <network_connecting>

000e1558 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   e1558:	6840      	ldr	r0, [r0, #4]
   e155a:	2200      	movs	r2, #0
   e155c:	2102      	movs	r1, #2
   e155e:	f7ff be9f 	b.w	e12a0 <network_disconnect>

000e1562 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   e1562:	2300      	movs	r3, #0
   e1564:	6840      	ldr	r0, [r0, #4]
   e1566:	461a      	mov	r2, r3
   e1568:	f7ff be8a 	b.w	e1280 <network_connect>

000e156c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   e156c:	4b08      	ldr	r3, [pc, #32]	; (e1590 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   e156e:	b510      	push	{r4, lr}
   e1570:	2428      	movs	r4, #40	; 0x28
   e1572:	4622      	mov	r2, r4
   e1574:	4618      	mov	r0, r3
   e1576:	2100      	movs	r1, #0
   e1578:	f004 f89a 	bl	e56b0 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   e157c:	4b05      	ldr	r3, [pc, #20]	; (e1594 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   e157e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   e1580:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   e1584:	6042      	str	r2, [r0, #4]
   e1586:	2204      	movs	r2, #4
   e1588:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   e158a:	4a03      	ldr	r2, [pc, #12]	; (e1598 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   e158c:	601a      	str	r2, [r3, #0]
   e158e:	bd10      	pop	{r4, pc}
   e1590:	2003e5e0 	.word	0x2003e5e0
   e1594:	2003e5d8 	.word	0x2003e5d8
   e1598:	000e8758 	.word	0x000e8758

000e159c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   e159c:	4770      	bx	lr

000e159e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   e159e:	2000      	movs	r0, #0
   e15a0:	4770      	bx	lr

000e15a2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   e15a2:	b510      	push	{r4, lr}
   e15a4:	2110      	movs	r1, #16
   e15a6:	4604      	mov	r4, r0
   e15a8:	f003 f96d 	bl	e4886 <_ZdlPvj>
   e15ac:	4620      	mov	r0, r4
   e15ae:	bd10      	pop	{r4, pc}

000e15b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   e15b0:	b508      	push	{r3, lr}
      { delete this; }
   e15b2:	f7ff fff6 	bl	e15a2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   e15b6:	bd08      	pop	{r3, pc}

000e15b8 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   e15b8:	b530      	push	{r4, r5, lr}
        type_(type) {
   e15ba:	2200      	movs	r2, #0
   e15bc:	f64f 749c 	movw	r4, #65436	; 0xff9c
   e15c0:	6002      	str	r2, [r0, #0]
   e15c2:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   e15c4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   e15c6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   e15c8:	680c      	ldr	r4, [r1, #0]
   e15ca:	8085      	strh	r5, [r0, #4]
   e15cc:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   e15ce:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   e15d0:	bd30      	pop	{r4, r5, pc}

000e15d2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   e15d2:	b510      	push	{r4, lr}
   e15d4:	4604      	mov	r4, r0
    free((void*)msg_);
   e15d6:	6800      	ldr	r0, [r0, #0]
   e15d8:	f7ff feba 	bl	e1350 <free>
}
   e15dc:	4620      	mov	r0, r4
   e15de:	bd10      	pop	{r4, pc}

000e15e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   e15e0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   e15e2:	68c4      	ldr	r4, [r0, #12]
   e15e4:	b1f4      	cbz	r4, e1624 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   e15e6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   e15e8:	2b02      	cmp	r3, #2
   e15ea:	d103      	bne.n	e15f4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   e15ec:	f104 000c 	add.w	r0, r4, #12
   e15f0:	f7ff ffef 	bl	e15d2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   e15f4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   e15f6:	b135      	cbz	r5, e1606 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   e15f8:	4628      	mov	r0, r5
   e15fa:	f7fc fb4c 	bl	ddc96 <_ZNSt14_Function_baseD1Ev>
   e15fe:	2110      	movs	r1, #16
   e1600:	4628      	mov	r0, r5
   e1602:	f003 f940 	bl	e4886 <_ZdlPvj>
   e1606:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   e1608:	b135      	cbz	r5, e1618 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   e160a:	4628      	mov	r0, r5
   e160c:	f7fc fb43 	bl	ddc96 <_ZNSt14_Function_baseD1Ev>
   e1610:	2110      	movs	r1, #16
   e1612:	4628      	mov	r0, r5
   e1614:	f003 f937 	bl	e4886 <_ZdlPvj>
   e1618:	4620      	mov	r0, r4
   e161a:	2114      	movs	r1, #20
   e161c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   e1620:	f003 b931 	b.w	e4886 <_ZdlPvj>
   e1624:	bd38      	pop	{r3, r4, r5, pc}

000e1626 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   e1626:	b510      	push	{r4, lr}
   e1628:	b088      	sub	sp, #32
   e162a:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   e162c:	4668      	mov	r0, sp
   e162e:	f002 faee 	bl	e3c0e <_ZN6StringC1EPKc>
    return (*fn)(p);
   e1632:	4669      	mov	r1, sp
   e1634:	a804      	add	r0, sp, #16
   e1636:	f002 fb35 	bl	e3ca4 <_ZN6StringC1ERKS_>
   e163a:	a804      	add	r0, sp, #16
   e163c:	47a0      	blx	r4
   e163e:	4604      	mov	r4, r0
   e1640:	a804      	add	r0, sp, #16
   e1642:	f002 fa99 	bl	e3b78 <_ZN6StringD1Ev>
    String p(param);
   e1646:	4668      	mov	r0, sp
   e1648:	f002 fa96 	bl	e3b78 <_ZN6StringD1Ev>
}
   e164c:	4620      	mov	r0, r4
   e164e:	b008      	add	sp, #32
   e1650:	bd10      	pop	{r4, pc}

000e1652 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   e1652:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   e1654:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   e1656:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   e165a:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   e165c:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   e165e:	461a      	mov	r2, r3
   e1660:	4669      	mov	r1, sp
   e1662:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   e1664:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   e1668:	f8ad 4000 	strh.w	r4, [sp]
   e166c:	f7ff fdc8 	bl	e1200 <spark_function>
}
   e1670:	b004      	add	sp, #16
   e1672:	bd10      	pop	{r4, pc}

000e1674 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   e1674:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   e1676:	460e      	mov	r6, r1
   e1678:	4604      	mov	r4, r0
   e167a:	f856 3b04 	ldr.w	r3, [r6], #4
   e167e:	9300      	str	r3, [sp, #0]
   e1680:	460d      	mov	r5, r1
   e1682:	a801      	add	r0, sp, #4
   e1684:	4631      	mov	r1, r6
   e1686:	f7ff ff21 	bl	e14cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   e168a:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   e168c:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   e168e:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   e1690:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   e1692:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   e1694:	2300      	movs	r3, #0
   e1696:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   e1698:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   e169a:	f7f9 f828 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   e169e:	4630      	mov	r0, r6
   e16a0:	f7f9 f825 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   e16a4:	4628      	mov	r0, r5
   e16a6:	2108      	movs	r1, #8
   e16a8:	f003 f8ed 	bl	e4886 <_ZdlPvj>
        return p;
    }
   e16ac:	4620      	mov	r0, r4
   e16ae:	b002      	add	sp, #8
   e16b0:	bd70      	pop	{r4, r5, r6, pc}

000e16b2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   e16b2:	b513      	push	{r0, r1, r4, lr}
   e16b4:	460b      	mov	r3, r1
   e16b6:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e16b8:	e9d0 0100 	ldrd	r0, r1, [r0]
   e16bc:	466c      	mov	r4, sp
   e16be:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   e16c2:	e893 0003 	ldmia.w	r3, {r0, r1}
   e16c6:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   e16ca:	e894 0003 	ldmia.w	r4, {r0, r1}
   e16ce:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   e16d2:	b002      	add	sp, #8
   e16d4:	bd10      	pop	{r4, pc}

000e16d6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   e16d6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   e16d8:	b510      	push	{r4, lr}
      if (_M_empty())
   e16da:	b90a      	cbnz	r2, e16e0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   e16dc:	f003 f8d9 	bl	e4892 <_ZSt25__throw_bad_function_callv>
    }
   e16e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   e16e4:	68c3      	ldr	r3, [r0, #12]
   e16e6:	4718      	bx	r3

000e16e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   e16e8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   e16ea:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   e16ec:	f100 0110 	add.w	r1, r0, #16
   e16f0:	f7ff fff1 	bl	e16d6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   e16f4:	bd08      	pop	{r3, pc}

000e16f6 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   e16f6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   e16f8:	b510      	push	{r4, lr}
      if (_M_empty())
   e16fa:	b90a      	cbnz	r2, e1700 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   e16fc:	f003 f8c9 	bl	e4892 <_ZSt25__throw_bad_function_callv>
    }
   e1700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   e1704:	68c3      	ldr	r3, [r0, #12]
   e1706:	4718      	bx	r3

000e1708 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   e1708:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   e170a:	6800      	ldr	r0, [r0, #0]
   e170c:	f100 0110 	add.w	r1, r0, #16
   e1710:	f7ff fff1 	bl	e16f6 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   e1714:	bd08      	pop	{r3, pc}
	...

000e1718 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   e1718:	b538      	push	{r3, r4, r5, lr}
   e171a:	2300      	movs	r3, #0
   e171c:	4604      	mov	r4, r0
   e171e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   e1720:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   e1722:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   e1724:	f7f2 fcb7 	bl	d4096 <_Znwj>
   e1728:	b128      	cbz	r0, e1736 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   e172a:	2301      	movs	r3, #1
   e172c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   e1730:	4b02      	ldr	r3, [pc, #8]	; (e173c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   e1732:	6003      	str	r3, [r0, #0]
   e1734:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   e1736:	6020      	str	r0, [r4, #0]
	}
   e1738:	4620      	mov	r0, r4
   e173a:	bd38      	pop	{r3, r4, r5, pc}
   e173c:	000e8794 	.word	0x000e8794

000e1740 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   e1740:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   e1742:	2300      	movs	r3, #0
   e1744:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   e1746:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   e1748:	4604      	mov	r4, r0
   e174a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   e174c:	b12b      	cbz	r3, e175a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   e174e:	2202      	movs	r2, #2
   e1750:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   e1752:	68eb      	ldr	r3, [r5, #12]
   e1754:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   e1756:	68ab      	ldr	r3, [r5, #8]
   e1758:	60a3      	str	r3, [r4, #8]
    }
   e175a:	4620      	mov	r0, r4
   e175c:	bd38      	pop	{r3, r4, r5, pc}
	...

000e1760 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   e1760:	b5f0      	push	{r4, r5, r6, r7, lr}
   e1762:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   e1764:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   e1766:	4668      	mov	r0, sp
   e1768:	f7ff ff26 	bl	e15b8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   e176c:	f04f 0302 	mov.w	r3, #2
   e1770:	e8d4 2f4f 	ldrexb	r2, [r4]
   e1774:	2a00      	cmp	r2, #0
   e1776:	d103      	bne.n	e1780 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   e1778:	e8c4 3f41 	strexb	r1, r3, [r4]
   e177c:	2900      	cmp	r1, #0
   e177e:	d1f7      	bne.n	e1770 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   e1780:	d125      	bne.n	e17ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   e1782:	f104 050c 	add.w	r5, r4, #12
   e1786:	4669      	mov	r1, sp
   e1788:	4628      	mov	r0, r5
   e178a:	f7ff ff15 	bl	e15b8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   e178e:	f3bf 8f5b 	dmb	ish
   e1792:	2301      	movs	r3, #1
   e1794:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   e1796:	2000      	movs	r0, #0
   e1798:	f104 0308 	add.w	r3, r4, #8
   e179c:	f3bf 8f5b 	dmb	ish
   e17a0:	e853 6f00 	ldrex	r6, [r3]
   e17a4:	e843 0200 	strex	r2, r0, [r3]
   e17a8:	2a00      	cmp	r2, #0
   e17aa:	d1f9      	bne.n	e17a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   e17ac:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   e17b0:	b16e      	cbz	r6, e17ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   e17b2:	f7ff fce7 	bl	e1184 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   e17b6:	b178      	cbz	r0, e17d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   e17b8:	4629      	mov	r1, r5
   e17ba:	4630      	mov	r0, r6
   e17bc:	f7ff ff8b 	bl	e16d6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   e17c0:	4630      	mov	r0, r6
   e17c2:	f7fc fa68 	bl	ddc96 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   e17c6:	2110      	movs	r1, #16
   e17c8:	4630      	mov	r0, r6
   e17ca:	f003 f85c 	bl	e4886 <_ZdlPvj>
        p_->setError(std::move(error));
   e17ce:	4668      	mov	r0, sp
   e17d0:	f7ff feff 	bl	e15d2 <_ZN8particle5ErrorD1Ev>
    }
   e17d4:	b009      	add	sp, #36	; 0x24
   e17d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   e17d8:	4631      	mov	r1, r6
   e17da:	a802      	add	r0, sp, #8
   e17dc:	f7ff ffb0 	bl	e1740 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   e17e0:	68e0      	ldr	r0, [r4, #12]
   e17e2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   e17e6:	b108      	cbz	r0, e17ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   e17e8:	f003 ffb8 	bl	e575c <strdup>
        type_(type) {
   e17ec:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   e17ee:	2010      	movs	r0, #16
   e17f0:	f8ad 501c 	strh.w	r5, [sp, #28]
   e17f4:	f7f2 fc4f 	bl	d4096 <_Znwj>
   e17f8:	4605      	mov	r5, r0
   e17fa:	b1e8      	cbz	r0, e1838 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   e17fc:	2700      	movs	r7, #0
   e17fe:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   e1800:	2018      	movs	r0, #24
   e1802:	f7f2 fc48 	bl	d4096 <_Znwj>
   e1806:	4604      	mov	r4, r0
   e1808:	b188      	cbz	r0, e182e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   e180a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   e180c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   e180e:	a802      	add	r0, sp, #8
   e1810:	f7ff ff4f 	bl	e16b2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e1814:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   e1816:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   e1818:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e181a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   e181c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   e181e:	a906      	add	r1, sp, #24
   e1820:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   e1822:	60e3      	str	r3, [r4, #12]
   e1824:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   e1828:	9205      	str	r2, [sp, #20]
   e182a:	f7ff fec5 	bl	e15b8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   e182e:	4b08      	ldr	r3, [pc, #32]	; (e1850 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   e1830:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   e1832:	4b08      	ldr	r3, [pc, #32]	; (e1854 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   e1834:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   e1836:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   e1838:	a806      	add	r0, sp, #24
   e183a:	f7ff feca 	bl	e15d2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   e183e:	a802      	add	r0, sp, #8
   e1840:	f7fc fa29 	bl	ddc96 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   e1844:	2200      	movs	r2, #0
   e1846:	4629      	mov	r1, r5
   e1848:	4803      	ldr	r0, [pc, #12]	; (e1858 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   e184a:	f7ff fca3 	bl	e1194 <application_thread_invoke>
   e184e:	e7b7      	b.n	e17c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   e1850:	000e16e9 	.word	0x000e16e9
   e1854:	000e1981 	.word	0x000e1981
   e1858:	000e1495 	.word	0x000e1495

000e185c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   e185c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e1860:	b08a      	sub	sp, #40	; 0x28
   e1862:	4605      	mov	r5, r0
   e1864:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   e1868:	460c      	mov	r4, r1
   e186a:	4617      	mov	r7, r2
   e186c:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   e186e:	f7ff fcdf 	bl	e1230 <spark_cloud_flag_connected>
   e1872:	ae07      	add	r6, sp, #28
    if (!connected()) {
   e1874:	4682      	mov	sl, r0
   e1876:	bb38      	cbnz	r0, e18c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   e1878:	f64f 732e 	movw	r3, #65326	; 0xff2e
   e187c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   e187e:	a905      	add	r1, sp, #20
   e1880:	4630      	mov	r0, r6
   e1882:	f8ad 3018 	strh.w	r3, [sp, #24]
   e1886:	f7ff fe97 	bl	e15b8 <_ZN8particle5ErrorC1EOS0_>
   e188a:	2014      	movs	r0, #20
   e188c:	f7f2 fc03 	bl	d4096 <_Znwj>
   e1890:	4604      	mov	r4, r0
   e1892:	b148      	cbz	r0, e18a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   e1894:	2302      	movs	r3, #2
   e1896:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   e1898:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   e189a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   e189e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   e18a0:	4631      	mov	r1, r6
   e18a2:	300c      	adds	r0, #12
   e18a4:	f7ff fe88 	bl	e15b8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   e18a8:	4628      	mov	r0, r5
	: __shared_count(__p)
   e18aa:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   e18ac:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   e18b0:	f7ff ff32 	bl	e1718 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   e18b4:	4630      	mov	r0, r6
   e18b6:	f7ff fe8c 	bl	e15d2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   e18ba:	a805      	add	r0, sp, #20
   e18bc:	f7ff fe89 	bl	e15d2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   e18c0:	4628      	mov	r0, r5
   e18c2:	b00a      	add	sp, #40	; 0x28
   e18c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   e18c8:	230c      	movs	r3, #12
   e18ca:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   e18ce:	2014      	movs	r0, #20
   e18d0:	e9cd aa08 	strd	sl, sl, [sp, #32]
   e18d4:	9307      	str	r3, [sp, #28]
   e18d6:	f7f2 fbde 	bl	d4096 <_Znwj>
   e18da:	4601      	mov	r1, r0
   e18dc:	b128      	cbz	r0, e18ea <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   e18de:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   e18e2:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   e18e6:	f880 a001 	strb.w	sl, [r0, #1]
   e18ea:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   e18ec:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   e18ee:	f7ff ff13 	bl	e1718 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   e18f2:	4b22      	ldr	r3, [pc, #136]	; (e197c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   e18f4:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   e18f6:	2008      	movs	r0, #8
   e18f8:	f7f2 fbcd 	bl	d4096 <_Znwj>
   e18fc:	4682      	mov	sl, r0
   e18fe:	b128      	cbz	r0, e190c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   e1900:	9b03      	ldr	r3, [sp, #12]
   e1902:	f840 3b04 	str.w	r3, [r0], #4
   e1906:	a904      	add	r1, sp, #16
   e1908:	f7ff fde0 	bl	e14cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   e190c:	9600      	str	r6, [sp, #0]
   e190e:	fa5f f389 	uxtb.w	r3, r9
   e1912:	4642      	mov	r2, r8
   e1914:	4639      	mov	r1, r7
   e1916:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   e1918:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   e191c:	f7ff fc90 	bl	e1240 <spark_send_event>
   e1920:	b9b8      	cbnz	r0, e1952 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   e1922:	9b03      	ldr	r3, [sp, #12]
   e1924:	785b      	ldrb	r3, [r3, #1]
   e1926:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   e192a:	b993      	cbnz	r3, e1952 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   e192c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   e1930:	a905      	add	r1, sp, #20
   e1932:	a803      	add	r0, sp, #12
   e1934:	9205      	str	r2, [sp, #20]
   e1936:	f8ad 3018 	strh.w	r3, [sp, #24]
   e193a:	f7ff ff11 	bl	e1760 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   e193e:	a805      	add	r0, sp, #20
   e1940:	f7ff fe47 	bl	e15d2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   e1944:	a805      	add	r0, sp, #20
   e1946:	9909      	ldr	r1, [sp, #36]	; 0x24
   e1948:	f7ff fe94 	bl	e1674 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   e194c:	a806      	add	r0, sp, #24
   e194e:	f7f8 fece 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   e1952:	9b03      	ldr	r3, [sp, #12]
   e1954:	9305      	str	r3, [sp, #20]
   e1956:	a904      	add	r1, sp, #16
   e1958:	a806      	add	r0, sp, #24
   e195a:	f7ff fdb7 	bl	e14cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   e195e:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   e1960:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   e1962:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   e1964:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   e1966:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   e1968:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   e196a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   e196c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   e196e:	f7f8 febe 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   e1972:	a804      	add	r0, sp, #16
   e1974:	f7f8 febb 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   e1978:	e7a2      	b.n	e18c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   e197a:	bf00      	nop
   e197c:	000e1a45 	.word	0x000e1a45

000e1980 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   e1980:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   e1982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e1984:	4605      	mov	r5, r0
	  switch (__op)
   e1986:	d007      	beq.n	e1998 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   e1988:	2a03      	cmp	r2, #3
   e198a:	d018      	beq.n	e19be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   e198c:	2a01      	cmp	r2, #1
   e198e:	d101      	bne.n	e1994 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   e1990:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   e1992:	6003      	str	r3, [r0, #0]
	}
   e1994:	2000      	movs	r0, #0
   e1996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   e1998:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   e199a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   e199c:	f7f2 fb7b 	bl	d4096 <_Znwj>
   e19a0:	4604      	mov	r4, r0
   e19a2:	b150      	cbz	r0, e19ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   e19a4:	4631      	mov	r1, r6
   e19a6:	f7ff fecb 	bl	e1740 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   e19aa:	6930      	ldr	r0, [r6, #16]
   e19ac:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   e19b0:	b108      	cbz	r0, e19b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   e19b2:	f003 fed3 	bl	e575c <strdup>
        type_(type) {
   e19b6:	6120      	str	r0, [r4, #16]
   e19b8:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   e19ba:	602c      	str	r4, [r5, #0]
	}
   e19bc:	e7ea      	b.n	e1994 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   e19be:	6804      	ldr	r4, [r0, #0]
   e19c0:	2c00      	cmp	r4, #0
   e19c2:	d0e7      	beq.n	e1994 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   e19c4:	f104 0010 	add.w	r0, r4, #16
   e19c8:	f7ff fe03 	bl	e15d2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   e19cc:	4620      	mov	r0, r4
   e19ce:	f7fc f962 	bl	ddc96 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   e19d2:	2118      	movs	r1, #24
   e19d4:	4620      	mov	r0, r4
   e19d6:	f002 ff56 	bl	e4886 <_ZdlPvj>
   e19da:	e7db      	b.n	e1994 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000e19dc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   e19dc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   e19de:	2300      	movs	r3, #0
   e19e0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   e19e2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   e19e4:	4604      	mov	r4, r0
   e19e6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   e19e8:	b12b      	cbz	r3, e19f6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   e19ea:	2202      	movs	r2, #2
   e19ec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   e19ee:	68eb      	ldr	r3, [r5, #12]
   e19f0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   e19f2:	68ab      	ldr	r3, [r5, #8]
   e19f4:	60a3      	str	r3, [r4, #8]
    }
   e19f6:	4620      	mov	r0, r4
   e19f8:	bd38      	pop	{r3, r4, r5, pc}

000e19fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   e19fa:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   e19fc:	b570      	push	{r4, r5, r6, lr}
   e19fe:	4604      	mov	r4, r0
	  switch (__op)
   e1a00:	d007      	beq.n	e1a12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   e1a02:	2a03      	cmp	r2, #3
   e1a04:	d012      	beq.n	e1a2c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   e1a06:	2a01      	cmp	r2, #1
   e1a08:	d101      	bne.n	e1a0e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   e1a0a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   e1a0c:	6003      	str	r3, [r0, #0]
	}
   e1a0e:	2000      	movs	r0, #0
   e1a10:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   e1a12:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   e1a14:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   e1a16:	f7f2 fb3e 	bl	d4096 <_Znwj>
   e1a1a:	4605      	mov	r5, r0
   e1a1c:	b120      	cbz	r0, e1a28 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   e1a1e:	4631      	mov	r1, r6
   e1a20:	f7ff ffdc 	bl	e19dc <_ZNSt8functionIFvRKbEEC1ERKS3_>
   e1a24:	7c33      	ldrb	r3, [r6, #16]
   e1a26:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   e1a28:	6025      	str	r5, [r4, #0]
	}
   e1a2a:	e7f0      	b.n	e1a0e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   e1a2c:	6804      	ldr	r4, [r0, #0]
   e1a2e:	2c00      	cmp	r4, #0
   e1a30:	d0ed      	beq.n	e1a0e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   e1a32:	4620      	mov	r0, r4
   e1a34:	f7fc f92f 	bl	ddc96 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   e1a38:	2114      	movs	r1, #20
   e1a3a:	4620      	mov	r0, r4
   e1a3c:	f002 ff23 	bl	e4886 <_ZdlPvj>
   e1a40:	e7e5      	b.n	e1a0e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000e1a44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   e1a44:	b5f0      	push	{r4, r5, r6, r7, lr}
   e1a46:	b089      	sub	sp, #36	; 0x24
   e1a48:	4604      	mov	r4, r0
   e1a4a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   e1a4c:	a801      	add	r0, sp, #4
   e1a4e:	4611      	mov	r1, r2
   e1a50:	f7ff fe10 	bl	e1674 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   e1a54:	b1a4      	cbz	r4, e1a80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   e1a56:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   e1a58:	b11d      	cbz	r5, e1a62 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   e1a5a:	4628      	mov	r0, r5
   e1a5c:	f003 fe7e 	bl	e575c <strdup>
   e1a60:	4605      	mov	r5, r0
   e1a62:	a801      	add	r0, sp, #4
   e1a64:	a903      	add	r1, sp, #12
        type_(type) {
   e1a66:	9503      	str	r5, [sp, #12]
   e1a68:	f8ad 4010 	strh.w	r4, [sp, #16]
   e1a6c:	f7ff fe78 	bl	e1760 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   e1a70:	a803      	add	r0, sp, #12
   e1a72:	f7ff fdae 	bl	e15d2 <_ZN8particle5ErrorD1Ev>
   e1a76:	a802      	add	r0, sp, #8
   e1a78:	f7f8 fe39 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   e1a7c:	b009      	add	sp, #36	; 0x24
   e1a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   e1a80:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   e1a82:	2301      	movs	r3, #1
   e1a84:	e8d5 2f4f 	ldrexb	r2, [r5]
   e1a88:	2a00      	cmp	r2, #0
   e1a8a:	d103      	bne.n	e1a94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   e1a8c:	e8c5 3f41 	strexb	r1, r3, [r5]
   e1a90:	2900      	cmp	r1, #0
   e1a92:	d1f7      	bne.n	e1a84 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   e1a94:	d1ef      	bne.n	e1a76 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   e1a96:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   e1a98:	f3bf 8f5b 	dmb	ish
   e1a9c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   e1a9e:	1d2b      	adds	r3, r5, #4
   e1aa0:	f3bf 8f5b 	dmb	ish
   e1aa4:	e853 6f00 	ldrex	r6, [r3]
   e1aa8:	e843 4200 	strex	r2, r4, [r3]
   e1aac:	2a00      	cmp	r2, #0
   e1aae:	d1f9      	bne.n	e1aa4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   e1ab0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   e1ab4:	2e00      	cmp	r6, #0
   e1ab6:	d0de      	beq.n	e1a76 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   e1ab8:	4620      	mov	r0, r4
   e1aba:	f7ff fb63 	bl	e1184 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   e1abe:	4607      	mov	r7, r0
   e1ac0:	b160      	cbz	r0, e1adc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   e1ac2:	f105 010c 	add.w	r1, r5, #12
   e1ac6:	4630      	mov	r0, r6
   e1ac8:	f7ff fe15 	bl	e16f6 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   e1acc:	4630      	mov	r0, r6
   e1ace:	f7fc f8e2 	bl	ddc96 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   e1ad2:	2110      	movs	r1, #16
   e1ad4:	4630      	mov	r0, r6
   e1ad6:	f002 fed6 	bl	e4886 <_ZdlPvj>
   e1ada:	e7cc      	b.n	e1a76 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   e1adc:	4631      	mov	r1, r6
   e1ade:	a803      	add	r0, sp, #12
   e1ae0:	f7ff ff7c 	bl	e19dc <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   e1ae4:	7b2b      	ldrb	r3, [r5, #12]
   e1ae6:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   e1aea:	2010      	movs	r0, #16
   e1aec:	f7f2 fad3 	bl	d4096 <_Znwj>
   e1af0:	4605      	mov	r5, r0
   e1af2:	b1d0      	cbz	r0, e1b2a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   e1af4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   e1af6:	2014      	movs	r0, #20
   e1af8:	f7f2 facd 	bl	d4096 <_Znwj>
   e1afc:	4604      	mov	r4, r0
   e1afe:	b178      	cbz	r0, e1b20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   e1b00:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   e1b02:	4601      	mov	r1, r0
   e1b04:	a803      	add	r0, sp, #12
   e1b06:	f7ff fdd4 	bl	e16b2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e1b0a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   e1b0c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   e1b0e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e1b10:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   e1b12:	9205      	str	r2, [sp, #20]
   e1b14:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   e1b16:	60e3      	str	r3, [r4, #12]
   e1b18:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   e1b1c:	9206      	str	r2, [sp, #24]
   e1b1e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   e1b20:	4b06      	ldr	r3, [pc, #24]	; (e1b3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   e1b22:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   e1b24:	4b06      	ldr	r3, [pc, #24]	; (e1b40 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   e1b26:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   e1b28:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   e1b2a:	a803      	add	r0, sp, #12
   e1b2c:	f7fc f8b3 	bl	ddc96 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   e1b30:	2200      	movs	r2, #0
   e1b32:	4629      	mov	r1, r5
   e1b34:	4803      	ldr	r0, [pc, #12]	; (e1b44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   e1b36:	f7ff fb2d 	bl	e1194 <application_thread_invoke>
   e1b3a:	e7c7      	b.n	e1acc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   e1b3c:	000e1709 	.word	0x000e1709
   e1b40:	000e19fb 	.word	0x000e19fb
   e1b44:	000e1495 	.word	0x000e1495

000e1b48 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   e1b48:	2200      	movs	r2, #0
   e1b4a:	6840      	ldr	r0, [r0, #4]
   e1b4c:	4611      	mov	r1, r2
   e1b4e:	f7ff bbcf 	b.w	e12f0 <network_listening>

000e1b52 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   e1b52:	2200      	movs	r2, #0
   e1b54:	6840      	ldr	r0, [r0, #4]
   e1b56:	4611      	mov	r1, r2
   e1b58:	f7ff bbda 	b.w	e1310 <network_get_listen_timeout>

000e1b5c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   e1b5c:	6840      	ldr	r0, [r0, #4]
   e1b5e:	2200      	movs	r2, #0
   e1b60:	f7ff bbce 	b.w	e1300 <network_set_listen_timeout>

000e1b64 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   e1b64:	6840      	ldr	r0, [r0, #4]
   e1b66:	2200      	movs	r2, #0
   e1b68:	f081 0101 	eor.w	r1, r1, #1
   e1b6c:	f7ff bbb8 	b.w	e12e0 <network_listen>

000e1b70 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   e1b70:	2300      	movs	r3, #0
   e1b72:	6840      	ldr	r0, [r0, #4]
   e1b74:	461a      	mov	r2, r3
   e1b76:	4619      	mov	r1, r3
   e1b78:	f7ff bbaa 	b.w	e12d0 <network_off>

000e1b7c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   e1b7c:	2300      	movs	r3, #0
   e1b7e:	6840      	ldr	r0, [r0, #4]
   e1b80:	461a      	mov	r2, r3
   e1b82:	4619      	mov	r1, r3
   e1b84:	f7ff bb9c 	b.w	e12c0 <network_on>

000e1b88 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   e1b88:	2200      	movs	r2, #0
   e1b8a:	6840      	ldr	r0, [r0, #4]
   e1b8c:	4611      	mov	r1, r2
   e1b8e:	f7ff bb8f 	b.w	e12b0 <network_ready>

000e1b92 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   e1b92:	2200      	movs	r2, #0
   e1b94:	6840      	ldr	r0, [r0, #4]
   e1b96:	4611      	mov	r1, r2
   e1b98:	f7ff bb7a 	b.w	e1290 <network_connecting>

000e1b9c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   e1b9c:	6840      	ldr	r0, [r0, #4]
   e1b9e:	2200      	movs	r2, #0
   e1ba0:	2102      	movs	r1, #2
   e1ba2:	f7ff bb7d 	b.w	e12a0 <network_disconnect>

000e1ba6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   e1ba6:	2300      	movs	r3, #0
   e1ba8:	6840      	ldr	r0, [r0, #4]
   e1baa:	461a      	mov	r2, r3
   e1bac:	f7ff bb68 	b.w	e1280 <network_connect>

000e1bb0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   e1bb0:	4b02      	ldr	r3, [pc, #8]	; (e1bbc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   e1bb2:	2203      	movs	r2, #3
   e1bb4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   e1bb6:	4a02      	ldr	r2, [pc, #8]	; (e1bc0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   e1bb8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   e1bba:	4770      	bx	lr
   e1bbc:	2003e608 	.word	0x2003e608
   e1bc0:	000e87b0 	.word	0x000e87b0

000e1bc4 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   e1bc4:	6800      	ldr	r0, [r0, #0]
   e1bc6:	f000 b9f1 	b.w	e1fac <_ZN7TwoWire4lockEv>

000e1bca <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   e1bca:	b510      	push	{r4, lr}
   e1bcc:	4604      	mov	r4, r0
      lock_(_lock) {
   e1bce:	6001      	str	r1, [r0, #0]
   e1bd0:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   e1bd2:	b10a      	cbz	r2, e1bd8 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   e1bd4:	f7ff fff6 	bl	e1bc4 <_ZN9FuelGauge4lockEv>
}
   e1bd8:	4620      	mov	r0, r4
   e1bda:	bd10      	pop	{r4, pc}

000e1bdc <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   e1bdc:	b513      	push	{r0, r1, r4, lr}
   e1bde:	4604      	mov	r4, r0
   e1be0:	9101      	str	r1, [sp, #4]
            return &Wire1;
   e1be2:	f002 fe23 	bl	e482c <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   e1be6:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   e1be8:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   e1bea:	4620      	mov	r0, r4
   e1bec:	f7ff ffed 	bl	e1bca <_ZN9FuelGaugeC1ER7TwoWireb>
}
   e1bf0:	4620      	mov	r0, r4
   e1bf2:	b002      	add	sp, #8
   e1bf4:	bd10      	pop	{r4, pc}

000e1bf6 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   e1bf6:	6800      	ldr	r0, [r0, #0]
   e1bf8:	f000 b9e1 	b.w	e1fbe <_ZN7TwoWire6unlockEv>

000e1bfc <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
   e1bfc:	b510      	push	{r4, lr}
    if (lock_) {
   e1bfe:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
   e1c00:	4604      	mov	r4, r0
    if (lock_) {
   e1c02:	b10b      	cbz	r3, e1c08 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   e1c04:	f7ff fff7 	bl	e1bf6 <_ZN9FuelGauge6unlockEv>
}
   e1c08:	4620      	mov	r0, r4
   e1c0a:	bd10      	pop	{r4, pc}

000e1c0c <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   e1c0c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   e1c10:	4604      	mov	r4, r0
   e1c12:	460d      	mov	r5, r1
   e1c14:	4617      	mov	r7, r2
   e1c16:	461e      	mov	r6, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   e1c18:	f7ff ffd4 	bl	e1bc4 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   e1c1c:	2336      	movs	r3, #54	; 0x36
   e1c1e:	f88d 3000 	strb.w	r3, [sp]
   e1c22:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   e1c24:	6820      	ldr	r0, [r4, #0]
   e1c26:	9301      	str	r3, [sp, #4]
   e1c28:	f04f 0801 	mov.w	r8, #1
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   e1c2c:	230a      	movs	r3, #10
   e1c2e:	4669      	mov	r1, sp
   e1c30:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   e1c32:	f88d 8008 	strb.w	r8, [sp, #8]
   e1c36:	f000 f996 	bl	e1f66 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   e1c3a:	6820      	ldr	r0, [r4, #0]
   e1c3c:	6803      	ldr	r3, [r0, #0]
   e1c3e:	4629      	mov	r1, r5
   e1c40:	689b      	ldr	r3, [r3, #8]
   e1c42:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   e1c44:	6820      	ldr	r0, [r4, #0]
   e1c46:	4641      	mov	r1, r8
   e1c48:	f000 f9a5 	bl	e1f96 <_ZN7TwoWire15endTransmissionEh>
   e1c4c:	4605      	mov	r5, r0
   e1c4e:	b140      	cbz	r0, e1c62 <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
   e1c50:	f06f 059f 	mvn.w	r5, #159	; 0x9f

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   e1c54:	4620      	mov	r0, r4
   e1c56:	f7ff ffce 	bl	e1bf6 <_ZN9FuelGauge6unlockEv>
}
   e1c5a:	4628      	mov	r0, r5
   e1c5c:	b004      	add	sp, #16
   e1c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   e1c62:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   e1c64:	6820      	ldr	r0, [r4, #0]
   e1c66:	9301      	str	r3, [sp, #4]
   e1c68:	4669      	mov	r1, sp
   e1c6a:	f000 f949 	bl	e1f00 <_ZN7TwoWire11requestFromERK16WireTransmission>
   e1c6e:	2802      	cmp	r0, #2
   e1c70:	d1ee      	bne.n	e1c50 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
   e1c72:	6820      	ldr	r0, [r4, #0]
   e1c74:	6803      	ldr	r3, [r0, #0]
   e1c76:	695b      	ldr	r3, [r3, #20]
   e1c78:	4798      	blx	r3
   e1c7a:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   e1c7c:	6820      	ldr	r0, [r4, #0]
   e1c7e:	6803      	ldr	r3, [r0, #0]
   e1c80:	695b      	ldr	r3, [r3, #20]
   e1c82:	4798      	blx	r3
   e1c84:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   e1c86:	e7e5      	b.n	e1c54 <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>

000e1c88 <_ZN9FuelGauge6getSoCEv>:
float FuelGauge::getSoC() {
   e1c88:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   e1c8a:	2300      	movs	r3, #0
   e1c8c:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   e1c90:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   e1c94:	f10d 0206 	add.w	r2, sp, #6
   e1c98:	f10d 0307 	add.w	r3, sp, #7
   e1c9c:	2104      	movs	r1, #4
   e1c9e:	f7ff ffb5 	bl	e1c0c <_ZN9FuelGauge12readRegisterEhRhS0_>
   e1ca2:	b9b0      	cbnz	r0, e1cd2 <_ZN9FuelGauge6getSoCEv+0x4a>
        float decimal = LSB / 256.0;
   e1ca4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   e1ca8:	f002 ffa6 	bl	e4bf8 <__aeabi_i2d>
   e1cac:	4b0a      	ldr	r3, [pc, #40]	; (e1cd8 <_ZN9FuelGauge6getSoCEv+0x50>)
   e1cae:	2200      	movs	r2, #0
   e1cb0:	f003 f80c 	bl	e4ccc <__aeabi_dmul>
   e1cb4:	f003 fac4 	bl	e5240 <__aeabi_d2f>
        return MSB + decimal;
   e1cb8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   e1cbc:	ee00 3a10 	vmov	s0, r3
   e1cc0:	ee07 0a90 	vmov	s15, r0
   e1cc4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   e1cc8:	ee37 0a80 	vadd.f32	s0, s15, s0
}
   e1ccc:	b003      	add	sp, #12
   e1cce:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1.0f;
   e1cd2:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   e1cd6:	e7f9      	b.n	e1ccc <_ZN9FuelGauge6getSoCEv+0x44>
   e1cd8:	3f700000 	.word	0x3f700000

000e1cdc <_ZN9FuelGauge18readConfigRegisterERhS0_>:
int FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
   e1cdc:	4613      	mov	r3, r2
    return readRegister(CONFIG_REGISTER, MSB, LSB);
   e1cde:	460a      	mov	r2, r1
   e1ce0:	210c      	movs	r1, #12
   e1ce2:	f7ff bf93 	b.w	e1c0c <_ZN9FuelGauge12readRegisterEhRhS0_>
	...

000e1ce8 <_ZN9FuelGauge16getNormalizedSoCEv>:
float FuelGauge::getNormalizedSoC() {
   e1ce8:	b510      	push	{r4, lr}
   e1cea:	ed2d 8b02 	vpush	{d8}
   e1cee:	b082      	sub	sp, #8
   e1cf0:	4604      	mov	r4, r0
      { _M_device.lock(); }
   e1cf2:	f7ff ff67 	bl	e1bc4 <_ZN9FuelGauge4lockEv>
    PMIC power(true);
   e1cf6:	2101      	movs	r1, #1
   e1cf8:	a801      	add	r0, sp, #4
   e1cfa:	f001 fc5e 	bl	e35ba <_ZN4PMICC1Eb>
    const float soc = getSoC() / 100.0f;
   e1cfe:	4620      	mov	r0, r4
   e1d00:	f7ff ffc2 	bl	e1c88 <_ZN9FuelGauge6getSoCEv>
   e1d04:	ed9f 8a29 	vldr	s16, [pc, #164]	; e1dac <_ZN9FuelGauge16getNormalizedSoCEv+0xc4>
   e1d08:	eec0 8a08 	vdiv.f32	s17, s0, s16
    if (soc < 0) {
   e1d0c:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   e1d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   e1d14:	d446      	bmi.n	e1da4 <_ZN9FuelGauge16getNormalizedSoCEv+0xbc>
    const float termV = ((float)power.getChargeVoltageValue()) / 1000.0f;
   e1d16:	a801      	add	r0, sp, #4
   e1d18:	f001 fcb2 	bl	e3680 <_ZN4PMIC21getChargeVoltageValueEv>
   e1d1c:	ee07 0a90 	vmov	s15, r0
   e1d20:	eddf 6a23 	vldr	s13, [pc, #140]	; e1db0 <_ZN9FuelGauge16getNormalizedSoCEv+0xc8>
   e1d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
   e1d28:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
   e1d2c:	eddf 7a21 	vldr	s15, [pc, #132]	; e1db4 <_ZN9FuelGauge16getNormalizedSoCEv+0xcc>
    const float referenceMaxV = std::max(reference100PercentV, termV) - magicVoltageDiff;
   e1d30:	eddf 6a21 	vldr	s13, [pc, #132]	; e1db8 <_ZN9FuelGauge16getNormalizedSoCEv+0xd0>
	return __b;
      return __a;
   e1d34:	eeb4 7ae7 	vcmpe.f32	s14, s15
   e1d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   e1d3c:	bfd8      	it	le
   e1d3e:	eeb0 7a67 	vmovle.f32	s14, s15
   e1d42:	ee37 7a66 	vsub.f32	s14, s14, s13
    const float maxCharge = (1.0f - (reference100PercentV - referenceMaxV)) - magicError;
   e1d46:	eddf 6a1d 	vldr	s13, [pc, #116]	; e1dbc <_ZN9FuelGauge16getNormalizedSoCEv+0xd4>
   e1d4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
   e1d4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   e1d52:	ee77 7a67 	vsub.f32	s15, s14, s15
   e1d56:	ee77 7ae6 	vsub.f32	s15, s15, s13
    float normalized = (soc - minCharge) * (1.0f / (maxCharge - minCharge)) + 0.0f;
   e1d5a:	eec7 6a27 	vdiv.f32	s13, s14, s15
   e1d5e:	eddf 7a18 	vldr	s15, [pc, #96]	; e1dc0 <_ZN9FuelGauge16getNormalizedSoCEv+0xd8>
   e1d62:	eeb0 0a67 	vmov.f32	s0, s15
   e1d66:	eea6 0aa8 	vfma.f32	s0, s13, s17
    if (normalized < 0.0f) {
   e1d6a:	eeb4 0ae7 	vcmpe.f32	s0, s15
   e1d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   e1d72:	d414      	bmi.n	e1d9e <_ZN9FuelGauge16getNormalizedSoCEv+0xb6>
        normalized = 1.0f;
   e1d74:	eeb4 0a47 	vcmp.f32	s0, s14
   e1d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   e1d7c:	bfc8      	it	gt
   e1d7e:	eeb0 0a47 	vmovgt.f32	s0, s14
    return normalized * 100.0f;
   e1d82:	ee20 8a08 	vmul.f32	s16, s0, s16
    PMIC power(true);
   e1d86:	a801      	add	r0, sp, #4
   e1d88:	f001 fc36 	bl	e35f8 <_ZN4PMICD1Ev>
      { _M_device.unlock(); }
   e1d8c:	4620      	mov	r0, r4
   e1d8e:	f7ff ff32 	bl	e1bf6 <_ZN9FuelGauge6unlockEv>
}
   e1d92:	eeb0 0a48 	vmov.f32	s0, s16
   e1d96:	b002      	add	sp, #8
   e1d98:	ecbd 8b02 	vpop	{d8}
   e1d9c:	bd10      	pop	{r4, pc}
        normalized = 0.0f;
   e1d9e:	eeb0 0a67 	vmov.f32	s0, s15
   e1da2:	e7ee      	b.n	e1d82 <_ZN9FuelGauge16getNormalizedSoCEv+0x9a>
        return -1.0f;
   e1da4:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
   e1da8:	e7ed      	b.n	e1d86 <_ZN9FuelGauge16getNormalizedSoCEv+0x9e>
   e1daa:	bf00      	nop
   e1dac:	42c80000 	.word	0x42c80000
   e1db0:	447a0000 	.word	0x447a0000
   e1db4:	40866666 	.word	0x40866666
   e1db8:	3dcccccd 	.word	0x3dcccccd
   e1dbc:	3d4ccccd 	.word	0x3d4ccccd
   e1dc0:	00000000 	.word	0x00000000

000e1dc4 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   e1dc4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   e1dc8:	4616      	mov	r6, r2
   e1dca:	4604      	mov	r4, r0
   e1dcc:	461d      	mov	r5, r3
   e1dce:	460f      	mov	r7, r1
      { _M_device.lock(); }
   e1dd0:	f7ff fef8 	bl	e1bc4 <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   e1dd4:	2336      	movs	r3, #54	; 0x36
   e1dd6:	f88d 3000 	strb.w	r3, [sp]
   e1dda:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   e1ddc:	6820      	ldr	r0, [r4, #0]
   e1dde:	9301      	str	r3, [sp, #4]
   e1de0:	f04f 0801 	mov.w	r8, #1
    timeout_ = ms;
   e1de4:	230a      	movs	r3, #10
   e1de6:	4669      	mov	r1, sp
   e1de8:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   e1dea:	f88d 8008 	strb.w	r8, [sp, #8]
   e1dee:	f000 f8ba 	bl	e1f66 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   e1df2:	6820      	ldr	r0, [r4, #0]
   e1df4:	6803      	ldr	r3, [r0, #0]
   e1df6:	4639      	mov	r1, r7
   e1df8:	689b      	ldr	r3, [r3, #8]
   e1dfa:	4798      	blx	r3
    i2c_.write(MSB);
   e1dfc:	6820      	ldr	r0, [r4, #0]
   e1dfe:	6803      	ldr	r3, [r0, #0]
   e1e00:	4631      	mov	r1, r6
   e1e02:	689b      	ldr	r3, [r3, #8]
   e1e04:	4798      	blx	r3
    i2c_.write(LSB);
   e1e06:	6820      	ldr	r0, [r4, #0]
   e1e08:	6803      	ldr	r3, [r0, #0]
   e1e0a:	4629      	mov	r1, r5
   e1e0c:	689b      	ldr	r3, [r3, #8]
   e1e0e:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   e1e10:	4641      	mov	r1, r8
   e1e12:	6820      	ldr	r0, [r4, #0]
   e1e14:	f000 f8bf 	bl	e1f96 <_ZN7TwoWire15endTransmissionEh>
   e1e18:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   e1e1a:	4620      	mov	r0, r4
   e1e1c:	bf0c      	ite	eq
   e1e1e:	2500      	moveq	r5, #0
   e1e20:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   e1e24:	f7ff fee7 	bl	e1bf6 <_ZN9FuelGauge6unlockEv>
}
   e1e28:	4628      	mov	r0, r5
   e1e2a:	b004      	add	sp, #16
   e1e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e1e30 <_ZN9FuelGauge5sleepEv>:
int FuelGauge::sleep() {
   e1e30:	b537      	push	{r0, r1, r2, r4, r5, lr}
   e1e32:	4605      	mov	r5, r0
      { _M_device.lock(); }
   e1e34:	f7ff fec6 	bl	e1bc4 <_ZN9FuelGauge4lockEv>
    byte MSB = 0;
   e1e38:	2300      	movs	r3, #0
    CHECK(readConfigRegister(MSB, LSB));
   e1e3a:	f10d 0207 	add.w	r2, sp, #7
   e1e3e:	f10d 0106 	add.w	r1, sp, #6
   e1e42:	4628      	mov	r0, r5
    byte MSB = 0;
   e1e44:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   e1e48:	f88d 3007 	strb.w	r3, [sp, #7]
    CHECK(readConfigRegister(MSB, LSB));
   e1e4c:	f7ff ff46 	bl	e1cdc <_ZN9FuelGauge18readConfigRegisterERhS0_>
   e1e50:	1e04      	subs	r4, r0, #0
   e1e52:	db0b      	blt.n	e1e6c <_ZN9FuelGauge5sleepEv+0x3c>
    CHECK(writeRegister(CONFIG_REGISTER, MSB, (LSB | 0b10000000)));
   e1e54:	f89d 3007 	ldrb.w	r3, [sp, #7]
   e1e58:	f89d 2006 	ldrb.w	r2, [sp, #6]
   e1e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   e1e60:	210c      	movs	r1, #12
   e1e62:	4628      	mov	r0, r5
   e1e64:	f7ff ffae 	bl	e1dc4 <_ZN9FuelGauge13writeRegisterEhhh>
   e1e68:	ea00 74e0 	and.w	r4, r0, r0, asr #31
      { _M_device.unlock(); }
   e1e6c:	4628      	mov	r0, r5
   e1e6e:	f7ff fec2 	bl	e1bf6 <_ZN9FuelGauge6unlockEv>
}
   e1e72:	4620      	mov	r0, r4
   e1e74:	b003      	add	sp, #12
   e1e76:	bd30      	pop	{r4, r5, pc}

000e1e78 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   e1e78:	4770      	bx	lr

000e1e7a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   e1e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e1e7c:	4606      	mov	r6, r0
   e1e7e:	4615      	mov	r5, r2
   e1e80:	460c      	mov	r4, r1
   e1e82:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   e1e84:	42bc      	cmp	r4, r7
   e1e86:	d006      	beq.n	e1e96 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   e1e88:	6833      	ldr	r3, [r6, #0]
   e1e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
   e1e8e:	689b      	ldr	r3, [r3, #8]
   e1e90:	4630      	mov	r0, r6
   e1e92:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   e1e94:	e7f6      	b.n	e1e84 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   e1e96:	4628      	mov	r0, r5
   e1e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e1e9a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   e1e9a:	7c00      	ldrb	r0, [r0, #16]
   e1e9c:	2200      	movs	r2, #0
   e1e9e:	f7fe bfc9 	b.w	e0e34 <hal_i2c_write>

000e1ea2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   e1ea2:	7c00      	ldrb	r0, [r0, #16]
   e1ea4:	2100      	movs	r1, #0
   e1ea6:	f7fe bfcd 	b.w	e0e44 <hal_i2c_available>

000e1eaa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   e1eaa:	7c00      	ldrb	r0, [r0, #16]
   e1eac:	2100      	movs	r1, #0
   e1eae:	f7fe bfd1 	b.w	e0e54 <hal_i2c_read>

000e1eb2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   e1eb2:	7c00      	ldrb	r0, [r0, #16]
   e1eb4:	2100      	movs	r1, #0
   e1eb6:	f7fe bfd5 	b.w	e0e64 <hal_i2c_peek>

000e1eba <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   e1eba:	7c00      	ldrb	r0, [r0, #16]
   e1ebc:	2100      	movs	r1, #0
   e1ebe:	f7fe bfd9 	b.w	e0e74 <hal_i2c_flush>

000e1ec2 <_ZN7TwoWireD0Ev>:
   e1ec2:	b510      	push	{r4, lr}
   e1ec4:	2114      	movs	r1, #20
   e1ec6:	4604      	mov	r4, r0
   e1ec8:	f002 fcdd 	bl	e4886 <_ZdlPvj>
   e1ecc:	4620      	mov	r0, r4
   e1ece:	bd10      	pop	{r4, pc}

000e1ed0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   e1ed0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   e1ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   e1ed6:	4604      	mov	r4, r0
   e1ed8:	4608      	mov	r0, r1
   e1eda:	2100      	movs	r1, #0
   e1edc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   e1ee0:	4b03      	ldr	r3, [pc, #12]	; (e1ef0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   e1ee2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   e1ee4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   e1ee6:	4611      	mov	r1, r2
   e1ee8:	f7fe ffd4 	bl	e0e94 <hal_i2c_init>
}
   e1eec:	4620      	mov	r0, r4
   e1eee:	bd10      	pop	{r4, pc}
   e1ef0:	000e87ec 	.word	0x000e87ec

000e1ef4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   e1ef4:	2300      	movs	r3, #0
   e1ef6:	7c00      	ldrb	r0, [r0, #16]
   e1ef8:	461a      	mov	r2, r3
   e1efa:	4619      	mov	r1, r3
   e1efc:	f7fe bf82 	b.w	e0e04 <hal_i2c_begin>

000e1f00 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   e1f00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   e1f02:	2200      	movs	r2, #0
   e1f04:	2314      	movs	r3, #20
   e1f06:	e9cd 2201 	strd	r2, r2, [sp, #4]
   e1f0a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   e1f0e:	780b      	ldrb	r3, [r1, #0]
   e1f10:	f88d 3008 	strb.w	r3, [sp, #8]
   e1f14:	684b      	ldr	r3, [r1, #4]
   e1f16:	9303      	str	r3, [sp, #12]
   e1f18:	68cb      	ldr	r3, [r1, #12]
   e1f1a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   e1f1c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   e1f1e:	7a0b      	ldrb	r3, [r1, #8]
   e1f20:	9305      	str	r3, [sp, #20]
   e1f22:	a901      	add	r1, sp, #4
   e1f24:	f7fe ffce 	bl	e0ec4 <hal_i2c_request_ex>
}
   e1f28:	b007      	add	sp, #28
   e1f2a:	f85d fb04 	ldr.w	pc, [sp], #4

000e1f2e <_ZN7TwoWire11requestFromEhjh>:
{
   e1f2e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   e1f30:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   e1f32:	f88d 1000 	strb.w	r1, [sp]
   e1f36:	f04f 0164 	mov.w	r1, #100	; 0x64
   e1f3a:	9103      	str	r1, [sp, #12]
   e1f3c:	bf18      	it	ne
   e1f3e:	2301      	movne	r3, #1
   e1f40:	4669      	mov	r1, sp
    size_ = size;
   e1f42:	9201      	str	r2, [sp, #4]
   e1f44:	f88d 3008 	strb.w	r3, [sp, #8]
   e1f48:	f7ff ffda 	bl	e1f00 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   e1f4c:	b005      	add	sp, #20
   e1f4e:	f85d fb04 	ldr.w	pc, [sp], #4

000e1f52 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   e1f52:	2301      	movs	r3, #1
   e1f54:	f7ff bfeb 	b.w	e1f2e <_ZN7TwoWire11requestFromEhjh>

000e1f58 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   e1f58:	7c00      	ldrb	r0, [r0, #16]
   e1f5a:	2200      	movs	r2, #0
   e1f5c:	f7fe bf5a 	b.w	e0e14 <hal_i2c_begin_transmission>

000e1f60 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   e1f60:	b2c9      	uxtb	r1, r1
   e1f62:	f7ff bff9 	b.w	e1f58 <_ZN7TwoWire17beginTransmissionEh>

000e1f66 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   e1f66:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   e1f68:	2300      	movs	r3, #0
   e1f6a:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   e1f6e:	684a      	ldr	r2, [r1, #4]
   e1f70:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   e1f72:	2314      	movs	r3, #20
    };
   e1f74:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   e1f76:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   e1f7a:	780b      	ldrb	r3, [r1, #0]
    };
   e1f7c:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   e1f7e:	7a0a      	ldrb	r2, [r1, #8]
   e1f80:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   e1f82:	7c00      	ldrb	r0, [r0, #16]
    };
   e1f84:	f88d 3008 	strb.w	r3, [sp, #8]
   e1f88:	aa01      	add	r2, sp, #4
   e1f8a:	4619      	mov	r1, r3
   e1f8c:	f7fe ff42 	bl	e0e14 <hal_i2c_begin_transmission>
}
   e1f90:	b007      	add	sp, #28
   e1f92:	f85d fb04 	ldr.w	pc, [sp], #4

000e1f96 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   e1f96:	7c00      	ldrb	r0, [r0, #16]
   e1f98:	2200      	movs	r2, #0
   e1f9a:	f7fe bf43 	b.w	e0e24 <hal_i2c_end_transmission>

000e1f9e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   e1f9e:	2101      	movs	r1, #1
   e1fa0:	f7ff bff9 	b.w	e1f96 <_ZN7TwoWire15endTransmissionEh>

000e1fa4 <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
   e1fa4:	7c00      	ldrb	r0, [r0, #16]
   e1fa6:	2100      	movs	r1, #0
   e1fa8:	f7fe bf6c 	b.w	e0e84 <hal_i2c_is_enabled>

000e1fac <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   e1fac:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   e1fae:	2100      	movs	r1, #0
   e1fb0:	7c00      	ldrb	r0, [r0, #16]
   e1fb2:	f7fe ff77 	bl	e0ea4 <hal_i2c_lock>
}
   e1fb6:	fab0 f080 	clz	r0, r0
   e1fba:	0940      	lsrs	r0, r0, #5
   e1fbc:	bd08      	pop	{r3, pc}

000e1fbe <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   e1fbe:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   e1fc0:	2100      	movs	r1, #0
   e1fc2:	7c00      	ldrb	r0, [r0, #16]
   e1fc4:	f7fe ff76 	bl	e0eb4 <hal_i2c_unlock>
}
   e1fc8:	fab0 f080 	clz	r0, r0
   e1fcc:	0940      	lsrs	r0, r0, #5
   e1fce:	bd08      	pop	{r3, pc}

000e1fd0 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   e1fd0:	4700      	bx	r0
	...

000e1fd4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   e1fd4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   e1fd8:	2400      	movs	r4, #0
{
   e1fda:	461d      	mov	r5, r3
   e1fdc:	460f      	mov	r7, r1
   e1fde:	4690      	mov	r8, r2
   e1fe0:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   e1fe2:	f7fe feff 	bl	e0de4 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   e1fe6:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   e1fe8:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   e1fec:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   e1ff0:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   e1ff4:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   e1ff8:	bfa2      	ittt	ge
   e1ffa:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   e1ffe:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   e2002:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   e2004:	4907      	ldr	r1, [pc, #28]	; (e2024 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   e2006:	9400      	str	r4, [sp, #0]
   e2008:	4643      	mov	r3, r8
   e200a:	463a      	mov	r2, r7
   e200c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   e200e:	bfa8      	it	ge
   e2010:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   e2014:	f7fe fede 	bl	e0dd4 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   e2018:	fab0 f080 	clz	r0, r0
   e201c:	0940      	lsrs	r0, r0, #5
   e201e:	b004      	add	sp, #16
   e2020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e2024:	000e1fd1 	.word	0x000e1fd1

000e2028 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   e2028:	4770      	bx	lr

000e202a <_ZN9IPAddressD0Ev>:
   e202a:	b510      	push	{r4, lr}
   e202c:	2118      	movs	r1, #24
   e202e:	4604      	mov	r4, r0
   e2030:	f002 fc29 	bl	e4886 <_ZdlPvj>
   e2034:	4620      	mov	r0, r4
   e2036:	bd10      	pop	{r4, pc}

000e2038 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   e2038:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   e203a:	7d03      	ldrb	r3, [r0, #20]
   e203c:	2b06      	cmp	r3, #6
{
   e203e:	b08d      	sub	sp, #52	; 0x34
   e2040:	460e      	mov	r6, r1
   e2042:	f100 0704 	add.w	r7, r0, #4
   e2046:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   e204a:	d012      	beq.n	e2072 <_ZNK9IPAddress7printToER5Print+0x3a>
   e204c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   e2050:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   e2054:	220a      	movs	r2, #10
   e2056:	4630      	mov	r0, r6
   e2058:	f001 fbee 	bl	e3838 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   e205c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   e205e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   e2060:	d019      	beq.n	e2096 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   e2062:	2c00      	cmp	r4, #0
   e2064:	d0f4      	beq.n	e2050 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   e2066:	212e      	movs	r1, #46	; 0x2e
   e2068:	4630      	mov	r0, r6
   e206a:	f001 fbcc 	bl	e3806 <_ZN5Print5printEc>
   e206e:	4404      	add	r4, r0
   e2070:	e7ee      	b.n	e2050 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   e2072:	232f      	movs	r3, #47	; 0x2f
   e2074:	466a      	mov	r2, sp
   e2076:	4639      	mov	r1, r7
   e2078:	200a      	movs	r0, #10
		buf[0] = 0;
   e207a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   e207e:	f7fe ff29 	bl	e0ed4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   e2082:	4668      	mov	r0, sp
   e2084:	f003 fb87 	bl	e5796 <strlen>
   e2088:	6833      	ldr	r3, [r6, #0]
   e208a:	4602      	mov	r2, r0
   e208c:	68db      	ldr	r3, [r3, #12]
   e208e:	4669      	mov	r1, sp
   e2090:	4630      	mov	r0, r6
   e2092:	4798      	blx	r3
   e2094:	4604      	mov	r4, r0
    }
    return n;
}
   e2096:	4620      	mov	r0, r4
   e2098:	b00d      	add	sp, #52	; 0x34
   e209a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e209c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   e209c:	b510      	push	{r4, lr}
   e209e:	4b05      	ldr	r3, [pc, #20]	; (e20b4 <_ZN9IPAddressC1Ev+0x18>)
   e20a0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   e20a2:	2211      	movs	r2, #17
   e20a4:	f840 3b04 	str.w	r3, [r0], #4
   e20a8:	2100      	movs	r1, #0
   e20aa:	f003 fb01 	bl	e56b0 <memset>
}
   e20ae:	4620      	mov	r0, r4
   e20b0:	bd10      	pop	{r4, pc}
   e20b2:	bf00      	nop
   e20b4:	000e8814 	.word	0x000e8814

000e20b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   e20b8:	4603      	mov	r3, r0
   e20ba:	4a07      	ldr	r2, [pc, #28]	; (e20d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   e20bc:	b510      	push	{r4, lr}
   e20be:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   e20c2:	f101 0210 	add.w	r2, r1, #16
   e20c6:	f851 4b04 	ldr.w	r4, [r1], #4
   e20ca:	f843 4b04 	str.w	r4, [r3], #4
   e20ce:	4291      	cmp	r1, r2
   e20d0:	d1f9      	bne.n	e20c6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   e20d2:	780a      	ldrb	r2, [r1, #0]
   e20d4:	701a      	strb	r2, [r3, #0]
}
   e20d6:	bd10      	pop	{r4, pc}
   e20d8:	000e8814 	.word	0x000e8814

000e20dc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   e20dc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   e20de:	f89d 4008 	ldrb.w	r4, [sp, #8]
   e20e2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   e20e6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   e20ea:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   e20ee:	2304      	movs	r3, #4
   e20f0:	6041      	str	r1, [r0, #4]
   e20f2:	7503      	strb	r3, [r0, #20]
}
   e20f4:	bd10      	pop	{r4, pc}

000e20f6 <_ZN9IPAddressaSEPKh>:
{
   e20f6:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   e20f8:	78cb      	ldrb	r3, [r1, #3]
   e20fa:	9300      	str	r3, [sp, #0]
   e20fc:	788b      	ldrb	r3, [r1, #2]
   e20fe:	784a      	ldrb	r2, [r1, #1]
   e2100:	7809      	ldrb	r1, [r1, #0]
   e2102:	f7ff ffeb 	bl	e20dc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   e2106:	b002      	add	sp, #8
   e2108:	bd10      	pop	{r4, pc}

000e210a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   e210a:	f100 0310 	add.w	r3, r0, #16
   e210e:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   e2110:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   e2114:	2901      	cmp	r1, #1
   e2116:	4618      	mov	r0, r3
   e2118:	d108      	bne.n	e212c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   e211a:	f853 1c04 	ldr.w	r1, [r3, #-4]
   e211e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   e2122:	3a01      	subs	r2, #1
   e2124:	f103 0310 	add.w	r3, r3, #16
   e2128:	d1f2      	bne.n	e2110 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   e212a:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   e212c:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   e212e:	bf04      	itt	eq
   e2130:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   e2134:	1852      	addeq	r2, r2, r1
   e2136:	e7f4      	b.n	e2122 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000e2138 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   e2138:	b40e      	push	{r1, r2, r3}
   e213a:	b5f0      	push	{r4, r5, r6, r7, lr}
   e213c:	b088      	sub	sp, #32
   e213e:	af00      	add	r7, sp, #0
   e2140:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   e2144:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   e2146:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   e214a:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   e214c:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   e214e:	462b      	mov	r3, r5
   e2150:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   e2152:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   e2154:	f7ff f924 	bl	e13a0 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   e2158:	280f      	cmp	r0, #15
   e215a:	687a      	ldr	r2, [r7, #4]
   e215c:	d91a      	bls.n	e2194 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   e215e:	f100 0308 	add.w	r3, r0, #8
   e2162:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   e2166:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   e2168:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   e216c:	1c41      	adds	r1, r0, #1
   e216e:	462b      	mov	r3, r5
   e2170:	4668      	mov	r0, sp
        va_start(args, fmt);
   e2172:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   e2174:	f7ff f914 	bl	e13a0 <vsnprintf>
        if (n > 0) {
   e2178:	1e02      	subs	r2, r0, #0
   e217a:	dd04      	ble.n	e2186 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   e217c:	6823      	ldr	r3, [r4, #0]
   e217e:	4669      	mov	r1, sp
   e2180:	689b      	ldr	r3, [r3, #8]
   e2182:	4620      	mov	r0, r4
   e2184:	4798      	blx	r3
   e2186:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   e2188:	3720      	adds	r7, #32
   e218a:	46bd      	mov	sp, r7
   e218c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   e2190:	b003      	add	sp, #12
   e2192:	4770      	bx	lr
    } else if (n > 0) {
   e2194:	2800      	cmp	r0, #0
   e2196:	d0f7      	beq.n	e2188 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   e2198:	6823      	ldr	r3, [r4, #0]
   e219a:	4602      	mov	r2, r0
   e219c:	689b      	ldr	r3, [r3, #8]
   e219e:	f107 0110 	add.w	r1, r7, #16
   e21a2:	4620      	mov	r0, r4
   e21a4:	4798      	blx	r3
}
   e21a6:	e7ef      	b.n	e2188 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000e21a8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   e21a8:	b510      	push	{r4, lr}
          _M_dispose();
   e21aa:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   e21ac:	4604      	mov	r4, r0
          _M_dispose();
   e21ae:	689b      	ldr	r3, [r3, #8]
   e21b0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   e21b2:	68a3      	ldr	r3, [r4, #8]
   e21b4:	3b01      	subs	r3, #1
   e21b6:	60a3      	str	r3, [r4, #8]
   e21b8:	b92b      	cbnz	r3, e21c6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   e21ba:	6823      	ldr	r3, [r4, #0]
   e21bc:	4620      	mov	r0, r4
   e21be:	68db      	ldr	r3, [r3, #12]
    }
   e21c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   e21c4:	4718      	bx	r3
    }
   e21c6:	bd10      	pop	{r4, pc}

000e21c8 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   e21c8:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   e21ca:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   e21cc:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   e21d0:	689b      	ldr	r3, [r3, #8]
   e21d2:	2201      	movs	r2, #1
   e21d4:	f10d 0107 	add.w	r1, sp, #7
   e21d8:	4798      	blx	r3
}
   e21da:	b003      	add	sp, #12
   e21dc:	f85d fb04 	ldr.w	pc, [sp], #4

000e21e0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   e21e0:	b538      	push	{r3, r4, r5, lr}
   e21e2:	680b      	ldr	r3, [r1, #0]
   e21e4:	6003      	str	r3, [r0, #0]
   e21e6:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   e21e8:	6843      	ldr	r3, [r0, #4]
   e21ea:	429d      	cmp	r5, r3
    class __shared_ptr
   e21ec:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   e21ee:	d00c      	beq.n	e220a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   e21f0:	b115      	cbz	r5, e21f8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   e21f2:	686b      	ldr	r3, [r5, #4]
   e21f4:	3301      	adds	r3, #1
   e21f6:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   e21f8:	6860      	ldr	r0, [r4, #4]
   e21fa:	b128      	cbz	r0, e2208 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   e21fc:	6843      	ldr	r3, [r0, #4]
   e21fe:	3b01      	subs	r3, #1
   e2200:	6043      	str	r3, [r0, #4]
   e2202:	b90b      	cbnz	r3, e2208 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   e2204:	f7ff ffd0 	bl	e21a8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   e2208:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   e220a:	4620      	mov	r0, r4
   e220c:	bd38      	pop	{r3, r4, r5, pc}

000e220e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   e220e:	460b      	mov	r3, r1
   e2210:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   e2212:	2200      	movs	r2, #0
   e2214:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   e2216:	e9c0 2200 	strd	r2, r2, [r0]
   e221a:	4604      	mov	r4, r0
        t_ = t;
   e221c:	6083      	str	r3, [r0, #8]
    if (t) {
   e221e:	b90b      	cbnz	r3, e2224 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   e2220:	4620      	mov	r0, r4
   e2222:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   e2224:	f7ff ffdc 	bl	e21e0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   e2228:	e7fa      	b.n	e2220 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000e222a <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   e222a:	6883      	ldr	r3, [r0, #8]
   e222c:	b1eb      	cbz	r3, e226a <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   e222e:	781a      	ldrb	r2, [r3, #0]
   e2230:	2a03      	cmp	r2, #3
   e2232:	d81a      	bhi.n	e226a <_ZNK5spark9JSONValue4typeEv+0x40>
   e2234:	e8df f002 	tbb	[pc, r2]
   e2238:	1b021704 	.word	0x1b021704
   e223c:	2005      	movs	r0, #5
   e223e:	4770      	bx	lr
        const char c = d_->json[t_->start];
   e2240:	6802      	ldr	r2, [r0, #0]
   e2242:	685b      	ldr	r3, [r3, #4]
   e2244:	6852      	ldr	r2, [r2, #4]
   e2246:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   e2248:	282d      	cmp	r0, #45	; 0x2d
   e224a:	d012      	beq.n	e2272 <_ZNK5spark9JSONValue4typeEv+0x48>
   e224c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   e2250:	2b09      	cmp	r3, #9
   e2252:	d90e      	bls.n	e2272 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   e2254:	2874      	cmp	r0, #116	; 0x74
   e2256:	d00e      	beq.n	e2276 <_ZNK5spark9JSONValue4typeEv+0x4c>
   e2258:	2866      	cmp	r0, #102	; 0x66
   e225a:	d00c      	beq.n	e2276 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   e225c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   e2260:	4258      	negs	r0, r3
   e2262:	4158      	adcs	r0, r3
   e2264:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   e2266:	2006      	movs	r0, #6
   e2268:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   e226a:	2000      	movs	r0, #0
   e226c:	4770      	bx	lr
        return JSON_TYPE_STRING;
   e226e:	2004      	movs	r0, #4
   e2270:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   e2272:	2003      	movs	r0, #3
   e2274:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   e2276:	2002      	movs	r0, #2
}
   e2278:	4770      	bx	lr

000e227a <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   e227a:	b510      	push	{r4, lr}
   e227c:	4604      	mov	r4, r0
    switch (type()) {
   e227e:	f7ff ffd4 	bl	e222a <_ZNK5spark9JSONValue4typeEv>
   e2282:	2802      	cmp	r0, #2
   e2284:	d00e      	beq.n	e22a4 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   e2286:	1ec3      	subs	r3, r0, #3
   e2288:	b2db      	uxtb	r3, r3
   e228a:	2b01      	cmp	r3, #1
   e228c:	d814      	bhi.n	e22b8 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   e228e:	6822      	ldr	r2, [r4, #0]
   e2290:	68a3      	ldr	r3, [r4, #8]
   e2292:	6850      	ldr	r0, [r2, #4]
   e2294:	685b      	ldr	r3, [r3, #4]
}
   e2296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   e229a:	220a      	movs	r2, #10
   e229c:	2100      	movs	r1, #0
   e229e:	4418      	add	r0, r3
   e22a0:	f003 bb4c 	b.w	e593c <strtol>
        const char* const s = d_->json + t_->start;
   e22a4:	6822      	ldr	r2, [r4, #0]
   e22a6:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   e22a8:	6852      	ldr	r2, [r2, #4]
   e22aa:	685b      	ldr	r3, [r3, #4]
   e22ac:	5cd0      	ldrb	r0, [r2, r3]
   e22ae:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   e22b2:	4258      	negs	r0, r3
   e22b4:	4158      	adcs	r0, r3
}
   e22b6:	bd10      	pop	{r4, pc}
    switch (type()) {
   e22b8:	2000      	movs	r0, #0
   e22ba:	e7fc      	b.n	e22b6 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000e22bc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   e22bc:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   e22be:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   e22c0:	e9c0 3300 	strd	r3, r3, [r0]
   e22c4:	4604      	mov	r4, r0
        n_(0) {
   e22c6:	480e      	ldr	r0, [pc, #56]	; (e2300 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   e22c8:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   e22cc:	b1a9      	cbz	r1, e22fa <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   e22ce:	780b      	ldrb	r3, [r1, #0]
   e22d0:	2b03      	cmp	r3, #3
   e22d2:	d006      	beq.n	e22e2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   e22d4:	b98b      	cbnz	r3, e22fa <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   e22d6:	6813      	ldr	r3, [r2, #0]
   e22d8:	6858      	ldr	r0, [r3, #4]
   e22da:	684b      	ldr	r3, [r1, #4]
   e22dc:	5cc3      	ldrb	r3, [r0, r3]
   e22de:	2b6e      	cmp	r3, #110	; 0x6e
   e22e0:	d007      	beq.n	e22f2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   e22e2:	6813      	ldr	r3, [r2, #0]
   e22e4:	684d      	ldr	r5, [r1, #4]
   e22e6:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   e22e8:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   e22ea:	4428      	add	r0, r5
            n_ = t->end - t->start;
   e22ec:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   e22ee:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   e22f0:	60e3      	str	r3, [r4, #12]
   e22f2:	4611      	mov	r1, r2
   e22f4:	4620      	mov	r0, r4
   e22f6:	f7ff ff73 	bl	e21e0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   e22fa:	4620      	mov	r0, r4
   e22fc:	bd38      	pop	{r3, r4, r5, pc}
   e22fe:	bf00      	nop
   e2300:	000e827d 	.word	0x000e827d

000e2304 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   e2304:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   e2306:	2500      	movs	r5, #0
   e2308:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   e230a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   e230e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   e2312:	e9c0 5504 	strd	r5, r5, [r0, #16]
   e2316:	4604      	mov	r4, r0
   e2318:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   e231a:	b14b      	cbz	r3, e2330 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   e231c:	781a      	ldrb	r2, [r3, #0]
   e231e:	2a01      	cmp	r2, #1
   e2320:	d106      	bne.n	e2330 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   e2322:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   e2326:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   e2328:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   e232a:	6143      	str	r3, [r0, #20]
   e232c:	f7ff ff58 	bl	e21e0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   e2330:	4620      	mov	r0, r4
   e2332:	bd38      	pop	{r3, r4, r5, pc}

000e2334 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   e2334:	b510      	push	{r4, lr}
    if (!n_) {
   e2336:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   e2338:	4604      	mov	r4, r0
    if (!n_) {
   e233a:	b163      	cbz	r3, e2356 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   e233c:	6880      	ldr	r0, [r0, #8]
   e233e:	60e0      	str	r0, [r4, #12]
    --n_;
   e2340:	3b01      	subs	r3, #1
    ++t_;
   e2342:	3010      	adds	r0, #16
   e2344:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   e2346:	6120      	str	r0, [r4, #16]
    --n_;
   e2348:	6163      	str	r3, [r4, #20]
    if (n_) {
   e234a:	b113      	cbz	r3, e2352 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   e234c:	f7ff fedd 	bl	e210a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   e2350:	60a0      	str	r0, [r4, #8]
    return true;
   e2352:	2001      	movs	r0, #1
   e2354:	e000      	b.n	e2358 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   e2356:	4618      	mov	r0, r3
}
   e2358:	bd10      	pop	{r4, pc}

000e235a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   e235a:	b510      	push	{r4, lr}
    write('}');
   e235c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   e235e:	4604      	mov	r4, r0
    write('}');
   e2360:	f7ff ff32 	bl	e21c8 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   e2364:	2301      	movs	r3, #1
   e2366:	7123      	strb	r3, [r4, #4]
}
   e2368:	4620      	mov	r0, r4
   e236a:	bd10      	pop	{r4, pc}

000e236c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   e236c:	b508      	push	{r3, lr}
    switch (state_) {
   e236e:	7903      	ldrb	r3, [r0, #4]
   e2370:	2b01      	cmp	r3, #1
   e2372:	d002      	beq.n	e237a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   e2374:	2b02      	cmp	r3, #2
   e2376:	d004      	beq.n	e2382 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   e2378:	bd08      	pop	{r3, pc}
        write(',');
   e237a:	212c      	movs	r1, #44	; 0x2c
        write(':');
   e237c:	f7ff ff24 	bl	e21c8 <_ZN5spark10JSONWriter5writeEc>
}
   e2380:	e7fa      	b.n	e2378 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   e2382:	213a      	movs	r1, #58	; 0x3a
   e2384:	e7fa      	b.n	e237c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000e2386 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   e2386:	b510      	push	{r4, lr}
   e2388:	4604      	mov	r4, r0
    writeSeparator();
   e238a:	f7ff ffef 	bl	e236c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   e238e:	4620      	mov	r0, r4
   e2390:	217b      	movs	r1, #123	; 0x7b
   e2392:	f7ff ff19 	bl	e21c8 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   e2396:	2300      	movs	r3, #0
   e2398:	7123      	strb	r3, [r4, #4]
}
   e239a:	4620      	mov	r0, r4
   e239c:	bd10      	pop	{r4, pc}
	...

000e23a0 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   e23a0:	b513      	push	{r0, r1, r4, lr}
   e23a2:	4604      	mov	r4, r0
   e23a4:	9101      	str	r1, [sp, #4]
    writeSeparator();
   e23a6:	f7ff ffe1 	bl	e236c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   e23aa:	6823      	ldr	r3, [r4, #0]
   e23ac:	9a01      	ldr	r2, [sp, #4]
   e23ae:	68db      	ldr	r3, [r3, #12]
   e23b0:	4903      	ldr	r1, [pc, #12]	; (e23c0 <_ZN5spark10JSONWriter5valueEi+0x20>)
   e23b2:	4620      	mov	r0, r4
   e23b4:	4798      	blx	r3
    state_ = NEXT;
   e23b6:	2301      	movs	r3, #1
}
   e23b8:	4620      	mov	r0, r4
    state_ = NEXT;
   e23ba:	7123      	strb	r3, [r4, #4]
}
   e23bc:	b002      	add	sp, #8
   e23be:	bd10      	pop	{r4, pc}
   e23c0:	000e7b72 	.word	0x000e7b72

000e23c4 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   e23c4:	b513      	push	{r0, r1, r4, lr}
   e23c6:	4604      	mov	r4, r0
   e23c8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   e23ca:	f7ff ffcf 	bl	e236c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   e23ce:	6823      	ldr	r3, [r4, #0]
   e23d0:	9a01      	ldr	r2, [sp, #4]
   e23d2:	68db      	ldr	r3, [r3, #12]
   e23d4:	4903      	ldr	r1, [pc, #12]	; (e23e4 <_ZN5spark10JSONWriter5valueEj+0x20>)
   e23d6:	4620      	mov	r0, r4
   e23d8:	4798      	blx	r3
    state_ = NEXT;
   e23da:	2301      	movs	r3, #1
}
   e23dc:	4620      	mov	r0, r4
    state_ = NEXT;
   e23de:	7123      	strb	r3, [r4, #4]
}
   e23e0:	b002      	add	sp, #8
   e23e2:	bd10      	pop	{r4, pc}
   e23e4:	000e8820 	.word	0x000e8820

000e23e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   e23e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e23ec:	460d      	mov	r5, r1
   e23ee:	4617      	mov	r7, r2
    write('"');
   e23f0:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   e23f2:	f8df 80a0 	ldr.w	r8, [pc, #160]	; e2494 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   e23f6:	4604      	mov	r4, r0
    const char* const end = str + size;
   e23f8:	442f      	add	r7, r5
    write('"');
   e23fa:	f7ff fee5 	bl	e21c8 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   e23fe:	4629      	mov	r1, r5
    while (s != end) {
   e2400:	42bd      	cmp	r5, r7
   e2402:	462a      	mov	r2, r5
   e2404:	d038      	beq.n	e2478 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   e2406:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   e240a:	2e22      	cmp	r6, #34	; 0x22
   e240c:	d003      	beq.n	e2416 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   e240e:	2e5c      	cmp	r6, #92	; 0x5c
   e2410:	d001      	beq.n	e2416 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   e2412:	2e1f      	cmp	r6, #31
   e2414:	d8f4      	bhi.n	e2400 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   e2416:	6823      	ldr	r3, [r4, #0]
   e2418:	1a52      	subs	r2, r2, r1
   e241a:	689b      	ldr	r3, [r3, #8]
   e241c:	4620      	mov	r0, r4
   e241e:	4798      	blx	r3
            write('\\');
   e2420:	215c      	movs	r1, #92	; 0x5c
   e2422:	4620      	mov	r0, r4
   e2424:	f7ff fed0 	bl	e21c8 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   e2428:	2e0d      	cmp	r6, #13
   e242a:	d80a      	bhi.n	e2442 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   e242c:	2e07      	cmp	r6, #7
   e242e:	d91c      	bls.n	e246a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   e2430:	f1a6 0308 	sub.w	r3, r6, #8
   e2434:	2b05      	cmp	r3, #5
   e2436:	d818      	bhi.n	e246a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   e2438:	e8df f003 	tbb	[pc, r3]
   e243c:	17110f0d 	.word	0x17110f0d
   e2440:	1513      	.short	0x1513
   e2442:	2e22      	cmp	r6, #34	; 0x22
   e2444:	d001      	beq.n	e244a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   e2446:	2e5c      	cmp	r6, #92	; 0x5c
   e2448:	d10f      	bne.n	e246a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   e244a:	4631      	mov	r1, r6
                write('b');
   e244c:	4620      	mov	r0, r4
   e244e:	f7ff febb 	bl	e21c8 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   e2452:	4629      	mov	r1, r5
    while (s != end) {
   e2454:	e7d4      	b.n	e2400 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   e2456:	2162      	movs	r1, #98	; 0x62
   e2458:	e7f8      	b.n	e244c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   e245a:	2174      	movs	r1, #116	; 0x74
   e245c:	e7f6      	b.n	e244c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   e245e:	216e      	movs	r1, #110	; 0x6e
   e2460:	e7f4      	b.n	e244c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   e2462:	2166      	movs	r1, #102	; 0x66
   e2464:	e7f2      	b.n	e244c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   e2466:	2172      	movs	r1, #114	; 0x72
   e2468:	e7f0      	b.n	e244c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   e246a:	6823      	ldr	r3, [r4, #0]
   e246c:	4632      	mov	r2, r6
   e246e:	68db      	ldr	r3, [r3, #12]
   e2470:	4641      	mov	r1, r8
   e2472:	4620      	mov	r0, r4
   e2474:	4798      	blx	r3
                break;
   e2476:	e7ec      	b.n	e2452 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   e2478:	428d      	cmp	r5, r1
   e247a:	d004      	beq.n	e2486 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   e247c:	6823      	ldr	r3, [r4, #0]
   e247e:	1a6a      	subs	r2, r5, r1
   e2480:	689b      	ldr	r3, [r3, #8]
   e2482:	4620      	mov	r0, r4
   e2484:	4798      	blx	r3
    }
    write('"');
   e2486:	2122      	movs	r1, #34	; 0x22
   e2488:	4620      	mov	r0, r4
   e248a:	f7ff fe9d 	bl	e21c8 <_ZN5spark10JSONWriter5writeEc>
}
   e248e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e2492:	bf00      	nop
   e2494:	000e8823 	.word	0x000e8823

000e2498 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   e2498:	b513      	push	{r0, r1, r4, lr}
   e249a:	4604      	mov	r4, r0
   e249c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   e24a0:	f7ff ff64 	bl	e236c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   e24a4:	4620      	mov	r0, r4
   e24a6:	e9dd 2100 	ldrd	r2, r1, [sp]
   e24aa:	f7ff ff9d 	bl	e23e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   e24ae:	2302      	movs	r3, #2
}
   e24b0:	4620      	mov	r0, r4
    state_ = VALUE;
   e24b2:	7123      	strb	r3, [r4, #4]
}
   e24b4:	b002      	add	sp, #8
   e24b6:	bd10      	pop	{r4, pc}

000e24b8 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   e24b8:	b513      	push	{r0, r1, r4, lr}
   e24ba:	4604      	mov	r4, r0
   e24bc:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   e24c0:	f7ff ff54 	bl	e236c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   e24c4:	4620      	mov	r0, r4
   e24c6:	e9dd 2100 	ldrd	r2, r1, [sp]
   e24ca:	f7ff ff8d 	bl	e23e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   e24ce:	2301      	movs	r3, #1
}
   e24d0:	4620      	mov	r0, r4
    state_ = NEXT;
   e24d2:	7123      	strb	r3, [r4, #4]
}
   e24d4:	b002      	add	sp, #8
   e24d6:	bd10      	pop	{r4, pc}

000e24d8 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   e24d8:	6880      	ldr	r0, [r0, #8]
   e24da:	6803      	ldr	r3, [r0, #0]
   e24dc:	68db      	ldr	r3, [r3, #12]
   e24de:	4718      	bx	r3

000e24e0 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   e24e0:	4770      	bx	lr

000e24e2 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   e24e2:	4608      	mov	r0, r1
   e24e4:	b111      	cbz	r1, e24ec <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   e24e6:	680b      	ldr	r3, [r1, #0]
   e24e8:	685b      	ldr	r3, [r3, #4]
   e24ea:	4718      	bx	r3
}
   e24ec:	4770      	bx	lr

000e24ee <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   e24ee:	4770      	bx	lr

000e24f0 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   e24f0:	4770      	bx	lr

000e24f2 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   e24f2:	4770      	bx	lr

000e24f4 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   e24f4:	b538      	push	{r3, r4, r5, lr}
   e24f6:	4604      	mov	r4, r0
   e24f8:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   e24fa:	6800      	ldr	r0, [r0, #0]
   e24fc:	212e      	movs	r1, #46	; 0x2e
   e24fe:	f003 f910 	bl	e5722 <strchrnul>
    size = s - category;
   e2502:	6823      	ldr	r3, [r4, #0]
   e2504:	1ac3      	subs	r3, r0, r3
   e2506:	602b      	str	r3, [r5, #0]
    if (size) {
   e2508:	b123      	cbz	r3, e2514 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   e250a:	7803      	ldrb	r3, [r0, #0]
   e250c:	b103      	cbz	r3, e2510 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   e250e:	3001      	adds	r0, #1
   e2510:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   e2512:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
   e2514:	4618      	mov	r0, r3
   e2516:	bd38      	pop	{r3, r4, r5, pc}

000e2518 <_ZN5spark16JSONStreamWriterD0Ev>:
   e2518:	b510      	push	{r4, lr}
   e251a:	210c      	movs	r1, #12
   e251c:	4604      	mov	r4, r0
   e251e:	f002 f9b2 	bl	e4886 <_ZdlPvj>
   e2522:	4620      	mov	r0, r4
   e2524:	bd10      	pop	{r4, pc}

000e2526 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   e2526:	b510      	push	{r4, lr}
   e2528:	2104      	movs	r1, #4
   e252a:	4604      	mov	r4, r0
   e252c:	f002 f9ab 	bl	e4886 <_ZdlPvj>
   e2530:	4620      	mov	r0, r4
   e2532:	bd10      	pop	{r4, pc}

000e2534 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   e2534:	b510      	push	{r4, lr}
   e2536:	2104      	movs	r1, #4
   e2538:	4604      	mov	r4, r0
   e253a:	f002 f9a4 	bl	e4886 <_ZdlPvj>
   e253e:	4620      	mov	r0, r4
   e2540:	bd10      	pop	{r4, pc}

000e2542 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   e2542:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   e2544:	f003 f8f7 	bl	e5736 <strcmp>
}
   e2548:	fab0 f080 	clz	r0, r0
   e254c:	0940      	lsrs	r0, r0, #5
   e254e:	bd08      	pop	{r3, pc}

000e2550 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   e2550:	b510      	push	{r4, lr}
   e2552:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   e2554:	f001 ff0c 	bl	e4370 <_Z16_fetch_usbserialv>
   e2558:	4284      	cmp	r4, r0
   e255a:	d010      	beq.n	e257e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   e255c:	f001 fe7c 	bl	e4258 <_Z22__fetch_global_Serial1v>
   e2560:	4284      	cmp	r4, r0
   e2562:	d105      	bne.n	e2570 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   e2564:	f001 fe78 	bl	e4258 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   e2568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   e256c:	f001 be71 	b.w	e4252 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   e2570:	b12c      	cbz	r4, e257e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   e2572:	6823      	ldr	r3, [r4, #0]
   e2574:	4620      	mov	r0, r4
   e2576:	685b      	ldr	r3, [r3, #4]
}
   e2578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   e257c:	4718      	bx	r3
   e257e:	bd10      	pop	{r4, pc}

000e2580 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   e2580:	b513      	push	{r0, r1, r4, lr}
   e2582:	4604      	mov	r4, r0
    return value(val, strlen(val));
   e2584:	4608      	mov	r0, r1
   e2586:	9101      	str	r1, [sp, #4]
   e2588:	f003 f905 	bl	e5796 <strlen>
   e258c:	9901      	ldr	r1, [sp, #4]
   e258e:	4602      	mov	r2, r0
   e2590:	4620      	mov	r0, r4
}
   e2592:	b002      	add	sp, #8
   e2594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   e2598:	f7ff bf8e 	b.w	e24b8 <_ZN5spark10JSONWriter5valueEPKcj>

000e259c <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   e259c:	b513      	push	{r0, r1, r4, lr}
   e259e:	4604      	mov	r4, r0
    write(str, strlen(str));
   e25a0:	4608      	mov	r0, r1
   e25a2:	9101      	str	r1, [sp, #4]
   e25a4:	f003 f8f7 	bl	e5796 <strlen>
   e25a8:	6823      	ldr	r3, [r4, #0]
   e25aa:	9901      	ldr	r1, [sp, #4]
   e25ac:	68db      	ldr	r3, [r3, #12]
   e25ae:	4602      	mov	r2, r0
   e25b0:	4620      	mov	r0, r4
}
   e25b2:	b002      	add	sp, #8
   e25b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   e25b8:	4718      	bx	r3

000e25ba <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   e25ba:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   e25bc:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   e25be:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   e25c2:	68db      	ldr	r3, [r3, #12]
   e25c4:	2201      	movs	r2, #1
   e25c6:	f10d 0107 	add.w	r1, sp, #7
   e25ca:	4798      	blx	r3
}
   e25cc:	b003      	add	sp, #12
   e25ce:	f85d fb04 	ldr.w	pc, [sp], #4

000e25d2 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   e25d2:	b40e      	push	{r1, r2, r3}
   e25d4:	b503      	push	{r0, r1, lr}
   e25d6:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   e25d8:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   e25da:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   e25de:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   e25e0:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   e25e2:	f001 f947 	bl	e3874 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   e25e6:	b002      	add	sp, #8
   e25e8:	f85d eb04 	ldr.w	lr, [sp], #4
   e25ec:	b003      	add	sp, #12
   e25ee:	4770      	bx	lr

000e25f0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   e25f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   e25f4:	e9d0 9500 	ldrd	r9, r5, [r0]
   e25f8:	f04f 0814 	mov.w	r8, #20
   e25fc:	fb08 f505 	mul.w	r5, r8, r5
   e2600:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   e2602:	10ab      	asrs	r3, r5, #2
   e2604:	4d18      	ldr	r5, [pc, #96]	; (e2668 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   e2606:	4617      	mov	r7, r2
   e2608:	435d      	muls	r5, r3
   e260a:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   e260c:	2d00      	cmp	r5, #0
   e260e:	dd23      	ble.n	e2658 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   e2610:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   e2612:	fb08 f006 	mul.w	r0, r8, r6
   e2616:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   e261a:	463a      	mov	r2, r7
   e261c:	f8ba b004 	ldrh.w	fp, [sl, #4]
   e2620:	5820      	ldr	r0, [r4, r0]
   e2622:	9101      	str	r1, [sp, #4]
   e2624:	455f      	cmp	r7, fp
   e2626:	bf28      	it	cs
   e2628:	465a      	movcs	r2, fp
   e262a:	f003 f8bc 	bl	e57a6 <strncmp>
                if (cmp == 0) {
   e262e:	9901      	ldr	r1, [sp, #4]
   e2630:	2301      	movs	r3, #1
   e2632:	b978      	cbnz	r0, e2654 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   e2634:	455f      	cmp	r7, fp
   e2636:	d103      	bne.n	e2640 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   e2638:	9a00      	ldr	r2, [sp, #0]
   e263a:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   e263c:	4635      	mov	r5, r6
   e263e:	e7e5      	b.n	e260c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   e2640:	bf8c      	ite	hi
   e2642:	2001      	movhi	r0, #1
   e2644:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   e2646:	2800      	cmp	r0, #0
   e2648:	d0f8      	beq.n	e263c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   e264a:	1bae      	subs	r6, r5, r6
	      ++__first;
   e264c:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   e2650:	3e01      	subs	r6, #1
   e2652:	e7f3      	b.n	e263c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   e2654:	0fc0      	lsrs	r0, r0, #31
   e2656:	e7f6      	b.n	e2646 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   e2658:	eba4 0409 	sub.w	r4, r4, r9
}
   e265c:	4802      	ldr	r0, [pc, #8]	; (e2668 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   e265e:	10a4      	asrs	r4, r4, #2
   e2660:	4360      	muls	r0, r4
   e2662:	b003      	add	sp, #12
   e2664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e2668:	cccccccd 	.word	0xcccccccd

000e266c <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   e266c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   e266e:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   e2670:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   e2672:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   e2674:	b30b      	cbz	r3, e26ba <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   e2676:	b301      	cbz	r1, e26ba <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   e2678:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   e267a:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   e267e:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   e2680:	a903      	add	r1, sp, #12
   e2682:	a801      	add	r0, sp, #4
   e2684:	f7ff ff36 	bl	e24f4 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   e2688:	4601      	mov	r1, r0
   e268a:	b1b0      	cbz	r0, e26ba <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   e268c:	f10d 030b 	add.w	r3, sp, #11
   e2690:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   e2692:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   e2696:	4620      	mov	r0, r4
   e2698:	f7ff ffaa 	bl	e25f0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   e269c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   e26a0:	b15b      	cbz	r3, e26ba <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   e26a2:	6824      	ldr	r4, [r4, #0]
   e26a4:	2314      	movs	r3, #20
   e26a6:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   e26aa:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   e26ae:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   e26b2:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   e26b4:	bfa8      	it	ge
   e26b6:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   e26b8:	e7e2      	b.n	e2680 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   e26ba:	4630      	mov	r0, r6
   e26bc:	b004      	add	sp, #16
   e26be:	bd70      	pop	{r4, r5, r6, pc}

000e26c0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   e26c0:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   e26c2:	4c0a      	ldr	r4, [pc, #40]	; (e26ec <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   e26c4:	7823      	ldrb	r3, [r4, #0]
   e26c6:	f3bf 8f5b 	dmb	ish
   e26ca:	07db      	lsls	r3, r3, #31
   e26cc:	d40b      	bmi.n	e26e6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   e26ce:	4620      	mov	r0, r4
   e26d0:	f7f1 fcf4 	bl	d40bc <__cxa_guard_acquire>
   e26d4:	b138      	cbz	r0, e26e6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   e26d6:	4620      	mov	r0, r4
   e26d8:	f7f1 fcf5 	bl	d40c6 <__cxa_guard_release>
   e26dc:	4a04      	ldr	r2, [pc, #16]	; (e26f0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   e26de:	4905      	ldr	r1, [pc, #20]	; (e26f4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   e26e0:	4805      	ldr	r0, [pc, #20]	; (e26f8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   e26e2:	f002 f8cb 	bl	e487c <__aeabi_atexit>
}
   e26e6:	4804      	ldr	r0, [pc, #16]	; (e26f8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   e26e8:	bd10      	pop	{r4, pc}
   e26ea:	bf00      	nop
   e26ec:	2003e614 	.word	0x2003e614
   e26f0:	2003d9f8 	.word	0x2003d9f8
   e26f4:	000e24f1 	.word	0x000e24f1
   e26f8:	2003d984 	.word	0x2003d984

000e26fc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   e26fc:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   e26fe:	4c0a      	ldr	r4, [pc, #40]	; (e2728 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   e2700:	7823      	ldrb	r3, [r4, #0]
   e2702:	f3bf 8f5b 	dmb	ish
   e2706:	07db      	lsls	r3, r3, #31
   e2708:	d40b      	bmi.n	e2722 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   e270a:	4620      	mov	r0, r4
   e270c:	f7f1 fcd6 	bl	d40bc <__cxa_guard_acquire>
   e2710:	b138      	cbz	r0, e2722 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   e2712:	4620      	mov	r0, r4
   e2714:	f7f1 fcd7 	bl	d40c6 <__cxa_guard_release>
   e2718:	4a04      	ldr	r2, [pc, #16]	; (e272c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   e271a:	4905      	ldr	r1, [pc, #20]	; (e2730 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   e271c:	4805      	ldr	r0, [pc, #20]	; (e2734 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   e271e:	f002 f8ad 	bl	e487c <__aeabi_atexit>
    return &factory;
}
   e2722:	4804      	ldr	r0, [pc, #16]	; (e2734 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   e2724:	bd10      	pop	{r4, pc}
   e2726:	bf00      	nop
   e2728:	2003e618 	.word	0x2003e618
   e272c:	2003d9f8 	.word	0x2003d9f8
   e2730:	000e24ef 	.word	0x000e24ef
   e2734:	2003d988 	.word	0x2003d988

000e2738 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   e2738:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   e273a:	2500      	movs	r5, #0
   e273c:	4604      	mov	r4, r0
   e273e:	e9c0 5500 	strd	r5, r5, [r0]
   e2742:	e9c0 5504 	strd	r5, r5, [r0, #16]
   e2746:	6085      	str	r5, [r0, #8]
   e2748:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   e274a:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   e274e:	f7fe fab1 	bl	e0cb4 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   e2752:	f7ff ffb5 	bl	e26c0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   e2756:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   e2758:	f7ff ffd0 	bl	e26fc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   e275c:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   e275e:	6220      	str	r0, [r4, #32]
}
   e2760:	4620      	mov	r0, r4
   e2762:	bd38      	pop	{r3, r4, r5, pc}

000e2764 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   e2764:	b510      	push	{r4, lr}
    static LogManager mgr;
   e2766:	4c0b      	ldr	r4, [pc, #44]	; (e2794 <_ZN5spark10LogManager8instanceEv+0x30>)
   e2768:	7823      	ldrb	r3, [r4, #0]
   e276a:	f3bf 8f5b 	dmb	ish
   e276e:	07db      	lsls	r3, r3, #31
   e2770:	d40e      	bmi.n	e2790 <_ZN5spark10LogManager8instanceEv+0x2c>
   e2772:	4620      	mov	r0, r4
   e2774:	f7f1 fca2 	bl	d40bc <__cxa_guard_acquire>
   e2778:	b150      	cbz	r0, e2790 <_ZN5spark10LogManager8instanceEv+0x2c>
   e277a:	4807      	ldr	r0, [pc, #28]	; (e2798 <_ZN5spark10LogManager8instanceEv+0x34>)
   e277c:	f7ff ffdc 	bl	e2738 <_ZN5spark10LogManagerC1Ev>
   e2780:	4620      	mov	r0, r4
   e2782:	f7f1 fca0 	bl	d40c6 <__cxa_guard_release>
   e2786:	4a05      	ldr	r2, [pc, #20]	; (e279c <_ZN5spark10LogManager8instanceEv+0x38>)
   e2788:	4905      	ldr	r1, [pc, #20]	; (e27a0 <_ZN5spark10LogManager8instanceEv+0x3c>)
   e278a:	4803      	ldr	r0, [pc, #12]	; (e2798 <_ZN5spark10LogManager8instanceEv+0x34>)
   e278c:	f002 f876 	bl	e487c <__aeabi_atexit>
    return &mgr;
}
   e2790:	4801      	ldr	r0, [pc, #4]	; (e2798 <_ZN5spark10LogManager8instanceEv+0x34>)
   e2792:	bd10      	pop	{r4, pc}
   e2794:	2003e610 	.word	0x2003e610
   e2798:	2003e620 	.word	0x2003e620
   e279c:	2003d9f8 	.word	0x2003d9f8
   e27a0:	000e2bf9 	.word	0x000e2bf9

000e27a4 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   e27a4:	4a02      	ldr	r2, [pc, #8]	; (e27b0 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   e27a6:	4903      	ldr	r1, [pc, #12]	; (e27b4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   e27a8:	4803      	ldr	r0, [pc, #12]	; (e27b8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   e27aa:	2300      	movs	r3, #0
   e27ac:	f7fe bcb2 	b.w	e1114 <log_set_callbacks>
   e27b0:	000e2ad5 	.word	0x000e2ad5
   e27b4:	000e2a61 	.word	0x000e2a61
   e27b8:	000e29e1 	.word	0x000e29e1

000e27bc <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   e27bc:	2300      	movs	r3, #0
   e27be:	461a      	mov	r2, r3
   e27c0:	4619      	mov	r1, r3
   e27c2:	4618      	mov	r0, r3
   e27c4:	f7fe bca6 	b.w	e1114 <log_set_callbacks>

000e27c8 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   e27c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   e27ca:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   e27cc:	f851 3b04 	ldr.w	r3, [r1], #4
   e27d0:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   e27d2:	4604      	mov	r4, r0
   e27d4:	a801      	add	r0, sp, #4
   e27d6:	f7fe fe79 	bl	e14cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   e27da:	466a      	mov	r2, sp
   e27dc:	4629      	mov	r1, r5
   e27de:	4620      	mov	r0, r4
   e27e0:	f7ff fd15 	bl	e220e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   e27e4:	a801      	add	r0, sp, #4
   e27e6:	f7f7 ff82 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   e27ea:	4620      	mov	r0, r4
   e27ec:	b003      	add	sp, #12
   e27ee:	bd30      	pop	{r4, r5, pc}

000e27f0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   e27f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   e27f2:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   e27f4:	f851 3b04 	ldr.w	r3, [r1], #4
   e27f8:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   e27fa:	4604      	mov	r4, r0
   e27fc:	a801      	add	r0, sp, #4
   e27fe:	f7fe fe65 	bl	e14cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   e2802:	466a      	mov	r2, sp
   e2804:	4629      	mov	r1, r5
   e2806:	4620      	mov	r0, r4
   e2808:	f7ff fd7c 	bl	e2304 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   e280c:	a801      	add	r0, sp, #4
   e280e:	f7f7 ff6e 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   e2812:	4620      	mov	r0, r4
   e2814:	b003      	add	sp, #12
   e2816:	bd30      	pop	{r4, r5, pc}

000e2818 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   e2818:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   e281a:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   e281c:	f851 3b04 	ldr.w	r3, [r1], #4
   e2820:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   e2822:	4604      	mov	r4, r0
   e2824:	a801      	add	r0, sp, #4
   e2826:	f7fe fe51 	bl	e14cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   e282a:	466a      	mov	r2, sp
   e282c:	4629      	mov	r1, r5
   e282e:	4620      	mov	r0, r4
   e2830:	f7ff fd44 	bl	e22bc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   e2834:	a801      	add	r0, sp, #4
   e2836:	f7f7 ff5a 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   e283a:	4620      	mov	r0, r4
   e283c:	b003      	add	sp, #12
   e283e:	bd30      	pop	{r4, r5, pc}

000e2840 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   e2840:	b570      	push	{r4, r5, r6, lr}
   e2842:	b08a      	sub	sp, #40	; 0x28
   e2844:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   e2846:	4601      	mov	r1, r0
   e2848:	a804      	add	r0, sp, #16
   e284a:	f7ff ffd1 	bl	e27f0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   e284e:	4e14      	ldr	r6, [pc, #80]	; (e28a0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   e2850:	a804      	add	r0, sp, #16
   e2852:	f7ff fd6f 	bl	e2334 <_ZN5spark18JSONObjectIterator4nextEv>
   e2856:	b1e8      	cbz	r0, e2894 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   e2858:	a904      	add	r1, sp, #16
   e285a:	4668      	mov	r0, sp
   e285c:	f7ff ffdc 	bl	e2818 <_ZNK5spark18JSONObjectIterator4nameEv>
   e2860:	9802      	ldr	r0, [sp, #8]
   e2862:	4631      	mov	r1, r6
   e2864:	f7ff fe6d 	bl	e2542 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   e2868:	4604      	mov	r4, r0
   e286a:	b110      	cbz	r0, e2872 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   e286c:	1e2c      	subs	r4, r5, #0
   e286e:	bf18      	it	ne
   e2870:	2401      	movne	r4, #1
   e2872:	a801      	add	r0, sp, #4
   e2874:	f7f7 ff3b 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   e2878:	2c00      	cmp	r4, #0
   e287a:	d0e9      	beq.n	e2850 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   e287c:	a904      	add	r1, sp, #16
   e287e:	4668      	mov	r0, sp
   e2880:	f7ff ffa2 	bl	e27c8 <_ZNK5spark18JSONObjectIterator5valueEv>
   e2884:	4668      	mov	r0, sp
   e2886:	f7ff fcf8 	bl	e227a <_ZNK5spark9JSONValue5toIntEv>
   e288a:	6028      	str	r0, [r5, #0]
   e288c:	a801      	add	r0, sp, #4
   e288e:	f7f7 ff2e 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   e2892:	e7dd      	b.n	e2850 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   e2894:	a805      	add	r0, sp, #20
   e2896:	f7f7 ff2a 	bl	da6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   e289a:	b00a      	add	sp, #40	; 0x28
   e289c:	bd70      	pop	{r4, r5, r6, pc}
   e289e:	bf00      	nop
   e28a0:	000e8829 	.word	0x000e8829

000e28a4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   e28a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   e28a6:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   e28a8:	4620      	mov	r0, r4
   e28aa:	4912      	ldr	r1, [pc, #72]	; (e28f4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   e28ac:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   e28ae:	f002 ff42 	bl	e5736 <strcmp>
   e28b2:	b948      	cbnz	r0, e28c8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   e28b4:	f001 fd5c 	bl	e4370 <_Z16_fetch_usbserialv>
   e28b8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   e28bc:	f001 fd48 	bl	e4350 <_ZN9USBSerial5beginEl>
        return &Serial;
   e28c0:	f001 fd56 	bl	e4370 <_Z16_fetch_usbserialv>
}
   e28c4:	b003      	add	sp, #12
   e28c6:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   e28c8:	490b      	ldr	r1, [pc, #44]	; (e28f8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   e28ca:	4620      	mov	r0, r4
   e28cc:	f002 ff33 	bl	e5736 <strcmp>
   e28d0:	b970      	cbnz	r0, e28f0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   e28d2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   e28d6:	a901      	add	r1, sp, #4
   e28d8:	4628      	mov	r0, r5
        int baud = 9600;
   e28da:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   e28dc:	f7ff ffb0 	bl	e2840 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   e28e0:	f001 fcba 	bl	e4258 <_Z22__fetch_global_Serial1v>
   e28e4:	9901      	ldr	r1, [sp, #4]
   e28e6:	f001 fcb1 	bl	e424c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   e28ea:	f001 fcb5 	bl	e4258 <_Z22__fetch_global_Serial1v>
   e28ee:	e7e9      	b.n	e28c4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   e28f0:	2000      	movs	r0, #0
   e28f2:	e7e7      	b.n	e28c4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   e28f4:	000e882e 	.word	0x000e882e
   e28f8:	000e8835 	.word	0x000e8835

000e28fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   e28fc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   e28fe:	e9d0 5300 	ldrd	r5, r3, [r0]
   e2902:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   e2904:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   e2906:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   e290a:	42ae      	cmp	r6, r5
   e290c:	d005      	beq.n	e291a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   e290e:	f105 0008 	add.w	r0, r5, #8
   e2912:	f7ff fff3 	bl	e28fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   e2916:	3514      	adds	r5, #20
   e2918:	e7f7      	b.n	e290a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   e291a:	6820      	ldr	r0, [r4, #0]
   e291c:	f7fe fd18 	bl	e1350 <free>
}
   e2920:	4620      	mov	r0, r4
   e2922:	bd70      	pop	{r4, r5, r6, pc}

000e2924 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   e2924:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   e2926:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   e292a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   e292c:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   e2930:	42ae      	cmp	r6, r5
   e2932:	d004      	beq.n	e293e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   e2934:	4628      	mov	r0, r5
   e2936:	f001 f91f 	bl	e3b78 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   e293a:	3510      	adds	r5, #16
   e293c:	e7f8      	b.n	e2930 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   e293e:	6820      	ldr	r0, [r4, #0]
   e2940:	f7fe fd06 	bl	e1350 <free>
}
   e2944:	4620      	mov	r0, r4
   e2946:	bd70      	pop	{r4, r5, r6, pc}

000e2948 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   e2948:	b510      	push	{r4, lr}
   e294a:	4604      	mov	r4, r0
   e294c:	300c      	adds	r0, #12
   e294e:	f7ff ffd5 	bl	e28fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   e2952:	4620      	mov	r0, r4
   e2954:	f7ff ffe6 	bl	e2924 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   e2958:	4620      	mov	r0, r4
   e295a:	bd10      	pop	{r4, pc}

000e295c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   e295c:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   e295e:	4b04      	ldr	r3, [pc, #16]	; (e2970 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   e2960:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   e2962:	f840 3b04 	str.w	r3, [r0], #4
   e2966:	f7ff ffef 	bl	e2948 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   e296a:	4620      	mov	r0, r4
   e296c:	bd10      	pop	{r4, pc}
   e296e:	bf00      	nop
   e2970:	000e79a8 	.word	0x000e79a8

000e2974 <_ZN5spark16StreamLogHandlerD0Ev>:
   e2974:	b510      	push	{r4, lr}
   e2976:	4604      	mov	r4, r0
   e2978:	f7ff fff0 	bl	e295c <_ZN5spark16StreamLogHandlerD1Ev>
   e297c:	4620      	mov	r0, r4
   e297e:	2124      	movs	r1, #36	; 0x24
   e2980:	f001 ff81 	bl	e4886 <_ZdlPvj>
   e2984:	4620      	mov	r0, r4
   e2986:	bd10      	pop	{r4, pc}

000e2988 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   e2988:	b510      	push	{r4, lr}
   e298a:	4b03      	ldr	r3, [pc, #12]	; (e2998 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   e298c:	6003      	str	r3, [r0, #0]
   e298e:	4604      	mov	r4, r0
   e2990:	f7ff ffe4 	bl	e295c <_ZN5spark16StreamLogHandlerD1Ev>
   e2994:	4620      	mov	r0, r4
   e2996:	bd10      	pop	{r4, pc}
   e2998:	000e88c8 	.word	0x000e88c8

000e299c <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   e299c:	b510      	push	{r4, lr}
   e299e:	4604      	mov	r4, r0
   e29a0:	f7ff fff2 	bl	e2988 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   e29a4:	4620      	mov	r0, r4
   e29a6:	2124      	movs	r1, #36	; 0x24
   e29a8:	f001 ff6d 	bl	e4886 <_ZdlPvj>
   e29ac:	4620      	mov	r0, r4
   e29ae:	bd10      	pop	{r4, pc}

000e29b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   e29b0:	2200      	movs	r2, #0
   e29b2:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   e29b6:	b510      	push	{r4, lr}
        capacity_(0) {
   e29b8:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   e29ba:	680c      	ldr	r4, [r1, #0]
   e29bc:	6004      	str	r4, [r0, #0]
   e29be:	684c      	ldr	r4, [r1, #4]
   e29c0:	6044      	str	r4, [r0, #4]
   e29c2:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   e29c4:	600a      	str	r2, [r1, #0]
   e29c6:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   e29c8:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   e29ca:	608a      	str	r2, [r1, #8]
}
   e29cc:	bd10      	pop	{r4, pc}

000e29ce <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   e29ce:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   e29d0:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   e29d2:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   e29d4:	6818      	ldr	r0, [r3, #0]
   e29d6:	f7fe f985 	bl	e0ce4 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   e29da:	4620      	mov	r0, r4
   e29dc:	bd10      	pop	{r4, pc}
	...

000e29e0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   e29e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e29e4:	b087      	sub	sp, #28
   e29e6:	4680      	mov	r8, r0
   e29e8:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   e29ea:	4b1c      	ldr	r3, [pc, #112]	; (e2a5c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   e29ec:	685b      	ldr	r3, [r3, #4]
   e29ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
   e29f2:	4689      	mov	r9, r1
   e29f4:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   e29f6:	b96b      	cbnz	r3, e2a14 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   e29f8:	f7ff feb4 	bl	e2764 <_ZN5spark10LogManager8instanceEv>
   e29fc:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   e29fe:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   e2a02:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   e2a04:	9305      	str	r3, [sp, #20]
   e2a06:	f7fe f965 	bl	e0cd4 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   e2a0a:	7b23      	ldrb	r3, [r4, #12]
   e2a0c:	b12b      	cbz	r3, e2a1a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   e2a0e:	a805      	add	r0, sp, #20
   e2a10:	f7ff ffdd 	bl	e29ce <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   e2a14:	b007      	add	sp, #28
   e2a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   e2a1a:	2301      	movs	r3, #1
   e2a1c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   e2a1e:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   e2a22:	fa5f f989 	uxtb.w	r9, r9
   e2a26:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   e2a2a:	45aa      	cmp	sl, r5
   e2a2c:	d012      	beq.n	e2a54 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   e2a2e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   e2a32:	4631      	mov	r1, r6
   e2a34:	1d38      	adds	r0, r7, #4
   e2a36:	f7ff fe19 	bl	e266c <_ZNK5spark6detail9LogFilter5levelEPKc>
   e2a3a:	4581      	cmp	r9, r0
   e2a3c:	d3f5      	bcc.n	e2a2a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   e2a3e:	683b      	ldr	r3, [r7, #0]
   e2a40:	9a03      	ldr	r2, [sp, #12]
   e2a42:	9200      	str	r2, [sp, #0]
   e2a44:	f8d3 b008 	ldr.w	fp, [r3, #8]
   e2a48:	464a      	mov	r2, r9
   e2a4a:	4633      	mov	r3, r6
   e2a4c:	4641      	mov	r1, r8
   e2a4e:	4638      	mov	r0, r7
   e2a50:	47d8      	blx	fp
   e2a52:	e7ea      	b.n	e2a2a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   e2a54:	2300      	movs	r3, #0
   e2a56:	7323      	strb	r3, [r4, #12]
   e2a58:	e7d9      	b.n	e2a0e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   e2a5a:	bf00      	nop
   e2a5c:	e000ed00 	.word	0xe000ed00

000e2a60 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   e2a60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2a64:	469b      	mov	fp, r3
   e2a66:	4b1a      	ldr	r3, [pc, #104]	; (e2ad0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   e2a68:	685b      	ldr	r3, [r3, #4]
   e2a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   e2a6e:	4680      	mov	r8, r0
   e2a70:	4689      	mov	r9, r1
   e2a72:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   e2a74:	b96b      	cbnz	r3, e2a92 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   e2a76:	f7ff fe75 	bl	e2764 <_ZN5spark10LogManager8instanceEv>
   e2a7a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   e2a7c:	f100 0324 	add.w	r3, r0, #36	; 0x24
   e2a80:	6a40      	ldr	r0, [r0, #36]	; 0x24
   e2a82:	9301      	str	r3, [sp, #4]
   e2a84:	f7fe f926 	bl	e0cd4 <os_mutex_recursive_lock>
        if (that->isActive()) {
   e2a88:	7b23      	ldrb	r3, [r4, #12]
   e2a8a:	b12b      	cbz	r3, e2a98 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   e2a8c:	a801      	add	r0, sp, #4
   e2a8e:	f7ff ff9e 	bl	e29ce <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   e2a92:	b003      	add	sp, #12
   e2a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   e2a98:	2301      	movs	r3, #1
   e2a9a:	7323      	strb	r3, [r4, #12]
   e2a9c:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   e2aa0:	b2f6      	uxtb	r6, r6
   e2aa2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   e2aa6:	4555      	cmp	r5, sl
   e2aa8:	d00e      	beq.n	e2ac8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   e2aaa:	f855 7b04 	ldr.w	r7, [r5], #4
   e2aae:	4659      	mov	r1, fp
   e2ab0:	1d38      	adds	r0, r7, #4
   e2ab2:	f7ff fddb 	bl	e266c <_ZNK5spark6detail9LogFilter5levelEPKc>
   e2ab6:	4286      	cmp	r6, r0
   e2ab8:	d3f5      	bcc.n	e2aa6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   e2aba:	683b      	ldr	r3, [r7, #0]
   e2abc:	464a      	mov	r2, r9
   e2abe:	68db      	ldr	r3, [r3, #12]
   e2ac0:	4641      	mov	r1, r8
   e2ac2:	4638      	mov	r0, r7
   e2ac4:	4798      	blx	r3
   e2ac6:	e7ee      	b.n	e2aa6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   e2ac8:	2300      	movs	r3, #0
   e2aca:	7323      	strb	r3, [r4, #12]
   e2acc:	e7de      	b.n	e2a8c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   e2ace:	bf00      	nop
   e2ad0:	e000ed00 	.word	0xe000ed00

000e2ad4 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   e2ad4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   e2ad8:	4b16      	ldr	r3, [pc, #88]	; (e2b34 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   e2ada:	685b      	ldr	r3, [r3, #4]
   e2adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
   e2ae0:	4605      	mov	r5, r0
   e2ae2:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   e2ae4:	bb1b      	cbnz	r3, e2b2e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   e2ae6:	f7ff fe3d 	bl	e2764 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   e2aea:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   e2aee:	4604      	mov	r4, r0
   e2af0:	6a40      	ldr	r0, [r0, #36]	; 0x24
   e2af2:	9301      	str	r3, [sp, #4]
   e2af4:	f7fe f8ee 	bl	e0cd4 <os_mutex_recursive_lock>
   e2af8:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   e2afc:	2446      	movs	r4, #70	; 0x46
   e2afe:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   e2b02:	45b0      	cmp	r8, r6
   e2b04:	d109      	bne.n	e2b1a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   e2b06:	a801      	add	r0, sp, #4
   e2b08:	f7ff ff61 	bl	e29ce <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   e2b0c:	42a5      	cmp	r5, r4
   e2b0e:	bfb4      	ite	lt
   e2b10:	2000      	movlt	r0, #0
   e2b12:	2001      	movge	r0, #1
}
   e2b14:	b002      	add	sp, #8
   e2b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   e2b1a:	f856 0b04 	ldr.w	r0, [r6], #4
   e2b1e:	4639      	mov	r1, r7
   e2b20:	3004      	adds	r0, #4
   e2b22:	f7ff fda3 	bl	e266c <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   e2b26:	4284      	cmp	r4, r0
   e2b28:	bfa8      	it	ge
   e2b2a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   e2b2c:	e7e9      	b.n	e2b02 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   e2b2e:	2000      	movs	r0, #0
   e2b30:	e7f0      	b.n	e2b14 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   e2b32:	bf00      	nop
   e2b34:	e000ed00 	.word	0xe000ed00

000e2b38 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   e2b38:	b570      	push	{r4, r5, r6, lr}
   e2b3a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   e2b3c:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   e2b40:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   e2b42:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   e2b46:	4282      	cmp	r2, r0
   e2b48:	d007      	beq.n	e2b5a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   e2b4a:	4601      	mov	r1, r0
            if (*p == value) {
   e2b4c:	681d      	ldr	r5, [r3, #0]
   e2b4e:	f851 6b04 	ldr.w	r6, [r1], #4
   e2b52:	42ae      	cmp	r6, r5
   e2b54:	d003      	beq.n	e2b5e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   e2b56:	4608      	mov	r0, r1
   e2b58:	e7f5      	b.n	e2b46 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   e2b5a:	2000      	movs	r0, #0
}
   e2b5c:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   e2b5e:	1a52      	subs	r2, r2, r1
   e2b60:	f002 fd8c 	bl	e567c <memmove>
    --size_;
   e2b64:	6863      	ldr	r3, [r4, #4]
   e2b66:	3b01      	subs	r3, #1
   e2b68:	6063      	str	r3, [r4, #4]
    return true;
   e2b6a:	2001      	movs	r0, #1
   e2b6c:	e7f6      	b.n	e2b5c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000e2b6e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   e2b6e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   e2b70:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   e2b74:	4604      	mov	r4, r0
   e2b76:	6a40      	ldr	r0, [r0, #36]	; 0x24
   e2b78:	9101      	str	r1, [sp, #4]
   e2b7a:	9303      	str	r3, [sp, #12]
   e2b7c:	f7fe f8aa 	bl	e0cd4 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   e2b80:	a901      	add	r1, sp, #4
   e2b82:	4620      	mov	r0, r4
   e2b84:	f7ff ffd8 	bl	e2b38 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   e2b88:	b118      	cbz	r0, e2b92 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   e2b8a:	6863      	ldr	r3, [r4, #4]
   e2b8c:	b90b      	cbnz	r3, e2b92 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   e2b8e:	f7ff fe15 	bl	e27bc <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   e2b92:	a803      	add	r0, sp, #12
   e2b94:	f7ff ff1b 	bl	e29ce <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   e2b98:	b004      	add	sp, #16
   e2b9a:	bd10      	pop	{r4, pc}

000e2b9c <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   e2b9c:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   e2b9e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   e2ba2:	2318      	movs	r3, #24
   e2ba4:	4604      	mov	r4, r0
   e2ba6:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   e2baa:	42ae      	cmp	r6, r5
   e2bac:	d015      	beq.n	e2bda <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   e2bae:	f105 0110 	add.w	r1, r5, #16
   e2bb2:	4620      	mov	r0, r4
   e2bb4:	f7ff ffc0 	bl	e2b38 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   e2bb8:	6863      	ldr	r3, [r4, #4]
   e2bba:	b90b      	cbnz	r3, e2bc0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   e2bbc:	f7ff fdfe 	bl	e27bc <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   e2bc0:	69e0      	ldr	r0, [r4, #28]
   e2bc2:	6929      	ldr	r1, [r5, #16]
   e2bc4:	6803      	ldr	r3, [r0, #0]
   e2bc6:	68db      	ldr	r3, [r3, #12]
   e2bc8:	4798      	blx	r3
        if (h.stream) {
   e2bca:	6969      	ldr	r1, [r5, #20]
   e2bcc:	b119      	cbz	r1, e2bd6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   e2bce:	6a20      	ldr	r0, [r4, #32]
   e2bd0:	6803      	ldr	r3, [r0, #0]
   e2bd2:	68db      	ldr	r3, [r3, #12]
   e2bd4:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   e2bd6:	3518      	adds	r5, #24
   e2bd8:	e7e7      	b.n	e2baa <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   e2bda:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   e2bde:	2618      	movs	r6, #24
   e2be0:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   e2be4:	42ae      	cmp	r6, r5
   e2be6:	d004      	beq.n	e2bf2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   e2be8:	4628      	mov	r0, r5
   e2bea:	f000 ffc5 	bl	e3b78 <_ZN6StringD1Ev>
   e2bee:	3518      	adds	r5, #24
   e2bf0:	e7f8      	b.n	e2be4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   e2bf2:	2300      	movs	r3, #0
   e2bf4:	6163      	str	r3, [r4, #20]
}
   e2bf6:	bd70      	pop	{r4, r5, r6, pc}

000e2bf8 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   e2bf8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   e2bfa:	4604      	mov	r4, r0
    resetSystemCallbacks();
   e2bfc:	f7ff fdde 	bl	e27bc <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   e2c00:	f104 0324 	add.w	r3, r4, #36	; 0x24
   e2c04:	6a60      	ldr	r0, [r4, #36]	; 0x24
   e2c06:	9301      	str	r3, [sp, #4]
   e2c08:	f7fe f864 	bl	e0cd4 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   e2c0c:	4620      	mov	r0, r4
   e2c0e:	f7ff ffc5 	bl	e2b9c <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   e2c12:	a801      	add	r0, sp, #4
   e2c14:	f7ff fedb 	bl	e29ce <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   e2c18:	6a60      	ldr	r0, [r4, #36]	; 0x24
   e2c1a:	b108      	cbz	r0, e2c20 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   e2c1c:	f7fe f852 	bl	e0cc4 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   e2c20:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   e2c24:	2618      	movs	r6, #24
   e2c26:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   e2c2a:	42ae      	cmp	r6, r5
   e2c2c:	d004      	beq.n	e2c38 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   e2c2e:	4628      	mov	r0, r5
   e2c30:	f000 ffa2 	bl	e3b78 <_ZN6StringD1Ev>
   e2c34:	3518      	adds	r5, #24
   e2c36:	e7f8      	b.n	e2c2a <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   e2c38:	6920      	ldr	r0, [r4, #16]
   e2c3a:	f7fe fb89 	bl	e1350 <free>
   e2c3e:	6820      	ldr	r0, [r4, #0]
   e2c40:	f7fe fb86 	bl	e1350 <free>
}
   e2c44:	4620      	mov	r0, r4
   e2c46:	b002      	add	sp, #8
   e2c48:	bd70      	pop	{r4, r5, r6, pc}

000e2c4a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   e2c4a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   e2c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e2c4e:	4606      	mov	r6, r0
   e2c50:	460c      	mov	r4, r1
   e2c52:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   e2c54:	d927      	bls.n	e2ca6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   e2c56:	4290      	cmp	r0, r2
   e2c58:	d226      	bcs.n	e2ca8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   e2c5a:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   e2c5e:	1a6c      	subs	r4, r5, r1
   e2c60:	f1a1 0714 	sub.w	r7, r1, #20
   e2c64:	4404      	add	r4, r0
        capacity_(0) {
   e2c66:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   e2c68:	42af      	cmp	r7, r5
   e2c6a:	d03d      	beq.n	e2ce8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   e2c6c:	b1a4      	cbz	r4, e2c98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   e2c6e:	682b      	ldr	r3, [r5, #0]
   e2c70:	6023      	str	r3, [r4, #0]
   e2c72:	88ab      	ldrh	r3, [r5, #4]
   e2c74:	80a3      	strh	r3, [r4, #4]
   e2c76:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   e2c7a:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   e2c7c:	e9c4 6602 	strd	r6, r6, [r4, #8]
   e2c80:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   e2c82:	68ab      	ldr	r3, [r5, #8]
   e2c84:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   e2c86:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e2c88:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   e2c8a:	68ea      	ldr	r2, [r5, #12]
   e2c8c:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   e2c8e:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e2c90:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   e2c92:	692a      	ldr	r2, [r5, #16]
   e2c94:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   e2c96:	612b      	str	r3, [r5, #16]
   e2c98:	f105 0008 	add.w	r0, r5, #8
   e2c9c:	f7ff fe2e 	bl	e28fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   e2ca0:	3d14      	subs	r5, #20
   e2ca2:	3c14      	subs	r4, #20
   e2ca4:	e7e0      	b.n	e2c68 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   e2ca6:	d01f      	beq.n	e2ce8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   e2ca8:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   e2caa:	42ac      	cmp	r4, r5
   e2cac:	d01c      	beq.n	e2ce8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   e2cae:	b1a6      	cbz	r6, e2cda <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   e2cb0:	6823      	ldr	r3, [r4, #0]
   e2cb2:	6033      	str	r3, [r6, #0]
   e2cb4:	88a3      	ldrh	r3, [r4, #4]
   e2cb6:	80b3      	strh	r3, [r6, #4]
   e2cb8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   e2cbc:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   e2cbe:	e9c6 7702 	strd	r7, r7, [r6, #8]
   e2cc2:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   e2cc4:	68a3      	ldr	r3, [r4, #8]
   e2cc6:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   e2cc8:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e2cca:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   e2ccc:	68e2      	ldr	r2, [r4, #12]
   e2cce:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   e2cd0:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e2cd2:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   e2cd4:	6922      	ldr	r2, [r4, #16]
   e2cd6:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   e2cd8:	6123      	str	r3, [r4, #16]
   e2cda:	f104 0008 	add.w	r0, r4, #8
   e2cde:	f7ff fe0d 	bl	e28fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   e2ce2:	3414      	adds	r4, #20
   e2ce4:	3614      	adds	r6, #20
   e2ce6:	e7e0      	b.n	e2caa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   e2ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e2cea <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   e2cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   e2cec:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   e2cf0:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   e2cf2:	4604      	mov	r4, r0
   e2cf4:	460e      	mov	r6, r1
   e2cf6:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   e2cf8:	db0d      	blt.n	e2d16 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   e2cfa:	3501      	adds	r5, #1
        if (n > 0) {
   e2cfc:	2d00      	cmp	r5, #0
   e2cfe:	6800      	ldr	r0, [r0, #0]
   e2d00:	dd04      	ble.n	e2d0c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   e2d02:	00a9      	lsls	r1, r5, #2
   e2d04:	f7fe fb2c 	bl	e1360 <realloc>
            if (!d) {
   e2d08:	b918      	cbnz	r0, e2d12 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   e2d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   e2d0c:	f7fe fb20 	bl	e1350 <free>
        T* d = nullptr;
   e2d10:	2000      	movs	r0, #0
        data_ = d;
   e2d12:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   e2d14:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   e2d16:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   e2d18:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   e2d1a:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   e2d1e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   e2d20:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   e2d24:	1d08      	adds	r0, r1, #4
   e2d26:	f002 fca9 	bl	e567c <memmove>
    new(p) T(std::move(value));
   e2d2a:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   e2d2e:	6863      	ldr	r3, [r4, #4]
   e2d30:	3301      	adds	r3, #1
   e2d32:	6063      	str	r3, [r4, #4]
    return true;
   e2d34:	2001      	movs	r0, #1
   e2d36:	e7e8      	b.n	e2d0a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000e2d38 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   e2d38:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   e2d3a:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   e2d3e:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   e2d40:	6a40      	ldr	r0, [r0, #36]	; 0x24
   e2d42:	9301      	str	r3, [sp, #4]
   e2d44:	460d      	mov	r5, r1
   e2d46:	f7fd ffc5 	bl	e0cd4 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   e2d4a:	e9d4 3100 	ldrd	r3, r1, [r4]
   e2d4e:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   e2d52:	4283      	cmp	r3, r0
   e2d54:	461a      	mov	r2, r3
   e2d56:	d00b      	beq.n	e2d70 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   e2d58:	6812      	ldr	r2, [r2, #0]
   e2d5a:	42aa      	cmp	r2, r5
   e2d5c:	f103 0304 	add.w	r3, r3, #4
   e2d60:	d1f7      	bne.n	e2d52 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   e2d62:	a801      	add	r0, sp, #4
   e2d64:	f7ff fe33 	bl	e29ce <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   e2d68:	2500      	movs	r5, #0
}
   e2d6a:	4628      	mov	r0, r5
   e2d6c:	b003      	add	sp, #12
   e2d6e:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   e2d70:	462a      	mov	r2, r5
   e2d72:	4620      	mov	r0, r4
   e2d74:	f7ff ffb9 	bl	e2cea <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   e2d78:	4605      	mov	r5, r0
   e2d7a:	2800      	cmp	r0, #0
   e2d7c:	d0f1      	beq.n	e2d62 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   e2d7e:	6863      	ldr	r3, [r4, #4]
   e2d80:	2b01      	cmp	r3, #1
   e2d82:	d101      	bne.n	e2d88 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   e2d84:	f7ff fd0e 	bl	e27a4 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   e2d88:	a801      	add	r0, sp, #4
   e2d8a:	f7ff fe20 	bl	e29ce <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   e2d8e:	e7ec      	b.n	e2d6a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000e2d90 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   e2d90:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   e2d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e2d94:	4604      	mov	r4, r0
   e2d96:	460d      	mov	r5, r1
   e2d98:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   e2d9a:	d914      	bls.n	e2dc6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   e2d9c:	4290      	cmp	r0, r2
   e2d9e:	d213      	bcs.n	e2dc8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   e2da0:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   e2da4:	1a75      	subs	r5, r6, r1
   e2da6:	f1a1 0710 	sub.w	r7, r1, #16
   e2daa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   e2dac:	42b7      	cmp	r7, r6
   e2dae:	d018      	beq.n	e2de2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   e2db0:	b11c      	cbz	r4, e2dba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   e2db2:	4631      	mov	r1, r6
   e2db4:	4620      	mov	r0, r4
   e2db6:	f000 ff5b 	bl	e3c70 <_ZN6StringC1EOS_>
                end->~T();
   e2dba:	4630      	mov	r0, r6
   e2dbc:	f000 fedc 	bl	e3b78 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   e2dc0:	3e10      	subs	r6, #16
   e2dc2:	3c10      	subs	r4, #16
   e2dc4:	e7f2      	b.n	e2dac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   e2dc6:	d00c      	beq.n	e2de2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   e2dc8:	42b5      	cmp	r5, r6
   e2dca:	d00a      	beq.n	e2de2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   e2dcc:	b11c      	cbz	r4, e2dd6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   e2dce:	4629      	mov	r1, r5
   e2dd0:	4620      	mov	r0, r4
   e2dd2:	f000 ff4d 	bl	e3c70 <_ZN6StringC1EOS_>
                p->~T();
   e2dd6:	4628      	mov	r0, r5
   e2dd8:	f000 fece 	bl	e3b78 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   e2ddc:	3510      	adds	r5, #16
   e2dde:	3410      	adds	r4, #16
   e2de0:	e7f2      	b.n	e2dc8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   e2de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e2de4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   e2de4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   e2de6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   e2de8:	4605      	mov	r5, r0
        if (n > 0) {
   e2dea:	dd11      	ble.n	e2e10 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   e2dec:	0130      	lsls	r0, r6, #4
   e2dee:	f7fe faa7 	bl	e1340 <malloc>
            if (!d) {
   e2df2:	4604      	mov	r4, r0
   e2df4:	b158      	cbz	r0, e2e0e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   e2df6:	e9d5 1200 	ldrd	r1, r2, [r5]
   e2dfa:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   e2dfe:	f7ff ffc7 	bl	e2d90 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   e2e02:	6828      	ldr	r0, [r5, #0]
   e2e04:	f7fe faa4 	bl	e1350 <free>
        data_ = d;
   e2e08:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   e2e0a:	60ae      	str	r6, [r5, #8]
        return true;
   e2e0c:	2001      	movs	r0, #1
    }
   e2e0e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   e2e10:	2400      	movs	r4, #0
   e2e12:	e7f6      	b.n	e2e02 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000e2e14 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   e2e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2e18:	4691      	mov	r9, r2
   e2e1a:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   e2e1c:	2300      	movs	r3, #0
   e2e1e:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   e2e20:	f8d9 1004 	ldr.w	r1, [r9, #4]
   e2e24:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   e2e26:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   e2e28:	4299      	cmp	r1, r3
        capacity_(0) {
   e2e2a:	e9c0 3300 	strd	r3, r3, [r0]
   e2e2e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   e2e32:	e9c0 3304 	strd	r3, r3, [r0, #16]
   e2e36:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   e2e3a:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   e2e3c:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   e2e3e:	dc23      	bgt.n	e2e88 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   e2e40:	e9d9 5700 	ldrd	r5, r7, [r9]
   e2e44:	2314      	movs	r3, #20
   e2e46:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   e2e4a:	42af      	cmp	r7, r5
   e2e4c:	d03b      	beq.n	e2ec6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   e2e4e:	4629      	mov	r1, r5
   e2e50:	a80d      	add	r0, sp, #52	; 0x34
   e2e52:	f000 ff0d 	bl	e3c70 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   e2e56:	a90d      	add	r1, sp, #52	; 0x34
   e2e58:	a811      	add	r0, sp, #68	; 0x44
   e2e5a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   e2e5c:	f000 ff08 	bl	e3c70 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   e2e60:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   e2e64:	4299      	cmp	r1, r3
   e2e66:	da1b      	bge.n	e2ea0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   e2e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   e2e6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   e2e6c:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   e2e70:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   e2e74:	4631      	mov	r1, r6
   e2e76:	f106 0010 	add.w	r0, r6, #16
   e2e7a:	f7ff ff89 	bl	e2d90 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   e2e7e:	b9ee      	cbnz	r6, e2ebc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   e2e80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e2e82:	3301      	adds	r3, #1
   e2e84:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   e2e86:	e011      	b.n	e2eac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   e2e88:	a80a      	add	r0, sp, #40	; 0x28
   e2e8a:	f7ff ffab 	bl	e2de4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   e2e8e:	2800      	cmp	r0, #0
   e2e90:	d1d6      	bne.n	e2e40 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   e2e92:	a80a      	add	r0, sp, #40	; 0x28
   e2e94:	f7ff fd46 	bl	e2924 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   e2e98:	4620      	mov	r0, r4
   e2e9a:	b017      	add	sp, #92	; 0x5c
   e2e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   e2ea0:	3101      	adds	r1, #1
   e2ea2:	a80a      	add	r0, sp, #40	; 0x28
   e2ea4:	f7ff ff9e 	bl	e2de4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   e2ea8:	2800      	cmp	r0, #0
   e2eaa:	d1dd      	bne.n	e2e68 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   e2eac:	a811      	add	r0, sp, #68	; 0x44
   e2eae:	f000 fe63 	bl	e3b78 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   e2eb2:	a80d      	add	r0, sp, #52	; 0x34
   e2eb4:	f000 fe60 	bl	e3b78 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   e2eb8:	3514      	adds	r5, #20
   e2eba:	e7c6      	b.n	e2e4a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   e2ebc:	a911      	add	r1, sp, #68	; 0x44
   e2ebe:	4630      	mov	r0, r6
   e2ec0:	f000 fed6 	bl	e3c70 <_ZN6StringC1EOS_>
   e2ec4:	e7dc      	b.n	e2e80 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   e2ec6:	2600      	movs	r6, #0
   e2ec8:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   e2ecc:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   e2ece:	4637      	mov	r7, r6
   e2ed0:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   e2ed4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e2ed8:	429e      	cmp	r6, r3
   e2eda:	f280 8097 	bge.w	e300c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   e2ede:	0133      	lsls	r3, r6, #4
   e2ee0:	58d3      	ldr	r3, [r2, r3]
   e2ee2:	9308      	str	r3, [sp, #32]
        if (!category) {
   e2ee4:	b90b      	cbnz	r3, e2eea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   e2ee6:	3601      	adds	r6, #1
   e2ee8:	e7f4      	b.n	e2ed4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   e2eea:	fb0a f306 	mul.w	r3, sl, r6
   e2eee:	9709      	str	r7, [sp, #36]	; 0x24
   e2ef0:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   e2ef2:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   e2ef4:	a909      	add	r1, sp, #36	; 0x24
   e2ef6:	a808      	add	r0, sp, #32
   e2ef8:	f7ff fafc 	bl	e24f4 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   e2efc:	4683      	mov	fp, r0
   e2efe:	2800      	cmp	r0, #0
   e2f00:	d0f1      	beq.n	e2ee6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   e2f02:	4601      	mov	r1, r0
   e2f04:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   e2f06:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   e2f0a:	f10d 031f 	add.w	r3, sp, #31
   e2f0e:	4628      	mov	r0, r5
   e2f10:	f7ff fb6e 	bl	e25f0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   e2f14:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   e2f18:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   e2f1a:	f1b8 0f00 	cmp.w	r8, #0
   e2f1e:	d166      	bne.n	e2fee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   e2f20:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   e2f24:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   e2f28:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   e2f2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   e2f30:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   e2f34:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   e2f38:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   e2f3c:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   e2f40:	4293      	cmp	r3, r2
   e2f42:	db1a      	blt.n	e2f7a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   e2f44:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   e2f48:	f1bb 0f00 	cmp.w	fp, #0
   e2f4c:	dd4a      	ble.n	e2fe4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   e2f4e:	fb0a f00b 	mul.w	r0, sl, fp
   e2f52:	f7fe f9f5 	bl	e1340 <malloc>
            if (!d) {
   e2f56:	9004      	str	r0, [sp, #16]
   e2f58:	2800      	cmp	r0, #0
   e2f5a:	d045      	beq.n	e2fe8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   e2f5c:	e9d5 1200 	ldrd	r1, r2, [r5]
   e2f60:	fb0a 1202 	mla	r2, sl, r2, r1
   e2f64:	f7ff fe71 	bl	e2c4a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   e2f68:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   e2f6a:	6828      	ldr	r0, [r5, #0]
   e2f6c:	9304      	str	r3, [sp, #16]
   e2f6e:	f7fe f9ef 	bl	e1350 <free>
        data_ = d;
   e2f72:	9b04      	ldr	r3, [sp, #16]
   e2f74:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   e2f76:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   e2f7a:	9b01      	ldr	r3, [sp, #4]
   e2f7c:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   e2f80:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   e2f82:	fb0a f303 	mul.w	r3, sl, r3
   e2f86:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   e2f8a:	f101 0014 	add.w	r0, r1, #20
   e2f8e:	fb0a b202 	mla	r2, sl, r2, fp
   e2f92:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   e2f94:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   e2f96:	f7ff fe58 	bl	e2c4a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   e2f9a:	9904      	ldr	r1, [sp, #16]
   e2f9c:	b1a9      	cbz	r1, e2fca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   e2f9e:	9b05      	ldr	r3, [sp, #20]
   e2fa0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   e2fa2:	f84b 2003 	str.w	r2, [fp, r3]
   e2fa6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   e2faa:	808b      	strh	r3, [r1, #4]
   e2fac:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   e2fb0:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   e2fb2:	e9c1 7702 	strd	r7, r7, [r1, #8]
   e2fb6:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   e2fb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e2fba:	608b      	str	r3, [r1, #8]
   e2fbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   e2fbe:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   e2fc0:	60cb      	str	r3, [r1, #12]
   e2fc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   e2fc4:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   e2fc6:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   e2fc8:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   e2fca:	686b      	ldr	r3, [r5, #4]
   e2fcc:	3301      	adds	r3, #1
   e2fce:	606b      	str	r3, [r5, #4]
   e2fd0:	a813      	add	r0, sp, #76	; 0x4c
   e2fd2:	f7ff fc93 	bl	e28fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   e2fd6:	f1b8 0f00 	cmp.w	r8, #0
   e2fda:	d008      	beq.n	e2fee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   e2fdc:	a80d      	add	r0, sp, #52	; 0x34
   e2fde:	f7ff fc8d 	bl	e28fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   e2fe2:	e756      	b.n	e2e92 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   e2fe4:	4643      	mov	r3, r8
   e2fe6:	e7c0      	b.n	e2f6a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   e2fe8:	f04f 0801 	mov.w	r8, #1
   e2fec:	e7f0      	b.n	e2fd0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   e2fee:	9b01      	ldr	r3, [sp, #4]
   e2ff0:	682d      	ldr	r5, [r5, #0]
   e2ff2:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   e2ff6:	9b08      	ldr	r3, [sp, #32]
   e2ff8:	781b      	ldrb	r3, [r3, #0]
   e2ffa:	b92b      	cbnz	r3, e3008 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   e2ffc:	f8d9 3000 	ldr.w	r3, [r9]
   e3000:	9a02      	ldr	r2, [sp, #8]
   e3002:	4413      	add	r3, r2
   e3004:	7c1b      	ldrb	r3, [r3, #16]
   e3006:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   e3008:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   e300a:	e773      	b.n	e2ef4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e300c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   e300e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e3010:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   e3012:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e3014:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   e3016:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   e3018:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   e301a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e301c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   e301e:	60a2      	str	r2, [r4, #8]
   e3020:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   e3022:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e3024:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   e3026:	60e2      	str	r2, [r4, #12]
   e3028:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   e302a:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e302c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   e302e:	6122      	str	r2, [r4, #16]
   e3030:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   e3032:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   e3034:	9b03      	ldr	r3, [sp, #12]
   e3036:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   e3038:	6162      	str	r2, [r4, #20]
   e303a:	7623      	strb	r3, [r4, #24]
   e303c:	e7ce      	b.n	e2fdc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

000e3040 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   e3040:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   e3042:	4605      	mov	r5, r0
   e3044:	4b09      	ldr	r3, [pc, #36]	; (e306c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   e3046:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   e304a:	4604      	mov	r4, r0
   e304c:	460e      	mov	r6, r1
        filter_(level, filters) {
   e304e:	a801      	add	r0, sp, #4
   e3050:	4611      	mov	r1, r2
   e3052:	f7fa f938 	bl	dd2c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   e3056:	aa01      	add	r2, sp, #4
   e3058:	4631      	mov	r1, r6
   e305a:	4628      	mov	r0, r5
   e305c:	f7ff feda 	bl	e2e14 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   e3060:	a801      	add	r0, sp, #4
   e3062:	f7fa f8d7 	bl	dd214 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   e3066:	4620      	mov	r0, r4
   e3068:	b004      	add	sp, #16
   e306a:	bd70      	pop	{r4, r5, r6, pc}
   e306c:	000e79a8 	.word	0x000e79a8

000e3070 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   e3070:	b5f0      	push	{r4, r5, r6, r7, lr}
   e3072:	460f      	mov	r7, r1
   e3074:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   e3076:	4926      	ldr	r1, [pc, #152]	; (e3110 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   e3078:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   e307a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   e307c:	4616      	mov	r6, r2
   e307e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   e3080:	f002 fb59 	bl	e5736 <strcmp>
   e3084:	bb00      	cbnz	r0, e30c8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   e3086:	b1e4      	cbz	r4, e30c2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   e3088:	4629      	mov	r1, r5
   e308a:	4668      	mov	r0, sp
   e308c:	f7ff fc90 	bl	e29b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   e3090:	4920      	ldr	r1, [pc, #128]	; (e3114 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   e3092:	2024      	movs	r0, #36	; 0x24
   e3094:	f001 fbf9 	bl	e488a <_ZnwjRKSt9nothrow_t>
   e3098:	4605      	mov	r5, r0
   e309a:	b170      	cbz	r0, e30ba <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   e309c:	4669      	mov	r1, sp
   e309e:	a803      	add	r0, sp, #12
   e30a0:	f7fa f911 	bl	dd2c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   e30a4:	aa03      	add	r2, sp, #12
   e30a6:	4631      	mov	r1, r6
   e30a8:	4628      	mov	r0, r5
   e30aa:	f7ff ffc9 	bl	e3040 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   e30ae:	a803      	add	r0, sp, #12
   e30b0:	f7fa f8b0 	bl	dd214 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   e30b4:	4b18      	ldr	r3, [pc, #96]	; (e3118 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   e30b6:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   e30b8:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   e30ba:	4668      	mov	r0, sp
   e30bc:	f7fa f8aa 	bl	dd214 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   e30c0:	462c      	mov	r4, r5
}
   e30c2:	4620      	mov	r0, r4
   e30c4:	b007      	add	sp, #28
   e30c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   e30c8:	4914      	ldr	r1, [pc, #80]	; (e311c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   e30ca:	4638      	mov	r0, r7
   e30cc:	f002 fb33 	bl	e5736 <strcmp>
   e30d0:	b9e0      	cbnz	r0, e310c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   e30d2:	2c00      	cmp	r4, #0
   e30d4:	d0f5      	beq.n	e30c2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   e30d6:	4629      	mov	r1, r5
   e30d8:	4668      	mov	r0, sp
   e30da:	f7ff fc69 	bl	e29b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   e30de:	490d      	ldr	r1, [pc, #52]	; (e3114 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   e30e0:	2024      	movs	r0, #36	; 0x24
   e30e2:	f001 fbd2 	bl	e488a <_ZnwjRKSt9nothrow_t>
   e30e6:	4605      	mov	r5, r0
   e30e8:	2800      	cmp	r0, #0
   e30ea:	d0e6      	beq.n	e30ba <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   e30ec:	4669      	mov	r1, sp
   e30ee:	a803      	add	r0, sp, #12
   e30f0:	f7fa f8e9 	bl	dd2c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   e30f4:	aa03      	add	r2, sp, #12
   e30f6:	4631      	mov	r1, r6
   e30f8:	4628      	mov	r0, r5
   e30fa:	f7ff ffa1 	bl	e3040 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   e30fe:	a803      	add	r0, sp, #12
   e3100:	f7fa f888 	bl	dd214 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   e3104:	4b06      	ldr	r3, [pc, #24]	; (e3120 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   e3106:	602b      	str	r3, [r5, #0]
   e3108:	622c      	str	r4, [r5, #32]
}
   e310a:	e7d6      	b.n	e30ba <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   e310c:	2400      	movs	r4, #0
   e310e:	e7d8      	b.n	e30c2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   e3110:	000e883d 	.word	0x000e883d
   e3114:	000e89c8 	.word	0x000e89c8
   e3118:	000e88c8 	.word	0x000e88c8
   e311c:	000e8841 	.word	0x000e8841
   e3120:	000e88b0 	.word	0x000e88b0

000e3124 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   e3124:	4b01      	ldr	r3, [pc, #4]	; (e312c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   e3126:	4a02      	ldr	r2, [pc, #8]	; (e3130 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   e3128:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   e312a:	4770      	bx	lr
   e312c:	2003e61c 	.word	0x2003e61c
   e3130:	000e797f 	.word	0x000e797f

000e3134 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   e3134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e3138:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   e313a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   e313e:	4604      	mov	r4, r0
   e3140:	460e      	mov	r6, r1
   e3142:	4617      	mov	r7, r2
   e3144:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   e3146:	f001 f913 	bl	e4370 <_Z16_fetch_usbserialv>
   e314a:	4581      	cmp	r9, r0
   e314c:	d04c      	beq.n	e31e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   e314e:	792b      	ldrb	r3, [r5, #4]
   e3150:	0719      	lsls	r1, r3, #28
   e3152:	d504      	bpl.n	e315e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   e3154:	696a      	ldr	r2, [r5, #20]
   e3156:	4954      	ldr	r1, [pc, #336]	; (e32a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   e3158:	4620      	mov	r0, r4
   e315a:	f7ff fa3a 	bl	e25d2 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   e315e:	f1b8 0f00 	cmp.w	r8, #0
   e3162:	d00d      	beq.n	e3180 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   e3164:	215b      	movs	r1, #91	; 0x5b
   e3166:	4620      	mov	r0, r4
   e3168:	f7ff fa27 	bl	e25ba <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   e316c:	4641      	mov	r1, r8
   e316e:	4620      	mov	r0, r4
   e3170:	f7ff fa14 	bl	e259c <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   e3174:	6823      	ldr	r3, [r4, #0]
   e3176:	494d      	ldr	r1, [pc, #308]	; (e32ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   e3178:	68db      	ldr	r3, [r3, #12]
   e317a:	2202      	movs	r2, #2
   e317c:	4620      	mov	r0, r4
   e317e:	4798      	blx	r3
    if (attr.has_file) {
   e3180:	792b      	ldrb	r3, [r5, #4]
   e3182:	07da      	lsls	r2, r3, #31
   e3184:	d523      	bpl.n	e31ce <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   e3186:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   e318a:	212f      	movs	r1, #47	; 0x2f
   e318c:	4640      	mov	r0, r8
   e318e:	f002 fb2f 	bl	e57f0 <strrchr>
    if (s1) {
   e3192:	b108      	cbz	r0, e3198 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   e3194:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   e3198:	4641      	mov	r1, r8
   e319a:	4620      	mov	r0, r4
   e319c:	f7ff f9fe 	bl	e259c <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   e31a0:	792b      	ldrb	r3, [r5, #4]
   e31a2:	079b      	lsls	r3, r3, #30
   e31a4:	d508      	bpl.n	e31b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   e31a6:	213a      	movs	r1, #58	; 0x3a
   e31a8:	4620      	mov	r0, r4
   e31aa:	f7ff fa06 	bl	e25ba <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   e31ae:	68ea      	ldr	r2, [r5, #12]
   e31b0:	493f      	ldr	r1, [pc, #252]	; (e32b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   e31b2:	4620      	mov	r0, r4
   e31b4:	f7ff fa0d 	bl	e25d2 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   e31b8:	792a      	ldrb	r2, [r5, #4]
   e31ba:	6823      	ldr	r3, [r4, #0]
   e31bc:	f012 0f04 	tst.w	r2, #4
   e31c0:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   e31c2:	bf14      	ite	ne
   e31c4:	493b      	ldrne	r1, [pc, #236]	; (e32b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   e31c6:	493c      	ldreq	r1, [pc, #240]	; (e32b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   e31c8:	2202      	movs	r2, #2
            write(": ", 2);
   e31ca:	4620      	mov	r0, r4
   e31cc:	4798      	blx	r3
    if (attr.has_function) {
   e31ce:	792b      	ldrb	r3, [r5, #4]
   e31d0:	0758      	lsls	r0, r3, #29
   e31d2:	d51d      	bpl.n	e3210 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   e31d4:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   e31d6:	460b      	mov	r3, r1
   e31d8:	461a      	mov	r2, r3
    for (; *s; ++s) {
   e31da:	f813 0b01 	ldrb.w	r0, [r3], #1
   e31de:	b160      	cbz	r0, e31fa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   e31e0:	2820      	cmp	r0, #32
   e31e2:	d108      	bne.n	e31f6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   e31e4:	4619      	mov	r1, r3
   e31e6:	e7f7      	b.n	e31d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   e31e8:	4834      	ldr	r0, [pc, #208]	; (e32bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   e31ea:	f000 f966 	bl	e34ba <_ZN5spark12NetworkClass9listeningEv>
   e31ee:	2800      	cmp	r0, #0
   e31f0:	d0ad      	beq.n	e314e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   e31f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   e31f6:	2828      	cmp	r0, #40	; 0x28
   e31f8:	d1ee      	bne.n	e31d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   e31fa:	6823      	ldr	r3, [r4, #0]
   e31fc:	1a52      	subs	r2, r2, r1
   e31fe:	68db      	ldr	r3, [r3, #12]
   e3200:	4620      	mov	r0, r4
   e3202:	4798      	blx	r3
        write("(): ", 4);
   e3204:	6823      	ldr	r3, [r4, #0]
   e3206:	492e      	ldr	r1, [pc, #184]	; (e32c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   e3208:	68db      	ldr	r3, [r3, #12]
   e320a:	2204      	movs	r2, #4
   e320c:	4620      	mov	r0, r4
   e320e:	4798      	blx	r3
    return log_level_name(level, nullptr);
   e3210:	2100      	movs	r1, #0
   e3212:	4638      	mov	r0, r7
   e3214:	f7fd ff76 	bl	e1104 <log_level_name>
   e3218:	4601      	mov	r1, r0
    write(s);
   e321a:	4620      	mov	r0, r4
   e321c:	f7ff f9be 	bl	e259c <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   e3220:	6823      	ldr	r3, [r4, #0]
   e3222:	4925      	ldr	r1, [pc, #148]	; (e32b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   e3224:	68db      	ldr	r3, [r3, #12]
   e3226:	2202      	movs	r2, #2
   e3228:	4620      	mov	r0, r4
   e322a:	4798      	blx	r3
    if (msg) {
   e322c:	b11e      	cbz	r6, e3236 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   e322e:	4631      	mov	r1, r6
   e3230:	4620      	mov	r0, r4
   e3232:	f7ff f9b3 	bl	e259c <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   e3236:	792b      	ldrb	r3, [r5, #4]
   e3238:	f013 0f30 	tst.w	r3, #48	; 0x30
   e323c:	d02c      	beq.n	e3298 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   e323e:	6823      	ldr	r3, [r4, #0]
   e3240:	4920      	ldr	r1, [pc, #128]	; (e32c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   e3242:	68db      	ldr	r3, [r3, #12]
   e3244:	2202      	movs	r2, #2
   e3246:	4620      	mov	r0, r4
   e3248:	4798      	blx	r3
        if (attr.has_code) {
   e324a:	792b      	ldrb	r3, [r5, #4]
   e324c:	06d9      	lsls	r1, r3, #27
   e324e:	d50a      	bpl.n	e3266 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   e3250:	6823      	ldr	r3, [r4, #0]
   e3252:	491d      	ldr	r1, [pc, #116]	; (e32c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   e3254:	68db      	ldr	r3, [r3, #12]
   e3256:	2207      	movs	r2, #7
   e3258:	4620      	mov	r0, r4
   e325a:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   e325c:	69aa      	ldr	r2, [r5, #24]
   e325e:	491b      	ldr	r1, [pc, #108]	; (e32cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   e3260:	4620      	mov	r0, r4
   e3262:	f7ff f9b6 	bl	e25d2 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   e3266:	792b      	ldrb	r3, [r5, #4]
   e3268:	069a      	lsls	r2, r3, #26
   e326a:	d511      	bpl.n	e3290 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   e326c:	06db      	lsls	r3, r3, #27
   e326e:	d505      	bpl.n	e327c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   e3270:	6823      	ldr	r3, [r4, #0]
   e3272:	4910      	ldr	r1, [pc, #64]	; (e32b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   e3274:	68db      	ldr	r3, [r3, #12]
   e3276:	2202      	movs	r2, #2
   e3278:	4620      	mov	r0, r4
   e327a:	4798      	blx	r3
            write("details = ", 10);
   e327c:	6823      	ldr	r3, [r4, #0]
   e327e:	4914      	ldr	r1, [pc, #80]	; (e32d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   e3280:	68db      	ldr	r3, [r3, #12]
   e3282:	4620      	mov	r0, r4
   e3284:	220a      	movs	r2, #10
   e3286:	4798      	blx	r3
            write(attr.details);
   e3288:	69e9      	ldr	r1, [r5, #28]
   e328a:	4620      	mov	r0, r4
   e328c:	f7ff f986 	bl	e259c <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   e3290:	215d      	movs	r1, #93	; 0x5d
   e3292:	4620      	mov	r0, r4
   e3294:	f7ff f991 	bl	e25ba <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   e3298:	6823      	ldr	r3, [r4, #0]
   e329a:	490e      	ldr	r1, [pc, #56]	; (e32d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   e329c:	68db      	ldr	r3, [r3, #12]
   e329e:	4620      	mov	r0, r4
   e32a0:	2202      	movs	r2, #2
}
   e32a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   e32a6:	4718      	bx	r3
   e32a8:	000e8852 	.word	0x000e8852
   e32ac:	000e8859 	.word	0x000e8859
   e32b0:	000e7b72 	.word	0x000e7b72
   e32b4:	000e885c 	.word	0x000e885c
   e32b8:	000e72ef 	.word	0x000e72ef
   e32bc:	2003e648 	.word	0x2003e648
   e32c0:	000e885f 	.word	0x000e885f
   e32c4:	000e8864 	.word	0x000e8864
   e32c8:	000e8867 	.word	0x000e8867
   e32cc:	000e886f 	.word	0x000e886f
   e32d0:	000e8872 	.word	0x000e8872
   e32d4:	000e827b 	.word	0x000e827b

000e32d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   e32d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e32dc:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   e32de:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   e32e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   e32e4:	4605      	mov	r5, r0
   e32e6:	460f      	mov	r7, r1
   e32e8:	4690      	mov	r8, r2
   e32ea:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   e32ec:	f001 f840 	bl	e4370 <_Z16_fetch_usbserialv>
   e32f0:	4581      	cmp	r9, r0
   e32f2:	d105      	bne.n	e3300 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   e32f4:	4849      	ldr	r0, [pc, #292]	; (e341c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   e32f6:	f000 f8e0 	bl	e34ba <_ZN5spark12NetworkClass9listeningEv>
   e32fa:	2800      	cmp	r0, #0
   e32fc:	f040 808a 	bne.w	e3414 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   e3300:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   e3302:	4a47      	ldr	r2, [pc, #284]	; (e3420 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   e3304:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   e3306:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   e330a:	a801      	add	r0, sp, #4
        strm_(stream) {
   e330c:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   e330e:	f88d 9008 	strb.w	r9, [sp, #8]
   e3312:	f7ff f838 	bl	e2386 <_ZN5spark10JSONWriter11beginObjectEv>
   e3316:	4649      	mov	r1, r9
   e3318:	4640      	mov	r0, r8
   e331a:	f7fd fef3 	bl	e1104 <log_level_name>
    json.name("l", 1).value(s);
   e331e:	4941      	ldr	r1, [pc, #260]	; (e3424 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   e3320:	4680      	mov	r8, r0
   e3322:	2201      	movs	r2, #1
   e3324:	a801      	add	r0, sp, #4
   e3326:	f7ff f8b7 	bl	e2498 <_ZN5spark10JSONWriter4nameEPKcj>
   e332a:	4641      	mov	r1, r8
   e332c:	f7ff f928 	bl	e2580 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   e3330:	b13f      	cbz	r7, e3342 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   e3332:	493d      	ldr	r1, [pc, #244]	; (e3428 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   e3334:	2201      	movs	r2, #1
   e3336:	a801      	add	r0, sp, #4
   e3338:	f7ff f8ae 	bl	e2498 <_ZN5spark10JSONWriter4nameEPKcj>
   e333c:	4639      	mov	r1, r7
   e333e:	f7ff f91f 	bl	e2580 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   e3342:	b13e      	cbz	r6, e3354 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   e3344:	4939      	ldr	r1, [pc, #228]	; (e342c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   e3346:	2201      	movs	r2, #1
   e3348:	a801      	add	r0, sp, #4
   e334a:	f7ff f8a5 	bl	e2498 <_ZN5spark10JSONWriter4nameEPKcj>
   e334e:	4631      	mov	r1, r6
   e3350:	f7ff f916 	bl	e2580 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   e3354:	7923      	ldrb	r3, [r4, #4]
   e3356:	07df      	lsls	r7, r3, #31
   e3358:	d50e      	bpl.n	e3378 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   e335a:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   e335c:	212f      	movs	r1, #47	; 0x2f
   e335e:	4630      	mov	r0, r6
   e3360:	f002 fa46 	bl	e57f0 <strrchr>
    if (s1) {
   e3364:	b100      	cbz	r0, e3368 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   e3366:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   e3368:	4931      	ldr	r1, [pc, #196]	; (e3430 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   e336a:	2201      	movs	r2, #1
   e336c:	a801      	add	r0, sp, #4
   e336e:	f7ff f893 	bl	e2498 <_ZN5spark10JSONWriter4nameEPKcj>
   e3372:	4631      	mov	r1, r6
   e3374:	f7ff f904 	bl	e2580 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   e3378:	7923      	ldrb	r3, [r4, #4]
   e337a:	079e      	lsls	r6, r3, #30
   e337c:	d507      	bpl.n	e338e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   e337e:	492d      	ldr	r1, [pc, #180]	; (e3434 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   e3380:	2202      	movs	r2, #2
   e3382:	a801      	add	r0, sp, #4
   e3384:	f7ff f888 	bl	e2498 <_ZN5spark10JSONWriter4nameEPKcj>
   e3388:	68e1      	ldr	r1, [r4, #12]
   e338a:	f7ff f809 	bl	e23a0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   e338e:	7923      	ldrb	r3, [r4, #4]
   e3390:	0758      	lsls	r0, r3, #29
   e3392:	d514      	bpl.n	e33be <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   e3394:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   e3396:	4633      	mov	r3, r6
   e3398:	461f      	mov	r7, r3
    for (; *s; ++s) {
   e339a:	f813 2b01 	ldrb.w	r2, [r3], #1
   e339e:	b12a      	cbz	r2, e33ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   e33a0:	2a20      	cmp	r2, #32
   e33a2:	d101      	bne.n	e33a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   e33a4:	461e      	mov	r6, r3
   e33a6:	e7f7      	b.n	e3398 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   e33a8:	2a28      	cmp	r2, #40	; 0x28
   e33aa:	d1f5      	bne.n	e3398 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   e33ac:	4922      	ldr	r1, [pc, #136]	; (e3438 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   e33ae:	2202      	movs	r2, #2
   e33b0:	a801      	add	r0, sp, #4
   e33b2:	f7ff f871 	bl	e2498 <_ZN5spark10JSONWriter4nameEPKcj>
   e33b6:	1bba      	subs	r2, r7, r6
   e33b8:	4631      	mov	r1, r6
   e33ba:	f7ff f87d 	bl	e24b8 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   e33be:	7923      	ldrb	r3, [r4, #4]
   e33c0:	0719      	lsls	r1, r3, #28
   e33c2:	d507      	bpl.n	e33d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   e33c4:	491d      	ldr	r1, [pc, #116]	; (e343c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   e33c6:	2201      	movs	r2, #1
   e33c8:	a801      	add	r0, sp, #4
   e33ca:	f7ff f865 	bl	e2498 <_ZN5spark10JSONWriter4nameEPKcj>
   e33ce:	6961      	ldr	r1, [r4, #20]
   e33d0:	f7fe fff8 	bl	e23c4 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   e33d4:	7923      	ldrb	r3, [r4, #4]
   e33d6:	06da      	lsls	r2, r3, #27
   e33d8:	d508      	bpl.n	e33ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   e33da:	2204      	movs	r2, #4
   e33dc:	4918      	ldr	r1, [pc, #96]	; (e3440 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   e33de:	eb0d 0002 	add.w	r0, sp, r2
   e33e2:	f7ff f859 	bl	e2498 <_ZN5spark10JSONWriter4nameEPKcj>
   e33e6:	69a1      	ldr	r1, [r4, #24]
   e33e8:	f7fe ffda 	bl	e23a0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   e33ec:	7923      	ldrb	r3, [r4, #4]
   e33ee:	069b      	lsls	r3, r3, #26
   e33f0:	d507      	bpl.n	e3402 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   e33f2:	4914      	ldr	r1, [pc, #80]	; (e3444 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   e33f4:	2206      	movs	r2, #6
   e33f6:	a801      	add	r0, sp, #4
   e33f8:	f7ff f84e 	bl	e2498 <_ZN5spark10JSONWriter4nameEPKcj>
   e33fc:	69e1      	ldr	r1, [r4, #28]
   e33fe:	f7ff f8bf 	bl	e2580 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   e3402:	a801      	add	r0, sp, #4
   e3404:	f7fe ffa9 	bl	e235a <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   e3408:	6a28      	ldr	r0, [r5, #32]
   e340a:	490f      	ldr	r1, [pc, #60]	; (e3448 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   e340c:	6803      	ldr	r3, [r0, #0]
   e340e:	2202      	movs	r2, #2
   e3410:	68db      	ldr	r3, [r3, #12]
   e3412:	4798      	blx	r3
}
   e3414:	b005      	add	sp, #20
   e3416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e341a:	bf00      	nop
   e341c:	2003e648 	.word	0x2003e648
   e3420:	000e8898 	.word	0x000e8898
   e3424:	000e8833 	.word	0x000e8833
   e3428:	000e8102 	.word	0x000e8102
   e342c:	000e7e7c 	.word	0x000e7e7c
   e3430:	000e7f81 	.word	0x000e7f81
   e3434:	000e887d 	.word	0x000e887d
   e3438:	000e8880 	.word	0x000e8880
   e343c:	000e6fcd 	.word	0x000e6fcd
   e3440:	000e8883 	.word	0x000e8883
   e3444:	000e8888 	.word	0x000e8888
   e3448:	000e827b 	.word	0x000e827b

000e344c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   e344c:	2300      	movs	r3, #0
   e344e:	6840      	ldr	r0, [r0, #4]
   e3450:	461a      	mov	r2, r3
   e3452:	f7fd bf15 	b.w	e1280 <network_connect>

000e3456 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   e3456:	6840      	ldr	r0, [r0, #4]
   e3458:	2200      	movs	r2, #0
   e345a:	2102      	movs	r1, #2
   e345c:	f7fd bf20 	b.w	e12a0 <network_disconnect>

000e3460 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   e3460:	2200      	movs	r2, #0
   e3462:	6840      	ldr	r0, [r0, #4]
   e3464:	4611      	mov	r1, r2
   e3466:	f7fd bf13 	b.w	e1290 <network_connecting>

000e346a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   e346a:	2200      	movs	r2, #0
   e346c:	6840      	ldr	r0, [r0, #4]
   e346e:	4611      	mov	r1, r2
   e3470:	f7fd bf1e 	b.w	e12b0 <network_ready>

000e3474 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   e3474:	2300      	movs	r3, #0
   e3476:	6840      	ldr	r0, [r0, #4]
   e3478:	461a      	mov	r2, r3
   e347a:	4619      	mov	r1, r3
   e347c:	f7fd bf20 	b.w	e12c0 <network_on>

000e3480 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   e3480:	2300      	movs	r3, #0
   e3482:	6840      	ldr	r0, [r0, #4]
   e3484:	461a      	mov	r2, r3
   e3486:	4619      	mov	r1, r3
   e3488:	f7fd bf22 	b.w	e12d0 <network_off>

000e348c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   e348c:	6840      	ldr	r0, [r0, #4]
   e348e:	2100      	movs	r1, #0
   e3490:	f7fd bf46 	b.w	e1320 <network_is_on>

000e3494 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   e3494:	6840      	ldr	r0, [r0, #4]
   e3496:	2100      	movs	r1, #0
   e3498:	f7fd bf4a 	b.w	e1330 <network_is_off>

000e349c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   e349c:	6840      	ldr	r0, [r0, #4]
   e349e:	2200      	movs	r2, #0
   e34a0:	f081 0101 	eor.w	r1, r1, #1
   e34a4:	f7fd bf1c 	b.w	e12e0 <network_listen>

000e34a8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   e34a8:	6840      	ldr	r0, [r0, #4]
   e34aa:	2200      	movs	r2, #0
   e34ac:	f7fd bf28 	b.w	e1300 <network_set_listen_timeout>

000e34b0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   e34b0:	2200      	movs	r2, #0
   e34b2:	6840      	ldr	r0, [r0, #4]
   e34b4:	4611      	mov	r1, r2
   e34b6:	f7fd bf2b 	b.w	e1310 <network_get_listen_timeout>

000e34ba <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   e34ba:	2200      	movs	r2, #0
   e34bc:	6840      	ldr	r0, [r0, #4]
   e34be:	4611      	mov	r1, r2
   e34c0:	f7fd bf16 	b.w	e12f0 <network_listening>

000e34c4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   e34c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   e34c8:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   e34ca:	b095      	sub	sp, #84	; 0x54
   e34cc:	4616      	mov	r6, r2
   e34ce:	460d      	mov	r5, r1
   e34d0:	4607      	mov	r7, r0
    IPAddress addr;
   e34d2:	f7fe fde3 	bl	e209c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   e34d6:	4621      	mov	r1, r4
   e34d8:	2218      	movs	r2, #24
   e34da:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   e34dc:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   e34de:	f002 f8e7 	bl	e56b0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   e34e2:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   e34e4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   e34e8:	4621      	mov	r1, r4
   e34ea:	466b      	mov	r3, sp
   e34ec:	aa0c      	add	r2, sp, #48	; 0x30
   e34ee:	4630      	mov	r0, r6
   e34f0:	f7fd fd00 	bl	e0ef4 <netdb_getaddrinfo>
    if (!r) {
   e34f4:	4604      	mov	r4, r0
   e34f6:	2800      	cmp	r0, #0
   e34f8:	d146      	bne.n	e3588 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   e34fa:	4602      	mov	r2, r0
   e34fc:	2101      	movs	r1, #1
   e34fe:	6868      	ldr	r0, [r5, #4]
   e3500:	f7fd fed6 	bl	e12b0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e3504:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   e3506:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e3508:	4622      	mov	r2, r4
   e350a:	6868      	ldr	r0, [r5, #4]
   e350c:	f7fd fed0 	bl	e12b0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e3510:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e3512:	4681      	mov	r9, r0
        bool ok = false;
   e3514:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e3516:	2e00      	cmp	r6, #0
   e3518:	d036      	beq.n	e3588 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   e351a:	2900      	cmp	r1, #0
   e351c:	d134      	bne.n	e3588 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   e351e:	6873      	ldr	r3, [r6, #4]
   e3520:	2b02      	cmp	r3, #2
   e3522:	d003      	beq.n	e352c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   e3524:	2b0a      	cmp	r3, #10
   e3526:	d00b      	beq.n	e3540 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e3528:	69f6      	ldr	r6, [r6, #28]
   e352a:	e7f4      	b.n	e3516 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   e352c:	f1b8 0f00 	cmp.w	r8, #0
   e3530:	d004      	beq.n	e353c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   e3532:	6971      	ldr	r1, [r6, #20]
   e3534:	4638      	mov	r0, r7
   e3536:	3104      	adds	r1, #4
   e3538:	f7fe fddd 	bl	e20f6 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   e353c:	4641      	mov	r1, r8
   e353e:	e7f3      	b.n	e3528 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   e3540:	f1b9 0f00 	cmp.w	r9, #0
   e3544:	d101      	bne.n	e354a <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   e3546:	4649      	mov	r1, r9
   e3548:	e7ee      	b.n	e3528 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   e354a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   e354c:	2210      	movs	r2, #16
   e354e:	a801      	add	r0, sp, #4
   e3550:	f002 f8ae 	bl	e56b0 <memset>
                    a.v = 6;
   e3554:	2306      	movs	r3, #6
   e3556:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   e355a:	ad01      	add	r5, sp, #4
   e355c:	f104 0308 	add.w	r3, r4, #8
   e3560:	3418      	adds	r4, #24
   e3562:	6818      	ldr	r0, [r3, #0]
   e3564:	6859      	ldr	r1, [r3, #4]
   e3566:	462a      	mov	r2, r5
   e3568:	c203      	stmia	r2!, {r0, r1}
   e356a:	3308      	adds	r3, #8
   e356c:	42a3      	cmp	r3, r4
   e356e:	4615      	mov	r5, r2
   e3570:	d1f7      	bne.n	e3562 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   e3572:	a901      	add	r1, sp, #4
   e3574:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   e3576:	ad07      	add	r5, sp, #28
   e3578:	f7fe fd9e 	bl	e20b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   e357c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e357e:	1d3c      	adds	r4, r7, #4
   e3580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e3582:	682b      	ldr	r3, [r5, #0]
   e3584:	7023      	strb	r3, [r4, #0]
   e3586:	e7de      	b.n	e3546 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   e3588:	9800      	ldr	r0, [sp, #0]
   e358a:	f7fd fcab 	bl	e0ee4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   e358e:	4638      	mov	r0, r7
   e3590:	b015      	add	sp, #84	; 0x54
   e3592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000e3598 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   e3598:	4b02      	ldr	r3, [pc, #8]	; (e35a4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   e359a:	4a03      	ldr	r2, [pc, #12]	; (e35a8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   e359c:	601a      	str	r2, [r3, #0]
   e359e:	2200      	movs	r2, #0
   e35a0:	605a      	str	r2, [r3, #4]

} // spark
   e35a2:	4770      	bx	lr
   e35a4:	2003e648 	.word	0x2003e648
   e35a8:	000e8910 	.word	0x000e8910

000e35ac <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   e35ac:	b508      	push	{r3, lr}
            return &Wire1;
   e35ae:	f001 f93d 	bl	e482c <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   e35b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   e35b6:	f7fe bcf9 	b.w	e1fac <_ZN7TwoWire4lockEv>

000e35ba <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   e35ba:	b510      	push	{r4, lr}
   e35bc:	4604      	mov	r4, r0
    lock_(_lock)
   e35be:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   e35c0:	b109      	cbz	r1, e35c6 <_ZN4PMICC1Eb+0xc>
        lock();
   e35c2:	f7ff fff3 	bl	e35ac <_ZN4PMIC4lockEv.constprop.0>
}
   e35c6:	4620      	mov	r0, r4
   e35c8:	bd10      	pop	{r4, pc}

000e35ca <_ZN4PMIC5beginEv>:
{
   e35ca:	b508      	push	{r3, lr}
            return &Wire1;
   e35cc:	f001 f92e 	bl	e482c <_Z20__fetch_global_Wire1v>
    if (!pmicWireInstance()->isEnabled()) {
   e35d0:	f7fe fce8 	bl	e1fa4 <_ZN7TwoWire9isEnabledEv>
   e35d4:	b918      	cbnz	r0, e35de <_ZN4PMIC5beginEv+0x14>
            return &Wire1;
   e35d6:	f001 f929 	bl	e482c <_Z20__fetch_global_Wire1v>
        pmicWireInstance()->begin();
   e35da:	f7fe fc8b 	bl	e1ef4 <_ZN7TwoWire5beginEv>
            return &Wire1;
   e35de:	f001 f925 	bl	e482c <_Z20__fetch_global_Wire1v>
}
   e35e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->isEnabled();
   e35e6:	f7fe bcdd 	b.w	e1fa4 <_ZN7TwoWire9isEnabledEv>

000e35ea <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   e35ea:	b508      	push	{r3, lr}
            return &Wire1;
   e35ec:	f001 f91e 	bl	e482c <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   e35f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   e35f4:	f7fe bce3 	b.w	e1fbe <_ZN7TwoWire6unlockEv>

000e35f8 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   e35f8:	b510      	push	{r4, lr}
    if (lock_) {
   e35fa:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   e35fc:	4604      	mov	r4, r0
    if (lock_) {
   e35fe:	b10b      	cbz	r3, e3604 <_ZN4PMICD1Ev+0xc>
        unlock();
   e3600:	f7ff fff3 	bl	e35ea <_ZN4PMIC6unlockEv>
}
   e3604:	4620      	mov	r0, r4
   e3606:	bd10      	pop	{r4, pc}

000e3608 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   e3608:	b510      	push	{r4, lr}
   e360a:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   e360c:	6800      	ldr	r0, [r0, #0]
   e360e:	f7ff ffec 	bl	e35ea <_ZN4PMIC6unlockEv>
   e3612:	4620      	mov	r0, r4
   e3614:	bd10      	pop	{r4, pc}

000e3616 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   e3616:	b530      	push	{r4, r5, lr}
   e3618:	b087      	sub	sp, #28
   e361a:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   e361c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   e361e:	f7ff ffc5 	bl	e35ac <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   e3622:	236b      	movs	r3, #107	; 0x6b
   e3624:	f88d 3008 	strb.w	r3, [sp, #8]
   e3628:	2300      	movs	r3, #0
   e362a:	2401      	movs	r4, #1
   e362c:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
   e362e:	230a      	movs	r3, #10
   e3630:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   e3632:	f88d 4010 	strb.w	r4, [sp, #16]
            return &Wire1;
   e3636:	f001 f8f9 	bl	e482c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   e363a:	a902      	add	r1, sp, #8
   e363c:	f7fe fc93 	bl	e1f66 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   e3640:	f001 f8f4 	bl	e482c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   e3644:	6803      	ldr	r3, [r0, #0]
   e3646:	4629      	mov	r1, r5
   e3648:	689b      	ldr	r3, [r3, #8]
   e364a:	4798      	blx	r3
            return &Wire1;
   e364c:	f001 f8ee 	bl	e482c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   e3650:	4621      	mov	r1, r4
   e3652:	f7fe fca0 	bl	e1f96 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   e3656:	9403      	str	r4, [sp, #12]
            return &Wire1;
   e3658:	f001 f8e8 	bl	e482c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   e365c:	a902      	add	r1, sp, #8
   e365e:	f7fe fc4f 	bl	e1f00 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   e3662:	f001 f8e3 	bl	e482c <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   e3666:	6803      	ldr	r3, [r0, #0]
   e3668:	695b      	ldr	r3, [r3, #20]
   e366a:	4798      	blx	r3
   e366c:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   e366e:	a801      	add	r0, sp, #4
   e3670:	f7ff ffca 	bl	e3608 <_ZNSt10lock_guardI4PMICED1Ev>
}
   e3674:	b2e0      	uxtb	r0, r4
   e3676:	b007      	add	sp, #28
   e3678:	bd30      	pop	{r4, r5, pc}

000e367a <_ZN4PMIC16getChargeVoltageEv>:
    return readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
   e367a:	2104      	movs	r1, #4
   e367c:	f7ff bfcb 	b.w	e3616 <_ZN4PMIC12readRegisterEh>

000e3680 <_ZN4PMIC21getChargeVoltageValueEv>:
uint16_t PMIC::getChargeVoltageValue() {
   e3680:	b510      	push	{r4, lr}
    byte raw = getChargeVoltage();
   e3682:	f7ff fffa 	bl	e367a <_ZN4PMIC16getChargeVoltageEv>
   e3686:	2302      	movs	r3, #2
    unsigned v = 3504;
   e3688:	f44f 625b 	mov.w	r2, #3504	; 0xdb0
    unsigned baseVoltage = 16;
   e368c:	2110      	movs	r1, #16
        byte b = (raw >> (i + 2)) & 0x01;
   e368e:	fa40 f403 	asr.w	r4, r0, r3
   e3692:	3301      	adds	r3, #1
        v += ((unsigned)b) * baseVoltage;
   e3694:	f004 0401 	and.w	r4, r4, #1
    for (unsigned i = 0; i < 6; i++) {
   e3698:	2b08      	cmp	r3, #8
        v += ((unsigned)b) * baseVoltage;
   e369a:	fb01 2204 	mla	r2, r1, r4, r2
        baseVoltage *= 2;
   e369e:	ea4f 0141 	mov.w	r1, r1, lsl #1
    for (unsigned i = 0; i < 6; i++) {
   e36a2:	d1f4      	bne.n	e368e <_ZN4PMIC21getChargeVoltageValueEv+0xe>
}
   e36a4:	b290      	uxth	r0, r2
   e36a6:	bd10      	pop	{r4, pc}

000e36a8 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   e36a8:	b570      	push	{r4, r5, r6, lr}
   e36aa:	b086      	sub	sp, #24
   e36ac:	4614      	mov	r4, r2
   e36ae:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   e36b0:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   e36b2:	f7ff ff7b 	bl	e35ac <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   e36b6:	236b      	movs	r3, #107	; 0x6b
   e36b8:	f88d 3008 	strb.w	r3, [sp, #8]
   e36bc:	2300      	movs	r3, #0
   e36be:	9303      	str	r3, [sp, #12]
   e36c0:	2601      	movs	r6, #1
    timeout_ = ms;
   e36c2:	230a      	movs	r3, #10
   e36c4:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   e36c6:	f88d 6010 	strb.w	r6, [sp, #16]
            return &Wire1;
   e36ca:	f001 f8af 	bl	e482c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   e36ce:	a902      	add	r1, sp, #8
   e36d0:	f7fe fc49 	bl	e1f66 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   e36d4:	f001 f8aa 	bl	e482c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   e36d8:	6803      	ldr	r3, [r0, #0]
   e36da:	4629      	mov	r1, r5
   e36dc:	689b      	ldr	r3, [r3, #8]
   e36de:	4798      	blx	r3
            return &Wire1;
   e36e0:	f001 f8a4 	bl	e482c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   e36e4:	6803      	ldr	r3, [r0, #0]
   e36e6:	4621      	mov	r1, r4
   e36e8:	689b      	ldr	r3, [r3, #8]
   e36ea:	4798      	blx	r3
            return &Wire1;
   e36ec:	f001 f89e 	bl	e482c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   e36f0:	4631      	mov	r1, r6
   e36f2:	f7fe fc50 	bl	e1f96 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   e36f6:	a801      	add	r0, sp, #4
   e36f8:	f7ff ff86 	bl	e3608 <_ZNSt10lock_guardI4PMICED1Ev>
}
   e36fc:	b006      	add	sp, #24
   e36fe:	bd70      	pop	{r4, r5, r6, pc}

000e3700 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   e3700:	b513      	push	{r0, r1, r4, lr}
   e3702:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   e3704:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   e3706:	f7ff ff51 	bl	e35ac <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   e370a:	2101      	movs	r1, #1
   e370c:	4620      	mov	r0, r4
   e370e:	f7ff ff82 	bl	e3616 <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   e3712:	f000 00cf 	and.w	r0, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   e3716:	f040 0210 	orr.w	r2, r0, #16
   e371a:	2101      	movs	r1, #1
   e371c:	4620      	mov	r0, r4
   e371e:	f7ff ffc3 	bl	e36a8 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   e3722:	a801      	add	r0, sp, #4
   e3724:	f7ff ff70 	bl	e3608 <_ZNSt10lock_guardI4PMICED1Ev>
}
   e3728:	2001      	movs	r0, #1
   e372a:	b002      	add	sp, #8
   e372c:	bd10      	pop	{r4, pc}

000e372e <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   e372e:	b513      	push	{r0, r1, r4, lr}
   e3730:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   e3732:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   e3734:	f7ff ff3a 	bl	e35ac <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   e3738:	2101      	movs	r1, #1
   e373a:	4620      	mov	r0, r4
   e373c:	f7ff ff6b 	bl	e3616 <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   e3740:	2101      	movs	r1, #1
   e3742:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   e3746:	4620      	mov	r0, r4
   e3748:	f7ff ffae 	bl	e36a8 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   e374c:	a801      	add	r0, sp, #4
   e374e:	f7ff ff5b 	bl	e3608 <_ZNSt10lock_guardI4PMICED1Ev>
}
   e3752:	2001      	movs	r0, #1
   e3754:	b002      	add	sp, #8
   e3756:	bd10      	pop	{r4, pc}

000e3758 <_ZN4PMIC12enableBATFETEv>:
bool PMIC::enableBATFET(void) {
   e3758:	b513      	push	{r0, r1, r4, lr}
   e375a:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   e375c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   e375e:	f7ff ff25 	bl	e35ac <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(MISC_CONTROL_REGISTER);
   e3762:	2107      	movs	r1, #7
   e3764:	4620      	mov	r0, r4
   e3766:	f7ff ff56 	bl	e3616 <_ZN4PMIC12readRegisterEh>
    writeRegister(MISC_CONTROL_REGISTER, (DATA & 0b11011111));
   e376a:	2107      	movs	r1, #7
   e376c:	f000 02df 	and.w	r2, r0, #223	; 0xdf
   e3770:	4620      	mov	r0, r4
   e3772:	f7ff ff99 	bl	e36a8 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   e3776:	a801      	add	r0, sp, #4
   e3778:	f7ff ff46 	bl	e3608 <_ZNSt10lock_guardI4PMICED1Ev>
}
   e377c:	2001      	movs	r0, #1
   e377e:	b002      	add	sp, #8
   e3780:	bd10      	pop	{r4, pc}

000e3782 <_ZN4PMIC13disableBATFETEv>:
bool PMIC::disableBATFET(void) {
   e3782:	b513      	push	{r0, r1, r4, lr}
   e3784:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   e3786:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   e3788:	f7ff ff10 	bl	e35ac <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(MISC_CONTROL_REGISTER);
   e378c:	2107      	movs	r1, #7
   e378e:	4620      	mov	r0, r4
   e3790:	f7ff ff41 	bl	e3616 <_ZN4PMIC12readRegisterEh>
    writeRegister(MISC_CONTROL_REGISTER, (DATA | 0b00100000));
   e3794:	f040 0020 	orr.w	r0, r0, #32
   e3798:	b2c2      	uxtb	r2, r0
   e379a:	2107      	movs	r1, #7
   e379c:	4620      	mov	r0, r4
   e379e:	f7ff ff83 	bl	e36a8 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   e37a2:	a801      	add	r0, sp, #4
   e37a4:	f7ff ff30 	bl	e3608 <_ZNSt10lock_guardI4PMICED1Ev>
}
   e37a8:	2001      	movs	r0, #1
   e37aa:	b002      	add	sp, #8
   e37ac:	bd10      	pop	{r4, pc}

000e37ae <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   e37ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e37b0:	4606      	mov	r6, r0
   e37b2:	460d      	mov	r5, r1
  size_t n = 0;
   e37b4:	188f      	adds	r7, r1, r2
   e37b6:	2400      	movs	r4, #0
  while (size--) {
   e37b8:	42bd      	cmp	r5, r7
   e37ba:	d00c      	beq.n	e37d6 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   e37bc:	6833      	ldr	r3, [r6, #0]
   e37be:	f815 1b01 	ldrb.w	r1, [r5], #1
   e37c2:	689b      	ldr	r3, [r3, #8]
   e37c4:	4630      	mov	r0, r6
   e37c6:	4798      	blx	r3
     if (chunk>=0)
   e37c8:	1e03      	subs	r3, r0, #0
   e37ca:	db01      	blt.n	e37d0 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   e37cc:	441c      	add	r4, r3
  while (size--) {
   e37ce:	e7f3      	b.n	e37b8 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   e37d0:	2c00      	cmp	r4, #0
   e37d2:	bf08      	it	eq
   e37d4:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   e37d6:	4620      	mov	r0, r4
   e37d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e37da <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   e37da:	b513      	push	{r0, r1, r4, lr}
   e37dc:	4604      	mov	r4, r0
    }
   e37de:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   e37e0:	b159      	cbz	r1, e37fa <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   e37e2:	9101      	str	r1, [sp, #4]
   e37e4:	f001 ffd7 	bl	e5796 <strlen>
   e37e8:	6823      	ldr	r3, [r4, #0]
   e37ea:	9901      	ldr	r1, [sp, #4]
   e37ec:	68db      	ldr	r3, [r3, #12]
   e37ee:	4602      	mov	r2, r0
   e37f0:	4620      	mov	r0, r4
    }
   e37f2:	b002      	add	sp, #8
   e37f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   e37f8:	4718      	bx	r3
    }
   e37fa:	b002      	add	sp, #8
   e37fc:	bd10      	pop	{r4, pc}

000e37fe <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   e37fe:	b508      	push	{r3, lr}
  return write(str);
   e3800:	f7ff ffeb 	bl	e37da <_ZN5Print5writeEPKc>
}
   e3804:	bd08      	pop	{r3, pc}

000e3806 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   e3806:	6803      	ldr	r3, [r0, #0]
   e3808:	689b      	ldr	r3, [r3, #8]
   e380a:	4718      	bx	r3

000e380c <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   e380c:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   e380e:	210d      	movs	r1, #13
{
   e3810:	4605      	mov	r5, r0
  size_t n = print('\r');
   e3812:	f7ff fff8 	bl	e3806 <_ZN5Print5printEc>
  n += print('\n');
   e3816:	210a      	movs	r1, #10
  size_t n = print('\r');
   e3818:	4604      	mov	r4, r0
  n += print('\n');
   e381a:	4628      	mov	r0, r5
   e381c:	f7ff fff3 	bl	e3806 <_ZN5Print5printEc>
  return n;
}
   e3820:	4420      	add	r0, r4
   e3822:	bd38      	pop	{r3, r4, r5, pc}

000e3824 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   e3824:	b538      	push	{r3, r4, r5, lr}
   e3826:	4605      	mov	r5, r0
  return write(str);
   e3828:	f7ff ffd7 	bl	e37da <_ZN5Print5writeEPKc>
   e382c:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   e382e:	4628      	mov	r0, r5
   e3830:	f7ff ffec 	bl	e380c <_ZN5Print7printlnEv>
  return n;
}
   e3834:	4420      	add	r0, r4
   e3836:	bd38      	pop	{r3, r4, r5, pc}

000e3838 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   e3838:	b530      	push	{r4, r5, lr}
   e383a:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   e383c:	2300      	movs	r3, #0
   e383e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   e3842:	2a01      	cmp	r2, #1
   e3844:	bf98      	it	ls
   e3846:	220a      	movls	r2, #10
   e3848:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   e384a:	460d      	mov	r5, r1
   e384c:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   e3850:	fb01 5312 	mls	r3, r1, r2, r5
   e3854:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   e3858:	2b09      	cmp	r3, #9
   e385a:	bf94      	ite	ls
   e385c:	3330      	addls	r3, #48	; 0x30
   e385e:	3337      	addhi	r3, #55	; 0x37
   e3860:	b2db      	uxtb	r3, r3
  } while(n);
   e3862:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   e3864:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   e3868:	d9ef      	bls.n	e384a <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   e386a:	4621      	mov	r1, r4
   e386c:	f7ff ffb5 	bl	e37da <_ZN5Print5writeEPKc>
}
   e3870:	b00b      	add	sp, #44	; 0x2c
   e3872:	bd30      	pop	{r4, r5, pc}

000e3874 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   e3874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e3878:	b086      	sub	sp, #24
   e387a:	af00      	add	r7, sp, #0
   e387c:	4605      	mov	r5, r0
   e387e:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   e3880:	1d38      	adds	r0, r7, #4
   e3882:	2114      	movs	r1, #20
{
   e3884:	4614      	mov	r4, r2
    va_copy(args2, args);
   e3886:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   e3888:	f7fd fd8a 	bl	e13a0 <vsnprintf>

    if (n<bufsize)
   e388c:	2813      	cmp	r0, #19
   e388e:	d80e      	bhi.n	e38ae <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   e3890:	1d39      	adds	r1, r7, #4
   e3892:	4628      	mov	r0, r5
   e3894:	f7ff ffa1 	bl	e37da <_ZN5Print5writeEPKc>
   e3898:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   e389a:	b11e      	cbz	r6, e38a4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   e389c:	4628      	mov	r0, r5
   e389e:	f7ff ffb5 	bl	e380c <_ZN5Print7printlnEv>
   e38a2:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   e38a4:	4620      	mov	r0, r4
   e38a6:	3718      	adds	r7, #24
   e38a8:	46bd      	mov	sp, r7
   e38aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   e38ae:	f100 0308 	add.w	r3, r0, #8
   e38b2:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   e38b6:	46e8      	mov	r8, sp
        char bigger[n+1];
   e38b8:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   e38bc:	4622      	mov	r2, r4
   e38be:	1c41      	adds	r1, r0, #1
   e38c0:	683b      	ldr	r3, [r7, #0]
   e38c2:	4668      	mov	r0, sp
   e38c4:	f7fd fd6c 	bl	e13a0 <vsnprintf>
  return write(str);
   e38c8:	4669      	mov	r1, sp
   e38ca:	4628      	mov	r0, r5
   e38cc:	f7ff ff85 	bl	e37da <_ZN5Print5writeEPKc>
   e38d0:	4604      	mov	r4, r0
   e38d2:	46c5      	mov	sp, r8
   e38d4:	e7e1      	b.n	e389a <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000e38d6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   e38d6:	b510      	push	{r4, lr}
   e38d8:	4604      	mov	r4, r0
   e38da:	f7fa f9dc 	bl	ddc96 <_ZNSt14_Function_baseD1Ev>
   e38de:	4620      	mov	r0, r4
   e38e0:	bd10      	pop	{r4, pc}
	...

000e38e4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   e38e4:	4803      	ldr	r0, [pc, #12]	; (e38f4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   e38e6:	4a04      	ldr	r2, [pc, #16]	; (e38f8 <_GLOBAL__sub_I_RGB+0x14>)
   e38e8:	4904      	ldr	r1, [pc, #16]	; (e38fc <_GLOBAL__sub_I_RGB+0x18>)
   e38ea:	2300      	movs	r3, #0
   e38ec:	6083      	str	r3, [r0, #8]
   e38ee:	f000 bfc5 	b.w	e487c <__aeabi_atexit>
   e38f2:	bf00      	nop
   e38f4:	2003e650 	.word	0x2003e650
   e38f8:	2003d9f8 	.word	0x2003d9f8
   e38fc:	000e38d7 	.word	0x000e38d7

000e3900 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   e3900:	2100      	movs	r1, #0
   e3902:	f7fd bb3f 	b.w	e0f84 <hal_spi_acquire>

000e3906 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   e3906:	2100      	movs	r1, #0
   e3908:	f7fd bb44 	b.w	e0f94 <hal_spi_release>

000e390c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   e390c:	b510      	push	{r4, lr}
   e390e:	4604      	mov	r4, r0
   e3910:	4608      	mov	r0, r1
{
    _spi = spi;
   e3912:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   e3914:	f7fd fb06 	bl	e0f24 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   e3918:	2300      	movs	r3, #0
   e391a:	6063      	str	r3, [r4, #4]
}
   e391c:	4620      	mov	r0, r4
   e391e:	bd10      	pop	{r4, pc}

000e3920 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   e3920:	b510      	push	{r4, lr}
   e3922:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   e3924:	7800      	ldrb	r0, [r0, #0]
   e3926:	f7ff ffeb 	bl	e3900 <_ZN8SPIClass4lockEv.isra.0>
   e392a:	b948      	cbnz	r0, e3940 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   e392c:	7820      	ldrb	r0, [r4, #0]
   e392e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   e3932:	f7fd fae7 	bl	e0f04 <hal_spi_begin>
        unlock();
   e3936:	7820      	ldrb	r0, [r4, #0]
    }
}
   e3938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   e393c:	f7ff bfe3 	b.w	e3906 <_ZN8SPIClass6unlockEv.isra.0>
}
   e3940:	bd10      	pop	{r4, pc}

000e3942 <_ZN8SPIClass5beginEt>:

void SPIClass::begin(uint16_t ss_pin)
{
   e3942:	b513      	push	{r0, r1, r4, lr}
   e3944:	4604      	mov	r4, r0
    if (!lock())
   e3946:	7800      	ldrb	r0, [r0, #0]
{
   e3948:	9101      	str	r1, [sp, #4]
    if (!lock())
   e394a:	f7ff ffd9 	bl	e3900 <_ZN8SPIClass4lockEv.isra.0>
   e394e:	9901      	ldr	r1, [sp, #4]
   e3950:	b940      	cbnz	r0, e3964 <_ZN8SPIClass5beginEt+0x22>
    {
        hal_spi_begin(_spi, ss_pin);
   e3952:	7820      	ldrb	r0, [r4, #0]
   e3954:	f7fd fad6 	bl	e0f04 <hal_spi_begin>
        unlock();
   e3958:	7820      	ldrb	r0, [r4, #0]
    }
}
   e395a:	b002      	add	sp, #8
   e395c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   e3960:	f7ff bfd1 	b.w	e3906 <_ZN8SPIClass6unlockEv.isra.0>
}
   e3964:	b002      	add	sp, #8
   e3966:	bd10      	pop	{r4, pc}

000e3968 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   e3968:	b510      	push	{r4, lr}
   e396a:	4604      	mov	r4, r0
    if (!lock())
   e396c:	7800      	ldrb	r0, [r0, #0]
   e396e:	f7ff ffc7 	bl	e3900 <_ZN8SPIClass4lockEv.isra.0>
   e3972:	b938      	cbnz	r0, e3984 <_ZN8SPIClass3endEv+0x1c>
    {
        hal_spi_end(_spi);
   e3974:	7820      	ldrb	r0, [r4, #0]
   e3976:	f7fd facd 	bl	e0f14 <hal_spi_end>
        unlock();
   e397a:	7820      	ldrb	r0, [r4, #0]
    }
}
   e397c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   e3980:	f7ff bfc1 	b.w	e3906 <_ZN8SPIClass6unlockEv.isra.0>
}
   e3984:	bd10      	pop	{r4, pc}

000e3986 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   e3986:	7800      	ldrb	r0, [r0, #0]
   e3988:	f7ff bfbd 	b.w	e3906 <_ZN8SPIClass6unlockEv.isra.0>

000e398c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   e398c:	0840      	lsrs	r0, r0, #1
{
   e398e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   e3990:	6018      	str	r0, [r3, #0]
   e3992:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   e3994:	6818      	ldr	r0, [r3, #0]
   e3996:	4288      	cmp	r0, r1
   e3998:	b2e5      	uxtb	r5, r4
   e399a:	d906      	bls.n	e39aa <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   e399c:	3401      	adds	r4, #1
   e399e:	2c08      	cmp	r4, #8
   e39a0:	d002      	beq.n	e39a8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   e39a2:	0840      	lsrs	r0, r0, #1
   e39a4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   e39a6:	e7f5      	b.n	e3994 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   e39a8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   e39aa:	4b02      	ldr	r3, [pc, #8]	; (e39b4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   e39ac:	5d5b      	ldrb	r3, [r3, r5]
   e39ae:	7013      	strb	r3, [r2, #0]
}
   e39b0:	bd30      	pop	{r4, r5, pc}
   e39b2:	bf00      	nop
   e39b4:	000e8944 	.word	0x000e8944

000e39b8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   e39b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e39bc:	4606      	mov	r6, r0
   e39be:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   e39c0:	7800      	ldrb	r0, [r0, #0]
{
   e39c2:	460c      	mov	r4, r1
    CHECK(lock());
   e39c4:	f7ff ff9c 	bl	e3900 <_ZN8SPIClass4lockEv.isra.0>
   e39c8:	2800      	cmp	r0, #0
   e39ca:	db1b      	blt.n	e3a04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   e39cc:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   e39ce:	2214      	movs	r2, #20
   e39d0:	2100      	movs	r1, #0
   e39d2:	a809      	add	r0, sp, #36	; 0x24
   e39d4:	f001 fe6c 	bl	e56b0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   e39d8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   e39da:	2200      	movs	r2, #0
   e39dc:	a909      	add	r1, sp, #36	; 0x24
   e39de:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   e39e0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   e39e4:	f7fd faae 	bl	e0f44 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   e39e8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   e39ec:	b113      	cbz	r3, e39f4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   e39ee:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   e39f2:	b155      	cbz	r5, e3a0a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   e39f4:	2700      	movs	r7, #0
   e39f6:	46b9      	mov	r9, r7
   e39f8:	46b8      	mov	r8, r7
   e39fa:	2501      	movs	r5, #1
    if (default_ && other.default_)
   e39fc:	7923      	ldrb	r3, [r4, #4]
   e39fe:	b15d      	cbz	r5, e3a18 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   e3a00:	b1c3      	cbz	r3, e3a34 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   e3a02:	2000      	movs	r0, #0
}
   e3a04:	b00f      	add	sp, #60	; 0x3c
   e3a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   e3a0a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   e3a0e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   e3a12:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   e3a16:	e7f1      	b.n	e39fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   e3a18:	2b00      	cmp	r3, #0
   e3a1a:	d135      	bne.n	e3a88 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   e3a1c:	68a3      	ldr	r3, [r4, #8]
   e3a1e:	4543      	cmp	r3, r8
   e3a20:	d108      	bne.n	e3a34 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   e3a22:	f88d 9020 	strb.w	r9, [sp, #32]
   e3a26:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   e3a2a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   e3a2e:	89a3      	ldrh	r3, [r4, #12]
   e3a30:	429a      	cmp	r2, r3
   e3a32:	d0e6      	beq.n	e3a02 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   e3a34:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   e3a36:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   e3a38:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   e3a3c:	980a      	ldr	r0, [sp, #40]	; 0x28
   e3a3e:	ab04      	add	r3, sp, #16
   e3a40:	f10d 020f 	add.w	r2, sp, #15
   e3a44:	f7ff ffa2 	bl	e398c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   e3a48:	7921      	ldrb	r1, [r4, #4]
   e3a4a:	b985      	cbnz	r5, e3a6e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   e3a4c:	b989      	cbnz	r1, e3a72 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   e3a4e:	68a3      	ldr	r3, [r4, #8]
   e3a50:	4543      	cmp	r3, r8
   e3a52:	d30e      	bcc.n	e3a72 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   e3a54:	f88d 9020 	strb.w	r9, [sp, #32]
   e3a58:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   e3a5c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   e3a60:	89a3      	ldrh	r3, [r4, #12]
   e3a62:	429a      	cmp	r2, r3
   e3a64:	d105      	bne.n	e3a72 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   e3a66:	9b04      	ldr	r3, [sp, #16]
   e3a68:	4543      	cmp	r3, r8
   e3a6a:	d102      	bne.n	e3a72 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   e3a6c:	e7c9      	b.n	e3a02 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   e3a6e:	2900      	cmp	r1, #0
   e3a70:	d1f9      	bne.n	e3a66 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   e3a72:	2300      	movs	r3, #0
   e3a74:	9301      	str	r3, [sp, #4]
   e3a76:	7b63      	ldrb	r3, [r4, #13]
   e3a78:	9300      	str	r3, [sp, #0]
   e3a7a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   e3a7e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   e3a80:	7830      	ldrb	r0, [r6, #0]
   e3a82:	f7fd fa77 	bl	e0f74 <hal_spi_set_settings>
   e3a86:	e7bc      	b.n	e3a02 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   e3a88:	e9cd 5500 	strd	r5, r5, [sp]
   e3a8c:	462b      	mov	r3, r5
   e3a8e:	462a      	mov	r2, r5
   e3a90:	2101      	movs	r1, #1
   e3a92:	e7f5      	b.n	e3a80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000e3a94 <_ZN8SPIClass8transferEPvS0_jPFvvE>:
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
}

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   e3a94:	b530      	push	{r4, r5, lr}
   e3a96:	b087      	sub	sp, #28
   e3a98:	4604      	mov	r4, r0
   e3a9a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   e3a9c:	9500      	str	r5, [sp, #0]
   e3a9e:	7800      	ldrb	r0, [r0, #0]
   e3aa0:	f7fd fa58 	bl	e0f54 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   e3aa4:	b93d      	cbnz	r5, e3ab6 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   e3aa6:	7820      	ldrb	r0, [r4, #0]
   e3aa8:	a902      	add	r1, sp, #8
   e3aaa:	f7fd fa5b 	bl	e0f64 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   e3aae:	f89d 3014 	ldrb.w	r3, [sp, #20]
   e3ab2:	07db      	lsls	r3, r3, #31
   e3ab4:	d4f7      	bmi.n	e3aa6 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
   e3ab6:	b007      	add	sp, #28
   e3ab8:	bd30      	pop	{r4, r5, pc}
	...

000e3abc <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   e3abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e3ac0:	ec57 6b10 	vmov	r6, r7, d0
   e3ac4:	4680      	mov	r8, r0
   e3ac6:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   e3ac8:	ee10 0a10 	vmov	r0, s0
   e3acc:	2200      	movs	r2, #0
   e3ace:	2300      	movs	r3, #0
   e3ad0:	4639      	mov	r1, r7
   e3ad2:	f001 fb6d 	bl	e51b0 <__aeabi_dcmplt>
   e3ad6:	b128      	cbz	r0, e3ae4 <_Z4dtoadhPc+0x28>
        val = -val;
   e3ad8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   e3adc:	461f      	mov	r7, r3
        *sout++ = '-';
   e3ade:	232d      	movs	r3, #45	; 0x2d
   e3ae0:	f804 3b01 	strb.w	r3, [r4], #1
   e3ae4:	2300      	movs	r3, #0
    }
    long scale = 1;
   e3ae6:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   e3aea:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   e3aec:	b2d9      	uxtb	r1, r3
   e3aee:	4588      	cmp	r8, r1
   e3af0:	d903      	bls.n	e3afa <_Z4dtoadhPc+0x3e>
        scale *= 10;
   e3af2:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   e3af6:	3301      	adds	r3, #1
   e3af8:	e7f8      	b.n	e3aec <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   e3afa:	4648      	mov	r0, r9
   e3afc:	f001 f87c 	bl	e4bf8 <__aeabi_i2d>
   e3b00:	4632      	mov	r2, r6
   e3b02:	463b      	mov	r3, r7
   e3b04:	f001 f8e2 	bl	e4ccc <__aeabi_dmul>
   e3b08:	4606      	mov	r6, r0
   e3b0a:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   e3b0c:	f001 fc00 	bl	e5310 <__aeabi_d2ulz>
   e3b10:	4605      	mov	r5, r0
   e3b12:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   e3b14:	f001 f8a4 	bl	e4c60 <__aeabi_ul2d>
   e3b18:	4602      	mov	r2, r0
   e3b1a:	460b      	mov	r3, r1
   e3b1c:	4630      	mov	r0, r6
   e3b1e:	4639      	mov	r1, r7
   e3b20:	f000 ff1c 	bl	e495c <__aeabi_dsub>
   e3b24:	4b13      	ldr	r3, [pc, #76]	; (e3b74 <_Z4dtoadhPc+0xb8>)
   e3b26:	2200      	movs	r2, #0
   e3b28:	f001 fb56 	bl	e51d8 <__aeabi_dcmpge>
   e3b2c:	b110      	cbz	r0, e3b34 <_Z4dtoadhPc+0x78>
        fixed++;
   e3b2e:	3501      	adds	r5, #1
   e3b30:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   e3b34:	464a      	mov	r2, r9
   e3b36:	4628      	mov	r0, r5
   e3b38:	17d3      	asrs	r3, r2, #31
   e3b3a:	4651      	mov	r1, sl
   e3b3c:	f001 fbd0 	bl	e52e0 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   e3b40:	2301      	movs	r3, #1
   e3b42:	4615      	mov	r5, r2
   e3b44:	4621      	mov	r1, r4
   e3b46:	220a      	movs	r2, #10
   e3b48:	f000 fc91 	bl	e446e <ultoa>
    if (prec) {
   e3b4c:	f1b8 0f00 	cmp.w	r8, #0
   e3b50:	d00d      	beq.n	e3b6e <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   e3b52:	4620      	mov	r0, r4
   e3b54:	f001 fe1f 	bl	e5796 <strlen>
        *sout++ = '.';
   e3b58:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   e3b5a:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   e3b5c:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   e3b5e:	220a      	movs	r2, #10
   e3b60:	4643      	mov	r3, r8
   e3b62:	4628      	mov	r0, r5
   e3b64:	3101      	adds	r1, #1
    }
}
   e3b66:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   e3b6a:	f000 bc80 	b.w	e446e <ultoa>
}
   e3b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e3b72:	bf00      	nop
   e3b74:	3fe00000 	.word	0x3fe00000

000e3b78 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   e3b78:	b510      	push	{r4, lr}
   e3b7a:	4604      	mov	r4, r0
{
	free(buffer);
   e3b7c:	6800      	ldr	r0, [r0, #0]
   e3b7e:	f7fd fbe7 	bl	e1350 <free>
}
   e3b82:	4620      	mov	r0, r4
   e3b84:	bd10      	pop	{r4, pc}

000e3b86 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   e3b86:	b510      	push	{r4, lr}
   e3b88:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   e3b8a:	6800      	ldr	r0, [r0, #0]
   e3b8c:	b108      	cbz	r0, e3b92 <_ZN6String10invalidateEv+0xc>
   e3b8e:	f7fd fbdf 	bl	e1350 <free>
	buffer = NULL;
   e3b92:	2300      	movs	r3, #0
	capacity = len = 0;
   e3b94:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   e3b98:	6023      	str	r3, [r4, #0]
}
   e3b9a:	bd10      	pop	{r4, pc}

000e3b9c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   e3b9c:	b538      	push	{r3, r4, r5, lr}
   e3b9e:	4604      	mov	r4, r0
   e3ba0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   e3ba2:	6800      	ldr	r0, [r0, #0]
   e3ba4:	3101      	adds	r1, #1
   e3ba6:	f7fd fbdb 	bl	e1360 <realloc>
	if (newbuffer) {
   e3baa:	b110      	cbz	r0, e3bb2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   e3bac:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   e3bb0:	2001      	movs	r0, #1
	}
	return 0;
}
   e3bb2:	bd38      	pop	{r3, r4, r5, pc}

000e3bb4 <_ZN6String7reserveEj>:
{
   e3bb4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   e3bb6:	6803      	ldr	r3, [r0, #0]
{
   e3bb8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   e3bba:	b123      	cbz	r3, e3bc6 <_ZN6String7reserveEj+0x12>
   e3bbc:	6843      	ldr	r3, [r0, #4]
   e3bbe:	428b      	cmp	r3, r1
   e3bc0:	d301      	bcc.n	e3bc6 <_ZN6String7reserveEj+0x12>
   e3bc2:	2001      	movs	r0, #1
}
   e3bc4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   e3bc6:	4620      	mov	r0, r4
   e3bc8:	f7ff ffe8 	bl	e3b9c <_ZN6String12changeBufferEj>
   e3bcc:	2800      	cmp	r0, #0
   e3bce:	d0f9      	beq.n	e3bc4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   e3bd0:	68a3      	ldr	r3, [r4, #8]
   e3bd2:	2b00      	cmp	r3, #0
   e3bd4:	d1f5      	bne.n	e3bc2 <_ZN6String7reserveEj+0xe>
   e3bd6:	6822      	ldr	r2, [r4, #0]
   e3bd8:	7013      	strb	r3, [r2, #0]
   e3bda:	e7f2      	b.n	e3bc2 <_ZN6String7reserveEj+0xe>

000e3bdc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   e3bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   e3bde:	460d      	mov	r5, r1
	if (!reserve(length)) {
   e3be0:	4611      	mov	r1, r2
   e3be2:	9201      	str	r2, [sp, #4]
{
   e3be4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   e3be6:	f7ff ffe5 	bl	e3bb4 <_ZN6String7reserveEj>
   e3bea:	9a01      	ldr	r2, [sp, #4]
   e3bec:	b928      	cbnz	r0, e3bfa <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   e3bee:	4620      	mov	r0, r4
   e3bf0:	f7ff ffc9 	bl	e3b86 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   e3bf4:	4620      	mov	r0, r4
   e3bf6:	b003      	add	sp, #12
   e3bf8:	bd30      	pop	{r4, r5, pc}
	len = length;
   e3bfa:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   e3bfc:	4629      	mov	r1, r5
   e3bfe:	6820      	ldr	r0, [r4, #0]
   e3c00:	f001 fd2e 	bl	e5660 <memcpy>
	buffer[len] = 0;
   e3c04:	6822      	ldr	r2, [r4, #0]
   e3c06:	68a3      	ldr	r3, [r4, #8]
   e3c08:	2100      	movs	r1, #0
   e3c0a:	54d1      	strb	r1, [r2, r3]
	return *this;
   e3c0c:	e7f2      	b.n	e3bf4 <_ZN6String4copyEPKcj+0x18>

000e3c0e <_ZN6StringC1EPKc>:
	buffer = NULL;
   e3c0e:	2300      	movs	r3, #0
String::String(const char *cstr)
   e3c10:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   e3c12:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   e3c16:	4604      	mov	r4, r0
	len = 0;
   e3c18:	6083      	str	r3, [r0, #8]
	flags = 0;
   e3c1a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   e3c1c:	b141      	cbz	r1, e3c30 <_ZN6StringC1EPKc+0x22>
   e3c1e:	4608      	mov	r0, r1
   e3c20:	9101      	str	r1, [sp, #4]
   e3c22:	f001 fdb8 	bl	e5796 <strlen>
   e3c26:	9901      	ldr	r1, [sp, #4]
   e3c28:	4602      	mov	r2, r0
   e3c2a:	4620      	mov	r0, r4
   e3c2c:	f7ff ffd6 	bl	e3bdc <_ZN6String4copyEPKcj>
}
   e3c30:	4620      	mov	r0, r4
   e3c32:	b002      	add	sp, #8
   e3c34:	bd10      	pop	{r4, pc}

000e3c36 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   e3c36:	b538      	push	{r3, r4, r5, lr}
   e3c38:	4605      	mov	r5, r0
	if (buffer) {
   e3c3a:	6800      	ldr	r0, [r0, #0]
{
   e3c3c:	460c      	mov	r4, r1
	if (buffer) {
   e3c3e:	b168      	cbz	r0, e3c5c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   e3c40:	686a      	ldr	r2, [r5, #4]
   e3c42:	688b      	ldr	r3, [r1, #8]
   e3c44:	429a      	cmp	r2, r3
   e3c46:	d307      	bcc.n	e3c58 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   e3c48:	6809      	ldr	r1, [r1, #0]
   e3c4a:	f001 fd7e 	bl	e574a <strcpy>
			len = rhs.len;
   e3c4e:	68a3      	ldr	r3, [r4, #8]
   e3c50:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   e3c52:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   e3c54:	60a3      	str	r3, [r4, #8]
}
   e3c56:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   e3c58:	f7fd fb7a 	bl	e1350 <free>
	buffer = rhs.buffer;
   e3c5c:	6823      	ldr	r3, [r4, #0]
   e3c5e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   e3c60:	6863      	ldr	r3, [r4, #4]
   e3c62:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   e3c64:	68a3      	ldr	r3, [r4, #8]
   e3c66:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   e3c68:	2300      	movs	r3, #0
	rhs.capacity = 0;
   e3c6a:	e9c4 3300 	strd	r3, r3, [r4]
   e3c6e:	e7f1      	b.n	e3c54 <_ZN6String4moveERS_+0x1e>

000e3c70 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   e3c70:	b510      	push	{r4, lr}
	buffer = NULL;
   e3c72:	2300      	movs	r3, #0
	capacity = 0;
   e3c74:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   e3c78:	4604      	mov	r4, r0
	len = 0;
   e3c7a:	6083      	str	r3, [r0, #8]
	flags = 0;
   e3c7c:	7303      	strb	r3, [r0, #12]
	move(rval);
   e3c7e:	f7ff ffda 	bl	e3c36 <_ZN6String4moveERS_>
}
   e3c82:	4620      	mov	r0, r4
   e3c84:	bd10      	pop	{r4, pc}

000e3c86 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   e3c86:	4288      	cmp	r0, r1
{
   e3c88:	b510      	push	{r4, lr}
   e3c8a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   e3c8c:	d005      	beq.n	e3c9a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   e3c8e:	680b      	ldr	r3, [r1, #0]
   e3c90:	b12b      	cbz	r3, e3c9e <_ZN6StringaSERKS_+0x18>
   e3c92:	688a      	ldr	r2, [r1, #8]
   e3c94:	4619      	mov	r1, r3
   e3c96:	f7ff ffa1 	bl	e3bdc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   e3c9a:	4620      	mov	r0, r4
   e3c9c:	bd10      	pop	{r4, pc}
	else invalidate();
   e3c9e:	f7ff ff72 	bl	e3b86 <_ZN6String10invalidateEv>
   e3ca2:	e7fa      	b.n	e3c9a <_ZN6StringaSERKS_+0x14>

000e3ca4 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   e3ca4:	b510      	push	{r4, lr}
	buffer = NULL;
   e3ca6:	2300      	movs	r3, #0
String::String(const String &value)
   e3ca8:	4604      	mov	r4, r0
	capacity = 0;
   e3caa:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   e3cae:	6083      	str	r3, [r0, #8]
	flags = 0;
   e3cb0:	7303      	strb	r3, [r0, #12]
	*this = value;
   e3cb2:	f7ff ffe8 	bl	e3c86 <_ZN6StringaSERKS_>
}
   e3cb6:	4620      	mov	r0, r4
   e3cb8:	bd10      	pop	{r4, pc}

000e3cba <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   e3cba:	4288      	cmp	r0, r1
{
   e3cbc:	b510      	push	{r4, lr}
   e3cbe:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   e3cc0:	d001      	beq.n	e3cc6 <_ZN6StringaSEOS_+0xc>
   e3cc2:	f7ff ffb8 	bl	e3c36 <_ZN6String4moveERS_>
	return *this;
}
   e3cc6:	4620      	mov	r0, r4
   e3cc8:	bd10      	pop	{r4, pc}

000e3cca <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   e3cca:	b513      	push	{r0, r1, r4, lr}
   e3ccc:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   e3cce:	b159      	cbz	r1, e3ce8 <_ZN6StringaSEPKc+0x1e>
   e3cd0:	4608      	mov	r0, r1
   e3cd2:	9101      	str	r1, [sp, #4]
   e3cd4:	f001 fd5f 	bl	e5796 <strlen>
   e3cd8:	9901      	ldr	r1, [sp, #4]
   e3cda:	4602      	mov	r2, r0
   e3cdc:	4620      	mov	r0, r4
   e3cde:	f7ff ff7d 	bl	e3bdc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   e3ce2:	4620      	mov	r0, r4
   e3ce4:	b002      	add	sp, #8
   e3ce6:	bd10      	pop	{r4, pc}
	else invalidate();
   e3ce8:	f7ff ff4d 	bl	e3b86 <_ZN6String10invalidateEv>
   e3cec:	e7f9      	b.n	e3ce2 <_ZN6StringaSEPKc+0x18>

000e3cee <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
   e3cee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   e3cf0:	4604      	mov	r4, r0
	buffer = NULL;
   e3cf2:	2300      	movs	r3, #0
	capacity = 0;
   e3cf4:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   e3cf8:	60a3      	str	r3, [r4, #8]
	flags = 0;
   e3cfa:	7323      	strb	r3, [r4, #12]
String::String(unsigned char value, unsigned char base)
   e3cfc:	4608      	mov	r0, r1
	utoa(value, buf, base);
   e3cfe:	a901      	add	r1, sp, #4
   e3d00:	f000 fbf6 	bl	e44f0 <utoa>
	*this = buf;
   e3d04:	a901      	add	r1, sp, #4
   e3d06:	4620      	mov	r0, r4
   e3d08:	f7ff ffdf 	bl	e3cca <_ZN6StringaSEPKc>
}
   e3d0c:	4620      	mov	r0, r4
   e3d0e:	b004      	add	sp, #16
   e3d10:	bd10      	pop	{r4, pc}

000e3d12 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   e3d12:	b510      	push	{r4, lr}
   e3d14:	4604      	mov	r4, r0
   e3d16:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   e3d18:	2300      	movs	r3, #0
	capacity = 0;
   e3d1a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   e3d1e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   e3d20:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   e3d22:	4608      	mov	r0, r1
	itoa(value, buf, base);
   e3d24:	a901      	add	r1, sp, #4
   e3d26:	f000 fbcd 	bl	e44c4 <itoa>
	*this = buf;
   e3d2a:	a901      	add	r1, sp, #4
   e3d2c:	4620      	mov	r0, r4
   e3d2e:	f7ff ffcc 	bl	e3cca <_ZN6StringaSEPKc>
}
   e3d32:	4620      	mov	r0, r4
   e3d34:	b00a      	add	sp, #40	; 0x28
   e3d36:	bd10      	pop	{r4, pc}

000e3d38 <_ZN6StringC1Ejh>:
String::String(unsigned int value, unsigned char base)
   e3d38:	b510      	push	{r4, lr}
   e3d3a:	4604      	mov	r4, r0
   e3d3c:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   e3d3e:	2300      	movs	r3, #0
	capacity = 0;
   e3d40:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   e3d44:	60a3      	str	r3, [r4, #8]
	flags = 0;
   e3d46:	7323      	strb	r3, [r4, #12]
String::String(unsigned int value, unsigned char base)
   e3d48:	4608      	mov	r0, r1
	utoa(value, buf, base);
   e3d4a:	a901      	add	r1, sp, #4
   e3d4c:	f000 fbd0 	bl	e44f0 <utoa>
	*this = buf;
   e3d50:	a901      	add	r1, sp, #4
   e3d52:	4620      	mov	r0, r4
   e3d54:	f7ff ffb9 	bl	e3cca <_ZN6StringaSEPKc>
}
   e3d58:	4620      	mov	r0, r4
   e3d5a:	b00a      	add	sp, #40	; 0x28
   e3d5c:	bd10      	pop	{r4, pc}

000e3d5e <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   e3d5e:	b510      	push	{r4, lr}
   e3d60:	4604      	mov	r4, r0
   e3d62:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   e3d64:	2300      	movs	r3, #0
	capacity = 0;
   e3d66:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   e3d6a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   e3d6c:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   e3d6e:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   e3d70:	a901      	add	r1, sp, #4
   e3d72:	f000 fb38 	bl	e43e6 <ltoa>
	*this = buf;
   e3d76:	a901      	add	r1, sp, #4
   e3d78:	4620      	mov	r0, r4
   e3d7a:	f7ff ffa6 	bl	e3cca <_ZN6StringaSEPKc>
}
   e3d7e:	4620      	mov	r0, r4
   e3d80:	b00a      	add	sp, #40	; 0x28
   e3d82:	bd10      	pop	{r4, pc}

000e3d84 <_ZN6StringC1Emh>:
String::String(unsigned long value, unsigned char base)
   e3d84:	b510      	push	{r4, lr}
   e3d86:	4604      	mov	r4, r0
   e3d88:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   e3d8a:	2300      	movs	r3, #0
	capacity = 0;
   e3d8c:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   e3d90:	60a3      	str	r3, [r4, #8]
	flags = 0;
   e3d92:	7323      	strb	r3, [r4, #12]
String::String(unsigned long value, unsigned char base)
   e3d94:	4608      	mov	r0, r1
	ultoa(value, buf, base);
   e3d96:	2301      	movs	r3, #1
   e3d98:	a901      	add	r1, sp, #4
   e3d9a:	f000 fb68 	bl	e446e <ultoa>
	*this = buf;
   e3d9e:	a901      	add	r1, sp, #4
   e3da0:	4620      	mov	r0, r4
   e3da2:	f7ff ff92 	bl	e3cca <_ZN6StringaSEPKc>
}
   e3da6:	4620      	mov	r0, r4
   e3da8:	b00a      	add	sp, #40	; 0x28
   e3daa:	bd10      	pop	{r4, pc}

000e3dac <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   e3dac:	b530      	push	{r4, r5, lr}
   e3dae:	4604      	mov	r4, r0
	buffer = NULL;
   e3db0:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   e3db2:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   e3db4:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   e3db8:	60a3      	str	r3, [r4, #8]
	flags = 0;
   e3dba:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   e3dbc:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   e3dc0:	b2cd      	uxtb	r5, r1
   e3dc2:	f000 ff2b 	bl	e4c1c <__aeabi_f2d>
   e3dc6:	ec41 0b10 	vmov	d0, r0, r1
   e3dca:	a901      	add	r1, sp, #4
   e3dcc:	4628      	mov	r0, r5
   e3dce:	f7ff fe75 	bl	e3abc <_Z4dtoadhPc>
        *this = buf;
   e3dd2:	a901      	add	r1, sp, #4
   e3dd4:	4620      	mov	r0, r4
   e3dd6:	f7ff ff78 	bl	e3cca <_ZN6StringaSEPKc>
}
   e3dda:	4620      	mov	r0, r4
   e3ddc:	b00b      	add	sp, #44	; 0x2c
   e3dde:	bd30      	pop	{r4, r5, pc}

000e3de0 <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
   e3de0:	b510      	push	{r4, lr}
   e3de2:	4604      	mov	r4, r0
   e3de4:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   e3de6:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
   e3de8:	4608      	mov	r0, r1
	capacity = 0;
   e3dea:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   e3dee:	60a3      	str	r3, [r4, #8]
	flags = 0;
   e3df0:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
   e3df2:	a901      	add	r1, sp, #4
   e3df4:	b2c0      	uxtb	r0, r0
   e3df6:	f7ff fe61 	bl	e3abc <_Z4dtoadhPc>
        *this = buf;
   e3dfa:	a901      	add	r1, sp, #4
   e3dfc:	4620      	mov	r0, r4
   e3dfe:	f7ff ff64 	bl	e3cca <_ZN6StringaSEPKc>
}
   e3e02:	4620      	mov	r0, r4
   e3e04:	b00a      	add	sp, #40	; 0x28
   e3e06:	bd10      	pop	{r4, pc}

000e3e08 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   e3e08:	b570      	push	{r4, r5, r6, lr}
   e3e0a:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   e3e0c:	460e      	mov	r6, r1
   e3e0e:	b909      	cbnz	r1, e3e14 <_ZN6String6concatEPKcj+0xc>
   e3e10:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   e3e12:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   e3e14:	b16a      	cbz	r2, e3e32 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   e3e16:	6884      	ldr	r4, [r0, #8]
   e3e18:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   e3e1a:	4621      	mov	r1, r4
   e3e1c:	f7ff feca 	bl	e3bb4 <_ZN6String7reserveEj>
   e3e20:	2800      	cmp	r0, #0
   e3e22:	d0f5      	beq.n	e3e10 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   e3e24:	6828      	ldr	r0, [r5, #0]
   e3e26:	68ab      	ldr	r3, [r5, #8]
   e3e28:	4631      	mov	r1, r6
   e3e2a:	4418      	add	r0, r3
   e3e2c:	f001 fc8d 	bl	e574a <strcpy>
	len = newlen;
   e3e30:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   e3e32:	2001      	movs	r0, #1
   e3e34:	e7ed      	b.n	e3e12 <_ZN6String6concatEPKcj+0xa>

000e3e36 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   e3e36:	688a      	ldr	r2, [r1, #8]
   e3e38:	6809      	ldr	r1, [r1, #0]
   e3e3a:	f7ff bfe5 	b.w	e3e08 <_ZN6String6concatEPKcj>

000e3e3e <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   e3e3e:	b513      	push	{r0, r1, r4, lr}
   e3e40:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   e3e42:	4608      	mov	r0, r1
	if (!cstr) return 0;
   e3e44:	b151      	cbz	r1, e3e5c <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   e3e46:	9101      	str	r1, [sp, #4]
   e3e48:	f001 fca5 	bl	e5796 <strlen>
   e3e4c:	9901      	ldr	r1, [sp, #4]
   e3e4e:	4602      	mov	r2, r0
   e3e50:	4620      	mov	r0, r4
}
   e3e52:	b002      	add	sp, #8
   e3e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   e3e58:	f7ff bfd6 	b.w	e3e08 <_ZN6String6concatEPKcj>
}
   e3e5c:	b002      	add	sp, #8
   e3e5e:	bd10      	pop	{r4, pc}

000e3e60 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   e3e60:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   e3e62:	2300      	movs	r3, #0
	buf[0] = c;
   e3e64:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   e3e68:	2201      	movs	r2, #1
   e3e6a:	a901      	add	r1, sp, #4
	buf[1] = 0;
   e3e6c:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   e3e70:	f7ff ffca 	bl	e3e08 <_ZN6String6concatEPKcj>
}
   e3e74:	b003      	add	sp, #12
   e3e76:	f85d fb04 	ldr.w	pc, [sp], #4

000e3e7a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   e3e7a:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   e3e7c:	688a      	ldr	r2, [r1, #8]
   e3e7e:	6809      	ldr	r1, [r1, #0]
{
   e3e80:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   e3e82:	f7ff ffc1 	bl	e3e08 <_ZN6String6concatEPKcj>
   e3e86:	b910      	cbnz	r0, e3e8e <_ZplRK15StringSumHelperRK6String+0x14>
   e3e88:	4620      	mov	r0, r4
   e3e8a:	f7ff fe7c 	bl	e3b86 <_ZN6String10invalidateEv>
	return a;
}
   e3e8e:	4620      	mov	r0, r4
   e3e90:	bd10      	pop	{r4, pc}

000e3e92 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   e3e92:	b513      	push	{r0, r1, r4, lr}
   e3e94:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   e3e96:	b929      	cbnz	r1, e3ea4 <_ZplRK15StringSumHelperPKc+0x12>
   e3e98:	4620      	mov	r0, r4
   e3e9a:	f7ff fe74 	bl	e3b86 <_ZN6String10invalidateEv>
	return a;
}
   e3e9e:	4620      	mov	r0, r4
   e3ea0:	b002      	add	sp, #8
   e3ea2:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   e3ea4:	4608      	mov	r0, r1
   e3ea6:	9101      	str	r1, [sp, #4]
   e3ea8:	f001 fc75 	bl	e5796 <strlen>
   e3eac:	9901      	ldr	r1, [sp, #4]
   e3eae:	4602      	mov	r2, r0
   e3eb0:	4620      	mov	r0, r4
   e3eb2:	f7ff ffa9 	bl	e3e08 <_ZN6String6concatEPKcj>
   e3eb6:	2800      	cmp	r0, #0
   e3eb8:	d0ee      	beq.n	e3e98 <_ZplRK15StringSumHelperPKc+0x6>
   e3eba:	e7f0      	b.n	e3e9e <_ZplRK15StringSumHelperPKc+0xc>

000e3ebc <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   e3ebc:	6802      	ldr	r2, [r0, #0]
{
   e3ebe:	460b      	mov	r3, r1
   e3ec0:	6809      	ldr	r1, [r1, #0]
	if (!buffer || !s.buffer) {
   e3ec2:	b162      	cbz	r2, e3ede <_ZNK6String9compareToERKS_+0x22>
   e3ec4:	b941      	cbnz	r1, e3ed8 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   e3ec6:	6880      	ldr	r0, [r0, #8]
   e3ec8:	b160      	cbz	r0, e3ee4 <_ZNK6String9compareToERKS_+0x28>
   e3eca:	7810      	ldrb	r0, [r2, #0]
   e3ecc:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   e3ece:	6898      	ldr	r0, [r3, #8]
   e3ed0:	b140      	cbz	r0, e3ee4 <_ZNK6String9compareToERKS_+0x28>
   e3ed2:	7809      	ldrb	r1, [r1, #0]
   e3ed4:	4248      	negs	r0, r1
   e3ed6:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   e3ed8:	4610      	mov	r0, r2
   e3eda:	f001 bc2c 	b.w	e5736 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   e3ede:	2900      	cmp	r1, #0
   e3ee0:	d1f5      	bne.n	e3ece <_ZNK6String9compareToERKS_+0x12>
		return 0;
   e3ee2:	4608      	mov	r0, r1
}
   e3ee4:	4770      	bx	lr

000e3ee6 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   e3ee6:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   e3ee8:	6882      	ldr	r2, [r0, #8]
   e3eea:	688b      	ldr	r3, [r1, #8]
   e3eec:	429a      	cmp	r2, r3
   e3eee:	d105      	bne.n	e3efc <_ZNK6String6equalsERKS_+0x16>
   e3ef0:	f7ff ffe4 	bl	e3ebc <_ZNK6String9compareToERKS_>
   e3ef4:	fab0 f080 	clz	r0, r0
   e3ef8:	0940      	lsrs	r0, r0, #5
}
   e3efa:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   e3efc:	2000      	movs	r0, #0
   e3efe:	e7fc      	b.n	e3efa <_ZNK6String6equalsERKS_+0x14>

000e3f00 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
   e3f00:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   e3f02:	6882      	ldr	r2, [r0, #8]
   e3f04:	b93a      	cbnz	r2, e3f16 <_ZNK6String6equalsEPKc+0x16>
   e3f06:	b121      	cbz	r1, e3f12 <_ZNK6String6equalsEPKc+0x12>
   e3f08:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   e3f0a:	fab0 f080 	clz	r0, r0
   e3f0e:	0940      	lsrs	r0, r0, #5
   e3f10:	e000      	b.n	e3f14 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   e3f12:	2001      	movs	r0, #1
}
   e3f14:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   e3f16:	6800      	ldr	r0, [r0, #0]
   e3f18:	b909      	cbnz	r1, e3f1e <_ZNK6String6equalsEPKc+0x1e>
   e3f1a:	7800      	ldrb	r0, [r0, #0]
   e3f1c:	e7f5      	b.n	e3f0a <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   e3f1e:	f001 fc0a 	bl	e5736 <strcmp>
   e3f22:	e7f2      	b.n	e3f0a <_ZNK6String6equalsEPKc+0xa>

000e3f24 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   e3f24:	6883      	ldr	r3, [r0, #8]
   e3f26:	428b      	cmp	r3, r1
   e3f28:	d903      	bls.n	e3f32 <_ZNK6StringixEj+0xe>
   e3f2a:	6800      	ldr	r0, [r0, #0]
   e3f2c:	b110      	cbz	r0, e3f34 <_ZNK6StringixEj+0x10>
	return buffer[index];
   e3f2e:	5c40      	ldrb	r0, [r0, r1]
   e3f30:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   e3f32:	2000      	movs	r0, #0
}
   e3f34:	4770      	bx	lr

000e3f36 <_ZNK6String6charAtEj>:
	return operator[](loc);
   e3f36:	f7ff bff5 	b.w	e3f24 <_ZNK6StringixEj>
	...

000e3f3c <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   e3f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   e3f3e:	429a      	cmp	r2, r3
{
   e3f40:	460f      	mov	r7, r1
   e3f42:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   e3f44:	490c      	ldr	r1, [pc, #48]	; (e3f78 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   e3f46:	bf88      	it	hi
   e3f48:	4613      	movhi	r3, r2
{
   e3f4a:	4614      	mov	r4, r2
   e3f4c:	4606      	mov	r6, r0
	if (left > right) {
   e3f4e:	bf84      	itt	hi
   e3f50:	462c      	movhi	r4, r5
   e3f52:	461d      	movhi	r5, r3
	String out;
   e3f54:	f7ff fe5b 	bl	e3c0e <_ZN6StringC1EPKc>
	if (left > len) return out;
   e3f58:	68ba      	ldr	r2, [r7, #8]
   e3f5a:	42a2      	cmp	r2, r4
   e3f5c:	d30a      	bcc.n	e3f74 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   e3f5e:	6839      	ldr	r1, [r7, #0]
   e3f60:	42aa      	cmp	r2, r5
   e3f62:	bf94      	ite	ls
   e3f64:	ebc4 0202 	rsbls	r2, r4, r2
   e3f68:	ebc4 0205 	rsbhi	r2, r4, r5
   e3f6c:	4421      	add	r1, r4
   e3f6e:	4630      	mov	r0, r6
   e3f70:	f7ff fe34 	bl	e3bdc <_ZN6String4copyEPKcj>
	return out;
}
   e3f74:	4630      	mov	r0, r6
   e3f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e3f78:	000e827d 	.word	0x000e827d

000e3f7c <_ZN6String11toLowerCaseEv>:
	buffer[len] = 0;
	return *this;
}

String& String::toLowerCase(void)
{
   e3f7c:	b538      	push	{r3, r4, r5, lr}
	if (buffer) {
   e3f7e:	6804      	ldr	r4, [r0, #0]
{
   e3f80:	4605      	mov	r5, r0
	if (buffer) {
   e3f82:	b13c      	cbz	r4, e3f94 <_ZN6String11toLowerCaseEv+0x18>
   e3f84:	3c01      	subs	r4, #1
            for (char *p = buffer; *p; p++) {
   e3f86:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   e3f8a:	b118      	cbz	r0, e3f94 <_ZN6String11toLowerCaseEv+0x18>
                    *p = tolower(*p);
   e3f8c:	f001 fce0 	bl	e5950 <tolower>
   e3f90:	7020      	strb	r0, [r4, #0]
            for (char *p = buffer; *p; p++) {
   e3f92:	e7f8      	b.n	e3f86 <_ZN6String11toLowerCaseEv+0xa>
            }
        }
        return *this;
}
   e3f94:	4628      	mov	r0, r5
   e3f96:	bd38      	pop	{r3, r4, r5, pc}

000e3f98 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   e3f98:	b40e      	push	{r1, r2, r3}
   e3f9a:	b570      	push	{r4, r5, r6, lr}
   e3f9c:	b087      	sub	sp, #28
   e3f9e:	ad0b      	add	r5, sp, #44	; 0x2c
   e3fa0:	4604      	mov	r4, r0
   e3fa2:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   e3fa6:	9201      	str	r2, [sp, #4]
   e3fa8:	462b      	mov	r3, r5
   e3faa:	2105      	movs	r1, #5
   e3fac:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   e3fae:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   e3fb0:	f7fd f9f6 	bl	e13a0 <vsnprintf>
    va_end(marker);

    String result;
   e3fb4:	490b      	ldr	r1, [pc, #44]	; (e3fe4 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   e3fb6:	4606      	mov	r6, r0
    String result;
   e3fb8:	4620      	mov	r0, r4
   e3fba:	f7ff fe28 	bl	e3c0e <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   e3fbe:	4631      	mov	r1, r6
   e3fc0:	4620      	mov	r0, r4
   e3fc2:	f7ff fdf7 	bl	e3bb4 <_ZN6String7reserveEj>
    if (result.buffer) {
   e3fc6:	6820      	ldr	r0, [r4, #0]
   e3fc8:	b130      	cbz	r0, e3fd8 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   e3fca:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   e3fcc:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   e3fce:	462b      	mov	r3, r5
   e3fd0:	1c71      	adds	r1, r6, #1
   e3fd2:	f7fd f9e5 	bl	e13a0 <vsnprintf>
        va_end(marker);
        result.len = n;
   e3fd6:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   e3fd8:	4620      	mov	r0, r4
   e3fda:	b007      	add	sp, #28
   e3fdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   e3fe0:	b003      	add	sp, #12
   e3fe2:	4770      	bx	lr
   e3fe4:	000e827d 	.word	0x000e827d

000e3fe8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   e3fe8:	b510      	push	{r4, lr}
   e3fea:	4604      	mov	r4, r0
        if (wakeupSource_) {
   e3fec:	6800      	ldr	r0, [r0, #0]
   e3fee:	b118      	cbz	r0, e3ff8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   e3ff0:	f7fd f9ae 	bl	e1350 <free>
            wakeupSource_ = nullptr;
   e3ff4:	2300      	movs	r3, #0
   e3ff6:	6023      	str	r3, [r4, #0]
        }
    }
   e3ff8:	bd10      	pop	{r4, pc}

000e3ffa <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   e3ffa:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   e3ffc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   e4000:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   e4002:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   e4004:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   e4006:	f853 2f06 	ldr.w	r2, [r3, #6]!
   e400a:	f8c0 2006 	str.w	r2, [r0, #6]
   e400e:	889b      	ldrh	r3, [r3, #4]
   e4010:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   e4012:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   e4014:	f7ff ffe8 	bl	e3fe8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   e4018:	682b      	ldr	r3, [r5, #0]
   e401a:	b113      	cbz	r3, e4022 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   e401c:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   e401e:	2300      	movs	r3, #0
   e4020:	602b      	str	r3, [r5, #0]
    }
   e4022:	4620      	mov	r0, r4
   e4024:	bd38      	pop	{r3, r4, r5, pc}

000e4026 <_ZN17SystemSleepResult13toSleepResultEv>:
        if (error_ || wakeupSource_) {
   e4026:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   e402a:	680a      	ldr	r2, [r1, #0]
    SleepResult toSleepResult() {
   e402c:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   e402e:	b933      	cbnz	r3, e403e <_ZN17SystemSleepResult13toSleepResultEv+0x18>
   e4030:	b932      	cbnz	r2, e4040 <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
        return compatResult_;
   e4032:	f851 3f06 	ldr.w	r3, [r1, #6]!
   e4036:	6003      	str	r3, [r0, #0]
   e4038:	888b      	ldrh	r3, [r1, #4]
   e403a:	8083      	strh	r3, [r0, #4]
    }
   e403c:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
   e403e:	b122      	cbz	r2, e404a <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
   e4040:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
   e4042:	2c01      	cmp	r4, #1
   e4044:	d003      	beq.n	e404e <_ZN17SystemSleepResult13toSleepResultEv+0x28>
   e4046:	2c04      	cmp	r4, #4
   e4048:	d006      	beq.n	e4058 <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   e404a:	2204      	movs	r2, #4
   e404c:	e005      	b.n	e405a <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   e404e:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   e4050:	814a      	strh	r2, [r1, #10]
   e4052:	718c      	strb	r4, [r1, #6]
   e4054:	810b      	strh	r3, [r1, #8]
                    break;
   e4056:	e7ec      	b.n	e4032 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   e4058:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   e405a:	810b      	strh	r3, [r1, #8]
   e405c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   e4060:	718a      	strb	r2, [r1, #6]
   e4062:	814b      	strh	r3, [r1, #10]
                    break;
   e4064:	e7e5      	b.n	e4032 <_ZN17SystemSleepResult13toSleepResultEv+0xc>

000e4066 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   e4066:	b507      	push	{r0, r1, r2, lr}
   e4068:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   e406a:	2100      	movs	r1, #0
{
   e406c:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   e406e:	9100      	str	r1, [sp, #0]
   e4070:	2001      	movs	r0, #1
   e4072:	218c      	movs	r1, #140	; 0x8c
   e4074:	f7fd f8b2 	bl	e11dc <system_reset>
}
   e4078:	b003      	add	sp, #12
   e407a:	f85d fb04 	ldr.w	pc, [sp], #4

000e407e <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   e407e:	4601      	mov	r1, r0
    reset(0, flags);
   e4080:	2000      	movs	r0, #0
   e4082:	f7ff bff0 	b.w	e4066 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000e4086 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   e4086:	2000      	movs	r0, #0
   e4088:	f7ff bff9 	b.w	e407e <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000e408c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
    }
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   e408c:	b530      	push	{r4, r5, lr}
   e408e:	4604      	mov	r4, r0
   e4090:	b085      	sub	sp, #20
   e4092:	4608      	mov	r0, r1
   e4094:	4611      	mov	r1, r2
   e4096:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   e4098:	2300      	movs	r3, #0
   e409a:	f7fd f85b 	bl	e1154 <system_sleep>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
   e409e:	4d0d      	ldr	r5, [pc, #52]	; (e40d4 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   e40a0:	f8ad 000c 	strh.w	r0, [sp, #12]
              compatResult_(r) {
   e40a4:	2300      	movs	r3, #0
   e40a6:	a901      	add	r1, sp, #4
   e40a8:	9301      	str	r3, [sp, #4]
   e40aa:	f8ad 3008 	strh.w	r3, [sp, #8]
   e40ae:	f88d 300a 	strb.w	r3, [sp, #10]
   e40b2:	4628      	mov	r0, r5
   e40b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   e40b8:	f8ad 300e 	strh.w	r3, [sp, #14]
   e40bc:	f7ff ff9d 	bl	e3ffa <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
   e40c0:	a801      	add	r0, sp, #4
   e40c2:	f7ff ff91 	bl	e3fe8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
   e40c6:	4620      	mov	r0, r4
   e40c8:	4629      	mov	r1, r5
   e40ca:	f7ff ffac 	bl	e4026 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   e40ce:	4620      	mov	r0, r4
   e40d0:	b005      	add	sp, #20
   e40d2:	bd30      	pop	{r4, r5, pc}
   e40d4:	2003e660 	.word	0x2003e660

000e40d8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   e40d8:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   e40da:	4b09      	ldr	r3, [pc, #36]	; (e4100 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   e40dc:	4c09      	ldr	r4, [pc, #36]	; (e4104 <_GLOBAL__sub_I_System+0x2c>)
   e40de:	2202      	movs	r2, #2
   e40e0:	2000      	movs	r0, #0
   e40e2:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   e40e4:	4b08      	ldr	r3, [pc, #32]	; (e4108 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   e40e6:	6020      	str	r0, [r4, #0]
   e40e8:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   e40ea:	71a0      	strb	r0, [r4, #6]
   e40ec:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   e40ee:	f7fd f821 	bl	e1134 <set_system_mode>
SystemClass System;
   e40f2:	4620      	mov	r0, r4
   e40f4:	4a05      	ldr	r2, [pc, #20]	; (e410c <_GLOBAL__sub_I_System+0x34>)
   e40f6:	4906      	ldr	r1, [pc, #24]	; (e4110 <_GLOBAL__sub_I_System+0x38>)
   e40f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   e40fc:	f000 bbbe 	b.w	e487c <__aeabi_atexit>
   e4100:	2003e66c 	.word	0x2003e66c
   e4104:	2003e660 	.word	0x2003e660
   e4108:	ffff0000 	.word	0xffff0000
   e410c:	2003d9f8 	.word	0x2003d9f8
   e4110:	000ddc7f 	.word	0x000ddc7f

000e4114 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   e4114:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   e4116:	2000      	movs	r0, #0
   e4118:	f7fd f89a 	bl	e1250 <spark_sync_time_pending>
   e411c:	b128      	cbz	r0, e412a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   e411e:	f7fd f887 	bl	e1230 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   e4122:	f080 0001 	eor.w	r0, r0, #1
   e4126:	b2c0      	uxtb	r0, r0
    }
   e4128:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   e412a:	2001      	movs	r0, #1
   e412c:	e7fc      	b.n	e4128 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000e412e <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   e412e:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   e4130:	2000      	movs	r0, #0
   e4132:	f7fc fe17 	bl	e0d64 <hal_rtc_time_is_valid>
    if (rtcstate)
   e4136:	4604      	mov	r4, r0
   e4138:	b9a0      	cbnz	r0, e4164 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   e413a:	f7fc fff3 	bl	e1124 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   e413e:	2801      	cmp	r0, #1
   e4140:	d110      	bne.n	e4164 <_ZN9TimeClass7isValidEv+0x36>
   e4142:	4620      	mov	r0, r4
   e4144:	f7fd f82e 	bl	e11a4 <system_thread_get_state>
   e4148:	b960      	cbnz	r0, e4164 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   e414a:	f7ff ffe3 	bl	e4114 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   e414e:	b910      	cbnz	r0, e4156 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   e4150:	f7fd f85e 	bl	e1210 <spark_process>
        while (_while() && !_condition()) {
   e4154:	e7f9      	b.n	e414a <_ZN9TimeClass7isValidEv+0x1c>
   e4156:	f7ff ffdd 	bl	e4114 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   e415a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   e415e:	2000      	movs	r0, #0
   e4160:	f7fc be00 	b.w	e0d64 <hal_rtc_time_is_valid>
}
   e4164:	4620      	mov	r0, r4
   e4166:	bd10      	pop	{r4, pc}

000e4168 <_ZN9TimeClass3nowEv>:
{
   e4168:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   e416a:	f7ff ffe0 	bl	e412e <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   e416e:	2210      	movs	r2, #16
   e4170:	2100      	movs	r1, #0
   e4172:	4668      	mov	r0, sp
   e4174:	f001 fa9c 	bl	e56b0 <memset>
    hal_rtc_get_time(&tv, nullptr);
   e4178:	2100      	movs	r1, #0
   e417a:	4668      	mov	r0, sp
   e417c:	f7fc fdfa 	bl	e0d74 <hal_rtc_get_time>
}
   e4180:	9800      	ldr	r0, [sp, #0]
   e4182:	b005      	add	sp, #20
   e4184:	f85d fb04 	ldr.w	pc, [sp], #4

000e4188 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   e4188:	4b02      	ldr	r3, [pc, #8]	; (e4194 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   e418a:	681a      	ldr	r2, [r3, #0]
   e418c:	4b02      	ldr	r3, [pc, #8]	; (e4198 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   e418e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   e4190:	4770      	bx	lr
   e4192:	bf00      	nop
   e4194:	2003d98c 	.word	0x2003d98c
   e4198:	2003e670 	.word	0x2003e670

000e419c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   e419c:	4770      	bx	lr

000e419e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   e419e:	7441      	strb	r1, [r0, #17]
}
   e41a0:	4770      	bx	lr

000e41a2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   e41a2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   e41a4:	7c00      	ldrb	r0, [r0, #16]
   e41a6:	f7fc ff3d 	bl	e1024 <hal_usart_available_data_for_write>
}
   e41aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e41ae:	bd08      	pop	{r3, pc}

000e41b0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   e41b0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   e41b2:	7c00      	ldrb	r0, [r0, #16]
   e41b4:	f7fc ff0e 	bl	e0fd4 <hal_usart_available>
}
   e41b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e41bc:	bd08      	pop	{r3, pc}

000e41be <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   e41be:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   e41c0:	7c00      	ldrb	r0, [r0, #16]
   e41c2:	f7fc ff17 	bl	e0ff4 <hal_usart_peek>
}
   e41c6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   e41ca:	bd08      	pop	{r3, pc}

000e41cc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   e41cc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   e41ce:	7c00      	ldrb	r0, [r0, #16]
   e41d0:	f7fc ff08 	bl	e0fe4 <hal_usart_read>
}
   e41d4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   e41d8:	bd08      	pop	{r3, pc}

000e41da <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   e41da:	7c00      	ldrb	r0, [r0, #16]
   e41dc:	f7fc bf12 	b.w	e1004 <hal_usart_flush>

000e41e0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   e41e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   e41e2:	7c45      	ldrb	r5, [r0, #17]
{
   e41e4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   e41e6:	b12d      	cbz	r5, e41f4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   e41e8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   e41ea:	b003      	add	sp, #12
   e41ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   e41f0:	f7fc bee8 	b.w	e0fc4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   e41f4:	7c00      	ldrb	r0, [r0, #16]
   e41f6:	9101      	str	r1, [sp, #4]
   e41f8:	f7fc ff14 	bl	e1024 <hal_usart_available_data_for_write>
   e41fc:	2800      	cmp	r0, #0
   e41fe:	9901      	ldr	r1, [sp, #4]
   e4200:	dcf2      	bgt.n	e41e8 <_ZN11USARTSerial5writeEh+0x8>
}
   e4202:	4628      	mov	r0, r5
   e4204:	b003      	add	sp, #12
   e4206:	bd30      	pop	{r4, r5, pc}

000e4208 <_ZN11USARTSerialD0Ev>:
   e4208:	b510      	push	{r4, lr}
   e420a:	2114      	movs	r1, #20
   e420c:	4604      	mov	r4, r0
   e420e:	f000 fb3a 	bl	e4886 <_ZdlPvj>
   e4212:	4620      	mov	r0, r4
   e4214:	bd10      	pop	{r4, pc}
	...

000e4218 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   e4218:	b510      	push	{r4, lr}
   e421a:	f04f 0c00 	mov.w	ip, #0
   e421e:	4604      	mov	r4, r0
   e4220:	4608      	mov	r0, r1
   e4222:	4611      	mov	r1, r2
   e4224:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   e4228:	e9c4 c201 	strd	ip, r2, [r4, #4]
   e422c:	4a04      	ldr	r2, [pc, #16]	; (e4240 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   e422e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   e4230:	2201      	movs	r2, #1
  _serial = serial;
   e4232:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   e4234:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   e4236:	461a      	mov	r2, r3
   e4238:	f7fc feb4 	bl	e0fa4 <hal_usart_init>
}
   e423c:	4620      	mov	r0, r4
   e423e:	bd10      	pop	{r4, pc}
   e4240:	000e8970 	.word	0x000e8970

000e4244 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   e4244:	7c00      	ldrb	r0, [r0, #16]
   e4246:	2300      	movs	r3, #0
   e4248:	f7fc bef4 	b.w	e1034 <hal_usart_begin_config>

000e424c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   e424c:	2200      	movs	r2, #0
   e424e:	f7ff bff9 	b.w	e4244 <_ZN11USARTSerial5beginEmm>

000e4252 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   e4252:	7c00      	ldrb	r0, [r0, #16]
   e4254:	f7fc beae 	b.w	e0fb4 <hal_usart_end>

000e4258 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   e4258:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   e425a:	4c0e      	ldr	r4, [pc, #56]	; (e4294 <_Z22__fetch_global_Serial1v+0x3c>)
   e425c:	7821      	ldrb	r1, [r4, #0]
   e425e:	f3bf 8f5b 	dmb	ish
   e4262:	f011 0101 	ands.w	r1, r1, #1
   e4266:	d112      	bne.n	e428e <_Z22__fetch_global_Serial1v+0x36>
   e4268:	4620      	mov	r0, r4
   e426a:	9101      	str	r1, [sp, #4]
   e426c:	f7ef ff26 	bl	d40bc <__cxa_guard_acquire>
   e4270:	9901      	ldr	r1, [sp, #4]
   e4272:	b160      	cbz	r0, e428e <_Z22__fetch_global_Serial1v+0x36>
   e4274:	4a08      	ldr	r2, [pc, #32]	; (e4298 <_Z22__fetch_global_Serial1v+0x40>)
   e4276:	4b09      	ldr	r3, [pc, #36]	; (e429c <_Z22__fetch_global_Serial1v+0x44>)
   e4278:	4809      	ldr	r0, [pc, #36]	; (e42a0 <_Z22__fetch_global_Serial1v+0x48>)
   e427a:	f7ff ffcd 	bl	e4218 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   e427e:	4620      	mov	r0, r4
   e4280:	f7ef ff21 	bl	d40c6 <__cxa_guard_release>
   e4284:	4a07      	ldr	r2, [pc, #28]	; (e42a4 <_Z22__fetch_global_Serial1v+0x4c>)
   e4286:	4908      	ldr	r1, [pc, #32]	; (e42a8 <_Z22__fetch_global_Serial1v+0x50>)
   e4288:	4805      	ldr	r0, [pc, #20]	; (e42a0 <_Z22__fetch_global_Serial1v+0x48>)
   e428a:	f000 faf7 	bl	e487c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   e428e:	4804      	ldr	r0, [pc, #16]	; (e42a0 <_Z22__fetch_global_Serial1v+0x48>)
   e4290:	b002      	add	sp, #8
   e4292:	bd10      	pop	{r4, pc}
   e4294:	2003e674 	.word	0x2003e674
   e4298:	2003e678 	.word	0x2003e678
   e429c:	2003e6fc 	.word	0x2003e6fc
   e42a0:	2003e780 	.word	0x2003e780
   e42a4:	2003d9f8 	.word	0x2003d9f8
   e42a8:	000e419d 	.word	0x000e419d

000e42ac <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   e42ac:	7441      	strb	r1, [r0, #17]
}
   e42ae:	4770      	bx	lr

000e42b0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   e42b0:	4770      	bx	lr

000e42b2 <_ZN9USBSerial4readEv>:
{
   e42b2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   e42b4:	2100      	movs	r1, #0
   e42b6:	7c00      	ldrb	r0, [r0, #16]
   e42b8:	f7fc feec 	bl	e1094 <HAL_USB_USART_Receive_Data>
}
   e42bc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   e42c0:	bd08      	pop	{r3, pc}

000e42c2 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   e42c2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   e42c4:	2101      	movs	r1, #1
   e42c6:	7c00      	ldrb	r0, [r0, #16]
   e42c8:	f7fc fee4 	bl	e1094 <HAL_USB_USART_Receive_Data>
}
   e42cc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   e42d0:	bd08      	pop	{r3, pc}

000e42d2 <_ZN9USBSerial17availableForWriteEv>:
{
   e42d2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   e42d4:	7c00      	ldrb	r0, [r0, #16]
   e42d6:	f7fc fed5 	bl	e1084 <HAL_USB_USART_Available_Data_For_Write>
}
   e42da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e42de:	bd08      	pop	{r3, pc}

000e42e0 <_ZN9USBSerial9availableEv>:
{
   e42e0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   e42e2:	7c00      	ldrb	r0, [r0, #16]
   e42e4:	f7fc fec6 	bl	e1074 <HAL_USB_USART_Available_Data>
}
   e42e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e42ec:	bd08      	pop	{r3, pc}

000e42ee <_ZN9USBSerial5writeEh>:
{
   e42ee:	b513      	push	{r0, r1, r4, lr}
   e42f0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   e42f2:	7c00      	ldrb	r0, [r0, #16]
{
   e42f4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   e42f6:	f7fc fec5 	bl	e1084 <HAL_USB_USART_Available_Data_For_Write>
   e42fa:	2800      	cmp	r0, #0
   e42fc:	9901      	ldr	r1, [sp, #4]
   e42fe:	dc01      	bgt.n	e4304 <_ZN9USBSerial5writeEh+0x16>
   e4300:	7c60      	ldrb	r0, [r4, #17]
   e4302:	b120      	cbz	r0, e430e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   e4304:	7c20      	ldrb	r0, [r4, #16]
   e4306:	f7fc fecd 	bl	e10a4 <HAL_USB_USART_Send_Data>
   e430a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   e430e:	b002      	add	sp, #8
   e4310:	bd10      	pop	{r4, pc}

000e4312 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   e4312:	7c00      	ldrb	r0, [r0, #16]
   e4314:	f7fc bece 	b.w	e10b4 <HAL_USB_USART_Flush_Data>

000e4318 <_ZN9USBSerialD0Ev>:
   e4318:	b510      	push	{r4, lr}
   e431a:	2114      	movs	r1, #20
   e431c:	4604      	mov	r4, r0
   e431e:	f000 fab2 	bl	e4886 <_ZdlPvj>
   e4322:	4620      	mov	r0, r4
   e4324:	bd10      	pop	{r4, pc}
	...

000e4328 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   e4328:	b510      	push	{r4, lr}
   e432a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   e432e:	4604      	mov	r4, r0
   e4330:	4608      	mov	r0, r1
   e4332:	2100      	movs	r1, #0
   e4334:	e9c4 1301 	strd	r1, r3, [r4, #4]
   e4338:	4b04      	ldr	r3, [pc, #16]	; (e434c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   e433a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   e433c:	2301      	movs	r3, #1
  _serial = serial;
   e433e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   e4340:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   e4342:	4611      	mov	r1, r2
   e4344:	f7fc fe7e 	bl	e1044 <HAL_USB_USART_Init>
}
   e4348:	4620      	mov	r0, r4
   e434a:	bd10      	pop	{r4, pc}
   e434c:	000e89a0 	.word	0x000e89a0

000e4350 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   e4350:	7c00      	ldrb	r0, [r0, #16]
   e4352:	2200      	movs	r2, #0
   e4354:	f7fc be7e 	b.w	e1054 <HAL_USB_USART_Begin>

000e4358 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   e4358:	7c00      	ldrb	r0, [r0, #16]
   e435a:	f7fc be83 	b.w	e1064 <HAL_USB_USART_End>

000e435e <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   e435e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   e4360:	2214      	movs	r2, #20
{
   e4362:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   e4364:	2100      	movs	r1, #0
   e4366:	f001 f9a3 	bl	e56b0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   e436a:	4620      	mov	r0, r4
   e436c:	bd10      	pop	{r4, pc}
	...

000e4370 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   e4370:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   e4372:	4c10      	ldr	r4, [pc, #64]	; (e43b4 <_Z16_fetch_usbserialv+0x44>)
{
   e4374:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   e4376:	a803      	add	r0, sp, #12
   e4378:	f7ff fff1 	bl	e435e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   e437c:	7821      	ldrb	r1, [r4, #0]
   e437e:	f3bf 8f5b 	dmb	ish
   e4382:	f011 0101 	ands.w	r1, r1, #1
   e4386:	d111      	bne.n	e43ac <_Z16_fetch_usbserialv+0x3c>
   e4388:	4620      	mov	r0, r4
   e438a:	9101      	str	r1, [sp, #4]
   e438c:	f7ef fe96 	bl	d40bc <__cxa_guard_acquire>
   e4390:	9901      	ldr	r1, [sp, #4]
   e4392:	b158      	cbz	r0, e43ac <_Z16_fetch_usbserialv+0x3c>
   e4394:	aa03      	add	r2, sp, #12
   e4396:	4808      	ldr	r0, [pc, #32]	; (e43b8 <_Z16_fetch_usbserialv+0x48>)
   e4398:	f7ff ffc6 	bl	e4328 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   e439c:	4620      	mov	r0, r4
   e439e:	f7ef fe92 	bl	d40c6 <__cxa_guard_release>
   e43a2:	4a06      	ldr	r2, [pc, #24]	; (e43bc <_Z16_fetch_usbserialv+0x4c>)
   e43a4:	4906      	ldr	r1, [pc, #24]	; (e43c0 <_Z16_fetch_usbserialv+0x50>)
   e43a6:	4804      	ldr	r0, [pc, #16]	; (e43b8 <_Z16_fetch_usbserialv+0x48>)
   e43a8:	f000 fa68 	bl	e487c <__aeabi_atexit>
	return _usbserial;
}
   e43ac:	4802      	ldr	r0, [pc, #8]	; (e43b8 <_Z16_fetch_usbserialv+0x48>)
   e43ae:	b008      	add	sp, #32
   e43b0:	bd10      	pop	{r4, pc}
   e43b2:	bf00      	nop
   e43b4:	2003e794 	.word	0x2003e794
   e43b8:	2003e798 	.word	0x2003e798
   e43bc:	2003d9f8 	.word	0x2003d9f8
   e43c0:	000e42b1 	.word	0x000e42b1

000e43c4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   e43c4:	b510      	push	{r4, lr}
   e43c6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   e43c8:	f001 f9e5 	bl	e5796 <strlen>
   e43cc:	3801      	subs	r0, #1
   e43ce:	1823      	adds	r3, r4, r0
   e43d0:	4620      	mov	r0, r4
	while(i<j){
   e43d2:	4283      	cmp	r3, r0
   e43d4:	d906      	bls.n	e43e4 <_Z11str_reversePc+0x20>
		c = *i;
   e43d6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   e43d8:	7819      	ldrb	r1, [r3, #0]
   e43da:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   e43de:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   e43e2:	e7f6      	b.n	e43d2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   e43e4:	bd10      	pop	{r4, pc}

000e43e6 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   e43e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   e43ea:	1e93      	subs	r3, r2, #2
{
   e43ec:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   e43ee:	2b22      	cmp	r3, #34	; 0x22
   e43f0:	f04f 0300 	mov.w	r3, #0
{
   e43f4:	460d      	mov	r5, r1
   e43f6:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   e43f8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   e43fc:	d927      	bls.n	e444e <ltoa+0x68>

      if (10 == base && N < 0L)
   e43fe:	2800      	cmp	r0, #0
   e4400:	da2a      	bge.n	e4458 <ltoa+0x72>
      {
            *head++ = '-';
   e4402:	462e      	mov	r6, r5
   e4404:	232d      	movs	r3, #45	; 0x2d
   e4406:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   e440a:	4240      	negs	r0, r0
   e440c:	240a      	movs	r4, #10
      *tail-- = '\0';
   e440e:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   e4412:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   e4416:	4622      	mov	r2, r4
   e4418:	4601      	mov	r1, r0
   e441a:	a801      	add	r0, sp, #4
   e441c:	f001 f90c 	bl	e5638 <ldiv>
   e4420:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   e4422:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   e4424:	2b09      	cmp	r3, #9
   e4426:	bfcc      	ite	gt
   e4428:	2237      	movgt	r2, #55	; 0x37
   e442a:	2230      	movle	r2, #48	; 0x30
   e442c:	fa52 f383 	uxtab	r3, r2, r3
   e4430:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   e4434:	f108 0801 	add.w	r8, r8, #1
   e4438:	2800      	cmp	r0, #0
   e443a:	d1ec      	bne.n	e4416 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   e443c:	4642      	mov	r2, r8
   e443e:	1c79      	adds	r1, r7, #1
   e4440:	4630      	mov	r0, r6
   e4442:	f001 f90d 	bl	e5660 <memcpy>
      return str;
}
   e4446:	4628      	mov	r0, r5
   e4448:	b00c      	add	sp, #48	; 0x30
   e444a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   e444e:	2a0a      	cmp	r2, #10
   e4450:	d0d5      	beq.n	e43fe <ltoa+0x18>
      if (uarg)
   e4452:	b118      	cbz	r0, e445c <ltoa+0x76>
   e4454:	462e      	mov	r6, r5
   e4456:	e7da      	b.n	e440e <ltoa+0x28>
   e4458:	240a      	movs	r4, #10
   e445a:	e7fa      	b.n	e4452 <ltoa+0x6c>
      else  *tail-- = '0';
   e445c:	2330      	movs	r3, #48	; 0x30
   e445e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   e4462:	462e      	mov	r6, r5
   e4464:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   e4468:	f04f 0802 	mov.w	r8, #2
   e446c:	e7e6      	b.n	e443c <ltoa+0x56>

000e446e <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   e446e:	b570      	push	{r4, r5, r6, lr}
   e4470:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   e4472:	1e91      	subs	r1, r2, #2
   e4474:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   e4476:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   e4478:	d822      	bhi.n	e44c0 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   e447a:	4620      	mov	r0, r4

	div_t result;
	while(a){
   e447c:	b16d      	cbz	r5, e449a <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   e447e:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   e4482:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   e4486:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   e4488:	2d09      	cmp	r5, #9
                *ptr += '0';
   e448a:	bf94      	ite	ls
   e448c:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   e448e:	3157      	addhi	r1, #87	; 0x57
   e4490:	b2c9      	uxtb	r1, r1
   e4492:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   e4496:	4635      	mov	r5, r6
	while(a){
   e4498:	e7f0      	b.n	e447c <ultoa+0xe>
   e449a:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   e449c:	4423      	add	r3, r4
            *ptr++ = '0';
   e449e:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   e44a0:	4293      	cmp	r3, r2
   e44a2:	d902      	bls.n	e44aa <ultoa+0x3c>
            *ptr++ = '0';
   e44a4:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   e44a8:	e7fa      	b.n	e44a0 <ultoa+0x32>
   e44aa:	1a1a      	subs	r2, r3, r0
   e44ac:	4283      	cmp	r3, r0
   e44ae:	bf38      	it	cc
   e44b0:	2200      	movcc	r2, #0

	*ptr = '\0';
   e44b2:	2300      	movs	r3, #0
   e44b4:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   e44b6:	4620      	mov	r0, r4
   e44b8:	f7ff ff84 	bl	e43c4 <_Z11str_reversePc>
	return buffer;
   e44bc:	4620      	mov	r0, r4
}
   e44be:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   e44c0:	2000      	movs	r0, #0
   e44c2:	e7fc      	b.n	e44be <ultoa+0x50>

000e44c4 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   e44c4:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   e44c6:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   e44c8:	460c      	mov	r4, r1
   e44ca:	4615      	mov	r5, r2
	if(a<0){
   e44cc:	da0e      	bge.n	e44ec <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   e44ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   e44d2:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   e44d6:	bf14      	ite	ne
   e44d8:	4258      	negne	r0, r3
   e44da:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   e44dc:	2301      	movs	r3, #1
		*buffer = '-';
   e44de:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   e44e0:	462a      	mov	r2, r5
   e44e2:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   e44e4:	f7ff ffc3 	bl	e446e <ultoa>
	}
	return buffer;
}
   e44e8:	4620      	mov	r0, r4
   e44ea:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   e44ec:	2301      	movs	r3, #1
   e44ee:	e7f9      	b.n	e44e4 <itoa+0x20>

000e44f0 <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   e44f0:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   e44f2:	2301      	movs	r3, #1
   e44f4:	f7ff ffbb 	bl	e446e <ultoa>
}
   e44f8:	bd08      	pop	{r3, pc}
	...

000e44fc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   e44fc:	4b01      	ldr	r3, [pc, #4]	; (e4504 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   e44fe:	6018      	str	r0, [r3, #0]
    }, nullptr);
   e4500:	4770      	bx	lr
   e4502:	bf00      	nop
   e4504:	2003d994 	.word	0x2003d994

000e4508 <serialEventRun>:
{
   e4508:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   e450a:	4b0b      	ldr	r3, [pc, #44]	; (e4538 <serialEventRun+0x30>)
   e450c:	b143      	cbz	r3, e4520 <serialEventRun+0x18>
   e450e:	f7ff ff2f 	bl	e4370 <_Z16_fetch_usbserialv>
   e4512:	6803      	ldr	r3, [r0, #0]
   e4514:	691b      	ldr	r3, [r3, #16]
   e4516:	4798      	blx	r3
   e4518:	2800      	cmp	r0, #0
   e451a:	dd01      	ble.n	e4520 <serialEventRun+0x18>
        serialEvent();
   e451c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   e4520:	4b06      	ldr	r3, [pc, #24]	; (e453c <serialEventRun+0x34>)
   e4522:	b143      	cbz	r3, e4536 <serialEventRun+0x2e>
   e4524:	f7ff fe98 	bl	e4258 <_Z22__fetch_global_Serial1v>
   e4528:	6803      	ldr	r3, [r0, #0]
   e452a:	691b      	ldr	r3, [r3, #16]
   e452c:	4798      	blx	r3
   e452e:	2800      	cmp	r0, #0
   e4530:	dd01      	ble.n	e4536 <serialEventRun+0x2e>
        serialEvent1();
   e4532:	f3af 8000 	nop.w
}
   e4536:	bd08      	pop	{r3, pc}
	...

000e4540 <_post_loop>:
{
   e4540:	b508      	push	{r3, lr}
	serialEventRun();
   e4542:	f7ff ffe1 	bl	e4508 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   e4546:	f7fc fbed 	bl	e0d24 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   e454a:	4b01      	ldr	r3, [pc, #4]	; (e4550 <_post_loop+0x10>)
   e454c:	6018      	str	r0, [r3, #0]
}
   e454e:	bd08      	pop	{r3, pc}
   e4550:	2003e7b4 	.word	0x2003e7b4

000e4554 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   e4554:	4802      	ldr	r0, [pc, #8]	; (e4560 <_Z33system_initialize_user_backup_ramv+0xc>)
   e4556:	4a03      	ldr	r2, [pc, #12]	; (e4564 <_Z33system_initialize_user_backup_ramv+0x10>)
   e4558:	4903      	ldr	r1, [pc, #12]	; (e4568 <_Z33system_initialize_user_backup_ramv+0x14>)
   e455a:	1a12      	subs	r2, r2, r0
   e455c:	f001 b880 	b.w	e5660 <memcpy>
   e4560:	2003f400 	.word	0x2003f400
   e4564:	2003f404 	.word	0x2003f404
   e4568:	000e8b28 	.word	0x000e8b28

000e456c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   e456c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   e456e:	2300      	movs	r3, #0
   e4570:	9300      	str	r3, [sp, #0]
   e4572:	461a      	mov	r2, r3
   e4574:	f06f 0177 	mvn.w	r1, #119	; 0x77
   e4578:	f7fc fe26 	bl	e11c8 <system_ctrl_set_result>
}
   e457c:	b003      	add	sp, #12
   e457e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000e4584 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   e4584:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   e4586:	8843      	ldrh	r3, [r0, #2]
   e4588:	2b0a      	cmp	r3, #10
   e458a:	d008      	beq.n	e459e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   e458c:	2b50      	cmp	r3, #80	; 0x50
   e458e:	d10b      	bne.n	e45a8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   e4590:	4b09      	ldr	r3, [pc, #36]	; (e45b8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   e4592:	681b      	ldr	r3, [r3, #0]
   e4594:	b14b      	cbz	r3, e45aa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   e4596:	b003      	add	sp, #12
   e4598:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   e459c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   e459e:	f7ff ffe5 	bl	e456c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   e45a2:	b003      	add	sp, #12
   e45a4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   e45a8:	2300      	movs	r3, #0
   e45aa:	9300      	str	r3, [sp, #0]
   e45ac:	461a      	mov	r2, r3
   e45ae:	f06f 0177 	mvn.w	r1, #119	; 0x77
   e45b2:	f7fc fe09 	bl	e11c8 <system_ctrl_set_result>
}
   e45b6:	e7f4      	b.n	e45a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   e45b8:	2003e7b0 	.word	0x2003e7b0

000e45bc <module_user_init_hook>:
{
   e45bc:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   e45be:	4c12      	ldr	r4, [pc, #72]	; (e4608 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   e45c0:	4812      	ldr	r0, [pc, #72]	; (e460c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   e45c2:	4d13      	ldr	r5, [pc, #76]	; (e4610 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   e45c4:	2100      	movs	r1, #0
   e45c6:	f7fc ff0b 	bl	e13e0 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   e45ca:	6823      	ldr	r3, [r4, #0]
   e45cc:	42ab      	cmp	r3, r5
   e45ce:	4b11      	ldr	r3, [pc, #68]	; (e4614 <module_user_init_hook+0x58>)
   e45d0:	bf0c      	ite	eq
   e45d2:	2201      	moveq	r2, #1
   e45d4:	2200      	movne	r2, #0
   e45d6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   e45d8:	d002      	beq.n	e45e0 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   e45da:	f7ff ffbb 	bl	e4554 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   e45de:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   e45e0:	f7fc fb90 	bl	e0d04 <HAL_RNG_GetRandomNumber>
   e45e4:	4604      	mov	r4, r0
    srand(seed);
   e45e6:	f001 f86b 	bl	e56c0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   e45ea:	4b0b      	ldr	r3, [pc, #44]	; (e4618 <module_user_init_hook+0x5c>)
   e45ec:	b113      	cbz	r3, e45f4 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   e45ee:	4620      	mov	r0, r4
   e45f0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   e45f4:	2100      	movs	r1, #0
   e45f6:	4808      	ldr	r0, [pc, #32]	; (e4618 <module_user_init_hook+0x5c>)
   e45f8:	f7fc fe3a 	bl	e1270 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   e45fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   e4600:	4806      	ldr	r0, [pc, #24]	; (e461c <module_user_init_hook+0x60>)
   e4602:	2100      	movs	r1, #0
   e4604:	f7fc bdd6 	b.w	e11b4 <system_ctrl_set_app_request_handler>
   e4608:	2003f400 	.word	0x2003f400
   e460c:	000e44fd 	.word	0x000e44fd
   e4610:	9a271c1e 	.word	0x9a271c1e
   e4614:	2003e7ac 	.word	0x2003e7ac
   e4618:	00000000 	.word	0x00000000
   e461c:	000e4585 	.word	0x000e4585

000e4620 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   e4620:	b508      	push	{r3, lr}
   e4622:	4b02      	ldr	r3, [pc, #8]	; (e462c <spark_protocol_instance+0xc>)
   e4624:	681b      	ldr	r3, [r3, #0]
   e4626:	681b      	ldr	r3, [r3, #0]
   e4628:	9301      	str	r3, [sp, #4]
   e462a:	bd08      	pop	{r3, pc}
   e462c:	0003025c 	.word	0x0003025c

000e4630 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   e4630:	b508      	push	{r3, lr}
   e4632:	4b02      	ldr	r3, [pc, #8]	; (e463c <spark_protocol_set_product_id+0xc>)
   e4634:	681b      	ldr	r3, [r3, #0]
   e4636:	685b      	ldr	r3, [r3, #4]
   e4638:	9301      	str	r3, [sp, #4]
   e463a:	bd08      	pop	{r3, pc}
   e463c:	0003025c 	.word	0x0003025c

000e4640 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   e4640:	b508      	push	{r3, lr}
   e4642:	4b02      	ldr	r3, [pc, #8]	; (e464c <spark_protocol_set_product_firmware_version+0xc>)
   e4644:	681b      	ldr	r3, [r3, #0]
   e4646:	689b      	ldr	r3, [r3, #8]
   e4648:	9301      	str	r3, [sp, #4]
   e464a:	bd08      	pop	{r3, pc}
   e464c:	0003025c 	.word	0x0003025c

000e4650 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   e4650:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   e4652:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   e4654:	d902      	bls.n	e465c <pinAvailable+0xc>
    return false;
   e4656:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   e4658:	b002      	add	sp, #8
   e465a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   e465c:	f1a0 030b 	sub.w	r3, r0, #11
   e4660:	2b02      	cmp	r3, #2
   e4662:	d81a      	bhi.n	e469a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   e4664:	4c17      	ldr	r4, [pc, #92]	; (e46c4 <pinAvailable+0x74>)
   e4666:	7821      	ldrb	r1, [r4, #0]
   e4668:	f3bf 8f5b 	dmb	ish
   e466c:	f011 0101 	ands.w	r1, r1, #1
   e4670:	d10b      	bne.n	e468a <pinAvailable+0x3a>
   e4672:	4620      	mov	r0, r4
   e4674:	9101      	str	r1, [sp, #4]
   e4676:	f7ef fd21 	bl	d40bc <__cxa_guard_acquire>
   e467a:	9901      	ldr	r1, [sp, #4]
   e467c:	b128      	cbz	r0, e468a <pinAvailable+0x3a>
   e467e:	4812      	ldr	r0, [pc, #72]	; (e46c8 <pinAvailable+0x78>)
   e4680:	f7ff f944 	bl	e390c <_ZN8SPIClassC1E19hal_spi_interface_t>
   e4684:	4620      	mov	r0, r4
   e4686:	f7ef fd1e 	bl	d40c6 <__cxa_guard_release>
   e468a:	4b0f      	ldr	r3, [pc, #60]	; (e46c8 <pinAvailable+0x78>)
   e468c:	7818      	ldrb	r0, [r3, #0]
   e468e:	f7fc fc51 	bl	e0f34 <hal_spi_is_enabled>
   e4692:	2800      	cmp	r0, #0
   e4694:	d1df      	bne.n	e4656 <pinAvailable+0x6>
  return true; // 'pin' is available
   e4696:	2001      	movs	r0, #1
   e4698:	e7de      	b.n	e4658 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   e469a:	2801      	cmp	r0, #1
   e469c:	d809      	bhi.n	e46b2 <pinAvailable+0x62>
   e469e:	f000 f89d 	bl	e47dc <_Z19__fetch_global_Wirev>
   e46a2:	2100      	movs	r1, #0
   e46a4:	7c00      	ldrb	r0, [r0, #16]
   e46a6:	f7fc fbed 	bl	e0e84 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   e46aa:	f080 0001 	eor.w	r0, r0, #1
   e46ae:	b2c0      	uxtb	r0, r0
   e46b0:	e7d2      	b.n	e4658 <pinAvailable+0x8>
   e46b2:	3809      	subs	r0, #9
   e46b4:	2801      	cmp	r0, #1
   e46b6:	d8ee      	bhi.n	e4696 <pinAvailable+0x46>
   e46b8:	f7ff fdce 	bl	e4258 <_Z22__fetch_global_Serial1v>
   e46bc:	7c00      	ldrb	r0, [r0, #16]
   e46be:	f7fc fca9 	bl	e1014 <hal_usart_is_enabled>
   e46c2:	e7f2      	b.n	e46aa <pinAvailable+0x5a>
   e46c4:	2003d9fc 	.word	0x2003d9fc
   e46c8:	2003da00 	.word	0x2003da00

000e46cc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   e46cc:	2823      	cmp	r0, #35	; 0x23
{
   e46ce:	b538      	push	{r3, r4, r5, lr}
   e46d0:	4604      	mov	r4, r0
   e46d2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   e46d4:	d80a      	bhi.n	e46ec <pinMode+0x20>
   e46d6:	29ff      	cmp	r1, #255	; 0xff
   e46d8:	d008      	beq.n	e46ec <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   e46da:	f7ff ffb9 	bl	e4650 <pinAvailable>
   e46de:	b128      	cbz	r0, e46ec <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   e46e0:	4629      	mov	r1, r5
   e46e2:	4620      	mov	r0, r4
}
   e46e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   e46e8:	f7fc bb5c 	b.w	e0da4 <HAL_Pin_Mode>
}
   e46ec:	bd38      	pop	{r3, r4, r5, pc}

000e46ee <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   e46ee:	b538      	push	{r3, r4, r5, lr}
   e46f0:	4604      	mov	r4, r0
   e46f2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   e46f4:	f7fc fb5e 	bl	e0db4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   e46f8:	28ff      	cmp	r0, #255	; 0xff
   e46fa:	d010      	beq.n	e471e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   e46fc:	2806      	cmp	r0, #6
   e46fe:	d804      	bhi.n	e470a <digitalWrite+0x1c>
   e4700:	234d      	movs	r3, #77	; 0x4d
   e4702:	fa23 f000 	lsr.w	r0, r3, r0
   e4706:	07c3      	lsls	r3, r0, #31
   e4708:	d409      	bmi.n	e471e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   e470a:	4620      	mov	r0, r4
   e470c:	f7ff ffa0 	bl	e4650 <pinAvailable>
   e4710:	b128      	cbz	r0, e471e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   e4712:	4629      	mov	r1, r5
   e4714:	4620      	mov	r0, r4
}
   e4716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   e471a:	f7fc bb53 	b.w	e0dc4 <HAL_GPIO_Write>
}
   e471e:	bd38      	pop	{r3, r4, r5, pc}

000e4720 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   e4720:	280d      	cmp	r0, #13
{
   e4722:	b510      	push	{r4, lr}
   e4724:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   e4726:	bf9c      	itt	ls
   e4728:	340e      	addls	r4, #14
   e472a:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   e472c:	4620      	mov	r0, r4
   e472e:	f7ff ff8f 	bl	e4650 <pinAvailable>
   e4732:	b150      	cbz	r0, e474a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   e4734:	2103      	movs	r1, #3
   e4736:	4620      	mov	r0, r4
   e4738:	f7fc fb2c 	bl	e0d94 <HAL_Validate_Pin_Function>
   e473c:	2803      	cmp	r0, #3
   e473e:	d104      	bne.n	e474a <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   e4740:	4620      	mov	r0, r4
}
   e4742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   e4746:	f7fc bb55 	b.w	e0df4 <hal_adc_read>
}
   e474a:	2000      	movs	r0, #0
   e474c:	bd10      	pop	{r4, pc}
	...

000e4750 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   e4750:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   e4752:	4c08      	ldr	r4, [pc, #32]	; (e4774 <_Z21__fetch_global_EEPROMv+0x24>)
   e4754:	7823      	ldrb	r3, [r4, #0]
   e4756:	f3bf 8f5b 	dmb	ish
   e475a:	07db      	lsls	r3, r3, #31
   e475c:	d408      	bmi.n	e4770 <_Z21__fetch_global_EEPROMv+0x20>
   e475e:	4620      	mov	r0, r4
   e4760:	f7ef fcac 	bl	d40bc <__cxa_guard_acquire>
   e4764:	b120      	cbz	r0, e4770 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   e4766:	f7fc fae5 	bl	e0d34 <HAL_EEPROM_Init>
   e476a:	4620      	mov	r0, r4
   e476c:	f7ef fcab 	bl	d40c6 <__cxa_guard_release>
	return eeprom;
}
   e4770:	4801      	ldr	r0, [pc, #4]	; (e4778 <_Z21__fetch_global_EEPROMv+0x28>)
   e4772:	bd10      	pop	{r4, pc}
   e4774:	2003e7b8 	.word	0x2003e7b8
   e4778:	2003e7bc 	.word	0x2003e7bc

000e477c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   e477c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   e477e:	2300      	movs	r3, #0
   e4780:	2520      	movs	r5, #32
   e4782:	8043      	strh	r3, [r0, #2]
   e4784:	2314      	movs	r3, #20
{
   e4786:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   e4788:	8003      	strh	r3, [r0, #0]
   e478a:	6085      	str	r5, [r0, #8]
   e478c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   e478e:	4906      	ldr	r1, [pc, #24]	; (e47a8 <_Z17acquireWireBufferv+0x2c>)
   e4790:	4628      	mov	r0, r5
   e4792:	f000 f87c 	bl	e488e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   e4796:	4904      	ldr	r1, [pc, #16]	; (e47a8 <_Z17acquireWireBufferv+0x2c>)
	};
   e4798:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   e479a:	4628      	mov	r0, r5
   e479c:	f000 f877 	bl	e488e <_ZnajRKSt9nothrow_t>
	};
   e47a0:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   e47a2:	4620      	mov	r0, r4
   e47a4:	bd38      	pop	{r3, r4, r5, pc}
   e47a6:	bf00      	nop
   e47a8:	000e89c8 	.word	0x000e89c8

000e47ac <_Z18acquireWire1Bufferv>:
   e47ac:	b538      	push	{r3, r4, r5, lr}
   e47ae:	2300      	movs	r3, #0
   e47b0:	2520      	movs	r5, #32
   e47b2:	8043      	strh	r3, [r0, #2]
   e47b4:	2314      	movs	r3, #20
   e47b6:	4604      	mov	r4, r0
   e47b8:	8003      	strh	r3, [r0, #0]
   e47ba:	6085      	str	r5, [r0, #8]
   e47bc:	6105      	str	r5, [r0, #16]
   e47be:	4906      	ldr	r1, [pc, #24]	; (e47d8 <_Z18acquireWire1Bufferv+0x2c>)
   e47c0:	4628      	mov	r0, r5
   e47c2:	f000 f864 	bl	e488e <_ZnajRKSt9nothrow_t>
   e47c6:	4904      	ldr	r1, [pc, #16]	; (e47d8 <_Z18acquireWire1Bufferv+0x2c>)
   e47c8:	6060      	str	r0, [r4, #4]
   e47ca:	4628      	mov	r0, r5
   e47cc:	f000 f85f 	bl	e488e <_ZnajRKSt9nothrow_t>
   e47d0:	60e0      	str	r0, [r4, #12]
   e47d2:	4620      	mov	r0, r4
   e47d4:	bd38      	pop	{r3, r4, r5, pc}
   e47d6:	bf00      	nop
   e47d8:	000e89c8 	.word	0x000e89c8

000e47dc <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   e47dc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   e47de:	4d0f      	ldr	r5, [pc, #60]	; (e481c <_Z19__fetch_global_Wirev+0x40>)
   e47e0:	7829      	ldrb	r1, [r5, #0]
   e47e2:	f3bf 8f5b 	dmb	ish
   e47e6:	f011 0401 	ands.w	r4, r1, #1
{
   e47ea:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   e47ec:	d113      	bne.n	e4816 <_Z19__fetch_global_Wirev+0x3a>
   e47ee:	4628      	mov	r0, r5
   e47f0:	f7ef fc64 	bl	d40bc <__cxa_guard_acquire>
   e47f4:	b178      	cbz	r0, e4816 <_Z19__fetch_global_Wirev+0x3a>
   e47f6:	a801      	add	r0, sp, #4
   e47f8:	f7ff ffc0 	bl	e477c <_Z17acquireWireBufferv>
   e47fc:	aa01      	add	r2, sp, #4
   e47fe:	4621      	mov	r1, r4
   e4800:	4807      	ldr	r0, [pc, #28]	; (e4820 <_Z19__fetch_global_Wirev+0x44>)
   e4802:	f7fd fb65 	bl	e1ed0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   e4806:	4628      	mov	r0, r5
   e4808:	f7ef fc5d 	bl	d40c6 <__cxa_guard_release>
   e480c:	4a05      	ldr	r2, [pc, #20]	; (e4824 <_Z19__fetch_global_Wirev+0x48>)
   e480e:	4906      	ldr	r1, [pc, #24]	; (e4828 <_Z19__fetch_global_Wirev+0x4c>)
   e4810:	4803      	ldr	r0, [pc, #12]	; (e4820 <_Z19__fetch_global_Wirev+0x44>)
   e4812:	f000 f833 	bl	e487c <__aeabi_atexit>
	return wire;
}
   e4816:	4802      	ldr	r0, [pc, #8]	; (e4820 <_Z19__fetch_global_Wirev+0x44>)
   e4818:	b007      	add	sp, #28
   e481a:	bd30      	pop	{r4, r5, pc}
   e481c:	2003e7c0 	.word	0x2003e7c0
   e4820:	2003e7c8 	.word	0x2003e7c8
   e4824:	2003d9f8 	.word	0x2003d9f8
   e4828:	000e1e79 	.word	0x000e1e79

000e482c <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   e482c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   e482e:	4c0f      	ldr	r4, [pc, #60]	; (e486c <_Z20__fetch_global_Wire1v+0x40>)
   e4830:	7823      	ldrb	r3, [r4, #0]
   e4832:	f3bf 8f5b 	dmb	ish
   e4836:	07db      	lsls	r3, r3, #31
{
   e4838:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   e483a:	d413      	bmi.n	e4864 <_Z20__fetch_global_Wire1v+0x38>
   e483c:	4620      	mov	r0, r4
   e483e:	f7ef fc3d 	bl	d40bc <__cxa_guard_acquire>
   e4842:	b178      	cbz	r0, e4864 <_Z20__fetch_global_Wire1v+0x38>
   e4844:	a801      	add	r0, sp, #4
   e4846:	f7ff ffb1 	bl	e47ac <_Z18acquireWire1Bufferv>
   e484a:	aa01      	add	r2, sp, #4
   e484c:	2101      	movs	r1, #1
   e484e:	4808      	ldr	r0, [pc, #32]	; (e4870 <_Z20__fetch_global_Wire1v+0x44>)
   e4850:	f7fd fb3e 	bl	e1ed0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   e4854:	4620      	mov	r0, r4
   e4856:	f7ef fc36 	bl	d40c6 <__cxa_guard_release>
   e485a:	4a06      	ldr	r2, [pc, #24]	; (e4874 <_Z20__fetch_global_Wire1v+0x48>)
   e485c:	4906      	ldr	r1, [pc, #24]	; (e4878 <_Z20__fetch_global_Wire1v+0x4c>)
   e485e:	4804      	ldr	r0, [pc, #16]	; (e4870 <_Z20__fetch_global_Wire1v+0x44>)
   e4860:	f000 f80c 	bl	e487c <__aeabi_atexit>
	return wire;
}
   e4864:	4802      	ldr	r0, [pc, #8]	; (e4870 <_Z20__fetch_global_Wire1v+0x44>)
   e4866:	b006      	add	sp, #24
   e4868:	bd10      	pop	{r4, pc}
   e486a:	bf00      	nop
   e486c:	2003e7c4 	.word	0x2003e7c4
   e4870:	2003e7dc 	.word	0x2003e7dc
   e4874:	2003d9f8 	.word	0x2003d9f8
   e4878:	000e1e79 	.word	0x000e1e79

000e487c <__aeabi_atexit>:
   e487c:	460b      	mov	r3, r1
   e487e:	4601      	mov	r1, r0
   e4880:	4618      	mov	r0, r3
   e4882:	f000 becb 	b.w	e561c <__cxa_atexit>

000e4886 <_ZdlPvj>:
   e4886:	f7ef bc0a 	b.w	d409e <_ZdlPv>

000e488a <_ZnwjRKSt9nothrow_t>:
   e488a:	f7ef bc04 	b.w	d4096 <_Znwj>

000e488e <_ZnajRKSt9nothrow_t>:
   e488e:	f7ef bc04 	b.w	d409a <_Znaj>

000e4892 <_ZSt25__throw_bad_function_callv>:
   e4892:	b508      	push	{r3, lr}
   e4894:	f7fc fd8c 	bl	e13b0 <abort>

000e4898 <sqrtf>:
   e4898:	b510      	push	{r4, lr}
   e489a:	ed2d 8b02 	vpush	{d8}
   e489e:	b08a      	sub	sp, #40	; 0x28
   e48a0:	eeb0 8a40 	vmov.f32	s16, s0
   e48a4:	f000 f850 	bl	e4948 <__ieee754_sqrtf>
   e48a8:	4b25      	ldr	r3, [pc, #148]	; (e4940 <sqrtf+0xa8>)
   e48aa:	f993 4000 	ldrsb.w	r4, [r3]
   e48ae:	1c63      	adds	r3, r4, #1
   e48b0:	d009      	beq.n	e48c6 <sqrtf+0x2e>
   e48b2:	eeb4 8a48 	vcmp.f32	s16, s16
   e48b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   e48ba:	d604      	bvs.n	e48c6 <sqrtf+0x2e>
   e48bc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   e48c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   e48c4:	d403      	bmi.n	e48ce <sqrtf+0x36>
   e48c6:	b00a      	add	sp, #40	; 0x28
   e48c8:	ecbd 8b02 	vpop	{d8}
   e48cc:	bd10      	pop	{r4, pc}
   e48ce:	2301      	movs	r3, #1
   e48d0:	4a1c      	ldr	r2, [pc, #112]	; (e4944 <sqrtf+0xac>)
   e48d2:	9300      	str	r3, [sp, #0]
   e48d4:	ee18 0a10 	vmov	r0, s16
   e48d8:	2300      	movs	r3, #0
   e48da:	9201      	str	r2, [sp, #4]
   e48dc:	9308      	str	r3, [sp, #32]
   e48de:	f000 f99d 	bl	e4c1c <__aeabi_f2d>
   e48e2:	2200      	movs	r2, #0
   e48e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
   e48e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e48ec:	2300      	movs	r3, #0
   e48ee:	b1bc      	cbz	r4, e4920 <sqrtf+0x88>
   e48f0:	4610      	mov	r0, r2
   e48f2:	4619      	mov	r1, r3
   e48f4:	f000 fb14 	bl	e4f20 <__aeabi_ddiv>
   e48f8:	2c02      	cmp	r4, #2
   e48fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
   e48fe:	d111      	bne.n	e4924 <sqrtf+0x8c>
   e4900:	f7fc fd66 	bl	e13d0 <__errno>
   e4904:	2321      	movs	r3, #33	; 0x21
   e4906:	6003      	str	r3, [r0, #0]
   e4908:	9b08      	ldr	r3, [sp, #32]
   e490a:	b99b      	cbnz	r3, e4934 <sqrtf+0x9c>
   e490c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e4910:	f000 fc96 	bl	e5240 <__aeabi_d2f>
   e4914:	ee00 0a10 	vmov	s0, r0
   e4918:	b00a      	add	sp, #40	; 0x28
   e491a:	ecbd 8b02 	vpop	{d8}
   e491e:	bd10      	pop	{r4, pc}
   e4920:	e9cd 2306 	strd	r2, r3, [sp, #24]
   e4924:	4668      	mov	r0, sp
   e4926:	f000 f813 	bl	e4950 <matherr>
   e492a:	2800      	cmp	r0, #0
   e492c:	d0e8      	beq.n	e4900 <sqrtf+0x68>
   e492e:	9b08      	ldr	r3, [sp, #32]
   e4930:	2b00      	cmp	r3, #0
   e4932:	d0eb      	beq.n	e490c <sqrtf+0x74>
   e4934:	f7fc fd4c 	bl	e13d0 <__errno>
   e4938:	9b08      	ldr	r3, [sp, #32]
   e493a:	6003      	str	r3, [r0, #0]
   e493c:	e7e6      	b.n	e490c <sqrtf+0x74>
   e493e:	bf00      	nop
   e4940:	2003d990 	.word	0x2003d990
   e4944:	000e89cc 	.word	0x000e89cc

000e4948 <__ieee754_sqrtf>:
   e4948:	eeb1 0ac0 	vsqrt.f32	s0, s0
   e494c:	4770      	bx	lr
   e494e:	bf00      	nop

000e4950 <matherr>:
   e4950:	2000      	movs	r0, #0
   e4952:	4770      	bx	lr

000e4954 <__aeabi_drsub>:
   e4954:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   e4958:	e002      	b.n	e4960 <__adddf3>
   e495a:	bf00      	nop

000e495c <__aeabi_dsub>:
   e495c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000e4960 <__adddf3>:
   e4960:	b530      	push	{r4, r5, lr}
   e4962:	ea4f 0441 	mov.w	r4, r1, lsl #1
   e4966:	ea4f 0543 	mov.w	r5, r3, lsl #1
   e496a:	ea94 0f05 	teq	r4, r5
   e496e:	bf08      	it	eq
   e4970:	ea90 0f02 	teqeq	r0, r2
   e4974:	bf1f      	itttt	ne
   e4976:	ea54 0c00 	orrsne.w	ip, r4, r0
   e497a:	ea55 0c02 	orrsne.w	ip, r5, r2
   e497e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   e4982:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e4986:	f000 80e2 	beq.w	e4b4e <__adddf3+0x1ee>
   e498a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   e498e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   e4992:	bfb8      	it	lt
   e4994:	426d      	neglt	r5, r5
   e4996:	dd0c      	ble.n	e49b2 <__adddf3+0x52>
   e4998:	442c      	add	r4, r5
   e499a:	ea80 0202 	eor.w	r2, r0, r2
   e499e:	ea81 0303 	eor.w	r3, r1, r3
   e49a2:	ea82 0000 	eor.w	r0, r2, r0
   e49a6:	ea83 0101 	eor.w	r1, r3, r1
   e49aa:	ea80 0202 	eor.w	r2, r0, r2
   e49ae:	ea81 0303 	eor.w	r3, r1, r3
   e49b2:	2d36      	cmp	r5, #54	; 0x36
   e49b4:	bf88      	it	hi
   e49b6:	bd30      	pophi	{r4, r5, pc}
   e49b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e49bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e49c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   e49c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   e49c8:	d002      	beq.n	e49d0 <__adddf3+0x70>
   e49ca:	4240      	negs	r0, r0
   e49cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e49d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   e49d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e49d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   e49dc:	d002      	beq.n	e49e4 <__adddf3+0x84>
   e49de:	4252      	negs	r2, r2
   e49e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   e49e4:	ea94 0f05 	teq	r4, r5
   e49e8:	f000 80a7 	beq.w	e4b3a <__adddf3+0x1da>
   e49ec:	f1a4 0401 	sub.w	r4, r4, #1
   e49f0:	f1d5 0e20 	rsbs	lr, r5, #32
   e49f4:	db0d      	blt.n	e4a12 <__adddf3+0xb2>
   e49f6:	fa02 fc0e 	lsl.w	ip, r2, lr
   e49fa:	fa22 f205 	lsr.w	r2, r2, r5
   e49fe:	1880      	adds	r0, r0, r2
   e4a00:	f141 0100 	adc.w	r1, r1, #0
   e4a04:	fa03 f20e 	lsl.w	r2, r3, lr
   e4a08:	1880      	adds	r0, r0, r2
   e4a0a:	fa43 f305 	asr.w	r3, r3, r5
   e4a0e:	4159      	adcs	r1, r3
   e4a10:	e00e      	b.n	e4a30 <__adddf3+0xd0>
   e4a12:	f1a5 0520 	sub.w	r5, r5, #32
   e4a16:	f10e 0e20 	add.w	lr, lr, #32
   e4a1a:	2a01      	cmp	r2, #1
   e4a1c:	fa03 fc0e 	lsl.w	ip, r3, lr
   e4a20:	bf28      	it	cs
   e4a22:	f04c 0c02 	orrcs.w	ip, ip, #2
   e4a26:	fa43 f305 	asr.w	r3, r3, r5
   e4a2a:	18c0      	adds	r0, r0, r3
   e4a2c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   e4a30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e4a34:	d507      	bpl.n	e4a46 <__adddf3+0xe6>
   e4a36:	f04f 0e00 	mov.w	lr, #0
   e4a3a:	f1dc 0c00 	rsbs	ip, ip, #0
   e4a3e:	eb7e 0000 	sbcs.w	r0, lr, r0
   e4a42:	eb6e 0101 	sbc.w	r1, lr, r1
   e4a46:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   e4a4a:	d31b      	bcc.n	e4a84 <__adddf3+0x124>
   e4a4c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   e4a50:	d30c      	bcc.n	e4a6c <__adddf3+0x10c>
   e4a52:	0849      	lsrs	r1, r1, #1
   e4a54:	ea5f 0030 	movs.w	r0, r0, rrx
   e4a58:	ea4f 0c3c 	mov.w	ip, ip, rrx
   e4a5c:	f104 0401 	add.w	r4, r4, #1
   e4a60:	ea4f 5244 	mov.w	r2, r4, lsl #21
   e4a64:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   e4a68:	f080 809a 	bcs.w	e4ba0 <__adddf3+0x240>
   e4a6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   e4a70:	bf08      	it	eq
   e4a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e4a76:	f150 0000 	adcs.w	r0, r0, #0
   e4a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e4a7e:	ea41 0105 	orr.w	r1, r1, r5
   e4a82:	bd30      	pop	{r4, r5, pc}
   e4a84:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   e4a88:	4140      	adcs	r0, r0
   e4a8a:	eb41 0101 	adc.w	r1, r1, r1
   e4a8e:	3c01      	subs	r4, #1
   e4a90:	bf28      	it	cs
   e4a92:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   e4a96:	d2e9      	bcs.n	e4a6c <__adddf3+0x10c>
   e4a98:	f091 0f00 	teq	r1, #0
   e4a9c:	bf04      	itt	eq
   e4a9e:	4601      	moveq	r1, r0
   e4aa0:	2000      	moveq	r0, #0
   e4aa2:	fab1 f381 	clz	r3, r1
   e4aa6:	bf08      	it	eq
   e4aa8:	3320      	addeq	r3, #32
   e4aaa:	f1a3 030b 	sub.w	r3, r3, #11
   e4aae:	f1b3 0220 	subs.w	r2, r3, #32
   e4ab2:	da0c      	bge.n	e4ace <__adddf3+0x16e>
   e4ab4:	320c      	adds	r2, #12
   e4ab6:	dd08      	ble.n	e4aca <__adddf3+0x16a>
   e4ab8:	f102 0c14 	add.w	ip, r2, #20
   e4abc:	f1c2 020c 	rsb	r2, r2, #12
   e4ac0:	fa01 f00c 	lsl.w	r0, r1, ip
   e4ac4:	fa21 f102 	lsr.w	r1, r1, r2
   e4ac8:	e00c      	b.n	e4ae4 <__adddf3+0x184>
   e4aca:	f102 0214 	add.w	r2, r2, #20
   e4ace:	bfd8      	it	le
   e4ad0:	f1c2 0c20 	rsble	ip, r2, #32
   e4ad4:	fa01 f102 	lsl.w	r1, r1, r2
   e4ad8:	fa20 fc0c 	lsr.w	ip, r0, ip
   e4adc:	bfdc      	itt	le
   e4ade:	ea41 010c 	orrle.w	r1, r1, ip
   e4ae2:	4090      	lslle	r0, r2
   e4ae4:	1ae4      	subs	r4, r4, r3
   e4ae6:	bfa2      	ittt	ge
   e4ae8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   e4aec:	4329      	orrge	r1, r5
   e4aee:	bd30      	popge	{r4, r5, pc}
   e4af0:	ea6f 0404 	mvn.w	r4, r4
   e4af4:	3c1f      	subs	r4, #31
   e4af6:	da1c      	bge.n	e4b32 <__adddf3+0x1d2>
   e4af8:	340c      	adds	r4, #12
   e4afa:	dc0e      	bgt.n	e4b1a <__adddf3+0x1ba>
   e4afc:	f104 0414 	add.w	r4, r4, #20
   e4b00:	f1c4 0220 	rsb	r2, r4, #32
   e4b04:	fa20 f004 	lsr.w	r0, r0, r4
   e4b08:	fa01 f302 	lsl.w	r3, r1, r2
   e4b0c:	ea40 0003 	orr.w	r0, r0, r3
   e4b10:	fa21 f304 	lsr.w	r3, r1, r4
   e4b14:	ea45 0103 	orr.w	r1, r5, r3
   e4b18:	bd30      	pop	{r4, r5, pc}
   e4b1a:	f1c4 040c 	rsb	r4, r4, #12
   e4b1e:	f1c4 0220 	rsb	r2, r4, #32
   e4b22:	fa20 f002 	lsr.w	r0, r0, r2
   e4b26:	fa01 f304 	lsl.w	r3, r1, r4
   e4b2a:	ea40 0003 	orr.w	r0, r0, r3
   e4b2e:	4629      	mov	r1, r5
   e4b30:	bd30      	pop	{r4, r5, pc}
   e4b32:	fa21 f004 	lsr.w	r0, r1, r4
   e4b36:	4629      	mov	r1, r5
   e4b38:	bd30      	pop	{r4, r5, pc}
   e4b3a:	f094 0f00 	teq	r4, #0
   e4b3e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   e4b42:	bf06      	itte	eq
   e4b44:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   e4b48:	3401      	addeq	r4, #1
   e4b4a:	3d01      	subne	r5, #1
   e4b4c:	e74e      	b.n	e49ec <__adddf3+0x8c>
   e4b4e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e4b52:	bf18      	it	ne
   e4b54:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e4b58:	d029      	beq.n	e4bae <__adddf3+0x24e>
   e4b5a:	ea94 0f05 	teq	r4, r5
   e4b5e:	bf08      	it	eq
   e4b60:	ea90 0f02 	teqeq	r0, r2
   e4b64:	d005      	beq.n	e4b72 <__adddf3+0x212>
   e4b66:	ea54 0c00 	orrs.w	ip, r4, r0
   e4b6a:	bf04      	itt	eq
   e4b6c:	4619      	moveq	r1, r3
   e4b6e:	4610      	moveq	r0, r2
   e4b70:	bd30      	pop	{r4, r5, pc}
   e4b72:	ea91 0f03 	teq	r1, r3
   e4b76:	bf1e      	ittt	ne
   e4b78:	2100      	movne	r1, #0
   e4b7a:	2000      	movne	r0, #0
   e4b7c:	bd30      	popne	{r4, r5, pc}
   e4b7e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   e4b82:	d105      	bne.n	e4b90 <__adddf3+0x230>
   e4b84:	0040      	lsls	r0, r0, #1
   e4b86:	4149      	adcs	r1, r1
   e4b88:	bf28      	it	cs
   e4b8a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   e4b8e:	bd30      	pop	{r4, r5, pc}
   e4b90:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   e4b94:	bf3c      	itt	cc
   e4b96:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   e4b9a:	bd30      	popcc	{r4, r5, pc}
   e4b9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e4ba0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   e4ba4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e4ba8:	f04f 0000 	mov.w	r0, #0
   e4bac:	bd30      	pop	{r4, r5, pc}
   e4bae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e4bb2:	bf1a      	itte	ne
   e4bb4:	4619      	movne	r1, r3
   e4bb6:	4610      	movne	r0, r2
   e4bb8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   e4bbc:	bf1c      	itt	ne
   e4bbe:	460b      	movne	r3, r1
   e4bc0:	4602      	movne	r2, r0
   e4bc2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e4bc6:	bf06      	itte	eq
   e4bc8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   e4bcc:	ea91 0f03 	teqeq	r1, r3
   e4bd0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   e4bd4:	bd30      	pop	{r4, r5, pc}
   e4bd6:	bf00      	nop

000e4bd8 <__aeabi_ui2d>:
   e4bd8:	f090 0f00 	teq	r0, #0
   e4bdc:	bf04      	itt	eq
   e4bde:	2100      	moveq	r1, #0
   e4be0:	4770      	bxeq	lr
   e4be2:	b530      	push	{r4, r5, lr}
   e4be4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e4be8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e4bec:	f04f 0500 	mov.w	r5, #0
   e4bf0:	f04f 0100 	mov.w	r1, #0
   e4bf4:	e750      	b.n	e4a98 <__adddf3+0x138>
   e4bf6:	bf00      	nop

000e4bf8 <__aeabi_i2d>:
   e4bf8:	f090 0f00 	teq	r0, #0
   e4bfc:	bf04      	itt	eq
   e4bfe:	2100      	moveq	r1, #0
   e4c00:	4770      	bxeq	lr
   e4c02:	b530      	push	{r4, r5, lr}
   e4c04:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e4c08:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e4c0c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   e4c10:	bf48      	it	mi
   e4c12:	4240      	negmi	r0, r0
   e4c14:	f04f 0100 	mov.w	r1, #0
   e4c18:	e73e      	b.n	e4a98 <__adddf3+0x138>
   e4c1a:	bf00      	nop

000e4c1c <__aeabi_f2d>:
   e4c1c:	0042      	lsls	r2, r0, #1
   e4c1e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   e4c22:	ea4f 0131 	mov.w	r1, r1, rrx
   e4c26:	ea4f 7002 	mov.w	r0, r2, lsl #28
   e4c2a:	bf1f      	itttt	ne
   e4c2c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   e4c30:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e4c34:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   e4c38:	4770      	bxne	lr
   e4c3a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   e4c3e:	bf08      	it	eq
   e4c40:	4770      	bxeq	lr
   e4c42:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   e4c46:	bf04      	itt	eq
   e4c48:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   e4c4c:	4770      	bxeq	lr
   e4c4e:	b530      	push	{r4, r5, lr}
   e4c50:	f44f 7460 	mov.w	r4, #896	; 0x380
   e4c54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e4c58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e4c5c:	e71c      	b.n	e4a98 <__adddf3+0x138>
   e4c5e:	bf00      	nop

000e4c60 <__aeabi_ul2d>:
   e4c60:	ea50 0201 	orrs.w	r2, r0, r1
   e4c64:	bf08      	it	eq
   e4c66:	4770      	bxeq	lr
   e4c68:	b530      	push	{r4, r5, lr}
   e4c6a:	f04f 0500 	mov.w	r5, #0
   e4c6e:	e00a      	b.n	e4c86 <__aeabi_l2d+0x16>

000e4c70 <__aeabi_l2d>:
   e4c70:	ea50 0201 	orrs.w	r2, r0, r1
   e4c74:	bf08      	it	eq
   e4c76:	4770      	bxeq	lr
   e4c78:	b530      	push	{r4, r5, lr}
   e4c7a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   e4c7e:	d502      	bpl.n	e4c86 <__aeabi_l2d+0x16>
   e4c80:	4240      	negs	r0, r0
   e4c82:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e4c86:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e4c8a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e4c8e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   e4c92:	f43f aed8 	beq.w	e4a46 <__adddf3+0xe6>
   e4c96:	f04f 0203 	mov.w	r2, #3
   e4c9a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e4c9e:	bf18      	it	ne
   e4ca0:	3203      	addne	r2, #3
   e4ca2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e4ca6:	bf18      	it	ne
   e4ca8:	3203      	addne	r2, #3
   e4caa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   e4cae:	f1c2 0320 	rsb	r3, r2, #32
   e4cb2:	fa00 fc03 	lsl.w	ip, r0, r3
   e4cb6:	fa20 f002 	lsr.w	r0, r0, r2
   e4cba:	fa01 fe03 	lsl.w	lr, r1, r3
   e4cbe:	ea40 000e 	orr.w	r0, r0, lr
   e4cc2:	fa21 f102 	lsr.w	r1, r1, r2
   e4cc6:	4414      	add	r4, r2
   e4cc8:	e6bd      	b.n	e4a46 <__adddf3+0xe6>
   e4cca:	bf00      	nop

000e4ccc <__aeabi_dmul>:
   e4ccc:	b570      	push	{r4, r5, r6, lr}
   e4cce:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e4cd2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e4cd6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e4cda:	bf1d      	ittte	ne
   e4cdc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e4ce0:	ea94 0f0c 	teqne	r4, ip
   e4ce4:	ea95 0f0c 	teqne	r5, ip
   e4ce8:	f000 f8de 	bleq	e4ea8 <__aeabi_dmul+0x1dc>
   e4cec:	442c      	add	r4, r5
   e4cee:	ea81 0603 	eor.w	r6, r1, r3
   e4cf2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   e4cf6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   e4cfa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   e4cfe:	bf18      	it	ne
   e4d00:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   e4d04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e4d08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e4d0c:	d038      	beq.n	e4d80 <__aeabi_dmul+0xb4>
   e4d0e:	fba0 ce02 	umull	ip, lr, r0, r2
   e4d12:	f04f 0500 	mov.w	r5, #0
   e4d16:	fbe1 e502 	umlal	lr, r5, r1, r2
   e4d1a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   e4d1e:	fbe0 e503 	umlal	lr, r5, r0, r3
   e4d22:	f04f 0600 	mov.w	r6, #0
   e4d26:	fbe1 5603 	umlal	r5, r6, r1, r3
   e4d2a:	f09c 0f00 	teq	ip, #0
   e4d2e:	bf18      	it	ne
   e4d30:	f04e 0e01 	orrne.w	lr, lr, #1
   e4d34:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   e4d38:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   e4d3c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   e4d40:	d204      	bcs.n	e4d4c <__aeabi_dmul+0x80>
   e4d42:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   e4d46:	416d      	adcs	r5, r5
   e4d48:	eb46 0606 	adc.w	r6, r6, r6
   e4d4c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   e4d50:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   e4d54:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   e4d58:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   e4d5c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   e4d60:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e4d64:	bf88      	it	hi
   e4d66:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e4d6a:	d81e      	bhi.n	e4daa <__aeabi_dmul+0xde>
   e4d6c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   e4d70:	bf08      	it	eq
   e4d72:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   e4d76:	f150 0000 	adcs.w	r0, r0, #0
   e4d7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e4d7e:	bd70      	pop	{r4, r5, r6, pc}
   e4d80:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   e4d84:	ea46 0101 	orr.w	r1, r6, r1
   e4d88:	ea40 0002 	orr.w	r0, r0, r2
   e4d8c:	ea81 0103 	eor.w	r1, r1, r3
   e4d90:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   e4d94:	bfc2      	ittt	gt
   e4d96:	ebd4 050c 	rsbsgt	r5, r4, ip
   e4d9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e4d9e:	bd70      	popgt	{r4, r5, r6, pc}
   e4da0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e4da4:	f04f 0e00 	mov.w	lr, #0
   e4da8:	3c01      	subs	r4, #1
   e4daa:	f300 80ab 	bgt.w	e4f04 <__aeabi_dmul+0x238>
   e4dae:	f114 0f36 	cmn.w	r4, #54	; 0x36
   e4db2:	bfde      	ittt	le
   e4db4:	2000      	movle	r0, #0
   e4db6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   e4dba:	bd70      	pople	{r4, r5, r6, pc}
   e4dbc:	f1c4 0400 	rsb	r4, r4, #0
   e4dc0:	3c20      	subs	r4, #32
   e4dc2:	da35      	bge.n	e4e30 <__aeabi_dmul+0x164>
   e4dc4:	340c      	adds	r4, #12
   e4dc6:	dc1b      	bgt.n	e4e00 <__aeabi_dmul+0x134>
   e4dc8:	f104 0414 	add.w	r4, r4, #20
   e4dcc:	f1c4 0520 	rsb	r5, r4, #32
   e4dd0:	fa00 f305 	lsl.w	r3, r0, r5
   e4dd4:	fa20 f004 	lsr.w	r0, r0, r4
   e4dd8:	fa01 f205 	lsl.w	r2, r1, r5
   e4ddc:	ea40 0002 	orr.w	r0, r0, r2
   e4de0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   e4de4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e4de8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e4dec:	fa21 f604 	lsr.w	r6, r1, r4
   e4df0:	eb42 0106 	adc.w	r1, r2, r6
   e4df4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e4df8:	bf08      	it	eq
   e4dfa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e4dfe:	bd70      	pop	{r4, r5, r6, pc}
   e4e00:	f1c4 040c 	rsb	r4, r4, #12
   e4e04:	f1c4 0520 	rsb	r5, r4, #32
   e4e08:	fa00 f304 	lsl.w	r3, r0, r4
   e4e0c:	fa20 f005 	lsr.w	r0, r0, r5
   e4e10:	fa01 f204 	lsl.w	r2, r1, r4
   e4e14:	ea40 0002 	orr.w	r0, r0, r2
   e4e18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e4e1c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e4e20:	f141 0100 	adc.w	r1, r1, #0
   e4e24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e4e28:	bf08      	it	eq
   e4e2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e4e2e:	bd70      	pop	{r4, r5, r6, pc}
   e4e30:	f1c4 0520 	rsb	r5, r4, #32
   e4e34:	fa00 f205 	lsl.w	r2, r0, r5
   e4e38:	ea4e 0e02 	orr.w	lr, lr, r2
   e4e3c:	fa20 f304 	lsr.w	r3, r0, r4
   e4e40:	fa01 f205 	lsl.w	r2, r1, r5
   e4e44:	ea43 0302 	orr.w	r3, r3, r2
   e4e48:	fa21 f004 	lsr.w	r0, r1, r4
   e4e4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e4e50:	fa21 f204 	lsr.w	r2, r1, r4
   e4e54:	ea20 0002 	bic.w	r0, r0, r2
   e4e58:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   e4e5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e4e60:	bf08      	it	eq
   e4e62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e4e66:	bd70      	pop	{r4, r5, r6, pc}
   e4e68:	f094 0f00 	teq	r4, #0
   e4e6c:	d10f      	bne.n	e4e8e <__aeabi_dmul+0x1c2>
   e4e6e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   e4e72:	0040      	lsls	r0, r0, #1
   e4e74:	eb41 0101 	adc.w	r1, r1, r1
   e4e78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e4e7c:	bf08      	it	eq
   e4e7e:	3c01      	subeq	r4, #1
   e4e80:	d0f7      	beq.n	e4e72 <__aeabi_dmul+0x1a6>
   e4e82:	ea41 0106 	orr.w	r1, r1, r6
   e4e86:	f095 0f00 	teq	r5, #0
   e4e8a:	bf18      	it	ne
   e4e8c:	4770      	bxne	lr
   e4e8e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   e4e92:	0052      	lsls	r2, r2, #1
   e4e94:	eb43 0303 	adc.w	r3, r3, r3
   e4e98:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   e4e9c:	bf08      	it	eq
   e4e9e:	3d01      	subeq	r5, #1
   e4ea0:	d0f7      	beq.n	e4e92 <__aeabi_dmul+0x1c6>
   e4ea2:	ea43 0306 	orr.w	r3, r3, r6
   e4ea6:	4770      	bx	lr
   e4ea8:	ea94 0f0c 	teq	r4, ip
   e4eac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e4eb0:	bf18      	it	ne
   e4eb2:	ea95 0f0c 	teqne	r5, ip
   e4eb6:	d00c      	beq.n	e4ed2 <__aeabi_dmul+0x206>
   e4eb8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e4ebc:	bf18      	it	ne
   e4ebe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e4ec2:	d1d1      	bne.n	e4e68 <__aeabi_dmul+0x19c>
   e4ec4:	ea81 0103 	eor.w	r1, r1, r3
   e4ec8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e4ecc:	f04f 0000 	mov.w	r0, #0
   e4ed0:	bd70      	pop	{r4, r5, r6, pc}
   e4ed2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e4ed6:	bf06      	itte	eq
   e4ed8:	4610      	moveq	r0, r2
   e4eda:	4619      	moveq	r1, r3
   e4edc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e4ee0:	d019      	beq.n	e4f16 <__aeabi_dmul+0x24a>
   e4ee2:	ea94 0f0c 	teq	r4, ip
   e4ee6:	d102      	bne.n	e4eee <__aeabi_dmul+0x222>
   e4ee8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   e4eec:	d113      	bne.n	e4f16 <__aeabi_dmul+0x24a>
   e4eee:	ea95 0f0c 	teq	r5, ip
   e4ef2:	d105      	bne.n	e4f00 <__aeabi_dmul+0x234>
   e4ef4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   e4ef8:	bf1c      	itt	ne
   e4efa:	4610      	movne	r0, r2
   e4efc:	4619      	movne	r1, r3
   e4efe:	d10a      	bne.n	e4f16 <__aeabi_dmul+0x24a>
   e4f00:	ea81 0103 	eor.w	r1, r1, r3
   e4f04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e4f08:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e4f0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e4f10:	f04f 0000 	mov.w	r0, #0
   e4f14:	bd70      	pop	{r4, r5, r6, pc}
   e4f16:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e4f1a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   e4f1e:	bd70      	pop	{r4, r5, r6, pc}

000e4f20 <__aeabi_ddiv>:
   e4f20:	b570      	push	{r4, r5, r6, lr}
   e4f22:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e4f26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e4f2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e4f2e:	bf1d      	ittte	ne
   e4f30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e4f34:	ea94 0f0c 	teqne	r4, ip
   e4f38:	ea95 0f0c 	teqne	r5, ip
   e4f3c:	f000 f8a7 	bleq	e508e <__aeabi_ddiv+0x16e>
   e4f40:	eba4 0405 	sub.w	r4, r4, r5
   e4f44:	ea81 0e03 	eor.w	lr, r1, r3
   e4f48:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e4f4c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e4f50:	f000 8088 	beq.w	e5064 <__aeabi_ddiv+0x144>
   e4f54:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e4f58:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   e4f5c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   e4f60:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   e4f64:	ea4f 2202 	mov.w	r2, r2, lsl #8
   e4f68:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   e4f6c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   e4f70:	ea4f 2600 	mov.w	r6, r0, lsl #8
   e4f74:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   e4f78:	429d      	cmp	r5, r3
   e4f7a:	bf08      	it	eq
   e4f7c:	4296      	cmpeq	r6, r2
   e4f7e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   e4f82:	f504 7440 	add.w	r4, r4, #768	; 0x300
   e4f86:	d202      	bcs.n	e4f8e <__aeabi_ddiv+0x6e>
   e4f88:	085b      	lsrs	r3, r3, #1
   e4f8a:	ea4f 0232 	mov.w	r2, r2, rrx
   e4f8e:	1ab6      	subs	r6, r6, r2
   e4f90:	eb65 0503 	sbc.w	r5, r5, r3
   e4f94:	085b      	lsrs	r3, r3, #1
   e4f96:	ea4f 0232 	mov.w	r2, r2, rrx
   e4f9a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   e4f9e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   e4fa2:	ebb6 0e02 	subs.w	lr, r6, r2
   e4fa6:	eb75 0e03 	sbcs.w	lr, r5, r3
   e4faa:	bf22      	ittt	cs
   e4fac:	1ab6      	subcs	r6, r6, r2
   e4fae:	4675      	movcs	r5, lr
   e4fb0:	ea40 000c 	orrcs.w	r0, r0, ip
   e4fb4:	085b      	lsrs	r3, r3, #1
   e4fb6:	ea4f 0232 	mov.w	r2, r2, rrx
   e4fba:	ebb6 0e02 	subs.w	lr, r6, r2
   e4fbe:	eb75 0e03 	sbcs.w	lr, r5, r3
   e4fc2:	bf22      	ittt	cs
   e4fc4:	1ab6      	subcs	r6, r6, r2
   e4fc6:	4675      	movcs	r5, lr
   e4fc8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   e4fcc:	085b      	lsrs	r3, r3, #1
   e4fce:	ea4f 0232 	mov.w	r2, r2, rrx
   e4fd2:	ebb6 0e02 	subs.w	lr, r6, r2
   e4fd6:	eb75 0e03 	sbcs.w	lr, r5, r3
   e4fda:	bf22      	ittt	cs
   e4fdc:	1ab6      	subcs	r6, r6, r2
   e4fde:	4675      	movcs	r5, lr
   e4fe0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   e4fe4:	085b      	lsrs	r3, r3, #1
   e4fe6:	ea4f 0232 	mov.w	r2, r2, rrx
   e4fea:	ebb6 0e02 	subs.w	lr, r6, r2
   e4fee:	eb75 0e03 	sbcs.w	lr, r5, r3
   e4ff2:	bf22      	ittt	cs
   e4ff4:	1ab6      	subcs	r6, r6, r2
   e4ff6:	4675      	movcs	r5, lr
   e4ff8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   e4ffc:	ea55 0e06 	orrs.w	lr, r5, r6
   e5000:	d018      	beq.n	e5034 <__aeabi_ddiv+0x114>
   e5002:	ea4f 1505 	mov.w	r5, r5, lsl #4
   e5006:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   e500a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   e500e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   e5012:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   e5016:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   e501a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   e501e:	d1c0      	bne.n	e4fa2 <__aeabi_ddiv+0x82>
   e5020:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e5024:	d10b      	bne.n	e503e <__aeabi_ddiv+0x11e>
   e5026:	ea41 0100 	orr.w	r1, r1, r0
   e502a:	f04f 0000 	mov.w	r0, #0
   e502e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   e5032:	e7b6      	b.n	e4fa2 <__aeabi_ddiv+0x82>
   e5034:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e5038:	bf04      	itt	eq
   e503a:	4301      	orreq	r1, r0
   e503c:	2000      	moveq	r0, #0
   e503e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e5042:	bf88      	it	hi
   e5044:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e5048:	f63f aeaf 	bhi.w	e4daa <__aeabi_dmul+0xde>
   e504c:	ebb5 0c03 	subs.w	ip, r5, r3
   e5050:	bf04      	itt	eq
   e5052:	ebb6 0c02 	subseq.w	ip, r6, r2
   e5056:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e505a:	f150 0000 	adcs.w	r0, r0, #0
   e505e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e5062:	bd70      	pop	{r4, r5, r6, pc}
   e5064:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   e5068:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   e506c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   e5070:	bfc2      	ittt	gt
   e5072:	ebd4 050c 	rsbsgt	r5, r4, ip
   e5076:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e507a:	bd70      	popgt	{r4, r5, r6, pc}
   e507c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e5080:	f04f 0e00 	mov.w	lr, #0
   e5084:	3c01      	subs	r4, #1
   e5086:	e690      	b.n	e4daa <__aeabi_dmul+0xde>
   e5088:	ea45 0e06 	orr.w	lr, r5, r6
   e508c:	e68d      	b.n	e4daa <__aeabi_dmul+0xde>
   e508e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e5092:	ea94 0f0c 	teq	r4, ip
   e5096:	bf08      	it	eq
   e5098:	ea95 0f0c 	teqeq	r5, ip
   e509c:	f43f af3b 	beq.w	e4f16 <__aeabi_dmul+0x24a>
   e50a0:	ea94 0f0c 	teq	r4, ip
   e50a4:	d10a      	bne.n	e50bc <__aeabi_ddiv+0x19c>
   e50a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e50aa:	f47f af34 	bne.w	e4f16 <__aeabi_dmul+0x24a>
   e50ae:	ea95 0f0c 	teq	r5, ip
   e50b2:	f47f af25 	bne.w	e4f00 <__aeabi_dmul+0x234>
   e50b6:	4610      	mov	r0, r2
   e50b8:	4619      	mov	r1, r3
   e50ba:	e72c      	b.n	e4f16 <__aeabi_dmul+0x24a>
   e50bc:	ea95 0f0c 	teq	r5, ip
   e50c0:	d106      	bne.n	e50d0 <__aeabi_ddiv+0x1b0>
   e50c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e50c6:	f43f aefd 	beq.w	e4ec4 <__aeabi_dmul+0x1f8>
   e50ca:	4610      	mov	r0, r2
   e50cc:	4619      	mov	r1, r3
   e50ce:	e722      	b.n	e4f16 <__aeabi_dmul+0x24a>
   e50d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e50d4:	bf18      	it	ne
   e50d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e50da:	f47f aec5 	bne.w	e4e68 <__aeabi_dmul+0x19c>
   e50de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   e50e2:	f47f af0d 	bne.w	e4f00 <__aeabi_dmul+0x234>
   e50e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   e50ea:	f47f aeeb 	bne.w	e4ec4 <__aeabi_dmul+0x1f8>
   e50ee:	e712      	b.n	e4f16 <__aeabi_dmul+0x24a>

000e50f0 <__gedf2>:
   e50f0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   e50f4:	e006      	b.n	e5104 <__cmpdf2+0x4>
   e50f6:	bf00      	nop

000e50f8 <__ledf2>:
   e50f8:	f04f 0c01 	mov.w	ip, #1
   e50fc:	e002      	b.n	e5104 <__cmpdf2+0x4>
   e50fe:	bf00      	nop

000e5100 <__cmpdf2>:
   e5100:	f04f 0c01 	mov.w	ip, #1
   e5104:	f84d cd04 	str.w	ip, [sp, #-4]!
   e5108:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e510c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e5110:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e5114:	bf18      	it	ne
   e5116:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   e511a:	d01b      	beq.n	e5154 <__cmpdf2+0x54>
   e511c:	b001      	add	sp, #4
   e511e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   e5122:	bf0c      	ite	eq
   e5124:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   e5128:	ea91 0f03 	teqne	r1, r3
   e512c:	bf02      	ittt	eq
   e512e:	ea90 0f02 	teqeq	r0, r2
   e5132:	2000      	moveq	r0, #0
   e5134:	4770      	bxeq	lr
   e5136:	f110 0f00 	cmn.w	r0, #0
   e513a:	ea91 0f03 	teq	r1, r3
   e513e:	bf58      	it	pl
   e5140:	4299      	cmppl	r1, r3
   e5142:	bf08      	it	eq
   e5144:	4290      	cmpeq	r0, r2
   e5146:	bf2c      	ite	cs
   e5148:	17d8      	asrcs	r0, r3, #31
   e514a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   e514e:	f040 0001 	orr.w	r0, r0, #1
   e5152:	4770      	bx	lr
   e5154:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e5158:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e515c:	d102      	bne.n	e5164 <__cmpdf2+0x64>
   e515e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e5162:	d107      	bne.n	e5174 <__cmpdf2+0x74>
   e5164:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e5168:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e516c:	d1d6      	bne.n	e511c <__cmpdf2+0x1c>
   e516e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e5172:	d0d3      	beq.n	e511c <__cmpdf2+0x1c>
   e5174:	f85d 0b04 	ldr.w	r0, [sp], #4
   e5178:	4770      	bx	lr
   e517a:	bf00      	nop

000e517c <__aeabi_cdrcmple>:
   e517c:	4684      	mov	ip, r0
   e517e:	4610      	mov	r0, r2
   e5180:	4662      	mov	r2, ip
   e5182:	468c      	mov	ip, r1
   e5184:	4619      	mov	r1, r3
   e5186:	4663      	mov	r3, ip
   e5188:	e000      	b.n	e518c <__aeabi_cdcmpeq>
   e518a:	bf00      	nop

000e518c <__aeabi_cdcmpeq>:
   e518c:	b501      	push	{r0, lr}
   e518e:	f7ff ffb7 	bl	e5100 <__cmpdf2>
   e5192:	2800      	cmp	r0, #0
   e5194:	bf48      	it	mi
   e5196:	f110 0f00 	cmnmi.w	r0, #0
   e519a:	bd01      	pop	{r0, pc}

000e519c <__aeabi_dcmpeq>:
   e519c:	f84d ed08 	str.w	lr, [sp, #-8]!
   e51a0:	f7ff fff4 	bl	e518c <__aeabi_cdcmpeq>
   e51a4:	bf0c      	ite	eq
   e51a6:	2001      	moveq	r0, #1
   e51a8:	2000      	movne	r0, #0
   e51aa:	f85d fb08 	ldr.w	pc, [sp], #8
   e51ae:	bf00      	nop

000e51b0 <__aeabi_dcmplt>:
   e51b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   e51b4:	f7ff ffea 	bl	e518c <__aeabi_cdcmpeq>
   e51b8:	bf34      	ite	cc
   e51ba:	2001      	movcc	r0, #1
   e51bc:	2000      	movcs	r0, #0
   e51be:	f85d fb08 	ldr.w	pc, [sp], #8
   e51c2:	bf00      	nop

000e51c4 <__aeabi_dcmple>:
   e51c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   e51c8:	f7ff ffe0 	bl	e518c <__aeabi_cdcmpeq>
   e51cc:	bf94      	ite	ls
   e51ce:	2001      	movls	r0, #1
   e51d0:	2000      	movhi	r0, #0
   e51d2:	f85d fb08 	ldr.w	pc, [sp], #8
   e51d6:	bf00      	nop

000e51d8 <__aeabi_dcmpge>:
   e51d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   e51dc:	f7ff ffce 	bl	e517c <__aeabi_cdrcmple>
   e51e0:	bf94      	ite	ls
   e51e2:	2001      	movls	r0, #1
   e51e4:	2000      	movhi	r0, #0
   e51e6:	f85d fb08 	ldr.w	pc, [sp], #8
   e51ea:	bf00      	nop

000e51ec <__aeabi_dcmpgt>:
   e51ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   e51f0:	f7ff ffc4 	bl	e517c <__aeabi_cdrcmple>
   e51f4:	bf34      	ite	cc
   e51f6:	2001      	movcc	r0, #1
   e51f8:	2000      	movcs	r0, #0
   e51fa:	f85d fb08 	ldr.w	pc, [sp], #8
   e51fe:	bf00      	nop

000e5200 <__aeabi_d2uiz>:
   e5200:	004a      	lsls	r2, r1, #1
   e5202:	d211      	bcs.n	e5228 <__aeabi_d2uiz+0x28>
   e5204:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e5208:	d211      	bcs.n	e522e <__aeabi_d2uiz+0x2e>
   e520a:	d50d      	bpl.n	e5228 <__aeabi_d2uiz+0x28>
   e520c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e5210:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e5214:	d40e      	bmi.n	e5234 <__aeabi_d2uiz+0x34>
   e5216:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e521a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e521e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e5222:	fa23 f002 	lsr.w	r0, r3, r2
   e5226:	4770      	bx	lr
   e5228:	f04f 0000 	mov.w	r0, #0
   e522c:	4770      	bx	lr
   e522e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e5232:	d102      	bne.n	e523a <__aeabi_d2uiz+0x3a>
   e5234:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   e5238:	4770      	bx	lr
   e523a:	f04f 0000 	mov.w	r0, #0
   e523e:	4770      	bx	lr

000e5240 <__aeabi_d2f>:
   e5240:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e5244:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   e5248:	bf24      	itt	cs
   e524a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   e524e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   e5252:	d90d      	bls.n	e5270 <__aeabi_d2f+0x30>
   e5254:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   e5258:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   e525c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   e5260:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   e5264:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   e5268:	bf08      	it	eq
   e526a:	f020 0001 	biceq.w	r0, r0, #1
   e526e:	4770      	bx	lr
   e5270:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   e5274:	d121      	bne.n	e52ba <__aeabi_d2f+0x7a>
   e5276:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   e527a:	bfbc      	itt	lt
   e527c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   e5280:	4770      	bxlt	lr
   e5282:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e5286:	ea4f 5252 	mov.w	r2, r2, lsr #21
   e528a:	f1c2 0218 	rsb	r2, r2, #24
   e528e:	f1c2 0c20 	rsb	ip, r2, #32
   e5292:	fa10 f30c 	lsls.w	r3, r0, ip
   e5296:	fa20 f002 	lsr.w	r0, r0, r2
   e529a:	bf18      	it	ne
   e529c:	f040 0001 	orrne.w	r0, r0, #1
   e52a0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e52a4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   e52a8:	fa03 fc0c 	lsl.w	ip, r3, ip
   e52ac:	ea40 000c 	orr.w	r0, r0, ip
   e52b0:	fa23 f302 	lsr.w	r3, r3, r2
   e52b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   e52b8:	e7cc      	b.n	e5254 <__aeabi_d2f+0x14>
   e52ba:	ea7f 5362 	mvns.w	r3, r2, asr #21
   e52be:	d107      	bne.n	e52d0 <__aeabi_d2f+0x90>
   e52c0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   e52c4:	bf1e      	ittt	ne
   e52c6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   e52ca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   e52ce:	4770      	bxne	lr
   e52d0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   e52d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   e52d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   e52dc:	4770      	bx	lr
   e52de:	bf00      	nop

000e52e0 <__aeabi_uldivmod>:
   e52e0:	b953      	cbnz	r3, e52f8 <__aeabi_uldivmod+0x18>
   e52e2:	b94a      	cbnz	r2, e52f8 <__aeabi_uldivmod+0x18>
   e52e4:	2900      	cmp	r1, #0
   e52e6:	bf08      	it	eq
   e52e8:	2800      	cmpeq	r0, #0
   e52ea:	bf1c      	itt	ne
   e52ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   e52f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   e52f4:	f000 b98c 	b.w	e5610 <__aeabi_idiv0>
   e52f8:	f1ad 0c08 	sub.w	ip, sp, #8
   e52fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   e5300:	f000 f824 	bl	e534c <__udivmoddi4>
   e5304:	f8dd e004 	ldr.w	lr, [sp, #4]
   e5308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e530c:	b004      	add	sp, #16
   e530e:	4770      	bx	lr

000e5310 <__aeabi_d2ulz>:
   e5310:	b5d0      	push	{r4, r6, r7, lr}
   e5312:	4b0c      	ldr	r3, [pc, #48]	; (e5344 <__aeabi_d2ulz+0x34>)
   e5314:	2200      	movs	r2, #0
   e5316:	4606      	mov	r6, r0
   e5318:	460f      	mov	r7, r1
   e531a:	f7ff fcd7 	bl	e4ccc <__aeabi_dmul>
   e531e:	f7ff ff6f 	bl	e5200 <__aeabi_d2uiz>
   e5322:	4604      	mov	r4, r0
   e5324:	f7ff fc58 	bl	e4bd8 <__aeabi_ui2d>
   e5328:	4b07      	ldr	r3, [pc, #28]	; (e5348 <__aeabi_d2ulz+0x38>)
   e532a:	2200      	movs	r2, #0
   e532c:	f7ff fcce 	bl	e4ccc <__aeabi_dmul>
   e5330:	4602      	mov	r2, r0
   e5332:	460b      	mov	r3, r1
   e5334:	4630      	mov	r0, r6
   e5336:	4639      	mov	r1, r7
   e5338:	f7ff fb10 	bl	e495c <__aeabi_dsub>
   e533c:	f7ff ff60 	bl	e5200 <__aeabi_d2uiz>
   e5340:	4621      	mov	r1, r4
   e5342:	bdd0      	pop	{r4, r6, r7, pc}
   e5344:	3df00000 	.word	0x3df00000
   e5348:	41f00000 	.word	0x41f00000

000e534c <__udivmoddi4>:
   e534c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e5350:	9d08      	ldr	r5, [sp, #32]
   e5352:	4604      	mov	r4, r0
   e5354:	468c      	mov	ip, r1
   e5356:	2b00      	cmp	r3, #0
   e5358:	f040 8083 	bne.w	e5462 <__udivmoddi4+0x116>
   e535c:	428a      	cmp	r2, r1
   e535e:	4617      	mov	r7, r2
   e5360:	d947      	bls.n	e53f2 <__udivmoddi4+0xa6>
   e5362:	fab2 f282 	clz	r2, r2
   e5366:	b142      	cbz	r2, e537a <__udivmoddi4+0x2e>
   e5368:	f1c2 0020 	rsb	r0, r2, #32
   e536c:	fa24 f000 	lsr.w	r0, r4, r0
   e5370:	4091      	lsls	r1, r2
   e5372:	4097      	lsls	r7, r2
   e5374:	ea40 0c01 	orr.w	ip, r0, r1
   e5378:	4094      	lsls	r4, r2
   e537a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   e537e:	0c23      	lsrs	r3, r4, #16
   e5380:	fbbc f6f8 	udiv	r6, ip, r8
   e5384:	fa1f fe87 	uxth.w	lr, r7
   e5388:	fb08 c116 	mls	r1, r8, r6, ip
   e538c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   e5390:	fb06 f10e 	mul.w	r1, r6, lr
   e5394:	4299      	cmp	r1, r3
   e5396:	d909      	bls.n	e53ac <__udivmoddi4+0x60>
   e5398:	18fb      	adds	r3, r7, r3
   e539a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   e539e:	f080 8119 	bcs.w	e55d4 <__udivmoddi4+0x288>
   e53a2:	4299      	cmp	r1, r3
   e53a4:	f240 8116 	bls.w	e55d4 <__udivmoddi4+0x288>
   e53a8:	3e02      	subs	r6, #2
   e53aa:	443b      	add	r3, r7
   e53ac:	1a5b      	subs	r3, r3, r1
   e53ae:	b2a4      	uxth	r4, r4
   e53b0:	fbb3 f0f8 	udiv	r0, r3, r8
   e53b4:	fb08 3310 	mls	r3, r8, r0, r3
   e53b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   e53bc:	fb00 fe0e 	mul.w	lr, r0, lr
   e53c0:	45a6      	cmp	lr, r4
   e53c2:	d909      	bls.n	e53d8 <__udivmoddi4+0x8c>
   e53c4:	193c      	adds	r4, r7, r4
   e53c6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   e53ca:	f080 8105 	bcs.w	e55d8 <__udivmoddi4+0x28c>
   e53ce:	45a6      	cmp	lr, r4
   e53d0:	f240 8102 	bls.w	e55d8 <__udivmoddi4+0x28c>
   e53d4:	3802      	subs	r0, #2
   e53d6:	443c      	add	r4, r7
   e53d8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   e53dc:	eba4 040e 	sub.w	r4, r4, lr
   e53e0:	2600      	movs	r6, #0
   e53e2:	b11d      	cbz	r5, e53ec <__udivmoddi4+0xa0>
   e53e4:	40d4      	lsrs	r4, r2
   e53e6:	2300      	movs	r3, #0
   e53e8:	e9c5 4300 	strd	r4, r3, [r5]
   e53ec:	4631      	mov	r1, r6
   e53ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e53f2:	b902      	cbnz	r2, e53f6 <__udivmoddi4+0xaa>
   e53f4:	deff      	udf	#255	; 0xff
   e53f6:	fab2 f282 	clz	r2, r2
   e53fa:	2a00      	cmp	r2, #0
   e53fc:	d150      	bne.n	e54a0 <__udivmoddi4+0x154>
   e53fe:	1bcb      	subs	r3, r1, r7
   e5400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   e5404:	fa1f f887 	uxth.w	r8, r7
   e5408:	2601      	movs	r6, #1
   e540a:	fbb3 fcfe 	udiv	ip, r3, lr
   e540e:	0c21      	lsrs	r1, r4, #16
   e5410:	fb0e 331c 	mls	r3, lr, ip, r3
   e5414:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   e5418:	fb08 f30c 	mul.w	r3, r8, ip
   e541c:	428b      	cmp	r3, r1
   e541e:	d907      	bls.n	e5430 <__udivmoddi4+0xe4>
   e5420:	1879      	adds	r1, r7, r1
   e5422:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   e5426:	d202      	bcs.n	e542e <__udivmoddi4+0xe2>
   e5428:	428b      	cmp	r3, r1
   e542a:	f200 80e9 	bhi.w	e5600 <__udivmoddi4+0x2b4>
   e542e:	4684      	mov	ip, r0
   e5430:	1ac9      	subs	r1, r1, r3
   e5432:	b2a3      	uxth	r3, r4
   e5434:	fbb1 f0fe 	udiv	r0, r1, lr
   e5438:	fb0e 1110 	mls	r1, lr, r0, r1
   e543c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   e5440:	fb08 f800 	mul.w	r8, r8, r0
   e5444:	45a0      	cmp	r8, r4
   e5446:	d907      	bls.n	e5458 <__udivmoddi4+0x10c>
   e5448:	193c      	adds	r4, r7, r4
   e544a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   e544e:	d202      	bcs.n	e5456 <__udivmoddi4+0x10a>
   e5450:	45a0      	cmp	r8, r4
   e5452:	f200 80d9 	bhi.w	e5608 <__udivmoddi4+0x2bc>
   e5456:	4618      	mov	r0, r3
   e5458:	eba4 0408 	sub.w	r4, r4, r8
   e545c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   e5460:	e7bf      	b.n	e53e2 <__udivmoddi4+0x96>
   e5462:	428b      	cmp	r3, r1
   e5464:	d909      	bls.n	e547a <__udivmoddi4+0x12e>
   e5466:	2d00      	cmp	r5, #0
   e5468:	f000 80b1 	beq.w	e55ce <__udivmoddi4+0x282>
   e546c:	2600      	movs	r6, #0
   e546e:	e9c5 0100 	strd	r0, r1, [r5]
   e5472:	4630      	mov	r0, r6
   e5474:	4631      	mov	r1, r6
   e5476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e547a:	fab3 f683 	clz	r6, r3
   e547e:	2e00      	cmp	r6, #0
   e5480:	d14a      	bne.n	e5518 <__udivmoddi4+0x1cc>
   e5482:	428b      	cmp	r3, r1
   e5484:	d302      	bcc.n	e548c <__udivmoddi4+0x140>
   e5486:	4282      	cmp	r2, r0
   e5488:	f200 80b8 	bhi.w	e55fc <__udivmoddi4+0x2b0>
   e548c:	1a84      	subs	r4, r0, r2
   e548e:	eb61 0103 	sbc.w	r1, r1, r3
   e5492:	2001      	movs	r0, #1
   e5494:	468c      	mov	ip, r1
   e5496:	2d00      	cmp	r5, #0
   e5498:	d0a8      	beq.n	e53ec <__udivmoddi4+0xa0>
   e549a:	e9c5 4c00 	strd	r4, ip, [r5]
   e549e:	e7a5      	b.n	e53ec <__udivmoddi4+0xa0>
   e54a0:	f1c2 0320 	rsb	r3, r2, #32
   e54a4:	fa20 f603 	lsr.w	r6, r0, r3
   e54a8:	4097      	lsls	r7, r2
   e54aa:	fa01 f002 	lsl.w	r0, r1, r2
   e54ae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   e54b2:	40d9      	lsrs	r1, r3
   e54b4:	4330      	orrs	r0, r6
   e54b6:	0c03      	lsrs	r3, r0, #16
   e54b8:	fbb1 f6fe 	udiv	r6, r1, lr
   e54bc:	fa1f f887 	uxth.w	r8, r7
   e54c0:	fb0e 1116 	mls	r1, lr, r6, r1
   e54c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   e54c8:	fb06 f108 	mul.w	r1, r6, r8
   e54cc:	4299      	cmp	r1, r3
   e54ce:	fa04 f402 	lsl.w	r4, r4, r2
   e54d2:	d909      	bls.n	e54e8 <__udivmoddi4+0x19c>
   e54d4:	18fb      	adds	r3, r7, r3
   e54d6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   e54da:	f080 808d 	bcs.w	e55f8 <__udivmoddi4+0x2ac>
   e54de:	4299      	cmp	r1, r3
   e54e0:	f240 808a 	bls.w	e55f8 <__udivmoddi4+0x2ac>
   e54e4:	3e02      	subs	r6, #2
   e54e6:	443b      	add	r3, r7
   e54e8:	1a5b      	subs	r3, r3, r1
   e54ea:	b281      	uxth	r1, r0
   e54ec:	fbb3 f0fe 	udiv	r0, r3, lr
   e54f0:	fb0e 3310 	mls	r3, lr, r0, r3
   e54f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   e54f8:	fb00 f308 	mul.w	r3, r0, r8
   e54fc:	428b      	cmp	r3, r1
   e54fe:	d907      	bls.n	e5510 <__udivmoddi4+0x1c4>
   e5500:	1879      	adds	r1, r7, r1
   e5502:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   e5506:	d273      	bcs.n	e55f0 <__udivmoddi4+0x2a4>
   e5508:	428b      	cmp	r3, r1
   e550a:	d971      	bls.n	e55f0 <__udivmoddi4+0x2a4>
   e550c:	3802      	subs	r0, #2
   e550e:	4439      	add	r1, r7
   e5510:	1acb      	subs	r3, r1, r3
   e5512:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   e5516:	e778      	b.n	e540a <__udivmoddi4+0xbe>
   e5518:	f1c6 0c20 	rsb	ip, r6, #32
   e551c:	fa03 f406 	lsl.w	r4, r3, r6
   e5520:	fa22 f30c 	lsr.w	r3, r2, ip
   e5524:	431c      	orrs	r4, r3
   e5526:	fa20 f70c 	lsr.w	r7, r0, ip
   e552a:	fa01 f306 	lsl.w	r3, r1, r6
   e552e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   e5532:	fa21 f10c 	lsr.w	r1, r1, ip
   e5536:	431f      	orrs	r7, r3
   e5538:	0c3b      	lsrs	r3, r7, #16
   e553a:	fbb1 f9fe 	udiv	r9, r1, lr
   e553e:	fa1f f884 	uxth.w	r8, r4
   e5542:	fb0e 1119 	mls	r1, lr, r9, r1
   e5546:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   e554a:	fb09 fa08 	mul.w	sl, r9, r8
   e554e:	458a      	cmp	sl, r1
   e5550:	fa02 f206 	lsl.w	r2, r2, r6
   e5554:	fa00 f306 	lsl.w	r3, r0, r6
   e5558:	d908      	bls.n	e556c <__udivmoddi4+0x220>
   e555a:	1861      	adds	r1, r4, r1
   e555c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   e5560:	d248      	bcs.n	e55f4 <__udivmoddi4+0x2a8>
   e5562:	458a      	cmp	sl, r1
   e5564:	d946      	bls.n	e55f4 <__udivmoddi4+0x2a8>
   e5566:	f1a9 0902 	sub.w	r9, r9, #2
   e556a:	4421      	add	r1, r4
   e556c:	eba1 010a 	sub.w	r1, r1, sl
   e5570:	b2bf      	uxth	r7, r7
   e5572:	fbb1 f0fe 	udiv	r0, r1, lr
   e5576:	fb0e 1110 	mls	r1, lr, r0, r1
   e557a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   e557e:	fb00 f808 	mul.w	r8, r0, r8
   e5582:	45b8      	cmp	r8, r7
   e5584:	d907      	bls.n	e5596 <__udivmoddi4+0x24a>
   e5586:	19e7      	adds	r7, r4, r7
   e5588:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   e558c:	d22e      	bcs.n	e55ec <__udivmoddi4+0x2a0>
   e558e:	45b8      	cmp	r8, r7
   e5590:	d92c      	bls.n	e55ec <__udivmoddi4+0x2a0>
   e5592:	3802      	subs	r0, #2
   e5594:	4427      	add	r7, r4
   e5596:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   e559a:	eba7 0708 	sub.w	r7, r7, r8
   e559e:	fba0 8902 	umull	r8, r9, r0, r2
   e55a2:	454f      	cmp	r7, r9
   e55a4:	46c6      	mov	lr, r8
   e55a6:	4649      	mov	r1, r9
   e55a8:	d31a      	bcc.n	e55e0 <__udivmoddi4+0x294>
   e55aa:	d017      	beq.n	e55dc <__udivmoddi4+0x290>
   e55ac:	b15d      	cbz	r5, e55c6 <__udivmoddi4+0x27a>
   e55ae:	ebb3 020e 	subs.w	r2, r3, lr
   e55b2:	eb67 0701 	sbc.w	r7, r7, r1
   e55b6:	fa07 fc0c 	lsl.w	ip, r7, ip
   e55ba:	40f2      	lsrs	r2, r6
   e55bc:	ea4c 0202 	orr.w	r2, ip, r2
   e55c0:	40f7      	lsrs	r7, r6
   e55c2:	e9c5 2700 	strd	r2, r7, [r5]
   e55c6:	2600      	movs	r6, #0
   e55c8:	4631      	mov	r1, r6
   e55ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e55ce:	462e      	mov	r6, r5
   e55d0:	4628      	mov	r0, r5
   e55d2:	e70b      	b.n	e53ec <__udivmoddi4+0xa0>
   e55d4:	4606      	mov	r6, r0
   e55d6:	e6e9      	b.n	e53ac <__udivmoddi4+0x60>
   e55d8:	4618      	mov	r0, r3
   e55da:	e6fd      	b.n	e53d8 <__udivmoddi4+0x8c>
   e55dc:	4543      	cmp	r3, r8
   e55de:	d2e5      	bcs.n	e55ac <__udivmoddi4+0x260>
   e55e0:	ebb8 0e02 	subs.w	lr, r8, r2
   e55e4:	eb69 0104 	sbc.w	r1, r9, r4
   e55e8:	3801      	subs	r0, #1
   e55ea:	e7df      	b.n	e55ac <__udivmoddi4+0x260>
   e55ec:	4608      	mov	r0, r1
   e55ee:	e7d2      	b.n	e5596 <__udivmoddi4+0x24a>
   e55f0:	4660      	mov	r0, ip
   e55f2:	e78d      	b.n	e5510 <__udivmoddi4+0x1c4>
   e55f4:	4681      	mov	r9, r0
   e55f6:	e7b9      	b.n	e556c <__udivmoddi4+0x220>
   e55f8:	4666      	mov	r6, ip
   e55fa:	e775      	b.n	e54e8 <__udivmoddi4+0x19c>
   e55fc:	4630      	mov	r0, r6
   e55fe:	e74a      	b.n	e5496 <__udivmoddi4+0x14a>
   e5600:	f1ac 0c02 	sub.w	ip, ip, #2
   e5604:	4439      	add	r1, r7
   e5606:	e713      	b.n	e5430 <__udivmoddi4+0xe4>
   e5608:	3802      	subs	r0, #2
   e560a:	443c      	add	r4, r7
   e560c:	e724      	b.n	e5458 <__udivmoddi4+0x10c>
   e560e:	bf00      	nop

000e5610 <__aeabi_idiv0>:
   e5610:	4770      	bx	lr
   e5612:	bf00      	nop

000e5614 <atoi>:
   e5614:	220a      	movs	r2, #10
   e5616:	2100      	movs	r1, #0
   e5618:	f000 b990 	b.w	e593c <strtol>

000e561c <__cxa_atexit>:
   e561c:	b510      	push	{r4, lr}
   e561e:	4c05      	ldr	r4, [pc, #20]	; (e5634 <__cxa_atexit+0x18>)
   e5620:	4613      	mov	r3, r2
   e5622:	b12c      	cbz	r4, e5630 <__cxa_atexit+0x14>
   e5624:	460a      	mov	r2, r1
   e5626:	4601      	mov	r1, r0
   e5628:	2002      	movs	r0, #2
   e562a:	f3af 8000 	nop.w
   e562e:	bd10      	pop	{r4, pc}
   e5630:	4620      	mov	r0, r4
   e5632:	e7fc      	b.n	e562e <__cxa_atexit+0x12>
   e5634:	00000000 	.word	0x00000000

000e5638 <ldiv>:
   e5638:	2900      	cmp	r1, #0
   e563a:	b510      	push	{r4, lr}
   e563c:	fb91 f4f2 	sdiv	r4, r1, r2
   e5640:	fb02 1314 	mls	r3, r2, r4, r1
   e5644:	db06      	blt.n	e5654 <ldiv+0x1c>
   e5646:	2b00      	cmp	r3, #0
   e5648:	da01      	bge.n	e564e <ldiv+0x16>
   e564a:	3401      	adds	r4, #1
   e564c:	1a9b      	subs	r3, r3, r2
   e564e:	e9c0 4300 	strd	r4, r3, [r0]
   e5652:	bd10      	pop	{r4, pc}
   e5654:	2b00      	cmp	r3, #0
   e5656:	bfc4      	itt	gt
   e5658:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   e565c:	189b      	addgt	r3, r3, r2
   e565e:	e7f6      	b.n	e564e <ldiv+0x16>

000e5660 <memcpy>:
   e5660:	440a      	add	r2, r1
   e5662:	4291      	cmp	r1, r2
   e5664:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   e5668:	d100      	bne.n	e566c <memcpy+0xc>
   e566a:	4770      	bx	lr
   e566c:	b510      	push	{r4, lr}
   e566e:	f811 4b01 	ldrb.w	r4, [r1], #1
   e5672:	f803 4f01 	strb.w	r4, [r3, #1]!
   e5676:	4291      	cmp	r1, r2
   e5678:	d1f9      	bne.n	e566e <memcpy+0xe>
   e567a:	bd10      	pop	{r4, pc}

000e567c <memmove>:
   e567c:	4288      	cmp	r0, r1
   e567e:	b510      	push	{r4, lr}
   e5680:	eb01 0402 	add.w	r4, r1, r2
   e5684:	d902      	bls.n	e568c <memmove+0x10>
   e5686:	4284      	cmp	r4, r0
   e5688:	4623      	mov	r3, r4
   e568a:	d807      	bhi.n	e569c <memmove+0x20>
   e568c:	1e43      	subs	r3, r0, #1
   e568e:	42a1      	cmp	r1, r4
   e5690:	d008      	beq.n	e56a4 <memmove+0x28>
   e5692:	f811 2b01 	ldrb.w	r2, [r1], #1
   e5696:	f803 2f01 	strb.w	r2, [r3, #1]!
   e569a:	e7f8      	b.n	e568e <memmove+0x12>
   e569c:	4402      	add	r2, r0
   e569e:	4601      	mov	r1, r0
   e56a0:	428a      	cmp	r2, r1
   e56a2:	d100      	bne.n	e56a6 <memmove+0x2a>
   e56a4:	bd10      	pop	{r4, pc}
   e56a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   e56aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
   e56ae:	e7f7      	b.n	e56a0 <memmove+0x24>

000e56b0 <memset>:
   e56b0:	4402      	add	r2, r0
   e56b2:	4603      	mov	r3, r0
   e56b4:	4293      	cmp	r3, r2
   e56b6:	d100      	bne.n	e56ba <memset+0xa>
   e56b8:	4770      	bx	lr
   e56ba:	f803 1b01 	strb.w	r1, [r3], #1
   e56be:	e7f9      	b.n	e56b4 <memset+0x4>

000e56c0 <srand>:
   e56c0:	b538      	push	{r3, r4, r5, lr}
   e56c2:	4b0d      	ldr	r3, [pc, #52]	; (e56f8 <srand+0x38>)
   e56c4:	681d      	ldr	r5, [r3, #0]
   e56c6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   e56c8:	4604      	mov	r4, r0
   e56ca:	b97b      	cbnz	r3, e56ec <srand+0x2c>
   e56cc:	2018      	movs	r0, #24
   e56ce:	f7fb fe37 	bl	e1340 <malloc>
   e56d2:	4a0a      	ldr	r2, [pc, #40]	; (e56fc <srand+0x3c>)
   e56d4:	4b0a      	ldr	r3, [pc, #40]	; (e5700 <srand+0x40>)
   e56d6:	63a8      	str	r0, [r5, #56]	; 0x38
   e56d8:	e9c0 2300 	strd	r2, r3, [r0]
   e56dc:	4b09      	ldr	r3, [pc, #36]	; (e5704 <srand+0x44>)
   e56de:	6083      	str	r3, [r0, #8]
   e56e0:	230b      	movs	r3, #11
   e56e2:	8183      	strh	r3, [r0, #12]
   e56e4:	2201      	movs	r2, #1
   e56e6:	2300      	movs	r3, #0
   e56e8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   e56ec:	6bab      	ldr	r3, [r5, #56]	; 0x38
   e56ee:	2200      	movs	r2, #0
   e56f0:	611c      	str	r4, [r3, #16]
   e56f2:	615a      	str	r2, [r3, #20]
   e56f4:	bd38      	pop	{r3, r4, r5, pc}
   e56f6:	bf00      	nop
   e56f8:	2003d994 	.word	0x2003d994
   e56fc:	abcd330e 	.word	0xabcd330e
   e5700:	e66d1234 	.word	0xe66d1234
   e5704:	0005deec 	.word	0x0005deec

000e5708 <strchr>:
   e5708:	b2c9      	uxtb	r1, r1
   e570a:	4603      	mov	r3, r0
   e570c:	f810 2b01 	ldrb.w	r2, [r0], #1
   e5710:	b11a      	cbz	r2, e571a <strchr+0x12>
   e5712:	428a      	cmp	r2, r1
   e5714:	d1f9      	bne.n	e570a <strchr+0x2>
   e5716:	4618      	mov	r0, r3
   e5718:	4770      	bx	lr
   e571a:	2900      	cmp	r1, #0
   e571c:	bf18      	it	ne
   e571e:	2300      	movne	r3, #0
   e5720:	e7f9      	b.n	e5716 <strchr+0xe>

000e5722 <strchrnul>:
   e5722:	b510      	push	{r4, lr}
   e5724:	4604      	mov	r4, r0
   e5726:	f7ff ffef 	bl	e5708 <strchr>
   e572a:	b918      	cbnz	r0, e5734 <strchrnul+0x12>
   e572c:	4620      	mov	r0, r4
   e572e:	f000 f832 	bl	e5796 <strlen>
   e5732:	4420      	add	r0, r4
   e5734:	bd10      	pop	{r4, pc}

000e5736 <strcmp>:
   e5736:	f810 2b01 	ldrb.w	r2, [r0], #1
   e573a:	f811 3b01 	ldrb.w	r3, [r1], #1
   e573e:	2a01      	cmp	r2, #1
   e5740:	bf28      	it	cs
   e5742:	429a      	cmpcs	r2, r3
   e5744:	d0f7      	beq.n	e5736 <strcmp>
   e5746:	1ad0      	subs	r0, r2, r3
   e5748:	4770      	bx	lr

000e574a <strcpy>:
   e574a:	4603      	mov	r3, r0
   e574c:	f811 2b01 	ldrb.w	r2, [r1], #1
   e5750:	f803 2b01 	strb.w	r2, [r3], #1
   e5754:	2a00      	cmp	r2, #0
   e5756:	d1f9      	bne.n	e574c <strcpy+0x2>
   e5758:	4770      	bx	lr
	...

000e575c <strdup>:
   e575c:	4b02      	ldr	r3, [pc, #8]	; (e5768 <strdup+0xc>)
   e575e:	4601      	mov	r1, r0
   e5760:	6818      	ldr	r0, [r3, #0]
   e5762:	f000 b803 	b.w	e576c <_strdup_r>
   e5766:	bf00      	nop
   e5768:	2003d994 	.word	0x2003d994

000e576c <_strdup_r>:
   e576c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   e576e:	4604      	mov	r4, r0
   e5770:	4608      	mov	r0, r1
   e5772:	460d      	mov	r5, r1
   e5774:	f000 f80f 	bl	e5796 <strlen>
   e5778:	1c42      	adds	r2, r0, #1
   e577a:	4611      	mov	r1, r2
   e577c:	4620      	mov	r0, r4
   e577e:	9201      	str	r2, [sp, #4]
   e5780:	f7fb fe1e 	bl	e13c0 <_malloc_r>
   e5784:	4604      	mov	r4, r0
   e5786:	b118      	cbz	r0, e5790 <_strdup_r+0x24>
   e5788:	9a01      	ldr	r2, [sp, #4]
   e578a:	4629      	mov	r1, r5
   e578c:	f7ff ff68 	bl	e5660 <memcpy>
   e5790:	4620      	mov	r0, r4
   e5792:	b003      	add	sp, #12
   e5794:	bd30      	pop	{r4, r5, pc}

000e5796 <strlen>:
   e5796:	4603      	mov	r3, r0
   e5798:	f813 2b01 	ldrb.w	r2, [r3], #1
   e579c:	2a00      	cmp	r2, #0
   e579e:	d1fb      	bne.n	e5798 <strlen+0x2>
   e57a0:	1a18      	subs	r0, r3, r0
   e57a2:	3801      	subs	r0, #1
   e57a4:	4770      	bx	lr

000e57a6 <strncmp>:
   e57a6:	b510      	push	{r4, lr}
   e57a8:	b16a      	cbz	r2, e57c6 <strncmp+0x20>
   e57aa:	3901      	subs	r1, #1
   e57ac:	1884      	adds	r4, r0, r2
   e57ae:	f810 3b01 	ldrb.w	r3, [r0], #1
   e57b2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   e57b6:	4293      	cmp	r3, r2
   e57b8:	d103      	bne.n	e57c2 <strncmp+0x1c>
   e57ba:	42a0      	cmp	r0, r4
   e57bc:	d001      	beq.n	e57c2 <strncmp+0x1c>
   e57be:	2b00      	cmp	r3, #0
   e57c0:	d1f5      	bne.n	e57ae <strncmp+0x8>
   e57c2:	1a98      	subs	r0, r3, r2
   e57c4:	bd10      	pop	{r4, pc}
   e57c6:	4610      	mov	r0, r2
   e57c8:	e7fc      	b.n	e57c4 <strncmp+0x1e>

000e57ca <strncpy>:
   e57ca:	b510      	push	{r4, lr}
   e57cc:	3901      	subs	r1, #1
   e57ce:	4603      	mov	r3, r0
   e57d0:	b132      	cbz	r2, e57e0 <strncpy+0x16>
   e57d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   e57d6:	f803 4b01 	strb.w	r4, [r3], #1
   e57da:	3a01      	subs	r2, #1
   e57dc:	2c00      	cmp	r4, #0
   e57de:	d1f7      	bne.n	e57d0 <strncpy+0x6>
   e57e0:	441a      	add	r2, r3
   e57e2:	2100      	movs	r1, #0
   e57e4:	4293      	cmp	r3, r2
   e57e6:	d100      	bne.n	e57ea <strncpy+0x20>
   e57e8:	bd10      	pop	{r4, pc}
   e57ea:	f803 1b01 	strb.w	r1, [r3], #1
   e57ee:	e7f9      	b.n	e57e4 <strncpy+0x1a>

000e57f0 <strrchr>:
   e57f0:	b538      	push	{r3, r4, r5, lr}
   e57f2:	4603      	mov	r3, r0
   e57f4:	460c      	mov	r4, r1
   e57f6:	b969      	cbnz	r1, e5814 <strrchr+0x24>
   e57f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   e57fc:	f7ff bf84 	b.w	e5708 <strchr>
   e5800:	1c43      	adds	r3, r0, #1
   e5802:	4605      	mov	r5, r0
   e5804:	4621      	mov	r1, r4
   e5806:	4618      	mov	r0, r3
   e5808:	f7ff ff7e 	bl	e5708 <strchr>
   e580c:	2800      	cmp	r0, #0
   e580e:	d1f7      	bne.n	e5800 <strrchr+0x10>
   e5810:	4628      	mov	r0, r5
   e5812:	bd38      	pop	{r3, r4, r5, pc}
   e5814:	2500      	movs	r5, #0
   e5816:	e7f5      	b.n	e5804 <strrchr+0x14>

000e5818 <strstr>:
   e5818:	b5f0      	push	{r4, r5, r6, r7, lr}
   e581a:	780c      	ldrb	r4, [r1, #0]
   e581c:	b164      	cbz	r4, e5838 <strstr+0x20>
   e581e:	4603      	mov	r3, r0
   e5820:	781a      	ldrb	r2, [r3, #0]
   e5822:	4618      	mov	r0, r3
   e5824:	1c5e      	adds	r6, r3, #1
   e5826:	b90a      	cbnz	r2, e582c <strstr+0x14>
   e5828:	4610      	mov	r0, r2
   e582a:	e005      	b.n	e5838 <strstr+0x20>
   e582c:	4294      	cmp	r4, r2
   e582e:	d108      	bne.n	e5842 <strstr+0x2a>
   e5830:	460d      	mov	r5, r1
   e5832:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   e5836:	b902      	cbnz	r2, e583a <strstr+0x22>
   e5838:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e583a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   e583e:	4297      	cmp	r7, r2
   e5840:	d0f7      	beq.n	e5832 <strstr+0x1a>
   e5842:	4633      	mov	r3, r6
   e5844:	e7ec      	b.n	e5820 <strstr+0x8>
	...

000e5848 <_strtol_l.isra.0>:
   e5848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e584c:	4e3a      	ldr	r6, [pc, #232]	; (e5938 <_strtol_l.isra.0+0xf0>)
   e584e:	4686      	mov	lr, r0
   e5850:	468c      	mov	ip, r1
   e5852:	4660      	mov	r0, ip
   e5854:	f81c 4b01 	ldrb.w	r4, [ip], #1
   e5858:	5da5      	ldrb	r5, [r4, r6]
   e585a:	f015 0508 	ands.w	r5, r5, #8
   e585e:	d1f8      	bne.n	e5852 <_strtol_l.isra.0+0xa>
   e5860:	2c2d      	cmp	r4, #45	; 0x2d
   e5862:	d133      	bne.n	e58cc <_strtol_l.isra.0+0x84>
   e5864:	f89c 4000 	ldrb.w	r4, [ip]
   e5868:	f04f 0801 	mov.w	r8, #1
   e586c:	f100 0c02 	add.w	ip, r0, #2
   e5870:	2b00      	cmp	r3, #0
   e5872:	d05c      	beq.n	e592e <_strtol_l.isra.0+0xe6>
   e5874:	2b10      	cmp	r3, #16
   e5876:	d10c      	bne.n	e5892 <_strtol_l.isra.0+0x4a>
   e5878:	2c30      	cmp	r4, #48	; 0x30
   e587a:	d10a      	bne.n	e5892 <_strtol_l.isra.0+0x4a>
   e587c:	f89c 0000 	ldrb.w	r0, [ip]
   e5880:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   e5884:	2858      	cmp	r0, #88	; 0x58
   e5886:	d14d      	bne.n	e5924 <_strtol_l.isra.0+0xdc>
   e5888:	f89c 4001 	ldrb.w	r4, [ip, #1]
   e588c:	2310      	movs	r3, #16
   e588e:	f10c 0c02 	add.w	ip, ip, #2
   e5892:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   e5896:	3f01      	subs	r7, #1
   e5898:	2600      	movs	r6, #0
   e589a:	fbb7 f9f3 	udiv	r9, r7, r3
   e589e:	4630      	mov	r0, r6
   e58a0:	fb03 7a19 	mls	sl, r3, r9, r7
   e58a4:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   e58a8:	2d09      	cmp	r5, #9
   e58aa:	d818      	bhi.n	e58de <_strtol_l.isra.0+0x96>
   e58ac:	462c      	mov	r4, r5
   e58ae:	42a3      	cmp	r3, r4
   e58b0:	dd24      	ble.n	e58fc <_strtol_l.isra.0+0xb4>
   e58b2:	1c75      	adds	r5, r6, #1
   e58b4:	d007      	beq.n	e58c6 <_strtol_l.isra.0+0x7e>
   e58b6:	4581      	cmp	r9, r0
   e58b8:	d31d      	bcc.n	e58f6 <_strtol_l.isra.0+0xae>
   e58ba:	d101      	bne.n	e58c0 <_strtol_l.isra.0+0x78>
   e58bc:	45a2      	cmp	sl, r4
   e58be:	db1a      	blt.n	e58f6 <_strtol_l.isra.0+0xae>
   e58c0:	fb00 4003 	mla	r0, r0, r3, r4
   e58c4:	2601      	movs	r6, #1
   e58c6:	f81c 4b01 	ldrb.w	r4, [ip], #1
   e58ca:	e7eb      	b.n	e58a4 <_strtol_l.isra.0+0x5c>
   e58cc:	2c2b      	cmp	r4, #43	; 0x2b
   e58ce:	bf08      	it	eq
   e58d0:	f89c 4000 	ldrbeq.w	r4, [ip]
   e58d4:	46a8      	mov	r8, r5
   e58d6:	bf08      	it	eq
   e58d8:	f100 0c02 	addeq.w	ip, r0, #2
   e58dc:	e7c8      	b.n	e5870 <_strtol_l.isra.0+0x28>
   e58de:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   e58e2:	2d19      	cmp	r5, #25
   e58e4:	d801      	bhi.n	e58ea <_strtol_l.isra.0+0xa2>
   e58e6:	3c37      	subs	r4, #55	; 0x37
   e58e8:	e7e1      	b.n	e58ae <_strtol_l.isra.0+0x66>
   e58ea:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   e58ee:	2d19      	cmp	r5, #25
   e58f0:	d804      	bhi.n	e58fc <_strtol_l.isra.0+0xb4>
   e58f2:	3c57      	subs	r4, #87	; 0x57
   e58f4:	e7db      	b.n	e58ae <_strtol_l.isra.0+0x66>
   e58f6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   e58fa:	e7e4      	b.n	e58c6 <_strtol_l.isra.0+0x7e>
   e58fc:	1c73      	adds	r3, r6, #1
   e58fe:	d106      	bne.n	e590e <_strtol_l.isra.0+0xc6>
   e5900:	2322      	movs	r3, #34	; 0x22
   e5902:	f8ce 3000 	str.w	r3, [lr]
   e5906:	4638      	mov	r0, r7
   e5908:	b942      	cbnz	r2, e591c <_strtol_l.isra.0+0xd4>
   e590a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e590e:	f1b8 0f00 	cmp.w	r8, #0
   e5912:	d000      	beq.n	e5916 <_strtol_l.isra.0+0xce>
   e5914:	4240      	negs	r0, r0
   e5916:	2a00      	cmp	r2, #0
   e5918:	d0f7      	beq.n	e590a <_strtol_l.isra.0+0xc2>
   e591a:	b10e      	cbz	r6, e5920 <_strtol_l.isra.0+0xd8>
   e591c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   e5920:	6011      	str	r1, [r2, #0]
   e5922:	e7f2      	b.n	e590a <_strtol_l.isra.0+0xc2>
   e5924:	2430      	movs	r4, #48	; 0x30
   e5926:	2b00      	cmp	r3, #0
   e5928:	d1b3      	bne.n	e5892 <_strtol_l.isra.0+0x4a>
   e592a:	2308      	movs	r3, #8
   e592c:	e7b1      	b.n	e5892 <_strtol_l.isra.0+0x4a>
   e592e:	2c30      	cmp	r4, #48	; 0x30
   e5930:	d0a4      	beq.n	e587c <_strtol_l.isra.0+0x34>
   e5932:	230a      	movs	r3, #10
   e5934:	e7ad      	b.n	e5892 <_strtol_l.isra.0+0x4a>
   e5936:	bf00      	nop
   e5938:	000e89d3 	.word	0x000e89d3

000e593c <strtol>:
   e593c:	4613      	mov	r3, r2
   e593e:	460a      	mov	r2, r1
   e5940:	4601      	mov	r1, r0
   e5942:	4802      	ldr	r0, [pc, #8]	; (e594c <strtol+0x10>)
   e5944:	6800      	ldr	r0, [r0, #0]
   e5946:	f7ff bf7f 	b.w	e5848 <_strtol_l.isra.0>
   e594a:	bf00      	nop
   e594c:	2003d994 	.word	0x2003d994

000e5950 <tolower>:
   e5950:	4b03      	ldr	r3, [pc, #12]	; (e5960 <tolower+0x10>)
   e5952:	5cc3      	ldrb	r3, [r0, r3]
   e5954:	f003 0303 	and.w	r3, r3, #3
   e5958:	2b01      	cmp	r3, #1
   e595a:	bf08      	it	eq
   e595c:	3020      	addeq	r0, #32
   e595e:	4770      	bx	lr
   e5960:	000e89d3 	.word	0x000e89d3

000e5964 <dynalib_user>:
   e5964:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   e5974:	00000000 203a6367 73617265 6c622065     ....gc: erase bl
   e5984:	206b636f 78343025 6367000a 6975715f     ock %04x..gc_qui
   e5994:	203a6b63 6e6e7572 0a676e69 5f636700     ck: running..gc_
   e59a4:	63656863 77203a6b 20657069 6c6c6170     check: wipe pall
   e59b4:	64253a6f 65647020 253a656c 67000a64     o:%d pdele:%d..g
   e59c4:	68635f63 3a6b6365 78696220 3430253a     c_check: bix:%04
   e59d4:	65642078 64253a6c 65737520 2064253a     x del:%d use:%d 
   e59e4:	726f6373 64253a65 6367000a 656c635f     score:%d..gc_cle
   e59f4:	203a6e61 61656c63 676e696e 6f6c6220     an: cleaning blo
   e5a04:	25206b63 0a783430 5f636700 61656c63     ck %04x..gc_clea
   e5a14:	6d203a6e 2065766f 65657266 72756320     n: move free cur
   e5a24:	20726f73 62206f74 6b636f6c 34302520     sor to block %04
   e5a34:	67000a78 6c635f63 3a6e6165 61747320     x..gc_clean: sta
   e5a44:	3d206574 20642520 72746e65 64253a79     te = %d entry:%d
   e5a54:	6367000a 656c635f 203a6e61 444e4946     ..gc_clean: FIND
   e5a64:	5441445f 74732041 3a657461 2d206425     _DATA state:%d -
   e5a74:	756f6620 6f20646e 69206a62 30252064      found obj id %0
   e5a84:	000a7834 635f6367 6e61656c 4f4d203a     4x..gc_clean: MO
   e5a94:	445f4556 20415441 6e756f66 61642064     VE_DATA found da
   e5aa4:	70206174 20656761 78343025 3430253a     ta page %04x:%04
   e5ab4:	20402078 78343025 6367000a 656c635f     x @ %04x..gc_cle
   e5ac4:	203a6e61 45564f4d 5441445f 6f6e2041     an: MOVE_DATA no
   e5ad4:	6a626f20 73207869 20786970 6374616d      objix spix matc
   e5ae4:	74202c68 20656b61 61206e69 68746f6e     h, take in anoth
   e5af4:	72207265 000a6e75 635f6367 6e61656c     er run..gc_clean
   e5b04:	4f4d203a 445f4556 20415441 65766f6d     : MOVE_DATA move
   e5b14:	6a626f20 25207869 3a783430 78343025      objix %04x:%04x
   e5b24:	67617020 30252065 74207834 3025206f      page %04x to %0
   e5b34:	000a7834 635f6367 6e61656c 4f4d203a     4x..gc_clean: MO
   e5b44:	445f4556 20415441 65706977 6a626f20     VE_DATA wipe obj
   e5b54:	25207869 3a783430 78343025 67617020     ix %04x:%04x pag
   e5b64:	30252065 000a7834 635f6367 6e61656c     e %04x..gc_clean
   e5b74:	4f4d203a 445f4556 20415441 746f7277     : MOVE_DATA wrot
   e5b84:	61702065 25206567 20783430 6f206f74     e page %04x to o
   e5b94:	78696a62 7264685f 746e6520 25207972     bjix_hdr entry %
   e5ba4:	20783430 6d206e69 000a6d65 635f6367     04x in mem..gc_c
   e5bb4:	6e61656c 4f4d203a 445f4556 20415441     lean: MOVE_DATA 
   e5bc4:	746f7277 61702065 25206567 20783430     wrote page %04x 
   e5bd4:	6f206f74 78696a62 746e6520 25207972     to objix entry %
   e5be4:	20783430 6d206e69 000a6d65 635f6367     04x in mem..gc_c
   e5bf4:	6e61656c 4f4d203a 4f5f4556 58494a42     lean: MOVE_OBJIX
   e5c04:	766f6d20 626f2065 2078696a 78343025      move objix %04x
   e5c14:	3430253a 61702078 25206567 20783430     :%04x page %04x 
   e5c24:	25206f74 0a783430 5f636700 61656c63     to %04x..gc_clea
   e5c34:	4d203a6e 5f45564f 494a424f 69772058     n: MOVE_OBJIX wi
   e5c44:	6f206570 78696a62 34302520 30253a78     pe objix %04x:%0
   e5c54:	70207834 20656761 78343025 6367000a     4x page %04x..gc
   e5c64:	656c635f 203a6e61 444e4946 5441445f     _clean: FIND_DAT
   e5c74:	69662041 6f20646e 78696a62 61707320     A find objix spa
   e5c84:	78695f6e 3430253a 67000a78 6c635f63     n_ix:%04x..gc_cl
   e5c94:	3a6e6165 4e494620 424f5f44 41445f4a     ean: FIND_OBJ_DA
   e5ca4:	6f204154 78696a62 746f6e20 756f6620     TA objix not fou
   e5cb4:	2021646e 65706957 67617020 30252065     nd! Wipe page %0
   e5cc4:	000a7834 635f6367 6e61656c 4946203a     4x..gc_clean: FI
   e5cd4:	445f444e 20415441 6e756f66 626f2064     ND_DATA found ob
   e5ce4:	7463656a 646e6920 61207865 61702074     ject index at pa
   e5cf4:	25206567 0a783430 5f636700 61656c63     ge %04x..gc_clea
   e5d04:	4d203a6e 5f45564f 41544144 6f747320     n: MOVE_DATA sto
   e5d14:	6d206572 6669646f 20646569 696a626f     re modified obji
   e5d24:	64685f78 61702072 202c6567 78343025     x_hdr page, %04x
   e5d34:	3430253a 67000a78 6c635f63 3a6e6165     :%04x..gc_clean:
   e5d44:	564f4d20 41445f45 73204154 65726f74      MOVE_DATA store
   e5d54:	646f6d20 65696669 626f2064 2078696a      modified objix 
   e5d64:	65676170 3025202c 253a7834 0a783430     page, %04x:%04x.
   e5d74:	5f636700 61656c63 73203a6e 65746174     .gc_clean: state
   e5d84:	25203e2d 67000a64 68635f63 3a6b6365     -> %d..gc_check:
   e5d94:	6c756620 7266206c 6c626565 64253a6b      full freeblk:%d
   e5da4:	65656e20 3a646564 66206425 3a656572      needed:%d free:
   e5db4:	64206425 3a656c65 000a6425 5f63670a     %d dele:%d...gc_
   e5dc4:	63656863 2523206b 72203a64 67206e75     check #%d: run g
   e5dd4:	72662063 625f6565 6b636f6c 64253a73     c free_blocks:%d
   e5de4:	72667020 253a6565 61702064 3a6f6c6c      pfree:%d pallo:
   e5df4:	70206425 656c6564 2064253a 5d64255b     %d pdele:%d [%d]
   e5e04:	6e656c20 2064253a 2520666f 67000a64      len:%d of %d..g
   e5e14:	68635f63 3a6b6365 206f6e20 646e6163     c_check: no cand
   e5e24:	74616469 202c7365 75746572 000a6e72     idates, return..
   e5e34:	635f6367 6b636568 6c63203a 696e6165     gc_check: cleani
   e5e44:	6220676e 6b636f6c 2c642520 73657220     ng block %d, res
   e5e54:	20746c75 000a6425 635f6367 6b636568     ult %d..gc_check
   e5e64:	6165203a 20796c72 726f6261 6e202c74     : early abort, n
   e5e74:	6572206f 746c7573 206e6f20 77206367     o result on gc w
   e5e84:	206e6568 63207366 6d6d6172 000a6465     hen fs crammed..
   e5e94:	635f6367 6b636568 6966203a 6873696e     gc_check: finish
   e5ea4:	202c6465 64206425 79747269 6c62202c     ed, %d dirty, bl
   e5eb4:	736b636f 20642520 65657266 6425202c     ocks %d free, %d
   e5ec4:	67617020 66207365 2c656572 20642520      pages free, %d 
   e5ed4:	65697274 72202c73 25207365 25000a64     tries, res %d..%
   e5ee4:	25000a73 73202073 64253a7a 676f6c20     s..%s  sz:%d log
   e5ef4:	7a736770 2064253a 62676f6c 7a736b6c     pgsz:%d logblksz
   e5f04:	2064253a 61726570 253a7a73 64612064     :%d perasz:%d ad
   e5f14:	253a7264 20783830 7a736466 2064253a     dr:%08x fdsz:%d 
   e5f24:	68636163 3a7a7365 000a6425 65676170     cachesz:%d..page
   e5f34:	646e6920 62207865 20657479 3a6e656c      index byte len:
   e5f44:	20202020 20202020 0a642520 6a626f00              %d..obj
   e5f54:	20746365 6b6f6f6c 70207075 73656761     ect lookup pages
   e5f64:	2020203a 20202020 64252020 6170000a     :         %d..pa
   e5f74:	70206567 73656761 72657020 6f6c6220     ge pages per blo
   e5f84:	203a6b63 20202020 25202020 70000a64     ck:        %d..p
   e5f94:	20656761 64616568 6c207265 74676e65     age header lengt
   e5fa4:	20203a68 20202020 20202020 000a6425     h:          %d..
   e5fb4:	656a626f 68207463 65646165 6e692072     object header in
   e5fc4:	20786564 72746e65 3a736569 0a642520     dex entries: %d.
   e5fd4:	6a626f00 20746365 65646e69 6e652078     .object index en
   e5fe4:	65697274 20203a73 20202020 64252020     tries:        %d
   e5ff4:	7661000a 616c6961 20656c62 656c6966     ..available file
   e6004:	73656420 70697263 73726f74 2520203a      descriptors:  %
   e6014:	66000a64 20656572 636f6c62 203a736b     d..free blocks: 
   e6024:	20202020 20202020 20202020 20202020                     
   e6034:	000a6425 27207325 0a277325 20732500     %d..%s '%s'..%s 
   e6044:	27732527 32302520 25000a78 64252073     '%s' %02x..%s %d
   e6054:	0a642520 20732500 000a6425               %d..%s %d..

000e6060 <__func__.8196>:
   e6060:	46495053 6d5f5346 746e756f               SPIFFS_mount.

000e606d <__func__.8243>:
   e606d:	46495053 6f5f5346 006e6570              SPIFFS_open.

000e6079 <__func__.8281>:
   e6079:	46495053 725f5346 00646165              SPIFFS_read.

000e6085 <__func__.8300>:
   e6085:	46495053 775f5346 65746972               SPIFFS_write.

000e6092 <__func__.8329>:
   e6092:	46495053 725f5346 766f6d65               SPIFFS_remove.

000e60a0 <__func__.8372>:
   e60a0:	46495053 735f5346 00746174              SPIFFS_stat.

000e60ac <__func__.8399>:
   e60ac:	46495053 635f5346 65736f6c               SPIFFS_close.

000e60b9 <__func__.8416>:
   e60b9:	46495053 6f5f5346 646e6570               SPIFFS_opendir.

000e60c8 <__func__.8433>:
   e60c8:	46495053 725f5346 64646165               SPIFFS_readdir.

000e60d7 <__func__.8441>:
   e60d7:	46495053 635f5346 65736f6c 00726964     SPIFFS_closedir.

000e60e7 <__func__.8452>:
   e60e7:	46495053 695f5346 006f666e 00445055     SPIFFS_info.UPD.
   e60f7:	0057454e 004c4544 00564f4d 00505548     NEW.DEL.MOV.HUP.
   e6107:	003f3f3f 2070616d 78343025 3430253a     ???.map %04x:%04
   e6117:	25282078 2d783430 3430252d 6f202978     x (%04x--%04x) o
   e6127:	78696a62 6970732e 30253a78 74207834     bjix.spix:%04x t
   e6137:	6970206f 30252078 000a7834 73617265     o pix %04x..eras
   e6147:	30252065 253a7838 6d000a64 746e756f     e %08x:%d..mount
   e6157:	7265203a 20657361 636f6c62 3025206b     : erase block %0
   e6167:	000a7834 66207366 0a6c6c75 20202000     4x..fs full..   
   e6177:	20202020 4c4c4143 4b434142 73252020         CALLBACK  %s
   e6187:	6a626f20 3a64695f 78343025 69707320      obj_id:%04x spi
   e6197:	30253a78 6e207834 3a786970 78343025     x:%04x npix:%04x
   e61a7:	7a736e20 0a64253a 20202000 20202020      nsz:%d..       
   e61b7:	6c6c6163 6b636162 6573203a 6e697474     callback: settin
   e61c7:	64662067 3a642520 78343025 6f646628     g fd %d:%04x(fdo
   e61d7:	3a736666 6f206425 3a736666 20296425     ffs:%d offs:%d) 
   e61e7:	696a626f 64685f78 69705f72 6f742078     objix_hdr_pix to
   e61f7:	34302520 73202c78 3a657a69 000a6425      %04x, size:%d..
   e6207:	20202020 63202020 626c6c61 3a6b6361            callback:
   e6217:	6c657220 65736165 20646620 253a6425      release fd %d:%
   e6227:	20783430 6e617073 3430253a 626f2078     04x span:%04x ob
   e6237:	5f78696a 20786970 25206f74 0a783430     jix_pix to %04x.
   e6247:	20202000 20202020 6c6c6163 6b636162     .       callback
   e6257:	6573203a 6e697474 64662067 3a642520     : setting fd %d:
   e6267:	78343025 61707320 30253a6e 6f207834     %04x span:%04x o
   e6277:	78696a62 7869705f 206f7420 78343025     bjix_pix to %04x
   e6287:	2020000a 20202020 6c616320 6361626c     ..       callbac
   e6297:	6d203a6b 69207061 70752078 65746164     k: map ix update
   e62a7:	20646620 253a6425 20783430 6e617073      fd %d:%04x span
   e62b7:	3430253a 20000a78 20202020 61632020     :%04x..       ca
   e62c7:	61626c6c 203a6b63 4e524157 20474e49     llback: WARNING 
   e62d7:	6e6b6e75 206e776f 6c6c6163 6b636162     unknown callback
   e62e7:	65766520 2520746e 63000a64 74616572      event %d..creat
   e62f7:	66203a65 646e756f 65726620 61702065     e: found free pa
   e6307:	40206567 34302520 69622078 30253a78     ge @ %04x bix:%0
   e6317:	65207834 7972746e 3430253a 6f000a78     4x entry:%04x..o
   e6327:	3a6e6570 20646620 69206425 626f2073     pen: fd %d is ob
   e6337:	6469206a 34302520 61000a78 6e657070     j id %04x..appen
   e6347:	25203a64 79622064 20736574 666f2040     d: %d bytes @ of
   e6357:	25207366 666f2064 7a697320 64252065     fs %d of size %d
   e6367:	7061000a 646e6570 666f203a 74657366     ..append: offset
   e6377:	76657220 65737265 6f742064 7a697320      reversed to siz
   e6387:	61000a65 6e657070 67203a64 68632063     e..append: gc ch
   e6397:	206b6365 6c696166 0a642520 70706100     eck fail %d..app
   e63a7:	3a646e65 34302520 74732078 2065726f     end: %04x store 
   e63b7:	696a626f 30252078 253a7834 2c783430     objix %04x:%04x,
   e63c7:	69727720 6e657474 0a642520 70706100      written %d..app
   e63d7:	3a646e65 34302520 74732078 2065726f     end: %04x store 
   e63e7:	2077656e 696a626f 64685f78 25202c72     new objix_hdr, %
   e63f7:	3a783430 78343025 7277202c 65747469     04x:%04x, writte
   e6407:	6425206e 7061000a 646e6570 3025203a     n %d..append: %0
   e6417:	73207834 65726f74 77656e20 7a697320     4x store new siz
   e6427:	20492065 69206425 626f206e 5f78696a     e I %d in objix_
   e6437:	2c726468 34302520 30253a78 202c7834     hdr, %04x:%04x, 
   e6447:	74697277 206e6574 000a6425 65707061     written %d..appe
   e6457:	203a646e 78343025 616f6c20 626f2064     nd: %04x load ob
   e6467:	6878696a 70207264 20656761 78343025     jixhdr page %04x
   e6477:	3430253a 61000a78 6e657070 25203a64     :%04x..append: %
   e6487:	20783430 61657263 6f206574 78696a62     04x create objix
   e6497:	67617020 25202c65 3a783430 78343025      page, %04x:%04x
   e64a7:	7277202c 65747469 6425206e 7061000a     , written %d..ap
   e64b7:	646e6570 3025203a 66207834 20646e69     pend: %04x find 
   e64c7:	696a626f 70732078 695f6e61 30253a78     objix span_ix:%0
   e64d7:	000a7834 65707061 203a646e 78343025     4x..append: %04x
   e64e7:	756f6620 6f20646e 63656a62 6e692074      found object in
   e64f7:	20786564 70207461 20656761 78343025     dex at page %04x
   e6507:	64665b20 7a697320 64252065 61000a5d      [fd size %d]..a
   e6517:	6e657070 25203a64 20783430 726f7473     ppend: %04x stor
   e6527:	656e2065 61642077 70206174 2c656761     e new data page,
   e6537:	34302520 30253a78 6f207834 65736666      %04x:%04x offse
   e6547:	64253a74 656c202c 6425206e 7277202c     t:%d, len %d, wr
   e6557:	65747469 6425206e 7061000a 646e6570     itten %d..append
   e6567:	3025203a 73207834 65726f74 206f7420     : %04x store to 
   e6577:	73697865 676e6974 74616420 61702061     existing data pa
   e6587:	202c6567 78343025 3430253a 666f2078     ge, %04x:%04x of
   e6597:	74657366 2c64253a 6e656c20 2c642520     fset:%d, len %d,
   e65a7:	69727720 6e657474 0a642520 70706100      written %d..app
   e65b7:	3a646e65 34302520 72772078 2065746f     end: %04x wrote 
   e65c7:	65676170 34302520 6f742078 6a626f20     page %04x to obj
   e65d7:	685f7869 65207264 7972746e 34302520     ix_hdr entry %04
   e65e7:	6e692078 6d656d20 7061000a 646e6570     x in mem..append
   e65f7:	3025203a 77207834 65746f72 67617020     : %04x wrote pag
   e6607:	30252065 74207834 626f206f 2078696a     e %04x to objix 
   e6617:	72746e65 30252079 69207834 656d206e     entry %04x in me
   e6627:	61000a6d 6e657070 25203a64 20783430     m..append: %04x 
   e6637:	726f7473 626f2065 2078696a 65676170     store objix page
   e6647:	3025202c 253a7834 2c783430 69727720     , %04x:%04x, wri
   e6657:	6e657474 0a642520 70706100 3a646e65     tten %d..append:
   e6667:	34302520 74732078 2065726f 2077656e      %04x store new 
   e6677:	657a6973 20494920 69206425 626f206e     size II %d in ob
   e6687:	5f78696a 2c726468 34302520 30253a78     jix_hdr, %04x:%0
   e6697:	202c7834 74697277 206e6574 202c6425     4x, written %d, 
   e66a7:	20736572 000a6425 65707061 203a646e     res %d..append: 
   e66b7:	78343025 6f747320 66206572 68736572     %04x store fresh
   e66c7:	6a626f20 685f7869 70207264 2c656761      objix_hdr page,
   e66d7:	34302520 30253a78 202c7834 74697277      %04x:%04x, writ
   e66e7:	206e6574 000a6425 65707061 203a646e     ten %d..append: 
   e66f7:	78343025 6f747320 6d206572 6669646f     %04x store modif
   e6707:	20646569 696a626f 64685f78 61702072     ied objix_hdr pa
   e6717:	202c6567 78343025 3430253a 77202c78     ge, %04x:%04x, w
   e6727:	74746972 25206e65 6d000a64 6669646f     ritten %d..modif
   e6737:	73203a79 65726f74 646f6d20 65696669     y: store modifie
   e6747:	626f2064 5f78696a 20726468 65676170     d objix_hdr page
   e6757:	3025202c 253a7834 2c783430 69727720     , %04x:%04x, wri
   e6767:	6e657474 0a642520 646f6d00 3a796669     tten %d..modify:
   e6777:	6f747320 70206572 69766572 2073756f      store previous 
   e6787:	69646f6d 64656966 6a626f20 70207869     modified objix p
   e6797:	2c656761 34302520 30253a78 202c7834     age, %04x:%04x, 
   e67a7:	74697277 206e6574 000a6425 69646f6d     written %d..modi
   e67b7:	203a7966 64616f6c 6a626f20 64687869     fy: load objixhd
   e67c7:	61702072 25206567 3a783430 78343025     r page %04x:%04x
   e67d7:	6f6d000a 79666964 6966203a 6f20646e     ..modify: find o
   e67e7:	78696a62 61707320 78695f6e 3430253a     bjix span_ix:%04
   e67f7:	6d000a78 6669646f 66203a79 646e756f     x..modify: found
   e6807:	6a626f20 20746365 65646e69 74612078      object index at
   e6817:	67617020 30252065 000a7834 69646f6d      page %04x..modi
   e6827:	203a7966 726f7473 656e2065 61642077     fy: store new da
   e6837:	70206174 2c656761 34302520 30253a78     ta page, %04x:%0
   e6847:	6f207834 65736666 64253a74 656c202c     4x offset:%d, le
   e6857:	6425206e 7277202c 65747469 6425206e     n %d, written %d
   e6867:	6f6d000a 79666964 7473203a 2065726f     ..modify: store 
   e6877:	65206f74 74736978 20676e69 61746164     to existing data
   e6887:	67617020 73202c65 253a6372 2c783430      page, src:%04x,
   e6897:	74736420 3430253a 30253a78 6f207834      dst:%04x:%04x o
   e68a7:	65736666 64253a74 656c202c 6425206e     ffset:%d, len %d
   e68b7:	7277202c 65747469 6425206e 6f6d000a     , written %d..mo
   e68c7:	79666964 7277203a 2065746f 65676170     dify: wrote page
   e68d7:	34302520 6f742078 6a626f20 685f7869      %04x to objix_h
   e68e7:	65207264 7972746e 34302520 6e692078     dr entry %04x in
   e68f7:	6d656d20 6f6d000a 79666964 7277203a      mem..modify: wr
   e6907:	2065746f 65676170 34302520 6f742078     ote page %04x to
   e6917:	6a626f20 65207869 7972746e 34302520      objix entry %04
   e6927:	6e692078 6d656d20 6f6d000a 79666964     x in mem..modify
   e6937:	7473203a 2065726f 69646f6d 64656966     : store modified
   e6947:	6a626f20 70207869 2c656761 34302520      objix page, %04
   e6957:	30253a78 202c7834 74697277 206e6574     x:%04x, written 
   e6967:	000a6425 6e757274 65746163 6564203a     %d..truncate: de
   e6977:	6574656c 6a626f20 70207869 20656761     lete objix page 
   e6987:	78343025 3430253a 74000a78 636e7572     %04x:%04x..trunc
   e6997:	3a657461 64707520 20657461 696a626f     ate: update obji
   e69a7:	64682078 61702072 25206567 3a783430     x hdr page %04x:
   e69b7:	78343025 206f7420 657a6973 0a642520     %04x to size %d.
   e69c7:	75727400 7461636e 6c203a65 2064616f     .truncate: load 
   e69d7:	696a626f 61702078 25206567 3a783430     objix page %04x:
   e69e7:	78343025 726f6620 74616420 70732061     %04x for data sp
   e69f7:	253a7869 0a783430 75727400 7461636e     ix:%04x..truncat
   e6a07:	67203a65 6420746f 20617461 20786970     e: got data pix 
   e6a17:	78343025 7274000a 61636e75 203a6574     %04x..truncate: 
   e6a27:	20727265 696c6176 69746164 6420676e     err validating d
   e6a37:	20617461 20786970 000a6425 6e757274     ata pix %d..trun
   e6a47:	65746163 7265203a 65642072 6974656c     cate: err deleti
   e6a57:	6420676e 20617461 20786970 000a6425     ng data pix %d..
   e6a67:	6e757274 65746163 6564203a 6574656c     truncate: delete
   e6a77:	74616420 61702061 25206567 20783430      data page %04x 
   e6a87:	20726f66 61746164 69707320 30253a78     for data spix:%0
   e6a97:	202c7834 5f727563 657a6973 0a64253a     4x, cur_size:%d.
   e6aa7:	75727400 7461636e 64203a65 74656c65     .truncate: delet
   e6ab7:	64252065 74796220 66207365 206d6f72     e %d bytes from 
   e6ac7:	61746164 67617020 30252065 66207834     data page %04x f
   e6ad7:	6420726f 20617461 78697073 3430253a     or data spix:%04
   e6ae7:	63202c78 735f7275 3a657a69 000a6425     x, cur_size:%d..
   e6af7:	6e757274 65746163 7277203a 2065746f     truncate: wrote 
   e6b07:	65676170 34302520 6f742078 6a626f20     page %04x to obj
   e6b17:	685f7869 65207264 7972746e 34302520     ix_hdr entry %04
   e6b27:	6e692078 6d656d20 7274000a 61636e75     x in mem..trunca
   e6b37:	203a6574 746f7277 61702065 25206567     te: wrote page %
   e6b47:	20783430 6f206f74 78696a62 746e6520     04x to objix ent
   e6b57:	25207972 20783430 6d206e69 000a6d65     ry %04x in mem..
   e6b67:	6e757274 65746163 6572203a 65766f6d     truncate: remove
   e6b77:	6a626f20 20746365 65646e69 65682078      object index he
   e6b87:	72656461 67617020 30252065 000a7834     ader page %04x..
   e6b97:	6e757274 65746163 6572203a 20746573     truncate: reset 
   e6ba7:	696a626f 64685f78 61702072 25206567     objix_hdr page %
   e6bb7:	0a783430 75727400 7461636e 75203a65     04x..truncate: u
   e6bc7:	74616470 626f2065 7463656a 646e6920     pdate object ind
   e6bd7:	68207865 65646165 61702072 77206567     ex header page w
   e6be7:	20687469 69646e69 20736563 20646e61     ith indices and 
   e6bf7:	657a6973 7274000a 61636e75 203a6574     size..truncate: 
   e6c07:	726f7473 6f6d2065 69666964 6f206465     store modified o
   e6c17:	78696a62 67617020 25202c65 3a783430     bjix page, %04x:
   e6c27:	78343025 6572000a 203a6461 646e6966     %04x..read: find
   e6c37:	6a626f20 25207869 3a783430 78343025      objix %04x:%04x
   e6c47:	6572000a 203a6461 64616f6c 6a626f20     ..read: load obj
   e6c57:	70207869 20656761 78343025 3430253a     ix page %04x:%04
   e6c67:	6f662078 61642072 73206174 3a786970     x for data spix:
   e6c77:	78343025 6572000a 203a6461 7366666f     %04x..read: offs
   e6c87:	253a7465 64722064 2064253a 61746164     et:%d rd:%d data
   e6c97:	69707320 30253a78 69207834 61642073      spix:%04x is da
   e6ca7:	705f6174 253a7869 20783430 72646461     ta_pix:%04x addr
   e6cb7:	3830253a 66000a78 5f656572 5f6a626f     :%08x..free_obj_
   e6cc7:	203a6469 4d544942 6e696d20 3430253a     id: BITM min:%04
   e6cd7:	616d2078 30253a78 000a7834 65657266     x max:%04x..free
   e6ce7:	6a626f5f 3a64695f 4d4f4320 696d2050     _obj_id: COMP mi
   e6cf7:	30253a6e 6d207834 253a7861 20783430     n:%04x max:%04x 
   e6d07:	706d6f63 3a746361 000a6425 65657266     compact:%d..free
   e6d17:	6a626f5f 3a64695f 6d6f6320 74636170     _obj_id: compact
   e6d27:	74206465 656c6261 20736920 6c6c7566     ed table is full
   e6d37:	7266000a 6f5f6565 695f6a62 43203a64     ..free_obj_id: C
   e6d47:	20504d4f 656c6573 69207463 7865646e     OMP select index
   e6d57:	2064253a 5f6e696d 6e756f63 64253a74     :%d min_count:%d
   e6d67:	6e696d20 3430253a 616d2078 30253a78      min:%04x max:%0
   e6d77:	63207834 61706d6f 253a7463 66000a64     4x compact:%d..f
   e6d87:	5f656572 5f6a626f 203a6469 504d4f43     ree_obj_id: COMP
   e6d97:	4c455320 75686320 253a6b6e 696d2064      SEL chunk:%d mi
   e6da7:	30253a6e 2d207834 3025203e 000a7834     n:%04x -> %04x..
   e6db7:	0e60f300 0e60f700 0e60fb00 0e60ff00     ..`...`...`...`.
   e6dc7:	0e610300 0e610700 66656400 746c7561     ..a...a..default
   e6dd7:	534d0020 534c0042 533c0042 65534950      .MSB.LSB.<SPISe
   e6de7:	6e697474 64207367 75616665 003e746c     ttings default>.
   e6df7:	4950533c 74746553 73676e69 25732520     <SPISettings %s%
   e6e07:	73252075 444f4d20 3e752545               u %s MODE%u>.

000e6e14 <_ZTVN8particle11SPISettingsE>:
	...
   e6e1c:	000d8ccd 000d8ca1 000d8ca3 4e45470a     .............GEN
   e6e2c:	54206425 3a455059 000a6425 4e49414d     %d TYPE:%d..MAIN
   e6e3c:	5441445f 6c532041 5f657661 253a4449     _DATA Slave_ID:%
   e6e4c:	46202c64 5f636e75 65646f43 2c64253a     d, Func_Code:%d,
   e6e5c:	61745320 415f7472 65726464 253a7373      Start_Address:%
   e6e6c:	4e202c64 4f5f6d75 65525f66 253a7367     d, Num_Of_Regs:%
   e6e7c:	75520064 6e696e6e 616d2067 4d5f6e69     d.Running main_M
   e6e8c:	7562646f 61642073 70206174 206c6c6f     odbus data poll 
   e6e9c:	6d6f7266 65687420 6e654720 00746553     from the GenSet.
   e6eac:	49534142 5f54534e 41544144 616c5320     BASINST_DATA Sla
   e6ebc:	495f6576 64253a44 7546202c 435f636e     ve_ID:%d, Func_C
   e6ecc:	3a65646f 202c6425 72617453 64415f74     ode:%d, Start_Ad
   e6edc:	73657264 64253a73 754e202c 664f5f6d     dress:%d, Num_Of
   e6eec:	6765525f 64253a73 6e755200 676e696e     _Regs:%d.Running
   e6efc:	73614220 74736e49 646f4d5f 20737562      BasInst_Modbus 
   e6f0c:	61746164 6c6f7020 7266206c 74206d6f     data poll from t
   e6f1c:	47206568 65536e65 45440074 534e4952     he GenSet.DERINS
   e6f2c:	41445f54 53204154 6576616c 3a44495f     T_DATA Slave_ID:
   e6f3c:	202c6425 636e7546 646f435f 64253a65     %d, Func_Code:%d
   e6f4c:	7453202c 5f747261 72646441 3a737365     , Start_Address:
   e6f5c:	202c6425 5f6d754e 525f664f 3a736765     %d, Num_Of_Regs:
   e6f6c:	52006425 696e6e75 4420676e 6e497265     %d.Running DerIn
   e6f7c:	4d5f7473 7562646f 61642073 70206174     st_Modbus data p
   e6f8c:	206c6c6f 6d6f7266 65687420 6e654720     oll from the Gen
   e6f9c:	00746553 6e6e7552 20676e69 69676e45     Set.Running Engi
   e6fac:	535f656e 65746174 74616420 6f702061     ne_State data po
   e6fbc:	66206c6c 206d6f72 20656874 536e6547     ll from the GenS
   e6fcc:	7b007465 2276220a 2231223a 67220a2c     et.{."v":"1",."g
   e6fdc:	3b006e65 61625f00 736e4973 0a3a2274     en.;._basInst":.
   e6fec:	645f0022 6e497265 3a227473 7b00220a     "._derInst":.".{
   e6ffc:	3a227622 2c223122 3a227322 67222c00     "v":"1","s":.,"g
   e700c:	5f646972 49736162 2274736e 2c00223a     rid_basInst":".,
   e701c:	69726722 65445f64 736e4972 223a2274     "grid_DerInst":"
   e702c:	220a7b00 223a2265 655f7867 726f7272     .{."e":"gx_error
   e703c:	220a2c22 223a2273 64697267 220a2c22     ",."s":"grid",."
   e704c:	223a2263 0a2c2200 22737422 6700223a     c":".",."ts":".g
   e705c:	76655f78 00746e65 65220a7b 67223a22     x_event.{."e":"g
   e706c:	72655f78 22726f72 73220a2c 67223a22     x_error",."s":"g
   e707c:	2c226e65 2263220a 6700223a 72655f78     en",."c":".gx_er
   e708c:	00726f72 4e45470a 42206425 52445541     ror..GEN%d BAUDR
   e709c:	3a455441 5f006425 53676e65 65746174     ATE:%d._engState
   e70ac:	220a3a22 22414e00 4f007d0a 7d0a224e     ":.".NA".}.ON".}
   e70bc:	46464f00 007d0a22 6d5f7867 69727465     .OFF".}.gx_metri
   e70cc:	73007363 00706f74 72617473 65470074     cs.stop.start.Ge
   e70dc:	654d206e 63697274 74732073 00657461     n Metrics state.
   e70ec:	0046464f 206e6547 7274654d 20736369     OFF.Gen Metrics 
   e70fc:	72657571 20736569 69746341 65746176     queries Activate
   e710c:	65470064 654d206e 63697274 75712073     d.Gen Metrics qu
   e711c:	65697265 65442073 69746361 65746176     eries Deactivate
   e712c:	72470064 4d5f6469 73637274 6174735f     d.Grid_Mtrcs_sta
   e713c:	47006574 20646972 7274654d 20736369     te.Grid Metrics 
   e714c:	63616544 61766974 00646574 64697247     Deactivated.Grid
   e715c:	74654d20 73636972 74634120 74617669      Metrics Activat
   e716c:	203a6465 736e6547 47007465 20646972     ed: Genset.Grid 
   e717c:	7274654d 20736369 69746341 65746176     Metrics Activate
   e718c:	4d203a64 72657465 53227b00 65746174     d: Meter.{"State
   e719c:	4f223a22 7d224646 53227b00 65746174     ":"OFF"}.{"State
   e71ac:	4f223a22 222c224e 72756f53 3a226563     ":"ON","Source":
   e71bc:	6e654722 22746573 227b007d 74617453     "Genset"}.{"Stat
   e71cc:	223a2265 2c224e4f 756f5322 22656372     e":"ON","Source"
   e71dc:	654d223a 22726574 4942007d 5952414e     :"Meter"}.BINARY
   e71ec:	504e4920 20535455 45564148 41484320      INPUTS HAVE CHA
   e71fc:	4445474e 5200203a 53204454 63206950     NGED: .RTD SPi c
   e720c:	206d6d6f 6f727265 54520072 69482044     omm error.RTD Hi
   e721c:	54206867 73657268 646c6f68 44545200     gh Threshold.RTD
   e722c:	776f4c20 72685420 6f687365 5200646c      Low Threshold.R
   e723c:	4e494645 30203e20 2a35382e 73696142     EFIN > 0.85*Bais
   e724c:	46455200 3c204e49 382e3020 61422a35     .REFIN < 0.85*Ba
   e725c:	202c7369 43524f46 706f2d45 52006e65     is, FORCE-open.R
   e726c:	3c204454 382e3020 61422a35 202c7369     TD < 0.85*Bais, 
   e727c:	43524f46 706f2d45 6f006e65 2f726576     FORCE-open.over/
   e728c:	65646e75 6f762072 6761746c 75660065     under voltage.fu
   e729c:	6c206c65 6c657665 72797000 6d6f6e61     el level.pyranom
   e72ac:	72657465 6d657400 61726570 65727574     eter.temperature
   e72bc:	73657200 6e657320 00726f73 69676964     .res sensor.digi
   e72cc:	006c6174 6c616e61 7b00676f 3a227622     tal.analog.{"v":
   e72dc:	22312220 74220a2c 5f706d65 736e6573      "1",."temp_sens
   e72ec:	3a22726f 44220020 74696769 0a226c61     or": ."Digital".
   e72fc:	000a7d00 6e696f47 6f642067 66206e77     .}..Going down f
   e730c:	7320726f 65747379 6572206d 2e746573     or system reset.
   e731c:	65655320 20617920 6574616c 48002e72      See ya later..H
   e732c:	69747469 7220676e 74657365 616c6544     itting resetDela
   e733c:	69742079 2172656d 63655200 65766965     y timer!.Receive
   e734c:	6c632064 2064756f 65736572 6f632074     d cloud reset co
   e735c:	6e616d6d 72203a64 74657365 676e6974     mmand: resetting
   e736c:	6d6f6d20 61746e65 796c6972 6553002e      momentarily..Se
   e737c:	6e697474 4d502067 43204349 67726168     tting PMIC Charg
   e738c:	4f207265 202c6666 20646e61 6c657546     er Off, and Fuel
   e739c:	67756147 6f742065 656c7320 002e7065     Gauge to sleep..
   e73ac:	74746553 20676e69 43494d50 61684320     Setting PMIC Cha
   e73bc:	72656772 006e4f20 6e726157 3a676e69     rger On.Warning:
   e73cc:	6e6f6c20 6f6c2067 2073706f 2520666f      long loops of %
   e73dc:	736d756c 65227b00 67223a22 72655f78     lums.{"e":"gx_er
   e73ec:	22726f72 7322202c 2c003a22 73742220     ror", "s":., "ts
   e73fc:	6d003a22 6d007465 6c257465 68255f75     ":.met.met%lu_%h
   e740c:	65540075 54007473 6c61746f 6f747320     u.Test.Total sto
   e741c:	65676172 70616320 74696361 6e6f2079     rage capacity on
   e742c:	65687420 20732520 74726170 6e6f7469      the %s partiton
   e743c:	6c25203a 79622075 00736574 64657355     : %lu bytes.Used
   e744c:	79622820 29736574 6c25203a 79622075      (bytes): %lu by
   e745c:	00736574 65657246 79622820 29736574     tes.Free (bytes)
   e746c:	6c25203a 79622069 0a736574 65724600     : %li bytes..Fre
   e747c:	74732065 6761726f 25203a65 2566322e     e storage: %.2f%
   e748c:	2d2d0025 49202d2d 4954494e 5a494c41     %.---- INITIALIZ
   e749c:	20474e49 46495053 2d205346 002d2d2d     ING SPIFFS ----.
   e74ac:	6e756f4d 65722074 203d2073 00646c25     Mount res = %ld.
   e74bc:	4548544f 61502052 74697472 206e6f69     OTHER Partition 
   e74cc:	68746977 7a697320 31203a65 426b2036     with size: 16 kB
   e74dc:	756f6d20 6465746e 63757320 73736563      mounted success
   e74ec:	6c6c7566 53002e79 66666970 6f6d2073     fully..Spiffs mo
   e74fc:	20746e75 6c696166 20216465 544f202d     unt failed! - OT
   e750c:	20524548 74726170 6e6f7469 69614600     HER partiton.Fai
   e751c:	2064656c 63206f74 74616572 69662065     led to create fi
   e752c:	002e656c 66207325 20656c69 61657263     le..%s file crea
   e753c:	20646574 63637573 66737365 796c6c75     ted successfully
   e754c:	69614600 2064656c 77206f74 65746972     .Failed to write
   e755c:	74616420 6f742061 6c696620 25203a65      data to file: %
   e756c:	61440073 73206174 65636375 75667373     s.Data successfu
   e757c:	20796c6c 74697277 206e6574 66206f74     lly written to f
   e758c:	20656c69 50007325 69747261 6e6f6974     ile %s.Partition
   e759c:	70797420 6e752065 74696e69 696c6169      type uninitiali
   e75ac:	2064657a 20646e61 74726170 6f697469     zed and partitio
   e75bc:	6973206e 6320657a 6f6e6e61 65622074     n size cannot be
   e75cc:	72657a20 7300216f 66206970 6873616c      zero!.spi flash
   e75dc:	20732500 74726150 6f697469 6977206e     .%s Partition wi
   e75ec:	73206874 3a657a69 4d752520 6f6d2042     th size: %uMB mo
   e75fc:	65746e75 75732064 73656363 6c756673     unted successful
   e760c:	002e796c 6146005f 64656c69 206f7420     ly.._.Failed to 
   e761c:	74697277 656d2065 63697274 74616420     write metric dat
   e762c:	6f742061 6c696620 27203a65 00277325     a to file: '%s'.
   e763c:	6c696146 74206465 706f206f 66206e65     Failed to open f
   e764c:	20656c69 27007325 20277325 656c6966     ile %s.'%s' file
   e765c:	65706f20 2064656e 63637573 66737365      opened successf
   e766c:	796c6c75 6c694600 69732065 203a657a     ully.File size: 
   e767c:	00756c25 6f6d654d 61207972 636f6c6c     %lu.Memory alloc
   e768c:	6f697461 6166206e 64656c69 72450021     ation failed!.Er
   e769c:	20726f72 7274656d 72206369 69646165     ror metric readi
   e76ac:	6420676e 20617461 6d6f7266 2527203a     ng data from: '%
   e76bc:	41002773 6d657474 6e697470 6f742067     s'.Attempting to
   e76cc:	6c656420 20657465 27732527 69614600      delete '%s'.Fai
   e76dc:	2064656c 64206f74 74656c65 25272065     led to delete '%
   e76ec:	00212773 72616553 6e696863 6f662067     s'!.Searching fo
   e76fc:	68742072 6c6f2065 74736564 6c696620     r the oldest fil
   e770c:	2e2e2e65 65685400 646c6f20 20747365     e....The oldest 
   e771c:	656c6966 3a736920 776f4c00 6f747320     file is:.Low sto
   e772c:	65676172 72687420 6f687365 6820646c     rage threshold h
   e773c:	20217469 65747441 6974706d 7420676e     it! Attempting t
   e774c:	6564206f 6574656c 646c6f20 20747365     o delete oldest 
   e775c:	61746164 6c43002e 696e6165 7320676e     data..Cleaning s
   e776c:	61726f74 2e2e6567 6547002e 6e697474     torage....Gettin
   e777c:	6e692067 6d726f66 6f697461 6f66206e     g information fo
   e778c:	73252072 74654d00 20636972 74706d65     r %s.Metric empt
   e779c:	726f2079 726f6320 74707572 50006465     y or corrupted.P
   e77ac:	696c6275 6e696873 656d2067 63697274     ublishing metric
   e77bc:	73252720 72662027 66206d6f 6873616c      '%s' from flash
   e77cc:	49002e2e 6573206e 6153646e 4d646576     ...In sendSavedM
   e77dc:	69727465 2e2e7363 614c002e 70207473     etrics....Last p
   e77ec:	696c6275 64656873 74656d20 20636972     ublished metric 
   e77fc:	656d6974 6d617473 6e612070 6e692064     timestamp and in
   e780c:	3a786564 756c2520 6425202c 73614c00     dex: %lu, %d.Las
   e781c:	61732074 20646576 7274656d 74206369     t saved metric t
   e782c:	73656d69 706d6174 646e6120 646e6920     imestamp and ind
   e783c:	203a7865 2c756c25 00642520 206c6c41     ex: %lu, %d.All 
   e784c:	65766173 654d2064 63697274 61682073     saved Metrics ha
   e785c:	62206576 206e6565 6c627570 65687369     ve been publishe
   e786c:	4d002e64 6d697861 6e206d75 65626d75     d..Maximum numbe
   e787c:	25282072 6f202975 61732066 20646576     r (%u) of saved 
   e788c:	7274656d 20736369 65766168 65656220     metrics have bee
   e789c:	7570206e 73696c62 20646568 74206e69     n published in t
   e78ac:	20736968 706f6f6c 62755000 6873696c     his loop.Publish
   e78bc:	20676e69 7274656d 20736369 75716572     ing metrics requ
   e78cc:	65747365 72662064 74206d6f 43206568     ested from the C
   e78dc:	64756f6c 61002e2e 672e7070 70735f78     loud...app.gx_sp
   e78ec:	73666669 6e656700 65670031 6700326e     iffs.gen1.gen2.g
   e78fc:	00336e65 346e6567 6e656700 65670035     en3.gen4.gen5.ge
   e790c:	6300366e 7261656c 00000000 00000000     n6.clear........
   e791c:	00ffffff 00ffffff 00000000 ffff0000     ................
   e792c:	ffff00ff 000000ff 00000000 00ffffff     ................
   e793c:	00ffffff 00000000 ffff0000 ffff00ff     ................
   e794c:	000000ff 00000000 00ffffff 00ffffff     ................
   e795c:	00000000 ffff0000 ffff00ff 654c00ff     ..............Le
   e796c:	74732064 20657461 69207369 6c61766e     d state is inval
   e797c:	61006469 61007070 732e7070 74667968     id.app.app.shyft
   e798c:	6174735f 61006574 732e7070 66666970     _state.app.spiff
   e799c:	00000073                                s...

000e79a0 <_ZTVN5spark10LogHandlerE>:
	...
   e79b0:	000d40a9 000dd1c1                       .@......

000e79b8 <_ZTVN5spark16SerialLogHandlerE>:
	...
   e79c0:	000dd1cd 000dd201 000e3135 000dd1c3     ........51......
   e79d0:	636e7973 20676e69 65736552 523a3a74     syncing Reset::R
   e79e0:	6f736165 666f206e 70797420 53003d65     eason of type=.S
   e79f0:	54465948 4154535f 4c5f4554 4547474f     HYFT_STATE_LOGGE
   e7a00:	414e5f52 6400454d 61747369 0065636e     R_NAME.distance.
   e7a10:	2276227b 3122203a 220a2c22 5f736675     {"v": "1",."ufs_
   e7a20:	666e6f63 3a226769 000a7b20 6c655322     config": {.."Sel
   e7a30:	65746365 6e492064 22747570 4122203a     ected Input": "A
   e7a40:	6f6c616e 000a2267 6c655322 65746365     nalog".."Selecte
   e7a50:	6e492064 22747570 4422203a 74696769     d Input": "Digit
   e7a60:	2c226c61 5322000a 63656c65 20646574     al",.."Selected 
   e7a70:	7274654d 3a226369 6f562220 6761746c     Metric": "Voltag
   e7a80:	000a2265 6c655322 65746365 654d2064     e".."Selected Me
   e7a90:	63697274 22203a22 74736944 65636e61     tric": "Distance
   e7aa0:	7d000a22 55007d0a 253a5346 41422064     "..}.}.UFS:%d BA
   e7ab0:	41524455 253a4554 654e0064 65642077     UDRATE:%d.New de
   e7ac0:	65636976 6843202e 69676e61 7320676e     vice. Changing s
   e7ad0:	69747465 2073676e 64206f74 75616665     ettings to defau
   e7ae0:	6320746c 69666e6f 46550067 55515f53     lt config.UFS_QU
   e7af0:	5f595245 41544144 616c5320 495f6576     ERY_DATA Slave_I
   e7b00:	64253a44 7546202c 435f636e 3a65646f     D:%d, Func_Code:
   e7b10:	202c6425 72617453 64415f74 73657264     %d, Start_Addres
   e7b20:	64253a73 754e202c 664f5f6d 6765525f     s:%d, Num_Of_Reg
   e7b30:	64253a73 6e755200 676e696e 646f4d20     s:%d.Running Mod
   e7b40:	20737562 61746164 6c6f7020 7266206c     bus data poll fr
   e7b50:	74206d6f 55206568 41005346 20524444     om the UFS.ADDR 
   e7b60:	20202020 554c4156 58250045 20202020         VALUE.%X    
   e7b70:	64252020 52ffff00 696e6e75 4320676e       %d...Running C
   e7b80:	756c6c65 2072616c 74736554 00203a73     ellular Tests: .
   e7b90:	7265704f 726f7461 6d616e20 72003d65     Operator name=.r
   e7ba0:	3d697373 202c6425 6c617571 2c64253d     ssi=%d, qual=%d,
   e7bb0:	72616220 64253d73 61655200 676e6964      bars=%d.Reading
   e7bc0:	53465520 002e2e2e 706d6153 676e696c      UFS....Sampling
   e7bd0:	43444120 47002e2e 654d2058 63697274      ADC...GX Metric
   e7be0:	62757020 6873696c 73206465 65636375      published succe
   e7bf0:	75667373 2c796c6c 74756220 746f6e20     ssfully, but not
   e7c00:	76617320 74206465 6c66206f 2e687361      saved to flash.
   e7c10:	69614600 2064656c 73206f74 20657661     .Failed to save 
   e7c20:	4d205847 69727465 6f742063 616c6620     GX Metric to fla
   e7c30:	47006873 654d2058 63697274 73617720     sh.GX Metric was
   e7c40:	69656e20 72656874 76617320 6e206465      neither saved n
   e7c50:	7020726f 696c6275 64656873 47002121     or published!!.G
   e7c60:	654d2058 63697274 73252720 61732027     X Metric '%s' sa
   e7c70:	20646576 66206f74 6873616c 63757320     ved to flash suc
   e7c80:	73736563 6c6c7566 47002179 654d2058     cessfully!.GX Me
   e7c90:	63697274 62757020 6873696c 73206465     tric published s
   e7ca0:	65636375 75667373 2e796c6c 746e4900     uccessfully..Int
   e7cb0:	656e7265 6f6e2074 76612074 616c6961     ernet not availa
   e7cc0:	21656c62 20584720 7274654d 6f206369     ble! GX Metric o
   e7cd0:	20796c6e 65766173 6f6e2064 75702074     nly saved not pu
   e7ce0:	73696c62 21646568 76615300 47206465     blished!.Saved G
   e7cf0:	654d2058 63697274 75532073 73656363     X Metrics Succes
   e7d00:	6c756673 5320796c 20746e65 43206f74     sfully Sent to C
   e7d10:	64756f6c 6f4e002e 6e696874 6f742067     loud..Nothing to
   e7d20:	2e6f6420 6c695700 6572206c 656d7573      do..Will resume
   e7d30:	62757020 6873696c 20676e69 6e206e69      publishing in n
   e7d40:	20747865 706f6f6c 654d0021 63697274     ext loop!.Metric
   e7d50:	62757020 6873696c 20676e69 706f7473      publishing stop
   e7d60:	20646570 20657564 63206f74 656e6e6f     ped due to conne
   e7d70:	6f697463 6f6c206e 00217373 2276227b     ction loss!.{"v"
   e7d80:	2231223a 6422002c 63697665 223a2265     :"1",."device":"
   e7d90:	76227b00 31223a22 73222c22 6f736e65     .{"v":"1","senso
   e7da0:	223a2272 53007c00 74726174 6d697420     r":".|.Start tim
   e7db0:	25203a65 4500756c 7420646e 3a656d69     e: %lu.End time:
   e7dc0:	756c2520 6e696200 52797261 00646165      %lu.binaryRead.
   e7dd0:	6d6e6567 69727465 57537363 69726700     genmetricsSW.gri
   e7de0:	74656d64 73636972 67005753 654d7465     dmetricsSW.getMe
   e7df0:	63697274 65670073 65724674 616c4665     trics.getFreeFla
   e7e00:	74536873 6761726f 65670065 74656d6e     shStorage.genmet
   e7e10:	73636972 54415453 69726700 74656d64     ricsSTAT.gridmet
   e7e20:	73636972 54415453 74657300 736e6553     ricsSTAT.setSens
   e7e30:	6552726f 6e696461 61745367 00737574     orReadingStatus.
   e7e40:	656c6573 75467463 65536c65 726f736e     selectFuelSensor
   e7e50:	75706e49 66750074 6e6f4373 75676966     Input.ufsConfigu
   e7e60:	69746172 00736e6f 656c6573 75467463     rations.selectFu
   e7e70:	654c6c65 4d6c6576 69727465 66750063     elLevelMetric.uf
   e7e80:	6c655373 65746365 6e6f4364 73676966     sSelectedConfigs
   e7e90:	6c657300 54746365 65706d65 75746172     .selectTemperatu
   e7ea0:	65536572 726f736e 6c657300 65746365     reSensor.selecte
   e7eb0:	6d655464 61726570 65727574 736e6553     dTemperatureSens
   e7ec0:	6500726f 6c62616e 616c4665 73006873     or.enableFlash.s
   e7ed0:	654d7465 63697274 65746e49 6c617672     etMetricInterval
   e7ee0:	4e490073 45535520 544f4e00 45535520     s.IN USE.NOT USE
   e7ef0:	75660044 6c5f6c65 6c657665 74616200     D.fuel_level.bat
   e7f00:	6f765f74 7000746c 6e617279 65746d6f     t_volt.pyranomte
   e7f10:	65725f72 6e696461 616c0067 705f7473     r_reading.last_p
   e7f20:	696c6275 64656873 74656d5f 00636972     ublished_metric.
   e7f30:	44003144 33440032 00344400 666e6f63     D1.D2.D3.D4.conf
   e7f40:	75466769 6974636e 63006e6f 69666e6f     igFunction.confi
   e7f50:	65727567 736e6547 00737465 746e6f63     gureGensets.cont
   e7f60:	476c6f72 65736e65 72007374 74657365     rolGensets.reset
   e7f70:	504e4900 56205455 41544c4f 203a4547     .INPUT VOLTAGE: 
   e7f80:	4e006625 6176206f 2064696c 73616c66     %f.No valid flas
   e7f90:	68632068 6a007069 63656465 253d6449     h chip.jedecId=%
   e7fa0:	786c3630 414c4600 53204853 55544154     06lx.FLASH STATU
   e7fb0:	25203a53 614c0073 70207473 696c6275     S: %s.Last publi
   e7fc0:	64656873 74656d20 20636972 72207361     shed metric as r
   e7fd0:	20646165 6d6f7266 50454520 3a4d4f52     ead from EEPROM:
   e7fe0:	00732520 2276227b 2231223a 6567222c      %s.{"v":"1","ge
   e7ff0:	6f635f6e 6769666e 7b3a2273 65472200     n_configs":{."Ge
   e8000:	2264256e 7325223a 2c64252c 252c6425     n%d":"%s,%d,%d,%
   e8010:	64252c64 2275252c 007d7d00 2276227b     d,%d,%u".}}.{"v"
   e8020:	2231223a 656d222c 63697274 746e695f     :"1","metric_int
   e8030:	61767265 3a22736c 4422007b 63697665     ervals":{."Devic
   e8040:	253a2265 53222c64 6f736e65 253a2272     e":%d,"Sensor":%
   e8050:	47222c64 3a226e65 222c6425 64697247     d,"Gen":%d,"Grid
   e8060:	64253a22 73795300 6f6f6220 21646574     ":%d.Sys booted!
   e8070:	74655300 73207075 74726174 50002e2e     .Setup start...P
   e8080:	61662045 64656c69 54000a20 6d726568     E failed ..Therm
   e8090:	756f636f 20656c70 6c696166 46006465     ocouple failed.F
   e80a0:	6873616c 69616620 0064656c 63637553     lash failed.Succ
   e80b0:	66737365 796c6c75 6e6f6320 75676966     essfully configu
   e80c0:	20646572 69766564 68006563 6f6c6c65     red device.hello
   e80d0:	53002121 70757465 6d6f6320 74656c70     !!.Setup complet
   e80e0:	6e450065 666f2064 74657320 00217075     e.End of setup!.
   e80f0:	73736170 65737500 73650072 2e657965     pass.user.eseye.
   e8100:	006d6f63                                com.

000e8104 <_ZTV5Timer>:
	...
   e810c:	000ddd75 000dddbd 000ddc03              u...........

000e8118 <_ZTV15SpiFlashWinbond>:
	...
   e8120:	000ddc11 000ddc25 000e05b9 000e027b     ....%.......{...
   e8130:	000e0451 000e0515 000e0605 000e0691     Q...............
   e8140:	000e06e3 00000000 ffff0000 ffff00ff     ................
   e8150:	000000ff 00000000 00ffffff 00ffffff     ................
   e8160:	00000000 ffff0000 ffff00ff 000000ff     ................
   e8170:	00000000 00ffffff 00ffffff 00000000     ................
   e8180:	ffff0000 ffff00ff 000000ff 00000000     ................
   e8190:	00ffffff 00ffffff 45505954 4b4e555f     ........TYPE_UNK
   e81a0:	4e574f4e 50595400 4b4f5f45 50595400     NOWN.TYPE_OK.TYP
   e81b0:	52455f45 00524f52 45505954 4e4f435f     E_ERROR.TYPE_CON
   e81c0:	5443454e 50595400 4f4e5f45 52524143     NECT.TYPE_NOCARR
   e81d0:	00524549 45505954 444f4e5f 544c4149     IER.TYPE_NODIALT
   e81e0:	00454e4f 45505954 5355425f 59540059     ONE.TYPE_BUSY.TY
   e81f0:	4e5f4550 534e414f 00524557 45505954     PE_NOANSWER.TYPE
   e8200:	4f52505f 0054504d 45505954 554c505f     _PROMPT.TYPE_PLU
   e8210:	59540053 415f4550 54524f42 74004445     S.TYPE_ABORTED.t
   e8220:	3d657079 78257830 6c656300 616c756c     ype=0x%x.cellula
   e8230:	65722072 6e6f7073 74206573 3d657079     r response type=
   e8240:	6c207325 253d6e65 6e5c0064 00725c00     %s len=%d.\n.\r.
   e8250:	30257830 25007832 64252c64 4f445500     0x%02x.%d,%d.UDO
   e8260:	41004e50 44552b54 3d4e504f 0a0d6425     PN.AT+UDOPN=%d..
   e8270:	51534300 2b544100 0d515343 2b0a000a     .CSQ.AT+CSQ....+
   e8280:	203a7325 64646100 20676e69 696c6564     %s: .adding deli
   e8290:	6574696d 25272072 00002773              miter '%s'..

000e829c <_ZTV30CellularHelperRSSIQualResponse>:
	...
   e82a4:	000df795                                ....

000e82a8 <_ZTV32CellularHelperPlusStringResponse>:
	...
   e82b0:	000df795 42444f4d 203e5355 3a334346     ....MODBUS> FC3:
   e82c0:	4f4d0020 53554244 7600203e 64696c61      .MODBUS> .valid
   e82d0:	41657461 6577736e 4e203a72 45525f4f     ateAnswer: NO_RE
   e82e0:	00594c50 696c6176 65746164 77736e41     PLY.validateAnsw
   e82f0:	203a7265 5f525245 45435845 4f495450     er: ERR_EXCEPTIO
   e8300:	6176004e 6164696c 6e416574 72657773     N.validateAnswer
   e8310:	6366203a 70757374 74726f70 76006465     : fctsupported.v
   e8320:	64696c61 41657461 6577736e 45203a72     alidateAnswer: E
   e8330:	465f4358 5f434e55 45444f43 6c617600     XC_FUNC_CODE.val
   e8340:	74616469 736e4165 3a726577 206f6e20     idateAnswer: no 
   e8350:	75737369 4d007365 5542444f 43203e53     issues.MODBUS> C
   e8360:	676e6168 20676e69 52206f74 6f6d2058     hanging to RX mo
   e8370:	002e6564 42444f4d 203e5355 6e616843     de..MODBUS> Chan
   e8380:	676e6967 206f7420 6d205854 2e65646f     ging to TX mode.
   e8390:	444f4d00 3e535542 74656720 75627852     .MODBUS> getRxbu
   e83a0:	72656666 74756f20 3a747570 4f4d0020     ffer output: .MO
   e83b0:	53554244 5245203e 55425f52 4f5f4646     DBUS> ERR_BUFF_O
   e83c0:	46524556 00574f4c 42444f4d 203e5355     VERFLOW.MODBUS> 
   e83d0:	66667542 73207265 3a657a69 00642520     Buffer size: %d.
   e83e0:	42444f4d 203e5355 66667542 73207265     MODBUS> Buffer s
   e83f0:	3a657a69 38750020 65637865 6f697470     ize: .u8exceptio
   e8400:	25203a6e 424d0064 5f43465f 44414552     n: %d.MB_FC_READ
   e8410:	494f435f 4d00534c 43465f42 4145525f     _COILS.MB_FC_REA
   e8420:	49445f44 45524353 495f4554 5455504e     D_DISCRETE_INPUT
   e8430:	5f424d00 525f4346 5f444145 55504e49     .MB_FC_READ_INPU
   e8440:	45525f54 54534947 4d005245 43465f42     T_REGISTER.MB_FC
   e8450:	4145525f 45525f44 54534947 00535245     _READ_REGISTERS.
   e8460:	465f424d 52575f43 5f455449 4c494f43     MB_FC_WRITE_COIL
   e8470:	5f424d00 575f4346 45544952 4745525f     .MB_FC_WRITE_REG
   e8480:	45545349 424d0052 5f43465f 54495257     ISTER.MB_FC_WRIT
   e8490:	554d5f45 5049544c 435f454c 534c494f     E_MULTIPLE_COILS
   e84a0:	5f424d00 575f4346 45544952 4c554d5f     .MB_FC_WRITE_MUL
   e84b0:	4c504954 45525f45 54534947 00535245     TIPLE_REGISTERS.
   e84c0:	68746f6e 20676e69 64206f74 6e69206f     nothing to do in
   e84d0:	65687420 38756120 6e756620 6f700063      the au8 func.po
   e84e0:	4f206c6c 4220214b 65666675 69732072     ll OK! Buffer si
   e84f0:	203a657a 4d006425 5542444f 53203e53     ze: %d.MODBUS> S
   e8500:	69646e65 7420676e 75622078 72656666     ending tx buffer
   e8510:	444f4d00 3e535542 6e657320 42785464     .MODBUS> sendTxB
   e8520:	65666675 2d2d2072 4f4d0020 53554244     uffer -- .MODBUS
   e8530:	7874203e 66756220 20726566 20746573     > tx buffer set 
   e8540:	74206f74 736e6172 0074696d 42444f4d     to transmit.MODB
   e8550:	203e5355 62207874 65666675 77732072     US> tx buffer sw
   e8560:	68637469 63616220 6f74206b 20787220     itch back to rx 
   e8570:	65646f6d 444f4d00 3e535542 65755120     mode.MODBUS> Que
   e8580:	4d007972 5542444f 51203e53 79726575     ry.MODBUS> Query
   e8590:	72724520 203a726f 61206f4e 65726464      Error: No addre
   e85a0:	4d007373 5542444f 51203e53 79726575     ss.MODBUS> Query
   e85b0:	72724520 203a726f 656d6f53 79646f62      Error: Somebody
   e85c0:	736c6520 72742065 6d736e61 69747469      else transmitti
   e85d0:	4d00676e 5542444f 51203e53 79726575     ng.MODBUS> Query
   e85e0:	72724520 203a726f 72646441 20737365      Error: Address 
   e85f0:	2074756f 7220666f 65676e61 4d00203a     out of range: .M
   e8600:	5542444f 51203e53 79726575 7874203a     ODBUS> Query: tx
   e8610:	66756220 20726566 61657263 00646574      buffer created.
   e8620:	42444f4d 203e5355 72657551 74203a79     MODBUS> Query: t
   e8630:	75622078 72656666 6e657320               x buffer sent.

000e863e <_ZL12fctsupported>:
   e863e:	04030201 100f0605                        ..........

000e8648 <_ZTV8SpiFlash>:
	...
   e8650:	000e0279 000e0293 000e05b9 000e027b     y...........{...
   e8660:	000e0451 000e0515 000e0605 000e0691     Q...............
   e8670:	000e06e3 6e756f6d 65722074 6c253d73     ....mount res=%l
   e8680:	6f6d0064 20746e75 65746661 6f662072     d.mount after fo
   e8690:	74616d72 73657220 646c253d 61657200     rmat res=%ld.rea
   e86a0:	64612064 303d7264 786c2578 7a697320     d addr=0x%lx siz
   e86b0:	6c253d65 61642075 253d6174 25783230     e=%lu data=%02x%
   e86c0:	00783230 64616572 64646120 78303d72     02x.read addr=0x
   e86d0:	20786c25 657a6973 756c253d 69727700     %lx size=%lu.wri
   e86e0:	61206574 3d726464 6c257830 69732078     te addr=0x%lx si
   e86f0:	253d657a 6420756c 3d617461 78323025     ze=%lu data=%02x
   e8700:	78323025 69727700 61206574 3d726464     %02x.write addr=
   e8710:	6c257830 69732078 253d657a 6500756c     0x%lx size=%lu.e
   e8720:	65736172 63657320 20726f74 72646461     rase sector addr
   e8730:	2578303d 7320786c 3d657a69 00756c25     =0x%lx size=%lu.

000e8740 <_ZTV14SpiffsParticle>:
	...
   e8748:	000e071f 000e0721                       ....!...

000e8750 <_ZTVN5spark13CellularClassE>:
	...
   e8758:	000e1563 000e1559 000e154f 000e1505     c...Y...O.......
   e8768:	000e1543 000e1537 000e348d 000e3495     C...7....4...4..
   e8778:	000e152b 000e1523 000e1519 000e150f     +...#...........
   e8788:	000e34c5                                .4..

000e878c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   e8794:	000e159d 000e15a3 000e15e1 000e15b1     ................
   e87a4:	000e159f                                ....

000e87a8 <_ZTVN5spark13EthernetClassE>:
	...
   e87b0:	000e1ba7 000e1b9d 000e1b93 000e1b89     ................
   e87c0:	000e1b7d 000e1b71 000e348d 000e3495     }...q....4...4..
   e87d0:	000e1b65 000e1b5d 000e1b53 000e1b49     e...]...S...I...
   e87e0:	000e34c5                                .4..

000e87e4 <_ZTV7TwoWire>:
	...
   e87ec:	000e1e79 000e1ec3 000e1e9b 000e1e7b     y...........{...
   e87fc:	000e1ea3 000e1eab 000e1eb3 000e1ebb     ................

000e880c <_ZTV9IPAddress>:
	...
   e8814:	000e2039 000e2029 000e202b 75007525     9 ..) ..+ ..%u.u
   e8824:	78343025 75616200 65530064 6c616972     %04x.baud.Serial
   e8834:	72655300 316c6169 4f534a00 7274534e     .Serial1.JSONStr
   e8844:	4c6d6165 6148676f 656c646e 30250072     eamLogHandler.%0
   e8854:	20753031 00205d00 2800202c 00203a29     10u .] ., .(): .
   e8864:	63005b20 2065646f 2500203d 65640069      [.code = .%i.de
   e8874:	6c696174 203d2073 006e6c00 63006e66     tails = .ln.fn.c
   e8884:	0065646f 61746564 00006c69              ode.detail..

000e8890 <_ZTVN5spark16JSONStreamWriterE>:
	...
   e8898:	000e24f3 000e2519 000e24d9 000e2139     .$...%...$..9!..

000e88a8 <_ZTVN5spark16StreamLogHandlerE>:
	...
   e88b0:	000e295d 000e2975 000e3135 000dd1c3     ])..u)..51......

000e88c0 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   e88c8:	000e2989 000e299d 000e32d9 000e24e1     .)...)...2...$..

000e88d8 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   e88e0:	000e24f1 000e2527 000e3071 000e24e3     .$..'%..q0...$..

000e88f0 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   e88f8:	000e24ef 000e2535 000e28a5 000e2551     .$..5%...(..Q%..

000e8908 <_ZTVN5spark12NetworkClassE>:
	...
   e8910:	000e344d 000e3457 000e3461 000e346b     M4..W4..a4..k4..
   e8920:	000e3475 000e3481 000e348d 000e3495     u4...4...4...4..
   e8930:	000e349d 000e34a9 000e34b1 000e34bb     .4...4...4...4..
   e8940:	000e34c5                                .4..

000e8944 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   e8944:	18100800 38302820 252d5925 64252d6d     .... (08%Y-%m-%d
   e8954:	3a482554 253a4d25 007a2553 74637361     T%H:%M:%S%z.asct
   e8964:	00656d69                                ime.

000e8968 <_ZTV11USARTSerial>:
	...
   e8970:	000e419d 000e4209 000e41e1 000e37af     .A...B...A...7..
   e8980:	000e41b1 000e41cd 000e41bf 000e41db     .A...A...A...A..
   e8990:	000e419f 000e41a3                       .A...A..

000e8998 <_ZTV9USBSerial>:
	...
   e89a0:	000e42b1 000e4319 000e42ef 000e37af     .B...C...B...7..
   e89b0:	000e42e1 000e42b3 000e42c3 000e4313     .B...B...B...C..
   e89c0:	000e42d3 000e42ad                       .B...B..

000e89c8 <_ZSt7nothrow>:
   e89c8:	00000000 74727173                        ....sqrtf.

000e89d2 <_ctype_>:
   e89d2:	20202000 20202020 28282020 20282828     .         ((((( 
   e89e2:	20202020 20202020 20202020 20202020                     
   e89f2:	10108820 10101010 10101010 10101010      ...............
   e8a02:	04040410 04040404 10040404 10101010     ................
   e8a12:	41411010 41414141 01010101 01010101     ..AAAAAA........
   e8a22:	01010101 01010101 01010101 10101010     ................
   e8a32:	42421010 42424242 02020202 02020202     ..BBBBBB........
   e8a42:	02020202 02020202 02020202 10101010     ................
   e8a52:	00000020 00000000 00000000 00000000      ...............
	...

000e8ad3 <link_const_variable_data_end>:
	...

000e8ad4 <link_constructors_location>:
   e8ad4:	000dae79 	.word	0x000dae79
   e8ad8:	000db4f9 	.word	0x000db4f9
   e8adc:	000db9a5 	.word	0x000db9a5
   e8ae0:	000dc3bd 	.word	0x000dc3bd
   e8ae4:	000dd315 	.word	0x000dd315
   e8ae8:	000dd5d5 	.word	0x000dd5d5
   e8aec:	000dd6d1 	.word	0x000dd6d1
   e8af0:	000ddbc5 	.word	0x000ddbc5
   e8af4:	000df201 	.word	0x000df201
   e8af8:	000e0261 	.word	0x000e0261
   e8afc:	000e0a51 	.word	0x000e0a51
   e8b00:	000e14dd 	.word	0x000e14dd
   e8b04:	000e156d 	.word	0x000e156d
   e8b08:	000e1bb1 	.word	0x000e1bb1
   e8b0c:	000e3125 	.word	0x000e3125
   e8b10:	000e3599 	.word	0x000e3599
   e8b14:	000e38e5 	.word	0x000e38e5
   e8b18:	000e40d9 	.word	0x000e40d9
   e8b1c:	000e4189 	.word	0x000e4189
