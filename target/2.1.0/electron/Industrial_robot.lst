
/Users/davidsalihu/Documents/GitHub/Industrial_Robot/Industrial_robot/target/2.1.0/electron/Industrial_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002e94  0808001c  0808001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  08082eb0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000078  20000000  08082eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000688  20000078  20000078  00030078  2**2
                  ALLOC
  6 .module_info_suffix 0000002c  08082f2c  08082f2c  00022f2c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  08082f58  08082f58  00022f58  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0013f088  00000000  00000000  00022f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00016bd3  00000000  00000000  00161fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000209b3  00000000  00000000  00178bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002548  00000000  00000000  0019956a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005c68  00000000  00000000  0019bab2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00028bfa  00000000  00000000  001a171a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00033462  00000000  00000000  001ca314  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b88a5  00000000  00000000  001fd776  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000610c  00000000  00000000  002b601c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <link_dynalib_end+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <link_dynalib_end+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f002 fc27 	bl	8082880 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <link_dynalib_end+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <link_dynalib_end+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f002 fc49 	bl	80828d0 <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <link_dynalib_end+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000000 	.word	0x20000000
 8080048:	08082eb4 	.word	0x08082eb4
 808004c:	20000078 	.word	0x20000078
 8080050:	20000078 	.word	0x20000078
 8080054:	20000700 	.word	0x20000700
 8080058:	20000700 	.word	0x20000700

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f002 fad5 	bl	808260c <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080062:	2500      	movs	r5, #0
 8080064:	4e05      	ldr	r6, [pc, #20]	; (808007c <module_user_init+0x20>)
 8080066:	4c06      	ldr	r4, [pc, #24]	; (8080080 <module_user_init+0x24>)
 8080068:	1ba4      	subs	r4, r4, r6
 808006a:	08a4      	lsrs	r4, r4, #2
 808006c:	42a5      	cmp	r5, r4
 808006e:	d100      	bne.n	8080072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 8080072:	f856 3b04 	ldr.w	r3, [r6], #4
 8080076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f7      	b.n	808006c <module_user_init+0x10>
 808007c:	08082e80 	.word	0x08082e80
 8080080:	08082eac 	.word	0x08082eac

08080084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080084:	f000 b95c 	b.w	8080340 <setup>

08080088 <module_user_loop>:
}

void module_user_loop() {
 8080088:	b508      	push	{r3, lr}
    loop();
 808008a:	f000 f979 	bl	8080380 <loop>
    _post_loop();
}
 808008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 8080092:	f002 ba7d 	b.w	8082590 <_post_loop>

08080096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 8080096:	f000 bc1b 	b.w	80808d0 <malloc>

0808009a <_Znaj>:
 808009a:	f000 bc19 	b.w	80808d0 <malloc>

0808009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 808009e:	f000 bc1f 	b.w	80808e0 <free>
	...

080800a4 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800a4:	2100      	movs	r1, #0
 80800a6:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80800a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800aa:	4a02      	ldr	r2, [pc, #8]	; (80800b4 <__cxa_pure_virtual+0x10>)
 80800ac:	f000 fb64 	bl	8080778 <panic_>
  while (1);
 80800b0:	e7fe      	b.n	80800b0 <__cxa_pure_virtual+0xc>
 80800b2:	bf00      	nop
 80800b4:	08080579 	.word	0x08080579

080800b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800b8:	7800      	ldrb	r0, [r0, #0]
 80800ba:	fab0 f080 	clz	r0, r0
 80800be:	0940      	lsrs	r0, r0, #5
 80800c0:	4770      	bx	lr

080800c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800c2:	2301      	movs	r3, #1
 80800c4:	7003      	strb	r3, [r0, #0]
 80800c6:	4770      	bx	lr

080800c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 80800c8:	4770      	bx	lr

080800ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
 80800ca:	6a00      	ldr	r0, [r0, #32]
 80800cc:	6803      	ldr	r3, [r0, #0]
 80800ce:	68db      	ldr	r3, [r3, #12]
 80800d0:	4718      	bx	r3
	...

080800d4 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 80800d4:	b510      	push	{r4, lr}
 80800d6:	4604      	mov	r4, r0
 80800d8:	4b09      	ldr	r3, [pc, #36]	; (8080100 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 80800da:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 80800dc:	f001 f866 	bl	80811ac <_ZN5spark10LogManager8instanceEv>
 80800e0:	4621      	mov	r1, r4
 80800e2:	f001 fa77 	bl	80815d4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 80800e6:	f002 f9ab 	bl	8082440 <_Z16_fetch_usbserialv>
 80800ea:	f002 f98f 	bl	808240c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 80800ee:	4620      	mov	r0, r4
 80800f0:	4b04      	ldr	r3, [pc, #16]	; (8080104 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 80800f2:	f840 3b04 	str.w	r3, [r0], #4
 80800f6:	f001 f95b 	bl	80813b0 <_ZN5spark6detail9LogFilterD1Ev>
    }
 80800fa:	4620      	mov	r0, r4
 80800fc:	bd10      	pop	{r4, pc}
 80800fe:	bf00      	nop
 8080100:	08082b34 	.word	0x08082b34
 8080104:	08082b1c 	.word	0x08082b1c

08080108 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 8080108:	b510      	push	{r4, lr}
 808010a:	4604      	mov	r4, r0
    }
 808010c:	f7ff ffe2 	bl	80800d4 <_ZN5spark16SerialLogHandlerD1Ev>
 8080110:	4620      	mov	r0, r4
 8080112:	2124      	movs	r1, #36	; 0x24
 8080114:	f002 fb9f 	bl	8082856 <_ZdlPvj>
 8080118:	4620      	mov	r0, r4
 808011a:	bd10      	pop	{r4, pc}

0808011c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 808011c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 808011e:	2614      	movs	r6, #20
 8080120:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 8080124:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 8080126:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 808012a:	42ae      	cmp	r6, r5
 808012c:	d004      	beq.n	8080138 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 808012e:	4628      	mov	r0, r5
 8080130:	f001 ffd1 	bl	80820d6 <_ZN6StringD1Ev>
 8080134:	3514      	adds	r5, #20
 8080136:	e7f8      	b.n	808012a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 8080138:	6820      	ldr	r0, [r4, #0]
 808013a:	f000 fbd1 	bl	80808e0 <free>
    AllocatorT::free(data_);
}
 808013e:	4620      	mov	r0, r4
 8080140:	bd70      	pop	{r4, r5, r6, pc}

08080142 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 8080142:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        if (n > 0) {
 8080146:	f1b1 0800 	subs.w	r8, r1, #0
    bool realloc(int n) {
 808014a:	4607      	mov	r7, r0
        if (n > 0) {
 808014c:	dd35      	ble.n	80801ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x78>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 808014e:	f04f 0914 	mov.w	r9, #20
    return ::malloc(size);
 8080152:	fb09 f008 	mul.w	r0, r9, r8
 8080156:	f000 fbbb 	bl	80808d0 <malloc>
            if (!d) {
 808015a:	4605      	mov	r5, r0
 808015c:	b3a8      	cbz	r0, 80801ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x88>
            move(d, data_, data_ + size_);
 808015e:	e9d7 4600 	ldrd	r4, r6, [r7]
        if (dest > p && dest < end) {
 8080162:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
 8080164:	fb09 4606 	mla	r6, r9, r6, r4
        if (dest > p && dest < end) {
 8080168:	d215      	bcs.n	8080196 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x54>
 808016a:	4286      	cmp	r6, r0
 808016c:	d914      	bls.n	8080198 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x56>
            --end;
 808016e:	3e14      	subs	r6, #20
            dest += end - p - 1;
 8080170:	f1a4 0914 	sub.w	r9, r4, #20
 8080174:	1b34      	subs	r4, r6, r4
 8080176:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 8080178:	45b1      	cmp	r9, r6
 808017a:	d01f      	beq.n	80801bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x7a>
                new(dest) T(std::move(*end));
 808017c:	b12c      	cbz	r4, 808018a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x48>
 808017e:	4631      	mov	r1, r6
 8080180:	4620      	mov	r0, r4
 8080182:	f002 f822 	bl	80821ca <_ZN6StringC1EOS_>
 8080186:	7c33      	ldrb	r3, [r6, #16]
 8080188:	7423      	strb	r3, [r4, #16]
 808018a:	4630      	mov	r0, r6
 808018c:	f001 ffa3 	bl	80820d6 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 8080190:	3e14      	subs	r6, #20
 8080192:	3c14      	subs	r4, #20
 8080194:	e7f0      	b.n	8080178 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x36>
        } else if (dest != p) {
 8080196:	d011      	beq.n	80801bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x7a>
 8080198:	46a9      	mov	r9, r5
            for (; p != end; ++p, ++dest) {
 808019a:	42a6      	cmp	r6, r4
 808019c:	d00e      	beq.n	80801bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x7a>
 808019e:	4621      	mov	r1, r4
 80801a0:	4648      	mov	r0, r9
 80801a2:	f002 f812 	bl	80821ca <_ZN6StringC1EOS_>
 80801a6:	7c23      	ldrb	r3, [r4, #16]
 80801a8:	4620      	mov	r0, r4
 80801aa:	f889 3010 	strb.w	r3, [r9, #16]
 80801ae:	f001 ff92 	bl	80820d6 <_ZN6StringD1Ev>
 80801b2:	3414      	adds	r4, #20
 80801b4:	f109 0914 	add.w	r9, r9, #20
 80801b8:	e7ef      	b.n	808019a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x58>
        T* d = nullptr;
 80801ba:	2500      	movs	r5, #0
    ::free(ptr);
 80801bc:	6838      	ldr	r0, [r7, #0]
 80801be:	f000 fb8f 	bl	80808e0 <free>
        return true;
 80801c2:	2001      	movs	r0, #1
        data_ = d;
 80801c4:	603d      	str	r5, [r7, #0]
        capacity_ = n;
 80801c6:	f8c7 8008 	str.w	r8, [r7, #8]
    }
 80801ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080801ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 80801ce:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80801d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 80801d4:	e9c0 3300 	strd	r3, r3, [r0]
 80801d8:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80801da:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80801dc:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80801de:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80801e0:	4299      	cmp	r1, r3
 80801e2:	dd17      	ble.n	8080214 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x46>
 80801e4:	f7ff ffad 	bl	8080142 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80801e8:	b1a0      	cbz	r0, 8080214 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x46>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 80801ea:	e9d5 6300 	ldrd	r6, r3, [r5]
 80801ee:	f04f 0814 	mov.w	r8, #20
 80801f2:	fb08 6803 	mla	r8, r8, r3, r6
 80801f6:	6827      	ldr	r7, [r4, #0]
        for (; it != end; ++it, ++dest) {
 80801f8:	45b0      	cmp	r8, r6
 80801fa:	d009      	beq.n	8080210 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x42>
            new(dest) T(*it);
 80801fc:	b12f      	cbz	r7, 808020a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x3c>
 80801fe:	4631      	mov	r1, r6
 8080200:	4638      	mov	r0, r7
 8080202:	f001 fffc 	bl	80821fe <_ZN6StringC1ERKS_>
 8080206:	7c33      	ldrb	r3, [r6, #16]
 8080208:	743b      	strb	r3, [r7, #16]
        for (; it != end; ++it, ++dest) {
 808020a:	3614      	adds	r6, #20
 808020c:	3714      	adds	r7, #20
 808020e:	e7f3      	b.n	80801f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x2a>
        size_ = vector.size_;
 8080210:	686b      	ldr	r3, [r5, #4]
 8080212:	6063      	str	r3, [r4, #4]
}
 8080214:	4620      	mov	r0, r4
 8080216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0808021c <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL>:
// with non-default names, we will
SerialLogHandler logHandler(LOG_LEVEL_INFO, { // Logging level for non-application messages
    { "app", DEFAULT_LOG_LEVEL }, // Default logging level for all application messages
    { ROBOT_STATE_LOGGER_NAME, LOG_LEVEL_INFO  }, // Logging level for SHYFTStateSync
    { "app.spiffs", LOG_LEVEL_WARN } // To disable spiffs internal info and trace messages, set to WARN
});
 808021c:	b570      	push	{r4, r5, r6, lr}
 808021e:	4b3a      	ldr	r3, [pc, #232]	; (8080308 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0xec>)
 8080220:	b09c      	sub	sp, #112	; 0x70
 8080222:	781c      	ldrb	r4, [r3, #0]
        level_(level) {
 8080224:	4939      	ldr	r1, [pc, #228]	; (808030c <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0xf0>)
 8080226:	a80d      	add	r0, sp, #52	; 0x34
 8080228:	f001 ff9f 	bl	808216a <_ZN6StringC1EPKc>
 808022c:	4938      	ldr	r1, [pc, #224]	; (8080310 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0xf4>)
 808022e:	a812      	add	r0, sp, #72	; 0x48
 8080230:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
 8080234:	f001 ff99 	bl	808216a <_ZN6StringC1EPKc>
 8080238:	231e      	movs	r3, #30
 808023a:	4936      	ldr	r1, [pc, #216]	; (8080314 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0xf8>)
 808023c:	a817      	add	r0, sp, #92	; 0x5c
 808023e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8080242:	f001 ff92 	bl	808216a <_ZN6StringC1EPKc>
 8080246:	2328      	movs	r3, #40	; 0x28
 8080248:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
        capacity_(0) {
 808024c:	2300      	movs	r3, #0
    if (n > 0 && realloc(n)) {
 808024e:	2103      	movs	r1, #3
 8080250:	a801      	add	r0, sp, #4
        capacity_(0) {
 8080252:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8080256:	9303      	str	r3, [sp, #12]
    if (n > 0 && realloc(n)) {
 8080258:	f7ff ff73 	bl	8080142 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 808025c:	b188      	cbz	r0, 8080282 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x66>
        copy(data_, values.begin(), values.end());
 808025e:	9c01      	ldr	r4, [sp, #4]
 8080260:	ad0d      	add	r5, sp, #52	; 0x34
 8080262:	f104 063c 	add.w	r6, r4, #60	; 0x3c
            new(dest) T(*p);
 8080266:	b12c      	cbz	r4, 8080274 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x58>
class LogCategoryFilter {
 8080268:	4629      	mov	r1, r5
 808026a:	4620      	mov	r0, r4
 808026c:	f001 ffc7 	bl	80821fe <_ZN6StringC1ERKS_>
 8080270:	7c2b      	ldrb	r3, [r5, #16]
 8080272:	7423      	strb	r3, [r4, #16]
        for (; p != end; ++p, ++dest) {
 8080274:	3414      	adds	r4, #20
 8080276:	42b4      	cmp	r4, r6
 8080278:	f105 0514 	add.w	r5, r5, #20
 808027c:	d1f3      	bne.n	8080266 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x4a>
        size_ = n;
 808027e:	2303      	movs	r3, #3
 8080280:	9302      	str	r3, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 8080282:	f002 f8dd 	bl	8082440 <_Z16_fetch_usbserialv>
 8080286:	4605      	mov	r5, r0
 8080288:	a901      	add	r1, sp, #4
 808028a:	a804      	add	r0, sp, #16
 808028c:	f7ff ff9f 	bl	80801ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 8080290:	a904      	add	r1, sp, #16
 8080292:	a807      	add	r0, sp, #28
        filter_(level, filters) {
 8080294:	4c20      	ldr	r4, [pc, #128]	; (8080318 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0xfc>)
        stream_(&stream) {
 8080296:	f7ff ff9a 	bl	80801ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 808029a:	4b20      	ldr	r3, [pc, #128]	; (808031c <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x100>)
 808029c:	a907      	add	r1, sp, #28
 808029e:	6023      	str	r3, [r4, #0]
 80802a0:	a80a      	add	r0, sp, #40	; 0x28
 80802a2:	f7ff ff94 	bl	80801ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80802a6:	aa0a      	add	r2, sp, #40	; 0x28
 80802a8:	211e      	movs	r1, #30
 80802aa:	1d20      	adds	r0, r4, #4
 80802ac:	f001 fae4 	bl	8081878 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80802b0:	a80a      	add	r0, sp, #40	; 0x28
 80802b2:	f7ff ff33 	bl	808011c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 80802b6:	a807      	add	r0, sp, #28
 80802b8:	f7ff ff30 	bl	808011c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80802bc:	4b18      	ldr	r3, [pc, #96]	; (8080320 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x104>)
 80802be:	6225      	str	r5, [r4, #32]
 80802c0:	6023      	str	r3, [r4, #0]
 80802c2:	a804      	add	r0, sp, #16
 80802c4:	f7ff ff2a 	bl	808011c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80802c8:	4b16      	ldr	r3, [pc, #88]	; (8080324 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x108>)
 80802ca:	6023      	str	r3, [r4, #0]
        Serial.begin();
 80802cc:	f002 f8b8 	bl	8082440 <_Z16_fetch_usbserialv>
 80802d0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80802d4:	f002 f896 	bl	8082404 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 80802d8:	f000 ff68 	bl	80811ac <_ZN5spark10LogManager8instanceEv>
 80802dc:	4621      	mov	r1, r4
 80802de:	f001 fa5e 	bl	808179e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
 80802e2:	a801      	add	r0, sp, #4
 80802e4:	f7ff ff1a 	bl	808011c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
class LogCategoryFilter {
 80802e8:	a817      	add	r0, sp, #92	; 0x5c
 80802ea:	f001 fef4 	bl	80820d6 <_ZN6StringD1Ev>
 80802ee:	a812      	add	r0, sp, #72	; 0x48
 80802f0:	f001 fef1 	bl	80820d6 <_ZN6StringD1Ev>
 80802f4:	a80d      	add	r0, sp, #52	; 0x34
 80802f6:	f001 feee 	bl	80820d6 <_ZN6StringD1Ev>
SerialLogHandler logHandler(LOG_LEVEL_INFO, { // Logging level for non-application messages
 80802fa:	4620      	mov	r0, r4
 80802fc:	4a0a      	ldr	r2, [pc, #40]	; (8080328 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x10c>)
 80802fe:	490b      	ldr	r1, [pc, #44]	; (808032c <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x110>)
 8080300:	f002 faa4 	bl	808284c <__aeabi_atexit>
});
 8080304:	b01c      	add	sp, #112	; 0x70
 8080306:	bd70      	pop	{r4, r5, r6, pc}
 8080308:	20000000 	.word	0x20000000
 808030c:	08082af4 	.word	0x08082af4
 8080310:	08082af8 	.word	0x08082af8
 8080314:	08082b08 	.word	0x08082b08
 8080318:	2000007c 	.word	0x2000007c
 808031c:	08082b1c 	.word	0x08082b1c
 8080320:	08082c6c 	.word	0x08082c6c
 8080324:	08082b34 	.word	0x08082b34
 8080328:	20000078 	.word	0x20000078
 808032c:	080800d5 	.word	0x080800d5

08080330 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 8080330:	b510      	push	{r4, lr}
 8080332:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8080334:	6800      	ldr	r0, [r0, #0]
 8080336:	b108      	cbz	r0, 808033c <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 8080338:	f000 fad2 	bl	80808e0 <free>
class SystemClass {
 808033c:	4620      	mov	r0, r4
 808033e:	bd10      	pop	{r4, pc}

08080340 <setup>:
int ledPin = D7;

// Define the initial state of the LED
bool ledState = false;

void setup() {
 8080340:	b507      	push	{r0, r1, r2, lr}
  // Initialize the LED pin as an output
  pinMode(ledPin, OUTPUT);
 8080342:	4b0c      	ldr	r3, [pc, #48]	; (8080374 <setup+0x34>)
 8080344:	2101      	movs	r1, #1
 8080346:	8818      	ldrh	r0, [r3, #0]
 8080348:	f002 f9f8 	bl	808273c <pinMode>

  delay(1000);
 808034c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080350:	f000 fae6 	bl	8080920 <delay>
    write(DEFAULT_LEVEL, data, size);
}

inline void spark::Logger::write(LogLevel level, const char *data, size_t size) const {
    if (data) {
        log_write(level, name_, data, size, nullptr);
 8080354:	2300      	movs	r3, #0
 8080356:	4908      	ldr	r1, [pc, #32]	; (8080378 <setup+0x38>)
 8080358:	9300      	str	r3, [sp, #0]
 808035a:	201e      	movs	r0, #30
 808035c:	2306      	movs	r3, #6
 808035e:	4a07      	ldr	r2, [pc, #28]	; (808037c <setup+0x3c>)
 8080360:	6809      	ldr	r1, [r1, #0]
 8080362:	f000 fa11 	bl	8080788 <log_write>
  Log.print("Setup\n");
  delay(1000);
 8080366:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  // You can also use Particle functions or variables setup here
  // For example, Particle.function() to call functions remotely
  // or Particle.variable() to expose variables to the Particle Cloud
}
 808036a:	b003      	add	sp, #12
 808036c:	f85d eb04 	ldr.w	lr, [sp], #4
  delay(1000);
 8080370:	f000 bad6 	b.w	8080920 <delay>
 8080374:	20000004 	.word	0x20000004
 8080378:	20000218 	.word	0x20000218
 808037c:	08082b44 	.word	0x08082b44

08080380 <loop>:

void loop() {
 8080380:	b507      	push	{r0, r1, r2, lr}
  // Toggle the LED state
  ledState = !ledState;
 8080382:	4b0c      	ldr	r3, [pc, #48]	; (80803b4 <loop+0x34>)
 8080384:	7819      	ldrb	r1, [r3, #0]
 8080386:	f081 0101 	eor.w	r1, r1, #1
 808038a:	7019      	strb	r1, [r3, #0]

  // Set the LED state
  digitalWrite(ledPin, ledState);
 808038c:	4b0a      	ldr	r3, [pc, #40]	; (80803b8 <loop+0x38>)
 808038e:	8818      	ldrh	r0, [r3, #0]
 8080390:	f002 f9e5 	bl	808275e <digitalWrite>
 8080394:	2300      	movs	r3, #0
 8080396:	4909      	ldr	r1, [pc, #36]	; (80803bc <loop+0x3c>)
 8080398:	9300      	str	r3, [sp, #0]
 808039a:	201e      	movs	r0, #30
 808039c:	2307      	movs	r3, #7
 808039e:	4a08      	ldr	r2, [pc, #32]	; (80803c0 <loop+0x40>)
 80803a0:	6809      	ldr	r1, [r1, #0]
 80803a2:	f000 f9f1 	bl	8080788 <log_write>
  Log.print("Blink!\n");
  // Wait for 1 second (1000 milliseconds)
  delay(2000);
 80803a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
}
 80803aa:	b003      	add	sp, #12
 80803ac:	f85d eb04 	ldr.w	lr, [sp], #4
  delay(2000);
 80803b0:	f000 bab6 	b.w	8080920 <delay>
 80803b4:	200000ac 	.word	0x200000ac
 80803b8:	20000004 	.word	0x20000004
 80803bc:	20000218 	.word	0x20000218
 80803c0:	08082b4b 	.word	0x08082b4b

080803c4 <_GLOBAL__sub_I___appProductID>:
}
 80803c4:	b510      	push	{r4, lr}
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
 80803c6:	f002 f953 	bl	8082670 <spark_protocol_instance>
 80803ca:	2300      	movs	r3, #0
 80803cc:	f243 1148 	movw	r1, #12616	; 0x3148
 80803d0:	461a      	mov	r2, r3
 80803d2:	f002 f955 	bl	8082680 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
 80803d6:	f002 f94b 	bl	8082670 <spark_protocol_instance>
 80803da:	2300      	movs	r3, #0
 80803dc:	2110      	movs	r1, #16
 80803de:	461a      	mov	r2, r3
 80803e0:	f002 f956 	bl	8082690 <spark_protocol_set_product_firmware_version>
              error_(SYSTEM_ERROR_NONE) {
 80803e4:	2300      	movs	r3, #0
 80803e6:	4c08      	ldr	r4, [pc, #32]	; (8080408 <_GLOBAL__sub_I___appProductID+0x44>)
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80803e8:	2003      	movs	r0, #3
              error_(SYSTEM_ERROR_NONE) {
 80803ea:	6023      	str	r3, [r4, #0]
 80803ec:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
 80803ee:	71a3      	strb	r3, [r4, #6]
 80803f0:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80803f4:	60a3      	str	r3, [r4, #8]
        set_system_mode(mode);
 80803f6:	f000 f9df 	bl	80807b8 <set_system_mode>
SYSTEM_MODE(MANUAL);    // setting system mode to manual turns of cellular at startup
 80803fa:	4620      	mov	r0, r4
}
 80803fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_MODE(MANUAL);    // setting system mode to manual turns of cellular at startup
 8080400:	4a02      	ldr	r2, [pc, #8]	; (808040c <_GLOBAL__sub_I___appProductID+0x48>)
 8080402:	4903      	ldr	r1, [pc, #12]	; (8080410 <_GLOBAL__sub_I___appProductID+0x4c>)
 8080404:	f002 ba22 	b.w	808284c <__aeabi_atexit>
 8080408:	200000a0 	.word	0x200000a0
 808040c:	20000078 	.word	0x20000078
 8080410:	08080331 	.word	0x08080331

08080414 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 8080414:	4770      	bx	lr

08080416 <_ZN11USARTSerialD0Ev>:
 8080416:	b510      	push	{r4, lr}
 8080418:	4604      	mov	r4, r0
 808041a:	2114      	movs	r1, #20
 808041c:	f002 fa1b 	bl	8082856 <_ZdlPvj>
 8080420:	4620      	mov	r0, r4
 8080422:	bd10      	pop	{r4, pc}

08080424 <_Z22__fetch_global_Serial2v>:
// instantiate Serial2
static hal_usart_ring_buffer_t serial2_rx_buffer;
static hal_usart_ring_buffer_t serial2_tx_buffer;

USARTSerial& __fetch_global_Serial2()
{
 8080424:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, &serial2_rx_buffer, &serial2_tx_buffer);
 8080426:	4c0d      	ldr	r4, [pc, #52]	; (808045c <_Z22__fetch_global_Serial2v+0x38>)
 8080428:	7823      	ldrb	r3, [r4, #0]
 808042a:	f3bf 8f5b 	dmb	ish
 808042e:	07db      	lsls	r3, r3, #31
 8080430:	d411      	bmi.n	8080456 <_Z22__fetch_global_Serial2v+0x32>
 8080432:	4620      	mov	r0, r4
 8080434:	f7ff fe40 	bl	80800b8 <__cxa_guard_acquire>
 8080438:	b168      	cbz	r0, 8080456 <_Z22__fetch_global_Serial2v+0x32>
 808043a:	2101      	movs	r1, #1
 808043c:	4a08      	ldr	r2, [pc, #32]	; (8080460 <_Z22__fetch_global_Serial2v+0x3c>)
 808043e:	4b09      	ldr	r3, [pc, #36]	; (8080464 <_Z22__fetch_global_Serial2v+0x40>)
 8080440:	4809      	ldr	r0, [pc, #36]	; (8080468 <_Z22__fetch_global_Serial2v+0x44>)
 8080442:	f001 ff43 	bl	80822cc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 8080446:	4620      	mov	r0, r4
 8080448:	f7ff fe3b 	bl	80800c2 <__cxa_guard_release>
 808044c:	4a07      	ldr	r2, [pc, #28]	; (808046c <_Z22__fetch_global_Serial2v+0x48>)
 808044e:	4908      	ldr	r1, [pc, #32]	; (8080470 <_Z22__fetch_global_Serial2v+0x4c>)
 8080450:	4805      	ldr	r0, [pc, #20]	; (8080468 <_Z22__fetch_global_Serial2v+0x44>)
 8080452:	f002 f9fb 	bl	808284c <__aeabi_atexit>
	return serial2;
}
 8080456:	4804      	ldr	r0, [pc, #16]	; (8080468 <_Z22__fetch_global_Serial2v+0x44>)
 8080458:	bd10      	pop	{r4, pc}
 808045a:	bf00      	nop
 808045c:	200000b0 	.word	0x200000b0
 8080460:	200000b4 	.word	0x200000b4
 8080464:	20000138 	.word	0x20000138
 8080468:	200001c0 	.word	0x200001c0
 808046c:	20000078 	.word	0x20000078
 8080470:	08080415 	.word	0x08080415

08080474 <_Z15serialEventRun2v>:


void serialEventRun2()
{
 8080474:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 8080476:	f7ff ffd5 	bl	8080424 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 808047a:	4b07      	ldr	r3, [pc, #28]	; (8080498 <_Z15serialEventRun2v+0x24>)
 808047c:	4604      	mov	r4, r0
 808047e:	b153      	cbz	r3, 8080496 <_Z15serialEventRun2v+0x22>
 8080480:	f001 ff44 	bl	808230c <_ZN11USARTSerial9isEnabledEv>
 8080484:	b138      	cbz	r0, 8080496 <_Z15serialEventRun2v+0x22>
 8080486:	6823      	ldr	r3, [r4, #0]
 8080488:	4620      	mov	r0, r4
 808048a:	691b      	ldr	r3, [r3, #16]
 808048c:	4798      	blx	r3
 808048e:	2800      	cmp	r0, #0
 8080490:	dd01      	ble.n	8080496 <_Z15serialEventRun2v+0x22>
        handler();
 8080492:	f3af 8000 	nop.w
}
 8080496:	bd10      	pop	{r4, pc}
 8080498:	00000000 	.word	0x00000000

0808049c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 808049c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 808049e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80804a0:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80804a2:	b17c      	cbz	r4, 80804c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80804a4:	6863      	ldr	r3, [r4, #4]
 80804a6:	3b01      	subs	r3, #1
 80804a8:	6063      	str	r3, [r4, #4]
 80804aa:	b95b      	cbnz	r3, 80804c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80804ac:	6823      	ldr	r3, [r4, #0]
 80804ae:	4620      	mov	r0, r4
 80804b0:	689b      	ldr	r3, [r3, #8]
 80804b2:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80804b4:	68a3      	ldr	r3, [r4, #8]
 80804b6:	3b01      	subs	r3, #1
 80804b8:	60a3      	str	r3, [r4, #8]
 80804ba:	b91b      	cbnz	r3, 80804c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80804bc:	6823      	ldr	r3, [r4, #0]
 80804be:	4620      	mov	r0, r4
 80804c0:	68db      	ldr	r3, [r3, #12]
 80804c2:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80804c4:	4628      	mov	r0, r5
 80804c6:	bd38      	pop	{r3, r4, r5, pc}

080804c8 <_GLOBAL__sub_I__Z22__fetch_global_Serial2v>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80804c8:	2201      	movs	r2, #1
 80804ca:	4b03      	ldr	r3, [pc, #12]	; (80804d8 <_GLOBAL__sub_I__Z22__fetch_global_Serial2v+0x10>)
 80804cc:	701a      	strb	r2, [r3, #0]
 80804ce:	2208      	movs	r2, #8
 80804d0:	4b02      	ldr	r3, [pc, #8]	; (80804dc <_GLOBAL__sub_I__Z22__fetch_global_Serial2v+0x14>)
 80804d2:	701a      	strb	r2, [r3, #0]
      if(MODBUS_DEBUG_ON)
        Particle.publish("gx_metrics", "MODBUS> Changing to TX mode.", PRIVATE, WITH_ACK);
    #endif
  }
  return;
};
 80804d4:	4770      	bx	lr
 80804d6:	bf00      	nop
 80804d8:	200001bc 	.word	0x200001bc
 80804dc:	200001bd 	.word	0x200001bd

080804e0 <_GLOBAL__sub_I__ZN14SpiffsParticleC2ER12SpiFlashBase>:
	s32_t res = SPIFFS_fstat(fs, fh, &stat);
	if (res == SPIFFS_OK) {
		res = (s32_t) stat.size;
	}
	return res;
}
 80804e0:	b507      	push	{r0, r1, r2, lr}
        name_(name) {
 80804e2:	4b06      	ldr	r3, [pc, #24]	; (80804fc <_GLOBAL__sub_I__ZN14SpiffsParticleC2ER12SpiFlashBase+0x1c>)
 80804e4:	4a06      	ldr	r2, [pc, #24]	; (8080500 <_GLOBAL__sub_I__ZN14SpiffsParticleC2ER12SpiFlashBase+0x20>)
	os_mutex_create(&m);
 80804e6:	a801      	add	r0, sp, #4
 80804e8:	601a      	str	r2, [r3, #0]
 80804ea:	f000 f815 	bl	8080518 <os_mutex_create>
static os_mutex_t _spiffsMutex = []() {
 80804ee:	9a01      	ldr	r2, [sp, #4]
 80804f0:	4b04      	ldr	r3, [pc, #16]	; (8080504 <_GLOBAL__sub_I__ZN14SpiffsParticleC2ER12SpiFlashBase+0x24>)
 80804f2:	601a      	str	r2, [r3, #0]
}
 80804f4:	b003      	add	sp, #12
 80804f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80804fa:	bf00      	nop
 80804fc:	200001d8 	.word	0x200001d8
 8080500:	08082b08 	.word	0x08082b08
 8080504:	200001d4 	.word	0x200001d4

08080508 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8080508:	b508      	push	{r3, lr}
 808050a:	4b02      	ldr	r3, [pc, #8]	; (8080514 <inet_gethostbyname+0xc>)
 808050c:	681b      	ldr	r3, [r3, #0]
 808050e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080510:	9301      	str	r3, [sp, #4]
 8080512:	bd08      	pop	{r3, pc}
 8080514:	08060020 	.word	0x08060020

08080518 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 8080518:	b508      	push	{r3, lr}
 808051a:	4b02      	ldr	r3, [pc, #8]	; (8080524 <os_mutex_create+0xc>)
 808051c:	681b      	ldr	r3, [r3, #0]
 808051e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080520:	9301      	str	r3, [sp, #4]
 8080522:	bd08      	pop	{r3, pc}
 8080524:	080401d0 	.word	0x080401d0

08080528 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 8080528:	b508      	push	{r3, lr}
 808052a:	4b02      	ldr	r3, [pc, #8]	; (8080534 <os_mutex_recursive_create+0xc>)
 808052c:	681b      	ldr	r3, [r3, #0]
 808052e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080530:	9301      	str	r3, [sp, #4]
 8080532:	bd08      	pop	{r3, pc}
 8080534:	080401d0 	.word	0x080401d0

08080538 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 8080538:	b508      	push	{r3, lr}
 808053a:	4b02      	ldr	r3, [pc, #8]	; (8080544 <os_mutex_recursive_destroy+0xc>)
 808053c:	681b      	ldr	r3, [r3, #0]
 808053e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8080540:	9301      	str	r3, [sp, #4]
 8080542:	bd08      	pop	{r3, pc}
 8080544:	080401d0 	.word	0x080401d0

08080548 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 8080548:	b508      	push	{r3, lr}
 808054a:	4b02      	ldr	r3, [pc, #8]	; (8080554 <os_mutex_recursive_lock+0xc>)
 808054c:	681b      	ldr	r3, [r3, #0]
 808054e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8080550:	9301      	str	r3, [sp, #4]
 8080552:	bd08      	pop	{r3, pc}
 8080554:	080401d0 	.word	0x080401d0

08080558 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 8080558:	b508      	push	{r3, lr}
 808055a:	4b02      	ldr	r3, [pc, #8]	; (8080564 <os_mutex_recursive_unlock+0xc>)
 808055c:	681b      	ldr	r3, [r3, #0]
 808055e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8080560:	9301      	str	r3, [sp, #4]
 8080562:	bd08      	pop	{r3, pc}
 8080564:	080401d0 	.word	0x080401d0

08080568 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8080568:	b508      	push	{r3, lr}
 808056a:	4b02      	ldr	r3, [pc, #8]	; (8080574 <HAL_RNG_GetRandomNumber+0xc>)
 808056c:	681b      	ldr	r3, [r3, #0]
 808056e:	685b      	ldr	r3, [r3, #4]
 8080570:	9301      	str	r3, [sp, #4]
 8080572:	bd08      	pop	{r3, pc}
 8080574:	0804019c 	.word	0x0804019c

08080578 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8080578:	b508      	push	{r3, lr}
 808057a:	4b02      	ldr	r3, [pc, #8]	; (8080584 <HAL_Delay_Microseconds+0xc>)
 808057c:	681b      	ldr	r3, [r3, #0]
 808057e:	68db      	ldr	r3, [r3, #12]
 8080580:	9301      	str	r3, [sp, #4]
 8080582:	bd08      	pop	{r3, pc}
 8080584:	0804019c 	.word	0x0804019c

08080588 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8080588:	b508      	push	{r3, lr}
 808058a:	4b02      	ldr	r3, [pc, #8]	; (8080594 <HAL_Timer_Get_Milli_Seconds+0xc>)
 808058c:	681b      	ldr	r3, [r3, #0]
 808058e:	695b      	ldr	r3, [r3, #20]
 8080590:	9301      	str	r3, [sp, #4]
 8080592:	bd08      	pop	{r3, pc}
 8080594:	0804019c 	.word	0x0804019c

08080598 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8080598:	b508      	push	{r3, lr}
 808059a:	4b02      	ldr	r3, [pc, #8]	; (80805a4 <HAL_Pin_Mode+0xc>)
 808059c:	681b      	ldr	r3, [r3, #0]
 808059e:	689b      	ldr	r3, [r3, #8]
 80805a0:	9301      	str	r3, [sp, #4]
 80805a2:	bd08      	pop	{r3, pc}
 80805a4:	080401b0 	.word	0x080401b0

080805a8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80805a8:	b508      	push	{r3, lr}
 80805aa:	4b02      	ldr	r3, [pc, #8]	; (80805b4 <HAL_Get_Pin_Mode+0xc>)
 80805ac:	681b      	ldr	r3, [r3, #0]
 80805ae:	68db      	ldr	r3, [r3, #12]
 80805b0:	9301      	str	r3, [sp, #4]
 80805b2:	bd08      	pop	{r3, pc}
 80805b4:	080401b0 	.word	0x080401b0

080805b8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80805b8:	b508      	push	{r3, lr}
 80805ba:	4b02      	ldr	r3, [pc, #8]	; (80805c4 <HAL_GPIO_Write+0xc>)
 80805bc:	681b      	ldr	r3, [r3, #0]
 80805be:	691b      	ldr	r3, [r3, #16]
 80805c0:	9301      	str	r3, [sp, #4]
 80805c2:	bd08      	pop	{r3, pc}
 80805c4:	080401b0 	.word	0x080401b0

080805c8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80805c8:	b508      	push	{r3, lr}
 80805ca:	4b02      	ldr	r3, [pc, #8]	; (80805d4 <hal_i2c_write+0xc>)
 80805cc:	681b      	ldr	r3, [r3, #0]
 80805ce:	6a1b      	ldr	r3, [r3, #32]
 80805d0:	9301      	str	r3, [sp, #4]
 80805d2:	bd08      	pop	{r3, pc}
 80805d4:	080401ac 	.word	0x080401ac

080805d8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80805d8:	b508      	push	{r3, lr}
 80805da:	4b02      	ldr	r3, [pc, #8]	; (80805e4 <hal_i2c_available+0xc>)
 80805dc:	681b      	ldr	r3, [r3, #0]
 80805de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80805e0:	9301      	str	r3, [sp, #4]
 80805e2:	bd08      	pop	{r3, pc}
 80805e4:	080401ac 	.word	0x080401ac

080805e8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80805e8:	b508      	push	{r3, lr}
 80805ea:	4b02      	ldr	r3, [pc, #8]	; (80805f4 <hal_i2c_read+0xc>)
 80805ec:	681b      	ldr	r3, [r3, #0]
 80805ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80805f0:	9301      	str	r3, [sp, #4]
 80805f2:	bd08      	pop	{r3, pc}
 80805f4:	080401ac 	.word	0x080401ac

080805f8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80805f8:	b508      	push	{r3, lr}
 80805fa:	4b02      	ldr	r3, [pc, #8]	; (8080604 <hal_i2c_peek+0xc>)
 80805fc:	681b      	ldr	r3, [r3, #0]
 80805fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080600:	9301      	str	r3, [sp, #4]
 8080602:	bd08      	pop	{r3, pc}
 8080604:	080401ac 	.word	0x080401ac

08080608 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 8080608:	b508      	push	{r3, lr}
 808060a:	4b02      	ldr	r3, [pc, #8]	; (8080614 <hal_i2c_flush+0xc>)
 808060c:	681b      	ldr	r3, [r3, #0]
 808060e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080610:	9301      	str	r3, [sp, #4]
 8080612:	bd08      	pop	{r3, pc}
 8080614:	080401ac 	.word	0x080401ac

08080618 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 8080618:	b508      	push	{r3, lr}
 808061a:	4b02      	ldr	r3, [pc, #8]	; (8080624 <hal_i2c_is_enabled+0xc>)
 808061c:	681b      	ldr	r3, [r3, #0]
 808061e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080620:	9301      	str	r3, [sp, #4]
 8080622:	bd08      	pop	{r3, pc}
 8080624:	080401ac 	.word	0x080401ac

08080628 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 8080628:	b508      	push	{r3, lr}
 808062a:	4b02      	ldr	r3, [pc, #8]	; (8080634 <hal_i2c_init+0xc>)
 808062c:	681b      	ldr	r3, [r3, #0]
 808062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080630:	9301      	str	r3, [sp, #4]
 8080632:	bd08      	pop	{r3, pc}
 8080634:	080401ac 	.word	0x080401ac

08080638 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 8080638:	b508      	push	{r3, lr}
 808063a:	4b02      	ldr	r3, [pc, #8]	; (8080644 <hal_spi_init+0xc>)
 808063c:	681b      	ldr	r3, [r3, #0]
 808063e:	69db      	ldr	r3, [r3, #28]
 8080640:	9301      	str	r3, [sp, #4]
 8080642:	bd08      	pop	{r3, pc}
 8080644:	080401b4 	.word	0x080401b4

08080648 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 8080648:	b508      	push	{r3, lr}
 808064a:	4b02      	ldr	r3, [pc, #8]	; (8080654 <hal_spi_is_enabled+0xc>)
 808064c:	681b      	ldr	r3, [r3, #0]
 808064e:	6a1b      	ldr	r3, [r3, #32]
 8080650:	9301      	str	r3, [sp, #4]
 8080652:	bd08      	pop	{r3, pc}
 8080654:	080401b4 	.word	0x080401b4

08080658 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 8080658:	b508      	push	{r3, lr}
 808065a:	4b02      	ldr	r3, [pc, #8]	; (8080664 <hal_usart_init+0xc>)
 808065c:	681b      	ldr	r3, [r3, #0]
 808065e:	699b      	ldr	r3, [r3, #24]
 8080660:	9301      	str	r3, [sp, #4]
 8080662:	bd08      	pop	{r3, pc}
 8080664:	080401c4 	.word	0x080401c4

08080668 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 8080668:	b508      	push	{r3, lr}
 808066a:	4b02      	ldr	r3, [pc, #8]	; (8080674 <hal_usart_end+0xc>)
 808066c:	681b      	ldr	r3, [r3, #0]
 808066e:	6a1b      	ldr	r3, [r3, #32]
 8080670:	9301      	str	r3, [sp, #4]
 8080672:	bd08      	pop	{r3, pc}
 8080674:	080401c4 	.word	0x080401c4

08080678 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 8080678:	b508      	push	{r3, lr}
 808067a:	4b02      	ldr	r3, [pc, #8]	; (8080684 <hal_usart_write+0xc>)
 808067c:	681b      	ldr	r3, [r3, #0]
 808067e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080680:	9301      	str	r3, [sp, #4]
 8080682:	bd08      	pop	{r3, pc}
 8080684:	080401c4 	.word	0x080401c4

08080688 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 8080688:	b508      	push	{r3, lr}
 808068a:	4b02      	ldr	r3, [pc, #8]	; (8080694 <hal_usart_available+0xc>)
 808068c:	681b      	ldr	r3, [r3, #0]
 808068e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8080690:	9301      	str	r3, [sp, #4]
 8080692:	bd08      	pop	{r3, pc}
 8080694:	080401c4 	.word	0x080401c4

08080698 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 8080698:	b508      	push	{r3, lr}
 808069a:	4b02      	ldr	r3, [pc, #8]	; (80806a4 <hal_usart_read+0xc>)
 808069c:	681b      	ldr	r3, [r3, #0]
 808069e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80806a0:	9301      	str	r3, [sp, #4]
 80806a2:	bd08      	pop	{r3, pc}
 80806a4:	080401c4 	.word	0x080401c4

080806a8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80806a8:	b508      	push	{r3, lr}
 80806aa:	4b02      	ldr	r3, [pc, #8]	; (80806b4 <hal_usart_peek+0xc>)
 80806ac:	681b      	ldr	r3, [r3, #0]
 80806ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80806b0:	9301      	str	r3, [sp, #4]
 80806b2:	bd08      	pop	{r3, pc}
 80806b4:	080401c4 	.word	0x080401c4

080806b8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80806b8:	b508      	push	{r3, lr}
 80806ba:	4b02      	ldr	r3, [pc, #8]	; (80806c4 <hal_usart_flush+0xc>)
 80806bc:	681b      	ldr	r3, [r3, #0]
 80806be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80806c0:	9301      	str	r3, [sp, #4]
 80806c2:	bd08      	pop	{r3, pc}
 80806c4:	080401c4 	.word	0x080401c4

080806c8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80806c8:	b508      	push	{r3, lr}
 80806ca:	4b02      	ldr	r3, [pc, #8]	; (80806d4 <hal_usart_is_enabled+0xc>)
 80806cc:	681b      	ldr	r3, [r3, #0]
 80806ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80806d0:	9301      	str	r3, [sp, #4]
 80806d2:	bd08      	pop	{r3, pc}
 80806d4:	080401c4 	.word	0x080401c4

080806d8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80806d8:	b508      	push	{r3, lr}
 80806da:	4b02      	ldr	r3, [pc, #8]	; (80806e4 <hal_usart_available_data_for_write+0xc>)
 80806dc:	681b      	ldr	r3, [r3, #0]
 80806de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80806e0:	9301      	str	r3, [sp, #4]
 80806e2:	bd08      	pop	{r3, pc}
 80806e4:	080401c4 	.word	0x080401c4

080806e8 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 80806e8:	b508      	push	{r3, lr}
 80806ea:	4b02      	ldr	r3, [pc, #8]	; (80806f4 <hal_usart_begin_config+0xc>)
 80806ec:	681b      	ldr	r3, [r3, #0]
 80806ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80806f0:	9301      	str	r3, [sp, #4]
 80806f2:	bd08      	pop	{r3, pc}
 80806f4:	080401c4 	.word	0x080401c4

080806f8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80806f8:	b508      	push	{r3, lr}
 80806fa:	4b02      	ldr	r3, [pc, #8]	; (8080704 <HAL_USB_USART_Init+0xc>)
 80806fc:	681b      	ldr	r3, [r3, #0]
 80806fe:	681b      	ldr	r3, [r3, #0]
 8080700:	9301      	str	r3, [sp, #4]
 8080702:	bd08      	pop	{r3, pc}
 8080704:	0806001c 	.word	0x0806001c

08080708 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 8080708:	b508      	push	{r3, lr}
 808070a:	4b02      	ldr	r3, [pc, #8]	; (8080714 <HAL_USB_USART_Begin+0xc>)
 808070c:	681b      	ldr	r3, [r3, #0]
 808070e:	685b      	ldr	r3, [r3, #4]
 8080710:	9301      	str	r3, [sp, #4]
 8080712:	bd08      	pop	{r3, pc}
 8080714:	0806001c 	.word	0x0806001c

08080718 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 8080718:	b508      	push	{r3, lr}
 808071a:	4b02      	ldr	r3, [pc, #8]	; (8080724 <HAL_USB_USART_End+0xc>)
 808071c:	681b      	ldr	r3, [r3, #0]
 808071e:	689b      	ldr	r3, [r3, #8]
 8080720:	9301      	str	r3, [sp, #4]
 8080722:	bd08      	pop	{r3, pc}
 8080724:	0806001c 	.word	0x0806001c

08080728 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8080728:	b508      	push	{r3, lr}
 808072a:	4b02      	ldr	r3, [pc, #8]	; (8080734 <HAL_USB_USART_Available_Data+0xc>)
 808072c:	681b      	ldr	r3, [r3, #0]
 808072e:	691b      	ldr	r3, [r3, #16]
 8080730:	9301      	str	r3, [sp, #4]
 8080732:	bd08      	pop	{r3, pc}
 8080734:	0806001c 	.word	0x0806001c

08080738 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8080738:	b508      	push	{r3, lr}
 808073a:	4b02      	ldr	r3, [pc, #8]	; (8080744 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 808073c:	681b      	ldr	r3, [r3, #0]
 808073e:	695b      	ldr	r3, [r3, #20]
 8080740:	9301      	str	r3, [sp, #4]
 8080742:	bd08      	pop	{r3, pc}
 8080744:	0806001c 	.word	0x0806001c

08080748 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080748:	b508      	push	{r3, lr}
 808074a:	4b02      	ldr	r3, [pc, #8]	; (8080754 <HAL_USB_USART_Receive_Data+0xc>)
 808074c:	681b      	ldr	r3, [r3, #0]
 808074e:	699b      	ldr	r3, [r3, #24]
 8080750:	9301      	str	r3, [sp, #4]
 8080752:	bd08      	pop	{r3, pc}
 8080754:	0806001c 	.word	0x0806001c

08080758 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080758:	b508      	push	{r3, lr}
 808075a:	4b02      	ldr	r3, [pc, #8]	; (8080764 <HAL_USB_USART_Send_Data+0xc>)
 808075c:	681b      	ldr	r3, [r3, #0]
 808075e:	69db      	ldr	r3, [r3, #28]
 8080760:	9301      	str	r3, [sp, #4]
 8080762:	bd08      	pop	{r3, pc}
 8080764:	0806001c 	.word	0x0806001c

08080768 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8080768:	b508      	push	{r3, lr}
 808076a:	4b02      	ldr	r3, [pc, #8]	; (8080774 <HAL_USB_USART_Flush_Data+0xc>)
 808076c:	681b      	ldr	r3, [r3, #0]
 808076e:	6a1b      	ldr	r3, [r3, #32]
 8080770:	9301      	str	r3, [sp, #4]
 8080772:	bd08      	pop	{r3, pc}
 8080774:	0806001c 	.word	0x0806001c

08080778 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 8080778:	b508      	push	{r3, lr}
 808077a:	4b02      	ldr	r3, [pc, #8]	; (8080784 <panic_+0xc>)
 808077c:	681b      	ldr	r3, [r3, #0]
 808077e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080780:	9301      	str	r3, [sp, #4]
 8080782:	bd08      	pop	{r3, pc}
 8080784:	080201a0 	.word	0x080201a0

08080788 <log_write>:
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
 8080788:	b508      	push	{r3, lr}
 808078a:	4b02      	ldr	r3, [pc, #8]	; (8080794 <log_write+0xc>)
 808078c:	681b      	ldr	r3, [r3, #0]
 808078e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080790:	9301      	str	r3, [sp, #4]
 8080792:	bd08      	pop	{r3, pc}
 8080794:	080201a0 	.word	0x080201a0

08080798 <log_level_name>:
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 8080798:	b508      	push	{r3, lr}
 808079a:	4b02      	ldr	r3, [pc, #8]	; (80807a4 <log_level_name+0xc>)
 808079c:	681b      	ldr	r3, [r3, #0]
 808079e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80807a0:	9301      	str	r3, [sp, #4]
 80807a2:	bd08      	pop	{r3, pc}
 80807a4:	080201a0 	.word	0x080201a0

080807a8 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 80807a8:	b508      	push	{r3, lr}
 80807aa:	4b02      	ldr	r3, [pc, #8]	; (80807b4 <log_set_callbacks+0xc>)
 80807ac:	681b      	ldr	r3, [r3, #0]
 80807ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80807b0:	9301      	str	r3, [sp, #4]
 80807b2:	bd08      	pop	{r3, pc}
 80807b4:	080201a0 	.word	0x080201a0

080807b8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80807b8:	b508      	push	{r3, lr}
 80807ba:	4b02      	ldr	r3, [pc, #8]	; (80807c4 <set_system_mode+0xc>)
 80807bc:	681b      	ldr	r3, [r3, #0]
 80807be:	685b      	ldr	r3, [r3, #4]
 80807c0:	9301      	str	r3, [sp, #4]
 80807c2:	bd08      	pop	{r3, pc}
 80807c4:	080401a4 	.word	0x080401a4

080807c8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80807c8:	b508      	push	{r3, lr}
 80807ca:	4b02      	ldr	r3, [pc, #8]	; (80807d4 <system_delay_ms+0xc>)
 80807cc:	681b      	ldr	r3, [r3, #0]
 80807ce:	695b      	ldr	r3, [r3, #20]
 80807d0:	9301      	str	r3, [sp, #4]
 80807d2:	bd08      	pop	{r3, pc}
 80807d4:	080401a4 	.word	0x080401a4

080807d8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80807d8:	b508      	push	{r3, lr}
 80807da:	4b03      	ldr	r3, [pc, #12]	; (80807e8 <system_ctrl_set_app_request_handler+0x10>)
 80807dc:	681b      	ldr	r3, [r3, #0]
 80807de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80807e2:	9301      	str	r3, [sp, #4]
 80807e4:	bd08      	pop	{r3, pc}
 80807e6:	0000      	.short	0x0000
 80807e8:	080401a4 	.word	0x080401a4

080807ec <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80807ec:	b508      	push	{r3, lr}
 80807ee:	4b03      	ldr	r3, [pc, #12]	; (80807fc <system_ctrl_set_result+0x10>)
 80807f0:	681b      	ldr	r3, [r3, #0]
 80807f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80807f6:	9301      	str	r3, [sp, #4]
 80807f8:	bd08      	pop	{r3, pc}
 80807fa:	0000      	.short	0x0000
 80807fc:	080401a4 	.word	0x080401a4

08080800 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8080800:	b508      	push	{r3, lr}
 8080802:	4b02      	ldr	r3, [pc, #8]	; (808080c <spark_set_random_seed_from_cloud_handler+0xc>)
 8080804:	681b      	ldr	r3, [r3, #0]
 8080806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080808:	9301      	str	r3, [sp, #4]
 808080a:	bd08      	pop	{r3, pc}
 808080c:	080401cc 	.word	0x080401cc

08080810 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8080810:	b508      	push	{r3, lr}
 8080812:	4b02      	ldr	r3, [pc, #8]	; (808081c <network_connect+0xc>)
 8080814:	681b      	ldr	r3, [r3, #0]
 8080816:	685b      	ldr	r3, [r3, #4]
 8080818:	9301      	str	r3, [sp, #4]
 808081a:	bd08      	pop	{r3, pc}
 808081c:	080401c8 	.word	0x080401c8

08080820 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8080820:	b508      	push	{r3, lr}
 8080822:	4b02      	ldr	r3, [pc, #8]	; (808082c <network_connecting+0xc>)
 8080824:	681b      	ldr	r3, [r3, #0]
 8080826:	689b      	ldr	r3, [r3, #8]
 8080828:	9301      	str	r3, [sp, #4]
 808082a:	bd08      	pop	{r3, pc}
 808082c:	080401c8 	.word	0x080401c8

08080830 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8080830:	b508      	push	{r3, lr}
 8080832:	4b02      	ldr	r3, [pc, #8]	; (808083c <network_disconnect+0xc>)
 8080834:	681b      	ldr	r3, [r3, #0]
 8080836:	68db      	ldr	r3, [r3, #12]
 8080838:	9301      	str	r3, [sp, #4]
 808083a:	bd08      	pop	{r3, pc}
 808083c:	080401c8 	.word	0x080401c8

08080840 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8080840:	b508      	push	{r3, lr}
 8080842:	4b02      	ldr	r3, [pc, #8]	; (808084c <network_ready+0xc>)
 8080844:	681b      	ldr	r3, [r3, #0]
 8080846:	691b      	ldr	r3, [r3, #16]
 8080848:	9301      	str	r3, [sp, #4]
 808084a:	bd08      	pop	{r3, pc}
 808084c:	080401c8 	.word	0x080401c8

08080850 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8080850:	b508      	push	{r3, lr}
 8080852:	4b02      	ldr	r3, [pc, #8]	; (808085c <network_on+0xc>)
 8080854:	681b      	ldr	r3, [r3, #0]
 8080856:	695b      	ldr	r3, [r3, #20]
 8080858:	9301      	str	r3, [sp, #4]
 808085a:	bd08      	pop	{r3, pc}
 808085c:	080401c8 	.word	0x080401c8

08080860 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8080860:	b508      	push	{r3, lr}
 8080862:	4b02      	ldr	r3, [pc, #8]	; (808086c <network_off+0xc>)
 8080864:	681b      	ldr	r3, [r3, #0]
 8080866:	699b      	ldr	r3, [r3, #24]
 8080868:	9301      	str	r3, [sp, #4]
 808086a:	bd08      	pop	{r3, pc}
 808086c:	080401c8 	.word	0x080401c8

08080870 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8080870:	b508      	push	{r3, lr}
 8080872:	4b02      	ldr	r3, [pc, #8]	; (808087c <network_listen+0xc>)
 8080874:	681b      	ldr	r3, [r3, #0]
 8080876:	69db      	ldr	r3, [r3, #28]
 8080878:	9301      	str	r3, [sp, #4]
 808087a:	bd08      	pop	{r3, pc}
 808087c:	080401c8 	.word	0x080401c8

08080880 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8080880:	b508      	push	{r3, lr}
 8080882:	4b02      	ldr	r3, [pc, #8]	; (808088c <network_listening+0xc>)
 8080884:	681b      	ldr	r3, [r3, #0]
 8080886:	6a1b      	ldr	r3, [r3, #32]
 8080888:	9301      	str	r3, [sp, #4]
 808088a:	bd08      	pop	{r3, pc}
 808088c:	080401c8 	.word	0x080401c8

08080890 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8080890:	b508      	push	{r3, lr}
 8080892:	4b02      	ldr	r3, [pc, #8]	; (808089c <network_set_listen_timeout+0xc>)
 8080894:	681b      	ldr	r3, [r3, #0]
 8080896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080898:	9301      	str	r3, [sp, #4]
 808089a:	bd08      	pop	{r3, pc}
 808089c:	080401c8 	.word	0x080401c8

080808a0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80808a0:	b508      	push	{r3, lr}
 80808a2:	4b02      	ldr	r3, [pc, #8]	; (80808ac <network_get_listen_timeout+0xc>)
 80808a4:	681b      	ldr	r3, [r3, #0]
 80808a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80808a8:	9301      	str	r3, [sp, #4]
 80808aa:	bd08      	pop	{r3, pc}
 80808ac:	080401c8 	.word	0x080401c8

080808b0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80808b0:	b508      	push	{r3, lr}
 80808b2:	4b02      	ldr	r3, [pc, #8]	; (80808bc <network_is_on+0xc>)
 80808b4:	681b      	ldr	r3, [r3, #0]
 80808b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80808b8:	9301      	str	r3, [sp, #4]
 80808ba:	bd08      	pop	{r3, pc}
 80808bc:	080401c8 	.word	0x080401c8

080808c0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80808c0:	b508      	push	{r3, lr}
 80808c2:	4b02      	ldr	r3, [pc, #8]	; (80808cc <network_is_off+0xc>)
 80808c4:	681b      	ldr	r3, [r3, #0]
 80808c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80808c8:	9301      	str	r3, [sp, #4]
 80808ca:	bd08      	pop	{r3, pc}
 80808cc:	080401c8 	.word	0x080401c8

080808d0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80808d0:	b508      	push	{r3, lr}
 80808d2:	4b02      	ldr	r3, [pc, #8]	; (80808dc <malloc+0xc>)
 80808d4:	681b      	ldr	r3, [r3, #0]
 80808d6:	681b      	ldr	r3, [r3, #0]
 80808d8:	9301      	str	r3, [sp, #4]
 80808da:	bd08      	pop	{r3, pc}
 80808dc:	080401a0 	.word	0x080401a0

080808e0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80808e0:	b508      	push	{r3, lr}
 80808e2:	4b02      	ldr	r3, [pc, #8]	; (80808ec <free+0xc>)
 80808e4:	681b      	ldr	r3, [r3, #0]
 80808e6:	685b      	ldr	r3, [r3, #4]
 80808e8:	9301      	str	r3, [sp, #4]
 80808ea:	bd08      	pop	{r3, pc}
 80808ec:	080401a0 	.word	0x080401a0

080808f0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80808f0:	b508      	push	{r3, lr}
 80808f2:	4b02      	ldr	r3, [pc, #8]	; (80808fc <realloc+0xc>)
 80808f4:	681b      	ldr	r3, [r3, #0]
 80808f6:	689b      	ldr	r3, [r3, #8]
 80808f8:	9301      	str	r3, [sp, #4]
 80808fa:	bd08      	pop	{r3, pc}
 80808fc:	080401a0 	.word	0x080401a0

08080900 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 8080900:	b508      	push	{r3, lr}
 8080902:	4b02      	ldr	r3, [pc, #8]	; (808090c <vsnprintf+0xc>)
 8080904:	681b      	ldr	r3, [r3, #0]
 8080906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080908:	9301      	str	r3, [sp, #4]
 808090a:	bd08      	pop	{r3, pc}
 808090c:	080401a0 	.word	0x080401a0

08080910 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 8080910:	b508      	push	{r3, lr}
 8080912:	4b02      	ldr	r3, [pc, #8]	; (808091c <newlib_impure_ptr_callback+0xc>)
 8080914:	681b      	ldr	r3, [r3, #0]
 8080916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080918:	9301      	str	r3, [sp, #4]
 808091a:	bd08      	pop	{r3, pc}
 808091c:	080401a0 	.word	0x080401a0

08080920 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8080920:	2100      	movs	r1, #0
 8080922:	f7ff bf51 	b.w	80807c8 <system_delay_ms>

08080926 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8080926:	2200      	movs	r2, #0
 8080928:	6840      	ldr	r0, [r0, #4]
 808092a:	4611      	mov	r1, r2
 808092c:	f7ff bf88 	b.w	8080840 <network_ready>

08080930 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8080930:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 8080932:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 8080934:	b085      	sub	sp, #20
 8080936:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8080938:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 808093a:	460f      	mov	r7, r1
 808093c:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 808093e:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8080940:	f002 f81b 	bl	808297a <strlen>
 8080944:	687b      	ldr	r3, [r7, #4]
 8080946:	b281      	uxth	r1, r0
 8080948:	9600      	str	r6, [sp, #0]
 808094a:	4628      	mov	r0, r5
 808094c:	aa03      	add	r2, sp, #12
 808094e:	f7ff fddb 	bl	8080508 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8080952:	b130      	cbz	r0, 8080962 <_ZN5spark13CellularClass7resolveEPKc+0x32>
 8080954:	4631      	mov	r1, r6
 8080956:	4620      	mov	r0, r4
 8080958:	f000 f8d0 	bl	8080afc <_ZN9IPAddressC1Em>
    }
 808095c:	4620      	mov	r0, r4
 808095e:	b005      	add	sp, #20
 8080960:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8080962:	4620      	mov	r0, r4
 8080964:	a903      	add	r1, sp, #12
 8080966:	f000 f8c1 	bl	8080aec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 808096a:	e7f7      	b.n	808095c <_ZN5spark13CellularClass7resolveEPKc+0x2c>

0808096c <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 808096c:	2200      	movs	r2, #0
 808096e:	6840      	ldr	r0, [r0, #4]
 8080970:	4611      	mov	r1, r2
 8080972:	f7ff bf85 	b.w	8080880 <network_listening>

08080976 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 8080976:	2200      	movs	r2, #0
 8080978:	6840      	ldr	r0, [r0, #4]
 808097a:	4611      	mov	r1, r2
 808097c:	f7ff bf90 	b.w	80808a0 <network_get_listen_timeout>

08080980 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 8080980:	2200      	movs	r2, #0
 8080982:	6840      	ldr	r0, [r0, #4]
 8080984:	f7ff bf84 	b.w	8080890 <network_set_listen_timeout>

08080988 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 8080988:	2200      	movs	r2, #0
 808098a:	6840      	ldr	r0, [r0, #4]
 808098c:	f081 0101 	eor.w	r1, r1, #1
 8080990:	f7ff bf6e 	b.w	8080870 <network_listen>

08080994 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
 8080994:	2300      	movs	r3, #0
 8080996:	6840      	ldr	r0, [r0, #4]
 8080998:	461a      	mov	r2, r3
 808099a:	4619      	mov	r1, r3
 808099c:	f7ff bf60 	b.w	8080860 <network_off>

080809a0 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80809a0:	2300      	movs	r3, #0
 80809a2:	6840      	ldr	r0, [r0, #4]
 80809a4:	461a      	mov	r2, r3
 80809a6:	4619      	mov	r1, r3
 80809a8:	f7ff bf52 	b.w	8080850 <network_on>

080809ac <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80809ac:	2200      	movs	r2, #0
 80809ae:	6840      	ldr	r0, [r0, #4]
 80809b0:	4611      	mov	r1, r2
 80809b2:	f7ff bf35 	b.w	8080820 <network_connecting>

080809b6 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80809b6:	2200      	movs	r2, #0
 80809b8:	2102      	movs	r1, #2
 80809ba:	6840      	ldr	r0, [r0, #4]
 80809bc:	f7ff bf38 	b.w	8080830 <network_disconnect>

080809c0 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80809c0:	2300      	movs	r3, #0
 80809c2:	6840      	ldr	r0, [r0, #4]
 80809c4:	461a      	mov	r2, r3
 80809c6:	f7ff bf23 	b.w	8080810 <network_connect>
	...

080809cc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 80809cc:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 80809ce:	2428      	movs	r4, #40	; 0x28
 80809d0:	4b07      	ldr	r3, [pc, #28]	; (80809f0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 80809d2:	4622      	mov	r2, r4
 80809d4:	4618      	mov	r0, r3
 80809d6:	2100      	movs	r1, #0
 80809d8:	f001 ff7a 	bl	80828d0 <memset>
        cid = -1;
 80809dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80809e0:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80809e2:	2204      	movs	r2, #4
 80809e4:	4b03      	ldr	r3, [pc, #12]	; (80809f4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 80809e6:	8004      	strh	r4, [r0, #0]
 80809e8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 80809ea:	4a03      	ldr	r2, [pc, #12]	; (80809f8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 80809ec:	601a      	str	r2, [r3, #0]
 80809ee:	bd10      	pop	{r4, pc}
 80809f0:	200001e4 	.word	0x200001e4
 80809f4:	200001dc 	.word	0x200001dc
 80809f8:	08082b5c 	.word	0x08082b5c

080809fc <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80809fc:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80809fe:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 8080a00:	4604      	mov	r4, r0
      if (_M_manager)
 8080a02:	b113      	cbz	r3, 8080a0a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080a04:	2203      	movs	r2, #3
 8080a06:	4601      	mov	r1, r0
 8080a08:	4798      	blx	r3
    }
 8080a0a:	4620      	mov	r0, r4
 8080a0c:	bd10      	pop	{r4, pc}

08080a0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8080a0e:	680b      	ldr	r3, [r1, #0]
 8080a10:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8080a12:	b113      	cbz	r3, 8080a1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 8080a14:	685a      	ldr	r2, [r3, #4]
 8080a16:	3201      	adds	r2, #1
 8080a18:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
 8080a1a:	4770      	bx	lr

08080a1c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 8080a1c:	4770      	bx	lr

08080a1e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8080a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080a20:	4606      	mov	r6, r0
 8080a22:	4615      	mov	r5, r2
 8080a24:	460c      	mov	r4, r1
 8080a26:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8080a28:	42bc      	cmp	r4, r7
 8080a2a:	d006      	beq.n	8080a3a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8080a2c:	6833      	ldr	r3, [r6, #0]
 8080a2e:	4630      	mov	r0, r6
 8080a30:	689b      	ldr	r3, [r3, #8]
 8080a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8080a36:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 8080a38:	e7f6      	b.n	8080a28 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 8080a3a:	4628      	mov	r0, r5
 8080a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080a3e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 8080a3e:	2200      	movs	r2, #0
 8080a40:	7c00      	ldrb	r0, [r0, #16]
 8080a42:	f7ff bdc1 	b.w	80805c8 <hal_i2c_write>

08080a46 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 8080a46:	2100      	movs	r1, #0
 8080a48:	7c00      	ldrb	r0, [r0, #16]
 8080a4a:	f7ff bdc5 	b.w	80805d8 <hal_i2c_available>

08080a4e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 8080a4e:	2100      	movs	r1, #0
 8080a50:	7c00      	ldrb	r0, [r0, #16]
 8080a52:	f7ff bdc9 	b.w	80805e8 <hal_i2c_read>

08080a56 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 8080a56:	2100      	movs	r1, #0
 8080a58:	7c00      	ldrb	r0, [r0, #16]
 8080a5a:	f7ff bdcd 	b.w	80805f8 <hal_i2c_peek>

08080a5e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 8080a5e:	2100      	movs	r1, #0
 8080a60:	7c00      	ldrb	r0, [r0, #16]
 8080a62:	f7ff bdd1 	b.w	8080608 <hal_i2c_flush>

08080a66 <_ZN7TwoWireD0Ev>:
 8080a66:	b510      	push	{r4, lr}
 8080a68:	4604      	mov	r4, r0
 8080a6a:	2114      	movs	r1, #20
 8080a6c:	f001 fef3 	bl	8082856 <_ZdlPvj>
 8080a70:	4620      	mov	r0, r4
 8080a72:	bd10      	pop	{r4, pc}

08080a74 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 8080a74:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8080a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080a7a:	4604      	mov	r4, r0
 8080a7c:	4608      	mov	r0, r1
 8080a7e:	2100      	movs	r1, #0
 8080a80:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8080a84:	4b03      	ldr	r3, [pc, #12]	; (8080a94 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 8080a86:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 8080a88:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 8080a8a:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 8080a8c:	f7ff fdcc 	bl	8080628 <hal_i2c_init>
}
 8080a90:	4620      	mov	r0, r4
 8080a92:	bd10      	pop	{r4, pc}
 8080a94:	08082b98 	.word	0x08082b98

08080a98 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8080a98:	4770      	bx	lr

08080a9a <_ZN9IPAddressD0Ev>:
 8080a9a:	b510      	push	{r4, lr}
 8080a9c:	4604      	mov	r4, r0
 8080a9e:	2108      	movs	r1, #8
 8080aa0:	f001 fed9 	bl	8082856 <_ZdlPvj>
 8080aa4:	4620      	mov	r0, r4
 8080aa6:	bd10      	pop	{r4, pc}

08080aa8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8080aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080aaa:	460e      	mov	r6, r1
 8080aac:	2400      	movs	r4, #0
 8080aae:	f100 0708 	add.w	r7, r0, #8
 8080ab2:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 8080ab4:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 8080ab8:	220a      	movs	r2, #10
 8080aba:	4630      	mov	r0, r6
 8080abc:	f001 fa99 	bl	8081ff2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8080ac0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8080ac2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 8080ac4:	d101      	bne.n	8080aca <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 8080ac6:	4620      	mov	r0, r4
 8080ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 8080aca:	2c00      	cmp	r4, #0
 8080acc:	d0f2      	beq.n	8080ab4 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8080ace:	212e      	movs	r1, #46	; 0x2e
 8080ad0:	4630      	mov	r0, r6
 8080ad2:	f001 fa7f 	bl	8081fd4 <_ZN5Print5printEc>
 8080ad6:	4404      	add	r4, r0
 8080ad8:	e7ec      	b.n	8080ab4 <_ZNK9IPAddress7printToER5Print+0xc>
	...

08080adc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 8080adc:	4a02      	ldr	r2, [pc, #8]	; (8080ae8 <_ZN9IPAddressC1Ev+0xc>)
 8080ade:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8080ae0:	2200      	movs	r2, #0
 8080ae2:	6042      	str	r2, [r0, #4]
}
 8080ae4:	4770      	bx	lr
 8080ae6:	bf00      	nop
 8080ae8:	08082bc0 	.word	0x08082bc0

08080aec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 8080aec:	4a02      	ldr	r2, [pc, #8]	; (8080af8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8080aee:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 8080af0:	680a      	ldr	r2, [r1, #0]
 8080af2:	6042      	str	r2, [r0, #4]
}
 8080af4:	4770      	bx	lr
 8080af6:	bf00      	nop
 8080af8:	08082bc0 	.word	0x08082bc0

08080afc <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 8080afc:	4a01      	ldr	r2, [pc, #4]	; (8080b04 <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 8080afe:	e9c0 2100 	strd	r2, r1, [r0]
}
 8080b02:	4770      	bx	lr
 8080b04:	08082bc0 	.word	0x08082bc0

08080b08 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 8080b08:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8080b0a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8080b0e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8080b12:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8080b16:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 8080b1a:	6044      	str	r4, [r0, #4]
}
 8080b1c:	bd10      	pop	{r4, pc}
	...

08080b20 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8080b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080b22:	4d04      	ldr	r5, [pc, #16]	; (8080b34 <_ZN9IPAddressC1Ehhhh+0x14>)
 8080b24:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8080b26:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8080b2a:	9500      	str	r5, [sp, #0]
 8080b2c:	f7ff ffec 	bl	8080b08 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8080b30:	b003      	add	sp, #12
 8080b32:	bd30      	pop	{r4, r5, pc}
 8080b34:	08082bc0 	.word	0x08082bc0

08080b38 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 8080b38:	2201      	movs	r2, #1
 8080b3a:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 8080b3e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8080b42:	4618      	mov	r0, r3
 8080b44:	2901      	cmp	r1, #1
 8080b46:	d108      	bne.n	8080b5a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 8080b48:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8080b4c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 8080b50:	3a01      	subs	r2, #1
 8080b52:	f103 0310 	add.w	r3, r3, #16
 8080b56:	d1f2      	bne.n	8080b3e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 8080b58:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 8080b5a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 8080b5c:	bf04      	itt	eq
 8080b5e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 8080b62:	1852      	addeq	r2, r2, r1
 8080b64:	e7f4      	b.n	8080b50 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

08080b66 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 8080b66:	b40e      	push	{r1, r2, r3}
 8080b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080b6c:	b087      	sub	sp, #28
 8080b6e:	af00      	add	r7, sp, #0
 8080b70:	f107 0534 	add.w	r5, r7, #52	; 0x34
 8080b74:	f855 8b04 	ldr.w	r8, [r5], #4
 8080b78:	4604      	mov	r4, r0
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 8080b7a:	462b      	mov	r3, r5
 8080b7c:	4642      	mov	r2, r8
 8080b7e:	2110      	movs	r1, #16
 8080b80:	f107 0008 	add.w	r0, r7, #8
    va_start(args, fmt);
 8080b84:	607d      	str	r5, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 8080b86:	f7ff febb 	bl	8080900 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 8080b8a:	280f      	cmp	r0, #15
 8080b8c:	d91b      	bls.n	8080bc6 <_ZN5spark10JSONWriter6printfEPKcz+0x60>
        char buf[n + 1]; // Use larger buffer
 8080b8e:	f100 0308 	add.w	r3, r0, #8
 8080b92:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 8080b96:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 8080b98:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 8080b9c:	4642      	mov	r2, r8
 8080b9e:	1c41      	adds	r1, r0, #1
 8080ba0:	462b      	mov	r3, r5
 8080ba2:	4668      	mov	r0, sp
        va_start(args, fmt);
 8080ba4:	607d      	str	r5, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 8080ba6:	f7ff feab 	bl	8080900 <vsnprintf>
        if (n > 0) {
 8080baa:	1e02      	subs	r2, r0, #0
 8080bac:	dd04      	ble.n	8080bb8 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
 8080bae:	6823      	ldr	r3, [r4, #0]
 8080bb0:	4669      	mov	r1, sp
 8080bb2:	4620      	mov	r0, r4
 8080bb4:	689b      	ldr	r3, [r3, #8]
 8080bb6:	4798      	blx	r3
 8080bb8:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 8080bba:	371c      	adds	r7, #28
 8080bbc:	46bd      	mov	sp, r7
 8080bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8080bc2:	b003      	add	sp, #12
 8080bc4:	4770      	bx	lr
    } else if (n > 0) {
 8080bc6:	2800      	cmp	r0, #0
 8080bc8:	d0f7      	beq.n	8080bba <_ZN5spark10JSONWriter6printfEPKcz+0x54>
        write(buf, n);
 8080bca:	6823      	ldr	r3, [r4, #0]
 8080bcc:	4602      	mov	r2, r0
 8080bce:	689b      	ldr	r3, [r3, #8]
 8080bd0:	4620      	mov	r0, r4
 8080bd2:	f107 0108 	add.w	r1, r7, #8
 8080bd6:	4798      	blx	r3
}
 8080bd8:	e7ef      	b.n	8080bba <_ZN5spark10JSONWriter6printfEPKcz+0x54>

08080bda <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
 8080bda:	b510      	push	{r4, lr}
 8080bdc:	4604      	mov	r4, r0
          _M_dispose();
 8080bde:	6803      	ldr	r3, [r0, #0]
 8080be0:	689b      	ldr	r3, [r3, #8]
 8080be2:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080be4:	68a3      	ldr	r3, [r4, #8]
 8080be6:	3b01      	subs	r3, #1
 8080be8:	60a3      	str	r3, [r4, #8]
 8080bea:	b92b      	cbnz	r3, 8080bf8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
 8080bec:	6823      	ldr	r3, [r4, #0]
 8080bee:	4620      	mov	r0, r4
    }
 8080bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 8080bf4:	68db      	ldr	r3, [r3, #12]
 8080bf6:	4718      	bx	r3
    }
 8080bf8:	bd10      	pop	{r4, pc}

08080bfa <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 8080bfa:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 8080bfc:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 8080bfe:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 8080c02:	2201      	movs	r2, #1
 8080c04:	689b      	ldr	r3, [r3, #8]
 8080c06:	f10d 0107 	add.w	r1, sp, #7
 8080c0a:	4798      	blx	r3
}
 8080c0c:	b003      	add	sp, #12
 8080c0e:	f85d fb04 	ldr.w	pc, [sp], #4

08080c12 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    };

  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 8080c12:	b538      	push	{r3, r4, r5, lr}
 8080c14:	680b      	ldr	r3, [r1, #0]
 8080c16:	4604      	mov	r4, r0
 8080c18:	6003      	str	r3, [r0, #0]
 8080c1a:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 8080c1c:	6843      	ldr	r3, [r0, #4]
 8080c1e:	429d      	cmp	r5, r3
 8080c20:	d00c      	beq.n	8080c3c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
 8080c22:	b115      	cbz	r5, 8080c2a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
 8080c24:	686b      	ldr	r3, [r5, #4]
 8080c26:	3301      	adds	r3, #1
 8080c28:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 8080c2a:	6860      	ldr	r0, [r4, #4]
 8080c2c:	b128      	cbz	r0, 8080c3a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
 8080c2e:	6843      	ldr	r3, [r0, #4]
 8080c30:	3b01      	subs	r3, #1
 8080c32:	6043      	str	r3, [r0, #4]
 8080c34:	b90b      	cbnz	r3, 8080c3a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
 8080c36:	f7ff ffd0 	bl	8080bda <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
 8080c3a:	6065      	str	r5, [r4, #4]
    class __shared_ptr
 8080c3c:	4620      	mov	r0, r4
 8080c3e:	bd38      	pop	{r3, r4, r5, pc}

08080c40 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 8080c40:	460b      	mov	r3, r1
 8080c42:	4611      	mov	r1, r2
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
 8080c44:	2200      	movs	r2, #0
 8080c46:	b510      	push	{r4, lr}
 8080c48:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 8080c4a:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 8080c4e:	6083      	str	r3, [r0, #8]
    if (t) {
 8080c50:	b90b      	cbnz	r3, 8080c56 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 8080c52:	4620      	mov	r0, r4
 8080c54:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 8080c56:	f7ff ffdc 	bl	8080c12 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
 8080c5a:	e7fa      	b.n	8080c52 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

08080c5c <_ZNK5spark9JSONValue4typeEv>:
spark::JSONType spark::JSONValue::type() const {
 8080c5c:	4603      	mov	r3, r0
    if (!t_) {
 8080c5e:	6880      	ldr	r0, [r0, #8]
 8080c60:	b320      	cbz	r0, 8080cac <_ZNK5spark9JSONValue4typeEv+0x50>
    switch (t_->type) {
 8080c62:	7802      	ldrb	r2, [r0, #0]
 8080c64:	2a03      	cmp	r2, #3
 8080c66:	d81a      	bhi.n	8080c9e <_ZNK5spark9JSONValue4typeEv+0x42>
 8080c68:	e8df f002 	tbb	[pc, r2]
 8080c6c:	1b021704 	.word	0x1b021704
 8080c70:	2005      	movs	r0, #5
 8080c72:	4770      	bx	lr
        const char c = d_->json[t_->start];
 8080c74:	681b      	ldr	r3, [r3, #0]
 8080c76:	685a      	ldr	r2, [r3, #4]
 8080c78:	6843      	ldr	r3, [r0, #4]
 8080c7a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 8080c7c:	282d      	cmp	r0, #45	; 0x2d
 8080c7e:	d012      	beq.n	8080ca6 <_ZNK5spark9JSONValue4typeEv+0x4a>
 8080c80:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8080c84:	2b09      	cmp	r3, #9
 8080c86:	d90e      	bls.n	8080ca6 <_ZNK5spark9JSONValue4typeEv+0x4a>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 8080c88:	2874      	cmp	r0, #116	; 0x74
 8080c8a:	d00e      	beq.n	8080caa <_ZNK5spark9JSONValue4typeEv+0x4e>
 8080c8c:	2866      	cmp	r0, #102	; 0x66
 8080c8e:	d00c      	beq.n	8080caa <_ZNK5spark9JSONValue4typeEv+0x4e>
        return JSON_TYPE_INVALID;
 8080c90:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 8080c94:	4258      	negs	r0, r3
 8080c96:	4158      	adcs	r0, r3
 8080c98:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 8080c9a:	2006      	movs	r0, #6
 8080c9c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 8080c9e:	2000      	movs	r0, #0
 8080ca0:	4770      	bx	lr
        return JSON_TYPE_STRING;
 8080ca2:	2004      	movs	r0, #4
 8080ca4:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 8080ca6:	2003      	movs	r0, #3
 8080ca8:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 8080caa:	2002      	movs	r0, #2
}
 8080cac:	4770      	bx	lr

08080cae <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 8080cae:	b510      	push	{r4, lr}
 8080cb0:	4604      	mov	r4, r0
    switch (type()) {
 8080cb2:	f7ff ffd3 	bl	8080c5c <_ZNK5spark9JSONValue4typeEv>
 8080cb6:	2802      	cmp	r0, #2
 8080cb8:	d00e      	beq.n	8080cd8 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 8080cba:	1ec3      	subs	r3, r0, #3
 8080cbc:	b2db      	uxtb	r3, r3
 8080cbe:	2b01      	cmp	r3, #1
 8080cc0:	d814      	bhi.n	8080cec <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 8080cc2:	6822      	ldr	r2, [r4, #0]
 8080cc4:	68a3      	ldr	r3, [r4, #8]
 8080cc6:	6850      	ldr	r0, [r2, #4]
 8080cc8:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 8080cca:	220a      	movs	r2, #10
}
 8080ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 8080cd0:	2100      	movs	r1, #0
 8080cd2:	4418      	add	r0, r3
 8080cd4:	f001 befa 	b.w	8082acc <strtol>
        const char* const s = d_->json + t_->start;
 8080cd8:	6822      	ldr	r2, [r4, #0]
 8080cda:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 8080cdc:	6852      	ldr	r2, [r2, #4]
 8080cde:	685b      	ldr	r3, [r3, #4]
 8080ce0:	5cd0      	ldrb	r0, [r2, r3]
 8080ce2:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 8080ce6:	4258      	negs	r0, r3
 8080ce8:	4158      	adcs	r0, r3
}
 8080cea:	bd10      	pop	{r4, pc}
    switch (type()) {
 8080cec:	2000      	movs	r0, #0
 8080cee:	e7fc      	b.n	8080cea <_ZNK5spark9JSONValue5toIntEv+0x3c>

08080cf0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 8080cf0:	460b      	mov	r3, r1
 8080cf2:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 8080cf4:	2200      	movs	r2, #0
 8080cf6:	b510      	push	{r4, lr}
 8080cf8:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 8080cfa:	e9c0 2200 	strd	r2, r2, [r0]
        n_(0) {
 8080cfe:	480d      	ldr	r0, [pc, #52]	; (8080d34 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 8080d00:	e9c4 0202 	strd	r0, r2, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 8080d04:	b1a3      	cbz	r3, 8080d30 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
 8080d06:	781a      	ldrb	r2, [r3, #0]
 8080d08:	2a03      	cmp	r2, #3
 8080d0a:	d006      	beq.n	8080d1a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
 8080d0c:	b982      	cbnz	r2, 8080d30 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 8080d0e:	680a      	ldr	r2, [r1, #0]
 8080d10:	6850      	ldr	r0, [r2, #4]
 8080d12:	685a      	ldr	r2, [r3, #4]
 8080d14:	5c82      	ldrb	r2, [r0, r2]
 8080d16:	2a6e      	cmp	r2, #110	; 0x6e
 8080d18:	d007      	beq.n	8080d2a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3a>
            s_ = d->json + t->start;
 8080d1a:	680a      	ldr	r2, [r1, #0]
 8080d1c:	6858      	ldr	r0, [r3, #4]
 8080d1e:	6852      	ldr	r2, [r2, #4]
            n_ = t->end - t->start;
 8080d20:	689b      	ldr	r3, [r3, #8]
            s_ = d->json + t->start;
 8080d22:	4402      	add	r2, r0
            n_ = t->end - t->start;
 8080d24:	1a1b      	subs	r3, r3, r0
            s_ = d->json + t->start;
 8080d26:	60a2      	str	r2, [r4, #8]
            n_ = t->end - t->start;
 8080d28:	60e3      	str	r3, [r4, #12]
 8080d2a:	4620      	mov	r0, r4
 8080d2c:	f7ff ff71 	bl	8080c12 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 8080d30:	4620      	mov	r0, r4
 8080d32:	bd10      	pop	{r4, pc}
 8080d34:	08082c31 	.word	0x08082c31

08080d38 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 8080d38:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 8080d3a:	2500      	movs	r5, #0
 8080d3c:	460b      	mov	r3, r1
 8080d3e:	4604      	mov	r4, r0
 8080d40:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 8080d42:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 8080d46:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8080d4a:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 8080d4e:	b14b      	cbz	r3, 8080d64 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 8080d50:	781a      	ldrb	r2, [r3, #0]
 8080d52:	2a01      	cmp	r2, #1
 8080d54:	d106      	bne.n	8080d64 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 8080d56:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 8080d5a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 8080d5c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 8080d5e:	6143      	str	r3, [r0, #20]
 8080d60:	f7ff ff57 	bl	8080c12 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 8080d64:	4620      	mov	r0, r4
 8080d66:	bd38      	pop	{r3, r4, r5, pc}

08080d68 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 8080d68:	b510      	push	{r4, lr}
    if (!n_) {
 8080d6a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 8080d6c:	4604      	mov	r4, r0
    if (!n_) {
 8080d6e:	b163      	cbz	r3, 8080d8a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 8080d70:	6880      	ldr	r0, [r0, #8]
    --n_;
 8080d72:	3b01      	subs	r3, #1
    k_ = t_; // Name
 8080d74:	60e0      	str	r0, [r4, #12]
    ++t_;
 8080d76:	3010      	adds	r0, #16
 8080d78:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 8080d7a:	6120      	str	r0, [r4, #16]
    --n_;
 8080d7c:	6163      	str	r3, [r4, #20]
    if (n_) {
 8080d7e:	b113      	cbz	r3, 8080d86 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 8080d80:	f7ff feda 	bl	8080b38 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 8080d84:	60a0      	str	r0, [r4, #8]
    return true;
 8080d86:	2001      	movs	r0, #1
 8080d88:	e000      	b.n	8080d8c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 8080d8a:	4618      	mov	r0, r3
}
 8080d8c:	bd10      	pop	{r4, pc}

08080d8e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 8080d8e:	b510      	push	{r4, lr}
    write('}');
 8080d90:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 8080d92:	4604      	mov	r4, r0
    write('}');
 8080d94:	f7ff ff31 	bl	8080bfa <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 8080d98:	2301      	movs	r3, #1
}
 8080d9a:	4620      	mov	r0, r4
    state_ = NEXT;
 8080d9c:	7123      	strb	r3, [r4, #4]
}
 8080d9e:	bd10      	pop	{r4, pc}

08080da0 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 8080da0:	b508      	push	{r3, lr}
    switch (state_) {
 8080da2:	7903      	ldrb	r3, [r0, #4]
 8080da4:	2b01      	cmp	r3, #1
 8080da6:	d002      	beq.n	8080dae <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 8080da8:	2b02      	cmp	r3, #2
 8080daa:	d004      	beq.n	8080db6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 8080dac:	bd08      	pop	{r3, pc}
        write(',');
 8080dae:	212c      	movs	r1, #44	; 0x2c
        write(':');
 8080db0:	f7ff ff23 	bl	8080bfa <_ZN5spark10JSONWriter5writeEc>
}
 8080db4:	e7fa      	b.n	8080dac <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 8080db6:	213a      	movs	r1, #58	; 0x3a
 8080db8:	e7fa      	b.n	8080db0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

08080dba <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 8080dba:	b510      	push	{r4, lr}
 8080dbc:	4604      	mov	r4, r0
    writeSeparator();
 8080dbe:	f7ff ffef 	bl	8080da0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 8080dc2:	4620      	mov	r0, r4
 8080dc4:	217b      	movs	r1, #123	; 0x7b
 8080dc6:	f7ff ff18 	bl	8080bfa <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 8080dca:	2300      	movs	r3, #0
}
 8080dcc:	4620      	mov	r0, r4
    state_ = BEGIN;
 8080dce:	7123      	strb	r3, [r4, #4]
}
 8080dd0:	bd10      	pop	{r4, pc}
	...

08080dd4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 8080dd4:	b538      	push	{r3, r4, r5, lr}
 8080dd6:	4604      	mov	r4, r0
 8080dd8:	460d      	mov	r5, r1
    writeSeparator();
 8080dda:	f7ff ffe1 	bl	8080da0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 8080dde:	6823      	ldr	r3, [r4, #0]
 8080de0:	4620      	mov	r0, r4
 8080de2:	462a      	mov	r2, r5
 8080de4:	68db      	ldr	r3, [r3, #12]
 8080de6:	4903      	ldr	r1, [pc, #12]	; (8080df4 <_ZN5spark10JSONWriter5valueEi+0x20>)
 8080de8:	4798      	blx	r3
    state_ = NEXT;
 8080dea:	2301      	movs	r3, #1
}
 8080dec:	4620      	mov	r0, r4
    state_ = NEXT;
 8080dee:	7123      	strb	r3, [r4, #4]
}
 8080df0:	bd38      	pop	{r3, r4, r5, pc}
 8080df2:	bf00      	nop
 8080df4:	08082bcc 	.word	0x08082bcc

08080df8 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 8080df8:	b538      	push	{r3, r4, r5, lr}
 8080dfa:	4604      	mov	r4, r0
 8080dfc:	460d      	mov	r5, r1
    writeSeparator();
 8080dfe:	f7ff ffcf 	bl	8080da0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 8080e02:	6823      	ldr	r3, [r4, #0]
 8080e04:	4620      	mov	r0, r4
 8080e06:	462a      	mov	r2, r5
 8080e08:	68db      	ldr	r3, [r3, #12]
 8080e0a:	4903      	ldr	r1, [pc, #12]	; (8080e18 <_ZN5spark10JSONWriter5valueEj+0x20>)
 8080e0c:	4798      	blx	r3
    state_ = NEXT;
 8080e0e:	2301      	movs	r3, #1
}
 8080e10:	4620      	mov	r0, r4
    state_ = NEXT;
 8080e12:	7123      	strb	r3, [r4, #4]
}
 8080e14:	bd38      	pop	{r3, r4, r5, pc}
 8080e16:	bf00      	nop
 8080e18:	08082bcf 	.word	0x08082bcf

08080e1c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 8080e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080e20:	460d      	mov	r5, r1
 8080e22:	4617      	mov	r7, r2
    write('"');
 8080e24:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 8080e26:	4604      	mov	r4, r0
    write('"');
 8080e28:	f7ff fee7 	bl	8080bfa <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
 8080e2c:	4629      	mov	r1, r5
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 8080e2e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8080ec8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
    const char* const end = str + size;
 8080e32:	442f      	add	r7, r5
    while (s != end) {
 8080e34:	42bd      	cmp	r5, r7
 8080e36:	462a      	mov	r2, r5
 8080e38:	d038      	beq.n	8080eac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
 8080e3a:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 8080e3e:	2e22      	cmp	r6, #34	; 0x22
 8080e40:	d003      	beq.n	8080e4a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 8080e42:	2e5c      	cmp	r6, #92	; 0x5c
 8080e44:	d001      	beq.n	8080e4a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 8080e46:	2e1f      	cmp	r6, #31
 8080e48:	d8f4      	bhi.n	8080e34 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 8080e4a:	6823      	ldr	r3, [r4, #0]
 8080e4c:	1a52      	subs	r2, r2, r1
 8080e4e:	4620      	mov	r0, r4
 8080e50:	689b      	ldr	r3, [r3, #8]
 8080e52:	4798      	blx	r3
            write('\\');
 8080e54:	215c      	movs	r1, #92	; 0x5c
 8080e56:	4620      	mov	r0, r4
 8080e58:	f7ff fecf 	bl	8080bfa <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 8080e5c:	2e0d      	cmp	r6, #13
 8080e5e:	d80a      	bhi.n	8080e76 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
 8080e60:	2e07      	cmp	r6, #7
 8080e62:	d91c      	bls.n	8080e9e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 8080e64:	f1a6 0308 	sub.w	r3, r6, #8
 8080e68:	2b05      	cmp	r3, #5
 8080e6a:	d818      	bhi.n	8080e9e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 8080e6c:	e8df f003 	tbb	[pc, r3]
 8080e70:	17110f0d 	.word	0x17110f0d
 8080e74:	1513      	.short	0x1513
 8080e76:	2e22      	cmp	r6, #34	; 0x22
 8080e78:	d001      	beq.n	8080e7e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 8080e7a:	2e5c      	cmp	r6, #92	; 0x5c
 8080e7c:	d10f      	bne.n	8080e9e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
 8080e7e:	4631      	mov	r1, r6
                write('b');
 8080e80:	4620      	mov	r0, r4
 8080e82:	f7ff feba 	bl	8080bfa <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 8080e86:	4629      	mov	r1, r5
    while (s != end) {
 8080e88:	e7d4      	b.n	8080e34 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 8080e8a:	2162      	movs	r1, #98	; 0x62
 8080e8c:	e7f8      	b.n	8080e80 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
 8080e8e:	2174      	movs	r1, #116	; 0x74
 8080e90:	e7f6      	b.n	8080e80 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
 8080e92:	216e      	movs	r1, #110	; 0x6e
 8080e94:	e7f4      	b.n	8080e80 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
 8080e96:	2166      	movs	r1, #102	; 0x66
 8080e98:	e7f2      	b.n	8080e80 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
 8080e9a:	2172      	movs	r1, #114	; 0x72
 8080e9c:	e7f0      	b.n	8080e80 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
 8080e9e:	6823      	ldr	r3, [r4, #0]
 8080ea0:	4632      	mov	r2, r6
 8080ea2:	4641      	mov	r1, r8
 8080ea4:	4620      	mov	r0, r4
 8080ea6:	68db      	ldr	r3, [r3, #12]
 8080ea8:	4798      	blx	r3
                break;
 8080eaa:	e7ec      	b.n	8080e86 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
 8080eac:	428d      	cmp	r5, r1
 8080eae:	d004      	beq.n	8080eba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
 8080eb0:	6823      	ldr	r3, [r4, #0]
 8080eb2:	4620      	mov	r0, r4
 8080eb4:	689b      	ldr	r3, [r3, #8]
 8080eb6:	1a6a      	subs	r2, r5, r1
 8080eb8:	4798      	blx	r3
    }
    write('"');
 8080eba:	2122      	movs	r1, #34	; 0x22
 8080ebc:	4620      	mov	r0, r4
 8080ebe:	f7ff fe9c 	bl	8080bfa <_ZN5spark10JSONWriter5writeEc>
}
 8080ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8080ec6:	bf00      	nop
 8080ec8:	08082bd2 	.word	0x08082bd2

08080ecc <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 8080ecc:	b570      	push	{r4, r5, r6, lr}
 8080ece:	4604      	mov	r4, r0
 8080ed0:	460d      	mov	r5, r1
 8080ed2:	4616      	mov	r6, r2
    writeSeparator();
 8080ed4:	f7ff ff64 	bl	8080da0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 8080ed8:	4620      	mov	r0, r4
 8080eda:	4632      	mov	r2, r6
 8080edc:	4629      	mov	r1, r5
 8080ede:	f7ff ff9d 	bl	8080e1c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 8080ee2:	2302      	movs	r3, #2
}
 8080ee4:	4620      	mov	r0, r4
    state_ = VALUE;
 8080ee6:	7123      	strb	r3, [r4, #4]
}
 8080ee8:	bd70      	pop	{r4, r5, r6, pc}

08080eea <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 8080eea:	b570      	push	{r4, r5, r6, lr}
 8080eec:	4604      	mov	r4, r0
 8080eee:	460d      	mov	r5, r1
 8080ef0:	4616      	mov	r6, r2
    writeSeparator();
 8080ef2:	f7ff ff55 	bl	8080da0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 8080ef6:	4620      	mov	r0, r4
 8080ef8:	4632      	mov	r2, r6
 8080efa:	4629      	mov	r1, r5
 8080efc:	f7ff ff8e 	bl	8080e1c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 8080f00:	2301      	movs	r3, #1
}
 8080f02:	4620      	mov	r0, r4
    state_ = NEXT;
 8080f04:	7123      	strb	r3, [r4, #4]
}
 8080f06:	bd70      	pop	{r4, r5, r6, pc}

08080f08 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 8080f08:	6880      	ldr	r0, [r0, #8]
 8080f0a:	6803      	ldr	r3, [r0, #0]
 8080f0c:	68db      	ldr	r3, [r3, #12]
 8080f0e:	4718      	bx	r3

08080f10 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 8080f10:	4770      	bx	lr

08080f12 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 8080f12:	4608      	mov	r0, r1
 8080f14:	b111      	cbz	r1, 8080f1c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 8080f16:	680b      	ldr	r3, [r1, #0]
 8080f18:	685b      	ldr	r3, [r3, #4]
 8080f1a:	4718      	bx	r3
}
 8080f1c:	4770      	bx	lr

08080f1e <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 8080f1e:	4770      	bx	lr

08080f20 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 8080f20:	4770      	bx	lr

08080f22 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 8080f22:	4770      	bx	lr

08080f24 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
 8080f24:	b538      	push	{r3, r4, r5, lr}
 8080f26:	4604      	mov	r4, r0
 8080f28:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 8080f2a:	6800      	ldr	r0, [r0, #0]
 8080f2c:	212e      	movs	r1, #46	; 0x2e
 8080f2e:	f001 fd08 	bl	8082942 <strchrnul>
    size = s - category;
 8080f32:	6823      	ldr	r3, [r4, #0]
    const char *s = strchrnul(category, '.');
 8080f34:	4602      	mov	r2, r0
    size = s - category;
 8080f36:	1ac0      	subs	r0, r0, r3
 8080f38:	6028      	str	r0, [r5, #0]
    if (size) {
 8080f3a:	b120      	cbz	r0, 8080f46 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x22>
        if (*s) {
 8080f3c:	7813      	ldrb	r3, [r2, #0]
 8080f3e:	b103      	cbz	r3, 8080f42 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1e>
            ++s;
 8080f40:	3201      	adds	r2, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080f42:	6820      	ldr	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8080f44:	6022      	str	r2, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
 8080f46:	bd38      	pop	{r3, r4, r5, pc}

08080f48 <_ZN5spark16JSONStreamWriterD0Ev>:
 8080f48:	b510      	push	{r4, lr}
 8080f4a:	4604      	mov	r4, r0
 8080f4c:	210c      	movs	r1, #12
 8080f4e:	f001 fc82 	bl	8082856 <_ZdlPvj>
 8080f52:	4620      	mov	r0, r4
 8080f54:	bd10      	pop	{r4, pc}

08080f56 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 8080f56:	b510      	push	{r4, lr}
 8080f58:	4604      	mov	r4, r0
 8080f5a:	2104      	movs	r1, #4
 8080f5c:	f001 fc7b 	bl	8082856 <_ZdlPvj>
 8080f60:	4620      	mov	r0, r4
 8080f62:	bd10      	pop	{r4, pc}

08080f64 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 8080f64:	b510      	push	{r4, lr}
 8080f66:	4604      	mov	r4, r0
 8080f68:	2104      	movs	r1, #4
 8080f6a:	f001 fc74 	bl	8082856 <_ZdlPvj>
 8080f6e:	4620      	mov	r0, r4
 8080f70:	bd10      	pop	{r4, pc}

08080f72 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 8080f72:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 8080f74:	f001 fcef 	bl	8082956 <strcmp>
}
 8080f78:	fab0 f080 	clz	r0, r0
 8080f7c:	0940      	lsrs	r0, r0, #5
 8080f7e:	bd08      	pop	{r3, pc}

08080f80 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 8080f80:	b510      	push	{r4, lr}
 8080f82:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
 8080f84:	f001 fa5c 	bl	8082440 <_Z16_fetch_usbserialv>
 8080f88:	4284      	cmp	r4, r0
 8080f8a:	d105      	bne.n	8080f98 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 8080f8c:	f001 fa58 	bl	8082440 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 8080f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        USBSerial1.end();
 8080f94:	f001 ba3a 	b.w	808240c <_ZN9USBSerial3endEv>
    if (stream == &USBSerial1) {
 8080f98:	f001 fa90 	bl	80824bc <_Z17_fetch_usbserial1v>
 8080f9c:	4284      	cmp	r4, r0
 8080f9e:	d102      	bne.n	8080fa6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x26>
        USBSerial1.end();
 8080fa0:	f001 fa8c 	bl	80824bc <_Z17_fetch_usbserial1v>
 8080fa4:	e7f4      	b.n	8080f90 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x10>
    if (stream == &Serial1) {
 8080fa6:	f001 f9b5 	bl	8082314 <_Z22__fetch_global_Serial1v>
 8080faa:	4284      	cmp	r4, r0
 8080fac:	d105      	bne.n	8080fba <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
        Serial1.end();
 8080fae:	f001 f9b1 	bl	8082314 <_Z22__fetch_global_Serial1v>
}
 8080fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 8080fb6:	f001 b9a6 	b.w	8082306 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 8080fba:	b12c      	cbz	r4, 8080fc8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x48>
 8080fbc:	6823      	ldr	r3, [r4, #0]
 8080fbe:	4620      	mov	r0, r4
}
 8080fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8080fc4:	685b      	ldr	r3, [r3, #4]
 8080fc6:	4718      	bx	r3
 8080fc8:	bd10      	pop	{r4, pc}

08080fca <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 8080fca:	b538      	push	{r3, r4, r5, lr}
 8080fcc:	4605      	mov	r5, r0
    return value(val, strlen(val));
 8080fce:	4608      	mov	r0, r1
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 8080fd0:	460c      	mov	r4, r1
    return value(val, strlen(val));
 8080fd2:	f001 fcd2 	bl	808297a <strlen>
 8080fd6:	4621      	mov	r1, r4
 8080fd8:	4602      	mov	r2, r0
 8080fda:	4628      	mov	r0, r5
}
 8080fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return value(val, strlen(val));
 8080fe0:	f7ff bf83 	b.w	8080eea <_ZN5spark10JSONWriter5valueEPKcj>

08080fe4 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 8080fe4:	b570      	push	{r4, r5, r6, lr}
 8080fe6:	4604      	mov	r4, r0
    write(str, strlen(str));
 8080fe8:	4608      	mov	r0, r1
inline void spark::StreamLogHandler::write(const char *str) {
 8080fea:	460d      	mov	r5, r1
    write(str, strlen(str));
 8080fec:	f001 fcc5 	bl	808297a <strlen>
 8080ff0:	6823      	ldr	r3, [r4, #0]
 8080ff2:	4602      	mov	r2, r0
 8080ff4:	4629      	mov	r1, r5
 8080ff6:	4620      	mov	r0, r4
}
 8080ff8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    write(str, strlen(str));
 8080ffc:	68db      	ldr	r3, [r3, #12]
 8080ffe:	4718      	bx	r3

08081000 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 8081000:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 8081002:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 8081004:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 8081008:	2201      	movs	r2, #1
 808100a:	68db      	ldr	r3, [r3, #12]
 808100c:	f10d 0107 	add.w	r1, sp, #7
 8081010:	4798      	blx	r3
}
 8081012:	b003      	add	sp, #12
 8081014:	f85d fb04 	ldr.w	pc, [sp], #4

08081018 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
 8081018:	b40e      	push	{r1, r2, r3}
 808101a:	b503      	push	{r0, r1, lr}
 808101c:	ab03      	add	r3, sp, #12
 808101e:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
 8081022:	2100      	movs	r1, #0
 8081024:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
 8081026:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
 8081028:	f001 f800 	bl	808202c <_ZN5Print7vprintfEbPKcSt9__va_list>
}
 808102c:	b002      	add	sp, #8
 808102e:	f85d eb04 	ldr.w	lr, [sp], #4
 8081032:	b003      	add	sp, #12
 8081034:	4770      	bx	lr
	...

08081038 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 8081038:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 808103c:	f04f 0814 	mov.w	r8, #20
 8081040:	e9d0 9500 	ldrd	r9, r5, [r0]
 8081044:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 8081046:	464c      	mov	r4, r9
 8081048:	fb08 f505 	mul.w	r5, r8, r5
 808104c:	9300      	str	r3, [sp, #0]
 808104e:	10ab      	asrs	r3, r5, #2
 8081050:	4d17      	ldr	r5, [pc, #92]	; (80810b0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 8081052:	435d      	muls	r5, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 8081054:	2d00      	cmp	r5, #0
 8081056:	dd23      	ble.n	80810a0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
 8081058:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 808105a:	fb08 f006 	mul.w	r0, r8, r6
 808105e:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 8081062:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8081066:	463a      	mov	r2, r7
 8081068:	455f      	cmp	r7, fp
 808106a:	bf28      	it	cs
 808106c:	465a      	movcs	r2, fp
 808106e:	5820      	ldr	r0, [r4, r0]
 8081070:	9101      	str	r1, [sp, #4]
 8081072:	f001 fc8a 	bl	808298a <strncmp>
                if (cmp == 0) {
 8081076:	2301      	movs	r3, #1
 8081078:	9901      	ldr	r1, [sp, #4]
 808107a:	b978      	cbnz	r0, 808109c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
 808107c:	455f      	cmp	r7, fp
 808107e:	d103      	bne.n	8081088 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 8081080:	9a00      	ldr	r2, [sp, #0]
 8081082:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 8081084:	4635      	mov	r5, r6
 8081086:	e7e5      	b.n	8081054 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
 8081088:	bf8c      	ite	hi
 808108a:	2001      	movhi	r0, #1
 808108c:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 808108e:	2800      	cmp	r0, #0
 8081090:	d0f8      	beq.n	8081084 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 8081092:	1bae      	subs	r6, r5, r6
	      ++__first;
 8081094:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
 8081098:	3e01      	subs	r6, #1
 808109a:	e7f3      	b.n	8081084 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
 808109c:	0fc0      	lsrs	r0, r0, #31
 808109e:	e7f6      	b.n	808108e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
 80810a0:	eba4 0409 	sub.w	r4, r4, r9
}
 80810a4:	4802      	ldr	r0, [pc, #8]	; (80810b0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 80810a6:	10a4      	asrs	r4, r4, #2
 80810a8:	4360      	muls	r0, r4
 80810aa:	b003      	add	sp, #12
 80810ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80810b0:	cccccccd 	.word	0xcccccccd

080810b4 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 80810b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 80810b6:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 80810b8:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 80810ba:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 80810bc:	b303      	cbz	r3, 8081100 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 80810be:	b1f9      	cbz	r1, 8081100 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 80810c0:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 80810c2:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 80810c6:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 80810c8:	a903      	add	r1, sp, #12
 80810ca:	a801      	add	r0, sp, #4
 80810cc:	f7ff ff2a 	bl	8080f24 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80810d0:	4601      	mov	r1, r0
 80810d2:	b1a8      	cbz	r0, 8081100 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 80810d4:	f10d 030b 	add.w	r3, sp, #11
 80810d8:	4620      	mov	r0, r4
 80810da:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 80810dc:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 80810e0:	f7ff ffaa 	bl	8081038 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 80810e4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80810e8:	b153      	cbz	r3, 8081100 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 80810ea:	2314      	movs	r3, #20
 80810ec:	6824      	ldr	r4, [r4, #0]
 80810ee:	fb03 4400 	mla	r4, r3, r0, r4
            if (node.level >= 0) {
 80810f2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 80810f6:	3408      	adds	r4, #8
            if (node.level >= 0) {
 80810f8:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 80810fa:	bfa8      	it	ge
 80810fc:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
 80810fe:	e7e3      	b.n	80810c8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 8081100:	4630      	mov	r0, r6
 8081102:	b004      	add	sp, #16
 8081104:	bd70      	pop	{r4, r5, r6, pc}
	...

08081108 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 8081108:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 808110a:	4c0a      	ldr	r4, [pc, #40]	; (8081134 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 808110c:	7823      	ldrb	r3, [r4, #0]
 808110e:	f3bf 8f5b 	dmb	ish
 8081112:	07db      	lsls	r3, r3, #31
 8081114:	d40b      	bmi.n	808112e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 8081116:	4620      	mov	r0, r4
 8081118:	f7fe ffce 	bl	80800b8 <__cxa_guard_acquire>
 808111c:	b138      	cbz	r0, 808112e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 808111e:	4620      	mov	r0, r4
 8081120:	f7fe ffcf 	bl	80800c2 <__cxa_guard_release>
 8081124:	4a04      	ldr	r2, [pc, #16]	; (8081138 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
 8081126:	4905      	ldr	r1, [pc, #20]	; (808113c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 8081128:	4805      	ldr	r0, [pc, #20]	; (8081140 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 808112a:	f001 fb8f 	bl	808284c <__aeabi_atexit>
}
 808112e:	4804      	ldr	r0, [pc, #16]	; (8081140 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 8081130:	bd10      	pop	{r4, pc}
 8081132:	bf00      	nop
 8081134:	20000210 	.word	0x20000210
 8081138:	20000078 	.word	0x20000078
 808113c:	08080f21 	.word	0x08080f21
 8081140:	20000008 	.word	0x20000008

08081144 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 8081144:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 8081146:	4c0a      	ldr	r4, [pc, #40]	; (8081170 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 8081148:	7823      	ldrb	r3, [r4, #0]
 808114a:	f3bf 8f5b 	dmb	ish
 808114e:	07db      	lsls	r3, r3, #31
 8081150:	d40b      	bmi.n	808116a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 8081152:	4620      	mov	r0, r4
 8081154:	f7fe ffb0 	bl	80800b8 <__cxa_guard_acquire>
 8081158:	b138      	cbz	r0, 808116a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 808115a:	4620      	mov	r0, r4
 808115c:	f7fe ffb1 	bl	80800c2 <__cxa_guard_release>
 8081160:	4a04      	ldr	r2, [pc, #16]	; (8081174 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
 8081162:	4905      	ldr	r1, [pc, #20]	; (8081178 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 8081164:	4805      	ldr	r0, [pc, #20]	; (808117c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 8081166:	f001 fb71 	bl	808284c <__aeabi_atexit>
    return &factory;
}
 808116a:	4804      	ldr	r0, [pc, #16]	; (808117c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 808116c:	bd10      	pop	{r4, pc}
 808116e:	bf00      	nop
 8081170:	20000214 	.word	0x20000214
 8081174:	20000078 	.word	0x20000078
 8081178:	08080f1f 	.word	0x08080f1f
 808117c:	2000000c 	.word	0x2000000c

08081180 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 8081180:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 8081182:	2500      	movs	r5, #0
 8081184:	4604      	mov	r4, r0
 8081186:	e9c0 5500 	strd	r5, r5, [r0]
 808118a:	e9c0 5504 	strd	r5, r5, [r0, #16]
 808118e:	6085      	str	r5, [r0, #8]
 8081190:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 8081192:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
 8081196:	f7ff f9c7 	bl	8080528 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 808119a:	f7ff ffb5 	bl	8081108 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 808119e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80811a0:	f7ff ffd0 	bl	8081144 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 80811a4:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80811a6:	6220      	str	r0, [r4, #32]
}
 80811a8:	4620      	mov	r0, r4
 80811aa:	bd38      	pop	{r3, r4, r5, pc}

080811ac <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 80811ac:	b510      	push	{r4, lr}
    static LogManager mgr;
 80811ae:	4c0b      	ldr	r4, [pc, #44]	; (80811dc <_ZN5spark10LogManager8instanceEv+0x30>)
 80811b0:	7823      	ldrb	r3, [r4, #0]
 80811b2:	f3bf 8f5b 	dmb	ish
 80811b6:	07db      	lsls	r3, r3, #31
 80811b8:	d40e      	bmi.n	80811d8 <_ZN5spark10LogManager8instanceEv+0x2c>
 80811ba:	4620      	mov	r0, r4
 80811bc:	f7fe ff7c 	bl	80800b8 <__cxa_guard_acquire>
 80811c0:	b150      	cbz	r0, 80811d8 <_ZN5spark10LogManager8instanceEv+0x2c>
 80811c2:	4807      	ldr	r0, [pc, #28]	; (80811e0 <_ZN5spark10LogManager8instanceEv+0x34>)
 80811c4:	f7ff ffdc 	bl	8081180 <_ZN5spark10LogManagerC1Ev>
 80811c8:	4620      	mov	r0, r4
 80811ca:	f7fe ff7a 	bl	80800c2 <__cxa_guard_release>
 80811ce:	4a05      	ldr	r2, [pc, #20]	; (80811e4 <_ZN5spark10LogManager8instanceEv+0x38>)
 80811d0:	4905      	ldr	r1, [pc, #20]	; (80811e8 <_ZN5spark10LogManager8instanceEv+0x3c>)
 80811d2:	4803      	ldr	r0, [pc, #12]	; (80811e0 <_ZN5spark10LogManager8instanceEv+0x34>)
 80811d4:	f001 fb3a 	bl	808284c <__aeabi_atexit>
    return &mgr;
}
 80811d8:	4801      	ldr	r0, [pc, #4]	; (80811e0 <_ZN5spark10LogManager8instanceEv+0x34>)
 80811da:	bd10      	pop	{r4, pc}
 80811dc:	2000020c 	.word	0x2000020c
 80811e0:	2000021c 	.word	0x2000021c
 80811e4:	20000078 	.word	0x20000078
 80811e8:	0808165f 	.word	0x0808165f

080811ec <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 80811ec:	2300      	movs	r3, #0
 80811ee:	4a02      	ldr	r2, [pc, #8]	; (80811f8 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 80811f0:	4902      	ldr	r1, [pc, #8]	; (80811fc <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 80811f2:	4803      	ldr	r0, [pc, #12]	; (8081200 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 80811f4:	f7ff bad8 	b.w	80807a8 <log_set_callbacks>
 80811f8:	0808153d 	.word	0x0808153d
 80811fc:	080814c9 	.word	0x080814c9
 8081200:	08081449 	.word	0x08081449

08081204 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 8081204:	2300      	movs	r3, #0
 8081206:	461a      	mov	r2, r3
 8081208:	4619      	mov	r1, r3
 808120a:	4618      	mov	r0, r3
 808120c:	f7ff bacc 	b.w	80807a8 <log_set_callbacks>

08081210 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 8081210:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8081212:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 8081214:	690d      	ldr	r5, [r1, #16]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081216:	f851 3b04 	ldr.w	r3, [r1], #4
 808121a:	a801      	add	r0, sp, #4
 808121c:	9300      	str	r3, [sp, #0]
 808121e:	f7ff fbf6 	bl	8080a0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8081222:	466a      	mov	r2, sp
 8081224:	4629      	mov	r1, r5
 8081226:	4620      	mov	r0, r4
 8081228:	f7ff fd0a 	bl	8080c40 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808122c:	a801      	add	r0, sp, #4
 808122e:	f7ff f935 	bl	808049c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8081232:	4620      	mov	r0, r4
 8081234:	b003      	add	sp, #12
 8081236:	bd30      	pop	{r4, r5, pc}

08081238 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 8081238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808123a:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 808123c:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 808123e:	f851 3b04 	ldr.w	r3, [r1], #4
 8081242:	a801      	add	r0, sp, #4
 8081244:	9300      	str	r3, [sp, #0]
 8081246:	f7ff fbe2 	bl	8080a0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 808124a:	466a      	mov	r2, sp
 808124c:	4629      	mov	r1, r5
 808124e:	4620      	mov	r0, r4
 8081250:	f7ff fd72 	bl	8080d38 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 8081254:	a801      	add	r0, sp, #4
 8081256:	f7ff f921 	bl	808049c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 808125a:	4620      	mov	r0, r4
 808125c:	b003      	add	sp, #12
 808125e:	bd30      	pop	{r4, r5, pc}

08081260 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 8081260:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8081262:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 8081264:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081266:	f851 3b04 	ldr.w	r3, [r1], #4
 808126a:	a801      	add	r0, sp, #4
 808126c:	9300      	str	r3, [sp, #0]
 808126e:	f7ff fbce 	bl	8080a0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8081272:	466a      	mov	r2, sp
 8081274:	4629      	mov	r1, r5
 8081276:	4620      	mov	r0, r4
 8081278:	f7ff fd3a 	bl	8080cf0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 808127c:	a801      	add	r0, sp, #4
 808127e:	f7ff f90d 	bl	808049c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8081282:	4620      	mov	r0, r4
 8081284:	b003      	add	sp, #12
 8081286:	bd30      	pop	{r4, r5, pc}

08081288 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 8081288:	b570      	push	{r4, r5, r6, lr}
 808128a:	b08a      	sub	sp, #40	; 0x28
 808128c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 808128e:	4601      	mov	r1, r0
 8081290:	a804      	add	r0, sp, #16
 8081292:	f7ff ffd1 	bl	8081238 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 8081296:	4e14      	ldr	r6, [pc, #80]	; (80812e8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 8081298:	a804      	add	r0, sp, #16
 808129a:	f7ff fd65 	bl	8080d68 <_ZN5spark18JSONObjectIterator4nextEv>
 808129e:	b1e8      	cbz	r0, 80812dc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 80812a0:	4668      	mov	r0, sp
 80812a2:	a904      	add	r1, sp, #16
 80812a4:	f7ff ffdc 	bl	8081260 <_ZNK5spark18JSONObjectIterator4nameEv>
 80812a8:	4631      	mov	r1, r6
 80812aa:	9802      	ldr	r0, [sp, #8]
 80812ac:	f7ff fe61 	bl	8080f72 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 80812b0:	4604      	mov	r4, r0
 80812b2:	b110      	cbz	r0, 80812ba <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 80812b4:	1e2c      	subs	r4, r5, #0
 80812b6:	bf18      	it	ne
 80812b8:	2401      	movne	r4, #1
 80812ba:	a801      	add	r0, sp, #4
 80812bc:	f7ff f8ee 	bl	808049c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80812c0:	2c00      	cmp	r4, #0
 80812c2:	d0e9      	beq.n	8081298 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 80812c4:	4668      	mov	r0, sp
 80812c6:	a904      	add	r1, sp, #16
 80812c8:	f7ff ffa2 	bl	8081210 <_ZNK5spark18JSONObjectIterator5valueEv>
 80812cc:	4668      	mov	r0, sp
 80812ce:	f7ff fcee 	bl	8080cae <_ZNK5spark9JSONValue5toIntEv>
 80812d2:	6028      	str	r0, [r5, #0]
 80812d4:	a801      	add	r0, sp, #4
 80812d6:	f7ff f8e1 	bl	808049c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80812da:	e7dd      	b.n	8081298 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 80812dc:	a805      	add	r0, sp, #20
 80812de:	f7ff f8dd 	bl	808049c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80812e2:	b00a      	add	sp, #40	; 0x28
 80812e4:	bd70      	pop	{r4, r5, r6, pc}
 80812e6:	bf00      	nop
 80812e8:	08082bd8 	.word	0x08082bd8

080812ec <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80812ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80812ee:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 80812f0:	4919      	ldr	r1, [pc, #100]	; (8081358 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6c>)
 80812f2:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80812f4:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 80812f6:	f001 fb2e 	bl	8082956 <strcmp>
 80812fa:	b948      	cbnz	r0, 8081310 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
 80812fc:	f001 f8a0 	bl	8082440 <_Z16_fetch_usbserialv>
 8081300:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8081304:	f001 f87e 	bl	8082404 <_ZN9USBSerial5beginEl>
        return &Serial;
 8081308:	f001 f89a 	bl	8082440 <_Z16_fetch_usbserialv>
}
 808130c:	b003      	add	sp, #12
 808130e:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "USBSerial1") == 0) {
 8081310:	4620      	mov	r0, r4
 8081312:	4912      	ldr	r1, [pc, #72]	; (808135c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x70>)
 8081314:	f001 fb1f 	bl	8082956 <strcmp>
 8081318:	b940      	cbnz	r0, 808132c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x40>
        USBSerial1.begin();
 808131a:	f001 f8cf 	bl	80824bc <_Z17_fetch_usbserial1v>
 808131e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8081322:	f001 f86f 	bl	8082404 <_ZN9USBSerial5beginEl>
        return &USBSerial1;
 8081326:	f001 f8c9 	bl	80824bc <_Z17_fetch_usbserial1v>
 808132a:	e7ef      	b.n	808130c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    if (strcmp(type, "Serial1") == 0) {
 808132c:	4620      	mov	r0, r4
 808132e:	490c      	ldr	r1, [pc, #48]	; (8081360 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x74>)
 8081330:	f001 fb11 	bl	8082956 <strcmp>
 8081334:	b970      	cbnz	r0, 8081354 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x68>
        int baud = 9600;
 8081336:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 808133a:	a901      	add	r1, sp, #4
 808133c:	4628      	mov	r0, r5
        int baud = 9600;
 808133e:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 8081340:	f7ff ffa2 	bl	8081288 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 8081344:	f000 ffe6 	bl	8082314 <_Z22__fetch_global_Serial1v>
 8081348:	9901      	ldr	r1, [sp, #4]
 808134a:	f000 ffd9 	bl	8082300 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 808134e:	f000 ffe1 	bl	8082314 <_Z22__fetch_global_Serial1v>
 8081352:	e7db      	b.n	808130c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
 8081354:	2000      	movs	r0, #0
 8081356:	e7d9      	b.n	808130c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
 8081358:	08082bdd 	.word	0x08082bdd
 808135c:	08082be4 	.word	0x08082be4
 8081360:	08082be7 	.word	0x08082be7

08081364 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 8081364:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 8081366:	2614      	movs	r6, #20
 8081368:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 808136c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 808136e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 8081372:	42ae      	cmp	r6, r5
 8081374:	d005      	beq.n	8081382 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 8081376:	f105 0008 	add.w	r0, r5, #8
 808137a:	f7ff fff3 	bl	8081364 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 808137e:	3514      	adds	r5, #20
 8081380:	e7f7      	b.n	8081372 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 8081382:	6820      	ldr	r0, [r4, #0]
 8081384:	f7ff faac 	bl	80808e0 <free>
}
 8081388:	4620      	mov	r0, r4
 808138a:	bd70      	pop	{r4, r5, r6, pc}

0808138c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 808138c:	b570      	push	{r4, r5, r6, lr}
 808138e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 8081390:	e9d0 5300 	ldrd	r5, r3, [r0]
 8081394:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 8081398:	42ae      	cmp	r6, r5
 808139a:	d004      	beq.n	80813a6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 808139c:	4628      	mov	r0, r5
 808139e:	f000 fe9a 	bl	80820d6 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 80813a2:	3510      	adds	r5, #16
 80813a4:	e7f8      	b.n	8081398 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 80813a6:	6820      	ldr	r0, [r4, #0]
 80813a8:	f7ff fa9a 	bl	80808e0 <free>
}
 80813ac:	4620      	mov	r0, r4
 80813ae:	bd70      	pop	{r4, r5, r6, pc}

080813b0 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 80813b0:	b510      	push	{r4, lr}
 80813b2:	4604      	mov	r4, r0
 80813b4:	300c      	adds	r0, #12
 80813b6:	f7ff ffd5 	bl	8081364 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80813ba:	4620      	mov	r0, r4
 80813bc:	f7ff ffe6 	bl	808138c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80813c0:	4620      	mov	r0, r4
 80813c2:	bd10      	pop	{r4, pc}

080813c4 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 80813c4:	b510      	push	{r4, lr}
 80813c6:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 80813c8:	4b03      	ldr	r3, [pc, #12]	; (80813d8 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 80813ca:	f840 3b04 	str.w	r3, [r0], #4
 80813ce:	f7ff ffef 	bl	80813b0 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 80813d2:	4620      	mov	r0, r4
 80813d4:	bd10      	pop	{r4, pc}
 80813d6:	bf00      	nop
 80813d8:	08082b1c 	.word	0x08082b1c

080813dc <_ZN5spark16StreamLogHandlerD0Ev>:
 80813dc:	b510      	push	{r4, lr}
 80813de:	4604      	mov	r4, r0
 80813e0:	f7ff fff0 	bl	80813c4 <_ZN5spark16StreamLogHandlerD1Ev>
 80813e4:	4620      	mov	r0, r4
 80813e6:	2124      	movs	r1, #36	; 0x24
 80813e8:	f001 fa35 	bl	8082856 <_ZdlPvj>
 80813ec:	4620      	mov	r0, r4
 80813ee:	bd10      	pop	{r4, pc}

080813f0 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 80813f0:	b510      	push	{r4, lr}
 80813f2:	4604      	mov	r4, r0
 80813f4:	4b02      	ldr	r3, [pc, #8]	; (8081400 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 80813f6:	6003      	str	r3, [r0, #0]
 80813f8:	f7ff ffe4 	bl	80813c4 <_ZN5spark16StreamLogHandlerD1Ev>
 80813fc:	4620      	mov	r0, r4
 80813fe:	bd10      	pop	{r4, pc}
 8081400:	08082c84 	.word	0x08082c84

08081404 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 8081404:	b510      	push	{r4, lr}
 8081406:	4604      	mov	r4, r0
 8081408:	f7ff fff2 	bl	80813f0 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 808140c:	4620      	mov	r0, r4
 808140e:	2124      	movs	r1, #36	; 0x24
 8081410:	f001 fa21 	bl	8082856 <_ZdlPvj>
 8081414:	4620      	mov	r0, r4
 8081416:	bd10      	pop	{r4, pc}

08081418 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 8081418:	2200      	movs	r2, #0
 808141a:	e9c0 2200 	strd	r2, r2, [r0]
 808141e:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 8081420:	b510      	push	{r4, lr}
      __a = _GLIBCXX_MOVE(__b);
 8081422:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8081424:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 8081426:	6004      	str	r4, [r0, #0]
 8081428:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 808142a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 808142c:	6044      	str	r4, [r0, #4]
 808142e:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8081430:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 8081432:	6084      	str	r4, [r0, #8]
}
 8081434:	bd10      	pop	{r4, pc}

08081436 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 8081436:	b510      	push	{r4, lr}
 8081438:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 808143a:	6803      	ldr	r3, [r0, #0]
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 808143c:	6818      	ldr	r0, [r3, #0]
 808143e:	f7ff f88b 	bl	8080558 <os_mutex_recursive_unlock>
 8081442:	4620      	mov	r0, r4
 8081444:	bd10      	pop	{r4, pc}
	...

08081448 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 8081448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808144c:	b087      	sub	sp, #28
 808144e:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 8081450:	4b1c      	ldr	r3, [pc, #112]	; (80814c4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 8081452:	4680      	mov	r8, r0
 8081454:	685b      	ldr	r3, [r3, #4]
 8081456:	4689      	mov	r9, r1
 8081458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 808145c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 808145e:	b96b      	cbnz	r3, 808147c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 8081460:	f7ff fea4 	bl	80811ac <_ZN5spark10LogManager8instanceEv>
 8081464:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 8081466:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 808146a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808146c:	9305      	str	r3, [sp, #20]
 808146e:	f7ff f86b 	bl	8080548 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
 8081472:	7b23      	ldrb	r3, [r4, #12]
 8081474:	b12b      	cbz	r3, 8081482 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 8081476:	a805      	add	r0, sp, #20
 8081478:	f7ff ffdd 	bl	8081436 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 808147c:	b007      	add	sp, #28
 808147e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 8081482:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 8081484:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 8081488:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 808148a:	e9d4 5300 	ldrd	r5, r3, [r4]
 808148e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 8081492:	45aa      	cmp	sl, r5
 8081494:	d012      	beq.n	80814bc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 8081496:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 808149a:	4631      	mov	r1, r6
 808149c:	1d38      	adds	r0, r7, #4
 808149e:	f7ff fe09 	bl	80810b4 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80814a2:	4581      	cmp	r9, r0
 80814a4:	d3f5      	bcc.n	8081492 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 80814a6:	9a03      	ldr	r2, [sp, #12]
 80814a8:	683b      	ldr	r3, [r7, #0]
 80814aa:	9200      	str	r2, [sp, #0]
 80814ac:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80814b0:	464a      	mov	r2, r9
 80814b2:	4633      	mov	r3, r6
 80814b4:	4641      	mov	r1, r8
 80814b6:	4638      	mov	r0, r7
 80814b8:	47d8      	blx	fp
 80814ba:	e7ea      	b.n	8081492 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 80814bc:	2300      	movs	r3, #0
 80814be:	7323      	strb	r3, [r4, #12]
 80814c0:	e7d9      	b.n	8081476 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 80814c2:	bf00      	nop
 80814c4:	e000ed00 	.word	0xe000ed00

080814c8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 80814c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80814cc:	469b      	mov	fp, r3
 80814ce:	4b1a      	ldr	r3, [pc, #104]	; (8081538 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 80814d0:	4680      	mov	r8, r0
 80814d2:	685b      	ldr	r3, [r3, #4]
 80814d4:	4689      	mov	r9, r1
 80814d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80814da:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
 80814dc:	b96b      	cbnz	r3, 80814fa <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 80814de:	f7ff fe65 	bl	80811ac <_ZN5spark10LogManager8instanceEv>
 80814e2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80814e4:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80814e8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80814ea:	9301      	str	r3, [sp, #4]
 80814ec:	f7ff f82c 	bl	8080548 <os_mutex_recursive_lock>
        if (that->isActive()) {
 80814f0:	7b23      	ldrb	r3, [r4, #12]
 80814f2:	b12b      	cbz	r3, 8081500 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 80814f4:	a801      	add	r0, sp, #4
 80814f6:	f7ff ff9e 	bl	8081436 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 80814fa:	b003      	add	sp, #12
 80814fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 8081500:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 8081502:	b2f6      	uxtb	r6, r6
 8081504:	7323      	strb	r3, [r4, #12]
 8081506:	e9d4 5300 	ldrd	r5, r3, [r4]
 808150a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 808150e:	4555      	cmp	r5, sl
 8081510:	d00e      	beq.n	8081530 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 8081512:	f855 7b04 	ldr.w	r7, [r5], #4
 8081516:	4659      	mov	r1, fp
 8081518:	1d38      	adds	r0, r7, #4
 808151a:	f7ff fdcb 	bl	80810b4 <_ZNK5spark6detail9LogFilter5levelEPKc>
 808151e:	4286      	cmp	r6, r0
 8081520:	d3f5      	bcc.n	808150e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 8081522:	683b      	ldr	r3, [r7, #0]
 8081524:	464a      	mov	r2, r9
 8081526:	4641      	mov	r1, r8
 8081528:	4638      	mov	r0, r7
 808152a:	68db      	ldr	r3, [r3, #12]
 808152c:	4798      	blx	r3
 808152e:	e7ee      	b.n	808150e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 8081530:	2300      	movs	r3, #0
 8081532:	7323      	strb	r3, [r4, #12]
 8081534:	e7de      	b.n	80814f4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 8081536:	bf00      	nop
 8081538:	e000ed00 	.word	0xe000ed00

0808153c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 808153c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8081540:	4b16      	ldr	r3, [pc, #88]	; (808159c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 8081542:	4605      	mov	r5, r0
 8081544:	685b      	ldr	r3, [r3, #4]
 8081546:	460f      	mov	r7, r1
 8081548:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (HAL_IsISR()) {
 808154c:	bb1b      	cbnz	r3, 8081596 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 808154e:	f7ff fe2d 	bl	80811ac <_ZN5spark10LogManager8instanceEv>
 8081552:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 8081554:	f100 0324 	add.w	r3, r0, #36	; 0x24
 8081558:	6a40      	ldr	r0, [r0, #36]	; 0x24
 808155a:	9301      	str	r3, [sp, #4]
 808155c:	f7fe fff4 	bl	8080548 <os_mutex_recursive_lock>
 8081560:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 8081564:	2446      	movs	r4, #70	; 0x46
 8081566:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 808156a:	45b0      	cmp	r8, r6
 808156c:	d109      	bne.n	8081582 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 808156e:	a801      	add	r0, sp, #4
 8081570:	f7ff ff61 	bl	8081436 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 8081574:	42a5      	cmp	r5, r4
 8081576:	bfb4      	ite	lt
 8081578:	2000      	movlt	r0, #0
 808157a:	2001      	movge	r0, #1
}
 808157c:	b002      	add	sp, #8
 808157e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 8081582:	f856 0b04 	ldr.w	r0, [r6], #4
 8081586:	4639      	mov	r1, r7
 8081588:	3004      	adds	r0, #4
 808158a:	f7ff fd93 	bl	80810b4 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 808158e:	4284      	cmp	r4, r0
 8081590:	bfa8      	it	ge
 8081592:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 8081594:	e7e9      	b.n	808156a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 8081596:	2000      	movs	r0, #0
 8081598:	e7f0      	b.n	808157c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 808159a:	bf00      	nop
 808159c:	e000ed00 	.word	0xe000ed00

080815a0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 80815a0:	460b      	mov	r3, r1
 80815a2:	b570      	push	{r4, r5, r6, lr}
 80815a4:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 80815a6:	c805      	ldmia	r0, {r0, r2}
 80815a8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 80815ac:	4282      	cmp	r2, r0
 80815ae:	d007      	beq.n	80815c0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x20>
 80815b0:	4601      	mov	r1, r0
            if (*p == value) {
 80815b2:	681d      	ldr	r5, [r3, #0]
 80815b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80815b8:	42ae      	cmp	r6, r5
 80815ba:	d003      	beq.n	80815c4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
 80815bc:	4608      	mov	r0, r1
 80815be:	e7f5      	b.n	80815ac <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
        return false;
 80815c0:	2000      	movs	r0, #0
}
 80815c2:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
 80815c4:	1a52      	subs	r2, r2, r1
 80815c6:	f001 f969 	bl	808289c <memmove>
    --size_;
 80815ca:	6863      	ldr	r3, [r4, #4]
    return true;
 80815cc:	2001      	movs	r0, #1
    --size_;
 80815ce:	3b01      	subs	r3, #1
 80815d0:	6063      	str	r3, [r4, #4]
    return true;
 80815d2:	e7f6      	b.n	80815c2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>

080815d4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 80815d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80815d6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80815d8:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80815dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 80815de:	9101      	str	r1, [sp, #4]
 80815e0:	9303      	str	r3, [sp, #12]
 80815e2:	f7fe ffb1 	bl	8080548 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 80815e6:	4620      	mov	r0, r4
 80815e8:	a901      	add	r1, sp, #4
 80815ea:	f7ff ffd9 	bl	80815a0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 80815ee:	b118      	cbz	r0, 80815f8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 80815f0:	6863      	ldr	r3, [r4, #4]
 80815f2:	b90b      	cbnz	r3, 80815f8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 80815f4:	f7ff fe06 	bl	8081204 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80815f8:	a803      	add	r0, sp, #12
 80815fa:	f7ff ff1c 	bl	8081436 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 80815fe:	b004      	add	sp, #16
 8081600:	bd10      	pop	{r4, pc}

08081602 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 8081602:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 8081604:	b570      	push	{r4, r5, r6, lr}
 8081606:	4604      	mov	r4, r0
 8081608:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 808160c:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 8081610:	42ae      	cmp	r6, r5
 8081612:	d015      	beq.n	8081640 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 8081614:	4620      	mov	r0, r4
 8081616:	f105 0110 	add.w	r1, r5, #16
 808161a:	f7ff ffc1 	bl	80815a0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 808161e:	6863      	ldr	r3, [r4, #4]
 8081620:	b90b      	cbnz	r3, 8081626 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 8081622:	f7ff fdef 	bl	8081204 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 8081626:	69e0      	ldr	r0, [r4, #28]
 8081628:	6929      	ldr	r1, [r5, #16]
 808162a:	6803      	ldr	r3, [r0, #0]
 808162c:	68db      	ldr	r3, [r3, #12]
 808162e:	4798      	blx	r3
        if (h.stream) {
 8081630:	6969      	ldr	r1, [r5, #20]
 8081632:	b119      	cbz	r1, 808163c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 8081634:	6a20      	ldr	r0, [r4, #32]
 8081636:	6803      	ldr	r3, [r0, #0]
 8081638:	68db      	ldr	r3, [r3, #12]
 808163a:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 808163c:	3518      	adds	r5, #24
 808163e:	e7e7      	b.n	8081610 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 8081640:	2618      	movs	r6, #24
 8081642:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 8081646:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 808164a:	42ae      	cmp	r6, r5
 808164c:	d004      	beq.n	8081658 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 808164e:	4628      	mov	r0, r5
 8081650:	f000 fd41 	bl	80820d6 <_ZN6StringD1Ev>
 8081654:	3518      	adds	r5, #24
 8081656:	e7f8      	b.n	808164a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 8081658:	2300      	movs	r3, #0
 808165a:	6163      	str	r3, [r4, #20]
}
 808165c:	bd70      	pop	{r4, r5, r6, pc}

0808165e <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 808165e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8081660:	4604      	mov	r4, r0
    resetSystemCallbacks();
 8081662:	f7ff fdcf 	bl	8081204 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 8081666:	f104 0324 	add.w	r3, r4, #36	; 0x24
 808166a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 808166c:	9301      	str	r3, [sp, #4]
 808166e:	f7fe ff6b 	bl	8080548 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
 8081672:	4620      	mov	r0, r4
 8081674:	f7ff ffc5 	bl	8081602 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 8081678:	a801      	add	r0, sp, #4
 808167a:	f7ff fedc 	bl	8081436 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 808167e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8081680:	b108      	cbz	r0, 8081686 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 8081682:	f7fe ff59 	bl	8080538 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 8081686:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 808168a:	2618      	movs	r6, #24
 808168c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 8081690:	42ae      	cmp	r6, r5
 8081692:	d004      	beq.n	808169e <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 8081694:	4628      	mov	r0, r5
 8081696:	f000 fd1e 	bl	80820d6 <_ZN6StringD1Ev>
 808169a:	3518      	adds	r5, #24
 808169c:	e7f8      	b.n	8081690 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 808169e:	6920      	ldr	r0, [r4, #16]
 80816a0:	f7ff f91e 	bl	80808e0 <free>
 80816a4:	6820      	ldr	r0, [r4, #0]
 80816a6:	f7ff f91b 	bl	80808e0 <free>
}
 80816aa:	4620      	mov	r0, r4
 80816ac:	b002      	add	sp, #8
 80816ae:	bd70      	pop	{r4, r5, r6, pc}

080816b0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 80816b0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80816b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80816b4:	4606      	mov	r6, r0
 80816b6:	460c      	mov	r4, r1
 80816b8:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 80816ba:	d927      	bls.n	808170c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
 80816bc:	4290      	cmp	r0, r2
 80816be:	d226      	bcs.n	808170e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
        capacity_(0) {
 80816c0:	2600      	movs	r6, #0
            --end;
 80816c2:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
 80816c6:	1a6c      	subs	r4, r5, r1
 80816c8:	f1a1 0714 	sub.w	r7, r1, #20
 80816cc:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 80816ce:	42af      	cmp	r7, r5
 80816d0:	d03d      	beq.n	808174e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
 80816d2:	b1a4      	cbz	r4, 80816fe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
 80816d4:	682b      	ldr	r3, [r5, #0]
 80816d6:	6023      	str	r3, [r4, #0]
 80816d8:	88ab      	ldrh	r3, [r5, #4]
 80816da:	80a3      	strh	r3, [r4, #4]
 80816dc:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
        capacity_(0) {
 80816e0:	e9c4 6602 	strd	r6, r6, [r4, #8]
 80816e4:	6126      	str	r6, [r4, #16]
 80816e6:	80e3      	strh	r3, [r4, #6]
 80816e8:	68ab      	ldr	r3, [r5, #8]
 80816ea:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80816ec:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80816ee:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 80816f0:	68ea      	ldr	r2, [r5, #12]
 80816f2:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80816f4:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80816f6:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 80816f8:	692a      	ldr	r2, [r5, #16]
 80816fa:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80816fc:	612b      	str	r3, [r5, #16]
 80816fe:	f105 0008 	add.w	r0, r5, #8
 8081702:	f7ff fe2f 	bl	8081364 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 8081706:	3d14      	subs	r5, #20
 8081708:	3c14      	subs	r4, #20
 808170a:	e7e0      	b.n	80816ce <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
 808170c:	d01f      	beq.n	808174e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
 808170e:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
 8081710:	42ac      	cmp	r4, r5
 8081712:	d01c      	beq.n	808174e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
 8081714:	b1a6      	cbz	r6, 8081740 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
 8081716:	6823      	ldr	r3, [r4, #0]
 8081718:	6033      	str	r3, [r6, #0]
 808171a:	88a3      	ldrh	r3, [r4, #4]
 808171c:	80b3      	strh	r3, [r6, #4]
 808171e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
        capacity_(0) {
 8081722:	e9c6 7702 	strd	r7, r7, [r6, #8]
 8081726:	6137      	str	r7, [r6, #16]
 8081728:	80f3      	strh	r3, [r6, #6]
      __a = _GLIBCXX_MOVE(__b);
 808172a:	68a3      	ldr	r3, [r4, #8]
 808172c:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808172e:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081730:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
 8081732:	68e2      	ldr	r2, [r4, #12]
 8081734:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8081736:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081738:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
 808173a:	6922      	ldr	r2, [r4, #16]
 808173c:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 808173e:	6123      	str	r3, [r4, #16]
 8081740:	f104 0008 	add.w	r0, r4, #8
 8081744:	f7ff fe0e 	bl	8081364 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 8081748:	3414      	adds	r4, #20
 808174a:	3614      	adds	r6, #20
 808174c:	e7e0      	b.n	8081710 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
 808174e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081750 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 8081750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8081752:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 8081756:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 8081758:	4604      	mov	r4, r0
 808175a:	460e      	mov	r6, r1
 808175c:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 808175e:	db0d      	blt.n	808177c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
 8081760:	3501      	adds	r5, #1
        if (n > 0) {
 8081762:	2d00      	cmp	r5, #0
 8081764:	6800      	ldr	r0, [r0, #0]
 8081766:	dd04      	ble.n	8081772 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
 8081768:	00a9      	lsls	r1, r5, #2
 808176a:	f7ff f8c1 	bl	80808f0 <realloc>
            if (!d) {
 808176e:	b918      	cbnz	r0, 8081778 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
 8081770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 8081772:	f7ff f8b5 	bl	80808e0 <free>
        T* d = nullptr;
 8081776:	2000      	movs	r0, #0
        data_ = d;
 8081778:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 808177a:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
 808177c:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
 808177e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 8081780:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
 8081784:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 8081786:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
 808178a:	1d08      	adds	r0, r1, #4
 808178c:	f001 f886 	bl	808289c <memmove>
    new(p) T(std::move(value));
 8081790:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
 8081794:	6863      	ldr	r3, [r4, #4]
    return true;
 8081796:	2001      	movs	r0, #1
    ++size_;
 8081798:	3301      	adds	r3, #1
 808179a:	6063      	str	r3, [r4, #4]
    return true;
 808179c:	e7e8      	b.n	8081770 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

0808179e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 808179e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80817a0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80817a2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 80817a6:	6a40      	ldr	r0, [r0, #36]	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
 80817a8:	460d      	mov	r5, r1
 80817aa:	9301      	str	r3, [sp, #4]
 80817ac:	f7fe fecc 	bl	8080548 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
 80817b0:	e9d4 3100 	ldrd	r3, r1, [r4]
 80817b4:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
 80817b8:	4283      	cmp	r3, r0
 80817ba:	461a      	mov	r2, r3
 80817bc:	d00a      	beq.n	80817d4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 80817be:	6812      	ldr	r2, [r2, #0]
 80817c0:	3304      	adds	r3, #4
 80817c2:	42aa      	cmp	r2, r5
 80817c4:	d1f8      	bne.n	80817b8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
 80817c6:	a801      	add	r0, sp, #4
 80817c8:	f7ff fe35 	bl	8081436 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
 80817cc:	2500      	movs	r5, #0
}
 80817ce:	4628      	mov	r0, r5
 80817d0:	b003      	add	sp, #12
 80817d2:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
 80817d4:	462a      	mov	r2, r5
 80817d6:	4620      	mov	r0, r4
 80817d8:	f7ff ffba 	bl	8081750 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 80817dc:	4605      	mov	r5, r0
 80817de:	2800      	cmp	r0, #0
 80817e0:	d0f1      	beq.n	80817c6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 80817e2:	6863      	ldr	r3, [r4, #4]
 80817e4:	2b01      	cmp	r3, #1
 80817e6:	d101      	bne.n	80817ec <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 80817e8:	f7ff fd00 	bl	80811ec <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80817ec:	a801      	add	r0, sp, #4
 80817ee:	f7ff fe22 	bl	8081436 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 80817f2:	e7ec      	b.n	80817ce <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

080817f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 80817f4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80817f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80817f8:	4604      	mov	r4, r0
 80817fa:	460d      	mov	r5, r1
 80817fc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80817fe:	d914      	bls.n	808182a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 8081800:	4290      	cmp	r0, r2
 8081802:	d213      	bcs.n	808182c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 8081804:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 8081808:	1a75      	subs	r5, r6, r1
 808180a:	f1a1 0710 	sub.w	r7, r1, #16
 808180e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 8081810:	42b7      	cmp	r7, r6
 8081812:	d018      	beq.n	8081846 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 8081814:	b11c      	cbz	r4, 808181e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 8081816:	4631      	mov	r1, r6
 8081818:	4620      	mov	r0, r4
 808181a:	f000 fcd6 	bl	80821ca <_ZN6StringC1EOS_>
                end->~T();
 808181e:	4630      	mov	r0, r6
 8081820:	f000 fc59 	bl	80820d6 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 8081824:	3e10      	subs	r6, #16
 8081826:	3c10      	subs	r4, #16
 8081828:	e7f2      	b.n	8081810 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 808182a:	d00c      	beq.n	8081846 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 808182c:	42b5      	cmp	r5, r6
 808182e:	d00a      	beq.n	8081846 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 8081830:	b11c      	cbz	r4, 808183a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 8081832:	4629      	mov	r1, r5
 8081834:	4620      	mov	r0, r4
 8081836:	f000 fcc8 	bl	80821ca <_ZN6StringC1EOS_>
                p->~T();
 808183a:	4628      	mov	r0, r5
 808183c:	f000 fc4b 	bl	80820d6 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 8081840:	3510      	adds	r5, #16
 8081842:	3410      	adds	r4, #16
 8081844:	e7f2      	b.n	808182c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 8081846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081848 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 8081848:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 808184a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 808184c:	4605      	mov	r5, r0
        if (n > 0) {
 808184e:	dd11      	ble.n	8081874 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 8081850:	0130      	lsls	r0, r6, #4
 8081852:	f7ff f83d 	bl	80808d0 <malloc>
            if (!d) {
 8081856:	4604      	mov	r4, r0
 8081858:	b158      	cbz	r0, 8081872 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 808185a:	e9d5 1200 	ldrd	r1, r2, [r5]
 808185e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8081862:	f7ff ffc7 	bl	80817f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 8081866:	6828      	ldr	r0, [r5, #0]
 8081868:	f7ff f83a 	bl	80808e0 <free>
        return true;
 808186c:	2001      	movs	r0, #1
        data_ = d;
 808186e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 8081870:	60ae      	str	r6, [r5, #8]
    }
 8081872:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 8081874:	2400      	movs	r4, #0
 8081876:	e7f6      	b.n	8081866 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

08081878 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 8081878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808187c:	4691      	mov	r9, r2
        capacity_(0) {
 808187e:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 8081880:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 8081882:	b097      	sub	sp, #92	; 0x5c
 8081884:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
 8081886:	f8d9 1004 	ldr.w	r1, [r9, #4]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 808188a:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 808188c:	4299      	cmp	r1, r3
        capacity_(0) {
 808188e:	e9c0 3300 	strd	r3, r3, [r0]
 8081892:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8081896:	e9c0 3304 	strd	r3, r3, [r0, #16]
 808189a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 808189e:	7602      	strb	r2, [r0, #24]
 80818a0:	930c      	str	r3, [sp, #48]	; 0x30
    if (n > capacity_ && !realloc(n)) {
 80818a2:	dc23      	bgt.n	80818ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 80818a4:	e9d9 5700 	ldrd	r5, r7, [r9]
 80818a8:	2314      	movs	r3, #20
 80818aa:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 80818ae:	42af      	cmp	r7, r5
 80818b0:	d03b      	beq.n	808192a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 80818b2:	4629      	mov	r1, r5
 80818b4:	a80d      	add	r0, sp, #52	; 0x34
 80818b6:	f000 fc88 	bl	80821ca <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 80818ba:	a90d      	add	r1, sp, #52	; 0x34
 80818bc:	a811      	add	r0, sp, #68	; 0x44
 80818be:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80818c0:	f000 fc83 	bl	80821ca <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80818c4:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 80818c8:	4299      	cmp	r1, r3
 80818ca:	da1b      	bge.n	8081904 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 80818cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
 80818ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
 80818d0:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 80818d4:	4631      	mov	r1, r6
 80818d6:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80818da:	f106 0010 	add.w	r0, r6, #16
 80818de:	f7ff ff89 	bl	80817f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 80818e2:	b9ee      	cbnz	r6, 8081920 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 80818e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80818e6:	3301      	adds	r3, #1
 80818e8:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
 80818ea:	e011      	b.n	8081910 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 80818ec:	a80a      	add	r0, sp, #40	; 0x28
 80818ee:	f7ff ffab 	bl	8081848 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80818f2:	2800      	cmp	r0, #0
 80818f4:	d1d6      	bne.n	80818a4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
 80818f6:	a80a      	add	r0, sp, #40	; 0x28
 80818f8:	f7ff fd48 	bl	808138c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80818fc:	4620      	mov	r0, r4
 80818fe:	b017      	add	sp, #92	; 0x5c
 8081900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8081904:	3101      	adds	r1, #1
 8081906:	a80a      	add	r0, sp, #40	; 0x28
 8081908:	f7ff ff9e 	bl	8081848 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 808190c:	2800      	cmp	r0, #0
 808190e:	d1dd      	bne.n	80818cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 8081910:	a811      	add	r0, sp, #68	; 0x44
 8081912:	f000 fbe0 	bl	80820d6 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 8081916:	a80d      	add	r0, sp, #52	; 0x34
 8081918:	f000 fbdd 	bl	80820d6 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 808191c:	3514      	adds	r5, #20
 808191e:	e7c6      	b.n	80818ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 8081920:	4630      	mov	r0, r6
 8081922:	a911      	add	r1, sp, #68	; 0x44
 8081924:	f000 fc51 	bl	80821ca <_ZN6StringC1EOS_>
 8081928:	e7dc      	b.n	80818e4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 808192a:	2600      	movs	r6, #0
 808192c:	f04f 0a14 	mov.w	sl, #20
        size_t size = 0; // Name length
 8081930:	4637      	mov	r7, r6
 8081932:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
 8081936:	960f      	str	r6, [sp, #60]	; 0x3c
    for (int i = 0; i < cats.size(); ++i) {
 8081938:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 808193c:	429e      	cmp	r6, r3
 808193e:	f280 8097 	bge.w	8081a70 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
 8081942:	0133      	lsls	r3, r6, #4
 8081944:	58d3      	ldr	r3, [r2, r3]
 8081946:	9308      	str	r3, [sp, #32]
        if (!category) {
 8081948:	b90b      	cbnz	r3, 808194e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
 808194a:	3601      	adds	r6, #1
 808194c:	e7f4      	b.n	8081938 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
 808194e:	fb0a f306 	mul.w	r3, sl, r6
 8081952:	9709      	str	r7, [sp, #36]	; 0x24
 8081954:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
 8081956:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
 8081958:	a909      	add	r1, sp, #36	; 0x24
 808195a:	a808      	add	r0, sp, #32
 808195c:	f7ff fae2 	bl	8080f24 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 8081960:	4683      	mov	fp, r0
 8081962:	2800      	cmp	r0, #0
 8081964:	d0f1      	beq.n	808194a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
 8081966:	4601      	mov	r1, r0
 8081968:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808196a:	4628      	mov	r0, r5
 808196c:	f10d 031f 	add.w	r3, sp, #31
            bool found = false;
 8081970:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 8081974:	f7ff fb60 	bl	8081038 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 8081978:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 808197c:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 808197e:	f1b8 0f00 	cmp.w	r8, #0
 8081982:	d166      	bne.n	8081a52 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
 8081984:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8081988:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
            level(-1) {
 808198c:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 8081990:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8081994:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8081998:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 808199c:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80819a0:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 80819a4:	4293      	cmp	r3, r2
 80819a6:	db1a      	blt.n	80819de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
 80819a8:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
 80819ac:	f1bb 0f00 	cmp.w	fp, #0
 80819b0:	dd4a      	ble.n	8081a48 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
 80819b2:	fb0a f00b 	mul.w	r0, sl, fp
 80819b6:	f7fe ff8b 	bl	80808d0 <malloc>
            if (!d) {
 80819ba:	9004      	str	r0, [sp, #16]
 80819bc:	2800      	cmp	r0, #0
 80819be:	d045      	beq.n	8081a4c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
 80819c0:	e9d5 1200 	ldrd	r1, r2, [r5]
 80819c4:	fb0a 1202 	mla	r2, sl, r2, r1
 80819c8:	f7ff fe72 	bl	80816b0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
 80819cc:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
 80819ce:	6828      	ldr	r0, [r5, #0]
 80819d0:	9304      	str	r3, [sp, #16]
 80819d2:	f7fe ff85 	bl	80808e0 <free>
        data_ = d;
 80819d6:	9b04      	ldr	r3, [sp, #16]
        capacity_ = n;
 80819d8:	f8c5 b008 	str.w	fp, [r5, #8]
        data_ = d;
 80819dc:	602b      	str	r3, [r5, #0]
    T* const p = data_ + i;
 80819de:	9b01      	ldr	r3, [sp, #4]
 80819e0:	f8d5 b000 	ldr.w	fp, [r5]
 80819e4:	fb0a f303 	mul.w	r3, sl, r3
    move(p + 1, p, data_ + size_);
 80819e8:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
 80819ea:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
 80819ee:	f101 0014 	add.w	r0, r1, #20
 80819f2:	fb0a b202 	mla	r2, sl, r2, fp
 80819f6:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
 80819f8:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
 80819fa:	f7ff fe59 	bl	80816b0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 80819fe:	9904      	ldr	r1, [sp, #16]
 8081a00:	b1a9      	cbz	r1, 8081a2e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
 8081a02:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8081a04:	9b05      	ldr	r3, [sp, #20]
 8081a06:	f84b 2003 	str.w	r2, [fp, r3]
 8081a0a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8081a0e:	808b      	strh	r3, [r1, #4]
 8081a10:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
        capacity_(0) {
 8081a14:	e9c1 7702 	strd	r7, r7, [r1, #8]
 8081a18:	610f      	str	r7, [r1, #16]
 8081a1a:	80cb      	strh	r3, [r1, #6]
      __a = _GLIBCXX_MOVE(__b);
 8081a1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8081a1e:	608b      	str	r3, [r1, #8]
 8081a20:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
 8081a22:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
 8081a24:	60cb      	str	r3, [r1, #12]
 8081a26:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
 8081a28:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
 8081a2a:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8081a2c:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
 8081a2e:	686b      	ldr	r3, [r5, #4]
 8081a30:	3301      	adds	r3, #1
 8081a32:	606b      	str	r3, [r5, #4]
 8081a34:	a813      	add	r0, sp, #76	; 0x4c
 8081a36:	f7ff fc95 	bl	8081364 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 8081a3a:	f1b8 0f00 	cmp.w	r8, #0
 8081a3e:	d008      	beq.n	8081a52 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
 8081a40:	a80d      	add	r0, sp, #52	; 0x34
 8081a42:	f7ff fc8f 	bl	8081364 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 8081a46:	e756      	b.n	80818f6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 8081a48:	4643      	mov	r3, r8
 8081a4a:	e7c0      	b.n	80819ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 8081a4c:	f04f 0801 	mov.w	r8, #1
 8081a50:	e7f0      	b.n	8081a34 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
 8081a52:	9b01      	ldr	r3, [sp, #4]
 8081a54:	682d      	ldr	r5, [r5, #0]
 8081a56:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
 8081a5a:	9b08      	ldr	r3, [sp, #32]
 8081a5c:	781b      	ldrb	r3, [r3, #0]
 8081a5e:	b92b      	cbnz	r3, 8081a6c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
 8081a60:	f8d9 3000 	ldr.w	r3, [r9]
 8081a64:	9a02      	ldr	r2, [sp, #8]
 8081a66:	4413      	add	r3, r2
 8081a68:	7c1b      	ldrb	r3, [r3, #16]
 8081a6a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 8081a6c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 8081a6e:	e773      	b.n	8081958 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081a70:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 8081a72:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081a74:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 8081a76:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081a78:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8081a7a:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
 8081a7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 8081a7e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081a80:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 8081a82:	60a2      	str	r2, [r4, #8]
 8081a84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 8081a86:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081a88:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 8081a8a:	60e2      	str	r2, [r4, #12]
 8081a8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
 8081a8e:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081a90:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 8081a92:	6122      	str	r2, [r4, #16]
 8081a94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
 8081a96:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
 8081a98:	9b03      	ldr	r3, [sp, #12]
 8081a9a:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
 8081a9c:	6162      	str	r2, [r4, #20]
 8081a9e:	7623      	strb	r3, [r4, #24]
 8081aa0:	e7ce      	b.n	8081a40 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

08081aa4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 8081aa4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
 8081aa6:	4605      	mov	r5, r0
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 8081aa8:	460e      	mov	r6, r1
 8081aaa:	4604      	mov	r4, r0
        filter_(level, filters) {
 8081aac:	4b08      	ldr	r3, [pc, #32]	; (8081ad0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
 8081aae:	4611      	mov	r1, r2
 8081ab0:	f845 3b04 	str.w	r3, [r5], #4
 8081ab4:	a801      	add	r0, sp, #4
 8081ab6:	f7fe fb8a 	bl	80801ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 8081aba:	4631      	mov	r1, r6
 8081abc:	aa01      	add	r2, sp, #4
 8081abe:	4628      	mov	r0, r5
 8081ac0:	f7ff feda 	bl	8081878 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8081ac4:	a801      	add	r0, sp, #4
 8081ac6:	f7fe fb29 	bl	808011c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 8081aca:	4620      	mov	r0, r4
 8081acc:	b004      	add	sp, #16
 8081ace:	bd70      	pop	{r4, r5, r6, pc}
 8081ad0:	08082b1c 	.word	0x08082b1c

08081ad4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 8081ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081ad6:	460f      	mov	r7, r1
 8081ad8:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 8081ada:	4638      	mov	r0, r7
 8081adc:	4925      	ldr	r1, [pc, #148]	; (8081b74 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
 8081ade:	4616      	mov	r6, r2
 8081ae0:	461d      	mov	r5, r3
 8081ae2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 8081ae4:	f000 ff37 	bl	8082956 <strcmp>
 8081ae8:	bb00      	cbnz	r0, 8081b2c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
 8081aea:	b1e4      	cbz	r4, 8081b26 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 8081aec:	4629      	mov	r1, r5
 8081aee:	4668      	mov	r0, sp
 8081af0:	f7ff fc92 	bl	8081418 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 8081af4:	2024      	movs	r0, #36	; 0x24
 8081af6:	4920      	ldr	r1, [pc, #128]	; (8081b78 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 8081af8:	f000 feaf 	bl	808285a <_ZnwjRKSt9nothrow_t>
 8081afc:	4605      	mov	r5, r0
 8081afe:	b170      	cbz	r0, 8081b1e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 8081b00:	4669      	mov	r1, sp
 8081b02:	a803      	add	r0, sp, #12
 8081b04:	f7fe fb63 	bl	80801ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 8081b08:	4631      	mov	r1, r6
 8081b0a:	aa03      	add	r2, sp, #12
 8081b0c:	4628      	mov	r0, r5
 8081b0e:	f7ff ffc9 	bl	8081aa4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8081b12:	a803      	add	r0, sp, #12
 8081b14:	f7fe fb02 	bl	808011c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
 8081b18:	4b18      	ldr	r3, [pc, #96]	; (8081b7c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
 8081b1a:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
 8081b1c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 8081b1e:	4668      	mov	r0, sp
 8081b20:	f7fe fafc 	bl	808011c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8081b24:	462c      	mov	r4, r5
}
 8081b26:	4620      	mov	r0, r4
 8081b28:	b007      	add	sp, #28
 8081b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 8081b2c:	4638      	mov	r0, r7
 8081b2e:	4914      	ldr	r1, [pc, #80]	; (8081b80 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
 8081b30:	f000 ff11 	bl	8082956 <strcmp>
 8081b34:	b9e0      	cbnz	r0, 8081b70 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
 8081b36:	2c00      	cmp	r4, #0
 8081b38:	d0f5      	beq.n	8081b26 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 8081b3a:	4629      	mov	r1, r5
 8081b3c:	4668      	mov	r0, sp
 8081b3e:	f7ff fc6b 	bl	8081418 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 8081b42:	2024      	movs	r0, #36	; 0x24
 8081b44:	490c      	ldr	r1, [pc, #48]	; (8081b78 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 8081b46:	f000 fe88 	bl	808285a <_ZnwjRKSt9nothrow_t>
 8081b4a:	4605      	mov	r5, r0
 8081b4c:	2800      	cmp	r0, #0
 8081b4e:	d0e6      	beq.n	8081b1e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 8081b50:	4669      	mov	r1, sp
 8081b52:	a803      	add	r0, sp, #12
 8081b54:	f7fe fb3b 	bl	80801ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 8081b58:	4631      	mov	r1, r6
 8081b5a:	aa03      	add	r2, sp, #12
 8081b5c:	4628      	mov	r0, r5
 8081b5e:	f7ff ffa1 	bl	8081aa4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8081b62:	a803      	add	r0, sp, #12
 8081b64:	f7fe fada 	bl	808011c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8081b68:	4b06      	ldr	r3, [pc, #24]	; (8081b84 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
 8081b6a:	622c      	str	r4, [r5, #32]
 8081b6c:	602b      	str	r3, [r5, #0]
}
 8081b6e:	e7d6      	b.n	8081b1e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
 8081b70:	2400      	movs	r4, #0
 8081b72:	e7d8      	b.n	8081b26 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
 8081b74:	08082bef 	.word	0x08082bef
 8081b78:	08082d7c 	.word	0x08082d7c
 8081b7c:	08082c84 	.word	0x08082c84
 8081b80:	08082bf3 	.word	0x08082bf3
 8081b84:	08082c6c 	.word	0x08082c6c

08081b88 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 8081b88:	4b01      	ldr	r3, [pc, #4]	; (8081b90 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8081b8a:	4a02      	ldr	r2, [pc, #8]	; (8081b94 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8081b8c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 8081b8e:	4770      	bx	lr
 8081b90:	20000218 	.word	0x20000218
 8081b94:	08082af4 	.word	0x08082af4

08081b98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8081b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8081b9c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 8081b9e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8081ba2:	4604      	mov	r4, r0
 8081ba4:	460e      	mov	r6, r1
 8081ba6:	4617      	mov	r7, r2
 8081ba8:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 8081baa:	f000 fc49 	bl	8082440 <_Z16_fetch_usbserialv>
 8081bae:	4581      	cmp	r9, r0
 8081bb0:	d04d      	beq.n	8081c4e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 8081bb2:	792b      	ldrb	r3, [r5, #4]
 8081bb4:	0719      	lsls	r1, r3, #28
 8081bb6:	d504      	bpl.n	8081bc2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 8081bb8:	4620      	mov	r0, r4
 8081bba:	696a      	ldr	r2, [r5, #20]
 8081bbc:	4954      	ldr	r1, [pc, #336]	; (8081d10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 8081bbe:	f7ff fa2b 	bl	8081018 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 8081bc2:	f1b8 0f00 	cmp.w	r8, #0
 8081bc6:	d00d      	beq.n	8081be4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 8081bc8:	215b      	movs	r1, #91	; 0x5b
 8081bca:	4620      	mov	r0, r4
 8081bcc:	f7ff fa18 	bl	8081000 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 8081bd0:	4641      	mov	r1, r8
 8081bd2:	4620      	mov	r0, r4
 8081bd4:	f7ff fa06 	bl	8080fe4 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 8081bd8:	6823      	ldr	r3, [r4, #0]
 8081bda:	2202      	movs	r2, #2
 8081bdc:	4620      	mov	r0, r4
 8081bde:	68db      	ldr	r3, [r3, #12]
 8081be0:	494c      	ldr	r1, [pc, #304]	; (8081d14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 8081be2:	4798      	blx	r3
    if (attr.has_file) {
 8081be4:	792b      	ldrb	r3, [r5, #4]
 8081be6:	07da      	lsls	r2, r3, #31
 8081be8:	d524      	bpl.n	8081c34 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 8081bea:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 8081bee:	212f      	movs	r1, #47	; 0x2f
 8081bf0:	4640      	mov	r0, r8
 8081bf2:	f000 fedc 	bl	80829ae <strrchr>
    if (s1) {
 8081bf6:	b108      	cbz	r0, 8081bfc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 8081bf8:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 8081bfc:	4641      	mov	r1, r8
 8081bfe:	4620      	mov	r0, r4
 8081c00:	f7ff f9f0 	bl	8080fe4 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 8081c04:	792b      	ldrb	r3, [r5, #4]
 8081c06:	079b      	lsls	r3, r3, #30
 8081c08:	d508      	bpl.n	8081c1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 8081c0a:	213a      	movs	r1, #58	; 0x3a
 8081c0c:	4620      	mov	r0, r4
 8081c0e:	f7ff f9f7 	bl	8081000 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 8081c12:	4620      	mov	r0, r4
 8081c14:	68ea      	ldr	r2, [r5, #12]
 8081c16:	4940      	ldr	r1, [pc, #256]	; (8081d18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 8081c18:	f7ff f9fe 	bl	8081018 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 8081c1c:	792a      	ldrb	r2, [r5, #4]
 8081c1e:	6823      	ldr	r3, [r4, #0]
 8081c20:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 8081c24:	4620      	mov	r0, r4
            write(", ", 2);
 8081c26:	f04f 0202 	mov.w	r2, #2
 8081c2a:	68db      	ldr	r3, [r3, #12]
 8081c2c:	bf14      	ite	ne
 8081c2e:	493b      	ldrne	r1, [pc, #236]	; (8081d1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 8081c30:	493b      	ldreq	r1, [pc, #236]	; (8081d20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 8081c32:	4798      	blx	r3
    if (attr.has_function) {
 8081c34:	792b      	ldrb	r3, [r5, #4]
 8081c36:	0758      	lsls	r0, r3, #29
 8081c38:	d51d      	bpl.n	8081c76 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 8081c3a:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 8081c3c:	460b      	mov	r3, r1
 8081c3e:	461a      	mov	r2, r3
    for (; *s; ++s) {
 8081c40:	f813 0b01 	ldrb.w	r0, [r3], #1
 8081c44:	b160      	cbz	r0, 8081c60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 8081c46:	2820      	cmp	r0, #32
 8081c48:	d108      	bne.n	8081c5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 8081c4a:	4619      	mov	r1, r3
 8081c4c:	e7f7      	b.n	8081c3e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 8081c4e:	4835      	ldr	r0, [pc, #212]	; (8081d24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 8081c50:	f000 f967 	bl	8081f22 <_ZN5spark12NetworkClass9listeningEv>
 8081c54:	2800      	cmp	r0, #0
 8081c56:	d0ac      	beq.n	8081bb2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 8081c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 8081c5c:	2828      	cmp	r0, #40	; 0x28
 8081c5e:	d1ee      	bne.n	8081c3e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 8081c60:	6823      	ldr	r3, [r4, #0]
 8081c62:	1a52      	subs	r2, r2, r1
 8081c64:	4620      	mov	r0, r4
 8081c66:	68db      	ldr	r3, [r3, #12]
 8081c68:	4798      	blx	r3
        write("(): ", 4);
 8081c6a:	6823      	ldr	r3, [r4, #0]
 8081c6c:	2204      	movs	r2, #4
 8081c6e:	4620      	mov	r0, r4
 8081c70:	68db      	ldr	r3, [r3, #12]
 8081c72:	492d      	ldr	r1, [pc, #180]	; (8081d28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 8081c74:	4798      	blx	r3
    return log_level_name(level, nullptr);
 8081c76:	2100      	movs	r1, #0
 8081c78:	4638      	mov	r0, r7
 8081c7a:	f7fe fd8d 	bl	8080798 <log_level_name>
 8081c7e:	4601      	mov	r1, r0
    write(s);
 8081c80:	4620      	mov	r0, r4
 8081c82:	f7ff f9af 	bl	8080fe4 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 8081c86:	6823      	ldr	r3, [r4, #0]
 8081c88:	2202      	movs	r2, #2
 8081c8a:	4620      	mov	r0, r4
 8081c8c:	68db      	ldr	r3, [r3, #12]
 8081c8e:	4924      	ldr	r1, [pc, #144]	; (8081d20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 8081c90:	4798      	blx	r3
    if (msg) {
 8081c92:	b11e      	cbz	r6, 8081c9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 8081c94:	4631      	mov	r1, r6
 8081c96:	4620      	mov	r0, r4
 8081c98:	f7ff f9a4 	bl	8080fe4 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 8081c9c:	792b      	ldrb	r3, [r5, #4]
 8081c9e:	f013 0f30 	tst.w	r3, #48	; 0x30
 8081ca2:	d02c      	beq.n	8081cfe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 8081ca4:	6823      	ldr	r3, [r4, #0]
 8081ca6:	4921      	ldr	r1, [pc, #132]	; (8081d2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 8081ca8:	68db      	ldr	r3, [r3, #12]
 8081caa:	2202      	movs	r2, #2
 8081cac:	4620      	mov	r0, r4
 8081cae:	4798      	blx	r3
        if (attr.has_code) {
 8081cb0:	792b      	ldrb	r3, [r5, #4]
 8081cb2:	06d9      	lsls	r1, r3, #27
 8081cb4:	d50a      	bpl.n	8081ccc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 8081cb6:	6823      	ldr	r3, [r4, #0]
 8081cb8:	2207      	movs	r2, #7
 8081cba:	4620      	mov	r0, r4
 8081cbc:	491c      	ldr	r1, [pc, #112]	; (8081d30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 8081cbe:	68db      	ldr	r3, [r3, #12]
 8081cc0:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 8081cc2:	4620      	mov	r0, r4
 8081cc4:	69aa      	ldr	r2, [r5, #24]
 8081cc6:	491b      	ldr	r1, [pc, #108]	; (8081d34 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 8081cc8:	f7ff f9a6 	bl	8081018 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 8081ccc:	792b      	ldrb	r3, [r5, #4]
 8081cce:	069a      	lsls	r2, r3, #26
 8081cd0:	d511      	bpl.n	8081cf6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 8081cd2:	06db      	lsls	r3, r3, #27
 8081cd4:	d505      	bpl.n	8081ce2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 8081cd6:	6823      	ldr	r3, [r4, #0]
 8081cd8:	2202      	movs	r2, #2
 8081cda:	4620      	mov	r0, r4
 8081cdc:	68db      	ldr	r3, [r3, #12]
 8081cde:	490f      	ldr	r1, [pc, #60]	; (8081d1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 8081ce0:	4798      	blx	r3
            write("details = ", 10);
 8081ce2:	6823      	ldr	r3, [r4, #0]
 8081ce4:	4620      	mov	r0, r4
 8081ce6:	4914      	ldr	r1, [pc, #80]	; (8081d38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 8081ce8:	220a      	movs	r2, #10
 8081cea:	68db      	ldr	r3, [r3, #12]
 8081cec:	4798      	blx	r3
            write(attr.details);
 8081cee:	4620      	mov	r0, r4
 8081cf0:	69e9      	ldr	r1, [r5, #28]
 8081cf2:	f7ff f977 	bl	8080fe4 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 8081cf6:	215d      	movs	r1, #93	; 0x5d
 8081cf8:	4620      	mov	r0, r4
 8081cfa:	f7ff f981 	bl	8081000 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 8081cfe:	6823      	ldr	r3, [r4, #0]
 8081d00:	4620      	mov	r0, r4
}
 8081d02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 8081d06:	2202      	movs	r2, #2
 8081d08:	68db      	ldr	r3, [r3, #12]
 8081d0a:	490c      	ldr	r1, [pc, #48]	; (8081d3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 8081d0c:	4718      	bx	r3
 8081d0e:	bf00      	nop
 8081d10:	08082c04 	.word	0x08082c04
 8081d14:	08082c0b 	.word	0x08082c0b
 8081d18:	08082bcc 	.word	0x08082bcc
 8081d1c:	08082c0e 	.word	0x08082c0e
 8081d20:	08082c13 	.word	0x08082c13
 8081d24:	20000244 	.word	0x20000244
 8081d28:	08082c11 	.word	0x08082c11
 8081d2c:	08082c16 	.word	0x08082c16
 8081d30:	08082c19 	.word	0x08082c19
 8081d34:	08082c21 	.word	0x08082c21
 8081d38:	08082c24 	.word	0x08082c24
 8081d3c:	08082c2f 	.word	0x08082c2f

08081d40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8081d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8081d44:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
 8081d46:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8081d4a:	4605      	mov	r5, r0
 8081d4c:	460f      	mov	r7, r1
 8081d4e:	4690      	mov	r8, r2
 8081d50:	461e      	mov	r6, r3
 8081d52:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 8081d54:	f000 fb74 	bl	8082440 <_Z16_fetch_usbserialv>
 8081d58:	4581      	cmp	r9, r0
 8081d5a:	d105      	bne.n	8081d68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 8081d5c:	4849      	ldr	r0, [pc, #292]	; (8081e84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 8081d5e:	f000 f8e0 	bl	8081f22 <_ZN5spark12NetworkClass9listeningEv>
 8081d62:	2800      	cmp	r0, #0
 8081d64:	f040 808a 	bne.w	8081e7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 8081d68:	f04f 0900 	mov.w	r9, #0
    JSONStreamWriter json(*this->stream());
 8081d6c:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 8081d6e:	4a46      	ldr	r2, [pc, #280]	; (8081e88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 8081d70:	a801      	add	r0, sp, #4
 8081d72:	9201      	str	r2, [sp, #4]
 8081d74:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 8081d76:	f88d 9008 	strb.w	r9, [sp, #8]
 8081d7a:	f7ff f81e 	bl	8080dba <_ZN5spark10JSONWriter11beginObjectEv>
 8081d7e:	4649      	mov	r1, r9
 8081d80:	4640      	mov	r0, r8
 8081d82:	f7fe fd09 	bl	8080798 <log_level_name>
 8081d86:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 8081d88:	4940      	ldr	r1, [pc, #256]	; (8081e8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 8081d8a:	2201      	movs	r2, #1
 8081d8c:	a801      	add	r0, sp, #4
 8081d8e:	f7ff f89d 	bl	8080ecc <_ZN5spark10JSONWriter4nameEPKcj>
 8081d92:	4641      	mov	r1, r8
 8081d94:	f7ff f919 	bl	8080fca <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 8081d98:	b13f      	cbz	r7, 8081daa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 8081d9a:	493d      	ldr	r1, [pc, #244]	; (8081e90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 8081d9c:	2201      	movs	r2, #1
 8081d9e:	a801      	add	r0, sp, #4
 8081da0:	f7ff f894 	bl	8080ecc <_ZN5spark10JSONWriter4nameEPKcj>
 8081da4:	4639      	mov	r1, r7
 8081da6:	f7ff f910 	bl	8080fca <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 8081daa:	b13e      	cbz	r6, 8081dbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 8081dac:	4939      	ldr	r1, [pc, #228]	; (8081e94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 8081dae:	2201      	movs	r2, #1
 8081db0:	a801      	add	r0, sp, #4
 8081db2:	f7ff f88b 	bl	8080ecc <_ZN5spark10JSONWriter4nameEPKcj>
 8081db6:	4631      	mov	r1, r6
 8081db8:	f7ff f907 	bl	8080fca <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 8081dbc:	7923      	ldrb	r3, [r4, #4]
 8081dbe:	07df      	lsls	r7, r3, #31
 8081dc0:	d50e      	bpl.n	8081de0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 8081dc2:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 8081dc4:	212f      	movs	r1, #47	; 0x2f
 8081dc6:	4630      	mov	r0, r6
 8081dc8:	f000 fdf1 	bl	80829ae <strrchr>
    if (s1) {
 8081dcc:	b100      	cbz	r0, 8081dd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 8081dce:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 8081dd0:	4931      	ldr	r1, [pc, #196]	; (8081e98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 8081dd2:	2201      	movs	r2, #1
 8081dd4:	a801      	add	r0, sp, #4
 8081dd6:	f7ff f879 	bl	8080ecc <_ZN5spark10JSONWriter4nameEPKcj>
 8081dda:	4631      	mov	r1, r6
 8081ddc:	f7ff f8f5 	bl	8080fca <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 8081de0:	7923      	ldrb	r3, [r4, #4]
 8081de2:	079e      	lsls	r6, r3, #30
 8081de4:	d507      	bpl.n	8081df6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 8081de6:	492d      	ldr	r1, [pc, #180]	; (8081e9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 8081de8:	2202      	movs	r2, #2
 8081dea:	a801      	add	r0, sp, #4
 8081dec:	f7ff f86e 	bl	8080ecc <_ZN5spark10JSONWriter4nameEPKcj>
 8081df0:	68e1      	ldr	r1, [r4, #12]
 8081df2:	f7fe ffef 	bl	8080dd4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 8081df6:	7923      	ldrb	r3, [r4, #4]
 8081df8:	0758      	lsls	r0, r3, #29
 8081dfa:	d514      	bpl.n	8081e26 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 8081dfc:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 8081dfe:	4633      	mov	r3, r6
 8081e00:	461f      	mov	r7, r3
    for (; *s; ++s) {
 8081e02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8081e06:	b12a      	cbz	r2, 8081e14 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 8081e08:	2a20      	cmp	r2, #32
 8081e0a:	d101      	bne.n	8081e10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 8081e0c:	461e      	mov	r6, r3
 8081e0e:	e7f7      	b.n	8081e00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 8081e10:	2a28      	cmp	r2, #40	; 0x28
 8081e12:	d1f5      	bne.n	8081e00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 8081e14:	2202      	movs	r2, #2
 8081e16:	4922      	ldr	r1, [pc, #136]	; (8081ea0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 8081e18:	a801      	add	r0, sp, #4
 8081e1a:	f7ff f857 	bl	8080ecc <_ZN5spark10JSONWriter4nameEPKcj>
 8081e1e:	4631      	mov	r1, r6
 8081e20:	1bba      	subs	r2, r7, r6
 8081e22:	f7ff f862 	bl	8080eea <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 8081e26:	7923      	ldrb	r3, [r4, #4]
 8081e28:	0719      	lsls	r1, r3, #28
 8081e2a:	d507      	bpl.n	8081e3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 8081e2c:	491d      	ldr	r1, [pc, #116]	; (8081ea4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 8081e2e:	2201      	movs	r2, #1
 8081e30:	a801      	add	r0, sp, #4
 8081e32:	f7ff f84b 	bl	8080ecc <_ZN5spark10JSONWriter4nameEPKcj>
 8081e36:	6961      	ldr	r1, [r4, #20]
 8081e38:	f7fe ffde 	bl	8080df8 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 8081e3c:	7923      	ldrb	r3, [r4, #4]
 8081e3e:	06da      	lsls	r2, r3, #27
 8081e40:	d508      	bpl.n	8081e54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 8081e42:	2204      	movs	r2, #4
 8081e44:	4918      	ldr	r1, [pc, #96]	; (8081ea8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 8081e46:	eb0d 0002 	add.w	r0, sp, r2
 8081e4a:	f7ff f83f 	bl	8080ecc <_ZN5spark10JSONWriter4nameEPKcj>
 8081e4e:	69a1      	ldr	r1, [r4, #24]
 8081e50:	f7fe ffc0 	bl	8080dd4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 8081e54:	7923      	ldrb	r3, [r4, #4]
 8081e56:	069b      	lsls	r3, r3, #26
 8081e58:	d507      	bpl.n	8081e6a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 8081e5a:	4914      	ldr	r1, [pc, #80]	; (8081eac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 8081e5c:	2206      	movs	r2, #6
 8081e5e:	a801      	add	r0, sp, #4
 8081e60:	f7ff f834 	bl	8080ecc <_ZN5spark10JSONWriter4nameEPKcj>
 8081e64:	69e1      	ldr	r1, [r4, #28]
 8081e66:	f7ff f8b0 	bl	8080fca <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 8081e6a:	a801      	add	r0, sp, #4
 8081e6c:	f7fe ff8f 	bl	8080d8e <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
 8081e70:	6a28      	ldr	r0, [r5, #32]
 8081e72:	2202      	movs	r2, #2
 8081e74:	6803      	ldr	r3, [r0, #0]
 8081e76:	490e      	ldr	r1, [pc, #56]	; (8081eb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 8081e78:	68db      	ldr	r3, [r3, #12]
 8081e7a:	4798      	blx	r3
}
 8081e7c:	b005      	add	sp, #20
 8081e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8081e82:	bf00      	nop
 8081e84:	20000244 	.word	0x20000244
 8081e88:	08082c54 	.word	0x08082c54
 8081e8c:	08082be2 	.word	0x08082be2
 8081e90:	08082c32 	.word	0x08082c32
 8081e94:	08082c34 	.word	0x08082c34
 8081e98:	08082c36 	.word	0x08082c36
 8081e9c:	08082c38 	.word	0x08082c38
 8081ea0:	08082c3b 	.word	0x08082c3b
 8081ea4:	08082c3e 	.word	0x08082c3e
 8081ea8:	08082c40 	.word	0x08082c40
 8081eac:	08082c45 	.word	0x08082c45
 8081eb0:	08082c2f 	.word	0x08082c2f

08081eb4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8081eb4:	2300      	movs	r3, #0
 8081eb6:	6840      	ldr	r0, [r0, #4]
 8081eb8:	461a      	mov	r2, r3
 8081eba:	f7fe bca9 	b.w	8080810 <network_connect>

08081ebe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8081ebe:	2200      	movs	r2, #0
 8081ec0:	2102      	movs	r1, #2
 8081ec2:	6840      	ldr	r0, [r0, #4]
 8081ec4:	f7fe bcb4 	b.w	8080830 <network_disconnect>

08081ec8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8081ec8:	2200      	movs	r2, #0
 8081eca:	6840      	ldr	r0, [r0, #4]
 8081ecc:	4611      	mov	r1, r2
 8081ece:	f7fe bca7 	b.w	8080820 <network_connecting>

08081ed2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8081ed2:	2200      	movs	r2, #0
 8081ed4:	6840      	ldr	r0, [r0, #4]
 8081ed6:	4611      	mov	r1, r2
 8081ed8:	f7fe bcb2 	b.w	8080840 <network_ready>

08081edc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8081edc:	2300      	movs	r3, #0
 8081ede:	6840      	ldr	r0, [r0, #4]
 8081ee0:	461a      	mov	r2, r3
 8081ee2:	4619      	mov	r1, r3
 8081ee4:	f7fe bcb4 	b.w	8080850 <network_on>

08081ee8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8081ee8:	2300      	movs	r3, #0
 8081eea:	6840      	ldr	r0, [r0, #4]
 8081eec:	461a      	mov	r2, r3
 8081eee:	4619      	mov	r1, r3
 8081ef0:	f7fe bcb6 	b.w	8080860 <network_off>

08081ef4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 8081ef4:	2100      	movs	r1, #0
 8081ef6:	6840      	ldr	r0, [r0, #4]
 8081ef8:	f7fe bcda 	b.w	80808b0 <network_is_on>

08081efc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 8081efc:	2100      	movs	r1, #0
 8081efe:	6840      	ldr	r0, [r0, #4]
 8081f00:	f7fe bcde 	b.w	80808c0 <network_is_off>

08081f04 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8081f04:	2200      	movs	r2, #0
 8081f06:	6840      	ldr	r0, [r0, #4]
 8081f08:	f081 0101 	eor.w	r1, r1, #1
 8081f0c:	f7fe bcb0 	b.w	8080870 <network_listen>

08081f10 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8081f10:	2200      	movs	r2, #0
 8081f12:	6840      	ldr	r0, [r0, #4]
 8081f14:	f7fe bcbc 	b.w	8080890 <network_set_listen_timeout>

08081f18 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8081f18:	2200      	movs	r2, #0
 8081f1a:	6840      	ldr	r0, [r0, #4]
 8081f1c:	4611      	mov	r1, r2
 8081f1e:	f7fe bcbf 	b.w	80808a0 <network_get_listen_timeout>

08081f22 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8081f22:	2200      	movs	r2, #0
 8081f24:	6840      	ldr	r0, [r0, #4]
 8081f26:	4611      	mov	r1, r2
 8081f28:	f7fe bcaa 	b.w	8080880 <network_listening>

08081f2c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8081f2c:	b570      	push	{r4, r5, r6, lr}
 8081f2e:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8081f30:	2600      	movs	r6, #0
 8081f32:	b086      	sub	sp, #24
 8081f34:	4604      	mov	r4, r0
    IPAddress addr;
 8081f36:	a804      	add	r0, sp, #16
 8081f38:	f7fe fdd0 	bl	8080adc <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081f3c:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 8081f3e:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081f40:	f000 fd1b 	bl	808297a <strlen>
 8081f44:	4b0a      	ldr	r3, [pc, #40]	; (8081f70 <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 8081f46:	9600      	str	r6, [sp, #0]
 8081f48:	b281      	uxth	r1, r0
 8081f4a:	685b      	ldr	r3, [r3, #4]
 8081f4c:	4628      	mov	r0, r5
 8081f4e:	aa03      	add	r2, sp, #12
 8081f50:	f7fe fada 	bl	8080508 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8081f54:	b130      	cbz	r0, 8081f64 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8081f56:	4631      	mov	r1, r6
 8081f58:	4620      	mov	r0, r4
 8081f5a:	f7fe fdcf 	bl	8080afc <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8081f5e:	4620      	mov	r0, r4
 8081f60:	b006      	add	sp, #24
 8081f62:	bd70      	pop	{r4, r5, r6, pc}
 8081f64:	4620      	mov	r0, r4
 8081f66:	a903      	add	r1, sp, #12
 8081f68:	f7fe fdc0 	bl	8080aec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 8081f6c:	e7f7      	b.n	8081f5e <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 8081f6e:	bf00      	nop
 8081f70:	200001dc 	.word	0x200001dc

08081f74 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8081f74:	4b02      	ldr	r3, [pc, #8]	; (8081f80 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8081f76:	4a03      	ldr	r2, [pc, #12]	; (8081f84 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8081f78:	601a      	str	r2, [r3, #0]
 8081f7a:	2200      	movs	r2, #0
 8081f7c:	605a      	str	r2, [r3, #4]

} // spark
 8081f7e:	4770      	bx	lr
 8081f80:	20000244 	.word	0x20000244
 8081f84:	08082ccc 	.word	0x08082ccc

08081f88 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8081f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081f8a:	4606      	mov	r6, r0
 8081f8c:	460d      	mov	r5, r1
  size_t n = 0;
 8081f8e:	2400      	movs	r4, #0
 8081f90:	188f      	adds	r7, r1, r2
  while (size--) {
 8081f92:	42bd      	cmp	r5, r7
 8081f94:	d00c      	beq.n	8081fb0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8081f96:	6833      	ldr	r3, [r6, #0]
 8081f98:	4630      	mov	r0, r6
 8081f9a:	689b      	ldr	r3, [r3, #8]
 8081f9c:	f815 1b01 	ldrb.w	r1, [r5], #1
 8081fa0:	4798      	blx	r3
     if (chunk>=0)
 8081fa2:	1e03      	subs	r3, r0, #0
 8081fa4:	db01      	blt.n	8081faa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8081fa6:	441c      	add	r4, r3
  while (size--) {
 8081fa8:	e7f3      	b.n	8081f92 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8081faa:	2c00      	cmp	r4, #0
 8081fac:	bf08      	it	eq
 8081fae:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 8081fb0:	4620      	mov	r0, r4
 8081fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081fb4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 8081fb4:	b570      	push	{r4, r5, r6, lr}
 8081fb6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8081fb8:	460c      	mov	r4, r1
    }
 8081fba:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 8081fbc:	b149      	cbz	r1, 8081fd2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8081fbe:	f000 fcdc 	bl	808297a <strlen>
 8081fc2:	682b      	ldr	r3, [r5, #0]
 8081fc4:	4602      	mov	r2, r0
 8081fc6:	4621      	mov	r1, r4
 8081fc8:	4628      	mov	r0, r5
    }
 8081fca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 8081fce:	68db      	ldr	r3, [r3, #12]
 8081fd0:	4718      	bx	r3
    }
 8081fd2:	bd70      	pop	{r4, r5, r6, pc}

08081fd4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8081fd4:	6803      	ldr	r3, [r0, #0]
 8081fd6:	689b      	ldr	r3, [r3, #8]
 8081fd8:	4718      	bx	r3

08081fda <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8081fda:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8081fdc:	210d      	movs	r1, #13
{
 8081fde:	4605      	mov	r5, r0
  size_t n = print('\r');
 8081fe0:	f7ff fff8 	bl	8081fd4 <_ZN5Print5printEc>
  n += print('\n');
 8081fe4:	210a      	movs	r1, #10
  size_t n = print('\r');
 8081fe6:	4604      	mov	r4, r0
  n += print('\n');
 8081fe8:	4628      	mov	r0, r5
 8081fea:	f7ff fff3 	bl	8081fd4 <_ZN5Print5printEc>
  return n;
}
 8081fee:	4420      	add	r0, r4
 8081ff0:	bd38      	pop	{r3, r4, r5, pc}

08081ff2 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8081ff2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8081ff4:	2a01      	cmp	r2, #1
 8081ff6:	bf98      	it	ls
 8081ff8:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 8081ffa:	b530      	push	{r4, r5, lr}
 8081ffc:	b08b      	sub	sp, #44	; 0x2c
 8081ffe:	460c      	mov	r4, r1
  *str = '\0';
 8082000:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 8082004:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 8082006:	4625      	mov	r5, r4
 8082008:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 808200c:	fb04 5312 	mls	r3, r4, r2, r5
 8082010:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8082012:	2b09      	cmp	r3, #9
 8082014:	bf94      	ite	ls
 8082016:	3330      	addls	r3, #48	; 0x30
 8082018:	3337      	addhi	r3, #55	; 0x37
 808201a:	b2db      	uxtb	r3, r3
  } while(n);
 808201c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808201e:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 8082022:	d9f0      	bls.n	8082006 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 8082024:	f7ff ffc6 	bl	8081fb4 <_ZN5Print5writeEPKc>
}
 8082028:	b00b      	add	sp, #44	; 0x2c
 808202a:	bd30      	pop	{r4, r5, pc}

0808202c <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 808202c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082030:	b086      	sub	sp, #24
 8082032:	af00      	add	r7, sp, #0
 8082034:	4605      	mov	r5, r0
 8082036:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 8082038:	1d38      	adds	r0, r7, #4
 808203a:	2114      	movs	r1, #20
{
 808203c:	4614      	mov	r4, r2
    va_copy(args2, args);
 808203e:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 8082040:	f7fe fc5e 	bl	8080900 <vsnprintf>

    if (n<bufsize)
 8082044:	2813      	cmp	r0, #19
 8082046:	d80e      	bhi.n	8082066 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 8082048:	4628      	mov	r0, r5
 808204a:	1d39      	adds	r1, r7, #4
 808204c:	f7ff ffb2 	bl	8081fb4 <_ZN5Print5writeEPKc>
 8082050:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 8082052:	b11e      	cbz	r6, 808205c <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 8082054:	4628      	mov	r0, r5
 8082056:	f7ff ffc0 	bl	8081fda <_ZN5Print7printlnEv>
 808205a:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 808205c:	4620      	mov	r0, r4
 808205e:	3718      	adds	r7, #24
 8082060:	46bd      	mov	sp, r7
 8082062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 8082066:	f100 0308 	add.w	r3, r0, #8
 808206a:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 808206e:	46e8      	mov	r8, sp
        char bigger[n+1];
 8082070:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 8082074:	4622      	mov	r2, r4
 8082076:	1c41      	adds	r1, r0, #1
 8082078:	683b      	ldr	r3, [r7, #0]
 808207a:	4668      	mov	r0, sp
 808207c:	f7fe fc40 	bl	8080900 <vsnprintf>
  return write(str);
 8082080:	4669      	mov	r1, sp
 8082082:	4628      	mov	r0, r5
 8082084:	f7ff ff96 	bl	8081fb4 <_ZN5Print5writeEPKc>
 8082088:	4604      	mov	r4, r0
 808208a:	46c5      	mov	sp, r8
 808208c:	e7e1      	b.n	8082052 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

0808208e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 808208e:	b510      	push	{r4, lr}
 8082090:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082092:	f7fe fcb3 	bl	80809fc <_ZNSt14_Function_baseD1Ev>
 8082096:	4620      	mov	r0, r4
 8082098:	bd10      	pop	{r4, pc}
	...

0808209c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 808209c:	2300      	movs	r3, #0
 808209e:	4803      	ldr	r0, [pc, #12]	; (80820ac <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80820a0:	4a03      	ldr	r2, [pc, #12]	; (80820b0 <_GLOBAL__sub_I_RGB+0x14>)
 80820a2:	4904      	ldr	r1, [pc, #16]	; (80820b4 <_GLOBAL__sub_I_RGB+0x18>)
 80820a4:	6083      	str	r3, [r0, #8]
 80820a6:	f000 bbd1 	b.w	808284c <__aeabi_atexit>
 80820aa:	bf00      	nop
 80820ac:	2000024c 	.word	0x2000024c
 80820b0:	20000078 	.word	0x20000078
 80820b4:	0808208f 	.word	0x0808208f

080820b8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80820b8:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 80820ba:	2600      	movs	r6, #0
 80820bc:	4604      	mov	r4, r0
 80820be:	460d      	mov	r5, r1
 80820c0:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 80820c4:	f7fe fa30 	bl	8080528 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80820c8:	4628      	mov	r0, r5
    _spi = spi;
 80820ca:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80820cc:	f7fe fab4 	bl	8080638 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80820d0:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80820d2:	6066      	str	r6, [r4, #4]
}
 80820d4:	bd70      	pop	{r4, r5, r6, pc}

080820d6 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80820d6:	b510      	push	{r4, lr}
 80820d8:	4604      	mov	r4, r0
{
	free(buffer);
 80820da:	6800      	ldr	r0, [r0, #0]
 80820dc:	f7fe fc00 	bl	80808e0 <free>
}
 80820e0:	4620      	mov	r0, r4
 80820e2:	bd10      	pop	{r4, pc}

080820e4 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80820e4:	b510      	push	{r4, lr}
 80820e6:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80820e8:	6800      	ldr	r0, [r0, #0]
 80820ea:	b108      	cbz	r0, 80820f0 <_ZN6String10invalidateEv+0xc>
 80820ec:	f7fe fbf8 	bl	80808e0 <free>
	buffer = NULL;
 80820f0:	2300      	movs	r3, #0
	capacity = len = 0;
 80820f2:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80820f6:	6023      	str	r3, [r4, #0]
}
 80820f8:	bd10      	pop	{r4, pc}

080820fa <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80820fa:	b538      	push	{r3, r4, r5, lr}
 80820fc:	4604      	mov	r4, r0
 80820fe:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8082100:	6800      	ldr	r0, [r0, #0]
 8082102:	3101      	adds	r1, #1
 8082104:	f7fe fbf4 	bl	80808f0 <realloc>
	if (newbuffer) {
 8082108:	b110      	cbz	r0, 8082110 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 808210a:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 808210e:	2001      	movs	r0, #1
	}
	return 0;
}
 8082110:	bd38      	pop	{r3, r4, r5, pc}

08082112 <_ZN6String7reserveEj>:
{
 8082112:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8082114:	6803      	ldr	r3, [r0, #0]
{
 8082116:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8082118:	b123      	cbz	r3, 8082124 <_ZN6String7reserveEj+0x12>
 808211a:	6843      	ldr	r3, [r0, #4]
 808211c:	428b      	cmp	r3, r1
 808211e:	d301      	bcc.n	8082124 <_ZN6String7reserveEj+0x12>
 8082120:	2001      	movs	r0, #1
}
 8082122:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 8082124:	4620      	mov	r0, r4
 8082126:	f7ff ffe8 	bl	80820fa <_ZN6String12changeBufferEj>
 808212a:	2800      	cmp	r0, #0
 808212c:	d0f9      	beq.n	8082122 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 808212e:	68a3      	ldr	r3, [r4, #8]
 8082130:	2b00      	cmp	r3, #0
 8082132:	d1f5      	bne.n	8082120 <_ZN6String7reserveEj+0xe>
 8082134:	6822      	ldr	r2, [r4, #0]
 8082136:	7013      	strb	r3, [r2, #0]
 8082138:	e7f2      	b.n	8082120 <_ZN6String7reserveEj+0xe>

0808213a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 808213a:	b570      	push	{r4, r5, r6, lr}
 808213c:	460e      	mov	r6, r1
	if (!reserve(length)) {
 808213e:	4611      	mov	r1, r2
{
 8082140:	4604      	mov	r4, r0
 8082142:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8082144:	f7ff ffe5 	bl	8082112 <_ZN6String7reserveEj>
 8082148:	b920      	cbnz	r0, 8082154 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 808214a:	4620      	mov	r0, r4
 808214c:	f7ff ffca 	bl	80820e4 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 8082150:	4620      	mov	r0, r4
 8082152:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 8082154:	462a      	mov	r2, r5
 8082156:	4631      	mov	r1, r6
 8082158:	6820      	ldr	r0, [r4, #0]
	len = length;
 808215a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 808215c:	f000 fb90 	bl	8082880 <memcpy>
	buffer[len] = 0;
 8082160:	2100      	movs	r1, #0
 8082162:	6822      	ldr	r2, [r4, #0]
 8082164:	68a3      	ldr	r3, [r4, #8]
 8082166:	54d1      	strb	r1, [r2, r3]
	return *this;
 8082168:	e7f2      	b.n	8082150 <_ZN6String4copyEPKcj+0x16>

0808216a <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 808216a:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 808216c:	2300      	movs	r3, #0
String::String(const char *cstr)
 808216e:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 8082170:	460d      	mov	r5, r1
	capacity = 0;
 8082172:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8082176:	6083      	str	r3, [r0, #8]
	flags = 0;
 8082178:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 808217a:	b139      	cbz	r1, 808218c <_ZN6StringC1EPKc+0x22>
 808217c:	4608      	mov	r0, r1
 808217e:	f000 fbfc 	bl	808297a <strlen>
 8082182:	4629      	mov	r1, r5
 8082184:	4602      	mov	r2, r0
 8082186:	4620      	mov	r0, r4
 8082188:	f7ff ffd7 	bl	808213a <_ZN6String4copyEPKcj>
}
 808218c:	4620      	mov	r0, r4
 808218e:	bd38      	pop	{r3, r4, r5, pc}

08082190 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8082190:	b538      	push	{r3, r4, r5, lr}
 8082192:	4605      	mov	r5, r0
	if (buffer) {
 8082194:	6800      	ldr	r0, [r0, #0]
{
 8082196:	460c      	mov	r4, r1
	if (buffer) {
 8082198:	b168      	cbz	r0, 80821b6 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 808219a:	686a      	ldr	r2, [r5, #4]
 808219c:	688b      	ldr	r3, [r1, #8]
 808219e:	429a      	cmp	r2, r3
 80821a0:	d307      	bcc.n	80821b2 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80821a2:	6809      	ldr	r1, [r1, #0]
 80821a4:	f000 fbe1 	bl	808296a <strcpy>
			len = rhs.len;
 80821a8:	68a3      	ldr	r3, [r4, #8]
 80821aa:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80821ac:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80821ae:	60a3      	str	r3, [r4, #8]
}
 80821b0:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80821b2:	f7fe fb95 	bl	80808e0 <free>
	buffer = rhs.buffer;
 80821b6:	6823      	ldr	r3, [r4, #0]
 80821b8:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80821ba:	6863      	ldr	r3, [r4, #4]
 80821bc:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80821be:	68a3      	ldr	r3, [r4, #8]
 80821c0:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80821c2:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80821c4:	e9c4 3300 	strd	r3, r3, [r4]
 80821c8:	e7f1      	b.n	80821ae <_ZN6String4moveERS_+0x1e>

080821ca <_ZN6StringC1EOS_>:
	buffer = NULL;
 80821ca:	2300      	movs	r3, #0
String::String(String &&rval)
 80821cc:	b510      	push	{r4, lr}
 80821ce:	4604      	mov	r4, r0
	capacity = 0;
 80821d0:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80821d4:	6083      	str	r3, [r0, #8]
	flags = 0;
 80821d6:	7303      	strb	r3, [r0, #12]
	move(rval);
 80821d8:	f7ff ffda 	bl	8082190 <_ZN6String4moveERS_>
}
 80821dc:	4620      	mov	r0, r4
 80821de:	bd10      	pop	{r4, pc}

080821e0 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80821e0:	4288      	cmp	r0, r1
{
 80821e2:	b510      	push	{r4, lr}
 80821e4:	460b      	mov	r3, r1
 80821e6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80821e8:	d004      	beq.n	80821f4 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80821ea:	6809      	ldr	r1, [r1, #0]
 80821ec:	b121      	cbz	r1, 80821f8 <_ZN6StringaSERKS_+0x18>
 80821ee:	689a      	ldr	r2, [r3, #8]
 80821f0:	f7ff ffa3 	bl	808213a <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80821f4:	4620      	mov	r0, r4
 80821f6:	bd10      	pop	{r4, pc}
	else invalidate();
 80821f8:	f7ff ff74 	bl	80820e4 <_ZN6String10invalidateEv>
 80821fc:	e7fa      	b.n	80821f4 <_ZN6StringaSERKS_+0x14>

080821fe <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80821fe:	2300      	movs	r3, #0
String::String(const String &value)
 8082200:	b510      	push	{r4, lr}
 8082202:	4604      	mov	r4, r0
	capacity = 0;
 8082204:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8082208:	6083      	str	r3, [r0, #8]
	flags = 0;
 808220a:	7303      	strb	r3, [r0, #12]
	*this = value;
 808220c:	f7ff ffe8 	bl	80821e0 <_ZN6StringaSERKS_>
}
 8082210:	4620      	mov	r0, r4
 8082212:	bd10      	pop	{r4, pc}

08082214 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8082214:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8082216:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8082218:	b510      	push	{r4, lr}
 808221a:	4b08      	ldr	r3, [pc, #32]	; (808223c <_GLOBAL__sub_I_System+0x28>)
 808221c:	4c08      	ldr	r4, [pc, #32]	; (8082240 <_GLOBAL__sub_I_System+0x2c>)
 808221e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 8082220:	4b08      	ldr	r3, [pc, #32]	; (8082244 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 8082222:	6020      	str	r0, [r4, #0]
 8082224:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 8082226:	71a0      	strb	r0, [r4, #6]
 8082228:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 808222a:	f7fe fac5 	bl	80807b8 <set_system_mode>
SystemClass System;
 808222e:	4620      	mov	r0, r4
 8082230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 8082234:	4a04      	ldr	r2, [pc, #16]	; (8082248 <_GLOBAL__sub_I_System+0x34>)
 8082236:	4905      	ldr	r1, [pc, #20]	; (808224c <_GLOBAL__sub_I_System+0x38>)
 8082238:	f000 bb08 	b.w	808284c <__aeabi_atexit>
 808223c:	20000268 	.word	0x20000268
 8082240:	2000025c 	.word	0x2000025c
 8082244:	ffff0000 	.word	0xffff0000
 8082248:	20000078 	.word	0x20000078
 808224c:	08080331 	.word	0x08080331

08082250 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8082250:	4b02      	ldr	r3, [pc, #8]	; (808225c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8082252:	681a      	ldr	r2, [r3, #0]
 8082254:	4b02      	ldr	r3, [pc, #8]	; (8082260 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8082256:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 8082258:	4770      	bx	lr
 808225a:	bf00      	nop
 808225c:	20000010 	.word	0x20000010
 8082260:	2000026c 	.word	0x2000026c

08082264 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082264:	7441      	strb	r1, [r0, #17]
}
 8082266:	4770      	bx	lr

08082268 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 8082268:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 808226a:	7c00      	ldrb	r0, [r0, #16]
 808226c:	f7fe fa34 	bl	80806d8 <hal_usart_available_data_for_write>
}
 8082270:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082274:	bd08      	pop	{r3, pc}

08082276 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8082276:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 8082278:	7c00      	ldrb	r0, [r0, #16]
 808227a:	f7fe fa05 	bl	8080688 <hal_usart_available>
}
 808227e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082282:	bd08      	pop	{r3, pc}

08082284 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8082284:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 8082286:	7c00      	ldrb	r0, [r0, #16]
 8082288:	f7fe fa0e 	bl	80806a8 <hal_usart_peek>
}
 808228c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8082290:	bd08      	pop	{r3, pc}

08082292 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 8082292:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 8082294:	7c00      	ldrb	r0, [r0, #16]
 8082296:	f7fe f9ff 	bl	8080698 <hal_usart_read>
}
 808229a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808229e:	bd08      	pop	{r3, pc}

080822a0 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80822a0:	7c00      	ldrb	r0, [r0, #16]
 80822a2:	f7fe ba09 	b.w	80806b8 <hal_usart_flush>

080822a6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80822a6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80822a8:	7c46      	ldrb	r6, [r0, #17]
{
 80822aa:	4604      	mov	r4, r0
 80822ac:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80822ae:	b12e      	cbz	r6, 80822bc <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80822b0:	4629      	mov	r1, r5
 80822b2:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80822b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80822b8:	f7fe b9de 	b.w	8080678 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80822bc:	7c00      	ldrb	r0, [r0, #16]
 80822be:	f7fe fa0b 	bl	80806d8 <hal_usart_available_data_for_write>
 80822c2:	2800      	cmp	r0, #0
 80822c4:	dcf4      	bgt.n	80822b0 <_ZN11USARTSerial5writeEh+0xa>
}
 80822c6:	4630      	mov	r0, r6
 80822c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080822cc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80822cc:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80822d0:	b510      	push	{r4, lr}
 80822d2:	4604      	mov	r4, r0
 80822d4:	4608      	mov	r0, r1
 80822d6:	4611      	mov	r1, r2
 80822d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80822dc:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80822e0:	4a04      	ldr	r2, [pc, #16]	; (80822f4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80822e2:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80822e4:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80822e6:	2201      	movs	r2, #1
 80822e8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80822ea:	461a      	mov	r2, r3
 80822ec:	f7fe f9b4 	bl	8080658 <hal_usart_init>
}
 80822f0:	4620      	mov	r0, r4
 80822f2:	bd10      	pop	{r4, pc}
 80822f4:	08082d24 	.word	0x08082d24

080822f8 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 80822f8:	2300      	movs	r3, #0
 80822fa:	7c00      	ldrb	r0, [r0, #16]
 80822fc:	f7fe b9f4 	b.w	80806e8 <hal_usart_begin_config>

08082300 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 8082300:	2200      	movs	r2, #0
 8082302:	f7ff bff9 	b.w	80822f8 <_ZN11USARTSerial5beginEmm>

08082306 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 8082306:	7c00      	ldrb	r0, [r0, #16]
 8082308:	f7fe b9ae 	b.w	8080668 <hal_usart_end>

0808230c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 808230c:	7c00      	ldrb	r0, [r0, #16]
 808230e:	f7fe b9db 	b.w	80806c8 <hal_usart_is_enabled>
	...

08082314 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8082314:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8082316:	4d0d      	ldr	r5, [pc, #52]	; (808234c <_Z22__fetch_global_Serial1v+0x38>)
 8082318:	7829      	ldrb	r1, [r5, #0]
 808231a:	f3bf 8f5b 	dmb	ish
 808231e:	f011 0401 	ands.w	r4, r1, #1
 8082322:	d111      	bne.n	8082348 <_Z22__fetch_global_Serial1v+0x34>
 8082324:	4628      	mov	r0, r5
 8082326:	f7fd fec7 	bl	80800b8 <__cxa_guard_acquire>
 808232a:	b168      	cbz	r0, 8082348 <_Z22__fetch_global_Serial1v+0x34>
 808232c:	4621      	mov	r1, r4
 808232e:	4a08      	ldr	r2, [pc, #32]	; (8082350 <_Z22__fetch_global_Serial1v+0x3c>)
 8082330:	4b08      	ldr	r3, [pc, #32]	; (8082354 <_Z22__fetch_global_Serial1v+0x40>)
 8082332:	4809      	ldr	r0, [pc, #36]	; (8082358 <_Z22__fetch_global_Serial1v+0x44>)
 8082334:	f7ff ffca 	bl	80822cc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 8082338:	4628      	mov	r0, r5
 808233a:	f7fd fec2 	bl	80800c2 <__cxa_guard_release>
 808233e:	4a07      	ldr	r2, [pc, #28]	; (808235c <_Z22__fetch_global_Serial1v+0x48>)
 8082340:	4907      	ldr	r1, [pc, #28]	; (8082360 <_Z22__fetch_global_Serial1v+0x4c>)
 8082342:	4805      	ldr	r0, [pc, #20]	; (8082358 <_Z22__fetch_global_Serial1v+0x44>)
 8082344:	f000 fa82 	bl	808284c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8082348:	4803      	ldr	r0, [pc, #12]	; (8082358 <_Z22__fetch_global_Serial1v+0x44>)
 808234a:	bd38      	pop	{r3, r4, r5, pc}
 808234c:	20000270 	.word	0x20000270
 8082350:	20000274 	.word	0x20000274
 8082354:	200002f8 	.word	0x200002f8
 8082358:	2000037c 	.word	0x2000037c
 808235c:	20000078 	.word	0x20000078
 8082360:	08080415 	.word	0x08080415

08082364 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082364:	7441      	strb	r1, [r0, #17]
}
 8082366:	4770      	bx	lr

08082368 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8082368:	4770      	bx	lr

0808236a <_ZN9USBSerial4readEv>:
{
 808236a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 808236c:	2100      	movs	r1, #0
 808236e:	7c00      	ldrb	r0, [r0, #16]
 8082370:	f7fe f9ea 	bl	8080748 <HAL_USB_USART_Receive_Data>
}
 8082374:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8082378:	bd08      	pop	{r3, pc}

0808237a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 808237a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 808237c:	2101      	movs	r1, #1
 808237e:	7c00      	ldrb	r0, [r0, #16]
 8082380:	f7fe f9e2 	bl	8080748 <HAL_USB_USART_Receive_Data>
}
 8082384:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8082388:	bd08      	pop	{r3, pc}

0808238a <_ZN9USBSerial17availableForWriteEv>:
{
 808238a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 808238c:	7c00      	ldrb	r0, [r0, #16]
 808238e:	f7fe f9d3 	bl	8080738 <HAL_USB_USART_Available_Data_For_Write>
}
 8082392:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082396:	bd08      	pop	{r3, pc}

08082398 <_ZN9USBSerial9availableEv>:
{
 8082398:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 808239a:	7c00      	ldrb	r0, [r0, #16]
 808239c:	f7fe f9c4 	bl	8080728 <HAL_USB_USART_Available_Data>
}
 80823a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80823a4:	bd08      	pop	{r3, pc}

080823a6 <_ZN9USBSerial5writeEh>:
{
 80823a6:	b538      	push	{r3, r4, r5, lr}
 80823a8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80823aa:	7c00      	ldrb	r0, [r0, #16]
{
 80823ac:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80823ae:	f7fe f9c3 	bl	8080738 <HAL_USB_USART_Available_Data_For_Write>
 80823b2:	2800      	cmp	r0, #0
 80823b4:	dc01      	bgt.n	80823ba <_ZN9USBSerial5writeEh+0x14>
 80823b6:	7c60      	ldrb	r0, [r4, #17]
 80823b8:	b128      	cbz	r0, 80823c6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80823ba:	4629      	mov	r1, r5
 80823bc:	7c20      	ldrb	r0, [r4, #16]
 80823be:	f7fe f9cb 	bl	8080758 <HAL_USB_USART_Send_Data>
 80823c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80823c6:	bd38      	pop	{r3, r4, r5, pc}

080823c8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80823c8:	7c00      	ldrb	r0, [r0, #16]
 80823ca:	f7fe b9cd 	b.w	8080768 <HAL_USB_USART_Flush_Data>

080823ce <_ZN9USBSerialD0Ev>:
 80823ce:	b510      	push	{r4, lr}
 80823d0:	4604      	mov	r4, r0
 80823d2:	2114      	movs	r1, #20
 80823d4:	f000 fa3f 	bl	8082856 <_ZdlPvj>
 80823d8:	4620      	mov	r0, r4
 80823da:	bd10      	pop	{r4, pc}

080823dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80823dc:	b510      	push	{r4, lr}
 80823de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80823e2:	4604      	mov	r4, r0
 80823e4:	4608      	mov	r0, r1
 80823e6:	2100      	movs	r1, #0
 80823e8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80823ec:	4b04      	ldr	r3, [pc, #16]	; (8082400 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80823ee:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80823f0:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80823f2:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80823f4:	4611      	mov	r1, r2
  _blocking = true;
 80823f6:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80823f8:	f7fe f97e 	bl	80806f8 <HAL_USB_USART_Init>
}
 80823fc:	4620      	mov	r0, r4
 80823fe:	bd10      	pop	{r4, pc}
 8082400:	08082d54 	.word	0x08082d54

08082404 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8082404:	2200      	movs	r2, #0
 8082406:	7c00      	ldrb	r0, [r0, #16]
 8082408:	f7fe b97e 	b.w	8080708 <HAL_USB_USART_Begin>

0808240c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 808240c:	7c00      	ldrb	r0, [r0, #16]
 808240e:	f7fe b983 	b.w	8080718 <HAL_USB_USART_End>
	...

08082414 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8082414:	b510      	push	{r4, lr}
 8082416:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8082418:	2214      	movs	r2, #20
 808241a:	2100      	movs	r1, #0
 808241c:	f000 fa58 	bl	80828d0 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8082420:	4b05      	ldr	r3, [pc, #20]	; (8082438 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8082422:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 8082424:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8082426:	4b05      	ldr	r3, [pc, #20]	; (808243c <_Z19acquireSerialBufferv+0x28>)
 8082428:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808242a:	f240 1301 	movw	r3, #257	; 0x101
 808242e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8082430:	2381      	movs	r3, #129	; 0x81
 8082432:	8223      	strh	r3, [r4, #16]
}
 8082434:	bd10      	pop	{r4, pc}
 8082436:	bf00      	nop
 8082438:	200003c0 	.word	0x200003c0
 808243c:	200004c1 	.word	0x200004c1

08082440 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8082440:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8082442:	4d0f      	ldr	r5, [pc, #60]	; (8082480 <_Z16_fetch_usbserialv+0x40>)
{
 8082444:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8082446:	a801      	add	r0, sp, #4
 8082448:	f7ff ffe4 	bl	8082414 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808244c:	7829      	ldrb	r1, [r5, #0]
 808244e:	f3bf 8f5b 	dmb	ish
 8082452:	f011 0401 	ands.w	r4, r1, #1
 8082456:	d110      	bne.n	808247a <_Z16_fetch_usbserialv+0x3a>
 8082458:	4628      	mov	r0, r5
 808245a:	f7fd fe2d 	bl	80800b8 <__cxa_guard_acquire>
 808245e:	b160      	cbz	r0, 808247a <_Z16_fetch_usbserialv+0x3a>
 8082460:	4621      	mov	r1, r4
 8082462:	aa01      	add	r2, sp, #4
 8082464:	4807      	ldr	r0, [pc, #28]	; (8082484 <_Z16_fetch_usbserialv+0x44>)
 8082466:	f7ff ffb9 	bl	80823dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808246a:	4628      	mov	r0, r5
 808246c:	f7fd fe29 	bl	80800c2 <__cxa_guard_release>
 8082470:	4a05      	ldr	r2, [pc, #20]	; (8082488 <_Z16_fetch_usbserialv+0x48>)
 8082472:	4906      	ldr	r1, [pc, #24]	; (808248c <_Z16_fetch_usbserialv+0x4c>)
 8082474:	4803      	ldr	r0, [pc, #12]	; (8082484 <_Z16_fetch_usbserialv+0x44>)
 8082476:	f000 f9e9 	bl	808284c <__aeabi_atexit>
	return _usbserial;
}
 808247a:	4802      	ldr	r0, [pc, #8]	; (8082484 <_Z16_fetch_usbserialv+0x44>)
 808247c:	b007      	add	sp, #28
 808247e:	bd30      	pop	{r4, r5, pc}
 8082480:	20000390 	.word	0x20000390
 8082484:	20000398 	.word	0x20000398
 8082488:	20000078 	.word	0x20000078
 808248c:	08082369 	.word	0x08082369

08082490 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8082490:	b510      	push	{r4, lr}
 8082492:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8082494:	2214      	movs	r2, #20
 8082496:	2100      	movs	r1, #0
 8082498:	f000 fa1a 	bl	80828d0 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 808249c:	4b05      	ldr	r3, [pc, #20]	; (80824b4 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808249e:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80824a0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80824a2:	4b05      	ldr	r3, [pc, #20]	; (80824b8 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80824a4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80824a6:	f240 1301 	movw	r3, #257	; 0x101
 80824aa:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80824ac:	2381      	movs	r3, #129	; 0x81
 80824ae:	8223      	strh	r3, [r4, #16]
}
 80824b0:	bd10      	pop	{r4, pc}
 80824b2:	bf00      	nop
 80824b4:	20000542 	.word	0x20000542
 80824b8:	20000643 	.word	0x20000643

080824bc <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80824bc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80824be:	4c0f      	ldr	r4, [pc, #60]	; (80824fc <_Z17_fetch_usbserial1v+0x40>)
{
 80824c0:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80824c2:	a801      	add	r0, sp, #4
 80824c4:	f7ff ffe4 	bl	8082490 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80824c8:	7823      	ldrb	r3, [r4, #0]
 80824ca:	f3bf 8f5b 	dmb	ish
 80824ce:	07db      	lsls	r3, r3, #31
 80824d0:	d410      	bmi.n	80824f4 <_Z17_fetch_usbserial1v+0x38>
 80824d2:	4620      	mov	r0, r4
 80824d4:	f7fd fdf0 	bl	80800b8 <__cxa_guard_acquire>
 80824d8:	b160      	cbz	r0, 80824f4 <_Z17_fetch_usbserial1v+0x38>
 80824da:	2101      	movs	r1, #1
 80824dc:	aa01      	add	r2, sp, #4
 80824de:	4808      	ldr	r0, [pc, #32]	; (8082500 <_Z17_fetch_usbserial1v+0x44>)
 80824e0:	f7ff ff7c 	bl	80823dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80824e4:	4620      	mov	r0, r4
 80824e6:	f7fd fdec 	bl	80800c2 <__cxa_guard_release>
 80824ea:	4a06      	ldr	r2, [pc, #24]	; (8082504 <_Z17_fetch_usbserial1v+0x48>)
 80824ec:	4906      	ldr	r1, [pc, #24]	; (8082508 <_Z17_fetch_usbserial1v+0x4c>)
 80824ee:	4804      	ldr	r0, [pc, #16]	; (8082500 <_Z17_fetch_usbserial1v+0x44>)
 80824f0:	f000 f9ac 	bl	808284c <__aeabi_atexit>
  return _usbserial1;
}
 80824f4:	4802      	ldr	r0, [pc, #8]	; (8082500 <_Z17_fetch_usbserial1v+0x44>)
 80824f6:	b006      	add	sp, #24
 80824f8:	bd10      	pop	{r4, pc}
 80824fa:	bf00      	nop
 80824fc:	20000394 	.word	0x20000394
 8082500:	200003ac 	.word	0x200003ac
 8082504:	20000078 	.word	0x20000078
 8082508:	08082369 	.word	0x08082369

0808250c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 808250c:	4b01      	ldr	r3, [pc, #4]	; (8082514 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 808250e:	6018      	str	r0, [r3, #0]
    }, nullptr);
 8082510:	4770      	bx	lr
 8082512:	bf00      	nop
 8082514:	20000014 	.word	0x20000014

08082518 <serialEventRun>:
{
 8082518:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 808251a:	4b17      	ldr	r3, [pc, #92]	; (8082578 <serialEventRun+0x60>)
 808251c:	b143      	cbz	r3, 8082530 <serialEventRun+0x18>
 808251e:	f7ff ff8f 	bl	8082440 <_Z16_fetch_usbserialv>
 8082522:	6803      	ldr	r3, [r0, #0]
 8082524:	691b      	ldr	r3, [r3, #16]
 8082526:	4798      	blx	r3
 8082528:	2800      	cmp	r0, #0
 808252a:	dd01      	ble.n	8082530 <serialEventRun+0x18>
        serialEvent();
 808252c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 8082530:	4b12      	ldr	r3, [pc, #72]	; (808257c <serialEventRun+0x64>)
 8082532:	b143      	cbz	r3, 8082546 <serialEventRun+0x2e>
 8082534:	f7ff feee 	bl	8082314 <_Z22__fetch_global_Serial1v>
 8082538:	6803      	ldr	r3, [r0, #0]
 808253a:	691b      	ldr	r3, [r3, #16]
 808253c:	4798      	blx	r3
 808253e:	2800      	cmp	r0, #0
 8082540:	dd01      	ble.n	8082546 <serialEventRun+0x2e>
        serialEvent1();
 8082542:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 8082546:	4b0e      	ldr	r3, [pc, #56]	; (8082580 <serialEventRun+0x68>)
 8082548:	b10b      	cbz	r3, 808254e <serialEventRun+0x36>
 808254a:	f7fd ff93 	bl	8080474 <_Z15serialEventRun2v>
    if (serialEventRun4) serialEventRun4();
 808254e:	4b0d      	ldr	r3, [pc, #52]	; (8082584 <serialEventRun+0x6c>)
 8082550:	b10b      	cbz	r3, 8082556 <serialEventRun+0x3e>
 8082552:	f3af 8000 	nop.w
    if (serialEventRun5) serialEventRun5();
 8082556:	4b0c      	ldr	r3, [pc, #48]	; (8082588 <serialEventRun+0x70>)
 8082558:	b10b      	cbz	r3, 808255e <serialEventRun+0x46>
 808255a:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 808255e:	4b0b      	ldr	r3, [pc, #44]	; (808258c <serialEventRun+0x74>)
 8082560:	b143      	cbz	r3, 8082574 <serialEventRun+0x5c>
 8082562:	f7ff ffab 	bl	80824bc <_Z17_fetch_usbserial1v>
 8082566:	6803      	ldr	r3, [r0, #0]
 8082568:	691b      	ldr	r3, [r3, #16]
 808256a:	4798      	blx	r3
 808256c:	2800      	cmp	r0, #0
 808256e:	dd01      	ble.n	8082574 <serialEventRun+0x5c>
        usbSerialEvent1();
 8082570:	f3af 8000 	nop.w
}
 8082574:	bd08      	pop	{r3, pc}
 8082576:	bf00      	nop
	...
 8082580:	08080475 	.word	0x08080475
	...

08082590 <_post_loop>:
{
 8082590:	b508      	push	{r3, lr}
	serialEventRun();
 8082592:	f7ff ffc1 	bl	8082518 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8082596:	f7fd fff7 	bl	8080588 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808259a:	4b01      	ldr	r3, [pc, #4]	; (80825a0 <_post_loop+0x10>)
 808259c:	6018      	str	r0, [r3, #0]
}
 808259e:	bd08      	pop	{r3, pc}
 80825a0:	200006dc 	.word	0x200006dc

080825a4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80825a4:	4802      	ldr	r0, [pc, #8]	; (80825b0 <_Z33system_initialize_user_backup_ramv+0xc>)
 80825a6:	4a03      	ldr	r2, [pc, #12]	; (80825b4 <_Z33system_initialize_user_backup_ramv+0x10>)
 80825a8:	4903      	ldr	r1, [pc, #12]	; (80825b8 <_Z33system_initialize_user_backup_ramv+0x14>)
 80825aa:	1a12      	subs	r2, r2, r0
 80825ac:	f000 b968 	b.w	8082880 <memcpy>
 80825b0:	40024000 	.word	0x40024000
 80825b4:	40024004 	.word	0x40024004
 80825b8:	08082eb0 	.word	0x08082eb0

080825bc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80825bc:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80825be:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80825c0:	461a      	mov	r2, r3
 80825c2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80825c6:	9300      	str	r3, [sp, #0]
 80825c8:	f7fe f910 	bl	80807ec <system_ctrl_set_result>
}
 80825cc:	b003      	add	sp, #12
 80825ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080825d4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80825d4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80825d6:	8843      	ldrh	r3, [r0, #2]
 80825d8:	2b0a      	cmp	r3, #10
 80825da:	d008      	beq.n	80825ee <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80825dc:	2b50      	cmp	r3, #80	; 0x50
 80825de:	d10b      	bne.n	80825f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80825e0:	4b09      	ldr	r3, [pc, #36]	; (8082608 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80825e2:	681b      	ldr	r3, [r3, #0]
 80825e4:	b14b      	cbz	r3, 80825fa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80825e6:	b003      	add	sp, #12
 80825e8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80825ec:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80825ee:	f7ff ffe5 	bl	80825bc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80825f2:	b003      	add	sp, #12
 80825f4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80825f8:	2300      	movs	r3, #0
 80825fa:	461a      	mov	r2, r3
 80825fc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8082600:	9300      	str	r3, [sp, #0]
 8082602:	f7fe f8f3 	bl	80807ec <system_ctrl_set_result>
}
 8082606:	e7f4      	b.n	80825f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 8082608:	200006c8 	.word	0x200006c8

0808260c <module_user_init_hook>:
{
 808260c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 808260e:	4c12      	ldr	r4, [pc, #72]	; (8082658 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8082610:	2100      	movs	r1, #0
 8082612:	4812      	ldr	r0, [pc, #72]	; (808265c <module_user_init_hook+0x50>)
 8082614:	f7fe f97c 	bl	8080910 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8082618:	4d11      	ldr	r5, [pc, #68]	; (8082660 <module_user_init_hook+0x54>)
 808261a:	6823      	ldr	r3, [r4, #0]
 808261c:	42ab      	cmp	r3, r5
 808261e:	bf0c      	ite	eq
 8082620:	2201      	moveq	r2, #1
 8082622:	2200      	movne	r2, #0
 8082624:	4b0f      	ldr	r3, [pc, #60]	; (8082664 <module_user_init_hook+0x58>)
 8082626:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8082628:	d002      	beq.n	8082630 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 808262a:	f7ff ffbb 	bl	80825a4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 808262e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8082630:	f7fd ff9a 	bl	8080568 <HAL_RNG_GetRandomNumber>
 8082634:	4604      	mov	r4, r0
    srand(seed);
 8082636:	f000 f953 	bl	80828e0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 808263a:	4b0b      	ldr	r3, [pc, #44]	; (8082668 <module_user_init_hook+0x5c>)
 808263c:	b113      	cbz	r3, 8082644 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 808263e:	4620      	mov	r0, r4
 8082640:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8082644:	2100      	movs	r1, #0
 8082646:	4808      	ldr	r0, [pc, #32]	; (8082668 <module_user_init_hook+0x5c>)
 8082648:	f7fe f8da 	bl	8080800 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 808264c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8082650:	2100      	movs	r1, #0
 8082652:	4806      	ldr	r0, [pc, #24]	; (808266c <module_user_init_hook+0x60>)
 8082654:	f7fe b8c0 	b.w	80807d8 <system_ctrl_set_app_request_handler>
 8082658:	40024000 	.word	0x40024000
 808265c:	0808250d 	.word	0x0808250d
 8082660:	9a271c1e 	.word	0x9a271c1e
 8082664:	200006c4 	.word	0x200006c4
 8082668:	00000000 	.word	0x00000000
 808266c:	080825d5 	.word	0x080825d5

08082670 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
 8082670:	b508      	push	{r3, lr}
 8082672:	4b02      	ldr	r3, [pc, #8]	; (808267c <spark_protocol_instance+0xc>)
 8082674:	681b      	ldr	r3, [r3, #0]
 8082676:	681b      	ldr	r3, [r3, #0]
 8082678:	9301      	str	r3, [sp, #4]
 808267a:	bd08      	pop	{r3, pc}
 808267c:	0802019c 	.word	0x0802019c

08082680 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
 8082680:	b508      	push	{r3, lr}
 8082682:	4b02      	ldr	r3, [pc, #8]	; (808268c <spark_protocol_set_product_id+0xc>)
 8082684:	681b      	ldr	r3, [r3, #0]
 8082686:	685b      	ldr	r3, [r3, #4]
 8082688:	9301      	str	r3, [sp, #4]
 808268a:	bd08      	pop	{r3, pc}
 808268c:	0802019c 	.word	0x0802019c

08082690 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
 8082690:	b508      	push	{r3, lr}
 8082692:	4b02      	ldr	r3, [pc, #8]	; (808269c <spark_protocol_set_product_firmware_version+0xc>)
 8082694:	681b      	ldr	r3, [r3, #0]
 8082696:	689b      	ldr	r3, [r3, #8]
 8082698:	9301      	str	r3, [sp, #4]
 808269a:	bd08      	pop	{r3, pc}
 808269c:	0802019c 	.word	0x0802019c

080826a0 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80826a0:	b510      	push	{r4, lr}
 80826a2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80826a4:	6880      	ldr	r0, [r0, #8]
 80826a6:	b108      	cbz	r0, 80826ac <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80826a8:	f7fd ff46 	bl	8080538 <os_mutex_recursive_destroy>
 80826ac:	4620      	mov	r0, r4
 80826ae:	bd10      	pop	{r4, pc}

080826b0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80826b0:	282e      	cmp	r0, #46	; 0x2e
bool pinAvailable(uint16_t pin) {
 80826b2:	b570      	push	{r4, r5, r6, lr}
 80826b4:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80826b6:	d901      	bls.n	80826bc <pinAvailable+0xc>
    return false;
 80826b8:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80826ba:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80826bc:	f1a0 030d 	sub.w	r3, r0, #13
 80826c0:	2b02      	cmp	r3, #2
 80826c2:	d90b      	bls.n	80826dc <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80826c4:	2801      	cmp	r0, #1
 80826c6:	d826      	bhi.n	8082716 <pinAvailable+0x66>
 80826c8:	f000 f880 	bl	80827cc <_Z19__fetch_global_Wirev>
 80826cc:	2100      	movs	r1, #0
 80826ce:	7c00      	ldrb	r0, [r0, #16]
 80826d0:	f7fd ffa2 	bl	8080618 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80826d4:	f080 0001 	eor.w	r0, r0, #1
 80826d8:	b2c0      	uxtb	r0, r0
 80826da:	e7ee      	b.n	80826ba <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80826dc:	4e13      	ldr	r6, [pc, #76]	; (808272c <pinAvailable+0x7c>)
 80826de:	7831      	ldrb	r1, [r6, #0]
 80826e0:	f3bf 8f5b 	dmb	ish
 80826e4:	f011 0501 	ands.w	r5, r1, #1
 80826e8:	d10f      	bne.n	808270a <pinAvailable+0x5a>
 80826ea:	4630      	mov	r0, r6
 80826ec:	f7fd fce4 	bl	80800b8 <__cxa_guard_acquire>
 80826f0:	b158      	cbz	r0, 808270a <pinAvailable+0x5a>
 80826f2:	4629      	mov	r1, r5
 80826f4:	480e      	ldr	r0, [pc, #56]	; (8082730 <pinAvailable+0x80>)
 80826f6:	f7ff fcdf 	bl	80820b8 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80826fa:	4630      	mov	r0, r6
 80826fc:	f7fd fce1 	bl	80800c2 <__cxa_guard_release>
 8082700:	4a0c      	ldr	r2, [pc, #48]	; (8082734 <pinAvailable+0x84>)
 8082702:	490d      	ldr	r1, [pc, #52]	; (8082738 <pinAvailable+0x88>)
 8082704:	480a      	ldr	r0, [pc, #40]	; (8082730 <pinAvailable+0x80>)
 8082706:	f000 f8a1 	bl	808284c <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 808270a:	4b09      	ldr	r3, [pc, #36]	; (8082730 <pinAvailable+0x80>)
 808270c:	7818      	ldrb	r0, [r3, #0]
 808270e:	f7fd ff9b 	bl	8080648 <hal_spi_is_enabled>
 8082712:	2800      	cmp	r0, #0
 8082714:	d1d0      	bne.n	80826b8 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 8082716:	3c12      	subs	r4, #18
 8082718:	2c01      	cmp	r4, #1
 808271a:	d805      	bhi.n	8082728 <pinAvailable+0x78>
 808271c:	f7ff fdfa 	bl	8082314 <_Z22__fetch_global_Serial1v>
 8082720:	7c00      	ldrb	r0, [r0, #16]
 8082722:	f7fd ffd1 	bl	80806c8 <hal_usart_is_enabled>
 8082726:	e7d5      	b.n	80826d4 <pinAvailable+0x24>
  return true; // 'pin' is available
 8082728:	2001      	movs	r0, #1
 808272a:	e7c6      	b.n	80826ba <pinAvailable+0xa>
 808272c:	200006cc 	.word	0x200006cc
 8082730:	200006d0 	.word	0x200006d0
 8082734:	20000078 	.word	0x20000078
 8082738:	080826a1 	.word	0x080826a1

0808273c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808273c:	282e      	cmp	r0, #46	; 0x2e
{
 808273e:	b538      	push	{r3, r4, r5, lr}
 8082740:	4604      	mov	r4, r0
 8082742:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8082744:	d80a      	bhi.n	808275c <pinMode+0x20>
 8082746:	29ff      	cmp	r1, #255	; 0xff
 8082748:	d008      	beq.n	808275c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 808274a:	f7ff ffb1 	bl	80826b0 <pinAvailable>
 808274e:	b128      	cbz	r0, 808275c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 8082750:	4629      	mov	r1, r5
 8082752:	4620      	mov	r0, r4
}
 8082754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 8082758:	f7fd bf1e 	b.w	8080598 <HAL_Pin_Mode>
}
 808275c:	bd38      	pop	{r3, r4, r5, pc}

0808275e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 808275e:	b538      	push	{r3, r4, r5, lr}
 8082760:	4604      	mov	r4, r0
 8082762:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8082764:	f7fd ff20 	bl	80805a8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8082768:	28ff      	cmp	r0, #255	; 0xff
 808276a:	d010      	beq.n	808278e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 808276c:	2806      	cmp	r0, #6
 808276e:	d804      	bhi.n	808277a <digitalWrite+0x1c>
 8082770:	234d      	movs	r3, #77	; 0x4d
 8082772:	fa23 f000 	lsr.w	r0, r3, r0
 8082776:	07c3      	lsls	r3, r0, #31
 8082778:	d409      	bmi.n	808278e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 808277a:	4620      	mov	r0, r4
 808277c:	f7ff ff98 	bl	80826b0 <pinAvailable>
 8082780:	b128      	cbz	r0, 808278e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8082782:	4629      	mov	r1, r5
 8082784:	4620      	mov	r0, r4
}
 8082786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 808278a:	f7fd bf15 	b.w	80805b8 <HAL_GPIO_Write>
}
 808278e:	bd38      	pop	{r3, r4, r5, pc}

08082790 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 8082790:	2300      	movs	r3, #0
hal_i2c_config_t defaultWireConfig() {
 8082792:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 8082794:	2520      	movs	r5, #32
 8082796:	8043      	strh	r3, [r0, #2]
 8082798:	2314      	movs	r3, #20
		.size = sizeof(hal_i2c_config_t),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808279a:	4e08      	ldr	r6, [pc, #32]	; (80827bc <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x2c>)
hal_i2c_config_t defaultWireConfig() {
 808279c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 808279e:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80827a0:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80827a2:	6085      	str	r5, [r0, #8]
 80827a4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80827a6:	4628      	mov	r0, r5
 80827a8:	f000 f859 	bl	808285e <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80827ac:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80827ae:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80827b0:	4628      	mov	r0, r5
 80827b2:	f000 f854 	bl	808285e <_ZnajRKSt9nothrow_t>
	};
 80827b6:	60e0      	str	r0, [r4, #12]

	return config;
}
 80827b8:	4620      	mov	r0, r4
 80827ba:	bd70      	pop	{r4, r5, r6, pc}
 80827bc:	08082d7c 	.word	0x08082d7c

080827c0 <_Z17acquireWireBufferv>:

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80827c0:	b510      	push	{r4, lr}
 80827c2:	4604      	mov	r4, r0
	return defaultWireConfig();
 80827c4:	f7ff ffe4 	bl	8082790 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 80827c8:	4620      	mov	r0, r4
 80827ca:	bd10      	pop	{r4, pc}

080827cc <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80827cc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80827ce:	4d0f      	ldr	r5, [pc, #60]	; (808280c <_Z19__fetch_global_Wirev+0x40>)
{
 80827d0:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80827d2:	7829      	ldrb	r1, [r5, #0]
 80827d4:	f3bf 8f5b 	dmb	ish
 80827d8:	f011 0401 	ands.w	r4, r1, #1
 80827dc:	d113      	bne.n	8082806 <_Z19__fetch_global_Wirev+0x3a>
 80827de:	4628      	mov	r0, r5
 80827e0:	f7fd fc6a 	bl	80800b8 <__cxa_guard_acquire>
 80827e4:	b178      	cbz	r0, 8082806 <_Z19__fetch_global_Wirev+0x3a>
 80827e6:	a801      	add	r0, sp, #4
 80827e8:	f7ff ffea 	bl	80827c0 <_Z17acquireWireBufferv>
 80827ec:	4621      	mov	r1, r4
 80827ee:	aa01      	add	r2, sp, #4
 80827f0:	4807      	ldr	r0, [pc, #28]	; (8082810 <_Z19__fetch_global_Wirev+0x44>)
 80827f2:	f7fe f93f 	bl	8080a74 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80827f6:	4628      	mov	r0, r5
 80827f8:	f7fd fc63 	bl	80800c2 <__cxa_guard_release>
 80827fc:	4a05      	ldr	r2, [pc, #20]	; (8082814 <_Z19__fetch_global_Wirev+0x48>)
 80827fe:	4906      	ldr	r1, [pc, #24]	; (8082818 <_Z19__fetch_global_Wirev+0x4c>)
 8082800:	4803      	ldr	r0, [pc, #12]	; (8082810 <_Z19__fetch_global_Wirev+0x44>)
 8082802:	f000 f823 	bl	808284c <__aeabi_atexit>
	return wire;
}
 8082806:	4802      	ldr	r0, [pc, #8]	; (8082810 <_Z19__fetch_global_Wirev+0x44>)
 8082808:	b007      	add	sp, #28
 808280a:	bd30      	pop	{r4, r5, pc}
 808280c:	200006e0 	.word	0x200006e0
 8082810:	200006e4 	.word	0x200006e4
 8082814:	20000078 	.word	0x20000078
 8082818:	08080a1d 	.word	0x08080a1d

0808281c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 808281c:	2300      	movs	r3, #0
 808281e:	b513      	push	{r0, r1, r4, lr}
 8082820:	4c07      	ldr	r4, [pc, #28]	; (8082840 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8082822:	461a      	mov	r2, r3
 8082824:	4619      	mov	r1, r3
 8082826:	4620      	mov	r0, r4
 8082828:	9300      	str	r3, [sp, #0]
 808282a:	f7fe f979 	bl	8080b20 <_ZN9IPAddressC1Ehhhh>
 808282e:	4620      	mov	r0, r4
 8082830:	4a04      	ldr	r2, [pc, #16]	; (8082844 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8082832:	4905      	ldr	r1, [pc, #20]	; (8082848 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8082834:	b002      	add	sp, #8
 8082836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808283a:	f000 b807 	b.w	808284c <__aeabi_atexit>
 808283e:	bf00      	nop
 8082840:	200006f8 	.word	0x200006f8
 8082844:	20000078 	.word	0x20000078
 8082848:	08080a99 	.word	0x08080a99

0808284c <__aeabi_atexit>:
 808284c:	460b      	mov	r3, r1
 808284e:	4601      	mov	r1, r0
 8082850:	4618      	mov	r0, r3
 8082852:	f000 b807 	b.w	8082864 <__cxa_atexit>

08082856 <_ZdlPvj>:
 8082856:	f7fd bc22 	b.w	808009e <_ZdlPv>

0808285a <_ZnwjRKSt9nothrow_t>:
 808285a:	f7fd bc1c 	b.w	8080096 <_Znwj>

0808285e <_ZnajRKSt9nothrow_t>:
 808285e:	f7fd bc1c 	b.w	808009a <_Znaj>
	...

08082864 <__cxa_atexit>:
 8082864:	b510      	push	{r4, lr}
 8082866:	4604      	mov	r4, r0
 8082868:	4804      	ldr	r0, [pc, #16]	; (808287c <__cxa_atexit+0x18>)
 808286a:	4613      	mov	r3, r2
 808286c:	b120      	cbz	r0, 8082878 <__cxa_atexit+0x14>
 808286e:	460a      	mov	r2, r1
 8082870:	2002      	movs	r0, #2
 8082872:	4621      	mov	r1, r4
 8082874:	f3af 8000 	nop.w
 8082878:	bd10      	pop	{r4, pc}
 808287a:	bf00      	nop
 808287c:	00000000 	.word	0x00000000

08082880 <memcpy>:
 8082880:	440a      	add	r2, r1
 8082882:	4291      	cmp	r1, r2
 8082884:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8082888:	d100      	bne.n	808288c <memcpy+0xc>
 808288a:	4770      	bx	lr
 808288c:	b510      	push	{r4, lr}
 808288e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8082892:	4291      	cmp	r1, r2
 8082894:	f803 4f01 	strb.w	r4, [r3, #1]!
 8082898:	d1f9      	bne.n	808288e <memcpy+0xe>
 808289a:	bd10      	pop	{r4, pc}

0808289c <memmove>:
 808289c:	4288      	cmp	r0, r1
 808289e:	b510      	push	{r4, lr}
 80828a0:	eb01 0402 	add.w	r4, r1, r2
 80828a4:	d902      	bls.n	80828ac <memmove+0x10>
 80828a6:	4284      	cmp	r4, r0
 80828a8:	4623      	mov	r3, r4
 80828aa:	d807      	bhi.n	80828bc <memmove+0x20>
 80828ac:	1e43      	subs	r3, r0, #1
 80828ae:	42a1      	cmp	r1, r4
 80828b0:	d008      	beq.n	80828c4 <memmove+0x28>
 80828b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80828b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80828ba:	e7f8      	b.n	80828ae <memmove+0x12>
 80828bc:	4601      	mov	r1, r0
 80828be:	4402      	add	r2, r0
 80828c0:	428a      	cmp	r2, r1
 80828c2:	d100      	bne.n	80828c6 <memmove+0x2a>
 80828c4:	bd10      	pop	{r4, pc}
 80828c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80828ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80828ce:	e7f7      	b.n	80828c0 <memmove+0x24>

080828d0 <memset>:
 80828d0:	4603      	mov	r3, r0
 80828d2:	4402      	add	r2, r0
 80828d4:	4293      	cmp	r3, r2
 80828d6:	d100      	bne.n	80828da <memset+0xa>
 80828d8:	4770      	bx	lr
 80828da:	f803 1b01 	strb.w	r1, [r3], #1
 80828de:	e7f9      	b.n	80828d4 <memset+0x4>

080828e0 <srand>:
 80828e0:	b538      	push	{r3, r4, r5, lr}
 80828e2:	4b0d      	ldr	r3, [pc, #52]	; (8082918 <srand+0x38>)
 80828e4:	4604      	mov	r4, r0
 80828e6:	681d      	ldr	r5, [r3, #0]
 80828e8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80828ea:	b97b      	cbnz	r3, 808290c <srand+0x2c>
 80828ec:	2018      	movs	r0, #24
 80828ee:	f7fd ffef 	bl	80808d0 <malloc>
 80828f2:	4a0a      	ldr	r2, [pc, #40]	; (808291c <srand+0x3c>)
 80828f4:	4b0a      	ldr	r3, [pc, #40]	; (8082920 <srand+0x40>)
 80828f6:	63a8      	str	r0, [r5, #56]	; 0x38
 80828f8:	e9c0 2300 	strd	r2, r3, [r0]
 80828fc:	4b09      	ldr	r3, [pc, #36]	; (8082924 <srand+0x44>)
 80828fe:	2201      	movs	r2, #1
 8082900:	6083      	str	r3, [r0, #8]
 8082902:	230b      	movs	r3, #11
 8082904:	8183      	strh	r3, [r0, #12]
 8082906:	2300      	movs	r3, #0
 8082908:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808290c:	2200      	movs	r2, #0
 808290e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8082910:	611c      	str	r4, [r3, #16]
 8082912:	615a      	str	r2, [r3, #20]
 8082914:	bd38      	pop	{r3, r4, r5, pc}
 8082916:	bf00      	nop
 8082918:	20000014 	.word	0x20000014
 808291c:	abcd330e 	.word	0xabcd330e
 8082920:	e66d1234 	.word	0xe66d1234
 8082924:	0005deec 	.word	0x0005deec

08082928 <strchr>:
 8082928:	4603      	mov	r3, r0
 808292a:	b2c9      	uxtb	r1, r1
 808292c:	4618      	mov	r0, r3
 808292e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8082932:	b112      	cbz	r2, 808293a <strchr+0x12>
 8082934:	428a      	cmp	r2, r1
 8082936:	d1f9      	bne.n	808292c <strchr+0x4>
 8082938:	4770      	bx	lr
 808293a:	2900      	cmp	r1, #0
 808293c:	bf18      	it	ne
 808293e:	2000      	movne	r0, #0
 8082940:	4770      	bx	lr

08082942 <strchrnul>:
 8082942:	b510      	push	{r4, lr}
 8082944:	4604      	mov	r4, r0
 8082946:	f7ff ffef 	bl	8082928 <strchr>
 808294a:	b918      	cbnz	r0, 8082954 <strchrnul+0x12>
 808294c:	4620      	mov	r0, r4
 808294e:	f000 f814 	bl	808297a <strlen>
 8082952:	4420      	add	r0, r4
 8082954:	bd10      	pop	{r4, pc}

08082956 <strcmp>:
 8082956:	f810 2b01 	ldrb.w	r2, [r0], #1
 808295a:	f811 3b01 	ldrb.w	r3, [r1], #1
 808295e:	2a01      	cmp	r2, #1
 8082960:	bf28      	it	cs
 8082962:	429a      	cmpcs	r2, r3
 8082964:	d0f7      	beq.n	8082956 <strcmp>
 8082966:	1ad0      	subs	r0, r2, r3
 8082968:	4770      	bx	lr

0808296a <strcpy>:
 808296a:	4603      	mov	r3, r0
 808296c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8082970:	f803 2b01 	strb.w	r2, [r3], #1
 8082974:	2a00      	cmp	r2, #0
 8082976:	d1f9      	bne.n	808296c <strcpy+0x2>
 8082978:	4770      	bx	lr

0808297a <strlen>:
 808297a:	4603      	mov	r3, r0
 808297c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8082980:	2a00      	cmp	r2, #0
 8082982:	d1fb      	bne.n	808297c <strlen+0x2>
 8082984:	1a18      	subs	r0, r3, r0
 8082986:	3801      	subs	r0, #1
 8082988:	4770      	bx	lr

0808298a <strncmp>:
 808298a:	b510      	push	{r4, lr}
 808298c:	b16a      	cbz	r2, 80829aa <strncmp+0x20>
 808298e:	3901      	subs	r1, #1
 8082990:	1884      	adds	r4, r0, r2
 8082992:	f810 3b01 	ldrb.w	r3, [r0], #1
 8082996:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 808299a:	4293      	cmp	r3, r2
 808299c:	d103      	bne.n	80829a6 <strncmp+0x1c>
 808299e:	42a0      	cmp	r0, r4
 80829a0:	d001      	beq.n	80829a6 <strncmp+0x1c>
 80829a2:	2b00      	cmp	r3, #0
 80829a4:	d1f5      	bne.n	8082992 <strncmp+0x8>
 80829a6:	1a98      	subs	r0, r3, r2
 80829a8:	bd10      	pop	{r4, pc}
 80829aa:	4610      	mov	r0, r2
 80829ac:	e7fc      	b.n	80829a8 <strncmp+0x1e>

080829ae <strrchr>:
 80829ae:	b538      	push	{r3, r4, r5, lr}
 80829b0:	4603      	mov	r3, r0
 80829b2:	460c      	mov	r4, r1
 80829b4:	b969      	cbnz	r1, 80829d2 <strrchr+0x24>
 80829b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80829ba:	f7ff bfb5 	b.w	8082928 <strchr>
 80829be:	4605      	mov	r5, r0
 80829c0:	1c43      	adds	r3, r0, #1
 80829c2:	4621      	mov	r1, r4
 80829c4:	4618      	mov	r0, r3
 80829c6:	f7ff ffaf 	bl	8082928 <strchr>
 80829ca:	2800      	cmp	r0, #0
 80829cc:	d1f7      	bne.n	80829be <strrchr+0x10>
 80829ce:	4628      	mov	r0, r5
 80829d0:	bd38      	pop	{r3, r4, r5, pc}
 80829d2:	2500      	movs	r5, #0
 80829d4:	e7f5      	b.n	80829c2 <strrchr+0x14>
	...

080829d8 <_strtol_l.isra.0>:
 80829d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80829dc:	468c      	mov	ip, r1
 80829de:	4686      	mov	lr, r0
 80829e0:	4e39      	ldr	r6, [pc, #228]	; (8082ac8 <_strtol_l.isra.0+0xf0>)
 80829e2:	4660      	mov	r0, ip
 80829e4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80829e8:	5da5      	ldrb	r5, [r4, r6]
 80829ea:	f015 0508 	ands.w	r5, r5, #8
 80829ee:	d1f8      	bne.n	80829e2 <_strtol_l.isra.0+0xa>
 80829f0:	2c2d      	cmp	r4, #45	; 0x2d
 80829f2:	d133      	bne.n	8082a5c <_strtol_l.isra.0+0x84>
 80829f4:	f04f 0801 	mov.w	r8, #1
 80829f8:	f89c 4000 	ldrb.w	r4, [ip]
 80829fc:	f100 0c02 	add.w	ip, r0, #2
 8082a00:	2b00      	cmp	r3, #0
 8082a02:	d05c      	beq.n	8082abe <_strtol_l.isra.0+0xe6>
 8082a04:	2b10      	cmp	r3, #16
 8082a06:	d10c      	bne.n	8082a22 <_strtol_l.isra.0+0x4a>
 8082a08:	2c30      	cmp	r4, #48	; 0x30
 8082a0a:	d10a      	bne.n	8082a22 <_strtol_l.isra.0+0x4a>
 8082a0c:	f89c 0000 	ldrb.w	r0, [ip]
 8082a10:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8082a14:	2858      	cmp	r0, #88	; 0x58
 8082a16:	d14d      	bne.n	8082ab4 <_strtol_l.isra.0+0xdc>
 8082a18:	2310      	movs	r3, #16
 8082a1a:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8082a1e:	f10c 0c02 	add.w	ip, ip, #2
 8082a22:	2600      	movs	r6, #0
 8082a24:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8082a28:	3f01      	subs	r7, #1
 8082a2a:	fbb7 f9f3 	udiv	r9, r7, r3
 8082a2e:	4630      	mov	r0, r6
 8082a30:	fb03 7a19 	mls	sl, r3, r9, r7
 8082a34:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 8082a38:	2d09      	cmp	r5, #9
 8082a3a:	d818      	bhi.n	8082a6e <_strtol_l.isra.0+0x96>
 8082a3c:	462c      	mov	r4, r5
 8082a3e:	42a3      	cmp	r3, r4
 8082a40:	dd24      	ble.n	8082a8c <_strtol_l.isra.0+0xb4>
 8082a42:	1c75      	adds	r5, r6, #1
 8082a44:	d007      	beq.n	8082a56 <_strtol_l.isra.0+0x7e>
 8082a46:	4581      	cmp	r9, r0
 8082a48:	d31d      	bcc.n	8082a86 <_strtol_l.isra.0+0xae>
 8082a4a:	d101      	bne.n	8082a50 <_strtol_l.isra.0+0x78>
 8082a4c:	45a2      	cmp	sl, r4
 8082a4e:	db1a      	blt.n	8082a86 <_strtol_l.isra.0+0xae>
 8082a50:	2601      	movs	r6, #1
 8082a52:	fb00 4003 	mla	r0, r0, r3, r4
 8082a56:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8082a5a:	e7eb      	b.n	8082a34 <_strtol_l.isra.0+0x5c>
 8082a5c:	2c2b      	cmp	r4, #43	; 0x2b
 8082a5e:	bf08      	it	eq
 8082a60:	f89c 4000 	ldrbeq.w	r4, [ip]
 8082a64:	46a8      	mov	r8, r5
 8082a66:	bf08      	it	eq
 8082a68:	f100 0c02 	addeq.w	ip, r0, #2
 8082a6c:	e7c8      	b.n	8082a00 <_strtol_l.isra.0+0x28>
 8082a6e:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 8082a72:	2d19      	cmp	r5, #25
 8082a74:	d801      	bhi.n	8082a7a <_strtol_l.isra.0+0xa2>
 8082a76:	3c37      	subs	r4, #55	; 0x37
 8082a78:	e7e1      	b.n	8082a3e <_strtol_l.isra.0+0x66>
 8082a7a:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 8082a7e:	2d19      	cmp	r5, #25
 8082a80:	d804      	bhi.n	8082a8c <_strtol_l.isra.0+0xb4>
 8082a82:	3c57      	subs	r4, #87	; 0x57
 8082a84:	e7db      	b.n	8082a3e <_strtol_l.isra.0+0x66>
 8082a86:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8082a8a:	e7e4      	b.n	8082a56 <_strtol_l.isra.0+0x7e>
 8082a8c:	1c73      	adds	r3, r6, #1
 8082a8e:	d106      	bne.n	8082a9e <_strtol_l.isra.0+0xc6>
 8082a90:	2322      	movs	r3, #34	; 0x22
 8082a92:	4638      	mov	r0, r7
 8082a94:	f8ce 3000 	str.w	r3, [lr]
 8082a98:	b942      	cbnz	r2, 8082aac <_strtol_l.isra.0+0xd4>
 8082a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8082a9e:	f1b8 0f00 	cmp.w	r8, #0
 8082aa2:	d000      	beq.n	8082aa6 <_strtol_l.isra.0+0xce>
 8082aa4:	4240      	negs	r0, r0
 8082aa6:	2a00      	cmp	r2, #0
 8082aa8:	d0f7      	beq.n	8082a9a <_strtol_l.isra.0+0xc2>
 8082aaa:	b10e      	cbz	r6, 8082ab0 <_strtol_l.isra.0+0xd8>
 8082aac:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8082ab0:	6011      	str	r1, [r2, #0]
 8082ab2:	e7f2      	b.n	8082a9a <_strtol_l.isra.0+0xc2>
 8082ab4:	2430      	movs	r4, #48	; 0x30
 8082ab6:	2b00      	cmp	r3, #0
 8082ab8:	d1b3      	bne.n	8082a22 <_strtol_l.isra.0+0x4a>
 8082aba:	2308      	movs	r3, #8
 8082abc:	e7b1      	b.n	8082a22 <_strtol_l.isra.0+0x4a>
 8082abe:	2c30      	cmp	r4, #48	; 0x30
 8082ac0:	d0a4      	beq.n	8082a0c <_strtol_l.isra.0+0x34>
 8082ac2:	230a      	movs	r3, #10
 8082ac4:	e7ad      	b.n	8082a22 <_strtol_l.isra.0+0x4a>
 8082ac6:	bf00      	nop
 8082ac8:	08082d7e 	.word	0x08082d7e

08082acc <strtol>:
 8082acc:	4613      	mov	r3, r2
 8082ace:	460a      	mov	r2, r1
 8082ad0:	4601      	mov	r1, r0
 8082ad2:	4802      	ldr	r0, [pc, #8]	; (8082adc <strtol+0x10>)
 8082ad4:	6800      	ldr	r0, [r0, #0]
 8082ad6:	f7ff bf7f 	b.w	80829d8 <_strtol_l.isra.0>
 8082ada:	bf00      	nop
 8082adc:	20000014 	.word	0x20000014

08082ae0 <dynalib_user>:
 8082ae0:	0808001d 0808005d 08080085 08080089     ....]...........
 8082af0:	00000000 00707061 2e707061 6f626f72     ....app.app.robo
 8082b00:	74735f74 00657461 2e707061 66697073     t_state.app.spif
 8082b10:	00007366                                fs..

08082b14 <_ZTVN5spark10LogHandlerE>:
	...
 8082b24:	080800a5 080800c9                       ........

08082b2c <_ZTVN5spark16SerialLogHandlerE>:
	...
 8082b34:	080800d5 08080109 08081b99 080800cb     ................
 8082b44:	75746553 42000a70 6b6e696c 00000a21     Setup..Blink!...

08082b54 <_ZTVN5spark13CellularClassE>:
	...
 8082b5c:	080809c1 080809b7 080809ad 08080927     ............'...
 8082b6c:	080809a1 08080995 08081ef5 08081efd     ................
 8082b7c:	08080989 08080981 08080977 0808096d     ........w...m...
 8082b8c:	08080931                                1...

08082b90 <_ZTV7TwoWire>:
	...
 8082b98:	08080a1d 08080a67 08080a3f 08080a1f     ....g...?.......
 8082ba8:	08080a47 08080a4f 08080a57 08080a5f     G...O...W..._...

08082bb8 <_ZTV9IPAddress>:
	...
 8082bc0:	08080aa9 08080a99 08080a9b 25006425     ............%d.%
 8082bd0:	25750075 00783430 64756162 72655300     u.u%04x.baud.Ser
 8082be0:	006c6169 53425355 61697265 4a00316c     ial.USBSerial1.J
 8082bf0:	534e4f53 61657274 676f4c6d 646e6148     SONStreamLogHand
 8082c00:	0072656c 30313025 5d002075 202c0020     ler.%010u .] ., 
 8082c10:	3a292800 5b200020 646f6300 203d2065     .(): . [.code = 
 8082c20:	00692500 61746564 20736c69 0d00203d     .%i.details = ..
 8082c30:	006d000a 00660063 66006e6c 0074006e     ..m.c.f.ln.fn.t.
 8082c40:	65646f63 74656400 006c6961              code.detail.

08082c4c <_ZTVN5spark16JSONStreamWriterE>:
	...
 8082c54:	08080f23 08080f49 08080f09 08080b67     #...I.......g...

08082c64 <_ZTVN5spark16StreamLogHandlerE>:
	...
 8082c6c:	080813c5 080813dd 08081b99 080800cb     ................

08082c7c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 8082c84:	080813f1 08081405 08081d41 08080f11     ........A.......

08082c94 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 8082c9c:	08080f21 08080f57 08081ad5 08080f13     !...W...........

08082cac <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 8082cb4:	08080f1f 08080f65 080812ed 08080f81     ....e...........

08082cc4 <_ZTVN5spark12NetworkClassE>:
	...
 8082ccc:	08081eb5 08081ebf 08081ec9 08081ed3     ................
 8082cdc:	08081edd 08081ee9 08081ef5 08081efd     ................
 8082cec:	08081f05 08081f11 08081f19 08081f23     ............#...
 8082cfc:	08081f2d 252d5925 64252d6d 3a482554     -...%Y-%m-%dT%H:
 8082d0c:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

08082d1c <_ZTV11USARTSerial>:
	...
 8082d24:	08080415 08080417 080822a7 08081f89     ........."......
 8082d34:	08082277 08082293 08082285 080822a1     w"..."..."..."..
 8082d44:	08082265 08082269                       e"..i"..

08082d4c <_ZTV9USBSerial>:
	...
 8082d54:	08082369 080823cf 080823a7 08081f89     i#...#...#......
 8082d64:	08082399 0808236b 0808237b 080823c9     .#..k#..{#...#..
 8082d74:	0808238b 08082365                       .#..e#..

08082d7c <_ZSt7nothrow>:
	...

08082d7d <_ctype_>:
 8082d7d:	20202000 20202020 28282020 20282828     .         ((((( 
 8082d8d:	20202020 20202020 20202020 20202020                     
 8082d9d:	10108820 10101010 10101010 10101010      ...............
 8082dad:	04040410 04040404 10040404 10101010     ................
 8082dbd:	41411010 41414141 01010101 01010101     ..AAAAAA........
 8082dcd:	01010101 01010101 01010101 10101010     ................
 8082ddd:	42421010 42424242 02020202 02020202     ..BBBBBB........
 8082ded:	02020202 02020202 02020202 10101010     ................
 8082dfd:	00000020 00000000 00000000 00000000      ...............
	...

08082e7e <link_const_variable_data_end>:
	...

08082e80 <link_constructors_location>:
 8082e80:	0808021d 	.word	0x0808021d
 8082e84:	080803c5 	.word	0x080803c5
 8082e88:	080804c9 	.word	0x080804c9
 8082e8c:	080804e1 	.word	0x080804e1
 8082e90:	080809cd 	.word	0x080809cd
 8082e94:	08081b89 	.word	0x08081b89
 8082e98:	08081f75 	.word	0x08081f75
 8082e9c:	0808209d 	.word	0x0808209d
 8082ea0:	08082215 	.word	0x08082215
 8082ea4:	08082251 	.word	0x08082251
 8082ea8:	0808281d 	.word	0x0808281d

08082eac <link_constructors_end>:
 8082eac:	00000000 	.word	0x00000000
