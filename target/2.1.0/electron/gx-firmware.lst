
/Users/davidsalihu/Documents/GitHub/gx-firmware/target/2.1.0/electron/gx-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00015320  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  08095340  08095340  00025340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  08095348  00034000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000005b0  20000000  0809534c  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000014ec  200005b0  200005b0  000505b0  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  080958fc  080958fc  000458fc  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  08095928  08095928  00045928  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0031f933  00000000  00000000  0004592c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0003238c  00000000  00000000  0036525f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00046ded  00000000  00000000  003975eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000039d8  00000000  00000000  003de3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000097e0  00000000  00000000  003e1db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00047a7a  00000000  00000000  003eb590  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0007a76e  00000000  00000000  0043300a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000cc0c7  00000000  00000000  004ad778  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000ad3c  00000000  00000000  00579840  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f011 ff1f 	bl	8091e74 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f011 ff41 	bl	8091ec4 <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	0809534c 	.word	0x0809534c
 8080050:	200005b0 	.word	0x200005b0
 8080054:	200005b0 	.word	0x200005b0
 8080058:	20001a9c 	.word	0x20001a9c
 808005c:	20001a9c 	.word	0x20001a9c

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f010 fb47 	bl	80906f4 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080066:	2500      	movs	r5, #0
 8080068:	4e05      	ldr	r6, [pc, #20]	; (8080080 <module_user_init+0x20>)
 808006a:	4c06      	ldr	r4, [pc, #24]	; (8080084 <module_user_init+0x24>)
 808006c:	1ba4      	subs	r4, r4, r6
 808006e:	08a4      	lsrs	r4, r4, #2
 8080070:	42a5      	cmp	r5, r4
 8080072:	d100      	bne.n	8080076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 8080076:	f856 3b04 	ldr.w	r3, [r6], #4
 808007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f7      	b.n	8080070 <module_user_init+0x10>
 8080080:	080952f4 	.word	0x080952f4
 8080084:	0809533c 	.word	0x0809533c

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f00b b87a 	b.w	808b180 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f00b f85f 	bl	808b150 <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 8080096:	f010 baef 	b.w	8090678 <_post_loop>

0808009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 808009a:	f00d ba3d 	b.w	808d518 <malloc>

0808009e <_Znaj>:
 808009e:	f00d ba3b 	b.w	808d518 <malloc>

080800a2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80800a2:	f00d ba41 	b.w	808d528 <free>

080800a6 <_ZdaPv>:
 80800a6:	f00d ba3f 	b.w	808d528 <free>
	...

080800ac <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800ac:	2100      	movs	r1, #0
 80800ae:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80800b0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800b2:	4a02      	ldr	r2, [pc, #8]	; (80800bc <__cxa_pure_virtual+0x10>)
 80800b4:	f00d f8f2 	bl	808d29c <panic_>
  while (1);
 80800b8:	e7fe      	b.n	80800b8 <__cxa_pure_virtual+0xc>
 80800ba:	bf00      	nop
 80800bc:	0808cf2d 	.word	0x0808cf2d

080800c0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800c0:	7800      	ldrb	r0, [r0, #0]
 80800c2:	fab0 f080 	clz	r0, r0
 80800c6:	0940      	lsrs	r0, r0, #5
 80800c8:	4770      	bx	lr

080800ca <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800ca:	2301      	movs	r3, #1
 80800cc:	7003      	strb	r3, [r0, #0]
 80800ce:	4770      	bx	lr

080800d0 <spiffs_cache_page_get>:
#include "spiffs_nucleus.h"

#if SPIFFS_CACHE

// returns cached page for give page index, or null if no such cached page
static spiffs_cache_page *spiffs_cache_page_get(spiffs *fs, spiffs_page_ix pix) {
 80800d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  spiffs_cache *cache = spiffs_get_cache(fs);
 80800d2:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
static spiffs_cache_page *spiffs_cache_page_get(spiffs *fs, spiffs_page_ix pix) {
 80800d4:	4605      	mov	r5, r0
  if ((cache->cpage_use_map & cache->cpage_use_mask) == 0) return 0;
 80800d6:	e9d4 6302 	ldrd	r6, r3, [r4, #8]
 80800da:	ea16 0003 	ands.w	r0, r6, r3
 80800de:	d019      	beq.n	8080114 <spiffs_cache_page_get+0x44>
  int i;
  for (i = 0; i < cache->cpage_count; i++) {
 80800e0:	2200      	movs	r2, #0
    spiffs_cache_page *cp = spiffs_get_cache_page_hdr(fs, cache, i);
    if ((cache->cpage_use_map & (1<<i)) &&
 80800e2:	f04f 0e01 	mov.w	lr, #1
  for (i = 0; i < cache->cpage_count; i++) {
 80800e6:	f894 c000 	ldrb.w	ip, [r4]
 80800ea:	4594      	cmp	ip, r2
 80800ec:	dc01      	bgt.n	80800f2 <spiffs_cache_page_get+0x22>
  if ((cache->cpage_use_map & cache->cpage_use_mask) == 0) return 0;
 80800ee:	2000      	movs	r0, #0
 80800f0:	e010      	b.n	8080114 <spiffs_cache_page_get+0x44>
    if ((cache->cpage_use_map & (1<<i)) &&
 80800f2:	fa0e f302 	lsl.w	r3, lr, r2
 80800f6:	4233      	tst	r3, r6
 80800f8:	d00d      	beq.n	8080116 <spiffs_cache_page_get+0x46>
    spiffs_cache_page *cp = spiffs_get_cache_page_hdr(fs, cache, i);
 80800fa:	69eb      	ldr	r3, [r5, #28]
 80800fc:	6927      	ldr	r7, [r4, #16]
 80800fe:	3314      	adds	r3, #20
 8080100:	4353      	muls	r3, r2
 8080102:	18f8      	adds	r0, r7, r3
    if ((cache->cpage_use_map & (1<<i)) &&
 8080104:	56fb      	ldrsb	r3, [r7, r3]
 8080106:	2b00      	cmp	r3, #0
 8080108:	db05      	blt.n	8080116 <spiffs_cache_page_get+0x46>
        (cp->flags & SPIFFS_CACHE_FLAG_TYPE_WR) == 0 &&
 808010a:	8903      	ldrh	r3, [r0, #8]
 808010c:	428b      	cmp	r3, r1
 808010e:	d102      	bne.n	8080116 <spiffs_cache_page_get+0x46>
        cp->pix == pix ) {
      //SPIFFS_CACHE_DBG("CACHE_GET: have cache page "_SPIPRIi" for "_SPIPRIpg"\n", i, pix);
      cp->last_access = cache->last_access;
 8080110:	6863      	ldr	r3, [r4, #4]
 8080112:	6043      	str	r3, [r0, #4]
      return cp;
    }
  }
  //SPIFFS_CACHE_DBG("CACHE_GET: no cache for "_SPIPRIpg"\n", pix);
  return 0;
}
 8080114:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for (i = 0; i < cache->cpage_count; i++) {
 8080116:	3201      	adds	r2, #1
 8080118:	e7e7      	b.n	80800ea <spiffs_cache_page_get+0x1a>

0808011a <spiffs_cache_page_free>:

// frees cached page
static s32_t spiffs_cache_page_free(spiffs *fs, int ix, u8_t write_back) {
 808011a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808011e:	460e      	mov	r6, r1
  s32_t res = SPIFFS_OK;
  spiffs_cache *cache = spiffs_get_cache(fs);
  spiffs_cache_page *cp = spiffs_get_cache_page_hdr(fs, cache, ix);
  if (cache->cpage_use_map & (1<<ix)) {
 8080120:	2401      	movs	r4, #1
  spiffs_cache *cache = spiffs_get_cache(fs);
 8080122:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
  if (cache->cpage_use_map & (1<<ix)) {
 8080124:	40b4      	lsls	r4, r6
 8080126:	68ab      	ldr	r3, [r5, #8]
static s32_t spiffs_cache_page_free(spiffs *fs, int ix, u8_t write_back) {
 8080128:	4611      	mov	r1, r2
  if (cache->cpage_use_map & (1<<ix)) {
 808012a:	4023      	ands	r3, r4
 808012c:	d025      	beq.n	808017a <spiffs_cache_page_free+0x60>
  spiffs_cache_page *cp = spiffs_get_cache_page_hdr(fs, cache, ix);
 808012e:	69c2      	ldr	r2, [r0, #28]
 8080130:	692f      	ldr	r7, [r5, #16]
 8080132:	f102 0314 	add.w	r3, r2, #20
 8080136:	435e      	muls	r6, r3
 8080138:	eb07 0e06 	add.w	lr, r7, r6
    if (write_back &&
 808013c:	b1c9      	cbz	r1, 8080172 <spiffs_cache_page_free+0x58>
 808013e:	57b9      	ldrsb	r1, [r7, r6]
        (cp->flags & SPIFFS_CACHE_FLAG_TYPE_WR) == 0 &&
 8080140:	5dbb      	ldrb	r3, [r7, r6]
    if (write_back &&
 8080142:	2900      	cmp	r1, #0
 8080144:	db15      	blt.n	8080172 <spiffs_cache_page_free+0x58>
        (cp->flags & SPIFFS_CACHE_FLAG_TYPE_WR) == 0 &&
 8080146:	f013 0301 	ands.w	r3, r3, #1
 808014a:	d014      	beq.n	8080176 <spiffs_cache_page_free+0x5c>
        (cp->flags & SPIFFS_CACHE_FLAG_DIRTY)) {
      u8_t *mem =  spiffs_get_cache_page(fs, cache, ix);
      SPIFFS_CACHE_DBG("CACHE_FREE: write cache page "_SPIPRIi" pix "_SPIPRIpg"\n", ix, cp->pix);
      res = SPIFFS_HAL_WRITE(fs, SPIFFS_PAGE_TO_PADDR(fs, cp->pix), SPIFFS_CFG_LOG_PAGE_SZ(fs), mem);
 808014c:	f8be e008 	ldrh.w	lr, [lr, #8]
 8080150:	6901      	ldr	r1, [r0, #16]
      u8_t *mem =  spiffs_get_cache_page(fs, cache, ix);
 8080152:	f106 0314 	add.w	r3, r6, #20
      res = SPIFFS_HAL_WRITE(fs, SPIFFS_PAGE_TO_PADDR(fs, cp->pix), SPIFFS_CFG_LOG_PAGE_SZ(fs), mem);
 8080156:	fb02 110e 	mla	r1, r2, lr, r1
 808015a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 808015e:	443b      	add	r3, r7
 8080160:	47c0      	blx	r8
    } else
#endif
    {
      SPIFFS_CACHE_DBG("CACHE_FREE: free cache page "_SPIPRIi" pix "_SPIPRIpg"\n", ix, cp->pix);
    }
    cache->cpage_use_map &= ~(1 << ix);
 8080162:	68ab      	ldr	r3, [r5, #8]
 8080164:	ea23 0404 	bic.w	r4, r3, r4
    cp->flags = 0;
 8080168:	2300      	movs	r3, #0
    cache->cpage_use_map &= ~(1 << ix);
 808016a:	60ac      	str	r4, [r5, #8]
    cp->flags = 0;
 808016c:	55bb      	strb	r3, [r7, r6]
  }

  return res;
}
 808016e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  s32_t res = SPIFFS_OK;
 8080172:	2000      	movs	r0, #0
 8080174:	e7f5      	b.n	8080162 <spiffs_cache_page_free+0x48>
 8080176:	4618      	mov	r0, r3
 8080178:	e7f3      	b.n	8080162 <spiffs_cache_page_free+0x48>
 808017a:	4618      	mov	r0, r3
  return res;
 808017c:	e7f7      	b.n	808016e <spiffs_cache_page_free+0x54>

0808017e <spiffs_cache_page_allocate>:

  return res;
}

// allocates a new cached page and returns it, or null if all cache pages are busy
static spiffs_cache_page *spiffs_cache_page_allocate(spiffs *fs) {
 808017e:	b570      	push	{r4, r5, r6, lr}
  spiffs_cache *cache = spiffs_get_cache(fs);
 8080180:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
  if (cache->cpage_use_map == 0xffffffff) {
 8080182:	688a      	ldr	r2, [r1, #8]
 8080184:	1c53      	adds	r3, r2, #1
 8080186:	d004      	beq.n	8080192 <spiffs_cache_page_allocate+0x14>
    // out of cache memory
    return 0;
  }
  int i;
  for (i = 0; i < cache->cpage_count; i++) {
 8080188:	2300      	movs	r3, #0
    if ((cache->cpage_use_map & (1<<i)) == 0) {
 808018a:	2601      	movs	r6, #1
  for (i = 0; i < cache->cpage_count; i++) {
 808018c:	780d      	ldrb	r5, [r1, #0]
 808018e:	429d      	cmp	r5, r3
 8080190:	dc01      	bgt.n	8080196 <spiffs_cache_page_allocate+0x18>
    return 0;
 8080192:	2000      	movs	r0, #0
 8080194:	e00c      	b.n	80801b0 <spiffs_cache_page_allocate+0x32>
    if ((cache->cpage_use_map & (1<<i)) == 0) {
 8080196:	fa06 f403 	lsl.w	r4, r6, r3
 808019a:	4222      	tst	r2, r4
 808019c:	d109      	bne.n	80801b2 <spiffs_cache_page_allocate+0x34>
      spiffs_cache_page *cp = spiffs_get_cache_page_hdr(fs, cache, i);
 808019e:	69c0      	ldr	r0, [r0, #28]
 80801a0:	690d      	ldr	r5, [r1, #16]
 80801a2:	3014      	adds	r0, #20
 80801a4:	fb03 5000 	mla	r0, r3, r0, r5
      cache->cpage_use_map |= (1<<i);
      cp->last_access = cache->last_access;
 80801a8:	684b      	ldr	r3, [r1, #4]
      cache->cpage_use_map |= (1<<i);
 80801aa:	4322      	orrs	r2, r4
 80801ac:	608a      	str	r2, [r1, #8]
      cp->last_access = cache->last_access;
 80801ae:	6043      	str	r3, [r0, #4]
      return cp;
    }
  }
  // out of cache entries
  return 0;
}
 80801b0:	bd70      	pop	{r4, r5, r6, pc}
  for (i = 0; i < cache->cpage_count; i++) {
 80801b2:	3301      	adds	r3, #1
 80801b4:	e7eb      	b.n	808018e <spiffs_cache_page_allocate+0x10>

080801b6 <spiffs_cache_page_remove_oldest.constprop.0>:
static s32_t spiffs_cache_page_remove_oldest(spiffs *fs, u8_t flag_mask, u8_t flags) {
 80801b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  spiffs_cache *cache = spiffs_get_cache(fs);
 80801ba:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
  if ((cache->cpage_use_map & cache->cpage_use_mask) != cache->cpage_use_mask) {
 80801bc:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80801c0:	4393      	bics	r3, r2
 80801c2:	d123      	bne.n	808020c <spiffs_cache_page_remove_oldest.constprop.0+0x56>
  u32_t oldest_val = 0;
 80801c4:	2500      	movs	r5, #0
  int cand_ix = -1;
 80801c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  for (i = 0; i < cache->cpage_count; i++) {
 80801ca:	462a      	mov	r2, r5
 80801cc:	f894 c000 	ldrb.w	ip, [r4]
 80801d0:	4562      	cmp	r2, ip
 80801d2:	db06      	blt.n	80801e2 <spiffs_cache_page_remove_oldest.constprop.0+0x2c>
  if (cand_ix >= 0) {
 80801d4:	1c4b      	adds	r3, r1, #1
 80801d6:	d019      	beq.n	808020c <spiffs_cache_page_remove_oldest.constprop.0+0x56>
}
 80801d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    res = spiffs_cache_page_free(fs, cand_ix, 1);
 80801dc:	2201      	movs	r2, #1
 80801de:	f7ff bf9c 	b.w	808011a <spiffs_cache_page_free>
    spiffs_cache_page *cp = spiffs_get_cache_page_hdr(fs, cache, i);
 80801e2:	69c3      	ldr	r3, [r0, #28]
 80801e4:	6927      	ldr	r7, [r4, #16]
 80801e6:	3314      	adds	r3, #20
 80801e8:	fb02 f803 	mul.w	r8, r2, r3
 80801ec:	eb07 0e08 	add.w	lr, r7, r8
    if ((cache->last_access - cp->last_access) > oldest_val &&
 80801f0:	f8de 6004 	ldr.w	r6, [lr, #4]
 80801f4:	6863      	ldr	r3, [r4, #4]
 80801f6:	1b9e      	subs	r6, r3, r6
 80801f8:	42ae      	cmp	r6, r5
 80801fa:	d905      	bls.n	8080208 <spiffs_cache_page_remove_oldest.constprop.0+0x52>
 80801fc:	f917 3008 	ldrsb.w	r3, [r7, r8]
 8080200:	2b00      	cmp	r3, #0
 8080202:	bfa4      	itt	ge
 8080204:	4635      	movge	r5, r6
 8080206:	4611      	movge	r1, r2
  for (i = 0; i < cache->cpage_count; i++) {
 8080208:	3201      	adds	r2, #1
 808020a:	e7e1      	b.n	80801d0 <spiffs_cache_page_remove_oldest.constprop.0+0x1a>
}
 808020c:	2000      	movs	r0, #0
 808020e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08080212 <spiffs_cache_drop_page>:

// drops the cache page for give page index
void spiffs_cache_drop_page(spiffs *fs, spiffs_page_ix pix) {
 8080212:	b510      	push	{r4, lr}
 8080214:	4604      	mov	r4, r0
  spiffs_cache_page *cp =  spiffs_cache_page_get(fs, pix);
 8080216:	f7ff ff5b 	bl	80800d0 <spiffs_cache_page_get>
  if (cp) {
 808021a:	b130      	cbz	r0, 808022a <spiffs_cache_drop_page+0x18>
    spiffs_cache_page_free(fs, cp->ix, 0);
 808021c:	7841      	ldrb	r1, [r0, #1]
 808021e:	2200      	movs	r2, #0
 8080220:	4620      	mov	r0, r4
  }
}
 8080222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    spiffs_cache_page_free(fs, cp->ix, 0);
 8080226:	f7ff bf78 	b.w	808011a <spiffs_cache_page_free>
}
 808022a:	bd10      	pop	{r4, pc}

0808022c <spiffs_phys_rd>:
    spiffs *fs,
    u8_t op,
    spiffs_file fh,
    u32_t addr,
    u32_t len,
    u8_t *dst) {
 808022c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080230:	460e      	mov	r6, r1
 8080232:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
  (void)fh;
  s32_t res = SPIFFS_OK;
  spiffs_cache *cache = spiffs_get_cache(fs);
  spiffs_cache_page *cp =  spiffs_cache_page_get(fs, SPIFFS_PADDR_TO_PAGE(fs, addr));
 8080236:	6901      	ldr	r1, [r0, #16]
    u8_t *dst) {
 8080238:	461d      	mov	r5, r3
  spiffs_cache_page *cp =  spiffs_cache_page_get(fs, SPIFFS_PADDR_TO_PAGE(fs, addr));
 808023a:	1a59      	subs	r1, r3, r1
 808023c:	69c3      	ldr	r3, [r0, #28]
  spiffs_cache *cache = spiffs_get_cache(fs);
 808023e:	f8d0 905c 	ldr.w	r9, [r0, #92]	; 0x5c
  spiffs_cache_page *cp =  spiffs_cache_page_get(fs, SPIFFS_PADDR_TO_PAGE(fs, addr));
 8080242:	fbb1 f1f3 	udiv	r1, r1, r3
 8080246:	b289      	uxth	r1, r1
    u8_t *dst) {
 8080248:	4604      	mov	r4, r0
  spiffs_cache_page *cp =  spiffs_cache_page_get(fs, SPIFFS_PADDR_TO_PAGE(fs, addr));
 808024a:	f7ff ff41 	bl	80800d0 <spiffs_cache_page_get>
  cache->last_access++;
 808024e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8080252:	3301      	adds	r3, #1
 8080254:	f8c9 3004 	str.w	r3, [r9, #4]
  if (cp) {
 8080258:	b1e8      	cbz	r0, 8080296 <spiffs_phys_rd+0x6a>
    // we've already got one, you see
#if SPIFFS_CACHE_STATS
    fs->cache_hits++;
 808025a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  s32_t res = SPIFFS_OK;
 808025c:	2600      	movs	r6, #0
    fs->cache_hits++;
 808025e:	3301      	adds	r3, #1
 8080260:	6663      	str	r3, [r4, #100]	; 0x64
#endif
    cp->last_access = cache->last_access;
 8080262:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8080266:	6043      	str	r3, [r0, #4]
    u8_t *mem =  spiffs_get_cache_page(fs, cache, cp->ix);
    _SPIFFS_MEMCPY(dst, &mem[SPIFFS_PADDR_TO_PAGE_OFFSET(fs, addr)], len);
 8080268:	6921      	ldr	r1, [r4, #16]
    u8_t *mem =  spiffs_get_cache_page(fs, cache, cp->ix);
 808026a:	69e2      	ldr	r2, [r4, #28]
    _SPIFFS_MEMCPY(dst, &mem[SPIFFS_PADDR_TO_PAGE_OFFSET(fs, addr)], len);
 808026c:	1a6d      	subs	r5, r5, r1
 808026e:	fbb5 f1f2 	udiv	r1, r5, r2
 8080272:	fb02 5111 	mls	r1, r2, r1, r5
    u8_t *mem =  spiffs_get_cache_page(fs, cache, cp->ix);
 8080276:	7845      	ldrb	r5, [r0, #1]
 8080278:	3214      	adds	r2, #20
    _SPIFFS_MEMCPY(dst, &mem[SPIFFS_PADDR_TO_PAGE_OFFSET(fs, addr)], len);
 808027a:	3114      	adds	r1, #20
 808027c:	fb02 1105 	mla	r1, r2, r5, r1
 8080280:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8080284:	4652      	mov	r2, sl
 8080286:	4658      	mov	r0, fp
 8080288:	4419      	add	r1, r3
 808028a:	f011 fdf3 	bl	8091e74 <memcpy>
        res = res2;
      }
    }
  }
  return res;
}
 808028e:	4630      	mov	r0, r6
 8080290:	b001      	add	sp, #4
 8080292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((op & SPIFFS_OP_TYPE_MASK) == SPIFFS_OP_T_OBJ_LU2) {
 8080296:	f006 0603 	and.w	r6, r6, #3
 808029a:	2e01      	cmp	r6, #1
 808029c:	d109      	bne.n	80802b2 <spiffs_phys_rd+0x86>
      return SPIFFS_HAL_READ(fs, addr, len, dst);
 808029e:	6826      	ldr	r6, [r4, #0]
 80802a0:	465b      	mov	r3, fp
 80802a2:	4652      	mov	r2, sl
 80802a4:	4629      	mov	r1, r5
 80802a6:	4620      	mov	r0, r4
 80802a8:	46b4      	mov	ip, r6
}
 80802aa:	b001      	add	sp, #4
 80802ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return SPIFFS_HAL_READ(fs, addr, len, dst);
 80802b0:	4760      	bx	ip
    fs->cache_misses++;
 80802b2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    res = spiffs_cache_page_remove_oldest(fs, SPIFFS_CACHE_FLAG_TYPE_WR, 0);
 80802b4:	4620      	mov	r0, r4
    fs->cache_misses++;
 80802b6:	3301      	adds	r3, #1
 80802b8:	66a3      	str	r3, [r4, #104]	; 0x68
    res = spiffs_cache_page_remove_oldest(fs, SPIFFS_CACHE_FLAG_TYPE_WR, 0);
 80802ba:	f7ff ff7c 	bl	80801b6 <spiffs_cache_page_remove_oldest.constprop.0>
 80802be:	4606      	mov	r6, r0
    cp = spiffs_cache_page_allocate(fs);
 80802c0:	4620      	mov	r0, r4
 80802c2:	f7ff ff5c 	bl	808017e <spiffs_cache_page_allocate>
    if (cp) {
 80802c6:	4680      	mov	r8, r0
 80802c8:	b390      	cbz	r0, 8080330 <spiffs_phys_rd+0x104>
      cp->flags = SPIFFS_CACHE_FLAG_WRTHRU;
 80802ca:	2302      	movs	r3, #2
 80802cc:	7003      	strb	r3, [r0, #0]
      cp->pix = SPIFFS_PADDR_TO_PAGE(fs, addr);
 80802ce:	6923      	ldr	r3, [r4, #16]
 80802d0:	69e2      	ldr	r2, [r4, #28]
 80802d2:	1aeb      	subs	r3, r5, r3
 80802d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80802d8:	8103      	strh	r3, [r0, #8]
      s32_t res2 = SPIFFS_HAL_READ(fs,
 80802da:	69e2      	ldr	r2, [r4, #28]
 80802dc:	7841      	ldrb	r1, [r0, #1]
 80802de:	f102 0314 	add.w	r3, r2, #20
 80802e2:	434b      	muls	r3, r1
 80802e4:	6921      	ldr	r1, [r4, #16]
 80802e6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80802ea:	1a69      	subs	r1, r5, r1
 80802ec:	fbb1 f7f2 	udiv	r7, r1, r2
 80802f0:	fb02 1117 	mls	r1, r2, r7, r1
 80802f4:	3314      	adds	r3, #20
 80802f6:	4403      	add	r3, r0
 80802f8:	1a69      	subs	r1, r5, r1
 80802fa:	4620      	mov	r0, r4
 80802fc:	6827      	ldr	r7, [r4, #0]
 80802fe:	47b8      	blx	r7
      _SPIFFS_MEMCPY(dst, &mem[SPIFFS_PADDR_TO_PAGE_OFFSET(fs, addr)], len);
 8080300:	6921      	ldr	r1, [r4, #16]
      u8_t *mem =  spiffs_get_cache_page(fs, cache, cp->ix);
 8080302:	69e2      	ldr	r2, [r4, #28]
      _SPIFFS_MEMCPY(dst, &mem[SPIFFS_PADDR_TO_PAGE_OFFSET(fs, addr)], len);
 8080304:	1a6d      	subs	r5, r5, r1
 8080306:	fbb5 f1f2 	udiv	r1, r5, r2
 808030a:	fb02 5111 	mls	r1, r2, r1, r5
      u8_t *mem =  spiffs_get_cache_page(fs, cache, cp->ix);
 808030e:	f898 5001 	ldrb.w	r5, [r8, #1]
 8080312:	3214      	adds	r2, #20
      _SPIFFS_MEMCPY(dst, &mem[SPIFFS_PADDR_TO_PAGE_OFFSET(fs, addr)], len);
 8080314:	3114      	adds	r1, #20
 8080316:	fb02 1105 	mla	r1, r2, r5, r1
 808031a:	f8d9 3010 	ldr.w	r3, [r9, #16]
      if (res2 != SPIFFS_OK) {
 808031e:	2800      	cmp	r0, #0
 8080320:	bf18      	it	ne
 8080322:	4606      	movne	r6, r0
      _SPIFFS_MEMCPY(dst, &mem[SPIFFS_PADDR_TO_PAGE_OFFSET(fs, addr)], len);
 8080324:	4652      	mov	r2, sl
 8080326:	4658      	mov	r0, fp
 8080328:	4419      	add	r1, r3
 808032a:	f011 fda3 	bl	8091e74 <memcpy>
 808032e:	e7ae      	b.n	808028e <spiffs_phys_rd+0x62>
      s32_t res2 = SPIFFS_HAL_READ(fs, addr, len, dst);
 8080330:	465b      	mov	r3, fp
 8080332:	4652      	mov	r2, sl
 8080334:	4629      	mov	r1, r5
 8080336:	4620      	mov	r0, r4
 8080338:	6827      	ldr	r7, [r4, #0]
 808033a:	47b8      	blx	r7
      if (res2 != SPIFFS_OK) {
 808033c:	2800      	cmp	r0, #0
 808033e:	bf18      	it	ne
 8080340:	4606      	movne	r6, r0
 8080342:	e7a4      	b.n	808028e <spiffs_phys_rd+0x62>

08080344 <spiffs_phys_wr>:
    spiffs *fs,
    u8_t op,
    spiffs_file fh,
    u32_t addr,
    u32_t len,
    u8_t *src) {
 8080344:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080348:	461d      	mov	r5, r3
 808034a:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
  (void)fh;
  spiffs_page_ix pix = SPIFFS_PADDR_TO_PAGE(fs, addr);
 808034e:	6903      	ldr	r3, [r0, #16]
    u8_t *src) {
 8080350:	468b      	mov	fp, r1
  spiffs_page_ix pix = SPIFFS_PADDR_TO_PAGE(fs, addr);
 8080352:	69c1      	ldr	r1, [r0, #28]
 8080354:	1aeb      	subs	r3, r5, r3
 8080356:	fbb3 f1f1 	udiv	r1, r3, r1
  spiffs_cache *cache = spiffs_get_cache(fs);
  spiffs_cache_page *cp =  spiffs_cache_page_get(fs, pix);
 808035a:	b289      	uxth	r1, r1
    u8_t *src) {
 808035c:	4604      	mov	r4, r0
  spiffs_cache *cache = spiffs_get_cache(fs);
 808035e:	f8d0 a05c 	ldr.w	sl, [r0, #92]	; 0x5c
  spiffs_cache_page *cp =  spiffs_cache_page_get(fs, pix);
 8080362:	f7ff feb5 	bl	80800d0 <spiffs_cache_page_get>

  if (cp && (op & SPIFFS_OP_COM_MASK) != SPIFFS_OP_C_WRTHRU) {
 8080366:	4607      	mov	r7, r0
 8080368:	b158      	cbz	r0, 8080382 <spiffs_phys_wr+0x3e>
 808036a:	f00b 021c 	and.w	r2, fp, #28
 808036e:	2a18      	cmp	r2, #24
 8080370:	d007      	beq.n	8080382 <spiffs_phys_wr+0x3e>
    // have a cache page
    // copy in data to cache page

    if ((op & SPIFFS_OP_COM_MASK) == SPIFFS_OP_C_DELE &&
 8080372:	7841      	ldrb	r1, [r0, #1]
 8080374:	b97a      	cbnz	r2, 8080396 <spiffs_phys_wr+0x52>
 8080376:	f01b 0f03 	tst.w	fp, #3
 808037a:	d00c      	beq.n	8080396 <spiffs_phys_wr+0x52>
        (op & SPIFFS_OP_TYPE_MASK) != SPIFFS_OP_T_OBJ_LU) {
      // page is being deleted, wipe from cache - unless it is a lookup page
      spiffs_cache_page_free(fs, cp->ix, 0);
 808037c:	4620      	mov	r0, r4
 808037e:	f7ff fecc 	bl	808011a <spiffs_cache_page_free>
    } else {
      return SPIFFS_OK;
    }
  } else {
    // no cache page, no write cache - just write thru
    return SPIFFS_HAL_WRITE(fs, addr, len, src);
 8080382:	6866      	ldr	r6, [r4, #4]
 8080384:	464b      	mov	r3, r9
 8080386:	4642      	mov	r2, r8
 8080388:	4629      	mov	r1, r5
 808038a:	4620      	mov	r0, r4
 808038c:	46b4      	mov	ip, r6
  }
}
 808038e:	b001      	add	sp, #4
 8080390:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return SPIFFS_HAL_WRITE(fs, addr, len, src);
 8080394:	4760      	bx	ip
    _SPIFFS_MEMCPY(&mem[SPIFFS_PADDR_TO_PAGE_OFFSET(fs, addr)], src, len);
 8080396:	6926      	ldr	r6, [r4, #16]
    u8_t *mem =  spiffs_get_cache_page(fs, cache, cp->ix);
 8080398:	69e2      	ldr	r2, [r4, #28]
    _SPIFFS_MEMCPY(&mem[SPIFFS_PADDR_TO_PAGE_OFFSET(fs, addr)], src, len);
 808039a:	1ba8      	subs	r0, r5, r6
 808039c:	fbb0 f6f2 	udiv	r6, r0, r2
 80803a0:	fb02 0616 	mls	r6, r2, r6, r0
    u8_t *mem =  spiffs_get_cache_page(fs, cache, cp->ix);
 80803a4:	3214      	adds	r2, #20
    _SPIFFS_MEMCPY(&mem[SPIFFS_PADDR_TO_PAGE_OFFSET(fs, addr)], src, len);
 80803a6:	3614      	adds	r6, #20
 80803a8:	fb01 6602 	mla	r6, r1, r2, r6
 80803ac:	f8da 0010 	ldr.w	r0, [sl, #16]
 80803b0:	4642      	mov	r2, r8
 80803b2:	4649      	mov	r1, r9
 80803b4:	4430      	add	r0, r6
 80803b6:	f011 fd5d 	bl	8091e74 <memcpy>
    cache->last_access++;
 80803ba:	f8da 3004 	ldr.w	r3, [sl, #4]
 80803be:	3301      	adds	r3, #1
 80803c0:	f8ca 3004 	str.w	r3, [sl, #4]
    if (cp->flags & SPIFFS_CACHE_FLAG_WRTHRU) {
 80803c4:	7838      	ldrb	r0, [r7, #0]
    cp->last_access = cache->last_access;
 80803c6:	607b      	str	r3, [r7, #4]
    if (cp->flags & SPIFFS_CACHE_FLAG_WRTHRU) {
 80803c8:	f010 0002 	ands.w	r0, r0, #2
 80803cc:	d1d9      	bne.n	8080382 <spiffs_phys_wr+0x3e>
}
 80803ce:	b001      	add	sp, #4
 80803d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080803d4 <spiffs_cache_page_get_by_fd>:

#if SPIFFS_CACHE_WR
// returns the cache page that this fd refers, or null if no cache page
spiffs_cache_page *spiffs_cache_page_get_by_fd(spiffs *fs, spiffs_fd *fd) {
 80803d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  spiffs_cache *cache = spiffs_get_cache(fs);
 80803d6:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
spiffs_cache_page *spiffs_cache_page_get_by_fd(spiffs *fs, spiffs_fd *fd) {
 80803d8:	4605      	mov	r5, r0

  if ((cache->cpage_use_map & cache->cpage_use_mask) == 0) {
 80803da:	e9d4 6302 	ldrd	r6, r3, [r4, #8]
 80803de:	ea16 0003 	ands.w	r0, r6, r3
 80803e2:	d007      	beq.n	80803f4 <spiffs_cache_page_get_by_fd+0x20>
    // all cpages free, no cpage cannot be assigned to obj_id
    return 0;
  }

  int i;
  for (i = 0; i < cache->cpage_count; i++) {
 80803e4:	2200      	movs	r2, #0
    spiffs_cache_page *cp = spiffs_get_cache_page_hdr(fs, cache, i);
    if ((cache->cpage_use_map & (1<<i)) &&
 80803e6:	f04f 0e01 	mov.w	lr, #1
  for (i = 0; i < cache->cpage_count; i++) {
 80803ea:	f894 c000 	ldrb.w	ip, [r4]
 80803ee:	4594      	cmp	ip, r2
 80803f0:	dc01      	bgt.n	80803f6 <spiffs_cache_page_get_by_fd+0x22>
    return 0;
 80803f2:	2000      	movs	r0, #0
      return cp;
    }
  }

  return 0;
}
 80803f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((cache->cpage_use_map & (1<<i)) &&
 80803f6:	fa0e f302 	lsl.w	r3, lr, r2
 80803fa:	4233      	tst	r3, r6
 80803fc:	d00b      	beq.n	8080416 <spiffs_cache_page_get_by_fd+0x42>
    spiffs_cache_page *cp = spiffs_get_cache_page_hdr(fs, cache, i);
 80803fe:	69eb      	ldr	r3, [r5, #28]
 8080400:	6927      	ldr	r7, [r4, #16]
 8080402:	3314      	adds	r3, #20
 8080404:	4353      	muls	r3, r2
 8080406:	18f8      	adds	r0, r7, r3
    if ((cache->cpage_use_map & (1<<i)) &&
 8080408:	56fb      	ldrsb	r3, [r7, r3]
 808040a:	2b00      	cmp	r3, #0
 808040c:	da03      	bge.n	8080416 <spiffs_cache_page_get_by_fd+0x42>
        (cp->flags & SPIFFS_CACHE_FLAG_TYPE_WR) &&
 808040e:	8907      	ldrh	r7, [r0, #8]
 8080410:	88cb      	ldrh	r3, [r1, #6]
 8080412:	429f      	cmp	r7, r3
 8080414:	d0ee      	beq.n	80803f4 <spiffs_cache_page_get_by_fd+0x20>
  for (i = 0; i < cache->cpage_count; i++) {
 8080416:	3201      	adds	r2, #1
 8080418:	e7e9      	b.n	80803ee <spiffs_cache_page_get_by_fd+0x1a>

0808041a <spiffs_cache_page_allocate_by_fd>:

// allocates a new cache page and refers this to given fd - flushes an old cache
// page if all cache is busy
spiffs_cache_page *spiffs_cache_page_allocate_by_fd(spiffs *fs, spiffs_fd *fd) {
 808041a:	b538      	push	{r3, r4, r5, lr}
 808041c:	4605      	mov	r5, r0
 808041e:	460c      	mov	r4, r1
  // before this function is called, it is ensured that there is no already existing
  // cache page with same object id
  spiffs_cache_page_remove_oldest(fs, SPIFFS_CACHE_FLAG_TYPE_WR, 0);
 8080420:	f7ff fec9 	bl	80801b6 <spiffs_cache_page_remove_oldest.constprop.0>
  spiffs_cache_page *cp = spiffs_cache_page_allocate(fs);
 8080424:	4628      	mov	r0, r5
 8080426:	f7ff feaa 	bl	808017e <spiffs_cache_page_allocate>
  if (cp == 0) {
 808042a:	b120      	cbz	r0, 8080436 <spiffs_cache_page_allocate_by_fd+0x1c>
    // could not get cache page
    return 0;
  }

  cp->flags = SPIFFS_CACHE_FLAG_TYPE_WR;
 808042c:	2380      	movs	r3, #128	; 0x80
 808042e:	7003      	strb	r3, [r0, #0]
  cp->obj_id = fd->obj_id;
 8080430:	88e3      	ldrh	r3, [r4, #6]
 8080432:	8103      	strh	r3, [r0, #8]
  fd->cache_page = cp;
 8080434:	6220      	str	r0, [r4, #32]
  SPIFFS_CACHE_DBG("CACHE_ALLO: allocated cache page "_SPIPRIi" for fd "_SPIPRIfd ":"_SPIPRIid "\n", cp->ix, fd->file_nbr, fd->obj_id);
  return cp;
}
 8080436:	bd38      	pop	{r3, r4, r5, pc}

08080438 <spiffs_cache_fd_release>:

// unrefers all fds that this cache page refers to and releases the cache page
void spiffs_cache_fd_release(spiffs *fs, spiffs_cache_page *cp) {
 8080438:	b538      	push	{r3, r4, r5, lr}
  if (cp == 0) return;
 808043a:	460c      	mov	r4, r1
 808043c:	b159      	cbz	r1, 8080456 <spiffs_cache_fd_release+0x1e>
  u32_t i;
  spiffs_fd *fds = (spiffs_fd *)fs->fd_space;
  for (i = 0; i < fs->fd_count; i++) {
 808043e:	2200      	movs	r2, #0
    spiffs_fd *cur_fd = &fds[i];
    if (cur_fd->file_nbr != 0 && cur_fd->cache_page == cp) {
      cur_fd->cache_page = 0;
 8080440:	4615      	mov	r5, r2
 8080442:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  for (i = 0; i < fs->fd_count; i++) {
 8080444:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8080446:	4291      	cmp	r1, r2
 8080448:	d806      	bhi.n	8080458 <spiffs_cache_fd_release+0x20>
    }
  }
  spiffs_cache_page_free(fs, cp->ix, 0);
 808044a:	2200      	movs	r2, #0
 808044c:	7861      	ldrb	r1, [r4, #1]
 808044e:	f7ff fe64 	bl	808011a <spiffs_cache_page_free>

  cp->obj_id = 0;
 8080452:	2300      	movs	r3, #0
 8080454:	8123      	strh	r3, [r4, #8]
}
 8080456:	bd38      	pop	{r3, r4, r5, pc}
    if (cur_fd->file_nbr != 0 && cur_fd->cache_page == cp) {
 8080458:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 808045c:	b119      	cbz	r1, 8080466 <spiffs_cache_fd_release+0x2e>
 808045e:	6a19      	ldr	r1, [r3, #32]
 8080460:	42a1      	cmp	r1, r4
      cur_fd->cache_page = 0;
 8080462:	bf08      	it	eq
 8080464:	621d      	streq	r5, [r3, #32]
  for (i = 0; i < fs->fd_count; i++) {
 8080466:	3201      	adds	r2, #1
 8080468:	3330      	adds	r3, #48	; 0x30
 808046a:	e7eb      	b.n	8080444 <spiffs_cache_fd_release+0xc>

0808046c <spiffs_cache_init>:

#endif

// initializes the cache
void spiffs_cache_init(spiffs *fs) {
 808046c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (fs->cache == 0) return;
 808046e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
void spiffs_cache_init(spiffs *fs) {
 8080470:	4605      	mov	r5, r0
 8080472:	b087      	sub	sp, #28
  if (fs->cache == 0) return;
 8080474:	2b00      	cmp	r3, #0
 8080476:	d03a      	beq.n	80804ee <spiffs_cache_init+0x82>
  u32_t sz = fs->cache_size;
  u32_t cache_mask = 0;
  int i;
  int cache_entries =
      (sz - sizeof(spiffs_cache)) / (SPIFFS_CACHE_PAGE_SIZE(fs));
 8080478:	6e04      	ldr	r4, [r0, #96]	; 0x60
 808047a:	69c2      	ldr	r2, [r0, #28]
 808047c:	3c14      	subs	r4, #20
 808047e:	3214      	adds	r2, #20
 8080480:	fbb4 f4f2 	udiv	r4, r4, r2
  if (cache_entries <= 0) return;
 8080484:	2c00      	cmp	r4, #0
 8080486:	dd32      	ble.n	80804ee <spiffs_cache_init+0x82>

  for (i = 0; i < cache_entries; i++) {
 8080488:	2100      	movs	r1, #0
  u32_t cache_mask = 0;
 808048a:	460a      	mov	r2, r1
  for (i = 0; i < cache_entries; i++) {
 808048c:	3101      	adds	r1, #1
    cache_mask <<= 1;
 808048e:	0052      	lsls	r2, r2, #1
  for (i = 0; i < cache_entries; i++) {
 8080490:	428c      	cmp	r4, r1
    cache_mask |= 1;
 8080492:	f042 0201 	orr.w	r2, r2, #1
  for (i = 0; i < cache_entries; i++) {
 8080496:	d1f9      	bne.n	808048c <spiffs_cache_init+0x20>
  }

  spiffs_cache cache;
  memset(&cache, 0, sizeof(spiffs_cache));
 8080498:	2100      	movs	r1, #0
 808049a:	e9cd 1101 	strd	r1, r1, [sp, #4]
  cache.cpage_count = cache_entries;
  cache.cpages = (u8_t *)((u8_t *)fs->cache + sizeof(spiffs_cache));
 808049e:	f103 0114 	add.w	r1, r3, #20
 80804a2:	9105      	str	r1, [sp, #20]

  cache.cpage_use_map = 0xffffffff;
 80804a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  cache.cpage_count = cache_entries;
 80804a8:	f88d 4004 	strb.w	r4, [sp, #4]
  cache.cpage_use_mask = cache_mask;
 80804ac:	e9cd 1203 	strd	r1, r2, [sp, #12]
  _SPIFFS_MEMCPY(fs->cache, &cache, sizeof(spiffs_cache));
 80804b0:	af05      	add	r7, sp, #20
 80804b2:	aa01      	add	r2, sp, #4
 80804b4:	4616      	mov	r6, r2
 80804b6:	ce03      	ldmia	r6!, {r0, r1}
 80804b8:	42be      	cmp	r6, r7
 80804ba:	6018      	str	r0, [r3, #0]
 80804bc:	6059      	str	r1, [r3, #4]
 80804be:	4632      	mov	r2, r6
 80804c0:	f103 0308 	add.w	r3, r3, #8
 80804c4:	d1f6      	bne.n	80804b4 <spiffs_cache_init+0x48>
 80804c6:	6830      	ldr	r0, [r6, #0]

  spiffs_cache *c = spiffs_get_cache(fs);

  memset(c->cpages, 0, c->cpage_count * SPIFFS_CACHE_PAGE_SIZE(fs));
 80804c8:	2100      	movs	r1, #0
  _SPIFFS_MEMCPY(fs->cache, &cache, sizeof(spiffs_cache));
 80804ca:	6018      	str	r0, [r3, #0]
  spiffs_cache *c = spiffs_get_cache(fs);
 80804cc:	6dee      	ldr	r6, [r5, #92]	; 0x5c
  memset(c->cpages, 0, c->cpage_count * SPIFFS_CACHE_PAGE_SIZE(fs));
 80804ce:	69ea      	ldr	r2, [r5, #28]
 80804d0:	7833      	ldrb	r3, [r6, #0]
 80804d2:	3214      	adds	r2, #20
 80804d4:	435a      	muls	r2, r3
 80804d6:	6930      	ldr	r0, [r6, #16]
 80804d8:	f011 fcf4 	bl	8091ec4 <memset>

  c->cpage_use_map &= ~(c->cpage_use_mask);
 80804dc:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80804e0:	ea23 0302 	bic.w	r3, r3, r2
 80804e4:	60b3      	str	r3, [r6, #8]
  for (i = 0; i < cache.cpage_count; i++) {
 80804e6:	2300      	movs	r3, #0
 80804e8:	b2e4      	uxtb	r4, r4
 80804ea:	429c      	cmp	r4, r3
 80804ec:	dc01      	bgt.n	80804f2 <spiffs_cache_init+0x86>
    spiffs_get_cache_page_hdr(fs, c, i)->ix = i;
  }
}
 80804ee:	b007      	add	sp, #28
 80804f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    spiffs_get_cache_page_hdr(fs, c, i)->ix = i;
 80804f2:	69ea      	ldr	r2, [r5, #28]
 80804f4:	6931      	ldr	r1, [r6, #16]
 80804f6:	3214      	adds	r2, #20
 80804f8:	fb03 1202 	mla	r2, r3, r2, r1
 80804fc:	7053      	strb	r3, [r2, #1]
  for (i = 0; i < cache.cpage_count; i++) {
 80804fe:	3301      	adds	r3, #1
 8080500:	e7f3      	b.n	80804ea <spiffs_cache_init+0x7e>
	...

08080504 <spiffs_gc_erase_block>:
// Erases a logical block and updates the erase counter.
// If cache is enabled, all pages that might be cached in this block
// is dropped.
static s32_t spiffs_gc_erase_block(
    spiffs *fs,
    spiffs_block_ix bix) {
 8080504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080506:	4604      	mov	r4, r0
 8080508:	460f      	mov	r7, r1
  s32_t res;

  SPIFFS_GC_DBG("gc: erase block "_SPIPRIbl"\n", bix);
 808050a:	480d      	ldr	r0, [pc, #52]	; (8080540 <spiffs_gc_erase_block+0x3c>)
 808050c:	f00c fb1c 	bl	808cb48 <spiffsParticleTraceLog>
  res = spiffs_erase_block(fs, bix);
 8080510:	4639      	mov	r1, r7
 8080512:	4620      	mov	r0, r4
 8080514:	f001 ff72 	bl	80823fc <spiffs_erase_block>
  SPIFFS_CHECK_RES(res);
 8080518:	1e05      	subs	r5, r0, #0
 808051a:	da0f      	bge.n	808053c <spiffs_gc_erase_block+0x38>
      spiffs_cache_drop_page(fs, SPIFFS_PAGE_FOR_BLOCK(fs, bix) + i);
    }
  }
#endif
  return res;
}
 808051c:	4628      	mov	r0, r5
 808051e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      spiffs_cache_drop_page(fs, SPIFFS_PAGE_FOR_BLOCK(fs, bix) + i);
 8080520:	fb03 6307 	mla	r3, r3, r7, r6
 8080524:	4620      	mov	r0, r4
 8080526:	b299      	uxth	r1, r3
 8080528:	f7ff fe73 	bl	8080212 <spiffs_cache_drop_page>
    for (i = 0; i < SPIFFS_PAGES_PER_BLOCK(fs); i++) {
 808052c:	3601      	adds	r6, #1
 808052e:	e9d4 3106 	ldrd	r3, r1, [r4, #24]
 8080532:	fbb3 f3f1 	udiv	r3, r3, r1
 8080536:	42b3      	cmp	r3, r6
 8080538:	d8f2      	bhi.n	8080520 <spiffs_gc_erase_block+0x1c>
 808053a:	e7ef      	b.n	808051c <spiffs_gc_erase_block+0x18>
 808053c:	2600      	movs	r6, #0
 808053e:	e7f6      	b.n	808052e <spiffs_gc_erase_block+0x2a>
 8080540:	08092188 	.word	0x08092188

08080544 <spiffs_gc_quick>:

// Searches for blocks where all entries are deleted - if one is found,
// the block is erased. Compared to the non-quick gc, the quick one ensures
// that no updates are needed on existing objects on pages that are erased.
s32_t spiffs_gc_quick(
    spiffs *fs, u16_t max_free_pages) {
 8080544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SPIFFS_GC_DBG("gc_quick: running\n");
#if SPIFFS_GC_STATS
  fs->stats_gc_runs++;
#endif

  int entries_per_page = (SPIFFS_CFG_LOG_PAGE_SZ(fs) / sizeof(spiffs_obj_id));
 8080548:	f04f 0800 	mov.w	r8, #0
    spiffs *fs, u16_t max_free_pages) {
 808054c:	4604      	mov	r4, r0
  u32_t cur_block_addr = 0;
 808054e:	46c1      	mov	r9, r8
  u32_t blocks = fs->block_count;
 8080550:	6a03      	ldr	r3, [r0, #32]
    spiffs *fs, u16_t max_free_pages) {
 8080552:	b089      	sub	sp, #36	; 0x24
  u32_t blocks = fs->block_count;
 8080554:	9304      	str	r3, [sp, #16]
  spiffs_obj_id *obj_lu_buf = (spiffs_obj_id *)fs->lu_work;
 8080556:	6b43      	ldr	r3, [r0, #52]	; 0x34
  SPIFFS_GC_DBG("gc_quick: running\n");
 8080558:	484c      	ldr	r0, [pc, #304]	; (808068c <spiffs_gc_quick+0x148>)
  spiffs_obj_id *obj_lu_buf = (spiffs_obj_id *)fs->lu_work;
 808055a:	9305      	str	r3, [sp, #20]
    spiffs *fs, u16_t max_free_pages) {
 808055c:	9103      	str	r1, [sp, #12]
  SPIFFS_GC_DBG("gc_quick: running\n");
 808055e:	f00c faf3 	bl	808cb48 <spiffsParticleTraceLog>
  fs->stats_gc_runs++;
 8080562:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8080564:	3301      	adds	r3, #1
 8080566:	65a3      	str	r3, [r4, #88]	; 0x58
  int entries_per_page = (SPIFFS_CFG_LOG_PAGE_SZ(fs) / sizeof(spiffs_obj_id));
 8080568:	69e3      	ldr	r3, [r4, #28]
 808056a:	085b      	lsrs	r3, r3, #1
 808056c:	9302      	str	r3, [sp, #8]

  // find fully deleted blocks
  // check each block
  while (res == SPIFFS_OK && blocks--) {
 808056e:	fa1f f388 	uxth.w	r3, r8
 8080572:	9307      	str	r3, [sp, #28]
 8080574:	9b04      	ldr	r3, [sp, #16]
 8080576:	4598      	cmp	r8, r3
 8080578:	d14e      	bne.n	8080618 <spiffs_gc_quick+0xd4>
    cur_block++;
    cur_block_addr += SPIFFS_CFG_LOG_BLOCK_SZ(fs);
  } // per block

  if (res == SPIFFS_OK) {
    res = SPIFFS_ERR_NO_DELETED_BLOCKS;
 808057a:	4845      	ldr	r0, [pc, #276]	; (8080690 <spiffs_gc_quick+0x14c>)
 808057c:	e082      	b.n	8080684 <spiffs_gc_quick+0x140>
      int entry_offset = obj_lookup_page * entries_per_page;
 808057e:	9b02      	ldr	r3, [sp, #8]
      res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ,
 8080580:	6b61      	ldr	r1, [r4, #52]	; 0x34
      int entry_offset = obj_lookup_page * entries_per_page;
 8080582:	fb05 fb03 	mul.w	fp, r5, r3
      res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ,
 8080586:	6923      	ldr	r3, [r4, #16]
 8080588:	e9cd 2100 	strd	r2, r1, [sp]
 808058c:	444b      	add	r3, r9
 808058e:	fb02 3305 	mla	r3, r2, r5, r3
 8080592:	2114      	movs	r1, #20
 8080594:	2200      	movs	r2, #0
 8080596:	4620      	mov	r0, r4
 8080598:	f7ff fe48 	bl	808022c <spiffs_phys_rd>
      while (res == SPIFFS_OK &&
 808059c:	69a3      	ldr	r3, [r4, #24]
 808059e:	ebaa 0c0b 	sub.w	ip, sl, fp
 80805a2:	9306      	str	r3, [sp, #24]
 80805a4:	eb0b 0a0c 	add.w	sl, fp, ip
 80805a8:	bb50      	cbnz	r0, 8080600 <spiffs_gc_quick+0xbc>
 80805aa:	9b02      	ldr	r3, [sp, #8]
 80805ac:	459c      	cmp	ip, r3
 80805ae:	da27      	bge.n	8080600 <spiffs_gc_quick+0xbc>
          cur_entry < (int)(SPIFFS_PAGES_PER_BLOCK(fs)-SPIFFS_OBJ_LOOKUP_PAGES(fs))) {
 80805b0:	69e3      	ldr	r3, [r4, #28]
 80805b2:	9a06      	ldr	r2, [sp, #24]
 80805b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80805b8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80805bc:	ea4f 0142 	mov.w	r1, r2, lsl #1
 80805c0:	bf94      	ite	ls
 80805c2:	fbb1 fef3 	udivls	lr, r1, r3
 80805c6:	f04f 0e01 	movhi.w	lr, #1
 80805ca:	eba2 020e 	sub.w	r2, r2, lr
          cur_entry - entry_offset < entries_per_page &&
 80805ce:	4552      	cmp	r2, sl
 80805d0:	dd16      	ble.n	8080600 <spiffs_gc_quick+0xbc>
        spiffs_obj_id obj_id = obj_lu_buf[cur_entry-entry_offset];
 80805d2:	9a05      	ldr	r2, [sp, #20]
 80805d4:	f832 201c 	ldrh.w	r2, [r2, ip, lsl #1]
        if (obj_id == SPIFFS_OBJ_ID_DELETED) {
 80805d8:	b922      	cbnz	r2, 80805e4 <spiffs_gc_quick+0xa0>
          deleted_pages_in_block++;
 80805da:	3701      	adds	r7, #1
 80805dc:	b2bf      	uxth	r7, r7
        cur_entry++;
 80805de:	f10c 0c01 	add.w	ip, ip, #1
 80805e2:	e7df      	b.n	80805a4 <spiffs_gc_quick+0x60>
        } else if (obj_id == SPIFFS_OBJ_ID_FREE) {
 80805e4:	f64f 7eff 	movw	lr, #65535	; 0xffff
 80805e8:	4572      	cmp	r2, lr
 80805ea:	d10e      	bne.n	808060a <spiffs_gc_quick+0xc6>
          if (free_pages_in_block > max_free_pages) {
 80805ec:	9a03      	ldr	r2, [sp, #12]
          free_pages_in_block++;
 80805ee:	3601      	adds	r6, #1
 80805f0:	b2b6      	uxth	r6, r6
          if (free_pages_in_block > max_free_pages) {
 80805f2:	4296      	cmp	r6, r2
 80805f4:	d9f3      	bls.n	80805de <spiffs_gc_quick+0x9a>
            obj_lookup_page = SPIFFS_OBJ_LOOKUP_PAGES(fs);
 80805f6:	428b      	cmp	r3, r1
 80805f8:	d80c      	bhi.n	8080614 <spiffs_gc_quick+0xd0>
          obj_lookup_page = SPIFFS_OBJ_LOOKUP_PAGES(fs);
 80805fa:	fbb1 f5f3 	udiv	r5, r1, r3
          res = 1; // kill object lu loop
 80805fe:	2001      	movs	r0, #1
      obj_lookup_page++;
 8080600:	3501      	adds	r5, #1
    while (res == SPIFFS_OK && obj_lookup_page < (int)SPIFFS_OBJ_LOOKUP_PAGES(fs)) {
 8080602:	b168      	cbz	r0, 8080620 <spiffs_gc_quick+0xdc>
    if (res == 1) res = SPIFFS_OK;
 8080604:	2801      	cmp	r0, #1
 8080606:	d018      	beq.n	808063a <spiffs_gc_quick+0xf6>
 8080608:	e035      	b.n	8080676 <spiffs_gc_quick+0x132>
          obj_lookup_page = SPIFFS_OBJ_LOOKUP_PAGES(fs);
 808060a:	428b      	cmp	r3, r1
 808060c:	d9f5      	bls.n	80805fa <spiffs_gc_quick+0xb6>
 808060e:	2501      	movs	r5, #1
          res = 1; // kill object lu loop
 8080610:	4628      	mov	r0, r5
 8080612:	e7f5      	b.n	8080600 <spiffs_gc_quick+0xbc>
            obj_lookup_page = SPIFFS_OBJ_LOOKUP_PAGES(fs);
 8080614:	2501      	movs	r5, #1
 8080616:	e7f2      	b.n	80805fe <spiffs_gc_quick+0xba>
    int obj_lookup_page = 0;
 8080618:	2500      	movs	r5, #0
    u16_t free_pages_in_block = 0;
 808061a:	462e      	mov	r6, r5
    u16_t deleted_pages_in_block = 0;
 808061c:	462f      	mov	r7, r5
 808061e:	46aa      	mov	sl, r5
    while (res == SPIFFS_OK && obj_lookup_page < (int)SPIFFS_OBJ_LOOKUP_PAGES(fs)) {
 8080620:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8080624:	fbb1 f1f2 	udiv	r1, r1, r2
 8080628:	004b      	lsls	r3, r1, #1
 808062a:	ebb2 0f41 	cmp.w	r2, r1, lsl #1
 808062e:	bf94      	ite	ls
 8080630:	fbb3 f3f2 	udivls	r3, r3, r2
 8080634:	2301      	movhi	r3, #1
 8080636:	42ab      	cmp	r3, r5
 8080638:	dca1      	bgt.n	808057e <spiffs_gc_quick+0x3a>
        deleted_pages_in_block + free_pages_in_block == SPIFFS_PAGES_PER_BLOCK(fs)-SPIFFS_OBJ_LOOKUP_PAGES(fs) &&
 808063a:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 808063e:	fbb3 f3f0 	udiv	r3, r3, r0
 8080642:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 8080646:	ea4f 0243 	mov.w	r2, r3, lsl #1
 808064a:	bf94      	ite	ls
 808064c:	fbb2 f2f0 	udivls	r2, r2, r0
 8080650:	2201      	movhi	r2, #1
 8080652:	19b9      	adds	r1, r7, r6
 8080654:	1a9b      	subs	r3, r3, r2
    if (res == SPIFFS_OK &&
 8080656:	4299      	cmp	r1, r3
 8080658:	d10c      	bne.n	8080674 <spiffs_gc_quick+0x130>
        deleted_pages_in_block + free_pages_in_block == SPIFFS_PAGES_PER_BLOCK(fs)-SPIFFS_OBJ_LOOKUP_PAGES(fs) &&
 808065a:	9b03      	ldr	r3, [sp, #12]
 808065c:	42b3      	cmp	r3, r6
 808065e:	d309      	bcc.n	8080674 <spiffs_gc_quick+0x130>
      res = spiffs_gc_erase_block(fs, cur_block);
 8080660:	4620      	mov	r0, r4
      fs->stats_p_deleted -= deleted_pages_in_block;
 8080662:	6d23      	ldr	r3, [r4, #80]	; 0x50
      res = spiffs_gc_erase_block(fs, cur_block);
 8080664:	9907      	ldr	r1, [sp, #28]
      fs->stats_p_deleted -= deleted_pages_in_block;
 8080666:	1bdf      	subs	r7, r3, r7
 8080668:	6527      	str	r7, [r4, #80]	; 0x50
  }
  return res;
}
 808066a:	b009      	add	sp, #36	; 0x24
 808066c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      res = spiffs_gc_erase_block(fs, cur_block);
 8080670:	f7ff bf48 	b.w	8080504 <spiffs_gc_erase_block>
 8080674:	2000      	movs	r0, #0
    cur_block_addr += SPIFFS_CFG_LOG_BLOCK_SZ(fs);
 8080676:	69a3      	ldr	r3, [r4, #24]
 8080678:	f108 0801 	add.w	r8, r8, #1
 808067c:	4499      	add	r9, r3
  while (res == SPIFFS_OK && blocks--) {
 808067e:	2800      	cmp	r0, #0
 8080680:	f43f af75 	beq.w	808056e <spiffs_gc_quick+0x2a>
}
 8080684:	b009      	add	sp, #36	; 0x24
 8080686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808068a:	bf00      	nop
 808068c:	0809219e 	.word	0x0809219e
 8080690:	ffffd8d3 	.word	0xffffd8d3

08080694 <spiffs_gc_erase_page_stats>:
}

// Updates page statistics for a block that is about to be erased
s32_t spiffs_gc_erase_page_stats(
    spiffs *fs,
    spiffs_block_ix bix) {
 8080694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s32_t res = SPIFFS_OK;
  int obj_lookup_page = 0;
  int entries_per_page = (SPIFFS_CFG_LOG_PAGE_SZ(fs) / sizeof(spiffs_obj_id));
  spiffs_obj_id *obj_lu_buf = (spiffs_obj_id *)fs->lu_work;
 8080698:	2500      	movs	r5, #0
    spiffs_block_ix bix) {
 808069a:	4604      	mov	r4, r0
  int cur_entry = 0;
  u32_t dele = 0;
  u32_t allo = 0;
 808069c:	462f      	mov	r7, r5
  u32_t dele = 0;
 808069e:	462e      	mov	r6, r5
  int cur_entry = 0;
 80806a0:	46aa      	mov	sl, r5
  int obj_lookup_page = 0;
 80806a2:	46a8      	mov	r8, r5
        0, bix * SPIFFS_CFG_LOG_BLOCK_SZ(fs) + SPIFFS_PAGE_TO_PADDR(fs, obj_lookup_page), SPIFFS_CFG_LOG_PAGE_SZ(fs), fs->lu_work);
    // check each entry
    while (res == SPIFFS_OK &&
        cur_entry - entry_offset < entries_per_page && cur_entry < (int)(SPIFFS_PAGES_PER_BLOCK(fs)-SPIFFS_OBJ_LOOKUP_PAGES(fs))) {
      spiffs_obj_id obj_id = obj_lu_buf[cur_entry-entry_offset];
      if (obj_id == SPIFFS_OBJ_ID_FREE) {
 80806a4:	f64f 7bff 	movw	fp, #65535	; 0xffff
  int entries_per_page = (SPIFFS_CFG_LOG_PAGE_SZ(fs) / sizeof(spiffs_obj_id));
 80806a8:	69c3      	ldr	r3, [r0, #28]
    spiffs_block_ix bix) {
 80806aa:	b085      	sub	sp, #20
  int entries_per_page = (SPIFFS_CFG_LOG_PAGE_SZ(fs) / sizeof(spiffs_obj_id));
 80806ac:	ea4f 0953 	mov.w	r9, r3, lsr #1
  spiffs_obj_id *obj_lu_buf = (spiffs_obj_id *)fs->lu_work;
 80806b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    spiffs_block_ix bix) {
 80806b2:	9103      	str	r1, [sp, #12]
  spiffs_obj_id *obj_lu_buf = (spiffs_obj_id *)fs->lu_work;
 80806b4:	9302      	str	r3, [sp, #8]
  while (res == SPIFFS_OK && obj_lookup_page < (int)SPIFFS_OBJ_LOOKUP_PAGES(fs)) {
 80806b6:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 80806ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80806be:	0041      	lsls	r1, r0, #1
 80806c0:	ebb2 0f40 	cmp.w	r2, r0, lsl #1
 80806c4:	bf94      	ite	ls
 80806c6:	fbb1 f1f2 	udivls	r1, r1, r2
 80806ca:	2101      	movhi	r1, #1
 80806cc:	4541      	cmp	r1, r8
 80806ce:	dc01      	bgt.n	80806d4 <spiffs_gc_erase_page_stats+0x40>
 80806d0:	2300      	movs	r3, #0
 80806d2:	e018      	b.n	8080706 <spiffs_gc_erase_page_stats+0x72>
    res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ,
 80806d4:	6921      	ldr	r1, [r4, #16]
 80806d6:	9803      	ldr	r0, [sp, #12]
 80806d8:	fb03 1300 	mla	r3, r3, r0, r1
 80806dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80806de:	fb02 3308 	mla	r3, r2, r8, r3
 80806e2:	e9cd 2100 	strd	r2, r1, [sp]
 80806e6:	4620      	mov	r0, r4
 80806e8:	2114      	movs	r1, #20
 80806ea:	2200      	movs	r2, #0
 80806ec:	f7ff fd9e 	bl	808022c <spiffs_phys_rd>
 80806f0:	4603      	mov	r3, r0
    while (res == SPIFFS_OK &&
 80806f2:	ebaa 0105 	sub.w	r1, sl, r5
 80806f6:	eb01 0a05 	add.w	sl, r1, r5
 80806fa:	b1bb      	cbz	r3, 808072c <spiffs_gc_erase_page_stats+0x98>
      } else {
        allo++;
      }
      cur_entry++;
    } // per entry
    obj_lookup_page++;
 80806fc:	f108 0801 	add.w	r8, r8, #1
  while (res == SPIFFS_OK && obj_lookup_page < (int)SPIFFS_OBJ_LOOKUP_PAGES(fs)) {
 8080700:	444d      	add	r5, r9
 8080702:	2b00      	cmp	r3, #0
 8080704:	d0d7      	beq.n	80806b6 <spiffs_gc_erase_page_stats+0x22>
  } // per object lookup page
  SPIFFS_GC_DBG("gc_check: wipe pallo:"_SPIPRIi" pdele:"_SPIPRIi"\n", allo, dele);
 8080706:	4632      	mov	r2, r6
 8080708:	4639      	mov	r1, r7
 808070a:	4816      	ldr	r0, [pc, #88]	; (8080764 <spiffs_gc_erase_page_stats+0xd0>)
 808070c:	9302      	str	r3, [sp, #8]
 808070e:	f00c fa1b 	bl	808cb48 <spiffsParticleTraceLog>
  fs->stats_p_allocated -= allo;
  fs->stats_p_deleted -= dele;
  return res;
}
 8080712:	9b02      	ldr	r3, [sp, #8]
  fs->stats_p_allocated -= allo;
 8080714:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
}
 8080716:	4618      	mov	r0, r3
  fs->stats_p_allocated -= allo;
 8080718:	1bd7      	subs	r7, r2, r7
  fs->stats_p_deleted -= dele;
 808071a:	6d22      	ldr	r2, [r4, #80]	; 0x50
  fs->stats_p_allocated -= allo;
 808071c:	64e7      	str	r7, [r4, #76]	; 0x4c
  fs->stats_p_deleted -= dele;
 808071e:	1b96      	subs	r6, r2, r6
 8080720:	6526      	str	r6, [r4, #80]	; 0x50
}
 8080722:	b005      	add	sp, #20
 8080724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        allo++;
 8080728:	3701      	adds	r7, #1
 808072a:	e018      	b.n	808075e <spiffs_gc_erase_page_stats+0xca>
    while (res == SPIFFS_OK &&
 808072c:	4589      	cmp	r9, r1
 808072e:	dde5      	ble.n	80806fc <spiffs_gc_erase_page_stats+0x68>
        cur_entry - entry_offset < entries_per_page && cur_entry < (int)(SPIFFS_PAGES_PER_BLOCK(fs)-SPIFFS_OBJ_LOOKUP_PAGES(fs))) {
 8080730:	e9d4 2c06 	ldrd	r2, ip, [r4, #24]
 8080734:	fbb2 f2fc 	udiv	r2, r2, ip
 8080738:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 808073c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8080740:	bf94      	ite	ls
 8080742:	fbb0 f0fc 	udivls	r0, r0, ip
 8080746:	2001      	movhi	r0, #1
 8080748:	1a12      	subs	r2, r2, r0
 808074a:	4552      	cmp	r2, sl
 808074c:	ddd6      	ble.n	80806fc <spiffs_gc_erase_page_stats+0x68>
      spiffs_obj_id obj_id = obj_lu_buf[cur_entry-entry_offset];
 808074e:	9a02      	ldr	r2, [sp, #8]
 8080750:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
      if (obj_id == SPIFFS_OBJ_ID_FREE) {
 8080754:	455a      	cmp	r2, fp
 8080756:	d002      	beq.n	808075e <spiffs_gc_erase_page_stats+0xca>
      } else if (obj_id == SPIFFS_OBJ_ID_DELETED) {
 8080758:	2a00      	cmp	r2, #0
 808075a:	d1e5      	bne.n	8080728 <spiffs_gc_erase_page_stats+0x94>
        dele++;
 808075c:	3601      	adds	r6, #1
      cur_entry++;
 808075e:	3101      	adds	r1, #1
 8080760:	e7c9      	b.n	80806f6 <spiffs_gc_erase_page_stats+0x62>
 8080762:	bf00      	nop
 8080764:	080921b1 	.word	0x080921b1

08080768 <spiffs_gc_find_candidate>:
// Finds block candidates to erase
s32_t spiffs_gc_find_candidate(
    spiffs *fs,
    spiffs_block_ix **block_candidates,
    int *candidate_count,
    char fs_crammed) {
 8080768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808076c:	b091      	sub	sp, #68	; 0x44
 808076e:	9206      	str	r2, [sp, #24]
  u32_t cur_block_addr = 0;
  spiffs_obj_id *obj_lu_buf = (spiffs_obj_id *)fs->lu_work;
  int cur_entry = 0;

  // using fs->work area as sorted candidate memory, (spiffs_block_ix)cand_bix/(s32_t)score
  int max_candidates = MIN(fs->block_count, (SPIFFS_CFG_LOG_PAGE_SZ(fs)-8)/(sizeof(spiffs_block_ix) + sizeof(s32_t)));
 8080770:	2206      	movs	r2, #6
    char fs_crammed) {
 8080772:	461d      	mov	r5, r3
  u32_t blocks = fs->block_count;
 8080774:	6a03      	ldr	r3, [r0, #32]
  *candidate_count = 0;
 8080776:	2600      	movs	r6, #0
  u32_t blocks = fs->block_count;
 8080778:	9309      	str	r3, [sp, #36]	; 0x24
  spiffs_obj_id *obj_lu_buf = (spiffs_obj_id *)fs->lu_work;
 808077a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    char fs_crammed) {
 808077c:	4604      	mov	r4, r0
  spiffs_obj_id *obj_lu_buf = (spiffs_obj_id *)fs->lu_work;
 808077e:	930d      	str	r3, [sp, #52]	; 0x34
  int max_candidates = MIN(fs->block_count, (SPIFFS_CFG_LOG_PAGE_SZ(fs)-8)/(sizeof(spiffs_block_ix) + sizeof(s32_t)));
 8080780:	69c3      	ldr	r3, [r0, #28]
    char fs_crammed) {
 8080782:	460f      	mov	r7, r1
  int max_candidates = MIN(fs->block_count, (SPIFFS_CFG_LOG_PAGE_SZ(fs)-8)/(sizeof(spiffs_block_ix) + sizeof(s32_t)));
 8080784:	3b08      	subs	r3, #8
 8080786:	fbb3 f3f2 	udiv	r3, r3, r2
 808078a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  memset(fs->work, 0xff, SPIFFS_CFG_LOG_PAGE_SZ(fs));
 808078c:	21ff      	movs	r1, #255	; 0xff
  int max_candidates = MIN(fs->block_count, (SPIFFS_CFG_LOG_PAGE_SZ(fs)-8)/(sizeof(spiffs_block_ix) + sizeof(s32_t)));
 808078e:	429a      	cmp	r2, r3
 8080790:	bf28      	it	cs
 8080792:	461a      	movcs	r2, r3
 8080794:	4693      	mov	fp, r2
  *candidate_count = 0;
 8080796:	9b06      	ldr	r3, [sp, #24]
 8080798:	601e      	str	r6, [r3, #0]
  memset(fs->work, 0xff, SPIFFS_CFG_LOG_PAGE_SZ(fs));
 808079a:	69c2      	ldr	r2, [r0, #28]
 808079c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 808079e:	f011 fb91 	bl	8091ec4 <memset>

  // divide up work area into block indices and scores
  spiffs_block_ix *cand_blocks = (spiffs_block_ix *)fs->work;
 80807a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80807a4:	42b5      	cmp	r5, r6
 80807a6:	9303      	str	r3, [sp, #12]
  s32_t *cand_scores = (s32_t *)(fs->work + max_candidates * sizeof(spiffs_block_ix));
 80807a8:	eb03 034b 	add.w	r3, r3, fp, lsl #1
 80807ac:	9307      	str	r3, [sp, #28]

   // align cand_scores on s32_t boundary
  cand_scores = (s32_t*)(((intptr_t)cand_scores + sizeof(intptr_t) - 1) & ~(sizeof(intptr_t) - 1));
 80807ae:	f103 0303 	add.w	r3, r3, #3
 80807b2:	f023 0303 	bic.w	r3, r3, #3
 80807b6:	9302      	str	r3, [sp, #8]

  *block_candidates = cand_blocks;
 80807b8:	9b03      	ldr	r3, [sp, #12]
  u32_t cur_block_addr = 0;
 80807ba:	9604      	str	r6, [sp, #16]
  *block_candidates = cand_blocks;
 80807bc:	603b      	str	r3, [r7, #0]

  int entries_per_page = (SPIFFS_CFG_LOG_PAGE_SZ(fs) / sizeof(spiffs_obj_id));
 80807be:	69e3      	ldr	r3, [r4, #28]
 80807c0:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80807c4:	9308      	str	r3, [sp, #32]

  // check each block
  while (res == SPIFFS_OK && blocks--) {
 80807c6:	bf14      	ite	ne
 80807c8:	4633      	movne	r3, r6
 80807ca:	2332      	moveq	r3, #50	; 0x32
 80807cc:	930c      	str	r3, [sp, #48]	; 0x30
 80807ce:	9b02      	ldr	r3, [sp, #8]
 80807d0:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 80807d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80807d6:	b2b3      	uxth	r3, r6
 80807d8:	930a      	str	r3, [sp, #40]	; 0x28
 80807da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80807dc:	42b3      	cmp	r3, r6
 80807de:	d143      	bne.n	8080868 <spiffs_gc_find_candidate+0x100>
    cur_entry = 0;
    cur_block++;
    cur_block_addr += SPIFFS_CFG_LOG_BLOCK_SZ(fs);
  } // per block

  return res;
 80807e0:	2500      	movs	r5, #0
 80807e2:	e0ab      	b.n	808093c <spiffs_gc_find_candidate+0x1d4>
      res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ,
 80807e4:	9904      	ldr	r1, [sp, #16]
 80807e6:	4620      	mov	r0, r4
 80807e8:	440b      	add	r3, r1
 80807ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80807ec:	fb02 330a 	mla	r3, r2, sl, r3
 80807f0:	e9cd 2100 	strd	r2, r1, [sp]
 80807f4:	2200      	movs	r2, #0
 80807f6:	2114      	movs	r1, #20
 80807f8:	f7ff fd18 	bl	808022c <spiffs_phys_rd>
 80807fc:	9b05      	ldr	r3, [sp, #20]
 80807fe:	4605      	mov	r5, r0
      while (res == SPIFFS_OK &&
 8080800:	69a0      	ldr	r0, [r4, #24]
 8080802:	1bda      	subs	r2, r3, r7
 8080804:	18bb      	adds	r3, r7, r2
 8080806:	9305      	str	r3, [sp, #20]
 8080808:	b98d      	cbnz	r5, 808082e <spiffs_gc_find_candidate+0xc6>
 808080a:	9b08      	ldr	r3, [sp, #32]
 808080c:	4293      	cmp	r3, r2
 808080e:	dd0e      	ble.n	808082e <spiffs_gc_find_candidate+0xc6>
          cur_entry < (int)(SPIFFS_PAGES_PER_BLOCK(fs)-SPIFFS_OBJ_LOOKUP_PAGES(fs))) {
 8080810:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 8080814:	fbb0 f3fc 	udiv	r3, r0, ip
 8080818:	0059      	lsls	r1, r3, #1
 808081a:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
 808081e:	bf94      	ite	ls
 8080820:	fbb1 f1fc 	udivls	r1, r1, ip
 8080824:	2101      	movhi	r1, #1
 8080826:	1a5b      	subs	r3, r3, r1
          cur_entry - entry_offset < entries_per_page &&
 8080828:	9905      	ldr	r1, [sp, #20]
 808082a:	428b      	cmp	r3, r1
 808082c:	dc07      	bgt.n	808083e <spiffs_gc_find_candidate+0xd6>
      obj_lookup_page++;
 808082e:	9b08      	ldr	r3, [sp, #32]
 8080830:	f10a 0a01 	add.w	sl, sl, #1
    while (res == SPIFFS_OK && obj_lookup_page < (int)SPIFFS_OBJ_LOOKUP_PAGES(fs)) {
 8080834:	441f      	add	r7, r3
 8080836:	b1e5      	cbz	r5, 8080872 <spiffs_gc_find_candidate+0x10a>
    if (res == 1) res = SPIFFS_OK;
 8080838:	2d01      	cmp	r5, #1
 808083a:	d177      	bne.n	808092c <spiffs_gc_find_candidate+0x1c4>
 808083c:	e027      	b.n	808088e <spiffs_gc_find_candidate+0x126>
        if (obj_id == SPIFFS_OBJ_ID_FREE) {
 808083e:	f64f 71ff 	movw	r1, #65535	; 0xffff
        spiffs_obj_id obj_id = obj_lu_buf[cur_entry-entry_offset];
 8080842:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8080844:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        if (obj_id == SPIFFS_OBJ_ID_FREE) {
 8080848:	428b      	cmp	r3, r1
 808084a:	d00b      	beq.n	8080864 <spiffs_gc_find_candidate+0xfc>
        } else  if (obj_id == SPIFFS_OBJ_ID_DELETED) {
 808084c:	b92b      	cbnz	r3, 808085a <spiffs_gc_find_candidate+0xf2>
          deleted_pages_in_block++;
 808084e:	f108 0801 	add.w	r8, r8, #1
 8080852:	fa1f f888 	uxth.w	r8, r8
        cur_entry++;
 8080856:	3201      	adds	r2, #1
 8080858:	e7d4      	b.n	8080804 <spiffs_gc_find_candidate+0x9c>
          used_pages_in_block++;
 808085a:	f109 0901 	add.w	r9, r9, #1
 808085e:	fa1f f989 	uxth.w	r9, r9
 8080862:	e7f8      	b.n	8080856 <spiffs_gc_find_candidate+0xee>
          res = 1; // kill object lu loop
 8080864:	2501      	movs	r5, #1
 8080866:	e7e2      	b.n	808082e <spiffs_gc_find_candidate+0xc6>
 8080868:	2700      	movs	r7, #0
    int obj_lookup_page = 0;
 808086a:	46ba      	mov	sl, r7
    u16_t used_pages_in_block = 0;
 808086c:	46b9      	mov	r9, r7
    u16_t deleted_pages_in_block = 0;
 808086e:	46b8      	mov	r8, r7
 8080870:	9705      	str	r7, [sp, #20]
    while (res == SPIFFS_OK && obj_lookup_page < (int)SPIFFS_OBJ_LOOKUP_PAGES(fs)) {
 8080872:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 8080876:	fbb3 f3f2 	udiv	r3, r3, r2
 808087a:	0059      	lsls	r1, r3, #1
 808087c:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8080880:	bf94      	ite	ls
 8080882:	fbb1 f1f2 	udivls	r1, r1, r2
 8080886:	2101      	movhi	r1, #1
 8080888:	4551      	cmp	r1, sl
 808088a:	6923      	ldr	r3, [r4, #16]
 808088c:	dcaa      	bgt.n	80807e4 <spiffs_gc_find_candidate+0x7c>
      res = _spiffs_rd(fs, SPIFFS_OP_C_READ | SPIFFS_OP_T_OBJ_LU2, 0,
 808088e:	e9d4 5106 	ldrd	r5, r1, [r4, #24]
 8080892:	fbb5 f2f1 	udiv	r2, r5, r1
 8080896:	6920      	ldr	r0, [r4, #16]
 8080898:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 808089c:	ea4f 0342 	mov.w	r3, r2, lsl #1
 80808a0:	f1a0 0002 	sub.w	r0, r0, #2
 80808a4:	b2b2      	uxth	r2, r6
 80808a6:	fb05 0202 	mla	r2, r5, r2, r0
 80808aa:	f10d 003e 	add.w	r0, sp, #62	; 0x3e
 80808ae:	bf94      	ite	ls
 80808b0:	fbb3 f3f1 	udivls	r3, r3, r1
 80808b4:	2301      	movhi	r3, #1
 80808b6:	9001      	str	r0, [sp, #4]
 80808b8:	2002      	movs	r0, #2
 80808ba:	fb03 2301 	mla	r3, r3, r1, r2
 80808be:	9000      	str	r0, [sp, #0]
 80808c0:	2200      	movs	r2, #0
 80808c2:	2115      	movs	r1, #21
 80808c4:	4620      	mov	r0, r4
 80808c6:	f7ff fcb1 	bl	808022c <spiffs_phys_rd>
      SPIFFS_CHECK_RES(res);
 80808ca:	1e05      	subs	r5, r0, #0
 80808cc:	db36      	blt.n	808093c <spiffs_gc_find_candidate+0x1d4>
      if (fs->max_erase_count > erase_count) {
 80808ce:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80808d2:	f8b4 7056 	ldrh.w	r7, [r4, #86]	; 0x56
      s32_t score =
 80808d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      if (fs->max_erase_count > erase_count) {
 80808d8:	429f      	cmp	r7, r3
        erase_age = SPIFFS_OBJ_ID_FREE - (erase_count - fs->max_erase_count);
 80808da:	bf96      	itet	ls
 80808dc:	43db      	mvnls	r3, r3
        erase_age = fs->max_erase_count - erase_count;
 80808de:	1aff      	subhi	r7, r7, r3
        erase_age = SPIFFS_OBJ_ID_FREE - (erase_count - fs->max_erase_count);
 80808e0:	18ff      	addls	r7, r7, r3
          deleted_pages_in_block * SPIFFS_GC_HEUR_W_DELET +
 80808e2:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 80808e6:	eba3 0309 	sub.w	r3, r3, r9
        erase_age = SPIFFS_OBJ_ID_FREE - (erase_count - fs->max_erase_count);
 80808ea:	b2bf      	uxth	r7, r7
      s32_t score =
 80808ec:	fb02 3707 	mla	r7, r2, r7, r3
      SPIFFS_GC_DBG("gc_check: bix:"_SPIPRIbl" del:"_SPIPRIi" use:"_SPIPRIi" score:"_SPIPRIi"\n", cur_block, deleted_pages_in_block, used_pages_in_block, score);
 80808f0:	4822      	ldr	r0, [pc, #136]	; (808097c <spiffs_gc_find_candidate+0x214>)
 80808f2:	464b      	mov	r3, r9
 80808f4:	4642      	mov	r2, r8
 80808f6:	9700      	str	r7, [sp, #0]
 80808f8:	b2b1      	uxth	r1, r6
 80808fa:	f00c f925 	bl	808cb48 <spiffsParticleTraceLog>
      int cand_ix = 0;
 80808fe:	2300      	movs	r3, #0
 8080900:	9803      	ldr	r0, [sp, #12]
      while (cand_ix < max_candidates) {
 8080902:	455b      	cmp	r3, fp
 8080904:	da0d      	bge.n	8080922 <spiffs_gc_find_candidate+0x1ba>
        if (cand_blocks[cand_ix] == (spiffs_block_ix)-1) {
 8080906:	4601      	mov	r1, r0
 8080908:	f64f 7cff 	movw	ip, #65535	; 0xffff
 808090c:	9a02      	ldr	r2, [sp, #8]
 808090e:	3002      	adds	r0, #2
 8080910:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8080914:	880a      	ldrh	r2, [r1, #0]
 8080916:	4562      	cmp	r2, ip
 8080918:	d114      	bne.n	8080944 <spiffs_gc_find_candidate+0x1dc>
          cand_blocks[cand_ix] = cur_block;
 808091a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808091c:	800b      	strh	r3, [r1, #0]
          cand_scores[cand_ix] = score;
 808091e:	f8ce 7000 	str.w	r7, [lr]
      (*candidate_count)++;
 8080922:	9b06      	ldr	r3, [sp, #24]
 8080924:	9a06      	ldr	r2, [sp, #24]
 8080926:	681b      	ldr	r3, [r3, #0]
 8080928:	3301      	adds	r3, #1
 808092a:	6013      	str	r3, [r2, #0]
    cur_block_addr += SPIFFS_CFG_LOG_BLOCK_SZ(fs);
 808092c:	9a04      	ldr	r2, [sp, #16]
 808092e:	69a3      	ldr	r3, [r4, #24]
 8080930:	3601      	adds	r6, #1
 8080932:	441a      	add	r2, r3
 8080934:	9204      	str	r2, [sp, #16]
  while (res == SPIFFS_OK && blocks--) {
 8080936:	2d00      	cmp	r5, #0
 8080938:	f43f af4d 	beq.w	80807d6 <spiffs_gc_find_candidate+0x6e>
}
 808093c:	4628      	mov	r0, r5
 808093e:	b011      	add	sp, #68	; 0x44
 8080940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        } else if (cand_scores[cand_ix] < score) {
 8080944:	9a02      	ldr	r2, [sp, #8]
 8080946:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 808094a:	42ba      	cmp	r2, r7
 808094c:	da14      	bge.n	8080978 <spiffs_gc_find_candidate+0x210>
          while (reorder_cand_ix >= cand_ix) {
 808094e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8080952:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
          int reorder_cand_ix = max_candidates - 2;
 8080954:	f1ab 0a02 	sub.w	sl, fp, #2
          while (reorder_cand_ix >= cand_ix) {
 8080958:	4553      	cmp	r3, sl
 808095a:	f1a2 0804 	sub.w	r8, r2, #4
 808095e:	dcdc      	bgt.n	808091a <spiffs_gc_find_candidate+0x1b2>
            cand_blocks[reorder_cand_ix + 1] = cand_blocks[reorder_cand_ix];
 8080960:	f83c 9c04 	ldrh.w	r9, [ip, #-4]
            reorder_cand_ix--;
 8080964:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
            cand_blocks[reorder_cand_ix + 1] = cand_blocks[reorder_cand_ix];
 8080968:	f82c 9d02 	strh.w	r9, [ip, #-2]!
            cand_scores[reorder_cand_ix + 1] = cand_scores[reorder_cand_ix];
 808096c:	f852 0c08 	ldr.w	r0, [r2, #-8]
 8080970:	f842 0c04 	str.w	r0, [r2, #-4]
            reorder_cand_ix--;
 8080974:	4642      	mov	r2, r8
 8080976:	e7ef      	b.n	8080958 <spiffs_gc_find_candidate+0x1f0>
        cand_ix++;
 8080978:	3301      	adds	r3, #1
 808097a:	e7c2      	b.n	8080902 <spiffs_gc_find_candidate+0x19a>
 808097c:	080921d3 	.word	0x080921d3

08080980 <spiffs_gc_clean>:
//     when reached end of lookup, store updated object index
//   pop object scan lookup entry index
//   repeat loop until end of object lookup
//   scan object lookup again for remaining object index pages, move to new page in other block
//
s32_t spiffs_gc_clean(spiffs *fs, spiffs_block_ix bix) {
 8080980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s32_t res = SPIFFS_OK;
  const int entries_per_page = (SPIFFS_CFG_LOG_PAGE_SZ(fs) / sizeof(spiffs_obj_id));
 8080984:	69c3      	ldr	r3, [r0, #28]
s32_t spiffs_gc_clean(spiffs *fs, spiffs_block_ix bix) {
 8080986:	b095      	sub	sp, #84	; 0x54
  const int entries_per_page = (SPIFFS_CFG_LOG_PAGE_SZ(fs) / sizeof(spiffs_obj_id));
 8080988:	085b      	lsrs	r3, r3, #1
 808098a:	9308      	str	r3, [sp, #32]
  // this is the global localizer being pushed and popped
  int cur_entry = 0;
  spiffs_obj_id *obj_lu_buf = (spiffs_obj_id *)fs->lu_work;
 808098c:	6b43      	ldr	r3, [r0, #52]	; 0x34
s32_t spiffs_gc_clean(spiffs *fs, spiffs_block_ix bix) {
 808098e:	4605      	mov	r5, r0
  spiffs_obj_id *obj_lu_buf = (spiffs_obj_id *)fs->lu_work;
 8080990:	930b      	str	r3, [sp, #44]	; 0x2c
  spiffs_gc gc; // our stack frame/state
  spiffs_page_ix cur_pix = 0;
  spiffs_page_object_ix_header *objix_hdr = (spiffs_page_object_ix_header *)fs->work;
 8080992:	6b83      	ldr	r3, [r0, #56]	; 0x38
  spiffs_page_object_ix *objix = (spiffs_page_object_ix *)fs->work;

  SPIFFS_GC_DBG("gc_clean: cleaning block "_SPIPRIbl"\n", bix);
 8080994:	48bf      	ldr	r0, [pc, #764]	; (8080c94 <spiffs_gc_clean+0x314>)
  spiffs_page_object_ix_header *objix_hdr = (spiffs_page_object_ix_header *)fs->work;
 8080996:	9306      	str	r3, [sp, #24]
s32_t spiffs_gc_clean(spiffs *fs, spiffs_block_ix bix) {
 8080998:	9107      	str	r1, [sp, #28]
  SPIFFS_GC_DBG("gc_clean: cleaning block "_SPIPRIbl"\n", bix);
 808099a:	f00c f8d5 	bl	808cb48 <spiffsParticleTraceLog>

  memset(&gc, 0, sizeof(spiffs_gc));
 808099e:	2214      	movs	r2, #20
 80809a0:	2100      	movs	r1, #0
 80809a2:	a80f      	add	r0, sp, #60	; 0x3c
 80809a4:	f011 fa8e 	bl	8091ec4 <memset>
  gc.state = FIND_OBJ_DATA;
 80809a8:	2200      	movs	r2, #0

  if (fs->free_cursor_block_ix == bix) {
 80809aa:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 80809ac:	9907      	ldr	r1, [sp, #28]
  gc.state = FIND_OBJ_DATA;
 80809ae:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
  if (fs->free_cursor_block_ix == bix) {
 80809b2:	428b      	cmp	r3, r1
 80809b4:	d10c      	bne.n	80809d0 <spiffs_gc_clean+0x50>
    // move free cursor to next block, cannot use free pages from the block we want to clean
    fs->free_cursor_block_ix = (bix+1)%fs->block_count;
 80809b6:	6a28      	ldr	r0, [r5, #32]
 80809b8:	3101      	adds	r1, #1
 80809ba:	460b      	mov	r3, r1
 80809bc:	fbb1 f1f0 	udiv	r1, r1, r0
 80809c0:	fb00 3111 	mls	r1, r0, r1, r3
    fs->free_cursor_obj_lu_entry = 0;
 80809c4:	62aa      	str	r2, [r5, #40]	; 0x28
    fs->free_cursor_block_ix = (bix+1)%fs->block_count;
 80809c6:	84a9      	strh	r1, [r5, #36]	; 0x24
    SPIFFS_GC_DBG("gc_clean: move free cursor to block "_SPIPRIbl"\n", fs->free_cursor_block_ix);
 80809c8:	48b3      	ldr	r0, [pc, #716]	; (8080c98 <spiffs_gc_clean+0x318>)
 80809ca:	b289      	uxth	r1, r1
 80809cc:	f00c f8bc 	bl	808cb48 <spiffsParticleTraceLog>
      obj_lookup_page++; // no need to check scan variable here, obj_lookup_page is set in start of loop
    } // per object lookup page
    if (res != SPIFFS_OK) break;

    // state finalization and switch
    switch (gc.state) {
 80809d0:	f04f 0800 	mov.w	r8, #0
 80809d4:	4646      	mov	r6, r8
 80809d6:	e082      	b.n	8080ade <spiffs_gc_clean+0x15e>
    SPIFFS_GC_DBG("gc_clean: state = "_SPIPRIi" entry:"_SPIPRIi"\n", gc.state, cur_entry);
 80809d8:	4632      	mov	r2, r6
 80809da:	4649      	mov	r1, r9
 80809dc:	48af      	ldr	r0, [pc, #700]	; (8080c9c <spiffs_gc_clean+0x31c>)
 80809de:	f00c f8b3 	bl	808cb48 <spiffsParticleTraceLog>
    gc.obj_id_found = 0; // reset (to no found data page)
 80809e2:	2300      	movs	r3, #0
 80809e4:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
    int obj_lookup_page = cur_entry / entries_per_page;
 80809e8:	9b08      	ldr	r3, [sp, #32]
 80809ea:	fb96 fbf3 	sdiv	fp, r6, r3
    while (scan && res == SPIFFS_OK && obj_lookup_page < (int)SPIFFS_OBJ_LOOKUP_PAGES(fs)) {
 80809ee:	fb0b f303 	mul.w	r3, fp, r3
 80809f2:	930a      	str	r3, [sp, #40]	; 0x28
 80809f4:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
 80809f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80809fc:	0041      	lsls	r1, r0, #1
 80809fe:	ebb2 0f40 	cmp.w	r2, r0, lsl #1
 8080a02:	bf94      	ite	ls
 8080a04:	fbb1 f1f2 	udivls	r1, r1, r2
 8080a08:	2101      	movhi	r1, #1
 8080a0a:	458b      	cmp	fp, r1
 8080a0c:	db6f      	blt.n	8080aee <spiffs_gc_clean+0x16e>
    switch (gc.state) {
 8080a0e:	f1b9 0f01 	cmp.w	r9, #1
 8080a12:	f000 825c 	beq.w	8080ece <spiffs_gc_clean+0x54e>
 8080a16:	f1b9 0f02 	cmp.w	r9, #2
 8080a1a:	f000 829f 	beq.w	8080f5c <spiffs_gc_clean+0x5dc>
 8080a1e:	f1b9 0f00 	cmp.w	r9, #0
 8080a22:	f040 8251 	bne.w	8080ec8 <spiffs_gc_clean+0x548>
    case FIND_OBJ_DATA:
      if (gc.obj_id_found) {
 8080a26:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8080a2a:	2b00      	cmp	r3, #0
 8080a2c:	f000 8249 	beq.w	8080ec2 <spiffs_gc_clean+0x542>
        // find out corresponding obj ix page and load it to memory
        spiffs_page_header p_hdr;
        spiffs_page_ix objix_pix;
        gc.stored_scan_entry_index = cur_entry; // push cursor
        cur_entry = 0; // restart scan from start
        gc.state = MOVE_OBJ_DATA;
 8080a30:	2301      	movs	r3, #1
        res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
 8080a32:	a90d      	add	r1, sp, #52	; 0x34
 8080a34:	9101      	str	r1, [sp, #4]
 8080a36:	2105      	movs	r1, #5
 8080a38:	69ea      	ldr	r2, [r5, #28]
        gc.state = MOVE_OBJ_DATA;
 8080a3a:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
        res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
 8080a3e:	692b      	ldr	r3, [r5, #16]
 8080a40:	9100      	str	r1, [sp, #0]
 8080a42:	fb02 3308 	mla	r3, r2, r8, r3
 8080a46:	2115      	movs	r1, #21
 8080a48:	464a      	mov	r2, r9
 8080a4a:	4628      	mov	r0, r5
        gc.stored_scan_entry_index = cur_entry; // push cursor
 8080a4c:	9612      	str	r6, [sp, #72]	; 0x48
        res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
 8080a4e:	f7ff fbed 	bl	808022c <spiffs_phys_rd>
            0, SPIFFS_PAGE_TO_PADDR(fs, cur_pix), sizeof(spiffs_page_header), (u8_t*)&p_hdr);
        SPIFFS_CHECK_RES(res);
 8080a52:	1e04      	subs	r4, r0, #0
 8080a54:	f2c0 8119 	blt.w	8080c8a <spiffs_gc_clean+0x30a>
        gc.cur_objix_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, p_hdr.span_ix);
 8080a58:	69ea      	ldr	r2, [r5, #28]
 8080a5a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8080a5e:	f1a2 012d 	sub.w	r1, r2, #45	; 0x2d
 8080a62:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8080a66:	ea4f 0051 	mov.w	r0, r1, lsr #1
 8080a6a:	d309      	bcc.n	8080a80 <spiffs_gc_clean+0x100>
 8080a6c:	3a08      	subs	r2, #8
 8080a6e:	eba3 0900 	sub.w	r9, r3, r0
 8080a72:	0853      	lsrs	r3, r2, #1
 8080a74:	fbb9 f9f3 	udiv	r9, r9, r3
 8080a78:	f109 0901 	add.w	r9, r9, #1
 8080a7c:	fa1f f989 	uxth.w	r9, r9
        SPIFFS_GC_DBG("gc_clean: FIND_DATA find objix span_ix:"_SPIPRIsp"\n", gc.cur_objix_spix);
 8080a80:	4649      	mov	r1, r9
 8080a82:	4887      	ldr	r0, [pc, #540]	; (8080ca0 <spiffs_gc_clean+0x320>)
        gc.cur_objix_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, p_hdr.span_ix);
 8080a84:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
        SPIFFS_GC_DBG("gc_clean: FIND_DATA find objix span_ix:"_SPIPRIsp"\n", gc.cur_objix_spix);
 8080a88:	f00c f85e 	bl	808cb48 <spiffsParticleTraceLog>
        res = spiffs_obj_lu_find_id_and_span(fs, gc.cur_obj_id | SPIFFS_OBJ_ID_IX_FLAG, gc.cur_objix_spix, 0, &objix_pix);
 8080a8c:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
 8080a90:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8080a94:	9300      	str	r3, [sp, #0]
 8080a96:	464a      	mov	r2, r9
 8080a98:	2300      	movs	r3, #0
 8080a9a:	4628      	mov	r0, r5
 8080a9c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8080aa0:	f001 fe26 	bl	80826f0 <spiffs_obj_lu_find_id_and_span>
        if (res == SPIFFS_ERR_NOT_FOUND) {
 8080aa4:	4b7f      	ldr	r3, [pc, #508]	; (8080ca4 <spiffs_gc_clean+0x324>)
        res = spiffs_obj_lu_find_id_and_span(fs, gc.cur_obj_id | SPIFFS_OBJ_ID_IX_FLAG, gc.cur_objix_spix, 0, &objix_pix);
 8080aa6:	4604      	mov	r4, r0
        if (res == SPIFFS_ERR_NOT_FOUND) {
 8080aa8:	4298      	cmp	r0, r3
 8080aaa:	f040 81d4 	bne.w	8080e56 <spiffs_gc_clean+0x4d6>
          // on borked systems we might get an ERR_NOT_FOUND here -
          // this is handled by simply deleting the page as it is not referenced
          // from anywhere
          SPIFFS_GC_DBG("gc_clean: FIND_OBJ_DATA objix not found! Wipe page "_SPIPRIpg"\n", gc.cur_data_pix);
 8080aae:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8080ab2:	487d      	ldr	r0, [pc, #500]	; (8080ca8 <spiffs_gc_clean+0x328>)
 8080ab4:	4621      	mov	r1, r4
 8080ab6:	f00c f847 	bl	808cb48 <spiffsParticleTraceLog>
          res = spiffs_page_delete(fs, gc.cur_data_pix);
 8080aba:	4621      	mov	r1, r4
 8080abc:	4628      	mov	r0, r5
 8080abe:	f001 ff17 	bl	80828f0 <spiffs_page_delete>
          SPIFFS_CHECK_RES(res);
 8080ac2:	1e04      	subs	r4, r0, #0
 8080ac4:	f2c0 80e1 	blt.w	8080c8a <spiffs_gc_clean+0x30a>
          // then we restore states and continue scanning for data pages
          cur_entry = gc.stored_scan_entry_index; // pop cursor
          gc.state = FIND_OBJ_DATA;
 8080ac8:	2300      	movs	r3, #0
 8080aca:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
      break;
    default:
      cur_entry = 0;
      break;
    } // switch gc.state
    SPIFFS_GC_DBG("gc_clean: state-> "_SPIPRIi"\n", gc.state);
 8080ace:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8080ad2:	4876      	ldr	r0, [pc, #472]	; (8080cac <spiffs_gc_clean+0x32c>)
 8080ad4:	f00c f838 	bl	808cb48 <spiffsParticleTraceLog>
  while (res == SPIFFS_OK && gc.state != FINISHED) {
 8080ad8:	2c00      	cmp	r4, #0
 8080ada:	f040 80d6 	bne.w	8080c8a <spiffs_gc_clean+0x30a>
 8080ade:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 8080ae2:	f1b9 0f03 	cmp.w	r9, #3
 8080ae6:	f47f af77 	bne.w	80809d8 <spiffs_gc_clean+0x58>
 8080aea:	2400      	movs	r4, #0
 8080aec:	e0cd      	b.n	8080c8a <spiffs_gc_clean+0x30a>
      res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ,
 8080aee:	6929      	ldr	r1, [r5, #16]
 8080af0:	9807      	ldr	r0, [sp, #28]
 8080af2:	fb03 1300 	mla	r3, r3, r0, r1
 8080af6:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8080af8:	fb0b 3302 	mla	r3, fp, r2, r3
 8080afc:	e9cd 2100 	strd	r2, r1, [sp]
 8080b00:	4628      	mov	r0, r5
 8080b02:	2200      	movs	r2, #0
 8080b04:	2114      	movs	r1, #20
 8080b06:	f7ff fb91 	bl	808022c <spiffs_phys_rd>
 8080b0a:	4604      	mov	r4, r0
      while (scan && res == SPIFFS_OK &&
 8080b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8080b0e:	1af3      	subs	r3, r6, r3
 8080b10:	9309      	str	r3, [sp, #36]	; 0x24
 8080b12:	b994      	cbnz	r4, 8080b3a <spiffs_gc_clean+0x1ba>
 8080b14:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8080b18:	4293      	cmp	r3, r2
 8080b1a:	da0e      	bge.n	8080b3a <spiffs_gc_clean+0x1ba>
          cur_entry - entry_offset < entries_per_page && cur_entry < (int)(SPIFFS_PAGES_PER_BLOCK(fs)-SPIFFS_OBJ_LOOKUP_PAGES(fs))) {
 8080b1c:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
 8080b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8080b24:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8080b28:	ea4f 0142 	mov.w	r1, r2, lsl #1
 8080b2c:	bf94      	ite	ls
 8080b2e:	fbb1 f0f3 	udivls	r0, r1, r3
 8080b32:	2001      	movhi	r0, #1
 8080b34:	1a10      	subs	r0, r2, r0
 8080b36:	42b0      	cmp	r0, r6
 8080b38:	dc01      	bgt.n	8080b3e <spiffs_gc_clean+0x1be>
 8080b3a:	2301      	movs	r3, #1
 8080b3c:	e034      	b.n	8080ba8 <spiffs_gc_clean+0x228>
        cur_pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, cur_entry);
 8080b3e:	428b      	cmp	r3, r1
 8080b40:	bf94      	ite	ls
 8080b42:	fbb1 f1f3 	udivls	r1, r1, r3
 8080b46:	2101      	movhi	r1, #1
        spiffs_obj_id obj_id = obj_lu_buf[cur_entry-entry_offset];
 8080b48:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8080b4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
        cur_pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, cur_entry);
 8080b4c:	bf98      	it	ls
 8080b4e:	b289      	uxthls	r1, r1
        spiffs_obj_id obj_id = obj_lu_buf[cur_entry-entry_offset];
 8080b50:	f830 a017 	ldrh.w	sl, [r0, r7, lsl #1]
        cur_pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, cur_entry);
 8080b54:	9807      	ldr	r0, [sp, #28]
        switch (gc.state) {
 8080b56:	f1b9 0f01 	cmp.w	r9, #1
        cur_pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, cur_entry);
 8080b5a:	fb02 f200 	mul.w	r2, r2, r0
 8080b5e:	b292      	uxth	r2, r2
 8080b60:	4432      	add	r2, r6
 8080b62:	eb01 0802 	add.w	r8, r1, r2
 8080b66:	fa1f f888 	uxth.w	r8, r8
        switch (gc.state) {
 8080b6a:	d02a      	beq.n	8080bc2 <spiffs_gc_clean+0x242>
 8080b6c:	f1b9 0f02 	cmp.w	r9, #2
 8080b70:	f000 80ff 	beq.w	8080d72 <spiffs_gc_clean+0x3f2>
 8080b74:	f1b9 0f00 	cmp.w	r9, #0
 8080b78:	d10f      	bne.n	8080b9a <spiffs_gc_clean+0x21a>
          if (obj_id != SPIFFS_OBJ_ID_DELETED && obj_id != SPIFFS_OBJ_ID_FREE &&
 8080b7a:	fa0f f38a 	sxth.w	r3, sl
 8080b7e:	2b00      	cmp	r3, #0
 8080b80:	dd52      	ble.n	8080c28 <spiffs_gc_clean+0x2a8>
            SPIFFS_GC_DBG("gc_clean: FIND_DATA state:"_SPIPRIi" - found obj id "_SPIPRIid"\n", gc.state, obj_id);
 8080b82:	4652      	mov	r2, sl
 8080b84:	4649      	mov	r1, r9
 8080b86:	484a      	ldr	r0, [pc, #296]	; (8080cb0 <spiffs_gc_clean+0x330>)
 8080b88:	f00b ffde 	bl	808cb48 <spiffsParticleTraceLog>
            gc.obj_id_found = 1;
 8080b8c:	2301      	movs	r3, #1
            gc.cur_obj_id = obj_id;
 8080b8e:	f8ad a03e 	strh.w	sl, [sp, #62]	; 0x3e
            gc.obj_id_found = 1;
 8080b92:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
            gc.cur_data_pix = cur_pix;
 8080b96:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
        switch (gc.state) {
 8080b9a:	2300      	movs	r3, #0
        cur_entry++;
 8080b9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8080b9e:	3601      	adds	r6, #1
      while (scan && res == SPIFFS_OK &&
 8080ba0:	3201      	adds	r2, #1
 8080ba2:	9209      	str	r2, [sp, #36]	; 0x24
 8080ba4:	2b00      	cmp	r3, #0
 8080ba6:	d1b4      	bne.n	8080b12 <spiffs_gc_clean+0x192>
      obj_lookup_page++; // no need to check scan variable here, obj_lookup_page is set in start of loop
 8080ba8:	f10b 0b01 	add.w	fp, fp, #1
    while (scan && res == SPIFFS_OK && obj_lookup_page < (int)SPIFFS_OBJ_LOOKUP_PAGES(fs)) {
 8080bac:	2b00      	cmp	r3, #0
 8080bae:	f000 814e 	beq.w	8080e4e <spiffs_gc_clean+0x4ce>
 8080bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8080bb4:	9a08      	ldr	r2, [sp, #32]
 8080bb6:	4413      	add	r3, r2
 8080bb8:	930a      	str	r3, [sp, #40]	; 0x28
 8080bba:	2c00      	cmp	r4, #0
 8080bbc:	f43f af1a 	beq.w	80809f4 <spiffs_gc_clean+0x74>
 8080bc0:	e063      	b.n	8080c8a <spiffs_gc_clean+0x30a>
          if (obj_id == gc.cur_obj_id) {
 8080bc2:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8080bc6:	4552      	cmp	r2, sl
 8080bc8:	d12e      	bne.n	8080c28 <spiffs_gc_clean+0x2a8>
            res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
 8080bca:	a90d      	add	r1, sp, #52	; 0x34
 8080bcc:	9101      	str	r1, [sp, #4]
 8080bce:	2105      	movs	r1, #5
 8080bd0:	692a      	ldr	r2, [r5, #16]
 8080bd2:	9100      	str	r1, [sp, #0]
 8080bd4:	fb03 2308 	mla	r3, r3, r8, r2
 8080bd8:	2115      	movs	r1, #21
 8080bda:	2200      	movs	r2, #0
 8080bdc:	4628      	mov	r0, r5
 8080bde:	f7ff fb25 	bl	808022c <spiffs_phys_rd>
            SPIFFS_CHECK_RES(res);
 8080be2:	1e04      	subs	r4, r0, #0
 8080be4:	db51      	blt.n	8080c8a <spiffs_gc_clean+0x30a>
            SPIFFS_GC_DBG("gc_clean: MOVE_DATA found data page "_SPIPRIid":"_SPIPRIsp" @ "_SPIPRIpg"\n", gc.cur_obj_id, p_hdr.span_ix, cur_pix);
 8080be6:	4643      	mov	r3, r8
 8080be8:	4651      	mov	r1, sl
 8080bea:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8080bee:	4831      	ldr	r0, [pc, #196]	; (8080cb4 <spiffs_gc_clean+0x334>)
 8080bf0:	f00b ffaa 	bl	808cb48 <spiffsParticleTraceLog>
            if (SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, p_hdr.span_ix) != gc.cur_objix_spix) {
 8080bf4:	69e9      	ldr	r1, [r5, #28]
 8080bf6:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8080bfa:	f1a1 002d 	sub.w	r0, r1, #45	; 0x2d
 8080bfe:	ebb2 0f50 	cmp.w	r2, r0, lsr #1
 8080c02:	ea4f 0350 	mov.w	r3, r0, lsr #1
 8080c06:	bf21      	itttt	cs
 8080c08:	3908      	subcs	r1, #8
 8080c0a:	1ad3      	subcs	r3, r2, r3
 8080c0c:	0849      	lsrcs	r1, r1, #1
 8080c0e:	fbb3 f3f1 	udivcs	r3, r3, r1
 8080c12:	bf38      	it	cc
 8080c14:	2300      	movcc	r3, #0
 8080c16:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
 8080c1a:	bf28      	it	cs
 8080c1c:	3301      	addcs	r3, #1
 8080c1e:	429f      	cmp	r7, r3
 8080c20:	d004      	beq.n	8080c2c <spiffs_gc_clean+0x2ac>
              SPIFFS_GC_DBG("gc_clean: MOVE_DATA no objix spix match, take in another run\n");
 8080c22:	4825      	ldr	r0, [pc, #148]	; (8080cb8 <spiffs_gc_clean+0x338>)
 8080c24:	f00b ff90 	bl	808cb48 <spiffsParticleTraceLog>
          if (obj_id != SPIFFS_OBJ_ID_DELETED && obj_id != SPIFFS_OBJ_ID_FREE &&
 8080c28:	2301      	movs	r3, #1
 8080c2a:	e7b7      	b.n	8080b9c <spiffs_gc_clean+0x21c>
              if (p_hdr.flags & SPIFFS_PH_FLAG_DELET) {
 8080c2c:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
 8080c30:	2b00      	cmp	r3, #0
 8080c32:	da45      	bge.n	8080cc0 <spiffs_gc_clean+0x340>
                res = spiffs_page_move(fs, 0, 0, obj_id, &p_hdr, cur_pix, &new_data_pix);
 8080c34:	2200      	movs	r2, #0
 8080c36:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8080c3a:	e9cd 8301 	strd	r8, r3, [sp, #4]
 8080c3e:	ab0d      	add	r3, sp, #52	; 0x34
 8080c40:	4611      	mov	r1, r2
 8080c42:	9300      	str	r3, [sp, #0]
 8080c44:	4628      	mov	r0, r5
 8080c46:	4653      	mov	r3, sl
 8080c48:	f001 fe96 	bl	8082978 <spiffs_page_move>
 8080c4c:	4604      	mov	r4, r0
                SPIFFS_GC_DBG("gc_clean: MOVE_DATA move objix "_SPIPRIid":"_SPIPRIsp" page "_SPIPRIpg" to "_SPIPRIpg"\n", gc.cur_obj_id, p_hdr.span_ix, cur_pix, new_data_pix);
 8080c4e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8080c52:	4651      	mov	r1, sl
 8080c54:	9300      	str	r3, [sp, #0]
 8080c56:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8080c5a:	4643      	mov	r3, r8
 8080c5c:	4817      	ldr	r0, [pc, #92]	; (8080cbc <spiffs_gc_clean+0x33c>)
 8080c5e:	f00b ff73 	bl	808cb48 <spiffsParticleTraceLog>
                SPIFFS_CHECK_RES(res);
 8080c62:	2c00      	cmp	r4, #0
 8080c64:	db11      	blt.n	8080c8a <spiffs_gc_clean+0x30a>
                res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ,
 8080c66:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
 8080c6a:	6929      	ldr	r1, [r5, #16]
 8080c6c:	9807      	ldr	r0, [sp, #28]
 8080c6e:	fb02 1200 	mla	r2, r2, r0, r1
 8080c72:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8080c74:	4628      	mov	r0, r5
 8080c76:	e9cd 3100 	strd	r3, r1, [sp]
 8080c7a:	fb0b 2303 	mla	r3, fp, r3, r2
 8080c7e:	2114      	movs	r1, #20
 8080c80:	2200      	movs	r2, #0
 8080c82:	f7ff fad3 	bl	808022c <spiffs_phys_rd>
                SPIFFS_CHECK_RES(res);
 8080c86:	1e04      	subs	r4, r0, #0
 8080c88:	da29      	bge.n	8080cde <spiffs_gc_clean+0x35e>
  } // while state != FINISHED


  return res;
}
 8080c8a:	4620      	mov	r0, r4
 8080c8c:	b015      	add	sp, #84	; 0x54
 8080c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080c92:	bf00      	nop
 8080c94:	080921fe 	.word	0x080921fe
 8080c98:	0809221d 	.word	0x0809221d
 8080c9c:	08092247 	.word	0x08092247
 8080ca0:	08092472 	.word	0x08092472
 8080ca4:	ffffd8ee 	.word	0xffffd8ee
 8080ca8:	0809249f 	.word	0x0809249f
 8080cac:	08092585 	.word	0x08092585
 8080cb0:	08092266 	.word	0x08092266
 8080cb4:	08092298 	.word	0x08092298
 8080cb8:	080922ce 	.word	0x080922ce
 8080cbc:	0809230c 	.word	0x0809230c
                SPIFFS_GC_DBG("gc_clean: MOVE_DATA wipe objix "_SPIPRIid":"_SPIPRIsp" page "_SPIPRIpg"\n", obj_id, p_hdr.span_ix, cur_pix);
 8080cc0:	4643      	mov	r3, r8
 8080cc2:	4651      	mov	r1, sl
 8080cc4:	48a8      	ldr	r0, [pc, #672]	; (8080f68 <spiffs_gc_clean+0x5e8>)
 8080cc6:	f00b ff3f 	bl	808cb48 <spiffsParticleTraceLog>
                res = spiffs_page_delete(fs, cur_pix);
 8080cca:	4641      	mov	r1, r8
 8080ccc:	4628      	mov	r0, r5
 8080cce:	f001 fe0f 	bl	80828f0 <spiffs_page_delete>
                SPIFFS_CHECK_RES(res);
 8080cd2:	1e04      	subs	r4, r0, #0
 8080cd4:	dbd9      	blt.n	8080c8a <spiffs_gc_clean+0x30a>
                new_data_pix = SPIFFS_OBJ_ID_FREE;
 8080cd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8080cda:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
              if (gc.cur_objix_spix == 0) {
 8080cde:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8080ce2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8080ce6:	b9e7      	cbnz	r7, 8080d22 <spiffs_gc_clean+0x3a2>
                ((spiffs_page_ix*)((u8_t *)objix_hdr + sizeof(spiffs_page_object_ix_header)))[p_hdr.span_ix] = new_data_pix;
 8080ce8:	9a06      	ldr	r2, [sp, #24]
 8080cea:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8080cee:	f8a3 102d 	strh.w	r1, [r3, #45]	; 0x2d
                SPIFFS_GC_DBG("gc_clean: MOVE_DATA wrote page "_SPIPRIpg" to objix_hdr entry "_SPIPRIsp" in mem\n", new_data_pix, (spiffs_span_ix)SPIFFS_OBJ_IX_ENTRY(fs, p_hdr.span_ix));
 8080cf2:	69eb      	ldr	r3, [r5, #28]
 8080cf4:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8080cf8:	f1a3 002d 	sub.w	r0, r3, #45	; 0x2d
 8080cfc:	ebb2 0f50 	cmp.w	r2, r0, lsr #1
 8080d00:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8080d04:	ea4f 0750 	mov.w	r7, r0, lsr #1
 8080d08:	d307      	bcc.n	8080d1a <spiffs_gc_clean+0x39a>
 8080d0a:	3b08      	subs	r3, #8
 8080d0c:	1bd2      	subs	r2, r2, r7
 8080d0e:	085b      	lsrs	r3, r3, #1
 8080d10:	fbb2 f0f3 	udiv	r0, r2, r3
 8080d14:	fb03 2210 	mls	r2, r3, r0, r2
 8080d18:	b292      	uxth	r2, r2
 8080d1a:	4894      	ldr	r0, [pc, #592]	; (8080f6c <spiffs_gc_clean+0x5ec>)
                SPIFFS_GC_DBG("gc_clean: MOVE_DATA wrote page "_SPIPRIpg" to objix entry "_SPIPRIsp" in mem\n", new_data_pix, (spiffs_span_ix)SPIFFS_OBJ_IX_ENTRY(fs, p_hdr.span_ix));
 8080d1c:	f00b ff14 	bl	808cb48 <spiffsParticleTraceLog>
 8080d20:	e782      	b.n	8080c28 <spiffs_gc_clean+0x2a8>
                ((spiffs_page_ix*)((u8_t *)objix + sizeof(spiffs_page_object_ix)))[SPIFFS_OBJ_IX_ENTRY(fs, p_hdr.span_ix)] = new_data_pix;
 8080d22:	69e8      	ldr	r0, [r5, #28]
 8080d24:	f1a0 022d 	sub.w	r2, r0, #45	; 0x2d
 8080d28:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 8080d2c:	bf28      	it	cs
 8080d2e:	3808      	subcs	r0, #8
 8080d30:	ea4f 0752 	mov.w	r7, r2, lsr #1
 8080d34:	bf21      	itttt	cs
 8080d36:	1bdb      	subcs	r3, r3, r7
 8080d38:	0840      	lsrcs	r0, r0, #1
 8080d3a:	fbb3 f2f0 	udivcs	r2, r3, r0
 8080d3e:	fb00 3312 	mlscs	r3, r0, r2, r3
 8080d42:	9a06      	ldr	r2, [sp, #24]
 8080d44:	3304      	adds	r3, #4
 8080d46:	005b      	lsls	r3, r3, #1
 8080d48:	52d1      	strh	r1, [r2, r3]
                SPIFFS_GC_DBG("gc_clean: MOVE_DATA wrote page "_SPIPRIpg" to objix entry "_SPIPRIsp" in mem\n", new_data_pix, (spiffs_span_ix)SPIFFS_OBJ_IX_ENTRY(fs, p_hdr.span_ix));
 8080d4a:	69eb      	ldr	r3, [r5, #28]
 8080d4c:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8080d50:	f1a3 002d 	sub.w	r0, r3, #45	; 0x2d
 8080d54:	ebb2 0f50 	cmp.w	r2, r0, lsr #1
 8080d58:	ea4f 0750 	mov.w	r7, r0, lsr #1
 8080d5c:	d307      	bcc.n	8080d6e <spiffs_gc_clean+0x3ee>
 8080d5e:	3b08      	subs	r3, #8
 8080d60:	1bd2      	subs	r2, r2, r7
 8080d62:	085b      	lsrs	r3, r3, #1
 8080d64:	fbb2 f0f3 	udiv	r0, r2, r3
 8080d68:	fb03 2210 	mls	r2, r3, r0, r2
 8080d6c:	b292      	uxth	r2, r2
 8080d6e:	4880      	ldr	r0, [pc, #512]	; (8080f70 <spiffs_gc_clean+0x5f0>)
 8080d70:	e7d4      	b.n	8080d1c <spiffs_gc_clean+0x39c>
          if (obj_id != SPIFFS_OBJ_ID_DELETED && obj_id != SPIFFS_OBJ_ID_FREE &&
 8080d72:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8080d76:	f48a 4100 	eor.w	r1, sl, #32768	; 0x8000
 8080d7a:	4291      	cmp	r1, r2
 8080d7c:	f63f af54 	bhi.w	8080c28 <spiffs_gc_clean+0x2a8>
            res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
 8080d80:	2105      	movs	r1, #5
 8080d82:	692a      	ldr	r2, [r5, #16]
 8080d84:	af0d      	add	r7, sp, #52	; 0x34
 8080d86:	fb03 2308 	mla	r3, r3, r8, r2
 8080d8a:	9100      	str	r1, [sp, #0]
 8080d8c:	2200      	movs	r2, #0
 8080d8e:	2115      	movs	r1, #21
 8080d90:	4628      	mov	r0, r5
 8080d92:	9701      	str	r7, [sp, #4]
 8080d94:	f7ff fa4a 	bl	808022c <spiffs_phys_rd>
            SPIFFS_CHECK_RES(res);
 8080d98:	1e04      	subs	r4, r0, #0
 8080d9a:	f6ff af76 	blt.w	8080c8a <spiffs_gc_clean+0x30a>
            if (p_hdr.flags & SPIFFS_PH_FLAG_DELET) {
 8080d9e:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
 8080da2:	2b00      	cmp	r3, #0
 8080da4:	da3a      	bge.n	8080e1c <spiffs_gc_clean+0x49c>
              res = spiffs_page_move(fs, 0, 0, obj_id, &p_hdr, cur_pix, &new_pix);
 8080da6:	2200      	movs	r2, #0
 8080da8:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8080dac:	4611      	mov	r1, r2
 8080dae:	e9cd 8301 	strd	r8, r3, [sp, #4]
 8080db2:	4628      	mov	r0, r5
 8080db4:	4653      	mov	r3, sl
 8080db6:	9700      	str	r7, [sp, #0]
 8080db8:	f001 fdde 	bl	8082978 <spiffs_page_move>
 8080dbc:	4604      	mov	r4, r0
              SPIFFS_GC_DBG("gc_clean: MOVE_OBJIX move objix "_SPIPRIid":"_SPIPRIsp" page "_SPIPRIpg" to "_SPIPRIpg"\n", obj_id, p_hdr.span_ix, cur_pix, new_pix);
 8080dbe:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8080dc2:	4651      	mov	r1, sl
 8080dc4:	9300      	str	r3, [sp, #0]
 8080dc6:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8080dca:	4643      	mov	r3, r8
 8080dcc:	4869      	ldr	r0, [pc, #420]	; (8080f74 <spiffs_gc_clean+0x5f4>)
 8080dce:	f00b febb 	bl	808cb48 <spiffsParticleTraceLog>
              SPIFFS_CHECK_RES(res);
 8080dd2:	2c00      	cmp	r4, #0
 8080dd4:	f6ff af59 	blt.w	8080c8a <spiffs_gc_clean+0x30a>
              spiffs_cb_object_event(fs, (spiffs_page_object_ix *)&p_hdr,
 8080dd8:	2400      	movs	r4, #0
 8080dda:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8080dde:	2203      	movs	r2, #3
 8080de0:	9301      	str	r3, [sp, #4]
 8080de2:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8080de6:	4639      	mov	r1, r7
 8080de8:	4628      	mov	r0, r5
 8080dea:	9402      	str	r4, [sp, #8]
 8080dec:	9300      	str	r3, [sp, #0]
 8080dee:	4653      	mov	r3, sl
 8080df0:	f001 fe66 	bl	8082ac0 <spiffs_cb_object_event>
              res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ,
 8080df4:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
 8080df8:	6929      	ldr	r1, [r5, #16]
 8080dfa:	9807      	ldr	r0, [sp, #28]
 8080dfc:	fb02 1200 	mla	r2, r2, r0, r1
 8080e00:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8080e02:	4628      	mov	r0, r5
 8080e04:	e9cd 3100 	strd	r3, r1, [sp]
 8080e08:	fb0b 2303 	mla	r3, fp, r3, r2
 8080e0c:	2114      	movs	r1, #20
 8080e0e:	4622      	mov	r2, r4
 8080e10:	f7ff fa0c 	bl	808022c <spiffs_phys_rd>
              SPIFFS_CHECK_RES(res);
 8080e14:	1e04      	subs	r4, r0, #0
            SPIFFS_CHECK_RES(res);
 8080e16:	f6bf af07 	bge.w	8080c28 <spiffs_gc_clean+0x2a8>
 8080e1a:	e736      	b.n	8080c8a <spiffs_gc_clean+0x30a>
              SPIFFS_GC_DBG("gc_clean: MOVE_OBJIX wipe objix "_SPIPRIid":"_SPIPRIsp" page "_SPIPRIpg"\n", obj_id, p_hdr.span_ix, cur_pix);
 8080e1c:	4643      	mov	r3, r8
 8080e1e:	4651      	mov	r1, sl
 8080e20:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8080e24:	4854      	ldr	r0, [pc, #336]	; (8080f78 <spiffs_gc_clean+0x5f8>)
 8080e26:	f00b fe8f 	bl	808cb48 <spiffsParticleTraceLog>
              res = spiffs_page_delete(fs, cur_pix);
 8080e2a:	4641      	mov	r1, r8
 8080e2c:	4628      	mov	r0, r5
 8080e2e:	f001 fd5f 	bl	80828f0 <spiffs_page_delete>
              if (res == SPIFFS_OK) {
 8080e32:	1e04      	subs	r4, r0, #0
 8080e34:	d1ef      	bne.n	8080e16 <spiffs_gc_clean+0x496>
                spiffs_cb_object_event(fs, (spiffs_page_object_ix *)0,
 8080e36:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8080e3a:	464a      	mov	r2, r9
 8080e3c:	9300      	str	r3, [sp, #0]
 8080e3e:	4621      	mov	r1, r4
 8080e40:	4653      	mov	r3, sl
 8080e42:	4628      	mov	r0, r5
 8080e44:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8080e48:	f001 fe3a 	bl	8082ac0 <spiffs_cb_object_event>
            SPIFFS_CHECK_RES(res);
 8080e4c:	e6ec      	b.n	8080c28 <spiffs_gc_clean+0x2a8>
    if (res != SPIFFS_OK) break;
 8080e4e:	2c00      	cmp	r4, #0
 8080e50:	f43f addd 	beq.w	8080a0e <spiffs_gc_clean+0x8e>
 8080e54:	e719      	b.n	8080c8a <spiffs_gc_clean+0x30a>
        SPIFFS_CHECK_RES(res);
 8080e56:	2800      	cmp	r0, #0
 8080e58:	f6ff af17 	blt.w	8080c8a <spiffs_gc_clean+0x30a>
        SPIFFS_GC_DBG("gc_clean: FIND_DATA found object index at page "_SPIPRIpg"\n", objix_pix);
 8080e5c:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8080e60:	4846      	ldr	r0, [pc, #280]	; (8080f7c <spiffs_gc_clean+0x5fc>)
 8080e62:	f00b fe71 	bl	808cb48 <spiffsParticleTraceLog>
        res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
 8080e66:	69ea      	ldr	r2, [r5, #28]
 8080e68:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8080e6c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8080e6e:	692b      	ldr	r3, [r5, #16]
 8080e70:	e9cd 2000 	strd	r2, r0, [sp]
 8080e74:	fb02 3301 	mla	r3, r2, r1, r3
 8080e78:	4628      	mov	r0, r5
 8080e7a:	2200      	movs	r2, #0
 8080e7c:	2115      	movs	r1, #21
 8080e7e:	f7ff f9d5 	bl	808022c <spiffs_phys_rd>
        SPIFFS_CHECK_RES(res);
 8080e82:	1e04      	subs	r4, r0, #0
 8080e84:	f6ff af01 	blt.w	8080c8a <spiffs_gc_clean+0x30a>
        SPIFFS_VALIDATE_OBJIX(objix->p_hdr, gc.cur_obj_id | SPIFFS_OBJ_ID_IX_FLAG, gc.cur_objix_spix);
 8080e88:	9b06      	ldr	r3, [sp, #24]
 8080e8a:	791e      	ldrb	r6, [r3, #4]
 8080e8c:	07f0      	lsls	r0, r6, #31
 8080e8e:	d40e      	bmi.n	8080eae <spiffs_gc_clean+0x52e>
 8080e90:	0631      	lsls	r1, r6, #24
 8080e92:	d50e      	bpl.n	8080eb2 <spiffs_gc_clean+0x532>
 8080e94:	07b2      	lsls	r2, r6, #30
 8080e96:	d40e      	bmi.n	8080eb6 <spiffs_gc_clean+0x536>
 8080e98:	f016 0604 	ands.w	r6, r6, #4
 8080e9c:	d10d      	bne.n	8080eba <spiffs_gc_clean+0x53a>
 8080e9e:	885b      	ldrh	r3, [r3, #2]
 8080ea0:	454b      	cmp	r3, r9
 8080ea2:	d10c      	bne.n	8080ebe <spiffs_gc_clean+0x53e>
        gc.cur_objix_pix = objix_pix;
 8080ea4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8080ea8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8080eac:	e60f      	b.n	8080ace <spiffs_gc_clean+0x14e>
        SPIFFS_VALIDATE_OBJIX(objix->p_hdr, gc.cur_obj_id | SPIFFS_OBJ_ID_IX_FLAG, gc.cur_objix_spix);
 8080eae:	4c34      	ldr	r4, [pc, #208]	; (8080f80 <spiffs_gc_clean+0x600>)
 8080eb0:	e6eb      	b.n	8080c8a <spiffs_gc_clean+0x30a>
 8080eb2:	4c34      	ldr	r4, [pc, #208]	; (8080f84 <spiffs_gc_clean+0x604>)
 8080eb4:	e6e9      	b.n	8080c8a <spiffs_gc_clean+0x30a>
 8080eb6:	4c34      	ldr	r4, [pc, #208]	; (8080f88 <spiffs_gc_clean+0x608>)
 8080eb8:	e6e7      	b.n	8080c8a <spiffs_gc_clean+0x30a>
 8080eba:	4c34      	ldr	r4, [pc, #208]	; (8080f8c <spiffs_gc_clean+0x60c>)
 8080ebc:	e6e5      	b.n	8080c8a <spiffs_gc_clean+0x30a>
 8080ebe:	4c34      	ldr	r4, [pc, #208]	; (8080f90 <spiffs_gc_clean+0x610>)
 8080ec0:	e6e3      	b.n	8080c8a <spiffs_gc_clean+0x30a>
        gc.state = MOVE_OBJ_IX;
 8080ec2:	2302      	movs	r3, #2
 8080ec4:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
    switch (gc.state) {
 8080ec8:	2600      	movs	r6, #0
 8080eca:	4634      	mov	r4, r6
 8080ecc:	e5ff      	b.n	8080ace <spiffs_gc_clean+0x14e>
      gc.state = FIND_OBJ_DATA;
 8080ece:	2700      	movs	r7, #0
 8080ed0:	f8bd 903e 	ldrh.w	r9, [sp, #62]	; 0x3e
      if (gc.cur_objix_spix == 0) {
 8080ed4:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
      cur_entry = gc.stored_scan_entry_index; // pop cursor
 8080ed8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8080eda:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8080edc:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
      gc.state = FIND_OBJ_DATA;
 8080ee0:	f88d 703c 	strb.w	r7, [sp, #60]	; 0x3c
      if (gc.cur_objix_spix == 0) {
 8080ee4:	f449 4100 	orr.w	r1, r9, #32768	; 0x8000
 8080ee8:	a80d      	add	r0, sp, #52	; 0x34
 8080eea:	f1ba 0f00 	cmp.w	sl, #0
 8080eee:	d114      	bne.n	8080f1a <spiffs_gc_clean+0x59a>
        res = spiffs_object_update_index_hdr(fs, 0, gc.cur_obj_id | SPIFFS_OBJ_ID_IX_FLAG, gc.cur_objix_pix, fs->work, 0, 0, 0, &new_objix_pix);
 8080ef0:	e9cd a003 	strd	sl, r0, [sp, #12]
 8080ef4:	9200      	str	r2, [sp, #0]
 8080ef6:	4628      	mov	r0, r5
 8080ef8:	460a      	mov	r2, r1
 8080efa:	e9cd aa01 	strd	sl, sl, [sp, #4]
 8080efe:	4651      	mov	r1, sl
 8080f00:	f001 ffa0 	bl	8082e44 <spiffs_object_update_index_hdr>
 8080f04:	4604      	mov	r4, r0
        SPIFFS_GC_DBG("gc_clean: MOVE_DATA store modified objix_hdr page, "_SPIPRIpg":"_SPIPRIsp"\n", new_objix_pix, 0);
 8080f06:	4652      	mov	r2, sl
 8080f08:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8080f0c:	4821      	ldr	r0, [pc, #132]	; (8080f94 <spiffs_gc_clean+0x614>)
 8080f0e:	f00b fe1b 	bl	808cb48 <spiffsParticleTraceLog>
        SPIFFS_CHECK_RES(res);
 8080f12:	42bc      	cmp	r4, r7
 8080f14:	f6bf addb 	bge.w	8080ace <spiffs_gc_clean+0x14e>
 8080f18:	e6b7      	b.n	8080c8a <spiffs_gc_clean+0x30a>
        res = spiffs_page_move(fs, 0, fs->work, gc.cur_obj_id | SPIFFS_OBJ_ID_IX_FLAG, 0, gc.cur_objix_pix, &new_objix_pix);
 8080f1a:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8080f1e:	9700      	str	r7, [sp, #0]
 8080f20:	460b      	mov	r3, r1
 8080f22:	4628      	mov	r0, r5
 8080f24:	4639      	mov	r1, r7
 8080f26:	f001 fd27 	bl	8082978 <spiffs_page_move>
 8080f2a:	4604      	mov	r4, r0
        SPIFFS_GC_DBG("gc_clean: MOVE_DATA store modified objix page, "_SPIPRIpg":"_SPIPRIsp"\n", new_objix_pix, objix->p_hdr.span_ix);
 8080f2c:	9b06      	ldr	r3, [sp, #24]
 8080f2e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8080f32:	885a      	ldrh	r2, [r3, #2]
 8080f34:	4818      	ldr	r0, [pc, #96]	; (8080f98 <spiffs_gc_clean+0x618>)
 8080f36:	f00b fe07 	bl	808cb48 <spiffsParticleTraceLog>
        SPIFFS_CHECK_RES(res);
 8080f3a:	2c00      	cmp	r4, #0
 8080f3c:	f6ff aea5 	blt.w	8080c8a <spiffs_gc_clean+0x30a>
        spiffs_cb_object_event(fs, (spiffs_page_object_ix *)fs->work,
 8080f40:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8080f44:	9702      	str	r7, [sp, #8]
 8080f46:	9301      	str	r3, [sp, #4]
 8080f48:	9b06      	ldr	r3, [sp, #24]
 8080f4a:	463a      	mov	r2, r7
 8080f4c:	885b      	ldrh	r3, [r3, #2]
 8080f4e:	4628      	mov	r0, r5
 8080f50:	9300      	str	r3, [sp, #0]
 8080f52:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8080f54:	464b      	mov	r3, r9
 8080f56:	f001 fdb3 	bl	8082ac0 <spiffs_cb_object_event>
    break;
 8080f5a:	e5b8      	b.n	8080ace <spiffs_gc_clean+0x14e>
      gc.state = FINISHED;
 8080f5c:	2303      	movs	r3, #3
      break;
 8080f5e:	2400      	movs	r4, #0
      gc.state = FINISHED;
 8080f60:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
      break;
 8080f64:	e5b3      	b.n	8080ace <spiffs_gc_clean+0x14e>
 8080f66:	bf00      	nop
 8080f68:	08092348 	.word	0x08092348
 8080f6c:	0809237c 	.word	0x0809237c
 8080f70:	080923c0 	.word	0x080923c0
 8080f74:	08092400 	.word	0x08092400
 8080f78:	0809243d 	.word	0x0809243d
 8080f7c:	080924d8 	.word	0x080924d8
 8080f80:	ffffd8e4 	.word	0xffffd8e4
 8080f84:	ffffd8ec 	.word	0xffffd8ec
 8080f88:	ffffd8eb 	.word	0xffffd8eb
 8080f8c:	ffffd8ea 	.word	0xffffd8ea
 8080f90:	ffffd8e3 	.word	0xffffd8e3
 8080f94:	0809250d 	.word	0x0809250d
 8080f98:	0809254b 	.word	0x0809254b

08080f9c <spiffs_gc_check>:
    u32_t len) {
 8080f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      (SPIFFS_PAGES_PER_BLOCK(fs) - SPIFFS_OBJ_LOOKUP_PAGES(fs)) * (fs->block_count-2)
 8080fa0:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 8080fa4:	fbb3 f3f2 	udiv	r3, r3, r2
    u32_t len) {
 8080fa8:	460f      	mov	r7, r1
      (SPIFFS_PAGES_PER_BLOCK(fs) - SPIFFS_OBJ_LOOKUP_PAGES(fs)) * (fs->block_count-2)
 8080faa:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8080fae:	ea4f 0143 	mov.w	r1, r3, lsl #1
 8080fb2:	bf94      	ite	ls
 8080fb4:	fbb1 f1f2 	udivls	r1, r1, r2
 8080fb8:	2101      	movhi	r1, #1
    u32_t len) {
 8080fba:	4604      	mov	r4, r0
      (SPIFFS_PAGES_PER_BLOCK(fs) - SPIFFS_OBJ_LOOKUP_PAGES(fs)) * (fs->block_count-2)
 8080fbc:	6a00      	ldr	r0, [r0, #32]
 8080fbe:	1a5b      	subs	r3, r3, r1
 8080fc0:	3802      	subs	r0, #2
 8080fc2:	4343      	muls	r3, r0
      - fs->stats_p_allocated - fs->stats_p_deleted;
 8080fc4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8080fc6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8080fc8:	1a5b      	subs	r3, r3, r1
  if (fs->free_blocks > 3 &&
 8080fca:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    u32_t len) {
 8080fcc:	b089      	sub	sp, #36	; 0x24
  if (fs->free_blocks > 3 &&
 8080fce:	2903      	cmp	r1, #3
      - fs->stats_p_allocated - fs->stats_p_deleted;
 8080fd0:	eba3 0600 	sub.w	r6, r3, r0
  if (fs->free_blocks > 3 &&
 8080fd4:	f1a2 0505 	sub.w	r5, r2, #5
 8080fd8:	d904      	bls.n	8080fe4 <spiffs_gc_check+0x48>
      (s32_t)len < free_pages * (s32_t)SPIFFS_DATA_PAGE_SIZE(fs)) {
 8080fda:	fb06 fc05 	mul.w	ip, r6, r5
  if (fs->free_blocks > 3 &&
 8080fde:	45bc      	cmp	ip, r7
 8080fe0:	f300 80b1 	bgt.w	8081146 <spiffs_gc_check+0x1aa>
  u32_t needed_pages = (len + SPIFFS_DATA_PAGE_SIZE(fs) - 1) / SPIFFS_DATA_PAGE_SIZE(fs);
 8080fe4:	f1a7 0806 	sub.w	r8, r7, #6
 8080fe8:	4490      	add	r8, r2
 8080fea:	fbb8 f8f5 	udiv	r8, r8, r5
  if ((s32_t)needed_pages > (s32_t)(free_pages + fs->stats_p_deleted)) {
 8080fee:	4543      	cmp	r3, r8
 8080ff0:	da0a      	bge.n	8081008 <spiffs_gc_check+0x6c>
    SPIFFS_GC_DBG("gc_check: full freeblk:"_SPIPRIi" needed:"_SPIPRIi" free:"_SPIPRIi" dele:"_SPIPRIi"\n", fs->free_blocks, needed_pages, free_pages, fs->stats_p_deleted);
 8080ff2:	9000      	str	r0, [sp, #0]
 8080ff4:	4633      	mov	r3, r6
 8080ff6:	4642      	mov	r2, r8
 8080ff8:	4854      	ldr	r0, [pc, #336]	; (808114c <spiffs_gc_check+0x1b0>)
 8080ffa:	f00b fda5 	bl	808cb48 <spiffsParticleTraceLog>
    return SPIFFS_ERR_FULL;
 8080ffe:	4d54      	ldr	r5, [pc, #336]	; (8081150 <spiffs_gc_check+0x1b4>)
}
 8081000:	4628      	mov	r0, r5
 8081002:	b009      	add	sp, #36	; 0x24
 8081004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int tries = 0;
 8081008:	f04f 0900 	mov.w	r9, #0
 808100c:	e071      	b.n	80810f2 <spiffs_gc_check+0x156>
    fs->cleaning = 1;
 808100e:	f04f 0a01 	mov.w	sl, #1
    fs->stats_gc_runs++;
 8081012:	6da3      	ldr	r3, [r4, #88]	; 0x58
    res = spiffs_gc_clean(fs, cand);
 8081014:	4620      	mov	r0, r4
    fs->stats_gc_runs++;
 8081016:	3301      	adds	r3, #1
 8081018:	65a3      	str	r3, [r4, #88]	; 0x58
    cand = cands[0];
 808101a:	9b06      	ldr	r3, [sp, #24]
 808101c:	f8b3 b000 	ldrh.w	fp, [r3]
    fs->cleaning = 1;
 8081020:	f884 a054 	strb.w	sl, [r4, #84]	; 0x54
    res = spiffs_gc_clean(fs, cand);
 8081024:	4659      	mov	r1, fp
 8081026:	f7ff fcab 	bl	8080980 <spiffs_gc_clean>
    fs->cleaning = 0;
 808102a:	2300      	movs	r3, #0
    if (res < 0) {
 808102c:	1e05      	subs	r5, r0, #0
      SPIFFS_GC_DBG("gc_check: cleaning block "_SPIPRIi", result "_SPIPRIi"\n", cand, res);
 808102e:	462a      	mov	r2, r5
 8081030:	4659      	mov	r1, fp
 8081032:	4848      	ldr	r0, [pc, #288]	; (8081154 <spiffs_gc_check+0x1b8>)
    fs->cleaning = 0;
 8081034:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    if (res < 0) {
 8081038:	da02      	bge.n	8081040 <spiffs_gc_check+0xa4>
      SPIFFS_GC_DBG("gc_check: cleaning block "_SPIPRIi", result "_SPIPRIi"\n", cand, res);
 808103a:	f00b fd85 	bl	808cb48 <spiffsParticleTraceLog>
    SPIFFS_CHECK_RES(res);
 808103e:	e7df      	b.n	8081000 <spiffs_gc_check+0x64>
      SPIFFS_GC_DBG("gc_check: cleaning block "_SPIPRIi", result "_SPIPRIi"\n", cand, res);
 8081040:	f00b fd82 	bl	808cb48 <spiffsParticleTraceLog>
    res = spiffs_gc_erase_page_stats(fs, cand);
 8081044:	4659      	mov	r1, fp
 8081046:	4620      	mov	r0, r4
 8081048:	f7ff fb24 	bl	8080694 <spiffs_gc_erase_page_stats>
    SPIFFS_CHECK_RES(res);
 808104c:	1e05      	subs	r5, r0, #0
 808104e:	dbd7      	blt.n	8081000 <spiffs_gc_check+0x64>
    res = spiffs_gc_erase_block(fs, cand);
 8081050:	4659      	mov	r1, fp
 8081052:	4620      	mov	r0, r4
 8081054:	f7ff fa56 	bl	8080504 <spiffs_gc_erase_block>
    SPIFFS_CHECK_RES(res);
 8081058:	1e05      	subs	r5, r0, #0
 808105a:	dbd1      	blt.n	8081000 <spiffs_gc_check+0x64>
          (SPIFFS_PAGES_PER_BLOCK(fs) - SPIFFS_OBJ_LOOKUP_PAGES(fs)) * (fs->block_count - 2)
 808105c:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 8081060:	fbb3 f3f2 	udiv	r3, r3, r2
 8081064:	0059      	lsls	r1, r3, #1
 8081066:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 808106a:	bf98      	it	ls
 808106c:	fbb1 faf2 	udivls	sl, r1, r2
 8081070:	6a21      	ldr	r1, [r4, #32]
 8081072:	eba3 0a0a 	sub.w	sl, r3, sl
 8081076:	3902      	subs	r1, #2
 8081078:	fb0a fa01 	mul.w	sl, sl, r1
          - fs->stats_p_allocated - fs->stats_p_deleted;
 808107c:	e9d4 3113 	ldrd	r3, r1, [r4, #76]	; 0x4c
    if (prev_free_pages <= 0 && prev_free_pages == free_pages) {
 8081080:	2e00      	cmp	r6, #0
          - fs->stats_p_allocated - fs->stats_p_deleted;
 8081082:	440b      	add	r3, r1
 8081084:	ebaa 0a03 	sub.w	sl, sl, r3
    if (prev_free_pages <= 0 && prev_free_pages == free_pages) {
 8081088:	dc25      	bgt.n	80810d6 <spiffs_gc_check+0x13a>
 808108a:	4556      	cmp	r6, sl
 808108c:	d123      	bne.n	80810d6 <spiffs_gc_check+0x13a>
      SPIFFS_GC_DBG("gc_check: early abort, no result on gc when fs crammed\n");
 808108e:	4832      	ldr	r0, [pc, #200]	; (8081158 <spiffs_gc_check+0x1bc>)
 8081090:	f00b fd5a 	bl	808cb48 <spiffsParticleTraceLog>
        (SPIFFS_PAGES_PER_BLOCK(fs) - SPIFFS_OBJ_LOOKUP_PAGES(fs)) * (fs->block_count - 2)
 8081094:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 8081098:	e9d4 0113 	ldrd	r0, r1, [r4, #76]	; 0x4c
 808109c:	fbb3 f3f2 	udiv	r3, r3, r2
 80810a0:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 80810a4:	ea4f 0643 	mov.w	r6, r3, lsl #1
 80810a8:	bf94      	ite	ls
 80810aa:	fbb6 f6f2 	udivls	r6, r6, r2
 80810ae:	2601      	movhi	r6, #1
 80810b0:	4401      	add	r1, r0
 80810b2:	6a20      	ldr	r0, [r4, #32]
 80810b4:	1b9b      	subs	r3, r3, r6
 80810b6:	3802      	subs	r0, #2
 80810b8:	4343      	muls	r3, r0
  if ((s32_t)len > free_pages*(s32_t)SPIFFS_DATA_PAGE_SIZE(fs)) {
 80810ba:	3a05      	subs	r2, #5
        - fs->stats_p_allocated - fs->stats_p_deleted;
 80810bc:	1a5b      	subs	r3, r3, r1
  if ((s32_t)len > free_pages*(s32_t)SPIFFS_DATA_PAGE_SIZE(fs)) {
 80810be:	435a      	muls	r2, r3
    res = SPIFFS_ERR_FULL;
 80810c0:	4823      	ldr	r0, [pc, #140]	; (8081150 <spiffs_gc_check+0x1b4>)
 80810c2:	42ba      	cmp	r2, r7
 80810c4:	bfb8      	it	lt
 80810c6:	4605      	movlt	r5, r0
  SPIFFS_GC_DBG("gc_check: finished, "_SPIPRIi" dirty, blocks "_SPIPRIi" free, "_SPIPRIi" pages free, "_SPIPRIi" tries, res "_SPIPRIi"\n",
 80810c8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80810ca:	e9cd 9500 	strd	r9, r5, [sp]
 80810ce:	4823      	ldr	r0, [pc, #140]	; (808115c <spiffs_gc_check+0x1c0>)
 80810d0:	f00b fd3a 	bl	808cb48 <spiffsParticleTraceLog>
  return res;
 80810d4:	e794      	b.n	8081000 <spiffs_gc_check+0x64>
      (s32_t)len > free_pages*(s32_t)SPIFFS_DATA_PAGE_SIZE(fs)));
 80810d6:	f109 0901 	add.w	r9, r9, #1
 80810da:	f1b9 0f05 	cmp.w	r9, #5
 80810de:	d0d9      	beq.n	8081094 <spiffs_gc_check+0xf8>
  } while (++tries < SPIFFS_GC_MAX_RUNS && (fs->free_blocks <= 2 ||
 80810e0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80810e2:	2b02      	cmp	r3, #2
 80810e4:	d904      	bls.n	80810f0 <spiffs_gc_check+0x154>
      (s32_t)len > free_pages*(s32_t)SPIFFS_DATA_PAGE_SIZE(fs)));
 80810e6:	3a05      	subs	r2, #5
 80810e8:	fb0a f202 	mul.w	r2, sl, r2
  } while (++tries < SPIFFS_GC_MAX_RUNS && (fs->free_blocks <= 2 ||
 80810ec:	42ba      	cmp	r2, r7
 80810ee:	dad1      	bge.n	8081094 <spiffs_gc_check+0xf8>
      (SPIFFS_PAGES_PER_BLOCK(fs) - SPIFFS_OBJ_LOOKUP_PAGES(fs)) * (fs->block_count-2)
 80810f0:	4656      	mov	r6, sl
    SPIFFS_GC_DBG("\ngc_check #"_SPIPRIi": run gc free_blocks:"_SPIPRIi" pfree:"_SPIPRIi" pallo:"_SPIPRIi" pdele:"_SPIPRIi" ["_SPIPRIi"] len:"_SPIPRIi" of "_SPIPRIi"\n",
 80810f2:	e9d4 2113 	ldrd	r2, r1, [r4, #76]	; 0x4c
 80810f6:	69e3      	ldr	r3, [r4, #28]
 80810f8:	4819      	ldr	r0, [pc, #100]	; (8081160 <spiffs_gc_check+0x1c4>)
 80810fa:	3b05      	subs	r3, #5
 80810fc:	4373      	muls	r3, r6
 80810fe:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8081102:	1853      	adds	r3, r2, r1
 8081104:	4433      	add	r3, r6
 8081106:	e9cd 1301 	strd	r1, r3, [sp, #4]
 808110a:	9200      	str	r2, [sp, #0]
 808110c:	4633      	mov	r3, r6
 808110e:	4649      	mov	r1, r9
 8081110:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8081112:	f00b fd19 	bl	808cb48 <spiffsParticleTraceLog>
    res = spiffs_gc_find_candidate(fs, &cands, &count, free_pages <= 0);
 8081116:	2e00      	cmp	r6, #0
 8081118:	bfcc      	ite	gt
 808111a:	2300      	movgt	r3, #0
 808111c:	2301      	movle	r3, #1
 808111e:	4620      	mov	r0, r4
 8081120:	aa07      	add	r2, sp, #28
 8081122:	a906      	add	r1, sp, #24
 8081124:	f7ff fb20 	bl	8080768 <spiffs_gc_find_candidate>
    SPIFFS_CHECK_RES(res);
 8081128:	1e05      	subs	r5, r0, #0
 808112a:	f6ff af69 	blt.w	8081000 <spiffs_gc_check+0x64>
    if (count == 0) {
 808112e:	9d07      	ldr	r5, [sp, #28]
 8081130:	2d00      	cmp	r5, #0
 8081132:	f47f af6c 	bne.w	808100e <spiffs_gc_check+0x72>
      SPIFFS_GC_DBG("gc_check: no candidates, return\n");
 8081136:	480b      	ldr	r0, [pc, #44]	; (8081164 <spiffs_gc_check+0x1c8>)
 8081138:	f00b fd06 	bl	808cb48 <spiffsParticleTraceLog>
      return (s32_t)needed_pages < free_pages ? SPIFFS_OK : SPIFFS_ERR_FULL;
 808113c:	4b04      	ldr	r3, [pc, #16]	; (8081150 <spiffs_gc_check+0x1b4>)
 808113e:	45b0      	cmp	r8, r6
 8081140:	bfa8      	it	ge
 8081142:	461d      	movge	r5, r3
 8081144:	e75c      	b.n	8081000 <spiffs_gc_check+0x64>
    return SPIFFS_OK;
 8081146:	2500      	movs	r5, #0
 8081148:	e75a      	b.n	8081000 <spiffs_gc_check+0x64>
 808114a:	bf00      	nop
 808114c:	0809259b 	.word	0x0809259b
 8081150:	ffffd8ef 	.word	0xffffd8ef
 8081154:	08092644 	.word	0x08092644
 8081158:	0809266c 	.word	0x0809266c
 808115c:	080926a4 	.word	0x080926a4
 8081160:	080925d0 	.word	0x080925d0
 8081164:	08092623 	.word	0x08092623

08081168 <spiffs_stat_pix>:

  return 0;
#endif // SPIFFS_READ_ONLY
}

static s32_t spiffs_stat_pix(spiffs *fs, spiffs_page_ix pix, spiffs_file fh, spiffs_stat *s) {
 8081168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808116c:	b090      	sub	sp, #64	; 0x40
  (void)fh;
  spiffs_page_object_ix_header objix_hdr;
  spiffs_obj_id obj_id;
  s32_t res =_spiffs_rd(fs,  SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ, fh,
 808116e:	ac04      	add	r4, sp, #16
static s32_t spiffs_stat_pix(spiffs *fs, spiffs_page_ix pix, spiffs_file fh, spiffs_stat *s) {
 8081170:	460f      	mov	r7, r1
 8081172:	461e      	mov	r6, r3
  s32_t res =_spiffs_rd(fs,  SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ, fh,
 8081174:	69c1      	ldr	r1, [r0, #28]
 8081176:	6903      	ldr	r3, [r0, #16]
 8081178:	9401      	str	r4, [sp, #4]
 808117a:	242d      	movs	r4, #45	; 0x2d
 808117c:	fb01 3307 	mla	r3, r1, r7, r3
 8081180:	9400      	str	r4, [sp, #0]
 8081182:	2116      	movs	r1, #22
static s32_t spiffs_stat_pix(spiffs *fs, spiffs_page_ix pix, spiffs_file fh, spiffs_stat *s) {
 8081184:	4605      	mov	r5, r0
 8081186:	4690      	mov	r8, r2
  s32_t res =_spiffs_rd(fs,  SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ, fh,
 8081188:	f7ff f850 	bl	808022c <spiffs_phys_rd>
      SPIFFS_PAGE_TO_PADDR(fs, pix), sizeof(spiffs_page_object_ix_header), (u8_t *)&objix_hdr);
  SPIFFS_API_CHECK_RES(fs, res);
 808118c:	1e04      	subs	r4, r0, #0
 808118e:	da04      	bge.n	808119a <spiffs_stat_pix+0x32>

  u32_t obj_id_addr = SPIFFS_BLOCK_TO_PADDR(fs, SPIFFS_BLOCK_FOR_PAGE(fs , pix)) +
      SPIFFS_OBJ_LOOKUP_ENTRY_FOR_PAGE(fs, pix) * sizeof(spiffs_obj_id);
  res =_spiffs_rd(fs,  SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ, fh,
      obj_id_addr, sizeof(spiffs_obj_id), (u8_t *)&obj_id);
  SPIFFS_API_CHECK_RES(fs, res);
 8081190:	646c      	str	r4, [r5, #68]	; 0x44
#if SPIFFS_OBJ_META_LEN
  _SPIFFS_MEMCPY(s->meta, objix_hdr.meta, SPIFFS_OBJ_META_LEN);
#endif

  return res;
}
 8081192:	4620      	mov	r0, r4
 8081194:	b010      	add	sp, #64	; 0x40
 8081196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SPIFFS_OBJ_LOOKUP_ENTRY_FOR_PAGE(fs, pix) * sizeof(spiffs_obj_id);
 808119a:	e9d5 c406 	ldrd	ip, r4, [r5, #24]
 808119e:	fbbc f2f4 	udiv	r2, ip, r4
 80811a2:	fbb7 f1f2 	udiv	r1, r7, r2
 80811a6:	ebb4 0f42 	cmp.w	r4, r2, lsl #1
 80811aa:	ea4f 0342 	mov.w	r3, r2, lsl #1
 80811ae:	fb02 7011 	mls	r0, r2, r1, r7
 80811b2:	bf94      	ite	ls
 80811b4:	fbb3 f3f4 	udivls	r3, r3, r4
 80811b8:	2301      	movhi	r3, #1
  res =_spiffs_rd(fs,  SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ, fh,
 80811ba:	f10d 020e 	add.w	r2, sp, #14
 80811be:	9201      	str	r2, [sp, #4]
 80811c0:	2202      	movs	r2, #2
  u32_t obj_id_addr = SPIFFS_BLOCK_TO_PADDR(fs, SPIFFS_BLOCK_FOR_PAGE(fs , pix)) +
 80811c2:	f8d5 e010 	ldr.w	lr, [r5, #16]
      SPIFFS_OBJ_LOOKUP_ENTRY_FOR_PAGE(fs, pix) * sizeof(spiffs_obj_id);
 80811c6:	1ac3      	subs	r3, r0, r3
  u32_t obj_id_addr = SPIFFS_BLOCK_TO_PADDR(fs, SPIFFS_BLOCK_FOR_PAGE(fs , pix)) +
 80811c8:	fb0c e101 	mla	r1, ip, r1, lr
  res =_spiffs_rd(fs,  SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ, fh,
 80811cc:	9200      	str	r2, [sp, #0]
 80811ce:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80811d2:	4642      	mov	r2, r8
 80811d4:	2114      	movs	r1, #20
 80811d6:	4628      	mov	r0, r5
 80811d8:	f7ff f828 	bl	808022c <spiffs_phys_rd>
  SPIFFS_API_CHECK_RES(fs, res);
 80811dc:	1e04      	subs	r4, r0, #0
 80811de:	dbd7      	blt.n	8081190 <spiffs_stat_pix+0x28>
  s->obj_id = obj_id & ~SPIFFS_OBJ_ID_IX_FLAG;
 80811e0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  s->pix = pix;
 80811e4:	8177      	strh	r7, [r6, #10]
  s->obj_id = obj_id & ~SPIFFS_OBJ_ID_IX_FLAG;
 80811e6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80811ea:	8033      	strh	r3, [r6, #0]
  s->type = objix_hdr.type;
 80811ec:	f89d 301c 	ldrb.w	r3, [sp, #28]
  strncpy((char *)s->name, (char *)objix_hdr.name, SPIFFS_OBJ_NAME_LEN);
 80811f0:	f10d 011d 	add.w	r1, sp, #29
  s->type = objix_hdr.type;
 80811f4:	7233      	strb	r3, [r6, #8]
  s->size = objix_hdr.size == SPIFFS_UNDEFINED_LEN ? 0 : objix_hdr.size;
 80811f6:	9b06      	ldr	r3, [sp, #24]
  strncpy((char *)s->name, (char *)objix_hdr.name, SPIFFS_OBJ_NAME_LEN);
 80811f8:	f106 000c 	add.w	r0, r6, #12
  s->size = objix_hdr.size == SPIFFS_UNDEFINED_LEN ? 0 : objix_hdr.size;
 80811fc:	1c5a      	adds	r2, r3, #1
 80811fe:	bf08      	it	eq
 8081200:	2300      	moveq	r3, #0
  strncpy((char *)s->name, (char *)objix_hdr.name, SPIFFS_OBJ_NAME_LEN);
 8081202:	2220      	movs	r2, #32
  s->size = objix_hdr.size == SPIFFS_UNDEFINED_LEN ? 0 : objix_hdr.size;
 8081204:	6073      	str	r3, [r6, #4]
  strncpy((char *)s->name, (char *)objix_hdr.name, SPIFFS_OBJ_NAME_LEN);
 8081206:	f010 fee8 	bl	8091fda <strncpy>
  return res;
 808120a:	e7c2      	b.n	8081192 <spiffs_stat_pix+0x2a>

0808120c <spiffs_read_dir_v>:
    spiffs *fs,
    spiffs_obj_id obj_id,
    spiffs_block_ix bix,
    int ix_entry,
    const void *user_const_p,
    void *user_var_p) {
 808120c:	b5f0      	push	{r4, r5, r6, r7, lr}
  (void)user_const_p;
  s32_t res;
  spiffs_page_object_ix_header objix_hdr;
  if (obj_id == SPIFFS_OBJ_ID_FREE || obj_id == SPIFFS_OBJ_ID_DELETED ||
 808120e:	f481 4400 	eor.w	r4, r1, #32768	; 0x8000
    void *user_var_p) {
 8081212:	460d      	mov	r5, r1
  if (obj_id == SPIFFS_OBJ_ID_FREE || obj_id == SPIFFS_OBJ_ID_DELETED ||
 8081214:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    void *user_var_p) {
 8081218:	b08f      	sub	sp, #60	; 0x3c
  if (obj_id == SPIFFS_OBJ_ID_FREE || obj_id == SPIFFS_OBJ_ID_DELETED ||
 808121a:	428c      	cmp	r4, r1
    void *user_var_p) {
 808121c:	9e15      	ldr	r6, [sp, #84]	; 0x54
  if (obj_id == SPIFFS_OBJ_ID_FREE || obj_id == SPIFFS_OBJ_ID_DELETED ||
 808121e:	d903      	bls.n	8081228 <spiffs_read_dir_v+0x1c>
      (obj_id & SPIFFS_OBJ_ID_IX_FLAG) == 0) {
    return SPIFFS_VIS_COUNTINUE;
 8081220:	4f20      	ldr	r7, [pc, #128]	; (80812a4 <spiffs_read_dir_v+0x98>)
    _SPIFFS_MEMCPY(e->meta, objix_hdr.meta, SPIFFS_OBJ_META_LEN);
#endif
    return SPIFFS_OK;
  }
  return SPIFFS_VIS_COUNTINUE;
}
 8081222:	4638      	mov	r0, r7
 8081224:	b00f      	add	sp, #60	; 0x3c
 8081226:	bdf0      	pop	{r4, r5, r6, r7, pc}
  spiffs_page_ix pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, ix_entry);
 8081228:	e9d0 1706 	ldrd	r1, r7, [r0, #24]
 808122c:	fbb1 f1f7 	udiv	r1, r1, r7
 8081230:	ebb7 0f41 	cmp.w	r7, r1, lsl #1
 8081234:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8081238:	bf94      	ite	ls
 808123a:	fbb4 f4f7 	udivls	r4, r4, r7
 808123e:	2401      	movhi	r4, #1
 8081240:	fb01 f202 	mul.w	r2, r1, r2
 8081244:	b292      	uxth	r2, r2
 8081246:	441a      	add	r2, r3
 8081248:	bf98      	it	ls
 808124a:	b2a4      	uxthls	r4, r4
 808124c:	4414      	add	r4, r2
  res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
 808124e:	aa02      	add	r2, sp, #8
 8081250:	6903      	ldr	r3, [r0, #16]
 8081252:	9201      	str	r2, [sp, #4]
 8081254:	222d      	movs	r2, #45	; 0x2d
  spiffs_page_ix pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, ix_entry);
 8081256:	b2a4      	uxth	r4, r4
  res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
 8081258:	fb07 3304 	mla	r3, r7, r4, r3
 808125c:	9200      	str	r2, [sp, #0]
 808125e:	2115      	movs	r1, #21
 8081260:	2200      	movs	r2, #0
 8081262:	f7fe ffe3 	bl	808022c <spiffs_phys_rd>
  if (res != SPIFFS_OK) return res;
 8081266:	4607      	mov	r7, r0
 8081268:	2800      	cmp	r0, #0
 808126a:	d1da      	bne.n	8081222 <spiffs_read_dir_v+0x16>
  if ((obj_id & SPIFFS_OBJ_ID_IX_FLAG) &&
 808126c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8081270:	2b00      	cmp	r3, #0
 8081272:	d1d5      	bne.n	8081220 <spiffs_read_dir_v+0x14>
      objix_hdr.p_hdr.span_ix == 0 &&
 8081274:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8081278:	f003 03c2 	and.w	r3, r3, #194	; 0xc2
 808127c:	2bc0      	cmp	r3, #192	; 0xc0
 808127e:	d1cf      	bne.n	8081220 <spiffs_read_dir_v+0x14>
    e->obj_id = obj_id;
 8081280:	4630      	mov	r0, r6
    strcpy((char *)e->name, (char *)objix_hdr.name);
 8081282:	f10d 0115 	add.w	r1, sp, #21
    e->obj_id = obj_id;
 8081286:	f820 5b02 	strh.w	r5, [r0], #2
    strcpy((char *)e->name, (char *)objix_hdr.name);
 808128a:	f010 fe68 	bl	8091f5e <strcpy>
    e->type = objix_hdr.type;
 808128e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    e->pix = pix;
 8081292:	8534      	strh	r4, [r6, #40]	; 0x28
    e->type = objix_hdr.type;
 8081294:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
    e->size = objix_hdr.size == SPIFFS_UNDEFINED_LEN ? 0 : objix_hdr.size;
 8081298:	9b04      	ldr	r3, [sp, #16]
 808129a:	1c5a      	adds	r2, r3, #1
 808129c:	bf08      	it	eq
 808129e:	2300      	moveq	r3, #0
 80812a0:	6273      	str	r3, [r6, #36]	; 0x24
    return SPIFFS_OK;
 80812a2:	e7be      	b.n	8081222 <spiffs_read_dir_v+0x16>
 80812a4:	ffffd8aa 	.word	0xffffd8aa

080812a8 <spiffs_hydro_write.isra.0>:
static s32_t spiffs_hydro_write(spiffs *fs, spiffs_fd *fd, void *buf, u32_t offset, s32_t len) {
 80812a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (fd->size != SPIFFS_UNDEFINED_LEN && offset < fd->size) {
 80812ac:	6884      	ldr	r4, [r0, #8]
static s32_t spiffs_hydro_write(spiffs *fs, spiffs_fd *fd, void *buf, u32_t offset, s32_t len) {
 80812ae:	461d      	mov	r5, r3
  if (fd->size != SPIFFS_UNDEFINED_LEN && offset < fd->size) {
 80812b0:	1c63      	adds	r3, r4, #1
static s32_t spiffs_hydro_write(spiffs *fs, spiffs_fd *fd, void *buf, u32_t offset, s32_t len) {
 80812b2:	4607      	mov	r7, r0
 80812b4:	460e      	mov	r6, r1
 80812b6:	4690      	mov	r8, r2
  if (fd->size != SPIFFS_UNDEFINED_LEN && offset < fd->size) {
 80812b8:	d01b      	beq.n	80812f2 <spiffs_hydro_write.isra.0+0x4a>
 80812ba:	4294      	cmp	r4, r2
 80812bc:	d919      	bls.n	80812f2 <spiffs_hydro_write.isra.0+0x4a>
    s32_t m_len = MIN((s32_t)(fd->size - offset), len);
 80812be:	1aa4      	subs	r4, r4, r2
 80812c0:	42ac      	cmp	r4, r5
 80812c2:	bfa8      	it	ge
 80812c4:	462c      	movge	r4, r5
    res = spiffs_object_modify(fd, offset, (u8_t *)buf, m_len);
 80812c6:	460a      	mov	r2, r1
 80812c8:	4623      	mov	r3, r4
 80812ca:	4641      	mov	r1, r8
 80812cc:	f002 fa32 	bl	8083734 <spiffs_object_modify>
    SPIFFS_CHECK_RES(res);
 80812d0:	2800      	cmp	r0, #0
 80812d2:	db0c      	blt.n	80812ee <spiffs_hydro_write.isra.0+0x46>
    remaining -= m_len;
 80812d4:	1b2b      	subs	r3, r5, r4
    buf_8 += m_len;
 80812d6:	4426      	add	r6, r4
    offset += m_len;
 80812d8:	44a0      	add	r8, r4
  if (remaining > 0) {
 80812da:	2b00      	cmp	r3, #0
 80812dc:	dd06      	ble.n	80812ec <spiffs_hydro_write.isra.0+0x44>
    res = spiffs_object_append(fd, offset, (u8_t *)buf, remaining);
 80812de:	4632      	mov	r2, r6
 80812e0:	4641      	mov	r1, r8
 80812e2:	4638      	mov	r0, r7
 80812e4:	f001 fe98 	bl	8083018 <spiffs_object_append>
    SPIFFS_CHECK_RES(res);
 80812e8:	2800      	cmp	r0, #0
 80812ea:	db00      	blt.n	80812ee <spiffs_hydro_write.isra.0+0x46>
  return len;
 80812ec:	4628      	mov	r0, r5
}
 80812ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  s32_t remaining = len;
 80812f2:	462b      	mov	r3, r5
 80812f4:	e7f1      	b.n	80812da <spiffs_hydro_write.isra.0+0x32>

080812f6 <spiffs_fflush_cache>:
static s32_t spiffs_fflush_cache(spiffs *fs, spiffs_file fh) {
 80812f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  res = spiffs_fd_get(fs, fh, &fd);
 80812f8:	aa01      	add	r2, sp, #4
static s32_t spiffs_fflush_cache(spiffs *fs, spiffs_file fh) {
 80812fa:	4605      	mov	r5, r0
  res = spiffs_fd_get(fs, fh, &fd);
 80812fc:	f003 fae2 	bl	80848c4 <spiffs_fd_get>
  SPIFFS_API_CHECK_RES(fs, res);
 8081300:	1e04      	subs	r4, r0, #0
 8081302:	da03      	bge.n	808130c <spiffs_fflush_cache+0x16>
 8081304:	646c      	str	r4, [r5, #68]	; 0x44
}
 8081306:	4620      	mov	r0, r4
 8081308:	b002      	add	sp, #8
 808130a:	bd70      	pop	{r4, r5, r6, pc}
  if ((fd->flags & SPIFFS_O_DIRECT) == 0) {
 808130c:	9e01      	ldr	r6, [sp, #4]
 808130e:	8bb3      	ldrh	r3, [r6, #28]
 8081310:	069b      	lsls	r3, r3, #26
 8081312:	d4f8      	bmi.n	8081306 <spiffs_fflush_cache+0x10>
    if (fd->cache_page == 0) {
 8081314:	6a33      	ldr	r3, [r6, #32]
 8081316:	b923      	cbnz	r3, 8081322 <spiffs_fflush_cache+0x2c>
      fd->cache_page = spiffs_cache_page_get_by_fd(fs, fd);
 8081318:	4631      	mov	r1, r6
 808131a:	4628      	mov	r0, r5
 808131c:	f7ff f85a 	bl	80803d4 <spiffs_cache_page_get_by_fd>
 8081320:	6230      	str	r0, [r6, #32]
    if (fd->cache_page) {
 8081322:	9801      	ldr	r0, [sp, #4]
 8081324:	6a02      	ldr	r2, [r0, #32]
 8081326:	2a00      	cmp	r2, #0
 8081328:	d0ed      	beq.n	8081306 <spiffs_fflush_cache+0x10>
          spiffs_get_cache_page(fs, spiffs_get_cache(fs), fd->cache_page->ix),
 808132a:	69e9      	ldr	r1, [r5, #28]
 808132c:	6dec      	ldr	r4, [r5, #92]	; 0x5c
 808132e:	f101 0314 	add.w	r3, r1, #20
 8081332:	7851      	ldrb	r1, [r2, #1]
 8081334:	6924      	ldr	r4, [r4, #16]
 8081336:	4359      	muls	r1, r3
 8081338:	3114      	adds	r1, #20
      res = spiffs_hydro_write(fs, fd,
 808133a:	8a13      	ldrh	r3, [r2, #16]
 808133c:	4421      	add	r1, r4
 808133e:	68d2      	ldr	r2, [r2, #12]
 8081340:	f7ff ffb2 	bl	80812a8 <spiffs_hydro_write.isra.0>
      spiffs_cache_fd_release(fs, fd->cache_page);
 8081344:	9b01      	ldr	r3, [sp, #4]
      if (res < SPIFFS_OK) {
 8081346:	1e04      	subs	r4, r0, #0
        fs->err_code = res;
 8081348:	bfb8      	it	lt
 808134a:	646c      	strlt	r4, [r5, #68]	; 0x44
      spiffs_cache_fd_release(fs, fd->cache_page);
 808134c:	4628      	mov	r0, r5
 808134e:	6a19      	ldr	r1, [r3, #32]
 8081350:	f7ff f872 	bl	8080438 <spiffs_cache_fd_release>
 8081354:	e7d7      	b.n	8081306 <spiffs_fflush_cache+0x10>
	...

08081358 <SPIFFS_format>:
s32_t SPIFFS_format(spiffs *fs) {
 8081358:	b570      	push	{r4, r5, r6, lr}
  SPIFFS_API_CHECK_CFG(fs);
 808135a:	4b14      	ldr	r3, [pc, #80]	; (80813ac <SPIFFS_format+0x54>)
 808135c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
s32_t SPIFFS_format(spiffs *fs) {
 808135e:	4605      	mov	r5, r0
  SPIFFS_API_CHECK_CFG(fs);
 8081360:	429a      	cmp	r2, r3
 8081362:	d002      	beq.n	808136a <SPIFFS_format+0x12>
 8081364:	4812      	ldr	r0, [pc, #72]	; (80813b0 <SPIFFS_format+0x58>)
 8081366:	6468      	str	r0, [r5, #68]	; 0x44
}
 8081368:	bd70      	pop	{r4, r5, r6, pc}
  if (SPIFFS_CHECK_MOUNT(fs)) {
 808136a:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 808136e:	b124      	cbz	r4, 808137a <SPIFFS_format+0x22>
    fs->err_code = SPIFFS_ERR_MOUNTED;
 8081370:	4b10      	ldr	r3, [pc, #64]	; (80813b4 <SPIFFS_format+0x5c>)
 8081372:	6443      	str	r3, [r0, #68]	; 0x44
    return -1;
 8081374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8081378:	e7f6      	b.n	8081368 <SPIFFS_format+0x10>
  SPIFFS_LOCK(fs);
 808137a:	f00b fc01 	bl	808cb80 <spiffsParticleLock>
s32_t SPIFFS_format(spiffs *fs) {
 808137e:	4626      	mov	r6, r4
  while (bix < fs->block_count) {
 8081380:	6a2a      	ldr	r2, [r5, #32]
 8081382:	b2a1      	uxth	r1, r4
 8081384:	4291      	cmp	r1, r2
 8081386:	d303      	bcc.n	8081390 <SPIFFS_format+0x38>
  SPIFFS_UNLOCK(fs);
 8081388:	f00b fc00 	bl	808cb8c <spiffsParticleUnlock>
  return 0;
 808138c:	2000      	movs	r0, #0
 808138e:	e7eb      	b.n	8081368 <SPIFFS_format+0x10>
    res = spiffs_erase_block(fs, bix);
 8081390:	4628      	mov	r0, r5
    fs->max_erase_count = 0;
 8081392:	f8a5 6056 	strh.w	r6, [r5, #86]	; 0x56
    res = spiffs_erase_block(fs, bix);
 8081396:	f001 f831 	bl	80823fc <spiffs_erase_block>
    if (res != SPIFFS_OK) {
 808139a:	3401      	adds	r4, #1
 808139c:	2800      	cmp	r0, #0
 808139e:	d0ef      	beq.n	8081380 <SPIFFS_format+0x28>
    SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 80813a0:	4c05      	ldr	r4, [pc, #20]	; (80813b8 <SPIFFS_format+0x60>)
 80813a2:	646c      	str	r4, [r5, #68]	; 0x44
 80813a4:	f00b fbf2 	bl	808cb8c <spiffsParticleUnlock>
 80813a8:	4620      	mov	r0, r4
 80813aa:	e7dd      	b.n	8081368 <SPIFFS_format+0x10>
 80813ac:	20090315 	.word	0x20090315
 80813b0:	ffffd8d8 	.word	0xffffd8d8
 80813b4:	ffffd8d6 	.word	0xffffd8d6
 80813b8:	ffffd8d5 	.word	0xffffd8d5

080813bc <SPIFFS_mount>:
    spiffs_check_callback check_cb_f) {
 80813bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80813c0:	4604      	mov	r4, r0
 80813c2:	460e      	mov	r6, r1
 80813c4:	b087      	sub	sp, #28
 80813c6:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80813c8:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
  SPIFFS_API_DBG("%s "
 80813cc:	e9cd 8703 	strd	r8, r7, [sp, #12]
    spiffs_check_callback check_cb_f) {
 80813d0:	461d      	mov	r5, r3
  SPIFFS_API_DBG("%s "
 80813d2:	6903      	ldr	r3, [r0, #16]
 80813d4:	495a      	ldr	r1, [pc, #360]	; (8081540 <SPIFFS_mount+0x184>)
 80813d6:	9302      	str	r3, [sp, #8]
 80813d8:	6943      	ldr	r3, [r0, #20]
    spiffs_check_callback check_cb_f) {
 80813da:	4692      	mov	sl, r2
  SPIFFS_API_DBG("%s "
 80813dc:	9301      	str	r3, [sp, #4]
 80813de:	6983      	ldr	r3, [r0, #24]
 80813e0:	9300      	str	r3, [sp, #0]
 80813e2:	69c3      	ldr	r3, [r0, #28]
 80813e4:	68c2      	ldr	r2, [r0, #12]
 80813e6:	4857      	ldr	r0, [pc, #348]	; (8081544 <SPIFFS_mount+0x188>)
 80813e8:	f00b fbae 	bl	808cb48 <spiffsParticleTraceLog>
  SPIFFS_LOCK(fs);
 80813ec:	f00b fbc8 	bl	808cb80 <spiffsParticleLock>
  memset(fs, 0, sizeof(spiffs));
 80813f0:	2280      	movs	r2, #128	; 0x80
 80813f2:	2100      	movs	r1, #0
 80813f4:	4620      	mov	r0, r4
  user_data = fs->user_data;
 80813f6:	f8d4 b078 	ldr.w	fp, [r4, #120]	; 0x78
  memset(fs, 0, sizeof(spiffs));
 80813fa:	f010 fd63 	bl	8091ec4 <memset>
  _SPIFFS_MEMCPY(&fs->cfg, config, sizeof(spiffs_config));
 80813fe:	4631      	mov	r1, r6
 8081400:	4623      	mov	r3, r4
 8081402:	f106 0220 	add.w	r2, r6, #32
 8081406:	f851 0b04 	ldr.w	r0, [r1], #4
 808140a:	4291      	cmp	r1, r2
 808140c:	f843 0b04 	str.w	r0, [r3], #4
 8081410:	d1f9      	bne.n	8081406 <SPIFFS_mount+0x4a>
  fs->block_count = SPIFFS_CFG_PHYS_SZ(fs) / SPIFFS_CFG_LOG_BLOCK_SZ(fs);
 8081412:	69a2      	ldr	r2, [r4, #24]
 8081414:	68e3      	ldr	r3, [r4, #12]
  memset(fd_space, 0, fd_space_size);
 8081416:	2100      	movs	r1, #0
  fs->block_count = SPIFFS_CFG_PHYS_SZ(fs) / SPIFFS_CFG_LOG_BLOCK_SZ(fs);
 8081418:	fbb3 f3f2 	udiv	r3, r3, r2
  fs->lu_work = &work[SPIFFS_CFG_LOG_PAGE_SZ(fs)];
 808141c:	69e2      	ldr	r2, [r4, #28]
  memset(fd_space, 0, fd_space_size);
 808141e:	4628      	mov	r0, r5
  fs->lu_work = &work[SPIFFS_CFG_LOG_PAGE_SZ(fs)];
 8081420:	4452      	add	r2, sl
  fs->block_count = SPIFFS_CFG_PHYS_SZ(fs) / SPIFFS_CFG_LOG_BLOCK_SZ(fs);
 8081422:	6223      	str	r3, [r4, #32]
  fs->lu_work = &work[SPIFFS_CFG_LOG_PAGE_SZ(fs)];
 8081424:	6362      	str	r2, [r4, #52]	; 0x34
  fs->user_data = user_data;
 8081426:	f8c4 b078 	str.w	fp, [r4, #120]	; 0x78
  memset(fd_space, 0, fd_space_size);
 808142a:	4642      	mov	r2, r8
  fs->work = &work[0];
 808142c:	f8c4 a038 	str.w	sl, [r4, #56]	; 0x38
  memset(fd_space, 0, fd_space_size);
 8081430:	f010 fd48 	bl	8091ec4 <memset>
  fs->fd_count = (fd_space_size/sizeof(spiffs_fd));
 8081434:	2230      	movs	r2, #48	; 0x30
  if (addr_lsb) {
 8081436:	f015 0303 	ands.w	r3, r5, #3
    fd_space += (ptr_size-addr_lsb);
 808143a:	bf1c      	itt	ne
 808143c:	f1c3 0304 	rsbne	r3, r3, #4
    fd_space_size -= (ptr_size-addr_lsb);
 8081440:	eba8 0803 	subne.w	r8, r8, r3
  fs->fd_count = (fd_space_size/sizeof(spiffs_fd));
 8081444:	fbb8 f2f2 	udiv	r2, r8, r2
    fd_space += (ptr_size-addr_lsb);
 8081448:	bf18      	it	ne
 808144a:	18ed      	addne	r5, r5, r3
  if (addr_lsb) {
 808144c:	f019 0303 	ands.w	r3, r9, #3
    cache_8 += (ptr_size-addr_lsb);
 8081450:	bf1e      	ittt	ne
 8081452:	f1c3 0304 	rsbne	r3, r3, #4
    cache_size -= (ptr_size-addr_lsb);
 8081456:	1aff      	subne	r7, r7, r3
    cache_8 += (ptr_size-addr_lsb);
 8081458:	4499      	addne	r9, r3
  if (cache_size & (ptr_size-1)) {
 808145a:	07bb      	lsls	r3, r7, #30
  fs->cache_size = (cache_size > (SPIFFS_CFG_LOG_PAGE_SZ(fs)*32)) ? SPIFFS_CFG_LOG_PAGE_SZ(fs)*32 : cache_size;
 808145c:	69e3      	ldr	r3, [r4, #28]
    cache_size -= (cache_size & (ptr_size-1));
 808145e:	bf18      	it	ne
 8081460:	f027 0703 	bicne.w	r7, r7, #3
  fs->cache_size = (cache_size > (SPIFFS_CFG_LOG_PAGE_SZ(fs)*32)) ? SPIFFS_CFG_LOG_PAGE_SZ(fs)*32 : cache_size;
 8081464:	015b      	lsls	r3, r3, #5
 8081466:	42bb      	cmp	r3, r7
 8081468:	bf94      	ite	ls
 808146a:	6623      	strls	r3, [r4, #96]	; 0x60
 808146c:	6627      	strhi	r7, [r4, #96]	; 0x60
  spiffs_cache_init(fs);
 808146e:	4620      	mov	r0, r4
  fs->fd_count = (fd_space_size/sizeof(spiffs_fd));
 8081470:	6422      	str	r2, [r4, #64]	; 0x40
  fs->fd_space = fd_space;
 8081472:	63e5      	str	r5, [r4, #60]	; 0x3c
  fs->cache = cache;
 8081474:	f8c4 905c 	str.w	r9, [r4, #92]	; 0x5c
  spiffs_cache_init(fs);
 8081478:	f7fe fff8 	bl	808046c <spiffs_cache_init>
  res = SPIFFS_CHECK_MAGIC_POSSIBLE(fs) ? SPIFFS_OK : SPIFFS_ERR_MAGIC_NOT_POSSIBLE;
 808147c:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 8081480:	fbb3 f3f2 	udiv	r3, r3, r2
 8081484:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8081488:	ea4f 0143 	mov.w	r1, r3, lsl #1
 808148c:	bf94      	ite	ls
 808148e:	fbb1 f1f2 	udivls	r1, r1, r2
 8081492:	2101      	movhi	r1, #1
 8081494:	0850      	lsrs	r0, r2, #1
 8081496:	1a5b      	subs	r3, r3, r1
 8081498:	fbb3 f1f0 	udiv	r1, r3, r0
 808149c:	fb00 3311 	mls	r3, r0, r1, r3
 80814a0:	3a04      	subs	r2, #4
 80814a2:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 80814a6:	d30d      	bcc.n	80814c4 <SPIFFS_mount+0x108>
  fs->config_magic = SPIFFS_CONFIG_MAGIC;
 80814a8:	4b27      	ldr	r3, [pc, #156]	; (8081548 <SPIFFS_mount+0x18c>)
  res = spiffs_obj_lu_scan(fs);
 80814aa:	4620      	mov	r0, r4
  fs->config_magic = SPIFFS_CONFIG_MAGIC;
 80814ac:	67e3      	str	r3, [r4, #124]	; 0x7c
  res = spiffs_obj_lu_scan(fs);
 80814ae:	f001 f817 	bl	80824e0 <spiffs_obj_lu_scan>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 80814b2:	1e05      	subs	r5, r0, #0
 80814b4:	da08      	bge.n	80814c8 <SPIFFS_mount+0x10c>
 80814b6:	6465      	str	r5, [r4, #68]	; 0x44
 80814b8:	f00b fb68 	bl	808cb8c <spiffsParticleUnlock>
}
 80814bc:	4628      	mov	r0, r5
 80814be:	b007      	add	sp, #28
 80814c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 80814c4:	4d21      	ldr	r5, [pc, #132]	; (808154c <SPIFFS_mount+0x190>)
 80814c6:	e7f6      	b.n	80814b6 <SPIFFS_mount+0xfa>
  SPIFFS_DBG("page index byte len:         "_SPIPRIi"\n", (u32_t)SPIFFS_CFG_LOG_PAGE_SZ(fs));
 80814c8:	69e1      	ldr	r1, [r4, #28]
 80814ca:	4821      	ldr	r0, [pc, #132]	; (8081550 <SPIFFS_mount+0x194>)
 80814cc:	f00b fb20 	bl	808cb10 <spiffsParticleInfoLog>
  SPIFFS_DBG("object lookup pages:         "_SPIPRIi"\n", (u32_t)SPIFFS_OBJ_LOOKUP_PAGES(fs));
 80814d0:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 80814d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80814d8:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 80814dc:	ea4f 0143 	mov.w	r1, r3, lsl #1
 80814e0:	bf94      	ite	ls
 80814e2:	fbb1 f1f2 	udivls	r1, r1, r2
 80814e6:	2101      	movhi	r1, #1
 80814e8:	481a      	ldr	r0, [pc, #104]	; (8081554 <SPIFFS_mount+0x198>)
 80814ea:	f00b fb11 	bl	808cb10 <spiffsParticleInfoLog>
  SPIFFS_DBG("page pages per block:        "_SPIPRIi"\n", (u32_t)SPIFFS_PAGES_PER_BLOCK(fs));
 80814ee:	e9d4 1306 	ldrd	r1, r3, [r4, #24]
 80814f2:	4819      	ldr	r0, [pc, #100]	; (8081558 <SPIFFS_mount+0x19c>)
 80814f4:	fbb1 f1f3 	udiv	r1, r1, r3
 80814f8:	f00b fb0a 	bl	808cb10 <spiffsParticleInfoLog>
  SPIFFS_DBG("page header length:          "_SPIPRIi"\n", (u32_t)sizeof(spiffs_page_header));
 80814fc:	2105      	movs	r1, #5
 80814fe:	4817      	ldr	r0, [pc, #92]	; (808155c <SPIFFS_mount+0x1a0>)
 8081500:	f00b fb06 	bl	808cb10 <spiffsParticleInfoLog>
  SPIFFS_DBG("object header index entries: "_SPIPRIi"\n", (u32_t)SPIFFS_OBJ_HDR_IX_LEN(fs));
 8081504:	69e1      	ldr	r1, [r4, #28]
 8081506:	4816      	ldr	r0, [pc, #88]	; (8081560 <SPIFFS_mount+0x1a4>)
 8081508:	392d      	subs	r1, #45	; 0x2d
 808150a:	0849      	lsrs	r1, r1, #1
 808150c:	f00b fb00 	bl	808cb10 <spiffsParticleInfoLog>
  SPIFFS_DBG("object index entries:        "_SPIPRIi"\n", (u32_t)SPIFFS_OBJ_IX_LEN(fs));
 8081510:	69e1      	ldr	r1, [r4, #28]
 8081512:	4814      	ldr	r0, [pc, #80]	; (8081564 <SPIFFS_mount+0x1a8>)
 8081514:	3908      	subs	r1, #8
 8081516:	0849      	lsrs	r1, r1, #1
 8081518:	f00b fafa 	bl	808cb10 <spiffsParticleInfoLog>
  SPIFFS_DBG("available file descriptors:  "_SPIPRIi"\n", (u32_t)fs->fd_count);
 808151c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 808151e:	4812      	ldr	r0, [pc, #72]	; (8081568 <SPIFFS_mount+0x1ac>)
 8081520:	f00b faf6 	bl	808cb10 <spiffsParticleInfoLog>
  SPIFFS_DBG("free blocks:                 "_SPIPRIi"\n", (u32_t)fs->free_blocks);
 8081524:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8081526:	4811      	ldr	r0, [pc, #68]	; (808156c <SPIFFS_mount+0x1b0>)
 8081528:	f00b faf2 	bl	808cb10 <spiffsParticleInfoLog>
  fs->check_cb_f = check_cb_f;
 808152c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  return 0;
 808152e:	2500      	movs	r5, #0
  fs->check_cb_f = check_cb_f;
 8081530:	66e3      	str	r3, [r4, #108]	; 0x6c
  fs->mounted = 1;
 8081532:	2301      	movs	r3, #1
 8081534:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  SPIFFS_UNLOCK(fs);
 8081538:	f00b fb28 	bl	808cb8c <spiffsParticleUnlock>
  return 0;
 808153c:	e7be      	b.n	80814bc <SPIFFS_mount+0x100>
 808153e:	bf00      	nop
 8081540:	08092870 	.word	0x08092870
 8081544:	080926f7 	.word	0x080926f7
 8081548:	20090315 	.word	0x20090315
 808154c:	ffffd8d4 	.word	0xffffd8d4
 8081550:	08092740 	.word	0x08092740
 8081554:	08092761 	.word	0x08092761
 8081558:	08092782 	.word	0x08092782
 808155c:	080927a3 	.word	0x080927a3
 8081560:	080927c4 	.word	0x080927c4
 8081564:	080927e5 	.word	0x080927e5
 8081568:	08092806 	.word	0x08092806
 808156c:	08092827 	.word	0x08092827

08081570 <SPIFFS_open>:
spiffs_file SPIFFS_open(spiffs *fs, const char *path, spiffs_flags flags, spiffs_mode mode) {
 8081570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8081574:	4605      	mov	r5, r0
 8081576:	4688      	mov	r8, r1
 8081578:	4616      	mov	r6, r2
 808157a:	461f      	mov	r7, r3
  SPIFFS_API_DBG("%s '%s' "_SPIPRIfl "\n", __func__, path, flags);
 808157c:	4844      	ldr	r0, [pc, #272]	; (8081690 <SPIFFS_open+0x120>)
 808157e:	4613      	mov	r3, r2
spiffs_file SPIFFS_open(spiffs *fs, const char *path, spiffs_flags flags, spiffs_mode mode) {
 8081580:	b085      	sub	sp, #20
  SPIFFS_API_DBG("%s '%s' "_SPIPRIfl "\n", __func__, path, flags);
 8081582:	460a      	mov	r2, r1
 8081584:	4943      	ldr	r1, [pc, #268]	; (8081694 <SPIFFS_open+0x124>)
 8081586:	f00b fadf 	bl	808cb48 <spiffsParticleTraceLog>
  SPIFFS_API_CHECK_CFG(fs);
 808158a:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 808158c:	4b42      	ldr	r3, [pc, #264]	; (8081698 <SPIFFS_open+0x128>)
 808158e:	429a      	cmp	r2, r3
 8081590:	d004      	beq.n	808159c <SPIFFS_open+0x2c>
 8081592:	4842      	ldr	r0, [pc, #264]	; (808169c <SPIFFS_open+0x12c>)
  SPIFFS_API_CHECK_MOUNT(fs);
 8081594:	6468      	str	r0, [r5, #68]	; 0x44
}
 8081596:	b005      	add	sp, #20
 8081598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  SPIFFS_API_CHECK_MOUNT(fs);
 808159c:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 80815a0:	b90b      	cbnz	r3, 80815a6 <SPIFFS_open+0x36>
 80815a2:	483f      	ldr	r0, [pc, #252]	; (80816a0 <SPIFFS_open+0x130>)
 80815a4:	e7f6      	b.n	8081594 <SPIFFS_open+0x24>
  if (strlen(path) > SPIFFS_OBJ_NAME_LEN - 1) {
 80815a6:	4640      	mov	r0, r8
 80815a8:	f010 fcfd 	bl	8091fa6 <strlen>
 80815ac:	281f      	cmp	r0, #31
 80815ae:	d901      	bls.n	80815b4 <SPIFFS_open+0x44>
    SPIFFS_API_CHECK_RES(fs, SPIFFS_ERR_NAME_TOO_LONG);
 80815b0:	483c      	ldr	r0, [pc, #240]	; (80816a4 <SPIFFS_open+0x134>)
 80815b2:	e7ef      	b.n	8081594 <SPIFFS_open+0x24>
  SPIFFS_LOCK(fs);
 80815b4:	f00b fae4 	bl	808cb80 <spiffsParticleLock>
  s32_t res = spiffs_fd_find_new(fs, &fd, path);
 80815b8:	4642      	mov	r2, r8
 80815ba:	4628      	mov	r0, r5
 80815bc:	a903      	add	r1, sp, #12
 80815be:	f003 f8f1 	bl	80847a4 <spiffs_fd_find_new>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 80815c2:	1e04      	subs	r4, r0, #0
 80815c4:	da04      	bge.n	80815d0 <SPIFFS_open+0x60>
    SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 80815c6:	646c      	str	r4, [r5, #68]	; 0x44
 80815c8:	f00b fae0 	bl	808cb8c <spiffsParticleUnlock>
 80815cc:	b220      	sxth	r0, r4
 80815ce:	e7e2      	b.n	8081596 <SPIFFS_open+0x26>
  res = spiffs_object_find_object_index_header_by_name(fs, (const u8_t*)path, &pix);
 80815d0:	f10d 0908 	add.w	r9, sp, #8
 80815d4:	464a      	mov	r2, r9
 80815d6:	4641      	mov	r1, r8
 80815d8:	4628      	mov	r0, r5
 80815da:	f002 fb81 	bl	8083ce0 <spiffs_object_find_object_index_header_by_name>
  if ((flags & SPIFFS_O_CREAT) == 0) {
 80815de:	0772      	lsls	r2, r6, #29
  res = spiffs_object_find_object_index_header_by_name(fs, (const u8_t*)path, &pix);
 80815e0:	4604      	mov	r4, r0
  if ((flags & SPIFFS_O_CREAT) == 0) {
 80815e2:	d437      	bmi.n	8081654 <SPIFFS_open+0xe4>
    if (res < SPIFFS_OK) {
 80815e4:	2800      	cmp	r0, #0
 80815e6:	da24      	bge.n	8081632 <SPIFFS_open+0xc2>
      spiffs_fd_return(fs, fd->file_nbr);
 80815e8:	9b03      	ldr	r3, [sp, #12]
 80815ea:	4628      	mov	r0, r5
 80815ec:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80815f0:	f003 f94c 	bl	808488c <spiffs_fd_return>
 80815f4:	e7e7      	b.n	80815c6 <SPIFFS_open+0x56>
    if (res < SPIFFS_OK) {
 80815f6:	2c00      	cmp	r4, #0
 80815f8:	dbf6      	blt.n	80815e8 <SPIFFS_open+0x78>
  res = spiffs_object_open_by_page(fs, pix, fd, flags, mode);
 80815fa:	4633      	mov	r3, r6
 80815fc:	4628      	mov	r0, r5
 80815fe:	9a03      	ldr	r2, [sp, #12]
 8081600:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8081604:	9700      	str	r7, [sp, #0]
 8081606:	f001 fc95 	bl	8082f34 <spiffs_object_open_by_page>
  if (res < SPIFFS_OK) {
 808160a:	1e04      	subs	r4, r0, #0
 808160c:	dbec      	blt.n	80815e8 <SPIFFS_open+0x78>
  if (flags & SPIFFS_O_TRUNC) {
 808160e:	07b3      	lsls	r3, r6, #30
 8081610:	d506      	bpl.n	8081620 <SPIFFS_open+0xb0>
    res = spiffs_object_truncate(fd, 0, 0);
 8081612:	2200      	movs	r2, #0
 8081614:	9803      	ldr	r0, [sp, #12]
 8081616:	4611      	mov	r1, r2
 8081618:	f002 fb9e 	bl	8083d58 <spiffs_object_truncate>
    if (res < SPIFFS_OK) {
 808161c:	1e04      	subs	r4, r0, #0
 808161e:	dbe3      	blt.n	80815e8 <SPIFFS_open+0x78>
  fd->fdoffset = 0;
 8081620:	2200      	movs	r2, #0
 8081622:	9b03      	ldr	r3, [sp, #12]
 8081624:	619a      	str	r2, [r3, #24]
  SPIFFS_UNLOCK(fs);
 8081626:	f00b fab1 	bl	808cb8c <spiffsParticleUnlock>
  return SPIFFS_FH_OFFS(fs, fd->file_nbr);
 808162a:	9b03      	ldr	r3, [sp, #12]
 808162c:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8081630:	e7b1      	b.n	8081596 <SPIFFS_open+0x26>
  if (res == SPIFFS_OK &&
 8081632:	d1e2      	bne.n	80815fa <SPIFFS_open+0x8a>
 8081634:	f006 0344 	and.w	r3, r6, #68	; 0x44
 8081638:	2b44      	cmp	r3, #68	; 0x44
 808163a:	d1de      	bne.n	80815fa <SPIFFS_open+0x8a>
    spiffs_fd_return(fs, fd->file_nbr);
 808163c:	9b03      	ldr	r3, [sp, #12]
    SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 808163e:	4c1a      	ldr	r4, [pc, #104]	; (80816a8 <SPIFFS_open+0x138>)
    spiffs_fd_return(fs, fd->file_nbr);
 8081640:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8081644:	4628      	mov	r0, r5
 8081646:	f003 f921 	bl	808488c <spiffs_fd_return>
    SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 808164a:	646c      	str	r4, [r5, #68]	; 0x44
 808164c:	f00b fa9e 	bl	808cb8c <spiffsParticleUnlock>
 8081650:	4620      	mov	r0, r4
 8081652:	e7a0      	b.n	8081596 <SPIFFS_open+0x26>
  if (res == SPIFFS_OK &&
 8081654:	2800      	cmp	r0, #0
 8081656:	d0ed      	beq.n	8081634 <SPIFFS_open+0xc4>
  if ((flags & SPIFFS_O_CREAT) && res == SPIFFS_ERR_NOT_FOUND) {
 8081658:	4b14      	ldr	r3, [pc, #80]	; (80816ac <SPIFFS_open+0x13c>)
 808165a:	429c      	cmp	r4, r3
 808165c:	d1cb      	bne.n	80815f6 <SPIFFS_open+0x86>
    res = spiffs_obj_lu_find_free_obj_id(fs, &obj_id, 0);
 808165e:	2200      	movs	r2, #0
 8081660:	4628      	mov	r0, r5
 8081662:	f10d 010a 	add.w	r1, sp, #10
 8081666:	f002 ff9f 	bl	80845a8 <spiffs_obj_lu_find_free_obj_id>
    if (res < SPIFFS_OK) {
 808166a:	1e04      	subs	r4, r0, #0
 808166c:	dbbc      	blt.n	80815e8 <SPIFFS_open+0x78>
    res = spiffs_object_create(fs, obj_id, (const u8_t*)path, 0, SPIFFS_TYPE_FILE, &pix);
 808166e:	2301      	movs	r3, #1
 8081670:	4642      	mov	r2, r8
 8081672:	9300      	str	r3, [sp, #0]
 8081674:	4628      	mov	r0, r5
 8081676:	2300      	movs	r3, #0
 8081678:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 808167c:	f8cd 9004 	str.w	r9, [sp, #4]
 8081680:	f001 fb16 	bl	8082cb0 <spiffs_object_create>
    if (res < SPIFFS_OK) {
 8081684:	1e04      	subs	r4, r0, #0
 8081686:	dbaf      	blt.n	80815e8 <SPIFFS_open+0x78>
    flags &= ~SPIFFS_O_TRUNC;
 8081688:	f026 0602 	bic.w	r6, r6, #2
 808168c:	b2b6      	uxth	r6, r6
  if ((flags & SPIFFS_O_CREAT) && res == SPIFFS_ERR_NOT_FOUND) {
 808168e:	e7b4      	b.n	80815fa <SPIFFS_open+0x8a>
 8081690:	08092851 	.word	0x08092851
 8081694:	0809287d 	.word	0x0809287d
 8081698:	20090315 	.word	0x20090315
 808169c:	ffffd8d8 	.word	0xffffd8d8
 80816a0:	ffffd8f0 	.word	0xffffd8f0
 80816a4:	ffffd8cc 	.word	0xffffd8cc
 80816a8:	ffffd8d2 	.word	0xffffd8d2
 80816ac:	ffffd8ee 	.word	0xffffd8ee

080816b0 <SPIFFS_read>:
s32_t SPIFFS_read(spiffs *fs, spiffs_file fh, void *buf, s32_t len) {
 80816b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80816b4:	4605      	mov	r5, r0
 80816b6:	460e      	mov	r6, r1
 80816b8:	4690      	mov	r8, r2
  SPIFFS_API_DBG("%s "_SPIPRIfd " "_SPIPRIi "\n", __func__, fh, len);
 80816ba:	4838      	ldr	r0, [pc, #224]	; (808179c <SPIFFS_read+0xec>)
 80816bc:	460a      	mov	r2, r1
 80816be:	4938      	ldr	r1, [pc, #224]	; (80817a0 <SPIFFS_read+0xf0>)
s32_t SPIFFS_read(spiffs *fs, spiffs_file fh, void *buf, s32_t len) {
 80816c0:	461c      	mov	r4, r3
  SPIFFS_API_DBG("%s "_SPIPRIfd " "_SPIPRIi "\n", __func__, fh, len);
 80816c2:	f00b fa41 	bl	808cb48 <spiffsParticleTraceLog>
  SPIFFS_API_CHECK_CFG(fs);
 80816c6:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 80816c8:	4b36      	ldr	r3, [pc, #216]	; (80817a4 <SPIFFS_read+0xf4>)
 80816ca:	429a      	cmp	r2, r3
 80816cc:	d005      	beq.n	80816da <SPIFFS_read+0x2a>
 80816ce:	4c36      	ldr	r4, [pc, #216]	; (80817a8 <SPIFFS_read+0xf8>)
  SPIFFS_API_CHECK_MOUNT(fs);
 80816d0:	646c      	str	r4, [r5, #68]	; 0x44
}
 80816d2:	4620      	mov	r0, r4
 80816d4:	b002      	add	sp, #8
 80816d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  SPIFFS_API_CHECK_MOUNT(fs);
 80816da:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 80816de:	b90b      	cbnz	r3, 80816e4 <SPIFFS_read+0x34>
 80816e0:	4c32      	ldr	r4, [pc, #200]	; (80817ac <SPIFFS_read+0xfc>)
 80816e2:	e7f5      	b.n	80816d0 <SPIFFS_read+0x20>
  SPIFFS_LOCK(fs);
 80816e4:	f00b fa4c 	bl	808cb80 <spiffsParticleLock>
  res = spiffs_fd_get(fs, fh, &fd);
 80816e8:	4631      	mov	r1, r6
 80816ea:	4628      	mov	r0, r5
 80816ec:	aa01      	add	r2, sp, #4
 80816ee:	f003 f8e9 	bl	80848c4 <spiffs_fd_get>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 80816f2:	1e07      	subs	r7, r0, #0
 80816f4:	da08      	bge.n	8081708 <SPIFFS_read+0x58>
 80816f6:	646f      	str	r7, [r5, #68]	; 0x44
 80816f8:	f00b fa48 	bl	808cb8c <spiffsParticleUnlock>
 80816fc:	463c      	mov	r4, r7
    res = 0;
 80816fe:	4b2c      	ldr	r3, [pc, #176]	; (80817b0 <SPIFFS_read+0x100>)
 8081700:	429c      	cmp	r4, r3
 8081702:	bf08      	it	eq
 8081704:	2400      	moveq	r4, #0
 8081706:	e7e4      	b.n	80816d2 <SPIFFS_read+0x22>
  if ((fd->flags & SPIFFS_O_RDONLY) == 0) {
 8081708:	9b01      	ldr	r3, [sp, #4]
 808170a:	8b9a      	ldrh	r2, [r3, #28]
 808170c:	0712      	lsls	r2, r2, #28
 808170e:	d404      	bmi.n	808171a <SPIFFS_read+0x6a>
    SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 8081710:	4c28      	ldr	r4, [pc, #160]	; (80817b4 <SPIFFS_read+0x104>)
 8081712:	646c      	str	r4, [r5, #68]	; 0x44
 8081714:	f00b fa3a 	bl	808cb8c <spiffsParticleUnlock>
  if (res == SPIFFS_ERR_END_OF_OBJECT) {
 8081718:	e7db      	b.n	80816d2 <SPIFFS_read+0x22>
  if (fd->size == SPIFFS_UNDEFINED_LEN && len > 0) {
 808171a:	689b      	ldr	r3, [r3, #8]
 808171c:	3301      	adds	r3, #1
 808171e:	d107      	bne.n	8081730 <SPIFFS_read+0x80>
 8081720:	2c00      	cmp	r4, #0
 8081722:	dd05      	ble.n	8081730 <SPIFFS_read+0x80>
    SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 8081724:	4b22      	ldr	r3, [pc, #136]	; (80817b0 <SPIFFS_read+0x100>)
    res = 0;
 8081726:	2400      	movs	r4, #0
    SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 8081728:	646b      	str	r3, [r5, #68]	; 0x44
 808172a:	f00b fa2f 	bl	808cb8c <spiffsParticleUnlock>
  if (res == SPIFFS_ERR_END_OF_OBJECT) {
 808172e:	e7d0      	b.n	80816d2 <SPIFFS_read+0x22>
  spiffs_fflush_cache(fs, fh);
 8081730:	4631      	mov	r1, r6
 8081732:	4628      	mov	r0, r5
 8081734:	f7ff fddf 	bl	80812f6 <spiffs_fflush_cache>
  if (fd->fdoffset + len >= fd->size) {
 8081738:	9801      	ldr	r0, [sp, #4]
 808173a:	6981      	ldr	r1, [r0, #24]
 808173c:	6883      	ldr	r3, [r0, #8]
 808173e:	190a      	adds	r2, r1, r4
 8081740:	429a      	cmp	r2, r3
 8081742:	d319      	bcc.n	8081778 <SPIFFS_read+0xc8>
    s32_t avail = fd->size - fd->fdoffset;
 8081744:	1a5c      	subs	r4, r3, r1
    if (avail <= 0) {
 8081746:	2c00      	cmp	r4, #0
 8081748:	ddec      	ble.n	8081724 <SPIFFS_read+0x74>
    res = spiffs_object_read(fd, fd->fdoffset, avail, (u8_t*)buf);
 808174a:	4643      	mov	r3, r8
 808174c:	4622      	mov	r2, r4
 808174e:	f002 fe07 	bl	8084360 <spiffs_object_read>
    if (res == SPIFFS_ERR_END_OF_OBJECT) {
 8081752:	4b17      	ldr	r3, [pc, #92]	; (80817b0 <SPIFFS_read+0x100>)
    res = spiffs_object_read(fd, fd->fdoffset, avail, (u8_t*)buf);
 8081754:	4606      	mov	r6, r0
    if (res == SPIFFS_ERR_END_OF_OBJECT) {
 8081756:	4298      	cmp	r0, r3
 8081758:	d108      	bne.n	808176c <SPIFFS_read+0xbc>
      fd->fdoffset += avail;
 808175a:	9a01      	ldr	r2, [sp, #4]
      return avail;
 808175c:	4626      	mov	r6, r4
      fd->fdoffset += avail;
 808175e:	6993      	ldr	r3, [r2, #24]
 8081760:	4423      	add	r3, r4
 8081762:	6193      	str	r3, [r2, #24]
      SPIFFS_UNLOCK(fs);
 8081764:	f00b fa12 	bl	808cb8c <spiffsParticleUnlock>
  if (res == SPIFFS_ERR_END_OF_OBJECT) {
 8081768:	4634      	mov	r4, r6
  return res;
 808176a:	e7b2      	b.n	80816d2 <SPIFFS_read+0x22>
      SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 808176c:	2800      	cmp	r0, #0
 808176e:	da0e      	bge.n	808178e <SPIFFS_read+0xde>
 8081770:	6468      	str	r0, [r5, #68]	; 0x44
 8081772:	f00b fa0b 	bl	808cb8c <spiffsParticleUnlock>
 8081776:	e7f7      	b.n	8081768 <SPIFFS_read+0xb8>
    res = spiffs_object_read(fd, fd->fdoffset, len, (u8_t*)buf);
 8081778:	4643      	mov	r3, r8
 808177a:	4622      	mov	r2, r4
 808177c:	f002 fdf0 	bl	8084360 <spiffs_object_read>
    SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 8081780:	1e06      	subs	r6, r0, #0
 8081782:	da04      	bge.n	808178e <SPIFFS_read+0xde>
 8081784:	646e      	str	r6, [r5, #68]	; 0x44
 8081786:	f00b fa01 	bl	808cb8c <spiffsParticleUnlock>
 808178a:	4634      	mov	r4, r6
 808178c:	e7b7      	b.n	80816fe <SPIFFS_read+0x4e>
  fd->fdoffset += len;
 808178e:	9a01      	ldr	r2, [sp, #4]
 8081790:	6993      	ldr	r3, [r2, #24]
 8081792:	4423      	add	r3, r4
 8081794:	6193      	str	r3, [r2, #24]
  SPIFFS_UNLOCK(fs);
 8081796:	f00b f9f9 	bl	808cb8c <spiffsParticleUnlock>
  return len;
 808179a:	e7b0      	b.n	80816fe <SPIFFS_read+0x4e>
 808179c:	0809285f 	.word	0x0809285f
 80817a0:	08092889 	.word	0x08092889
 80817a4:	20090315 	.word	0x20090315
 80817a8:	ffffd8d8 	.word	0xffffd8d8
 80817ac:	ffffd8f0 	.word	0xffffd8f0
 80817b0:	ffffd8ed 	.word	0xffffd8ed
 80817b4:	ffffd8da 	.word	0xffffd8da

080817b8 <SPIFFS_write>:
s32_t SPIFFS_write(spiffs *fs, spiffs_file fh, void *buf, s32_t len) {
 80817b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80817bc:	4605      	mov	r5, r0
 80817be:	460c      	mov	r4, r1
 80817c0:	4690      	mov	r8, r2
  SPIFFS_API_DBG("%s "_SPIPRIfd " "_SPIPRIi "\n", __func__, fh, len);
 80817c2:	4861      	ldr	r0, [pc, #388]	; (8081948 <SPIFFS_write+0x190>)
 80817c4:	460a      	mov	r2, r1
 80817c6:	4961      	ldr	r1, [pc, #388]	; (808194c <SPIFFS_write+0x194>)
s32_t SPIFFS_write(spiffs *fs, spiffs_file fh, void *buf, s32_t len) {
 80817c8:	461f      	mov	r7, r3
  SPIFFS_API_DBG("%s "_SPIPRIfd " "_SPIPRIi "\n", __func__, fh, len);
 80817ca:	f00b f9bd 	bl	808cb48 <spiffsParticleTraceLog>
  SPIFFS_API_CHECK_CFG(fs);
 80817ce:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 80817d0:	4b5f      	ldr	r3, [pc, #380]	; (8081950 <SPIFFS_write+0x198>)
 80817d2:	429a      	cmp	r2, r3
 80817d4:	d005      	beq.n	80817e2 <SPIFFS_write+0x2a>
 80817d6:	4c5f      	ldr	r4, [pc, #380]	; (8081954 <SPIFFS_write+0x19c>)
  SPIFFS_API_CHECK_MOUNT(fs);
 80817d8:	646c      	str	r4, [r5, #68]	; 0x44
}
 80817da:	4620      	mov	r0, r4
 80817dc:	b002      	add	sp, #8
 80817de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  SPIFFS_API_CHECK_MOUNT(fs);
 80817e2:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 80817e6:	b90b      	cbnz	r3, 80817ec <SPIFFS_write+0x34>
 80817e8:	4c5b      	ldr	r4, [pc, #364]	; (8081958 <SPIFFS_write+0x1a0>)
 80817ea:	e7f5      	b.n	80817d8 <SPIFFS_write+0x20>
  SPIFFS_LOCK(fs);
 80817ec:	f00b f9c8 	bl	808cb80 <spiffsParticleLock>
  res = spiffs_fd_get(fs, fh, &fd);
 80817f0:	4621      	mov	r1, r4
 80817f2:	4628      	mov	r0, r5
 80817f4:	aa01      	add	r2, sp, #4
 80817f6:	f003 f865 	bl	80848c4 <spiffs_fd_get>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 80817fa:	1e04      	subs	r4, r0, #0
 80817fc:	da03      	bge.n	8081806 <SPIFFS_write+0x4e>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 80817fe:	646c      	str	r4, [r5, #68]	; 0x44
  SPIFFS_UNLOCK(fs);
 8081800:	f00b f9c4 	bl	808cb8c <spiffsParticleUnlock>
  return res;
 8081804:	e7e9      	b.n	80817da <SPIFFS_write+0x22>
  if ((fd->flags & SPIFFS_O_WRONLY) == 0) {
 8081806:	9c01      	ldr	r4, [sp, #4]
 8081808:	8ba3      	ldrh	r3, [r4, #28]
 808180a:	06da      	lsls	r2, r3, #27
 808180c:	d401      	bmi.n	8081812 <SPIFFS_write+0x5a>
    SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 808180e:	4c53      	ldr	r4, [pc, #332]	; (808195c <SPIFFS_write+0x1a4>)
 8081810:	e7f5      	b.n	80817fe <SPIFFS_write+0x46>
  if ((fd->flags & SPIFFS_O_APPEND)) {
 8081812:	07db      	lsls	r3, r3, #31
 8081814:	d504      	bpl.n	8081820 <SPIFFS_write+0x68>
    fd->fdoffset = fd->size == SPIFFS_UNDEFINED_LEN ? 0 : fd->size;
 8081816:	68a3      	ldr	r3, [r4, #8]
 8081818:	1c5e      	adds	r6, r3, #1
 808181a:	bf08      	it	eq
 808181c:	2300      	moveq	r3, #0
 808181e:	61a3      	str	r3, [r4, #24]
  if (fd->cache_page == 0) {
 8081820:	6a23      	ldr	r3, [r4, #32]
  offset = fd->fdoffset;
 8081822:	69a6      	ldr	r6, [r4, #24]
  if (fd->cache_page == 0) {
 8081824:	b923      	cbnz	r3, 8081830 <SPIFFS_write+0x78>
    fd->cache_page = spiffs_cache_page_get_by_fd(fs, fd);
 8081826:	4621      	mov	r1, r4
 8081828:	4628      	mov	r0, r5
 808182a:	f7fe fdd3 	bl	80803d4 <spiffs_cache_page_get_by_fd>
 808182e:	6220      	str	r0, [r4, #32]
  if (fd->flags & SPIFFS_O_APPEND) {
 8081830:	9801      	ldr	r0, [sp, #4]
 8081832:	8b81      	ldrh	r1, [r0, #28]
 8081834:	07cc      	lsls	r4, r1, #31
 8081836:	d50b      	bpl.n	8081850 <SPIFFS_write+0x98>
    if (fd->size == SPIFFS_UNDEFINED_LEN) {
 8081838:	6886      	ldr	r6, [r0, #8]
      offset = 0;
 808183a:	1c72      	adds	r2, r6, #1
    if (fd->cache_page) {
 808183c:	6a02      	ldr	r2, [r0, #32]
      offset = 0;
 808183e:	bf08      	it	eq
 8081840:	2600      	moveq	r6, #0
    if (fd->cache_page) {
 8081842:	b12a      	cbz	r2, 8081850 <SPIFFS_write+0x98>
      offset = MAX(offset, fd->cache_page->offset + fd->cache_page->size);
 8081844:	8a13      	ldrh	r3, [r2, #16]
 8081846:	68d2      	ldr	r2, [r2, #12]
 8081848:	4413      	add	r3, r2
 808184a:	429e      	cmp	r6, r3
 808184c:	bf38      	it	cc
 808184e:	461e      	movcc	r6, r3
  if ((fd->flags & SPIFFS_O_DIRECT) == 0) {
 8081850:	068b      	lsls	r3, r1, #26
 8081852:	d474      	bmi.n	808193e <SPIFFS_write+0x186>
    if (len < (s32_t)SPIFFS_CFG_LOG_PAGE_SZ(fs)) {
 8081854:	69e9      	ldr	r1, [r5, #28]
 8081856:	6a02      	ldr	r2, [r0, #32]
 8081858:	42b9      	cmp	r1, r7
 808185a:	dd5b      	ble.n	8081914 <SPIFFS_write+0x15c>
      if (fd->cache_page) {
 808185c:	b1fa      	cbz	r2, 808189e <SPIFFS_write+0xe6>
        if (offset < fd->cache_page->offset || // writing before cache
 808185e:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8081862:	8a13      	ldrh	r3, [r2, #16]
 8081864:	45b4      	cmp	ip, r6
 8081866:	d808      	bhi.n	808187a <SPIFFS_write+0xc2>
            offset > fd->cache_page->offset + fd->cache_page->size || // writing after cache
 8081868:	eb03 040c 	add.w	r4, r3, ip
        if (offset < fd->cache_page->offset || // writing before cache
 808186c:	42b4      	cmp	r4, r6
 808186e:	d304      	bcc.n	808187a <SPIFFS_write+0xc2>
            offset + len > fd->cache_page->offset + SPIFFS_CFG_LOG_PAGE_SZ(fs)) // writing beyond cache page
 8081870:	19bc      	adds	r4, r7, r6
 8081872:	eb01 0e0c 	add.w	lr, r1, ip
            offset > fd->cache_page->offset + fd->cache_page->size || // writing after cache
 8081876:	4574      	cmp	r4, lr
 8081878:	d91e      	bls.n	80818b8 <SPIFFS_write+0x100>
              spiffs_get_cache_page(fs, spiffs_get_cache(fs), fd->cache_page->ix),
 808187a:	7852      	ldrb	r2, [r2, #1]
 808187c:	3114      	adds	r1, #20
 808187e:	4351      	muls	r1, r2
 8081880:	6dec      	ldr	r4, [r5, #92]	; 0x5c
 8081882:	3114      	adds	r1, #20
 8081884:	6924      	ldr	r4, [r4, #16]
          res = spiffs_hydro_write(fs, fd,
 8081886:	4662      	mov	r2, ip
 8081888:	4421      	add	r1, r4
 808188a:	f7ff fd0d 	bl	80812a8 <spiffs_hydro_write.isra.0>
 808188e:	4604      	mov	r4, r0
          spiffs_cache_fd_release(fs, fd->cache_page);
 8081890:	9b01      	ldr	r3, [sp, #4]
 8081892:	4628      	mov	r0, r5
 8081894:	6a19      	ldr	r1, [r3, #32]
 8081896:	f7fe fdcf 	bl	8080438 <spiffs_cache_fd_release>
          SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 808189a:	2c00      	cmp	r4, #0
 808189c:	dbaf      	blt.n	80817fe <SPIFFS_write+0x46>
        fd->cache_page = spiffs_cache_page_allocate_by_fd(fs, fd);
 808189e:	9c01      	ldr	r4, [sp, #4]
 80818a0:	4628      	mov	r0, r5
 80818a2:	4621      	mov	r1, r4
 80818a4:	f7fe fdb9 	bl	808041a <spiffs_cache_page_allocate_by_fd>
        if (fd->cache_page) {
 80818a8:	9b01      	ldr	r3, [sp, #4]
        fd->cache_page = spiffs_cache_page_allocate_by_fd(fs, fd);
 80818aa:	6220      	str	r0, [r4, #32]
        if (fd->cache_page) {
 80818ac:	6a1a      	ldr	r2, [r3, #32]
 80818ae:	b11a      	cbz	r2, 80818b8 <SPIFFS_write+0x100>
          fd->cache_page->offset = offset;
 80818b0:	60d6      	str	r6, [r2, #12]
          fd->cache_page->size = 0;
 80818b2:	2200      	movs	r2, #0
 80818b4:	6a1b      	ldr	r3, [r3, #32]
 80818b6:	821a      	strh	r2, [r3, #16]
      if (fd->cache_page) {
 80818b8:	9801      	ldr	r0, [sp, #4]
 80818ba:	6a02      	ldr	r2, [r0, #32]
 80818bc:	b1ea      	cbz	r2, 80818fa <SPIFFS_write+0x142>
        u32_t offset_in_cpage = offset - fd->cache_page->offset;
 80818be:	68d3      	ldr	r3, [r2, #12]
        u8_t *cpage_data = spiffs_get_cache_page(fs, cache, fd->cache_page->ix);
 80818c0:	7850      	ldrb	r0, [r2, #1]
        u32_t offset_in_cpage = offset - fd->cache_page->offset;
 80818c2:	1af6      	subs	r6, r6, r3
        u8_t *cpage_data = spiffs_get_cache_page(fs, cache, fd->cache_page->ix);
 80818c4:	69eb      	ldr	r3, [r5, #28]
 80818c6:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 80818c8:	3314      	adds	r3, #20
 80818ca:	fb00 6303 	mla	r3, r0, r3, r6
        _SPIFFS_MEMCPY(&cpage_data[offset_in_cpage], buf, len);
 80818ce:	6908      	ldr	r0, [r1, #16]
 80818d0:	3314      	adds	r3, #20
 80818d2:	463a      	mov	r2, r7
 80818d4:	4641      	mov	r1, r8
 80818d6:	4418      	add	r0, r3
 80818d8:	f010 facc 	bl	8091e74 <memcpy>
        fd->cache_page->size = MAX(fd->cache_page->size, offset_in_cpage + len);
 80818dc:	9b01      	ldr	r3, [sp, #4]
 80818de:	443e      	add	r6, r7
 80818e0:	6a1a      	ldr	r2, [r3, #32]
        return len;
 80818e2:	463c      	mov	r4, r7
        fd->cache_page->size = MAX(fd->cache_page->size, offset_in_cpage + len);
 80818e4:	8a11      	ldrh	r1, [r2, #16]
 80818e6:	428e      	cmp	r6, r1
 80818e8:	bf38      	it	cc
 80818ea:	460e      	movcc	r6, r1
 80818ec:	8216      	strh	r6, [r2, #16]
        fd->fdoffset += len;
 80818ee:	699a      	ldr	r2, [r3, #24]
 80818f0:	443a      	add	r2, r7
 80818f2:	619a      	str	r2, [r3, #24]
        SPIFFS_UNLOCK(fs);
 80818f4:	f00b f94a 	bl	808cb8c <spiffsParticleUnlock>
        return len;
 80818f8:	e76f      	b.n	80817da <SPIFFS_write+0x22>
        res = spiffs_hydro_write(fs, fd, buf, offset, len);
 80818fa:	463b      	mov	r3, r7
 80818fc:	4632      	mov	r2, r6
 80818fe:	4641      	mov	r1, r8
  res = spiffs_hydro_write(fs, fd, buf, offset, len);
 8081900:	f7ff fcd2 	bl	80812a8 <spiffs_hydro_write.isra.0>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 8081904:	1e04      	subs	r4, r0, #0
 8081906:	f6ff af7a 	blt.w	80817fe <SPIFFS_write+0x46>
  fd->fdoffset += len;
 808190a:	9a01      	ldr	r2, [sp, #4]
 808190c:	6993      	ldr	r3, [r2, #24]
 808190e:	443b      	add	r3, r7
 8081910:	6193      	str	r3, [r2, #24]
 8081912:	e775      	b.n	8081800 <SPIFFS_write+0x48>
      if (fd->cache_page) {
 8081914:	b19a      	cbz	r2, 808193e <SPIFFS_write+0x186>
            spiffs_get_cache_page(fs, spiffs_get_cache(fs), fd->cache_page->ix),
 8081916:	7854      	ldrb	r4, [r2, #1]
 8081918:	3114      	adds	r1, #20
 808191a:	4361      	muls	r1, r4
 808191c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 808191e:	3114      	adds	r1, #20
 8081920:	691c      	ldr	r4, [r3, #16]
        res = spiffs_hydro_write(fs, fd,
 8081922:	8a13      	ldrh	r3, [r2, #16]
 8081924:	4421      	add	r1, r4
 8081926:	68d2      	ldr	r2, [r2, #12]
 8081928:	f7ff fcbe 	bl	80812a8 <spiffs_hydro_write.isra.0>
 808192c:	4604      	mov	r4, r0
        spiffs_cache_fd_release(fs, fd->cache_page);
 808192e:	9b01      	ldr	r3, [sp, #4]
 8081930:	4628      	mov	r0, r5
 8081932:	6a19      	ldr	r1, [r3, #32]
 8081934:	f7fe fd80 	bl	8080438 <spiffs_cache_fd_release>
        SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 8081938:	2c00      	cmp	r4, #0
 808193a:	f6ff af60 	blt.w	80817fe <SPIFFS_write+0x46>
  res = spiffs_hydro_write(fs, fd, buf, offset, len);
 808193e:	463b      	mov	r3, r7
 8081940:	4632      	mov	r2, r6
 8081942:	4641      	mov	r1, r8
 8081944:	9801      	ldr	r0, [sp, #4]
 8081946:	e7db      	b.n	8081900 <SPIFFS_write+0x148>
 8081948:	0809285f 	.word	0x0809285f
 808194c:	08092895 	.word	0x08092895
 8081950:	20090315 	.word	0x20090315
 8081954:	ffffd8d8 	.word	0xffffd8d8
 8081958:	ffffd8f0 	.word	0xffffd8f0
 808195c:	ffffd8db 	.word	0xffffd8db

08081960 <SPIFFS_remove>:
s32_t SPIFFS_remove(spiffs *fs, const char *path) {
 8081960:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8081962:	4605      	mov	r5, r0
  SPIFFS_API_DBG("%s '%s'\n", __func__, path);
 8081964:	460a      	mov	r2, r1
s32_t SPIFFS_remove(spiffs *fs, const char *path) {
 8081966:	460e      	mov	r6, r1
  SPIFFS_API_DBG("%s '%s'\n", __func__, path);
 8081968:	482d      	ldr	r0, [pc, #180]	; (8081a20 <SPIFFS_remove+0xc0>)
 808196a:	492e      	ldr	r1, [pc, #184]	; (8081a24 <SPIFFS_remove+0xc4>)
 808196c:	f00b f8ec 	bl	808cb48 <spiffsParticleTraceLog>
  SPIFFS_API_CHECK_CFG(fs);
 8081970:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8081972:	4b2d      	ldr	r3, [pc, #180]	; (8081a28 <SPIFFS_remove+0xc8>)
 8081974:	429a      	cmp	r2, r3
 8081976:	d004      	beq.n	8081982 <SPIFFS_remove+0x22>
 8081978:	4c2c      	ldr	r4, [pc, #176]	; (8081a2c <SPIFFS_remove+0xcc>)
  SPIFFS_API_CHECK_MOUNT(fs);
 808197a:	646c      	str	r4, [r5, #68]	; 0x44
}
 808197c:	4620      	mov	r0, r4
 808197e:	b004      	add	sp, #16
 8081980:	bd70      	pop	{r4, r5, r6, pc}
  SPIFFS_API_CHECK_MOUNT(fs);
 8081982:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 8081986:	b90b      	cbnz	r3, 808198c <SPIFFS_remove+0x2c>
 8081988:	4c29      	ldr	r4, [pc, #164]	; (8081a30 <SPIFFS_remove+0xd0>)
 808198a:	e7f6      	b.n	808197a <SPIFFS_remove+0x1a>
  if (strlen(path) > SPIFFS_OBJ_NAME_LEN - 1) {
 808198c:	4630      	mov	r0, r6
 808198e:	f010 fb0a 	bl	8091fa6 <strlen>
 8081992:	281f      	cmp	r0, #31
 8081994:	d901      	bls.n	808199a <SPIFFS_remove+0x3a>
    SPIFFS_API_CHECK_RES(fs, SPIFFS_ERR_NAME_TOO_LONG);
 8081996:	4c27      	ldr	r4, [pc, #156]	; (8081a34 <SPIFFS_remove+0xd4>)
 8081998:	e7ef      	b.n	808197a <SPIFFS_remove+0x1a>
  SPIFFS_LOCK(fs);
 808199a:	f00b f8f1 	bl	808cb80 <spiffsParticleLock>
  res = spiffs_fd_find_new(fs, &fd, 0);
 808199e:	2200      	movs	r2, #0
 80819a0:	4628      	mov	r0, r5
 80819a2:	a903      	add	r1, sp, #12
 80819a4:	f002 fefe 	bl	80847a4 <spiffs_fd_find_new>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 80819a8:	1e04      	subs	r4, r0, #0
 80819aa:	da03      	bge.n	80819b4 <SPIFFS_remove+0x54>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 80819ac:	646c      	str	r4, [r5, #68]	; 0x44
 80819ae:	f00b f8ed 	bl	808cb8c <spiffsParticleUnlock>
 80819b2:	e7e3      	b.n	808197c <SPIFFS_remove+0x1c>
  res = spiffs_object_find_object_index_header_by_name(fs, (const u8_t*)path, &pix);
 80819b4:	4631      	mov	r1, r6
 80819b6:	4628      	mov	r0, r5
 80819b8:	f10d 020a 	add.w	r2, sp, #10
 80819bc:	f002 f990 	bl	8083ce0 <spiffs_object_find_object_index_header_by_name>
  if (res != SPIFFS_OK) {
 80819c0:	4604      	mov	r4, r0
 80819c2:	b138      	cbz	r0, 80819d4 <SPIFFS_remove+0x74>
    spiffs_fd_return(fs, fd->file_nbr);
 80819c4:	9b03      	ldr	r3, [sp, #12]
 80819c6:	4628      	mov	r0, r5
 80819c8:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80819cc:	f002 ff5e 	bl	808488c <spiffs_fd_return>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 80819d0:	2c00      	cmp	r4, #0
 80819d2:	dbeb      	blt.n	80819ac <SPIFFS_remove+0x4c>
  res = spiffs_object_open_by_page(fs, pix, fd, 0,0);
 80819d4:	2300      	movs	r3, #0
 80819d6:	4628      	mov	r0, r5
 80819d8:	9a03      	ldr	r2, [sp, #12]
 80819da:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80819de:	9300      	str	r3, [sp, #0]
 80819e0:	f001 faa8 	bl	8082f34 <spiffs_object_open_by_page>
  if (res != SPIFFS_OK) {
 80819e4:	4604      	mov	r4, r0
 80819e6:	b138      	cbz	r0, 80819f8 <SPIFFS_remove+0x98>
    spiffs_fd_return(fs, fd->file_nbr);
 80819e8:	9b03      	ldr	r3, [sp, #12]
 80819ea:	4628      	mov	r0, r5
 80819ec:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80819f0:	f002 ff4c 	bl	808488c <spiffs_fd_return>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 80819f4:	2c00      	cmp	r4, #0
 80819f6:	dbd9      	blt.n	80819ac <SPIFFS_remove+0x4c>
  res = spiffs_object_truncate(fd, 0, 1);
 80819f8:	2201      	movs	r2, #1
 80819fa:	2100      	movs	r1, #0
 80819fc:	9803      	ldr	r0, [sp, #12]
 80819fe:	f002 f9ab 	bl	8083d58 <spiffs_object_truncate>
  if (res != SPIFFS_OK) {
 8081a02:	4604      	mov	r4, r0
 8081a04:	b138      	cbz	r0, 8081a16 <SPIFFS_remove+0xb6>
    spiffs_fd_return(fs, fd->file_nbr);
 8081a06:	9b03      	ldr	r3, [sp, #12]
 8081a08:	4628      	mov	r0, r5
 8081a0a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8081a0e:	f002 ff3d 	bl	808488c <spiffs_fd_return>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 8081a12:	2c00      	cmp	r4, #0
 8081a14:	dbca      	blt.n	80819ac <SPIFFS_remove+0x4c>
  SPIFFS_UNLOCK(fs);
 8081a16:	f00b f8b9 	bl	808cb8c <spiffsParticleUnlock>
  return 0;
 8081a1a:	2400      	movs	r4, #0
 8081a1c:	e7ae      	b.n	808197c <SPIFFS_remove+0x1c>
 8081a1e:	bf00      	nop
 8081a20:	08092848 	.word	0x08092848
 8081a24:	080928a2 	.word	0x080928a2
 8081a28:	20090315 	.word	0x20090315
 8081a2c:	ffffd8d8 	.word	0xffffd8d8
 8081a30:	ffffd8f0 	.word	0xffffd8f0
 8081a34:	ffffd8cc 	.word	0xffffd8cc

08081a38 <SPIFFS_stat>:
s32_t SPIFFS_stat(spiffs *fs, const char *path, spiffs_stat *s) {
 8081a38:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8081a3a:	4605      	mov	r5, r0
 8081a3c:	460c      	mov	r4, r1
 8081a3e:	4616      	mov	r6, r2
  SPIFFS_API_DBG("%s '%s'\n", __func__, path);
 8081a40:	4818      	ldr	r0, [pc, #96]	; (8081aa4 <SPIFFS_stat+0x6c>)
 8081a42:	460a      	mov	r2, r1
 8081a44:	4918      	ldr	r1, [pc, #96]	; (8081aa8 <SPIFFS_stat+0x70>)
 8081a46:	f00b f87f 	bl	808cb48 <spiffsParticleTraceLog>
  SPIFFS_API_CHECK_CFG(fs);
 8081a4a:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8081a4c:	4b17      	ldr	r3, [pc, #92]	; (8081aac <SPIFFS_stat+0x74>)
 8081a4e:	429a      	cmp	r2, r3
 8081a50:	d004      	beq.n	8081a5c <SPIFFS_stat+0x24>
 8081a52:	4c17      	ldr	r4, [pc, #92]	; (8081ab0 <SPIFFS_stat+0x78>)
    SPIFFS_API_CHECK_RES(fs, SPIFFS_ERR_NAME_TOO_LONG);
 8081a54:	646c      	str	r4, [r5, #68]	; 0x44
}
 8081a56:	4620      	mov	r0, r4
 8081a58:	b002      	add	sp, #8
 8081a5a:	bd70      	pop	{r4, r5, r6, pc}
  SPIFFS_API_CHECK_MOUNT(fs);
 8081a5c:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 8081a60:	b90b      	cbnz	r3, 8081a66 <SPIFFS_stat+0x2e>
 8081a62:	4c14      	ldr	r4, [pc, #80]	; (8081ab4 <SPIFFS_stat+0x7c>)
 8081a64:	e7f6      	b.n	8081a54 <SPIFFS_stat+0x1c>
  if (strlen(path) > SPIFFS_OBJ_NAME_LEN - 1) {
 8081a66:	4620      	mov	r0, r4
 8081a68:	f010 fa9d 	bl	8091fa6 <strlen>
 8081a6c:	281f      	cmp	r0, #31
 8081a6e:	d901      	bls.n	8081a74 <SPIFFS_stat+0x3c>
    SPIFFS_API_CHECK_RES(fs, SPIFFS_ERR_NAME_TOO_LONG);
 8081a70:	4c11      	ldr	r4, [pc, #68]	; (8081ab8 <SPIFFS_stat+0x80>)
 8081a72:	e7ef      	b.n	8081a54 <SPIFFS_stat+0x1c>
  SPIFFS_LOCK(fs);
 8081a74:	f00b f884 	bl	808cb80 <spiffsParticleLock>
  res = spiffs_object_find_object_index_header_by_name(fs, (const u8_t*)path, &pix);
 8081a78:	4621      	mov	r1, r4
 8081a7a:	4628      	mov	r0, r5
 8081a7c:	f10d 0206 	add.w	r2, sp, #6
 8081a80:	f002 f92e 	bl	8083ce0 <spiffs_object_find_object_index_header_by_name>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 8081a84:	1e04      	subs	r4, r0, #0
 8081a86:	da03      	bge.n	8081a90 <SPIFFS_stat+0x58>
 8081a88:	646c      	str	r4, [r5, #68]	; 0x44
  SPIFFS_UNLOCK(fs);
 8081a8a:	f00b f87f 	bl	808cb8c <spiffsParticleUnlock>
  return res;
 8081a8e:	e7e2      	b.n	8081a56 <SPIFFS_stat+0x1e>
  res = spiffs_stat_pix(fs, pix, 0, s);
 8081a90:	4633      	mov	r3, r6
 8081a92:	2200      	movs	r2, #0
 8081a94:	4628      	mov	r0, r5
 8081a96:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8081a9a:	f7ff fb65 	bl	8081168 <spiffs_stat_pix>
 8081a9e:	4604      	mov	r4, r0
 8081aa0:	e7f3      	b.n	8081a8a <SPIFFS_stat+0x52>
 8081aa2:	bf00      	nop
 8081aa4:	08092848 	.word	0x08092848
 8081aa8:	080928b0 	.word	0x080928b0
 8081aac:	20090315 	.word	0x20090315
 8081ab0:	ffffd8d8 	.word	0xffffd8d8
 8081ab4:	ffffd8f0 	.word	0xffffd8f0
 8081ab8:	ffffd8cc 	.word	0xffffd8cc

08081abc <SPIFFS_close>:
s32_t SPIFFS_close(spiffs *fs, spiffs_file fh) {
 8081abc:	b570      	push	{r4, r5, r6, lr}
 8081abe:	4605      	mov	r5, r0
  SPIFFS_API_DBG("%s "_SPIPRIfd "\n", __func__, fh);
 8081ac0:	460a      	mov	r2, r1
s32_t SPIFFS_close(spiffs *fs, spiffs_file fh) {
 8081ac2:	460e      	mov	r6, r1
  SPIFFS_API_DBG("%s "_SPIPRIfd "\n", __func__, fh);
 8081ac4:	4811      	ldr	r0, [pc, #68]	; (8081b0c <SPIFFS_close+0x50>)
 8081ac6:	4912      	ldr	r1, [pc, #72]	; (8081b10 <SPIFFS_close+0x54>)
 8081ac8:	f00b f83e 	bl	808cb48 <spiffsParticleTraceLog>
  SPIFFS_API_CHECK_CFG(fs);
 8081acc:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8081ace:	4b11      	ldr	r3, [pc, #68]	; (8081b14 <SPIFFS_close+0x58>)
 8081ad0:	429a      	cmp	r2, r3
 8081ad2:	d003      	beq.n	8081adc <SPIFFS_close+0x20>
 8081ad4:	4c10      	ldr	r4, [pc, #64]	; (8081b18 <SPIFFS_close+0x5c>)
  SPIFFS_API_CHECK_MOUNT(fs);
 8081ad6:	646c      	str	r4, [r5, #68]	; 0x44
}
 8081ad8:	4620      	mov	r0, r4
 8081ada:	bd70      	pop	{r4, r5, r6, pc}
  SPIFFS_API_CHECK_MOUNT(fs);
 8081adc:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 8081ae0:	b90b      	cbnz	r3, 8081ae6 <SPIFFS_close+0x2a>
 8081ae2:	4c0e      	ldr	r4, [pc, #56]	; (8081b1c <SPIFFS_close+0x60>)
 8081ae4:	e7f7      	b.n	8081ad6 <SPIFFS_close+0x1a>
  SPIFFS_LOCK(fs);
 8081ae6:	f00b f84b 	bl	808cb80 <spiffsParticleLock>
  res = spiffs_fflush_cache(fs, fh);
 8081aea:	4631      	mov	r1, r6
 8081aec:	4628      	mov	r0, r5
 8081aee:	f7ff fc02 	bl	80812f6 <spiffs_fflush_cache>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 8081af2:	1e04      	subs	r4, r0, #0
 8081af4:	da01      	bge.n	8081afa <SPIFFS_close+0x3e>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 8081af6:	646c      	str	r4, [r5, #68]	; 0x44
 8081af8:	e005      	b.n	8081b06 <SPIFFS_close+0x4a>
  res = spiffs_fd_return(fs, fh);
 8081afa:	4631      	mov	r1, r6
 8081afc:	4628      	mov	r0, r5
 8081afe:	f002 fec5 	bl	808488c <spiffs_fd_return>
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 8081b02:	1e04      	subs	r4, r0, #0
 8081b04:	dbf7      	blt.n	8081af6 <SPIFFS_close+0x3a>
  SPIFFS_UNLOCK(fs);
 8081b06:	f00b f841 	bl	808cb8c <spiffsParticleUnlock>
  return res;
 8081b0a:	e7e5      	b.n	8081ad8 <SPIFFS_close+0x1c>
 8081b0c:	08092869 	.word	0x08092869
 8081b10:	080928bc 	.word	0x080928bc
 8081b14:	20090315 	.word	0x20090315
 8081b18:	ffffd8d8 	.word	0xffffd8d8
 8081b1c:	ffffd8f0 	.word	0xffffd8f0

08081b20 <SPIFFS_opendir>:
spiffs_DIR *SPIFFS_opendir(spiffs *fs, const char *name, spiffs_DIR *d) {
 8081b20:	b538      	push	{r3, r4, r5, lr}
 8081b22:	4605      	mov	r5, r0
  SPIFFS_API_DBG("%s\n", __func__);
 8081b24:	490b      	ldr	r1, [pc, #44]	; (8081b54 <SPIFFS_opendir+0x34>)
 8081b26:	480c      	ldr	r0, [pc, #48]	; (8081b58 <SPIFFS_opendir+0x38>)
spiffs_DIR *SPIFFS_opendir(spiffs *fs, const char *name, spiffs_DIR *d) {
 8081b28:	4614      	mov	r4, r2
  SPIFFS_API_DBG("%s\n", __func__);
 8081b2a:	f00b f80d 	bl	808cb48 <spiffsParticleTraceLog>
  if (!SPIFFS_CHECK_CFG((fs))) {
 8081b2e:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8081b30:	4b0a      	ldr	r3, [pc, #40]	; (8081b5c <SPIFFS_opendir+0x3c>)
 8081b32:	429a      	cmp	r2, r3
 8081b34:	d004      	beq.n	8081b40 <SPIFFS_opendir+0x20>
    (fs)->err_code = SPIFFS_ERR_NOT_CONFIGURED;
 8081b36:	4b0a      	ldr	r3, [pc, #40]	; (8081b60 <SPIFFS_opendir+0x40>)
    return 0;
 8081b38:	2400      	movs	r4, #0
    (fs)->err_code = SPIFFS_ERR_NOT_CONFIGURED;
 8081b3a:	646b      	str	r3, [r5, #68]	; 0x44
}
 8081b3c:	4620      	mov	r0, r4
 8081b3e:	bd38      	pop	{r3, r4, r5, pc}
  if (!SPIFFS_CHECK_MOUNT(fs)) {
 8081b40:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
 8081b44:	2300      	movs	r3, #0
 8081b46:	b90a      	cbnz	r2, 8081b4c <SPIFFS_opendir+0x2c>
    fs->err_code = SPIFFS_ERR_NOT_MOUNTED;
 8081b48:	4b06      	ldr	r3, [pc, #24]	; (8081b64 <SPIFFS_opendir+0x44>)
 8081b4a:	e7f5      	b.n	8081b38 <SPIFFS_opendir+0x18>
  d->fs = fs;
 8081b4c:	6025      	str	r5, [r4, #0]
  d->block = 0;
 8081b4e:	80a3      	strh	r3, [r4, #4]
  d->entry = 0;
 8081b50:	60a3      	str	r3, [r4, #8]
  return d;
 8081b52:	e7f3      	b.n	8081b3c <SPIFFS_opendir+0x1c>
 8081b54:	080928c9 	.word	0x080928c9
 8081b58:	080926f3 	.word	0x080926f3
 8081b5c:	20090315 	.word	0x20090315
 8081b60:	ffffd8d8 	.word	0xffffd8d8
 8081b64:	ffffd8f0 	.word	0xffffd8f0

08081b68 <SPIFFS_readdir>:

struct spiffs_dirent *SPIFFS_readdir(spiffs_DIR *d, struct spiffs_dirent *e) {
 8081b68:	b570      	push	{r4, r5, r6, lr}
 8081b6a:	4605      	mov	r5, r0
 8081b6c:	460c      	mov	r4, r1
  SPIFFS_API_DBG("%s\n", __func__);
 8081b6e:	4819      	ldr	r0, [pc, #100]	; (8081bd4 <SPIFFS_readdir+0x6c>)
 8081b70:	4919      	ldr	r1, [pc, #100]	; (8081bd8 <SPIFFS_readdir+0x70>)
struct spiffs_dirent *SPIFFS_readdir(spiffs_DIR *d, struct spiffs_dirent *e) {
 8081b72:	b088      	sub	sp, #32
  SPIFFS_API_DBG("%s\n", __func__);
 8081b74:	f00a ffe8 	bl	808cb48 <spiffsParticleTraceLog>
  if (!SPIFFS_CHECK_MOUNT(d->fs)) {
 8081b78:	682b      	ldr	r3, [r5, #0]
 8081b7a:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
 8081b7e:	b918      	cbnz	r0, 8081b88 <SPIFFS_readdir+0x20>
    d->fs->err_code = SPIFFS_ERR_NOT_MOUNTED;
 8081b80:	4a16      	ldr	r2, [pc, #88]	; (8081bdc <SPIFFS_readdir+0x74>)
 8081b82:	645a      	str	r2, [r3, #68]	; 0x44
  } else {
    d->fs->err_code = res;
  }
  SPIFFS_UNLOCK(d->fs);
  return ret;
}
 8081b84:	b008      	add	sp, #32
 8081b86:	bd70      	pop	{r4, r5, r6, pc}
  res = spiffs_obj_lu_find_entry_visitor(d->fs,
 8081b88:	2600      	movs	r6, #0
  SPIFFS_LOCK(d->fs);
 8081b8a:	f00a fff9 	bl	808cb80 <spiffsParticleLock>
  res = spiffs_obj_lu_find_entry_visitor(d->fs,
 8081b8e:	ab07      	add	r3, sp, #28
 8081b90:	9305      	str	r3, [sp, #20]
 8081b92:	f10d 031a 	add.w	r3, sp, #26
 8081b96:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8081b9a:	4b11      	ldr	r3, [pc, #68]	; (8081be0 <SPIFFS_readdir+0x78>)
 8081b9c:	68aa      	ldr	r2, [r5, #8]
 8081b9e:	e9cd 6300 	strd	r6, r3, [sp]
 8081ba2:	88a9      	ldrh	r1, [r5, #4]
 8081ba4:	2304      	movs	r3, #4
 8081ba6:	6828      	ldr	r0, [r5, #0]
 8081ba8:	9602      	str	r6, [sp, #8]
 8081baa:	f000 fb43 	bl	8082234 <spiffs_obj_lu_find_entry_visitor>
  if (res == SPIFFS_OK) {
 8081bae:	b968      	cbnz	r0, 8081bcc <SPIFFS_readdir+0x64>
    d->block = bix;
 8081bb0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8081bb4:	80ab      	strh	r3, [r5, #4]
    d->entry = entry + 1;
 8081bb6:	9b07      	ldr	r3, [sp, #28]
 8081bb8:	3301      	adds	r3, #1
 8081bba:	60ab      	str	r3, [r5, #8]
    e->obj_id &= ~SPIFFS_OBJ_ID_IX_FLAG;
 8081bbc:	8823      	ldrh	r3, [r4, #0]
 8081bbe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8081bc2:	8023      	strh	r3, [r4, #0]
  SPIFFS_UNLOCK(d->fs);
 8081bc4:	f00a ffe2 	bl	808cb8c <spiffsParticleUnlock>
  return ret;
 8081bc8:	4620      	mov	r0, r4
 8081bca:	e7db      	b.n	8081b84 <SPIFFS_readdir+0x1c>
    d->fs->err_code = res;
 8081bcc:	682b      	ldr	r3, [r5, #0]
  struct spiffs_dirent *ret = 0;
 8081bce:	4634      	mov	r4, r6
    d->fs->err_code = res;
 8081bd0:	6458      	str	r0, [r3, #68]	; 0x44
 8081bd2:	e7f7      	b.n	8081bc4 <SPIFFS_readdir+0x5c>
 8081bd4:	080926f3 	.word	0x080926f3
 8081bd8:	080928d8 	.word	0x080928d8
 8081bdc:	ffffd8f0 	.word	0xffffd8f0
 8081be0:	0808120d 	.word	0x0808120d

08081be4 <SPIFFS_closedir>:

s32_t SPIFFS_closedir(spiffs_DIR *d) {
 8081be4:	b510      	push	{r4, lr}
 8081be6:	4604      	mov	r4, r0
  SPIFFS_API_DBG("%s\n", __func__);
 8081be8:	4909      	ldr	r1, [pc, #36]	; (8081c10 <SPIFFS_closedir+0x2c>)
 8081bea:	480a      	ldr	r0, [pc, #40]	; (8081c14 <SPIFFS_closedir+0x30>)
 8081bec:	f00a ffac 	bl	808cb48 <spiffsParticleTraceLog>
  SPIFFS_API_CHECK_CFG(d->fs);
 8081bf0:	6823      	ldr	r3, [r4, #0]
 8081bf2:	4a09      	ldr	r2, [pc, #36]	; (8081c18 <SPIFFS_closedir+0x34>)
 8081bf4:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8081bf6:	4291      	cmp	r1, r2
 8081bf8:	d002      	beq.n	8081c00 <SPIFFS_closedir+0x1c>
 8081bfa:	4808      	ldr	r0, [pc, #32]	; (8081c1c <SPIFFS_closedir+0x38>)
  SPIFFS_API_CHECK_MOUNT(d->fs);
 8081bfc:	6458      	str	r0, [r3, #68]	; 0x44
  return 0;
}
 8081bfe:	bd10      	pop	{r4, pc}
  SPIFFS_API_CHECK_MOUNT(d->fs);
 8081c00:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8081c04:	b90a      	cbnz	r2, 8081c0a <SPIFFS_closedir+0x26>
 8081c06:	4806      	ldr	r0, [pc, #24]	; (8081c20 <SPIFFS_closedir+0x3c>)
 8081c08:	e7f8      	b.n	8081bfc <SPIFFS_closedir+0x18>
  return 0;
 8081c0a:	2000      	movs	r0, #0
 8081c0c:	e7f7      	b.n	8081bfe <SPIFFS_closedir+0x1a>
 8081c0e:	bf00      	nop
 8081c10:	080928e7 	.word	0x080928e7
 8081c14:	080926f3 	.word	0x080926f3
 8081c18:	20090315 	.word	0x20090315
 8081c1c:	ffffd8d8 	.word	0xffffd8d8
 8081c20:	ffffd8f0 	.word	0xffffd8f0

08081c24 <SPIFFS_info>:
  SPIFFS_UNLOCK(fs);
  return res;
#endif // SPIFFS_READ_ONLY
}

s32_t SPIFFS_info(spiffs *fs, u32_t *total, u32_t *used) {
 8081c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081c26:	4607      	mov	r7, r0
 8081c28:	460e      	mov	r6, r1
  SPIFFS_API_DBG("%s\n", __func__);
 8081c2a:	4818      	ldr	r0, [pc, #96]	; (8081c8c <SPIFFS_info+0x68>)
 8081c2c:	4918      	ldr	r1, [pc, #96]	; (8081c90 <SPIFFS_info+0x6c>)
s32_t SPIFFS_info(spiffs *fs, u32_t *total, u32_t *used) {
 8081c2e:	4615      	mov	r5, r2
  SPIFFS_API_DBG("%s\n", __func__);
 8081c30:	f00a ff8a 	bl	808cb48 <spiffsParticleTraceLog>
  s32_t res = SPIFFS_OK;
  SPIFFS_API_CHECK_CFG(fs);
 8081c34:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8081c36:	4b17      	ldr	r3, [pc, #92]	; (8081c94 <SPIFFS_info+0x70>)
 8081c38:	429a      	cmp	r2, r3
 8081c3a:	d002      	beq.n	8081c42 <SPIFFS_info+0x1e>
 8081c3c:	4816      	ldr	r0, [pc, #88]	; (8081c98 <SPIFFS_info+0x74>)
  SPIFFS_API_CHECK_MOUNT(fs);
 8081c3e:	6478      	str	r0, [r7, #68]	; 0x44
    *used = fs->stats_p_allocated * data_page_size;
  }

  SPIFFS_UNLOCK(fs);
  return res;
}
 8081c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  SPIFFS_API_CHECK_MOUNT(fs);
 8081c42:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8081c46:	b90b      	cbnz	r3, 8081c4c <SPIFFS_info+0x28>
 8081c48:	4814      	ldr	r0, [pc, #80]	; (8081c9c <SPIFFS_info+0x78>)
 8081c4a:	e7f8      	b.n	8081c3e <SPIFFS_info+0x1a>
  SPIFFS_LOCK(fs);
 8081c4c:	f00a ff98 	bl	808cb80 <spiffsParticleLock>
  u32_t pages_per_block = SPIFFS_PAGES_PER_BLOCK(fs);
 8081c50:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8081c54:	fbb3 f3f4 	udiv	r3, r3, r4
  u32_t obj_lu_pages = SPIFFS_OBJ_LOOKUP_PAGES(fs);
 8081c58:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
 8081c5c:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8081c60:	bf94      	ite	ls
 8081c62:	fbb2 f2f4 	udivls	r2, r2, r4
 8081c66:	2201      	movhi	r2, #1
  u32_t data_page_size = SPIFFS_DATA_PAGE_SIZE(fs);
 8081c68:	3c05      	subs	r4, #5
  if (total) {
 8081c6a:	b136      	cbz	r6, 8081c7a <SPIFFS_info+0x56>
  u32_t total_data_pages = (blocks - 2) * (pages_per_block - obj_lu_pages) + 1; // -2 for spare blocks, +1 for emergency page
 8081c6c:	6a39      	ldr	r1, [r7, #32]
 8081c6e:	1a9b      	subs	r3, r3, r2
 8081c70:	3902      	subs	r1, #2
 8081c72:	434b      	muls	r3, r1
    *total = total_data_pages * data_page_size;
 8081c74:	fb03 4304 	mla	r3, r3, r4, r4
 8081c78:	6033      	str	r3, [r6, #0]
  if (used) {
 8081c7a:	b115      	cbz	r5, 8081c82 <SPIFFS_info+0x5e>
    *used = fs->stats_p_allocated * data_page_size;
 8081c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8081c7e:	435c      	muls	r4, r3
 8081c80:	602c      	str	r4, [r5, #0]
  SPIFFS_UNLOCK(fs);
 8081c82:	f00a ff83 	bl	808cb8c <spiffsParticleUnlock>
  return res;
 8081c86:	2000      	movs	r0, #0
 8081c88:	e7da      	b.n	8081c40 <SPIFFS_info+0x1c>
 8081c8a:	bf00      	nop
 8081c8c:	080926f3 	.word	0x080926f3
 8081c90:	080928f7 	.word	0x080928f7
 8081c94:	20090315 	.word	0x20090315
 8081c98:	ffffd8d8 	.word	0xffffd8d8
 8081c9c:	ffffd8f0 	.word	0xffffd8f0

08081ca0 <spiffs_obj_lu_find_id_and_span_v>:
    spiffs *fs,
    spiffs_obj_id obj_id,
    spiffs_block_ix bix,
    int ix_entry,
    const void *user_const_p,
    void *user_var_p) {
 8081ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081ca2:	460d      	mov	r5, r1
  s32_t res;
  spiffs_page_header ph;
  spiffs_page_ix pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, ix_entry);
 8081ca4:	e9d0 1706 	ldrd	r1, r7, [r0, #24]
 8081ca8:	fbb1 f1f7 	udiv	r1, r1, r7
 8081cac:	ebb7 0f41 	cmp.w	r7, r1, lsl #1
 8081cb0:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8081cb4:	bf94      	ite	ls
 8081cb6:	fbb4 f4f7 	udivls	r4, r4, r7
 8081cba:	2401      	movhi	r4, #1
 8081cbc:	fb01 f202 	mul.w	r2, r1, r2
 8081cc0:	b292      	uxth	r2, r2
    void *user_var_p) {
 8081cc2:	b085      	sub	sp, #20
  spiffs_page_ix pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, ix_entry);
 8081cc4:	bf98      	it	ls
 8081cc6:	b2a4      	uxthls	r4, r4
 8081cc8:	441a      	add	r2, r3
 8081cca:	4414      	add	r4, r2
  res = _spiffs_rd(fs, 0, SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
 8081ccc:	aa02      	add	r2, sp, #8
 8081cce:	6903      	ldr	r3, [r0, #16]
 8081cd0:	9201      	str	r2, [sp, #4]
 8081cd2:	2205      	movs	r2, #5
  spiffs_page_ix pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, ix_entry);
 8081cd4:	b2a4      	uxth	r4, r4
  res = _spiffs_rd(fs, 0, SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
 8081cd6:	9200      	str	r2, [sp, #0]
 8081cd8:	2100      	movs	r1, #0
 8081cda:	2215      	movs	r2, #21
 8081cdc:	fb07 3304 	mla	r3, r7, r4, r3
    void *user_var_p) {
 8081ce0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  res = _spiffs_rd(fs, 0, SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
 8081ce2:	f7fe faa3 	bl	808022c <spiffs_phys_rd>
      SPIFFS_PAGE_TO_PADDR(fs, pix), sizeof(spiffs_page_header), (u8_t *)&ph);
  SPIFFS_CHECK_RES(res);
 8081ce6:	2800      	cmp	r0, #0
 8081ce8:	db1a      	blt.n	8081d20 <spiffs_obj_lu_find_id_and_span_v+0x80>
  if (ph.obj_id == obj_id &&
 8081cea:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8081cee:	42ab      	cmp	r3, r5
 8081cf0:	d118      	bne.n	8081d24 <spiffs_obj_lu_find_id_and_span_v+0x84>
 8081cf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      ph.span_ix == *((spiffs_span_ix*)user_var_p) &&
 8081cf4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
  if (ph.obj_id == obj_id &&
 8081cf8:	881b      	ldrh	r3, [r3, #0]
 8081cfa:	4293      	cmp	r3, r2
 8081cfc:	d112      	bne.n	8081d24 <spiffs_obj_lu_find_id_and_span_v+0x84>
      (ph.flags & (SPIFFS_PH_FLAG_FINAL | SPIFFS_PH_FLAG_DELET | SPIFFS_PH_FLAG_USED)) == SPIFFS_PH_FLAG_DELET &&
 8081cfe:	f89d 200c 	ldrb.w	r2, [sp, #12]
      ph.span_ix == *((spiffs_span_ix*)user_var_p) &&
 8081d02:	f002 0183 	and.w	r1, r2, #131	; 0x83
 8081d06:	2980      	cmp	r1, #128	; 0x80
 8081d08:	d10c      	bne.n	8081d24 <spiffs_obj_lu_find_id_and_span_v+0x84>
      (ph.flags & (SPIFFS_PH_FLAG_FINAL | SPIFFS_PH_FLAG_DELET | SPIFFS_PH_FLAG_USED)) == SPIFFS_PH_FLAG_DELET &&
 8081d0a:	0429      	lsls	r1, r5, #16
 8081d0c:	d502      	bpl.n	8081d14 <spiffs_obj_lu_find_id_and_span_v+0x74>
      !((obj_id & SPIFFS_OBJ_ID_IX_FLAG) && (ph.flags & SPIFFS_PH_FLAG_IXDELE) == 0 && ph.span_ix == 0) &&
 8081d0e:	0652      	lsls	r2, r2, #25
 8081d10:	d400      	bmi.n	8081d14 <spiffs_obj_lu_find_id_and_span_v+0x74>
 8081d12:	b13b      	cbz	r3, 8081d24 <spiffs_obj_lu_find_id_and_span_v+0x84>
 8081d14:	b146      	cbz	r6, 8081d28 <spiffs_obj_lu_find_id_and_span_v+0x88>
      (user_const_p == 0 || *((const spiffs_page_ix*)user_const_p) != pix)) {
 8081d16:	8833      	ldrh	r3, [r6, #0]
    return SPIFFS_OK;
 8081d18:	4804      	ldr	r0, [pc, #16]	; (8081d2c <spiffs_obj_lu_find_id_and_span_v+0x8c>)
 8081d1a:	42a3      	cmp	r3, r4
 8081d1c:	bf18      	it	ne
 8081d1e:	2000      	movne	r0, #0
  } else {
    return SPIFFS_VIS_COUNTINUE;
  }
}
 8081d20:	b005      	add	sp, #20
 8081d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return SPIFFS_VIS_COUNTINUE;
 8081d24:	4801      	ldr	r0, [pc, #4]	; (8081d2c <spiffs_obj_lu_find_id_and_span_v+0x8c>)
 8081d26:	e7fb      	b.n	8081d20 <spiffs_obj_lu_find_id_and_span_v+0x80>
    return SPIFFS_OK;
 8081d28:	4630      	mov	r0, r6
 8081d2a:	e7f9      	b.n	8081d20 <spiffs_obj_lu_find_id_and_span_v+0x80>
 8081d2c:	ffffd8aa 	.word	0xffffd8aa

08081d30 <spiffs_page_index_check>:
static s32_t spiffs_page_index_check(spiffs *fs, spiffs_fd *fd, spiffs_page_ix pix, spiffs_span_ix spix) {
 8081d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081d32:	461e      	mov	r6, r3
  if (pix == (spiffs_page_ix)-1) {
 8081d34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8081d38:	429a      	cmp	r2, r3
static s32_t spiffs_page_index_check(spiffs *fs, spiffs_fd *fd, spiffs_page_ix pix, spiffs_span_ix spix) {
 8081d3a:	460d      	mov	r5, r1
 8081d3c:	b085      	sub	sp, #20
  if (pix == (spiffs_page_ix)-1) {
 8081d3e:	d039      	beq.n	8081db4 <spiffs_page_index_check+0x84>
  if (pix % SPIFFS_PAGES_PER_BLOCK(fs) < SPIFFS_OBJ_LOOKUP_PAGES(fs)) {
 8081d40:	e9d0 4306 	ldrd	r4, r3, [r0, #24]
 8081d44:	fbb4 f4f3 	udiv	r4, r4, r3
 8081d48:	fbb2 f7f4 	udiv	r7, r2, r4
 8081d4c:	0061      	lsls	r1, r4, #1
 8081d4e:	ebb3 0f44 	cmp.w	r3, r4, lsl #1
 8081d52:	bf94      	ite	ls
 8081d54:	fbb1 f1f3 	udivls	r1, r1, r3
 8081d58:	2101      	movhi	r1, #1
 8081d5a:	fb04 2717 	mls	r7, r4, r7, r2
 8081d5e:	428f      	cmp	r7, r1
 8081d60:	d32a      	bcc.n	8081db8 <spiffs_page_index_check+0x88>
  if (pix > SPIFFS_MAX_PAGES(fs)) {
 8081d62:	68c1      	ldr	r1, [r0, #12]
 8081d64:	fbb1 f1f3 	udiv	r1, r1, r3
 8081d68:	428a      	cmp	r2, r1
 8081d6a:	d827      	bhi.n	8081dbc <spiffs_page_index_check+0x8c>
  res = _spiffs_rd(
 8081d6c:	ac02      	add	r4, sp, #8
 8081d6e:	6901      	ldr	r1, [r0, #16]
 8081d70:	9401      	str	r4, [sp, #4]
 8081d72:	2405      	movs	r4, #5
 8081d74:	fb03 1302 	mla	r3, r3, r2, r1
 8081d78:	9400      	str	r4, [sp, #0]
 8081d7a:	2116      	movs	r1, #22
 8081d7c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8081d80:	f7fe fa54 	bl	808022c <spiffs_phys_rd>
  SPIFFS_CHECK_RES(res);
 8081d84:	2800      	cmp	r0, #0
 8081d86:	db13      	blt.n	8081db0 <spiffs_page_index_check+0x80>
  SPIFFS_VALIDATE_OBJIX(ph, fd->obj_id, spix);
 8081d88:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8081d8c:	07dc      	lsls	r4, r3, #31
 8081d8e:	d417      	bmi.n	8081dc0 <spiffs_page_index_check+0x90>
 8081d90:	0619      	lsls	r1, r3, #24
 8081d92:	d517      	bpl.n	8081dc4 <spiffs_page_index_check+0x94>
 8081d94:	079a      	lsls	r2, r3, #30
 8081d96:	d417      	bmi.n	8081dc8 <spiffs_page_index_check+0x98>
 8081d98:	075b      	lsls	r3, r3, #29
 8081d9a:	d417      	bmi.n	8081dcc <spiffs_page_index_check+0x9c>
 8081d9c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8081da0:	2b00      	cmp	r3, #0
 8081da2:	da13      	bge.n	8081dcc <spiffs_page_index_check+0x9c>
 8081da4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8081da8:	4b09      	ldr	r3, [pc, #36]	; (8081dd0 <spiffs_page_index_check+0xa0>)
 8081daa:	42b2      	cmp	r2, r6
 8081dac:	bf18      	it	ne
 8081dae:	4618      	movne	r0, r3
}
 8081db0:	b005      	add	sp, #20
 8081db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return SPIFFS_ERR_INDEX_FREE;
 8081db4:	4807      	ldr	r0, [pc, #28]	; (8081dd4 <spiffs_page_index_check+0xa4>)
 8081db6:	e7fb      	b.n	8081db0 <spiffs_page_index_check+0x80>
    return SPIFFS_ERR_INDEX_LU;
 8081db8:	4807      	ldr	r0, [pc, #28]	; (8081dd8 <spiffs_page_index_check+0xa8>)
 8081dba:	e7f9      	b.n	8081db0 <spiffs_page_index_check+0x80>
    return SPIFFS_ERR_INDEX_INVALID;
 8081dbc:	4807      	ldr	r0, [pc, #28]	; (8081ddc <spiffs_page_index_check+0xac>)
 8081dbe:	e7f7      	b.n	8081db0 <spiffs_page_index_check+0x80>
  SPIFFS_VALIDATE_OBJIX(ph, fd->obj_id, spix);
 8081dc0:	4807      	ldr	r0, [pc, #28]	; (8081de0 <spiffs_page_index_check+0xb0>)
 8081dc2:	e7f5      	b.n	8081db0 <spiffs_page_index_check+0x80>
 8081dc4:	4807      	ldr	r0, [pc, #28]	; (8081de4 <spiffs_page_index_check+0xb4>)
 8081dc6:	e7f3      	b.n	8081db0 <spiffs_page_index_check+0x80>
 8081dc8:	4807      	ldr	r0, [pc, #28]	; (8081de8 <spiffs_page_index_check+0xb8>)
 8081dca:	e7f1      	b.n	8081db0 <spiffs_page_index_check+0x80>
 8081dcc:	4807      	ldr	r0, [pc, #28]	; (8081dec <spiffs_page_index_check+0xbc>)
 8081dce:	e7ef      	b.n	8081db0 <spiffs_page_index_check+0x80>
 8081dd0:	ffffd8e3 	.word	0xffffd8e3
 8081dd4:	ffffd8de 	.word	0xffffd8de
 8081dd8:	ffffd8dd 	.word	0xffffd8dd
 8081ddc:	ffffd8dc 	.word	0xffffd8dc
 8081de0:	ffffd8e4 	.word	0xffffd8e4
 8081de4:	ffffd8ec 	.word	0xffffd8ec
 8081de8:	ffffd8eb 	.word	0xffffd8eb
 8081dec:	ffffd8ea 	.word	0xffffd8ea

08081df0 <spiffs_object_find_object_index_header_by_name_v>:
    spiffs *fs,
    spiffs_obj_id obj_id,
    spiffs_block_ix bix,
    int ix_entry,
    const void *user_const_p,
    void *user_var_p) {
 8081df0:	b570      	push	{r4, r5, r6, lr}
  (void)user_var_p;
  s32_t res;
  spiffs_page_object_ix_header objix_hdr;
  spiffs_page_ix pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, ix_entry);
 8081df2:	e9d0 5606 	ldrd	r5, r6, [r0, #24]
 8081df6:	fbb5 f5f6 	udiv	r5, r5, r6
 8081dfa:	436a      	muls	r2, r5
 8081dfc:	006c      	lsls	r4, r5, #1
 8081dfe:	ebb6 0f45 	cmp.w	r6, r5, lsl #1
 8081e02:	bf98      	it	ls
 8081e04:	fbb4 f4f6 	udivls	r4, r4, r6
 8081e08:	b292      	uxth	r2, r2
 8081e0a:	bf88      	it	hi
 8081e0c:	2401      	movhi	r4, #1
 8081e0e:	441a      	add	r2, r3
  if (obj_id == SPIFFS_OBJ_ID_FREE || obj_id == SPIFFS_OBJ_ID_DELETED ||
 8081e10:	f647 73fe 	movw	r3, #32766	; 0x7ffe
  spiffs_page_ix pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, ix_entry);
 8081e14:	bf98      	it	ls
 8081e16:	b2a4      	uxthls	r4, r4
  if (obj_id == SPIFFS_OBJ_ID_FREE || obj_id == SPIFFS_OBJ_ID_DELETED ||
 8081e18:	f481 4100 	eor.w	r1, r1, #32768	; 0x8000
  spiffs_page_ix pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, ix_entry);
 8081e1c:	4414      	add	r4, r2
  if (obj_id == SPIFFS_OBJ_ID_FREE || obj_id == SPIFFS_OBJ_ID_DELETED ||
 8081e1e:	4299      	cmp	r1, r3
    void *user_var_p) {
 8081e20:	b08e      	sub	sp, #56	; 0x38
  spiffs_page_ix pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, ix_entry);
 8081e22:	b2a4      	uxth	r4, r4
  if (obj_id == SPIFFS_OBJ_ID_FREE || obj_id == SPIFFS_OBJ_ID_DELETED ||
 8081e24:	d902      	bls.n	8081e2c <spiffs_object_find_object_index_header_by_name_v+0x3c>
      (obj_id & SPIFFS_OBJ_ID_IX_FLAG) == 0) {
    return SPIFFS_VIS_COUNTINUE;
 8081e26:	4811      	ldr	r0, [pc, #68]	; (8081e6c <spiffs_object_find_object_index_header_by_name_v+0x7c>)
      return SPIFFS_OK;
    }
  }

  return SPIFFS_VIS_COUNTINUE;
}
 8081e28:	b00e      	add	sp, #56	; 0x38
 8081e2a:	bd70      	pop	{r4, r5, r6, pc}
  res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
 8081e2c:	aa02      	add	r2, sp, #8
 8081e2e:	6903      	ldr	r3, [r0, #16]
 8081e30:	9201      	str	r2, [sp, #4]
 8081e32:	222d      	movs	r2, #45	; 0x2d
 8081e34:	2115      	movs	r1, #21
 8081e36:	9200      	str	r2, [sp, #0]
 8081e38:	fb06 3304 	mla	r3, r6, r4, r3
 8081e3c:	2200      	movs	r2, #0
 8081e3e:	f7fe f9f5 	bl	808022c <spiffs_phys_rd>
  SPIFFS_CHECK_RES(res);
 8081e42:	2800      	cmp	r0, #0
 8081e44:	dbf0      	blt.n	8081e28 <spiffs_object_find_object_index_header_by_name_v+0x38>
  if (objix_hdr.p_hdr.span_ix == 0 &&
 8081e46:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8081e4a:	2b00      	cmp	r3, #0
 8081e4c:	d1eb      	bne.n	8081e26 <spiffs_object_find_object_index_header_by_name_v+0x36>
 8081e4e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8081e52:	f003 03c2 	and.w	r3, r3, #194	; 0xc2
 8081e56:	2bc0      	cmp	r3, #192	; 0xc0
 8081e58:	d1e5      	bne.n	8081e26 <spiffs_object_find_object_index_header_by_name_v+0x36>
    if (strcmp((const char*)user_const_p, (char*)objix_hdr.name) == 0) {
 8081e5a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8081e5c:	f10d 0115 	add.w	r1, sp, #21
 8081e60:	f010 f873 	bl	8091f4a <strcmp>
 8081e64:	2800      	cmp	r0, #0
 8081e66:	d0df      	beq.n	8081e28 <spiffs_object_find_object_index_header_by_name_v+0x38>
 8081e68:	e7dd      	b.n	8081e26 <spiffs_object_find_object_index_header_by_name_v+0x36>
 8081e6a:	bf00      	nop
 8081e6c:	ffffd8aa 	.word	0xffffd8aa

08081e70 <spiffs_obj_lu_find_free_obj_id_bitmap_v>:
  u32_t compaction;
  const u8_t *conflicting_name;
} spiffs_free_obj_id_state;

static s32_t spiffs_obj_lu_find_free_obj_id_bitmap_v(spiffs *fs, spiffs_obj_id id, spiffs_block_ix bix, int ix_entry,
    const void *user_const_p, void *user_var_p) {
 8081e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081e72:	4605      	mov	r5, r0
  if (id != SPIFFS_OBJ_ID_FREE && id != SPIFFS_OBJ_ID_DELETED) {
 8081e74:	f64f 70fd 	movw	r0, #65533	; 0xfffd
    const void *user_const_p, void *user_var_p) {
 8081e78:	460c      	mov	r4, r1
  if (id != SPIFFS_OBJ_ID_FREE && id != SPIFFS_OBJ_ID_DELETED) {
 8081e7a:	3901      	subs	r1, #1
 8081e7c:	b289      	uxth	r1, r1
    const void *user_const_p, void *user_var_p) {
 8081e7e:	b08f      	sub	sp, #60	; 0x3c
  if (id != SPIFFS_OBJ_ID_FREE && id != SPIFFS_OBJ_ID_DELETED) {
 8081e80:	4281      	cmp	r1, r0
    const void *user_const_p, void *user_var_p) {
 8081e82:	9f14      	ldr	r7, [sp, #80]	; 0x50
  if (id != SPIFFS_OBJ_ID_FREE && id != SPIFFS_OBJ_ID_DELETED) {
 8081e84:	d901      	bls.n	8081e8a <spiffs_obj_lu_find_free_obj_id_bitmap_v+0x1a>
    int byte_ix = (id-min_obj_id) >> 3;
    if (byte_ix >= 0 && (u32_t)byte_ix < SPIFFS_CFG_LOG_PAGE_SZ(fs)) {
      fs->work[byte_ix] |= (1<<bit_ix);
    }
  }
  return SPIFFS_VIS_COUNTINUE;
 8081e86:	4827      	ldr	r0, [pc, #156]	; (8081f24 <spiffs_obj_lu_find_free_obj_id_bitmap_v+0xb4>)
 8081e88:	e037      	b.n	8081efa <spiffs_obj_lu_find_free_obj_id_bitmap_v+0x8a>
    spiffs_obj_id min_obj_id = *((spiffs_obj_id*)user_var_p);
 8081e8a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8081e8c:	880e      	ldrh	r6, [r1, #0]
    if (conflicting_name && (id & SPIFFS_OBJ_ID_IX_FLAG)) {
 8081e8e:	2f00      	cmp	r7, #0
 8081e90:	d035      	beq.n	8081efe <spiffs_obj_lu_find_free_obj_id_bitmap_v+0x8e>
 8081e92:	0421      	lsls	r1, r4, #16
 8081e94:	d533      	bpl.n	8081efe <spiffs_obj_lu_find_free_obj_id_bitmap_v+0x8e>
      spiffs_page_ix pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, ix_entry);
 8081e96:	e9d5 1006 	ldrd	r1, r0, [r5, #24]
 8081e9a:	fbb1 fcf0 	udiv	ip, r1, r0
 8081e9e:	ebb0 0f4c 	cmp.w	r0, ip, lsl #1
 8081ea2:	fb0c f102 	mul.w	r1, ip, r2
 8081ea6:	ea4f 024c 	mov.w	r2, ip, lsl #1
 8081eaa:	bf94      	ite	ls
 8081eac:	fbb2 f2f0 	udivls	r2, r2, r0
 8081eb0:	2201      	movhi	r2, #1
 8081eb2:	b289      	uxth	r1, r1
 8081eb4:	bf98      	it	ls
 8081eb6:	b292      	uxthls	r2, r2
 8081eb8:	4419      	add	r1, r3
 8081eba:	440a      	add	r2, r1
      res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
 8081ebc:	a902      	add	r1, sp, #8
 8081ebe:	9101      	str	r1, [sp, #4]
 8081ec0:	212d      	movs	r1, #45	; 0x2d
 8081ec2:	692b      	ldr	r3, [r5, #16]
 8081ec4:	b292      	uxth	r2, r2
 8081ec6:	fb00 3302 	mla	r3, r0, r2, r3
 8081eca:	9100      	str	r1, [sp, #0]
 8081ecc:	2200      	movs	r2, #0
 8081ece:	2115      	movs	r1, #21
 8081ed0:	4628      	mov	r0, r5
 8081ed2:	f7fe f9ab 	bl	808022c <spiffs_phys_rd>
      SPIFFS_CHECK_RES(res);
 8081ed6:	2800      	cmp	r0, #0
 8081ed8:	db0f      	blt.n	8081efa <spiffs_obj_lu_find_free_obj_id_bitmap_v+0x8a>
      if (objix_hdr.p_hdr.span_ix == 0 &&
 8081eda:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8081ede:	b973      	cbnz	r3, 8081efe <spiffs_obj_lu_find_free_obj_id_bitmap_v+0x8e>
 8081ee0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8081ee4:	f003 03c2 	and.w	r3, r3, #194	; 0xc2
 8081ee8:	2bc0      	cmp	r3, #192	; 0xc0
 8081eea:	d108      	bne.n	8081efe <spiffs_obj_lu_find_free_obj_id_bitmap_v+0x8e>
        if (strcmp((const char*)user_const_p, (char*)objix_hdr.name) == 0) {
 8081eec:	4638      	mov	r0, r7
 8081eee:	f10d 0115 	add.w	r1, sp, #21
 8081ef2:	f010 f82a 	bl	8091f4a <strcmp>
 8081ef6:	b910      	cbnz	r0, 8081efe <spiffs_obj_lu_find_free_obj_id_bitmap_v+0x8e>
          return SPIFFS_ERR_CONFLICTING_NAME;
 8081ef8:	480b      	ldr	r0, [pc, #44]	; (8081f28 <spiffs_obj_lu_find_free_obj_id_bitmap_v+0xb8>)
}
 8081efa:	b00f      	add	sp, #60	; 0x3c
 8081efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    id &= ~SPIFFS_OBJ_ID_IX_FLAG;
 8081efe:	f3c4 040e 	ubfx	r4, r4, #0, #15
    int byte_ix = (id-min_obj_id) >> 3;
 8081f02:	1ba4      	subs	r4, r4, r6
    if (byte_ix >= 0 && (u32_t)byte_ix < SPIFFS_CFG_LOG_PAGE_SZ(fs)) {
 8081f04:	10e2      	asrs	r2, r4, #3
 8081f06:	d4be      	bmi.n	8081e86 <spiffs_obj_lu_find_free_obj_id_bitmap_v+0x16>
 8081f08:	69eb      	ldr	r3, [r5, #28]
 8081f0a:	4293      	cmp	r3, r2
 8081f0c:	d9bb      	bls.n	8081e86 <spiffs_obj_lu_find_free_obj_id_bitmap_v+0x16>
      fs->work[byte_ix] |= (1<<bit_ix);
 8081f0e:	2301      	movs	r3, #1
 8081f10:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    u32_t bit_ix = (id-min_obj_id) & 7;
 8081f12:	f004 0407 	and.w	r4, r4, #7
      fs->work[byte_ix] |= (1<<bit_ix);
 8081f16:	fa03 f404 	lsl.w	r4, r3, r4
 8081f1a:	5c8b      	ldrb	r3, [r1, r2]
 8081f1c:	431c      	orrs	r4, r3
 8081f1e:	548c      	strb	r4, [r1, r2]
 8081f20:	e7b1      	b.n	8081e86 <spiffs_obj_lu_find_free_obj_id_bitmap_v+0x16>
 8081f22:	bf00      	nop
 8081f24:	ffffd8aa 	.word	0xffffd8aa
 8081f28:	ffffd8d9 	.word	0xffffd8d9

08081f2c <spiffs_obj_lu_scan_v>:
  if (obj_id == SPIFFS_OBJ_ID_FREE) {
 8081f2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8081f30:	4291      	cmp	r1, r2
 8081f32:	d105      	bne.n	8081f40 <spiffs_obj_lu_scan_v+0x14>
    if (ix_entry == 0) {
 8081f34:	b913      	cbnz	r3, 8081f3c <spiffs_obj_lu_scan_v+0x10>
      fs->free_blocks++;
 8081f36:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8081f38:	3301      	adds	r3, #1
 8081f3a:	6483      	str	r3, [r0, #72]	; 0x48
}
 8081f3c:	4805      	ldr	r0, [pc, #20]	; (8081f54 <spiffs_obj_lu_scan_v+0x28>)
 8081f3e:	4770      	bx	lr
  } else if (obj_id == SPIFFS_OBJ_ID_DELETED) {
 8081f40:	b919      	cbnz	r1, 8081f4a <spiffs_obj_lu_scan_v+0x1e>
    fs->stats_p_deleted++;
 8081f42:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8081f44:	3301      	adds	r3, #1
 8081f46:	6503      	str	r3, [r0, #80]	; 0x50
 8081f48:	e7f8      	b.n	8081f3c <spiffs_obj_lu_scan_v+0x10>
    fs->stats_p_allocated++;
 8081f4a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8081f4c:	3301      	adds	r3, #1
 8081f4e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8081f50:	e7f4      	b.n	8081f3c <spiffs_obj_lu_scan_v+0x10>
 8081f52:	bf00      	nop
 8081f54:	ffffd8aa 	.word	0xffffd8aa

08081f58 <spiffs_hash.isra.0>:
}
#endif // !SPIFFS_READ_ONLY

#if SPIFFS_TEMPORAL_FD_CACHE
// djb2 hash
static u32_t spiffs_hash(spiffs *fs, const u8_t *name) {
 8081f58:	1e42      	subs	r2, r0, #1
 8081f5a:	f100 031f 	add.w	r3, r0, #31
  (void)fs;
  u32_t hash = 5381;
 8081f5e:	f241 5005 	movw	r0, #5381	; 0x1505
  u8_t c;
  int i = 0;
  while ((c = name[i++]) && i < SPIFFS_OBJ_NAME_LEN) {
 8081f62:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8081f66:	b109      	cbz	r1, 8081f6c <spiffs_hash.isra.0+0x14>
 8081f68:	429a      	cmp	r2, r3
 8081f6a:	d100      	bne.n	8081f6e <spiffs_hash.isra.0+0x16>
    hash = (hash * 33) ^ c;
  }
  return hash;
}
 8081f6c:	4770      	bx	lr
    hash = (hash * 33) ^ c;
 8081f6e:	eb00 1040 	add.w	r0, r0, r0, lsl #5
 8081f72:	4048      	eors	r0, r1
 8081f74:	e7f5      	b.n	8081f62 <spiffs_hash.isra.0+0xa>
	...

08081f78 <spiffs_page_data_check.isra.0>:
static s32_t spiffs_page_data_check(spiffs *fs, spiffs_fd *fd, spiffs_page_ix pix, spiffs_span_ix spix) {
 8081f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081f7a:	461e      	mov	r6, r3
  if (pix == (spiffs_page_ix)-1) {
 8081f7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8081f80:	429a      	cmp	r2, r3
static s32_t spiffs_page_data_check(spiffs *fs, spiffs_fd *fd, spiffs_page_ix pix, spiffs_span_ix spix) {
 8081f82:	b085      	sub	sp, #20
  if (pix == (spiffs_page_ix)-1) {
 8081f84:	d035      	beq.n	8081ff2 <spiffs_page_data_check.isra.0+0x7a>
  if (pix % SPIFFS_PAGES_PER_BLOCK(fs) < SPIFFS_OBJ_LOOKUP_PAGES(fs)) {
 8081f86:	e9d0 4506 	ldrd	r4, r5, [r0, #24]
 8081f8a:	fbb4 f4f5 	udiv	r4, r4, r5
 8081f8e:	fbb2 f7f4 	udiv	r7, r2, r4
 8081f92:	0063      	lsls	r3, r4, #1
 8081f94:	ebb5 0f44 	cmp.w	r5, r4, lsl #1
 8081f98:	bf94      	ite	ls
 8081f9a:	fbb3 f3f5 	udivls	r3, r3, r5
 8081f9e:	2301      	movhi	r3, #1
 8081fa0:	fb04 2717 	mls	r7, r4, r7, r2
 8081fa4:	429f      	cmp	r7, r3
 8081fa6:	d326      	bcc.n	8081ff6 <spiffs_page_data_check.isra.0+0x7e>
  if (pix > SPIFFS_MAX_PAGES(fs)) {
 8081fa8:	68c3      	ldr	r3, [r0, #12]
 8081faa:	fbb3 f3f5 	udiv	r3, r3, r5
 8081fae:	429a      	cmp	r2, r3
 8081fb0:	d823      	bhi.n	8081ffa <spiffs_page_data_check.isra.0+0x82>
  res = _spiffs_rd(
 8081fb2:	ac02      	add	r4, sp, #8
 8081fb4:	6903      	ldr	r3, [r0, #16]
 8081fb6:	9401      	str	r4, [sp, #4]
 8081fb8:	2405      	movs	r4, #5
 8081fba:	9400      	str	r4, [sp, #0]
 8081fbc:	fb05 3302 	mla	r3, r5, r2, r3
 8081fc0:	f9b1 2000 	ldrsh.w	r2, [r1]
 8081fc4:	2117      	movs	r1, #23
 8081fc6:	f7fe f931 	bl	808022c <spiffs_phys_rd>
  SPIFFS_CHECK_RES(res);
 8081fca:	2800      	cmp	r0, #0
 8081fcc:	db0f      	blt.n	8081fee <spiffs_page_data_check.isra.0+0x76>
  SPIFFS_VALIDATE_DATA(ph, fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG, spix);
 8081fce:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8081fd2:	07dc      	lsls	r4, r3, #31
 8081fd4:	d413      	bmi.n	8081ffe <spiffs_page_data_check.isra.0+0x86>
 8081fd6:	0619      	lsls	r1, r3, #24
 8081fd8:	d513      	bpl.n	8082002 <spiffs_page_data_check.isra.0+0x8a>
 8081fda:	079a      	lsls	r2, r3, #30
 8081fdc:	d413      	bmi.n	8082006 <spiffs_page_data_check.isra.0+0x8e>
 8081fde:	075b      	lsls	r3, r3, #29
 8081fe0:	d513      	bpl.n	808200a <spiffs_page_data_check.isra.0+0x92>
 8081fe2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8081fe6:	4b0a      	ldr	r3, [pc, #40]	; (8082010 <spiffs_page_data_check.isra.0+0x98>)
 8081fe8:	42b2      	cmp	r2, r6
 8081fea:	bf18      	it	ne
 8081fec:	4618      	movne	r0, r3
}
 8081fee:	b005      	add	sp, #20
 8081ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return SPIFFS_ERR_INDEX_REF_FREE;
 8081ff2:	4808      	ldr	r0, [pc, #32]	; (8082014 <spiffs_page_data_check.isra.0+0x9c>)
 8081ff4:	e7fb      	b.n	8081fee <spiffs_page_data_check.isra.0+0x76>
    return SPIFFS_ERR_INDEX_REF_LU;
 8081ff6:	4808      	ldr	r0, [pc, #32]	; (8082018 <spiffs_page_data_check.isra.0+0xa0>)
 8081ff8:	e7f9      	b.n	8081fee <spiffs_page_data_check.isra.0+0x76>
    return SPIFFS_ERR_INDEX_REF_INVALID;
 8081ffa:	4808      	ldr	r0, [pc, #32]	; (808201c <spiffs_page_data_check.isra.0+0xa4>)
 8081ffc:	e7f7      	b.n	8081fee <spiffs_page_data_check.isra.0+0x76>
  SPIFFS_VALIDATE_DATA(ph, fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG, spix);
 8081ffe:	4808      	ldr	r0, [pc, #32]	; (8082020 <spiffs_page_data_check.isra.0+0xa8>)
 8082000:	e7f5      	b.n	8081fee <spiffs_page_data_check.isra.0+0x76>
 8082002:	4808      	ldr	r0, [pc, #32]	; (8082024 <spiffs_page_data_check.isra.0+0xac>)
 8082004:	e7f3      	b.n	8081fee <spiffs_page_data_check.isra.0+0x76>
 8082006:	4808      	ldr	r0, [pc, #32]	; (8082028 <spiffs_page_data_check.isra.0+0xb0>)
 8082008:	e7f1      	b.n	8081fee <spiffs_page_data_check.isra.0+0x76>
 808200a:	4808      	ldr	r0, [pc, #32]	; (808202c <spiffs_page_data_check.isra.0+0xb4>)
 808200c:	e7ef      	b.n	8081fee <spiffs_page_data_check.isra.0+0x76>
 808200e:	bf00      	nop
 8082010:	ffffd8e2 	.word	0xffffd8e2
 8082014:	ffffd8e1 	.word	0xffffd8e1
 8082018:	ffffd8e0 	.word	0xffffd8e0
 808201c:	ffffd8df 	.word	0xffffd8df
 8082020:	ffffd8e4 	.word	0xffffd8e4
 8082024:	ffffd8ec 	.word	0xffffd8ec
 8082028:	ffffd8eb 	.word	0xffffd8eb
 808202c:	ffffd8e5 	.word	0xffffd8e5

08082030 <spiffs_update_ix_map.isra.0>:
static void spiffs_update_ix_map(spiffs *fs,
 8082030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  spiffs_ix_map *map = fd->ix_map;
 8082034:	6ace      	ldr	r6, [r1, #44]	; 0x2c
static void spiffs_update_ix_map(spiffs *fs,
 8082036:	4680      	mov	r8, r0
  spiffs_span_ix map_objix_start_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, map->start_spix);
 8082038:	6800      	ldr	r0, [r0, #0]
 808203a:	8934      	ldrh	r4, [r6, #8]
static void spiffs_update_ix_map(spiffs *fs,
 808203c:	4615      	mov	r5, r2
  spiffs_span_ix map_objix_start_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, map->start_spix);
 808203e:	f1a0 022d 	sub.w	r2, r0, #45	; 0x2d
 8082042:	ebb4 0f52 	cmp.w	r4, r2, lsr #1
static void spiffs_update_ix_map(spiffs *fs,
 8082046:	461f      	mov	r7, r3
  spiffs_span_ix map_objix_start_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, map->start_spix);
 8082048:	ea4f 0352 	mov.w	r3, r2, lsr #1
 808204c:	bf21      	itttt	cs
 808204e:	f1a0 0208 	subcs.w	r2, r0, #8
 8082052:	0852      	lsrcs	r2, r2, #1
 8082054:	eba4 0c03 	subcs.w	ip, r4, r3
 8082058:	fbbc fcf2 	udivcs	ip, ip, r2
static void spiffs_update_ix_map(spiffs *fs,
 808205c:	4689      	mov	r9, r1
  spiffs_span_ix map_objix_end_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, map->end_spix);
 808205e:	8971      	ldrh	r1, [r6, #10]
  spiffs_span_ix map_objix_start_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, map->start_spix);
 8082060:	bf2a      	itet	cs
 8082062:	f10c 0c01 	addcs.w	ip, ip, #1
 8082066:	f04f 0c00 	movcc.w	ip, #0
 808206a:	fa1f fc8c 	uxthcs.w	ip, ip
  spiffs_span_ix map_objix_end_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, map->end_spix);
 808206e:	428b      	cmp	r3, r1
 8082070:	bf9f      	itttt	ls
 8082072:	f1a0 0e08 	subls.w	lr, r0, #8
 8082076:	1aca      	subls	r2, r1, r3
 8082078:	ea4f 0e5e 	movls.w	lr, lr, lsr #1
 808207c:	fbb2 f2fe 	udivls	r2, r2, lr
 8082080:	bf96      	itet	ls
 8082082:	3201      	addls	r2, #1
 8082084:	2200      	movhi	r2, #0
 8082086:	b292      	uxthls	r2, r2
  if (objix_spix < map_objix_start_spix || objix_spix > map_objix_end_spix) {
 8082088:	45ac      	cmp	ip, r5
static void spiffs_update_ix_map(spiffs *fs,
 808208a:	b087      	sub	sp, #28
  if (objix_spix < map_objix_start_spix || objix_spix > map_objix_end_spix) {
 808208c:	d81f      	bhi.n	80820ce <spiffs_update_ix_map.isra.0+0x9e>
 808208e:	4295      	cmp	r5, r2
 8082090:	d81d      	bhi.n	80820ce <spiffs_update_ix_map.isra.0+0x9e>
  spiffs_span_ix objix_data_spix_start =
 8082092:	b29b      	uxth	r3, r3
 8082094:	b1f5      	cbz	r5, 80820d4 <spiffs_update_ix_map.isra.0+0xa4>
      SPIFFS_DATA_SPAN_IX_FOR_OBJ_IX_SPAN_IX(fs, objix_spix);
 8082096:	3808      	subs	r0, #8
 8082098:	f3c0 004f 	ubfx	r0, r0, #1, #16
 808209c:	1e6a      	subs	r2, r5, #1
  spiffs_span_ix objix_data_spix_start =
 808209e:	fb02 3300 	mla	r3, r2, r0, r3
 80820a2:	b29a      	uxth	r2, r3
  spiffs_span_ix objix_data_spix_end = objix_data_spix_start +
 80820a4:	4603      	mov	r3, r0
 80820a6:	4413      	add	r3, r2
  spiffs_span_ix map_spix_end = MIN(map->end_spix + 1, objix_data_spix_end);
 80820a8:	b29b      	uxth	r3, r3
 80820aa:	3101      	adds	r1, #1
 80820ac:	428b      	cmp	r3, r1
 80820ae:	bfa8      	it	ge
 80820b0:	460b      	movge	r3, r1
 80820b2:	4294      	cmp	r4, r2
 80820b4:	bf38      	it	cc
 80820b6:	4614      	movcc	r4, r2
    if (objix_data_pix == (spiffs_page_ix)-1) {
 80820b8:	f64f 7bff 	movw	fp, #65535	; 0xffff
  spiffs_span_ix map_spix_end = MIN(map->end_spix + 1, objix_data_spix_end);
 80820bc:	b29b      	uxth	r3, r3
 80820be:	9305      	str	r3, [sp, #20]
      objix_data_pix = ((spiffs_page_ix*)((u8_t *)objix + sizeof(spiffs_page_object_ix_header)))[map_spix];
 80820c0:	f107 0a2d 	add.w	sl, r7, #45	; 0x2d
  while (map_spix < map_spix_end) {
 80820c4:	9a05      	ldr	r2, [sp, #20]
 80820c6:	b2a3      	uxth	r3, r4
 80820c8:	429a      	cmp	r2, r3
 80820ca:	481a      	ldr	r0, [pc, #104]	; (8082134 <spiffs_update_ix_map.isra.0+0x104>)
 80820cc:	d804      	bhi.n	80820d8 <spiffs_update_ix_map.isra.0+0xa8>
}
 80820ce:	b007      	add	sp, #28
 80820d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  spiffs_span_ix objix_data_spix_start =
 80820d4:	462a      	mov	r2, r5
 80820d6:	e7e6      	b.n	80820a6 <spiffs_update_ix_map.isra.0+0x76>
    if (objix_spix == 0) {
 80820d8:	b9ad      	cbnz	r5, 8082106 <spiffs_update_ix_map.isra.0+0xd6>
      objix_data_pix = ((spiffs_page_ix*)((u8_t *)objix + sizeof(spiffs_page_object_ix_header)))[map_spix];
 80820da:	f83a 2014 	ldrh.w	r2, [sl, r4, lsl #1]
    if (objix_data_pix == (spiffs_page_ix)-1) {
 80820de:	455a      	cmp	r2, fp
 80820e0:	d0f5      	beq.n	80820ce <spiffs_update_ix_map.isra.0+0x9e>
    map->map_buf[map_spix - map->start_spix] = objix_data_pix;
 80820e2:	8933      	ldrh	r3, [r6, #8]
 80820e4:	6831      	ldr	r1, [r6, #0]
 80820e6:	1ae3      	subs	r3, r4, r3
 80820e8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    SPIFFS_DBG("map "_SPIPRIid":"_SPIPRIsp" ("_SPIPRIsp"--"_SPIPRIsp") objix.spix:"_SPIPRIsp" to pix "_SPIPRIpg"\n",
 80820ec:	8933      	ldrh	r3, [r6, #8]
 80820ee:	9202      	str	r2, [sp, #8]
 80820f0:	887a      	ldrh	r2, [r7, #2]
 80820f2:	f8b9 1006 	ldrh.w	r1, [r9, #6]
 80820f6:	9201      	str	r2, [sp, #4]
 80820f8:	8972      	ldrh	r2, [r6, #10]
 80820fa:	9200      	str	r2, [sp, #0]
 80820fc:	1ae2      	subs	r2, r4, r3
 80820fe:	f00a fd07 	bl	808cb10 <spiffsParticleInfoLog>
    map_spix++;
 8082102:	3401      	adds	r4, #1
 8082104:	e7de      	b.n	80820c4 <spiffs_update_ix_map.isra.0+0x94>
      objix_data_pix = ((spiffs_page_ix*)((u8_t *)objix + sizeof(spiffs_page_object_ix)))[SPIFFS_OBJ_IX_ENTRY(fs, map_spix)];
 8082106:	f8d8 2000 	ldr.w	r2, [r8]
 808210a:	f1a2 012d 	sub.w	r1, r2, #45	; 0x2d
 808210e:	ebb4 0f51 	cmp.w	r4, r1, lsr #1
 8082112:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8082116:	d203      	bcs.n	8082120 <spiffs_update_ix_map.isra.0+0xf0>
 8082118:	0063      	lsls	r3, r4, #1
 808211a:	3308      	adds	r3, #8
 808211c:	5afa      	ldrh	r2, [r7, r3]
 808211e:	e7de      	b.n	80820de <spiffs_update_ix_map.isra.0+0xae>
 8082120:	3a08      	subs	r2, #8
 8082122:	1ae1      	subs	r1, r4, r3
 8082124:	0852      	lsrs	r2, r2, #1
 8082126:	fbb1 f3f2 	udiv	r3, r1, r2
 808212a:	fb02 1313 	mls	r3, r2, r3, r1
 808212e:	3304      	adds	r3, #4
 8082130:	005b      	lsls	r3, r3, #1
 8082132:	e7f3      	b.n	808211c <spiffs_update_ix_map.isra.0+0xec>
 8082134:	0809291b 	.word	0x0809291b

08082138 <spiffs_obj_lu_find_free_obj_id_compact_v>:
    const void *user_const_p, void *user_var_p) {
 8082138:	b5f0      	push	{r4, r5, r6, r7, lr}
 808213a:	4605      	mov	r5, r0
 808213c:	460c      	mov	r4, r1
  if (id != SPIFFS_OBJ_ID_FREE && id != SPIFFS_OBJ_ID_DELETED && (id & SPIFFS_OBJ_ID_IX_FLAG)) {
 808213e:	f481 4000 	eor.w	r0, r1, #32768	; 0x8000
 8082142:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    const void *user_const_p, void *user_var_p) {
 8082146:	b08f      	sub	sp, #60	; 0x3c
  if (id != SPIFFS_OBJ_ID_FREE && id != SPIFFS_OBJ_ID_DELETED && (id & SPIFFS_OBJ_ID_IX_FLAG)) {
 8082148:	4288      	cmp	r0, r1
    const void *user_const_p, void *user_var_p) {
 808214a:	9e14      	ldr	r6, [sp, #80]	; 0x50
  if (id != SPIFFS_OBJ_ID_FREE && id != SPIFFS_OBJ_ID_DELETED && (id & SPIFFS_OBJ_ID_IX_FLAG)) {
 808214c:	d83f      	bhi.n	80821ce <spiffs_obj_lu_find_free_obj_id_compact_v+0x96>
    res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
 808214e:	e9d5 7006 	ldrd	r7, r0, [r5, #24]
 8082152:	fbb7 fcf0 	udiv	ip, r7, r0
 8082156:	ebb0 0f4c 	cmp.w	r0, ip, lsl #1
 808215a:	ea4f 014c 	mov.w	r1, ip, lsl #1
 808215e:	bf94      	ite	ls
 8082160:	fbb1 f1f0 	udivls	r1, r1, r0
 8082164:	2101      	movhi	r1, #1
 8082166:	4419      	add	r1, r3
 8082168:	ab02      	add	r3, sp, #8
 808216a:	9301      	str	r3, [sp, #4]
 808216c:	232d      	movs	r3, #45	; 0x2d
 808216e:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8082172:	9300      	str	r3, [sp, #0]
 8082174:	fb07 e202 	mla	r2, r7, r2, lr
 8082178:	fb00 2301 	mla	r3, r0, r1, r2
 808217c:	2200      	movs	r2, #0
 808217e:	2115      	movs	r1, #21
 8082180:	4628      	mov	r0, r5
 8082182:	f7fe f853 	bl	808022c <spiffs_phys_rd>
    if (res == SPIFFS_OK && objix_hdr.p_hdr.span_ix == 0 &&
 8082186:	bb10      	cbnz	r0, 80821ce <spiffs_obj_lu_find_free_obj_id_compact_v+0x96>
 8082188:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 808218c:	b9fb      	cbnz	r3, 80821ce <spiffs_obj_lu_find_free_obj_id_compact_v+0x96>
 808218e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8082192:	f003 0386 	and.w	r3, r3, #134	; 0x86
 8082196:	2b80      	cmp	r3, #128	; 0x80
 8082198:	d119      	bne.n	80821ce <spiffs_obj_lu_find_free_obj_id_compact_v+0x96>
      if (state->conflicting_name && strcmp((const char *)state->conflicting_name, (char *)objix_hdr.name) == 0) {
 808219a:	68b0      	ldr	r0, [r6, #8]
 808219c:	b138      	cbz	r0, 80821ae <spiffs_obj_lu_find_free_obj_id_compact_v+0x76>
 808219e:	f10d 0115 	add.w	r1, sp, #21
 80821a2:	f00f fed2 	bl	8091f4a <strcmp>
 80821a6:	b910      	cbnz	r0, 80821ae <spiffs_obj_lu_find_free_obj_id_compact_v+0x76>
        return SPIFFS_ERR_CONFLICTING_NAME;
 80821a8:	480a      	ldr	r0, [pc, #40]	; (80821d4 <spiffs_obj_lu_find_free_obj_id_compact_v+0x9c>)
}
 80821aa:	b00f      	add	sp, #60	; 0x3c
 80821ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (id >= state->min_obj_id && id <= state->max_obj_id) {
 80821ae:	8833      	ldrh	r3, [r6, #0]
      id &= ~SPIFFS_OBJ_ID_IX_FLAG;
 80821b0:	f3c4 010e 	ubfx	r1, r4, #0, #15
      if (id >= state->min_obj_id && id <= state->max_obj_id) {
 80821b4:	4299      	cmp	r1, r3
 80821b6:	d30a      	bcc.n	80821ce <spiffs_obj_lu_find_free_obj_id_compact_v+0x96>
 80821b8:	8872      	ldrh	r2, [r6, #2]
 80821ba:	428a      	cmp	r2, r1
 80821bc:	d307      	bcc.n	80821ce <spiffs_obj_lu_find_free_obj_id_compact_v+0x96>
        int ix = (id - state->min_obj_id) / state->compaction;
 80821be:	1ac9      	subs	r1, r1, r3
 80821c0:	6873      	ldr	r3, [r6, #4]
        map[ix]++;
 80821c2:	6baa      	ldr	r2, [r5, #56]	; 0x38
        int ix = (id - state->min_obj_id) / state->compaction;
 80821c4:	fbb1 f1f3 	udiv	r1, r1, r3
        map[ix]++;
 80821c8:	5c53      	ldrb	r3, [r2, r1]
 80821ca:	3301      	adds	r3, #1
 80821cc:	5453      	strb	r3, [r2, r1]
  return SPIFFS_VIS_COUNTINUE;
 80821ce:	4802      	ldr	r0, [pc, #8]	; (80821d8 <spiffs_obj_lu_find_free_obj_id_compact_v+0xa0>)
 80821d0:	e7eb      	b.n	80821aa <spiffs_obj_lu_find_free_obj_id_compact_v+0x72>
 80821d2:	bf00      	nop
 80821d4:	ffffd8d9 	.word	0xffffd8d9
 80821d8:	ffffd8aa 	.word	0xffffd8aa

080821dc <spiffs_phys_cpy>:
    u32_t len) {
 80821dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80821e0:	4681      	mov	r9, r0
 80821e2:	468a      	mov	sl, r1
 80821e4:	4615      	mov	r5, r2
 80821e6:	461f      	mov	r7, r3
 80821e8:	b092      	sub	sp, #72	; 0x48
 80821ea:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_MOVS, fh, src, chunk_size, b);
 80821ec:	ae02      	add	r6, sp, #8
  while (len > 0) {
 80821ee:	b91c      	cbnz	r4, 80821f8 <spiffs_phys_cpy+0x1c>
  return SPIFFS_OK;
 80821f0:	4620      	mov	r0, r4
}
 80821f2:	b012      	add	sp, #72	; 0x48
 80821f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    u32_t chunk_size = MIN(SPIFFS_COPY_BUFFER_STACK, len);
 80821f8:	2c40      	cmp	r4, #64	; 0x40
 80821fa:	46a0      	mov	r8, r4
 80821fc:	bf28      	it	cs
 80821fe:	f04f 0840 	movcs.w	r8, #64	; 0x40
    res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_MOVS, fh, src, chunk_size, b);
 8082202:	463b      	mov	r3, r7
 8082204:	4652      	mov	r2, sl
 8082206:	210b      	movs	r1, #11
 8082208:	4648      	mov	r0, r9
 808220a:	e9cd 8600 	strd	r8, r6, [sp]
 808220e:	f7fe f80d 	bl	808022c <spiffs_phys_rd>
    SPIFFS_CHECK_RES(res);
 8082212:	2800      	cmp	r0, #0
 8082214:	dbed      	blt.n	80821f2 <spiffs_phys_cpy+0x16>
    res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_MOVD,  fh, dst, chunk_size, b);
 8082216:	462b      	mov	r3, r5
 8082218:	4652      	mov	r2, sl
 808221a:	210f      	movs	r1, #15
 808221c:	4648      	mov	r0, r9
 808221e:	e9cd 8600 	strd	r8, r6, [sp]
 8082222:	f7fe f88f 	bl	8080344 <spiffs_phys_wr>
    SPIFFS_CHECK_RES(res);
 8082226:	2800      	cmp	r0, #0
 8082228:	dbe3      	blt.n	80821f2 <spiffs_phys_cpy+0x16>
    len -= chunk_size;
 808222a:	eba4 0408 	sub.w	r4, r4, r8
    src += chunk_size;
 808222e:	4447      	add	r7, r8
    dst += chunk_size;
 8082230:	4445      	add	r5, r8
 8082232:	e7dc      	b.n	80821ee <spiffs_phys_cpy+0x12>

08082234 <spiffs_obj_lu_find_entry_visitor>:
    int *lu_entry) {
 8082234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082238:	4605      	mov	r5, r0
 808223a:	b08b      	sub	sp, #44	; 0x2c
 808223c:	9303      	str	r3, [sp, #12]
 808223e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8082242:	4614      	mov	r4, r2
  s32_t entry_count = fs->block_count * SPIFFS_OBJ_LOOKUP_MAX_ENTRIES(fs);
 8082244:	e9d5 7206 	ldrd	r7, r2, [r5, #24]
    int *lu_entry) {
 8082248:	9308      	str	r3, [sp, #32]
  s32_t entry_count = fs->block_count * SPIFFS_OBJ_LOOKUP_MAX_ENTRIES(fs);
 808224a:	fbb7 f3f2 	udiv	r3, r7, r2
    int *lu_entry) {
 808224e:	460e      	mov	r6, r1
  s32_t entry_count = fs->block_count * SPIFFS_OBJ_LOOKUP_MAX_ENTRIES(fs);
 8082250:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8082254:	ea4f 0143 	mov.w	r1, r3, lsl #1
 8082258:	bf94      	ite	ls
 808225a:	fbb1 f1f2 	udivls	r1, r1, r2
 808225e:	2101      	movhi	r1, #1
 8082260:	6a00      	ldr	r0, [r0, #32]
 8082262:	1a5b      	subs	r3, r3, r1
 8082264:	fb03 f100 	mul.w	r1, r3, r0
 8082268:	9105      	str	r1, [sp, #20]
  spiffs_obj_id *obj_lu_buf = (spiffs_obj_id *)fs->lu_work;
 808226a:	6b69      	ldr	r1, [r5, #52]	; 0x34
  if (cur_entry > (int)SPIFFS_OBJ_LOOKUP_MAX_ENTRIES(fs) - 1) {
 808226c:	42a3      	cmp	r3, r4
  spiffs_obj_id *obj_lu_buf = (spiffs_obj_id *)fs->lu_work;
 808226e:	9107      	str	r1, [sp, #28]
  int entries_per_page = (SPIFFS_CFG_LOG_PAGE_SZ(fs) / sizeof(spiffs_obj_id));
 8082270:	ea4f 0b52 	mov.w	fp, r2, lsr #1
  if (cur_entry > (int)SPIFFS_OBJ_LOOKUP_MAX_ENTRIES(fs) - 1) {
 8082274:	f300 80b5 	bgt.w	80823e2 <spiffs_obj_lu_find_entry_visitor+0x1ae>
    cur_block++;
 8082278:	3601      	adds	r6, #1
 808227a:	b2b6      	uxth	r6, r6
    if (cur_block >= fs->block_count) {
 808227c:	42b0      	cmp	r0, r6
 808227e:	d91f      	bls.n	80822c0 <spiffs_obj_lu_find_entry_visitor+0x8c>
    cur_entry = 0;
 8082280:	2400      	movs	r4, #0
    cur_block_addr = cur_block * SPIFFS_CFG_LOG_BLOCK_SZ(fs);
 8082282:	fb06 f307 	mul.w	r3, r6, r7
 8082286:	9302      	str	r3, [sp, #8]
        if ((flags & SPIFFS_VIS_CHECK_ID) == 0 || obj_lu_buf[cur_entry-entry_offset] == obj_id) {
 8082288:	9b03      	ldr	r3, [sp, #12]
 808228a:	f003 0301 	and.w	r3, r3, #1
 808228e:	9309      	str	r3, [sp, #36]	; 0x24
  while (res == SPIFFS_OK && entry_count > 0) {
 8082290:	9b05      	ldr	r3, [sp, #20]
 8082292:	2b00      	cmp	r3, #0
 8082294:	dd19      	ble.n	80822ca <spiffs_obj_lu_find_entry_visitor+0x96>
    int obj_lookup_page = cur_entry / entries_per_page;
 8082296:	fb94 f9fb 	sdiv	r9, r4, fp
 808229a:	4627      	mov	r7, r4
 808229c:	fb09 f30b 	mul.w	r3, r9, fp
 80822a0:	9306      	str	r3, [sp, #24]
    while (res == SPIFFS_OK && obj_lookup_page < (int)SPIFFS_OBJ_LOOKUP_PAGES(fs)) {
 80822a2:	e9d5 1206 	ldrd	r1, r2, [r5, #24]
 80822a6:	fbb1 f1f2 	udiv	r1, r1, r2
 80822aa:	004b      	lsls	r3, r1, #1
 80822ac:	ebb2 0f41 	cmp.w	r2, r1, lsl #1
 80822b0:	bf94      	ite	ls
 80822b2:	fbb3 f3f2 	udivls	r3, r3, r2
 80822b6:	2301      	movhi	r3, #1
 80822b8:	454b      	cmp	r3, r9
 80822ba:	dc0b      	bgt.n	80822d4 <spiffs_obj_lu_find_entry_visitor+0xa0>
 80822bc:	2400      	movs	r4, #0
 80822be:	e039      	b.n	8082334 <spiffs_obj_lu_find_entry_visitor+0x100>
      if (flags & SPIFFS_VIS_NO_WRAP) {
 80822c0:	9b03      	ldr	r3, [sp, #12]
 80822c2:	f013 0404 	ands.w	r4, r3, #4
 80822c6:	f000 8090 	beq.w	80823ea <spiffs_obj_lu_find_entry_visitor+0x1b6>
        return SPIFFS_VIS_END;
 80822ca:	4c4a      	ldr	r4, [pc, #296]	; (80823f4 <spiffs_obj_lu_find_entry_visitor+0x1c0>)
}
 80822cc:	4620      	mov	r0, r4
 80822ce:	b00b      	add	sp, #44	; 0x2c
 80822d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ,
 80822d4:	9902      	ldr	r1, [sp, #8]
 80822d6:	692b      	ldr	r3, [r5, #16]
 80822d8:	4628      	mov	r0, r5
 80822da:	440b      	add	r3, r1
 80822dc:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80822de:	fb09 3302 	mla	r3, r9, r2, r3
 80822e2:	e9cd 2100 	strd	r2, r1, [sp]
 80822e6:	2200      	movs	r2, #0
 80822e8:	2114      	movs	r1, #20
 80822ea:	f7fd ff9f 	bl	808022c <spiffs_phys_rd>
 80822ee:	46b8      	mov	r8, r7
 80822f0:	4604      	mov	r4, r0
      while (res == SPIFFS_OK &&
 80822f2:	9b05      	ldr	r3, [sp, #20]
 80822f4:	9304      	str	r3, [sp, #16]
 80822f6:	9b06      	ldr	r3, [sp, #24]
 80822f8:	eba7 0a03 	sub.w	sl, r7, r3
 80822fc:	9b04      	ldr	r3, [sp, #16]
 80822fe:	4647      	mov	r7, r8
 8082300:	9305      	str	r3, [sp, #20]
 8082302:	69ab      	ldr	r3, [r5, #24]
 8082304:	b97c      	cbnz	r4, 8082326 <spiffs_obj_lu_find_entry_visitor+0xf2>
 8082306:	45d3      	cmp	fp, sl
 8082308:	dd0d      	ble.n	8082326 <spiffs_obj_lu_find_entry_visitor+0xf2>
          cur_entry < (int)SPIFFS_OBJ_LOOKUP_MAX_ENTRIES(fs)) // for last obj lookup page
 808230a:	69e9      	ldr	r1, [r5, #28]
 808230c:	fbb3 f3f1 	udiv	r3, r3, r1
 8082310:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
 8082314:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8082318:	bf94      	ite	ls
 808231a:	fbb2 f2f1 	udivls	r2, r2, r1
 808231e:	2201      	movhi	r2, #1
 8082320:	1a9b      	subs	r3, r3, r2
          cur_entry - entry_offset < entries_per_page && // for non-last obj lookup pages
 8082322:	4543      	cmp	r3, r8
 8082324:	dc13      	bgt.n	808234e <spiffs_obj_lu_find_entry_visitor+0x11a>
      obj_lookup_page++;
 8082326:	9b06      	ldr	r3, [sp, #24]
 8082328:	f109 0901 	add.w	r9, r9, #1
    while (res == SPIFFS_OK && obj_lookup_page < (int)SPIFFS_OBJ_LOOKUP_PAGES(fs)) {
 808232c:	445b      	add	r3, fp
 808232e:	9306      	str	r3, [sp, #24]
 8082330:	2c00      	cmp	r4, #0
 8082332:	d0b6      	beq.n	80822a2 <spiffs_obj_lu_find_entry_visitor+0x6e>
    if (cur_block >= fs->block_count) {
 8082334:	6a2a      	ldr	r2, [r5, #32]
    cur_block++;
 8082336:	3601      	adds	r6, #1
 8082338:	b2b6      	uxth	r6, r6
    if (cur_block >= fs->block_count) {
 808233a:	4296      	cmp	r6, r2
    cur_block_addr += SPIFFS_CFG_LOG_BLOCK_SZ(fs);
 808233c:	69ab      	ldr	r3, [r5, #24]
    if (cur_block >= fs->block_count) {
 808233e:	d248      	bcs.n	80823d2 <spiffs_obj_lu_find_entry_visitor+0x19e>
    cur_block_addr += SPIFFS_CFG_LOG_BLOCK_SZ(fs);
 8082340:	9a02      	ldr	r2, [sp, #8]
 8082342:	441a      	add	r2, r3
 8082344:	9202      	str	r2, [sp, #8]
  while (res == SPIFFS_OK && entry_count > 0) {
 8082346:	2c00      	cmp	r4, #0
 8082348:	d0a2      	beq.n	8082290 <spiffs_obj_lu_find_entry_visitor+0x5c>
  SPIFFS_CHECK_RES(res);
 808234a:	dbbf      	blt.n	80822cc <spiffs_obj_lu_find_entry_visitor+0x98>
 808234c:	e7bd      	b.n	80822ca <spiffs_obj_lu_find_entry_visitor+0x96>
        if ((flags & SPIFFS_VIS_CHECK_ID) == 0 || obj_lu_buf[cur_entry-entry_offset] == obj_id) {
 808234e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8082350:	b12b      	cbz	r3, 808235e <spiffs_obj_lu_find_entry_visitor+0x12a>
 8082352:	9b07      	ldr	r3, [sp, #28]
 8082354:	9a08      	ldr	r2, [sp, #32]
 8082356:	f833 301a 	ldrh.w	r3, [r3, sl, lsl #1]
 808235a:	4293      	cmp	r3, r2
 808235c:	d131      	bne.n	80823c2 <spiffs_obj_lu_find_entry_visitor+0x18e>
          if (block_ix) *block_ix = cur_block;
 808235e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8082360:	b103      	cbz	r3, 8082364 <spiffs_obj_lu_find_entry_visitor+0x130>
 8082362:	801e      	strh	r6, [r3, #0]
          if (lu_entry) *lu_entry = cur_entry;
 8082364:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8082366:	b10b      	cbz	r3, 808236c <spiffs_obj_lu_find_entry_visitor+0x138>
 8082368:	f8c3 8000 	str.w	r8, [r3]
          if (v) {
 808236c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808236e:	2b00      	cmp	r3, #0
 8082370:	d0ac      	beq.n	80822cc <spiffs_obj_lu_find_entry_visitor+0x98>
            res = v(
 8082372:	9b03      	ldr	r3, [sp, #12]
 8082374:	4632      	mov	r2, r6
 8082376:	079b      	lsls	r3, r3, #30
 8082378:	bf56      	itet	pl
 808237a:	9b07      	ldrpl	r3, [sp, #28]
 808237c:	9908      	ldrmi	r1, [sp, #32]
 808237e:	f833 101a 	ldrhpl.w	r1, [r3, sl, lsl #1]
 8082382:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8082384:	4628      	mov	r0, r5
 8082386:	9301      	str	r3, [sp, #4]
 8082388:	9b16      	ldr	r3, [sp, #88]	; 0x58
 808238a:	9f15      	ldr	r7, [sp, #84]	; 0x54
 808238c:	9300      	str	r3, [sp, #0]
 808238e:	4643      	mov	r3, r8
 8082390:	47b8      	blx	r7
            if (res == SPIFFS_VIS_COUNTINUE || res == SPIFFS_VIS_COUNTINUE_RELOAD) {
 8082392:	f500 531d 	add.w	r3, r0, #10048	; 0x2740
 8082396:	3317      	adds	r3, #23
 8082398:	2b01      	cmp	r3, #1
 808239a:	d829      	bhi.n	80823f0 <spiffs_obj_lu_find_entry_visitor+0x1bc>
              if (res == SPIFFS_VIS_COUNTINUE_RELOAD) {
 808239c:	4b16      	ldr	r3, [pc, #88]	; (80823f8 <spiffs_obj_lu_find_entry_visitor+0x1c4>)
 808239e:	4298      	cmp	r0, r3
 80823a0:	d10f      	bne.n	80823c2 <spiffs_obj_lu_find_entry_visitor+0x18e>
                res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ,
 80823a2:	9902      	ldr	r1, [sp, #8]
 80823a4:	692a      	ldr	r2, [r5, #16]
 80823a6:	69eb      	ldr	r3, [r5, #28]
 80823a8:	440a      	add	r2, r1
 80823aa:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80823ac:	4628      	mov	r0, r5
 80823ae:	e9cd 3100 	strd	r3, r1, [sp]
 80823b2:	fb09 2303 	mla	r3, r9, r3, r2
 80823b6:	2114      	movs	r1, #20
 80823b8:	2200      	movs	r2, #0
 80823ba:	f7fd ff37 	bl	808022c <spiffs_phys_rd>
                SPIFFS_CHECK_RES(res);
 80823be:	2800      	cmp	r0, #0
 80823c0:	db16      	blt.n	80823f0 <spiffs_obj_lu_find_entry_visitor+0x1bc>
 80823c2:	9b04      	ldr	r3, [sp, #16]
 80823c4:	f108 0801 	add.w	r8, r8, #1
 80823c8:	3b01      	subs	r3, #1
 80823ca:	9304      	str	r3, [sp, #16]
 80823cc:	f10a 0a01 	add.w	sl, sl, #1
 80823d0:	e794      	b.n	80822fc <spiffs_obj_lu_find_entry_visitor+0xc8>
      if (flags & SPIFFS_VIS_NO_WRAP) {
 80823d2:	9b03      	ldr	r3, [sp, #12]
 80823d4:	f013 0704 	ands.w	r7, r3, #4
 80823d8:	f47f af77 	bne.w	80822ca <spiffs_obj_lu_find_entry_visitor+0x96>
        cur_block = 0;
 80823dc:	463e      	mov	r6, r7
        cur_block_addr = 0;
 80823de:	9702      	str	r7, [sp, #8]
 80823e0:	e7b1      	b.n	8082346 <spiffs_obj_lu_find_entry_visitor+0x112>
  u32_t cur_block_addr = starting_block * SPIFFS_CFG_LOG_BLOCK_SZ(fs);
 80823e2:	fb07 f306 	mul.w	r3, r7, r6
 80823e6:	9302      	str	r3, [sp, #8]
 80823e8:	e74e      	b.n	8082288 <spiffs_obj_lu_find_entry_visitor+0x54>
        cur_block = 0;
 80823ea:	4626      	mov	r6, r4
        cur_block_addr = 0;
 80823ec:	9402      	str	r4, [sp, #8]
 80823ee:	e74b      	b.n	8082288 <spiffs_obj_lu_find_entry_visitor+0x54>
                res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ,
 80823f0:	4604      	mov	r4, r0
 80823f2:	e76b      	b.n	80822cc <spiffs_obj_lu_find_entry_visitor+0x98>
 80823f4:	ffffd8a8 	.word	0xffffd8a8
 80823f8:	ffffd8a9 	.word	0xffffd8a9

080823fc <spiffs_erase_block>:
    spiffs_block_ix bix) {
 80823fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8082400:	4604      	mov	r4, r0
 8082402:	460d      	mov	r5, r1
  u32_t addr = SPIFFS_BLOCK_TO_PADDR(fs, bix);
 8082404:	6986      	ldr	r6, [r0, #24]
 8082406:	6907      	ldr	r7, [r0, #16]
    SPIFFS_DBG("erase "_SPIPRIad":"_SPIPRIi"\n", addr,  SPIFFS_CFG_PHYS_ERASE_SZ(fs));
 8082408:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80824dc <spiffs_erase_block+0xe0>
  u32_t addr = SPIFFS_BLOCK_TO_PADDR(fs, bix);
 808240c:	fb06 7701 	mla	r7, r6, r1, r7
  while (size > 0) {
 8082410:	2e00      	cmp	r6, #0
 8082412:	dc54      	bgt.n	80824be <spiffs_erase_block+0xc2>
  res = _spiffs_wr(fs, SPIFFS_OP_C_WRTHRU | SPIFFS_OP_T_OBJ_LU2, 0,
 8082414:	e9d4 2106 	ldrd	r2, r1, [r4, #24]
 8082418:	fbb2 f6f1 	udiv	r6, r2, r1
  fs->free_blocks++;
 808241c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  res = _spiffs_wr(fs, SPIFFS_OP_C_WRTHRU | SPIFFS_OP_T_OBJ_LU2, 0,
 808241e:	6920      	ldr	r0, [r4, #16]
  fs->free_blocks++;
 8082420:	3301      	adds	r3, #1
  res = _spiffs_wr(fs, SPIFFS_OP_C_WRTHRU | SPIFFS_OP_T_OBJ_LU2, 0,
 8082422:	3802      	subs	r0, #2
 8082424:	ebb1 0f46 	cmp.w	r1, r6, lsl #1
 8082428:	fb02 0205 	mla	r2, r2, r5, r0
  fs->free_blocks++;
 808242c:	64a3      	str	r3, [r4, #72]	; 0x48
  res = _spiffs_wr(fs, SPIFFS_OP_C_WRTHRU | SPIFFS_OP_T_OBJ_LU2, 0,
 808242e:	f104 0056 	add.w	r0, r4, #86	; 0x56
 8082432:	ea4f 0346 	mov.w	r3, r6, lsl #1
 8082436:	bf94      	ite	ls
 8082438:	fbb3 f3f1 	udivls	r3, r3, r1
 808243c:	2301      	movhi	r3, #1
 808243e:	9001      	str	r0, [sp, #4]
 8082440:	2002      	movs	r0, #2
 8082442:	fb03 2301 	mla	r3, r3, r1, r2
 8082446:	9000      	str	r0, [sp, #0]
 8082448:	2200      	movs	r2, #0
 808244a:	2119      	movs	r1, #25
 808244c:	4620      	mov	r0, r4
 808244e:	f7fd ff79 	bl	8080344 <spiffs_phys_wr>
  SPIFFS_CHECK_RES(res);
 8082452:	2800      	cmp	r0, #0
 8082454:	db30      	blt.n	80824b8 <spiffs_erase_block+0xbc>
  spiffs_obj_id magic = SPIFFS_MAGIC(fs, bix);
 8082456:	e9d4 0207 	ldrd	r0, r2, [r4, #28]
 808245a:	1b52      	subs	r2, r2, r5
 808245c:	4042      	eors	r2, r0
 808245e:	f482 62a5 	eor.w	r2, r2, #1320	; 0x528
 8082462:	f082 0201 	eor.w	r2, r2, #1
 8082466:	f8ad 200e 	strh.w	r2, [sp, #14]
  res = _spiffs_wr(fs, SPIFFS_OP_C_WRTHRU | SPIFFS_OP_T_OBJ_LU2, 0,
 808246a:	69a2      	ldr	r2, [r4, #24]
 808246c:	6921      	ldr	r1, [r4, #16]
 808246e:	fbb2 f6f0 	udiv	r6, r2, r0
 8082472:	3904      	subs	r1, #4
 8082474:	ebb0 0f46 	cmp.w	r0, r6, lsl #1
 8082478:	fb02 1505 	mla	r5, r2, r5, r1
 808247c:	ea4f 0346 	mov.w	r3, r6, lsl #1
 8082480:	f10d 020e 	add.w	r2, sp, #14
 8082484:	bf94      	ite	ls
 8082486:	fbb3 f3f0 	udivls	r3, r3, r0
 808248a:	2301      	movhi	r3, #1
 808248c:	9201      	str	r2, [sp, #4]
 808248e:	2202      	movs	r2, #2
 8082490:	fb03 5300 	mla	r3, r3, r0, r5
 8082494:	9200      	str	r2, [sp, #0]
 8082496:	2119      	movs	r1, #25
 8082498:	2200      	movs	r2, #0
 808249a:	4620      	mov	r0, r4
 808249c:	f7fd ff52 	bl	8080344 <spiffs_phys_wr>
  SPIFFS_CHECK_RES(res);
 80824a0:	2800      	cmp	r0, #0
 80824a2:	db09      	blt.n	80824b8 <spiffs_erase_block+0xbc>
  fs->max_erase_count++;
 80824a4:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 80824a8:	3301      	adds	r3, #1
 80824aa:	b29b      	uxth	r3, r3
  if (fs->max_erase_count == SPIFFS_OBJ_ID_IX_FLAG) {
 80824ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fs->max_erase_count = 0;
 80824b0:	bf08      	it	eq
 80824b2:	2300      	moveq	r3, #0
 80824b4:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
}
 80824b8:	b004      	add	sp, #16
 80824ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPIFFS_DBG("erase "_SPIPRIad":"_SPIPRIi"\n", addr,  SPIFFS_CFG_PHYS_ERASE_SZ(fs));
 80824be:	4639      	mov	r1, r7
 80824c0:	4640      	mov	r0, r8
 80824c2:	6962      	ldr	r2, [r4, #20]
 80824c4:	f00a fb24 	bl	808cb10 <spiffsParticleInfoLog>
    SPIFFS_HAL_ERASE(fs, addr, SPIFFS_CFG_PHYS_ERASE_SZ(fs));
 80824c8:	4639      	mov	r1, r7
 80824ca:	68a3      	ldr	r3, [r4, #8]
 80824cc:	4620      	mov	r0, r4
 80824ce:	6962      	ldr	r2, [r4, #20]
 80824d0:	4798      	blx	r3
    addr += SPIFFS_CFG_PHYS_ERASE_SZ(fs);
 80824d2:	6963      	ldr	r3, [r4, #20]
 80824d4:	441f      	add	r7, r3
    size -= SPIFFS_CFG_PHYS_ERASE_SZ(fs);
 80824d6:	1af6      	subs	r6, r6, r3
 80824d8:	e79a      	b.n	8082410 <spiffs_erase_block+0x14>
 80824da:	bf00      	nop
 80824dc:	08092953 	.word	0x08092953

080824e0 <spiffs_obj_lu_scan>:
    spiffs *fs) {
 80824e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  spiffs_obj_id erase_count_min = SPIFFS_OBJ_ID_FREE;
 80824e4:	f64f 76ff 	movw	r6, #65535	; 0xffff
  bix = 0;
 80824e8:	2500      	movs	r5, #0
    spiffs *fs) {
 80824ea:	4604      	mov	r4, r0
  spiffs_block_ix unerased_bix = (spiffs_block_ix)-1;
 80824ec:	4637      	mov	r7, r6
    res = _spiffs_rd(fs,
 80824ee:	f04f 0802 	mov.w	r8, #2
    spiffs *fs) {
 80824f2:	b089      	sub	sp, #36	; 0x24
  bix = 0;
 80824f4:	f8ad 5018 	strh.w	r5, [sp, #24]
    res = _spiffs_rd(fs,
 80824f8:	f10d 091a 	add.w	r9, sp, #26
  while (bix < fs->block_count) {
 80824fc:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8082500:	6a23      	ldr	r3, [r4, #32]
 8082502:	4299      	cmp	r1, r3
 8082504:	d323      	bcc.n	808254e <spiffs_obj_lu_scan+0x6e>
  } else if (erase_count_max - erase_count_min > (SPIFFS_OBJ_ID_FREE)/2) {
 8082506:	1bab      	subs	r3, r5, r6
 8082508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  if (unerased_bix != (spiffs_block_ix)-1) {
 808250c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    erase_count_final = erase_count_min+1;
 8082510:	bfac      	ite	ge
 8082512:	1c75      	addge	r5, r6, #1
    erase_count_final = erase_count_max+1;
 8082514:	3501      	addlt	r5, #1
 8082516:	b2ad      	uxth	r5, r5
  if (unerased_bix != (spiffs_block_ix)-1) {
 8082518:	429f      	cmp	r7, r3
  fs->max_erase_count = erase_count_final;
 808251a:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
  if (unerased_bix != (spiffs_block_ix)-1) {
 808251e:	d179      	bne.n	8082614 <spiffs_obj_lu_scan+0x134>
  fs->free_blocks = 0;
 8082520:	2300      	movs	r3, #0
  res = spiffs_obj_lu_find_entry_visitor(fs,
 8082522:	aa07      	add	r2, sp, #28
 8082524:	9205      	str	r2, [sp, #20]
 8082526:	aa06      	add	r2, sp, #24
 8082528:	e9cd 3203 	strd	r3, r2, [sp, #12]
 808252c:	4a3f      	ldr	r2, [pc, #252]	; (808262c <spiffs_obj_lu_scan+0x14c>)
 808252e:	4619      	mov	r1, r3
 8082530:	e9cd 3200 	strd	r3, r2, [sp]
  fs->stats_p_allocated = 0;
 8082534:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
  res = spiffs_obj_lu_find_entry_visitor(fs,
 8082538:	461a      	mov	r2, r3
  fs->stats_p_deleted = 0;
 808253a:	6523      	str	r3, [r4, #80]	; 0x50
  res = spiffs_obj_lu_find_entry_visitor(fs,
 808253c:	9302      	str	r3, [sp, #8]
 808253e:	4620      	mov	r0, r4
 8082540:	f7ff fe78 	bl	8082234 <spiffs_obj_lu_find_entry_visitor>
    res = SPIFFS_OK;
 8082544:	4b3a      	ldr	r3, [pc, #232]	; (8082630 <spiffs_obj_lu_scan+0x150>)
 8082546:	4298      	cmp	r0, r3
 8082548:	bf08      	it	eq
 808254a:	2000      	moveq	r0, #0
 808254c:	e05f      	b.n	808260e <spiffs_obj_lu_scan+0x12e>
    res = _spiffs_rd(fs,
 808254e:	e9d4 2006 	ldrd	r2, r0, [r4, #24]
 8082552:	fbb2 fef0 	udiv	lr, r2, r0
 8082556:	ebb0 0f4e 	cmp.w	r0, lr, lsl #1
 808255a:	ea4f 034e 	mov.w	r3, lr, lsl #1
 808255e:	bf94      	ite	ls
 8082560:	fbb3 f3f0 	udivls	r3, r3, r0
 8082564:	2301      	movhi	r3, #1
 8082566:	f8d4 c010 	ldr.w	ip, [r4, #16]
 808256a:	e9cd 8900 	strd	r8, r9, [sp]
 808256e:	f1ac 0c04 	sub.w	ip, ip, #4
 8082572:	fb01 c202 	mla	r2, r1, r2, ip
 8082576:	2115      	movs	r1, #21
 8082578:	fb03 2300 	mla	r3, r3, r0, r2
 808257c:	2200      	movs	r2, #0
 808257e:	4620      	mov	r0, r4
 8082580:	f7fd fe54 	bl	808022c <spiffs_phys_rd>
    SPIFFS_CHECK_RES(res);
 8082584:	2800      	cmp	r0, #0
 8082586:	db42      	blt.n	808260e <spiffs_obj_lu_scan+0x12e>
    if (magic != SPIFFS_MAGIC(fs, bix)) {
 8082588:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 808258c:	6a22      	ldr	r2, [r4, #32]
 808258e:	69e0      	ldr	r0, [r4, #28]
 8082590:	1a52      	subs	r2, r2, r1
 8082592:	4042      	eors	r2, r0
 8082594:	f482 62a5 	eor.w	r2, r2, #1320	; 0x528
 8082598:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 808259c:	f082 0201 	eor.w	r2, r2, #1
 80825a0:	b292      	uxth	r2, r2
 80825a2:	4293      	cmp	r3, r2
 80825a4:	d004      	beq.n	80825b0 <spiffs_obj_lu_scan+0xd0>
      if (unerased_bix == (spiffs_block_ix)-1) {
 80825a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80825aa:	429f      	cmp	r7, r3
 80825ac:	d12e      	bne.n	808260c <spiffs_obj_lu_scan+0x12c>
        unerased_bix = bix;
 80825ae:	460f      	mov	r7, r1
    res = _spiffs_rd(fs,
 80825b0:	f8d4 c018 	ldr.w	ip, [r4, #24]
 80825b4:	6922      	ldr	r2, [r4, #16]
 80825b6:	fbbc fef0 	udiv	lr, ip, r0
 80825ba:	ebb0 0f4e 	cmp.w	r0, lr, lsl #1
 80825be:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80825c2:	bf94      	ite	ls
 80825c4:	fbb3 f3f0 	udivls	r3, r3, r0
 80825c8:	2301      	movhi	r3, #1
 80825ca:	3a02      	subs	r2, #2
 80825cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80825d0:	aa07      	add	r2, sp, #28
 80825d2:	fb03 1300 	mla	r3, r3, r0, r1
 80825d6:	e9cd 8200 	strd	r8, r2, [sp]
 80825da:	2115      	movs	r1, #21
 80825dc:	2200      	movs	r2, #0
 80825de:	4620      	mov	r0, r4
 80825e0:	f7fd fe24 	bl	808022c <spiffs_phys_rd>
    SPIFFS_CHECK_RES(res);
 80825e4:	2800      	cmp	r0, #0
 80825e6:	db12      	blt.n	808260e <spiffs_obj_lu_scan+0x12e>
    if (erase_count != SPIFFS_OBJ_ID_FREE) {
 80825e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80825ec:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80825f0:	4293      	cmp	r3, r2
 80825f2:	d005      	beq.n	8082600 <spiffs_obj_lu_scan+0x120>
      erase_count_min = MIN(erase_count_min, erase_count);
 80825f4:	429e      	cmp	r6, r3
 80825f6:	bf28      	it	cs
 80825f8:	461e      	movcs	r6, r3
      erase_count_max = MAX(erase_count_max, erase_count);
 80825fa:	429d      	cmp	r5, r3
 80825fc:	bf38      	it	cc
 80825fe:	461d      	movcc	r5, r3
    bix++;
 8082600:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8082604:	3301      	adds	r3, #1
 8082606:	f8ad 3018 	strh.w	r3, [sp, #24]
 808260a:	e777      	b.n	80824fc <spiffs_obj_lu_scan+0x1c>
        SPIFFS_CHECK_RES(SPIFFS_ERR_NOT_A_FS);
 808260c:	4809      	ldr	r0, [pc, #36]	; (8082634 <spiffs_obj_lu_scan+0x154>)
}
 808260e:	b009      	add	sp, #36	; 0x24
 8082610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    SPIFFS_DBG("mount: erase block "_SPIPRIbl"\n", bix);
 8082614:	4808      	ldr	r0, [pc, #32]	; (8082638 <spiffs_obj_lu_scan+0x158>)
 8082616:	f00a fa7b 	bl	808cb10 <spiffsParticleInfoLog>
    res = spiffs_erase_block(fs, unerased_bix);
 808261a:	4639      	mov	r1, r7
 808261c:	4620      	mov	r0, r4
 808261e:	f7ff feed 	bl	80823fc <spiffs_erase_block>
    SPIFFS_CHECK_RES(res);
 8082622:	2800      	cmp	r0, #0
 8082624:	f6bf af7c 	bge.w	8082520 <spiffs_obj_lu_scan+0x40>
 8082628:	e7f1      	b.n	808260e <spiffs_obj_lu_scan+0x12e>
 808262a:	bf00      	nop
 808262c:	08081f2d 	.word	0x08081f2d
 8082630:	ffffd8a8 	.word	0xffffd8a8
 8082634:	ffffd8d7 	.word	0xffffd8d7
 8082638:	08092962 	.word	0x08092962

0808263c <spiffs_obj_lu_find_id>:
    int *lu_entry) {
 808263c:	b510      	push	{r4, lr}
 808263e:	b086      	sub	sp, #24
  s32_t res = spiffs_obj_lu_find_entry_visitor(
 8082640:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8082642:	9405      	str	r4, [sp, #20]
 8082644:	9c08      	ldr	r4, [sp, #32]
 8082646:	9404      	str	r4, [sp, #16]
 8082648:	2400      	movs	r4, #0
 808264a:	e9cd 3400 	strd	r3, r4, [sp]
 808264e:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8082652:	2301      	movs	r3, #1
 8082654:	f7ff fdee 	bl	8082234 <spiffs_obj_lu_find_entry_visitor>
}
 8082658:	4a03      	ldr	r2, [pc, #12]	; (8082668 <spiffs_obj_lu_find_id+0x2c>)
 808265a:	4b04      	ldr	r3, [pc, #16]	; (808266c <spiffs_obj_lu_find_id+0x30>)
 808265c:	4290      	cmp	r0, r2
 808265e:	bf08      	it	eq
 8082660:	4618      	moveq	r0, r3
 8082662:	b006      	add	sp, #24
 8082664:	bd10      	pop	{r4, pc}
 8082666:	bf00      	nop
 8082668:	ffffd8a8 	.word	0xffffd8a8
 808266c:	ffffd8ee 	.word	0xffffd8ee

08082670 <spiffs_obj_lu_find_free>:
    int *lu_entry) {
 8082670:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8082674:	4688      	mov	r8, r1
  if (!fs->cleaning && fs->free_blocks < 2) {
 8082676:	f890 1054 	ldrb.w	r1, [r0, #84]	; 0x54
    int *lu_entry) {
 808267a:	4605      	mov	r5, r0
 808267c:	4691      	mov	r9, r2
 808267e:	461e      	mov	r6, r3
 8082680:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (!fs->cleaning && fs->free_blocks < 2) {
 8082682:	b189      	cbz	r1, 80826a8 <spiffs_obj_lu_find_free+0x38>
  res = spiffs_obj_lu_find_id(fs, starting_block, starting_lu_entry,
 8082684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8082688:	464a      	mov	r2, r9
 808268a:	4641      	mov	r1, r8
 808268c:	4628      	mov	r0, r5
 808268e:	e9cd 6700 	strd	r6, r7, [sp]
 8082692:	f7ff ffd3 	bl	808263c <spiffs_obj_lu_find_id>
  if (res == SPIFFS_OK) {
 8082696:	4604      	mov	r4, r0
 8082698:	b1b0      	cbz	r0, 80826c8 <spiffs_obj_lu_find_free+0x58>
  if (res == SPIFFS_ERR_FULL) {
 808269a:	4b12      	ldr	r3, [pc, #72]	; (80826e4 <spiffs_obj_lu_find_free+0x74>)
 808269c:	4298      	cmp	r0, r3
 808269e:	d11d      	bne.n	80826dc <spiffs_obj_lu_find_free+0x6c>
    SPIFFS_DBG("fs full\n");
 80826a0:	4811      	ldr	r0, [pc, #68]	; (80826e8 <spiffs_obj_lu_find_free+0x78>)
 80826a2:	f00a fa35 	bl	808cb10 <spiffsParticleInfoLog>
 80826a6:	e019      	b.n	80826dc <spiffs_obj_lu_find_free+0x6c>
  if (!fs->cleaning && fs->free_blocks < 2) {
 80826a8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80826aa:	2b01      	cmp	r3, #1
 80826ac:	d8ea      	bhi.n	8082684 <spiffs_obj_lu_find_free+0x14>
    res = spiffs_gc_quick(fs, 0);
 80826ae:	f7fd ff49 	bl	8080544 <spiffs_gc_quick>
    if (res == SPIFFS_ERR_NO_DELETED_BLOCKS) {
 80826b2:	4b0e      	ldr	r3, [pc, #56]	; (80826ec <spiffs_obj_lu_find_free+0x7c>)
    res = spiffs_gc_quick(fs, 0);
 80826b4:	4604      	mov	r4, r0
    if (res == SPIFFS_ERR_NO_DELETED_BLOCKS) {
 80826b6:	4298      	cmp	r0, r3
 80826b8:	d001      	beq.n	80826be <spiffs_obj_lu_find_free+0x4e>
    SPIFFS_CHECK_RES(res);
 80826ba:	2800      	cmp	r0, #0
 80826bc:	db0e      	blt.n	80826dc <spiffs_obj_lu_find_free+0x6c>
    if (fs->free_blocks < 2) {
 80826be:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80826c0:	2b01      	cmp	r3, #1
 80826c2:	d8df      	bhi.n	8082684 <spiffs_obj_lu_find_free+0x14>
      return SPIFFS_ERR_FULL;
 80826c4:	4c07      	ldr	r4, [pc, #28]	; (80826e4 <spiffs_obj_lu_find_free+0x74>)
 80826c6:	e009      	b.n	80826dc <spiffs_obj_lu_find_free+0x6c>
    fs->free_cursor_block_ix = *block_ix;
 80826c8:	8833      	ldrh	r3, [r6, #0]
 80826ca:	84ab      	strh	r3, [r5, #36]	; 0x24
    fs->free_cursor_obj_lu_entry = (*lu_entry) + 1;
 80826cc:	683b      	ldr	r3, [r7, #0]
 80826ce:	3301      	adds	r3, #1
 80826d0:	62ab      	str	r3, [r5, #40]	; 0x28
    if (*lu_entry == 0) {
 80826d2:	683b      	ldr	r3, [r7, #0]
 80826d4:	b913      	cbnz	r3, 80826dc <spiffs_obj_lu_find_free+0x6c>
      fs->free_blocks--;
 80826d6:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80826d8:	3b01      	subs	r3, #1
 80826da:	64ab      	str	r3, [r5, #72]	; 0x48
}
 80826dc:	4620      	mov	r0, r4
 80826de:	b003      	add	sp, #12
 80826e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80826e4:	ffffd8ef 	.word	0xffffd8ef
 80826e8:	0809297b 	.word	0x0809297b
 80826ec:	ffffd8d3 	.word	0xffffd8d3

080826f0 <spiffs_obj_lu_find_id_and_span>:
    spiffs_page_ix *pix) {
 80826f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80826f2:	4604      	mov	r4, r0
 80826f4:	b08b      	sub	sp, #44	; 0x2c
 80826f6:	4608      	mov	r0, r1
 80826f8:	f8ad 201e 	strh.w	r2, [sp, #30]
 80826fc:	9d10      	ldr	r5, [sp, #64]	; 0x40
  res = spiffs_obj_lu_find_entry_visitor(fs,
 80826fe:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8082700:	6b22      	ldr	r2, [r4, #48]	; 0x30
    spiffs_page_ix *pix) {
 8082702:	f8ad 301c 	strh.w	r3, [sp, #28]
  res = spiffs_obj_lu_find_entry_visitor(fs,
 8082706:	b103      	cbz	r3, 808270a <spiffs_obj_lu_find_id_and_span+0x1a>
 8082708:	ab07      	add	r3, sp, #28
 808270a:	ae09      	add	r6, sp, #36	; 0x24
 808270c:	9605      	str	r6, [sp, #20]
 808270e:	f10d 0622 	add.w	r6, sp, #34	; 0x22
 8082712:	9604      	str	r6, [sp, #16]
 8082714:	f10d 061e 	add.w	r6, sp, #30
 8082718:	e9cd 3602 	strd	r3, r6, [sp, #8]
 808271c:	4b14      	ldr	r3, [pc, #80]	; (8082770 <spiffs_obj_lu_find_id_and_span+0x80>)
 808271e:	e9cd 0300 	strd	r0, r3, [sp]
 8082722:	2301      	movs	r3, #1
 8082724:	4620      	mov	r0, r4
 8082726:	f7ff fd85 	bl	8082234 <spiffs_obj_lu_find_entry_visitor>
  if (res == SPIFFS_VIS_END) {
 808272a:	4b12      	ldr	r3, [pc, #72]	; (8082774 <spiffs_obj_lu_find_id_and_span+0x84>)
 808272c:	4298      	cmp	r0, r3
 808272e:	d01c      	beq.n	808276a <spiffs_obj_lu_find_id_and_span+0x7a>
  SPIFFS_CHECK_RES(res);
 8082730:	2800      	cmp	r0, #0
 8082732:	db18      	blt.n	8082766 <spiffs_obj_lu_find_id_and_span+0x76>
  if (pix) {
 8082734:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
 8082738:	9e09      	ldr	r6, [sp, #36]	; 0x24
 808273a:	b195      	cbz	r5, 8082762 <spiffs_obj_lu_find_id_and_span+0x72>
    *pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, entry);
 808273c:	e9d4 1c06 	ldrd	r1, ip, [r4, #24]
 8082740:	fbb1 f1fc 	udiv	r1, r1, ip
 8082744:	004b      	lsls	r3, r1, #1
 8082746:	ebbc 0f41 	cmp.w	ip, r1, lsl #1
 808274a:	bf94      	ite	ls
 808274c:	fbb3 f3fc 	udivls	r3, r3, ip
 8082750:	2301      	movhi	r3, #1
 8082752:	fb01 f207 	mul.w	r2, r1, r7
 8082756:	b292      	uxth	r2, r2
 8082758:	bf98      	it	ls
 808275a:	b29b      	uxthls	r3, r3
 808275c:	4432      	add	r2, r6
 808275e:	4413      	add	r3, r2
 8082760:	802b      	strh	r3, [r5, #0]
  fs->cursor_block_ix = bix;
 8082762:	85a7      	strh	r7, [r4, #44]	; 0x2c
  fs->cursor_obj_lu_entry = entry;
 8082764:	6326      	str	r6, [r4, #48]	; 0x30
}
 8082766:	b00b      	add	sp, #44	; 0x2c
 8082768:	bdf0      	pop	{r4, r5, r6, r7, pc}
    res = SPIFFS_ERR_NOT_FOUND;
 808276a:	4803      	ldr	r0, [pc, #12]	; (8082778 <spiffs_obj_lu_find_id_and_span+0x88>)
 808276c:	e7fb      	b.n	8082766 <spiffs_obj_lu_find_id_and_span+0x76>
 808276e:	bf00      	nop
 8082770:	08081ca1 	.word	0x08081ca1
 8082774:	ffffd8a8 	.word	0xffffd8a8
 8082778:	ffffd8ee 	.word	0xffffd8ee

0808277c <spiffs_page_allocate_data>:
    spiffs_page_ix *pix) {
 808277c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8082780:	b087      	sub	sp, #28
 8082782:	461f      	mov	r7, r3
  res = spiffs_obj_lu_find_free(fs, fs->free_cursor_block_ix, fs->free_cursor_obj_lu_entry, &bix, &entry);
 8082784:	ab05      	add	r3, sp, #20
 8082786:	9300      	str	r3, [sp, #0]
    spiffs_page_ix *pix) {
 8082788:	f8ad 100e 	strh.w	r1, [sp, #14]
 808278c:	4615      	mov	r5, r2
  res = spiffs_obj_lu_find_free(fs, fs->free_cursor_block_ix, fs->free_cursor_obj_lu_entry, &bix, &entry);
 808278e:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 8082790:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8082792:	f10d 0312 	add.w	r3, sp, #18
    spiffs_page_ix *pix) {
 8082796:	4604      	mov	r4, r0
 8082798:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 808279c:	9e11      	ldr	r6, [sp, #68]	; 0x44
  res = spiffs_obj_lu_find_free(fs, fs->free_cursor_block_ix, fs->free_cursor_obj_lu_entry, &bix, &entry);
 808279e:	f7ff ff67 	bl	8082670 <spiffs_obj_lu_find_free>
  SPIFFS_CHECK_RES(res);
 80827a2:	2800      	cmp	r0, #0
 80827a4:	f2c0 80a1 	blt.w	80828ea <spiffs_page_allocate_data+0x16e>
  res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_UPDT,
 80827a8:	f10d 000e 	add.w	r0, sp, #14
 80827ac:	9001      	str	r0, [sp, #4]
 80827ae:	2002      	movs	r0, #2
 80827b0:	9a05      	ldr	r2, [sp, #20]
 80827b2:	6923      	ldr	r3, [r4, #16]
 80827b4:	69a1      	ldr	r1, [r4, #24]
 80827b6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80827ba:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80827be:	9000      	str	r0, [sp, #0]
 80827c0:	fb01 3302 	mla	r3, r1, r2, r3
 80827c4:	4620      	mov	r0, r4
 80827c6:	2200      	movs	r2, #0
 80827c8:	2104      	movs	r1, #4
 80827ca:	f7fd fdbb 	bl	8080344 <spiffs_phys_wr>
  SPIFFS_CHECK_RES(res);
 80827ce:	2800      	cmp	r0, #0
 80827d0:	f2c0 808b 	blt.w	80828ea <spiffs_page_allocate_data+0x16e>
  fs->stats_p_allocated++;
 80827d4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80827d6:	3301      	adds	r3, #1
 80827d8:	64e3      	str	r3, [r4, #76]	; 0x4c
  ph->flags &= ~SPIFFS_PH_FLAG_USED;
 80827da:	792b      	ldrb	r3, [r5, #4]
 80827dc:	f023 0301 	bic.w	r3, r3, #1
 80827e0:	712b      	strb	r3, [r5, #4]
  res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
 80827e2:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 80827e6:	fbb0 fcf1 	udiv	ip, r0, r1
 80827ea:	ebb1 0f4c 	cmp.w	r1, ip, lsl #1
 80827ee:	ea4f 024c 	mov.w	r2, ip, lsl #1
 80827f2:	bf94      	ite	ls
 80827f4:	fbb2 f2f1 	udivls	r2, r2, r1
 80827f8:	2201      	movhi	r2, #1
 80827fa:	9b05      	ldr	r3, [sp, #20]
 80827fc:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8082800:	441a      	add	r2, r3
 8082802:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8082806:	9501      	str	r5, [sp, #4]
 8082808:	fb00 e303 	mla	r3, r0, r3, lr
 808280c:	2005      	movs	r0, #5
 808280e:	fb01 3302 	mla	r3, r1, r2, r3
 8082812:	9000      	str	r0, [sp, #0]
 8082814:	2200      	movs	r2, #0
 8082816:	2107      	movs	r1, #7
 8082818:	4620      	mov	r0, r4
 808281a:	f7fd fd93 	bl	8080344 <spiffs_phys_wr>
  SPIFFS_CHECK_RES(res);
 808281e:	2800      	cmp	r0, #0
 8082820:	db63      	blt.n	80828ea <spiffs_page_allocate_data+0x16e>
  if (data) {
 8082822:	b317      	cbz	r7, 808286a <spiffs_page_allocate_data+0xee>
    res = _spiffs_wr(fs,  SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
 8082824:	e9d4 c006 	ldrd	ip, r0, [r4, #24]
 8082828:	fbbc fef0 	udiv	lr, ip, r0
 808282c:	ebb0 0f4e 	cmp.w	r0, lr, lsl #1
 8082830:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8082834:	bf94      	ite	ls
 8082836:	fbb2 f2f0 	udivls	r2, r2, r0
 808283a:	2201      	movhi	r2, #1
 808283c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 808283e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8082842:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8082846:	3105      	adds	r1, #5
 8082848:	4449      	add	r1, r9
 808284a:	fb0c 1303 	mla	r3, ip, r3, r1
 808284e:	9905      	ldr	r1, [sp, #20]
 8082850:	9701      	str	r7, [sp, #4]
 8082852:	440a      	add	r2, r1
 8082854:	990e      	ldr	r1, [sp, #56]	; 0x38
 8082856:	fb00 3302 	mla	r3, r0, r2, r3
 808285a:	9100      	str	r1, [sp, #0]
 808285c:	2200      	movs	r2, #0
 808285e:	2107      	movs	r1, #7
 8082860:	4620      	mov	r0, r4
 8082862:	f7fd fd6f 	bl	8080344 <spiffs_phys_wr>
    SPIFFS_CHECK_RES(res);
 8082866:	2800      	cmp	r0, #0
 8082868:	db3f      	blt.n	80828ea <spiffs_page_allocate_data+0x16e>
  if (finalize && (ph->flags & SPIFFS_PH_FLAG_FINAL)) {
 808286a:	f1b8 0f00 	cmp.w	r8, #0
 808286e:	d026      	beq.n	80828be <spiffs_page_allocate_data+0x142>
 8082870:	792b      	ldrb	r3, [r5, #4]
 8082872:	079a      	lsls	r2, r3, #30
 8082874:	d523      	bpl.n	80828be <spiffs_page_allocate_data+0x142>
    ph->flags &= ~SPIFFS_PH_FLAG_FINAL;
 8082876:	f023 0302 	bic.w	r3, r3, #2
 808287a:	712b      	strb	r3, [r5, #4]
    res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
 808287c:	e9d4 7106 	ldrd	r7, r1, [r4, #24]
 8082880:	fbb7 f3f1 	udiv	r3, r7, r1
 8082884:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
 8082888:	ea4f 0243 	mov.w	r2, r3, lsl #1
 808288c:	bf94      	ite	ls
 808288e:	fbb2 f2f1 	udivls	r2, r2, r1
 8082892:	2201      	movhi	r2, #1
 8082894:	6920      	ldr	r0, [r4, #16]
 8082896:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 808289a:	3004      	adds	r0, #4
 808289c:	fb07 0303 	mla	r3, r7, r3, r0
 80828a0:	9805      	ldr	r0, [sp, #20]
 80828a2:	3504      	adds	r5, #4
 80828a4:	4402      	add	r2, r0
 80828a6:	2001      	movs	r0, #1
 80828a8:	fb01 3302 	mla	r3, r1, r2, r3
 80828ac:	9000      	str	r0, [sp, #0]
 80828ae:	2200      	movs	r2, #0
 80828b0:	2107      	movs	r1, #7
 80828b2:	4620      	mov	r0, r4
 80828b4:	9501      	str	r5, [sp, #4]
 80828b6:	f7fd fd45 	bl	8080344 <spiffs_phys_wr>
    SPIFFS_CHECK_RES(res);
 80828ba:	2800      	cmp	r0, #0
 80828bc:	db15      	blt.n	80828ea <spiffs_page_allocate_data+0x16e>
  if (pix) {
 80828be:	b1a6      	cbz	r6, 80828ea <spiffs_page_allocate_data+0x16e>
    *pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, entry);
 80828c0:	e9d4 1506 	ldrd	r1, r5, [r4, #24]
 80828c4:	fbb1 f1f5 	udiv	r1, r1, r5
 80828c8:	004b      	lsls	r3, r1, #1
 80828ca:	ebb5 0f41 	cmp.w	r5, r1, lsl #1
 80828ce:	bf94      	ite	ls
 80828d0:	fbb3 f3f5 	udivls	r3, r3, r5
 80828d4:	2301      	movhi	r3, #1
 80828d6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80828da:	bf98      	it	ls
 80828dc:	b29b      	uxthls	r3, r3
 80828de:	434a      	muls	r2, r1
 80828e0:	9905      	ldr	r1, [sp, #20]
 80828e2:	b292      	uxth	r2, r2
 80828e4:	440a      	add	r2, r1
 80828e6:	4413      	add	r3, r2
 80828e8:	8033      	strh	r3, [r6, #0]
}
 80828ea:	b007      	add	sp, #28
 80828ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080828f0 <spiffs_page_delete>:
    spiffs_page_ix pix) {
 80828f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80828f2:	460d      	mov	r5, r1
  res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_DELE,
 80828f4:	e9d0 7606 	ldrd	r7, r6, [r0, #24]
 80828f8:	fbb7 f1f6 	udiv	r1, r7, r6
  spiffs_obj_id d_obj_id = SPIFFS_OBJ_ID_DELETED;
 80828fc:	2300      	movs	r3, #0
  res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_DELE,
 80828fe:	fbb5 f2f1 	udiv	r2, r5, r1
    spiffs_page_ix pix) {
 8082902:	b085      	sub	sp, #20
  res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_DELE,
 8082904:	ebb6 0f41 	cmp.w	r6, r1, lsl #1
  spiffs_obj_id d_obj_id = SPIFFS_OBJ_ID_DELETED;
 8082908:	f8ad 300e 	strh.w	r3, [sp, #14]
  res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_DELE,
 808290c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8082910:	bf94      	ite	ls
 8082912:	fbb3 f3f6 	udivls	r3, r3, r6
 8082916:	2301      	movhi	r3, #1
 8082918:	f8d0 c010 	ldr.w	ip, [r0, #16]
    spiffs_page_ix pix) {
 808291c:	4604      	mov	r4, r0
  res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_DELE,
 808291e:	fb01 5012 	mls	r0, r1, r2, r5
 8082922:	fb07 c202 	mla	r2, r7, r2, ip
 8082926:	1ac3      	subs	r3, r0, r3
 8082928:	f10d 010e 	add.w	r1, sp, #14
 808292c:	9101      	str	r1, [sp, #4]
 808292e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8082932:	2102      	movs	r1, #2
 8082934:	2200      	movs	r2, #0
 8082936:	9100      	str	r1, [sp, #0]
 8082938:	4620      	mov	r0, r4
 808293a:	4611      	mov	r1, r2
 808293c:	f7fd fd02 	bl	8080344 <spiffs_phys_wr>
  SPIFFS_CHECK_RES(res);
 8082940:	2800      	cmp	r0, #0
 8082942:	db17      	blt.n	8082974 <spiffs_page_delete+0x84>
  fs->stats_p_deleted++;
 8082944:	6d23      	ldr	r3, [r4, #80]	; 0x50
  res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_DELE,
 8082946:	f10d 010d 	add.w	r1, sp, #13
  fs->stats_p_deleted++;
 808294a:	3301      	adds	r3, #1
 808294c:	6523      	str	r3, [r4, #80]	; 0x50
  fs->stats_p_allocated--;
 808294e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_DELE,
 8082950:	9101      	str	r1, [sp, #4]
  fs->stats_p_allocated--;
 8082952:	3b01      	subs	r3, #1
 8082954:	64e3      	str	r3, [r4, #76]	; 0x4c
  flags &= ~(SPIFFS_PH_FLAG_DELET | SPIFFS_PH_FLAG_USED);
 8082956:	237e      	movs	r3, #126	; 0x7e
  res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_DELE,
 8082958:	2101      	movs	r1, #1
 808295a:	6922      	ldr	r2, [r4, #16]
  flags &= ~(SPIFFS_PH_FLAG_DELET | SPIFFS_PH_FLAG_USED);
 808295c:	f88d 300d 	strb.w	r3, [sp, #13]
  res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_DELE,
 8082960:	69e3      	ldr	r3, [r4, #28]
 8082962:	3204      	adds	r2, #4
 8082964:	fb03 2305 	mla	r3, r3, r5, r2
 8082968:	9100      	str	r1, [sp, #0]
 808296a:	2200      	movs	r2, #0
 808296c:	2103      	movs	r1, #3
 808296e:	4620      	mov	r0, r4
 8082970:	f7fd fce8 	bl	8080344 <spiffs_phys_wr>
}
 8082974:	b005      	add	sp, #20
 8082976:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082978 <spiffs_page_move>:
    spiffs_page_ix *dst_pix) {
 8082978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808297c:	b086      	sub	sp, #24
 808297e:	f8ad 300e 	strh.w	r3, [sp, #14]
  res = spiffs_obj_lu_find_free(fs, fs->free_cursor_block_ix, fs->free_cursor_obj_lu_entry, &bix, &entry);
 8082982:	ab05      	add	r3, sp, #20
 8082984:	9300      	str	r3, [sp, #0]
    spiffs_page_ix *dst_pix) {
 8082986:	460f      	mov	r7, r1
 8082988:	4690      	mov	r8, r2
  res = spiffs_obj_lu_find_free(fs, fs->free_cursor_block_ix, fs->free_cursor_obj_lu_entry, &bix, &entry);
 808298a:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 808298c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 808298e:	f10d 0312 	add.w	r3, sp, #18
    spiffs_page_ix *dst_pix) {
 8082992:	4604      	mov	r4, r0
 8082994:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8082998:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  res = spiffs_obj_lu_find_free(fs, fs->free_cursor_block_ix, fs->free_cursor_obj_lu_entry, &bix, &entry);
 808299c:	f7ff fe68 	bl	8082670 <spiffs_obj_lu_find_free>
  SPIFFS_CHECK_RES(res);
 80829a0:	2800      	cmp	r0, #0
 80829a2:	f2c0 808a 	blt.w	8082aba <spiffs_page_move+0x142>
  free_pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, entry);
 80829a6:	e9d4 2106 	ldrd	r2, r1, [r4, #24]
 80829aa:	fbb2 f2f1 	udiv	r2, r2, r1
 80829ae:	0055      	lsls	r5, r2, #1
 80829b0:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 80829b4:	bf94      	ite	ls
 80829b6:	fbb5 f5f1 	udivls	r5, r5, r1
 80829ba:	2501      	movhi	r5, #1
 80829bc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80829c0:	bf98      	it	ls
 80829c2:	b2ad      	uxthls	r5, r5
 80829c4:	4353      	muls	r3, r2
 80829c6:	9a05      	ldr	r2, [sp, #20]
 80829c8:	b29b      	uxth	r3, r3
 80829ca:	4413      	add	r3, r2
 80829cc:	441d      	add	r5, r3
 80829ce:	b2ad      	uxth	r5, r5
  if (dst_pix) *dst_pix = free_pix;
 80829d0:	f1b9 0f00 	cmp.w	r9, #0
 80829d4:	d001      	beq.n	80829da <spiffs_page_move+0x62>
 80829d6:	f8a9 5000 	strh.w	r5, [r9]
  p_hdr = page_data ? (spiffs_page_header *)page_data : page_hdr;
 80829da:	f1b8 0f00 	cmp.w	r8, #0
 80829de:	d126      	bne.n	8082a2e <spiffs_page_move+0xb6>
    res = spiffs_phys_cpy(fs, fh, SPIFFS_PAGE_TO_PADDR(fs, free_pix), SPIFFS_PAGE_TO_PADDR(fs, src_pix), SPIFFS_CFG_LOG_PAGE_SZ(fs));
 80829e0:	6921      	ldr	r1, [r4, #16]
 80829e2:	69e2      	ldr	r2, [r4, #28]
 80829e4:	4620      	mov	r0, r4
 80829e6:	fb02 1306 	mla	r3, r2, r6, r1
 80829ea:	9200      	str	r2, [sp, #0]
 80829ec:	fb05 1202 	mla	r2, r5, r2, r1
 80829f0:	4639      	mov	r1, r7
 80829f2:	f7ff fbf3 	bl	80821dc <spiffs_phys_cpy>
  u8_t was_final = 0;
 80829f6:	f04f 0900 	mov.w	r9, #0
  p_hdr = page_data ? (spiffs_page_header *)page_data : page_hdr;
 80829fa:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80829fe:	e02d      	b.n	8082a5c <spiffs_page_move+0xe4>
    p_hdr->flags &= ~(SPIFFS_PH_FLAG_FINAL | SPIFFS_PH_FLAG_USED);
 8082a00:	4642      	mov	r2, r8
 8082a02:	f898 3004 	ldrb.w	r3, [r8, #4]
    res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
 8082a06:	4620      	mov	r0, r4
    p_hdr->flags &= ~(SPIFFS_PH_FLAG_FINAL | SPIFFS_PH_FLAG_USED);
 8082a08:	f023 0303 	bic.w	r3, r3, #3
 8082a0c:	f802 3f04 	strb.w	r3, [r2, #4]!
    res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
 8082a10:	9201      	str	r2, [sp, #4]
 8082a12:	2201      	movs	r2, #1
 8082a14:	6921      	ldr	r1, [r4, #16]
 8082a16:	69e3      	ldr	r3, [r4, #28]
 8082a18:	3104      	adds	r1, #4
 8082a1a:	fb03 1305 	mla	r3, r3, r5, r1
 8082a1e:	9200      	str	r2, [sp, #0]
 8082a20:	2107      	movs	r1, #7
 8082a22:	463a      	mov	r2, r7
 8082a24:	f7fd fc8e 	bl	8080344 <spiffs_phys_wr>
    SPIFFS_CHECK_RES(res);
 8082a28:	2800      	cmp	r0, #0
 8082a2a:	da42      	bge.n	8082ab2 <spiffs_page_move+0x13a>
 8082a2c:	e045      	b.n	8082aba <spiffs_page_move+0x142>
    was_final = (p_hdr->flags & SPIFFS_PH_FLAG_FINAL) == 0;
 8082a2e:	f898 3004 	ldrb.w	r3, [r8, #4]
    res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
 8082a32:	2107      	movs	r1, #7
    was_final = (p_hdr->flags & SPIFFS_PH_FLAG_FINAL) == 0;
 8082a34:	f083 0902 	eor.w	r9, r3, #2
    p_hdr->flags &= ~SPIFFS_PH_FLAG_USED;
 8082a38:	f023 0301 	bic.w	r3, r3, #1
 8082a3c:	f043 0302 	orr.w	r3, r3, #2
 8082a40:	f888 3004 	strb.w	r3, [r8, #4]
    res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
 8082a44:	69e3      	ldr	r3, [r4, #28]
 8082a46:	6922      	ldr	r2, [r4, #16]
 8082a48:	e9cd 3800 	strd	r3, r8, [sp]
 8082a4c:	4620      	mov	r0, r4
 8082a4e:	fb05 2303 	mla	r3, r5, r3, r2
 8082a52:	2200      	movs	r2, #0
    was_final = (p_hdr->flags & SPIFFS_PH_FLAG_FINAL) == 0;
 8082a54:	f3c9 0940 	ubfx	r9, r9, #1, #1
    res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
 8082a58:	f7fd fc74 	bl	8080344 <spiffs_phys_wr>
  SPIFFS_CHECK_RES(res);
 8082a5c:	2800      	cmp	r0, #0
 8082a5e:	db2c      	blt.n	8082aba <spiffs_page_move+0x142>
  res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_UPDT,
 8082a60:	e9d4 ec06 	ldrd	lr, ip, [r4, #24]
 8082a64:	fbbe f1fc 	udiv	r1, lr, ip
 8082a68:	fbb5 f2f1 	udiv	r2, r5, r1
 8082a6c:	ebbc 0f41 	cmp.w	ip, r1, lsl #1
 8082a70:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8082a74:	fb01 5012 	mls	r0, r1, r2, r5
 8082a78:	bf94      	ite	ls
 8082a7a:	fbb3 f3fc 	udivls	r3, r3, ip
 8082a7e:	2301      	movhi	r3, #1
 8082a80:	f10d 010e 	add.w	r1, sp, #14
 8082a84:	9101      	str	r1, [sp, #4]
 8082a86:	2102      	movs	r1, #2
 8082a88:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8082a8c:	1ac3      	subs	r3, r0, r3
 8082a8e:	fb0e a202 	mla	r2, lr, r2, sl
 8082a92:	9100      	str	r1, [sp, #0]
 8082a94:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8082a98:	2104      	movs	r1, #4
 8082a9a:	2200      	movs	r2, #0
 8082a9c:	4620      	mov	r0, r4
 8082a9e:	f7fd fc51 	bl	8080344 <spiffs_phys_wr>
  SPIFFS_CHECK_RES(res);
 8082aa2:	2800      	cmp	r0, #0
 8082aa4:	db09      	blt.n	8082aba <spiffs_page_move+0x142>
  fs->stats_p_allocated++;
 8082aa6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8082aa8:	3301      	adds	r3, #1
 8082aaa:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (was_final) {
 8082aac:	f1b9 0f00 	cmp.w	r9, #0
 8082ab0:	d1a6      	bne.n	8082a00 <spiffs_page_move+0x88>
  res = spiffs_page_delete(fs, src_pix);
 8082ab2:	4631      	mov	r1, r6
 8082ab4:	4620      	mov	r0, r4
 8082ab6:	f7ff ff1b 	bl	80828f0 <spiffs_page_delete>
}
 8082aba:	b006      	add	sp, #24
 8082abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08082ac0 <spiffs_cb_object_event>:
    u32_t new_size) {
 8082ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082ac4:	4614      	mov	r4, r2
 8082ac6:	b08f      	sub	sp, #60	; 0x3c
  SPIFFS_DBG("       CALLBACK  %s obj_id:"_SPIPRIid" spix:"_SPIPRIsp" npix:"_SPIPRIpg" nsz:"_SPIPRIi"\n", (const char *[]){"UPD", "NEW", "DEL", "MOV", "HUP","???"}[MIN(ev,5)],
 8082ac8:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 8082ca8 <spiffs_cb_object_event+0x1e8>
    u32_t new_size) {
 8082acc:	9306      	str	r3, [sp, #24]
  SPIFFS_DBG("       CALLBACK  %s obj_id:"_SPIPRIid" spix:"_SPIPRIsp" npix:"_SPIPRIpg" nsz:"_SPIPRIi"\n", (const char *[]){"UPD", "NEW", "DEL", "MOV", "HUP","???"}[MIN(ev,5)],
 8082ace:	af08      	add	r7, sp, #32
  spiffs_obj_id obj_id = obj_id_raw & ~SPIFFS_OBJ_ID_IX_FLAG;
 8082ad0:	f3c3 030e 	ubfx	r3, r3, #0, #15
  spiffs_fd *fds = (spiffs_fd *)fs->fd_space;
 8082ad4:	f8d0 b03c 	ldr.w	fp, [r0, #60]	; 0x3c
    u32_t new_size) {
 8082ad8:	9107      	str	r1, [sp, #28]
  spiffs_obj_id obj_id = obj_id_raw & ~SPIFFS_OBJ_ID_IX_FLAG;
 8082ada:	9305      	str	r3, [sp, #20]
    u32_t new_size) {
 8082adc:	4605      	mov	r5, r0
  SPIFFS_DBG("       CALLBACK  %s obj_id:"_SPIPRIid" spix:"_SPIPRIsp" npix:"_SPIPRIpg" nsz:"_SPIPRIi"\n", (const char *[]){"UPD", "NEW", "DEL", "MOV", "HUP","???"}[MIN(ev,5)],
 8082ade:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8082ae2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8082ae4:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8082ae8:	2c05      	cmp	r4, #5
 8082aea:	e887 0003 	stmia.w	r7, {r0, r1}
 8082aee:	4621      	mov	r1, r4
 8082af0:	bfa8      	it	ge
 8082af2:	2105      	movge	r1, #5
    u32_t new_size) {
 8082af4:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 8082af8:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 8082afc:	f8bd 6060 	ldrh.w	r6, [sp, #96]	; 0x60
  SPIFFS_DBG("       CALLBACK  %s obj_id:"_SPIPRIid" spix:"_SPIPRIsp" npix:"_SPIPRIpg" nsz:"_SPIPRIi"\n", (const char *[]){"UPD", "NEW", "DEL", "MOV", "HUP","???"}[MIN(ev,5)],
 8082b00:	e9cd 8900 	strd	r8, r9, [sp]
 8082b04:	ab0e      	add	r3, sp, #56	; 0x38
 8082b06:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8082b0a:	9a06      	ldr	r2, [sp, #24]
 8082b0c:	4633      	mov	r3, r6
 8082b0e:	f851 1c18 	ldr.w	r1, [r1, #-24]
 8082b12:	4860      	ldr	r0, [pc, #384]	; (8082c94 <spiffs_cb_object_event+0x1d4>)
 8082b14:	f009 fffc 	bl	808cb10 <spiffsParticleInfoLog>
  for (i = 0; i < fs->fd_count; i++) {
 8082b18:	f04f 0a00 	mov.w	sl, #0
 8082b1c:	f10b 0704 	add.w	r7, fp, #4
 8082b20:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8082b22:	4553      	cmp	r3, sl
 8082b24:	d812      	bhi.n	8082b4c <spiffs_cb_object_event+0x8c>
  if (ev == SPIFFS_EV_IX_UPD || ev == SPIFFS_EV_IX_NEW) {
 8082b26:	2c01      	cmp	r4, #1
 8082b28:	d809      	bhi.n	8082b3e <spiffs_cb_object_event+0x7e>
    for (i = 0; i < fs->fd_count; i++) {
 8082b2a:	f04f 0900 	mov.w	r9, #0
      SPIFFS_DBG("       callback: map ix update fd "_SPIPRIfd":"_SPIPRIid" span:"_SPIPRIsp"\n", SPIFFS_FH_OFFS(fs, cur_fd->file_nbr), cur_fd->obj_id, spix);
 8082b2e:	f8df a17c 	ldr.w	sl, [pc, #380]	; 8082cac <spiffs_cb_object_event+0x1ec>
 8082b32:	465f      	mov	r7, fp
      spiffs_update_ix_map(fs, cur_fd, spix, objix);
 8082b34:	f105 0b1c 	add.w	fp, r5, #28
    for (i = 0; i < fs->fd_count; i++) {
 8082b38:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8082b3a:	454b      	cmp	r3, r9
 8082b3c:	d86f      	bhi.n	8082c1e <spiffs_cb_object_event+0x15e>
  if (fs->file_cb_f && spix == 0 && (obj_id_raw & SPIFFS_OBJ_ID_IX_FLAG)) {
 8082b3e:	6f2f      	ldr	r7, [r5, #112]	; 0x70
 8082b40:	2f00      	cmp	r7, #0
 8082b42:	f040 8085 	bne.w	8082c50 <spiffs_cb_object_event+0x190>
}
 8082b46:	b00f      	add	sp, #60	; 0x3c
 8082b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((cur_fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG) != obj_id) continue; // fd not related to updated file
 8082b4c:	887a      	ldrh	r2, [r7, #2]
 8082b4e:	9905      	ldr	r1, [sp, #20]
 8082b50:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
 8082b54:	428b      	cmp	r3, r1
 8082b56:	d142      	bne.n	8082bde <spiffs_cb_object_event+0x11e>
    if (spix == 0) { // object index header update
 8082b58:	2e00      	cmp	r6, #0
 8082b5a:	d130      	bne.n	8082bbe <spiffs_cb_object_event+0xfe>
      if (ev != SPIFFS_EV_IX_DEL) {
 8082b5c:	2c02      	cmp	r4, #2
 8082b5e:	d046      	beq.n	8082bee <spiffs_cb_object_event+0x12e>
        if (cur_fd->score == 0) continue; // never used fd
 8082b60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8082b62:	2b00      	cmp	r3, #0
 8082b64:	d03b      	beq.n	8082bde <spiffs_cb_object_event+0x11e>
        SPIFFS_DBG("       callback: setting fd "_SPIPRIfd":"_SPIPRIid"(fdoffs:"_SPIPRIi" offs:"_SPIPRIi") objix_hdr_pix to "_SPIPRIpg", size:"_SPIPRIi"\n",
 8082b66:	f9b7 1000 	ldrsh.w	r1, [r7]
 8082b6a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8082b6e:	693b      	ldr	r3, [r7, #16]
 8082b70:	4849      	ldr	r0, [pc, #292]	; (8082c98 <spiffs_cb_object_event+0x1d8>)
 8082b72:	9300      	str	r3, [sp, #0]
 8082b74:	697b      	ldr	r3, [r7, #20]
 8082b76:	f009 ffcb 	bl	808cb10 <spiffsParticleInfoLog>
        cur_fd->objix_hdr_pix = new_pix;
 8082b7a:	f8a7 8008 	strh.w	r8, [r7, #8]
        if (new_size != 0) {
 8082b7e:	f1b9 0f00 	cmp.w	r9, #0
 8082b82:	d01c      	beq.n	8082bbe <spiffs_cb_object_event+0xfe>
          u32_t act_new_size = new_size == SPIFFS_UNDEFINED_LEN ? 0 : new_size;
 8082b84:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8082b88:	69f9      	ldr	r1, [r7, #28]
          cur_fd->size = new_size;
 8082b8a:	f8c7 9004 	str.w	r9, [r7, #4]
          u32_t act_new_size = new_size == SPIFFS_UNDEFINED_LEN ? 0 : new_size;
 8082b8e:	d02a      	beq.n	8082be6 <spiffs_cb_object_event+0x126>
          if (act_new_size > 0 && cur_fd->cache_page) {
 8082b90:	b359      	cbz	r1, 8082bea <spiffs_cb_object_event+0x12a>
            act_new_size = MAX(act_new_size, cur_fd->cache_page->offset + cur_fd->cache_page->size);
 8082b92:	8a0b      	ldrh	r3, [r1, #16]
 8082b94:	68ca      	ldr	r2, [r1, #12]
 8082b96:	4413      	add	r3, r2
 8082b98:	454b      	cmp	r3, r9
 8082b9a:	bf38      	it	cc
 8082b9c:	464b      	movcc	r3, r9
          if (cur_fd->offset > act_new_size) {
 8082b9e:	693a      	ldr	r2, [r7, #16]
 8082ba0:	429a      	cmp	r2, r3
          if (cur_fd->fdoffset > act_new_size) {
 8082ba2:	697a      	ldr	r2, [r7, #20]
            cur_fd->offset = act_new_size;
 8082ba4:	bf88      	it	hi
 8082ba6:	613b      	strhi	r3, [r7, #16]
          if (cur_fd->fdoffset > act_new_size) {
 8082ba8:	429a      	cmp	r2, r3
            cur_fd->fdoffset = act_new_size;
 8082baa:	bf88      	it	hi
 8082bac:	617b      	strhi	r3, [r7, #20]
          if (cur_fd->cache_page && cur_fd->cache_page->offset > act_new_size+1) {
 8082bae:	b131      	cbz	r1, 8082bbe <spiffs_cb_object_event+0xfe>
 8082bb0:	68ca      	ldr	r2, [r1, #12]
 8082bb2:	3301      	adds	r3, #1
 8082bb4:	429a      	cmp	r2, r3
 8082bb6:	d902      	bls.n	8082bbe <spiffs_cb_object_event+0xfe>
            spiffs_cache_fd_release(fs, cur_fd->cache_page);
 8082bb8:	4628      	mov	r0, r5
 8082bba:	f7fd fc3d 	bl	8080438 <spiffs_cache_fd_release>
    if (cur_fd->cursor_objix_spix == spix) {
 8082bbe:	89bb      	ldrh	r3, [r7, #12]
 8082bc0:	42b3      	cmp	r3, r6
 8082bc2:	d10c      	bne.n	8082bde <spiffs_cb_object_event+0x11e>
      if (ev != SPIFFS_EV_IX_DEL) {
 8082bc4:	2c02      	cmp	r4, #2
 8082bc6:	d027      	beq.n	8082c18 <spiffs_cb_object_event+0x158>
        SPIFFS_DBG("       callback: setting fd "_SPIPRIfd":"_SPIPRIid" span:"_SPIPRIsp" objix_pix to "_SPIPRIpg"\n", SPIFFS_FH_OFFS(fs, cur_fd->file_nbr), cur_fd->obj_id, spix, new_pix);
 8082bc8:	887a      	ldrh	r2, [r7, #2]
 8082bca:	f9b7 1000 	ldrsh.w	r1, [r7]
 8082bce:	4633      	mov	r3, r6
 8082bd0:	4832      	ldr	r0, [pc, #200]	; (8082c9c <spiffs_cb_object_event+0x1dc>)
 8082bd2:	f8cd 8000 	str.w	r8, [sp]
 8082bd6:	f009 ff9b 	bl	808cb10 <spiffsParticleInfoLog>
        cur_fd->cursor_objix_pix = new_pix;
 8082bda:	f8a7 800a 	strh.w	r8, [r7, #10]
  for (i = 0; i < fs->fd_count; i++) {
 8082bde:	f10a 0a01 	add.w	sl, sl, #1
 8082be2:	3730      	adds	r7, #48	; 0x30
 8082be4:	e79c      	b.n	8082b20 <spiffs_cb_object_event+0x60>
          u32_t act_new_size = new_size == SPIFFS_UNDEFINED_LEN ? 0 : new_size;
 8082be6:	4633      	mov	r3, r6
 8082be8:	e7d9      	b.n	8082b9e <spiffs_cb_object_event+0xde>
 8082bea:	464b      	mov	r3, r9
 8082bec:	e7d7      	b.n	8082b9e <spiffs_cb_object_event+0xde>
        if (cur_fd->file_nbr && cur_fd->cache_page) {
 8082bee:	f9b7 3000 	ldrsh.w	r3, [r7]
 8082bf2:	b123      	cbz	r3, 8082bfe <spiffs_cb_object_event+0x13e>
 8082bf4:	69f9      	ldr	r1, [r7, #28]
 8082bf6:	b111      	cbz	r1, 8082bfe <spiffs_cb_object_event+0x13e>
          spiffs_cache_fd_release(fs, cur_fd->cache_page);
 8082bf8:	4628      	mov	r0, r5
 8082bfa:	f7fd fc1d 	bl	8080438 <spiffs_cache_fd_release>
        SPIFFS_DBG("       callback: release fd "_SPIPRIfd":"_SPIPRIid" span:"_SPIPRIsp" objix_pix to "_SPIPRIpg"\n", SPIFFS_FH_OFFS(fs, cur_fd->file_nbr), cur_fd->obj_id, spix, new_pix);
 8082bfe:	2300      	movs	r3, #0
 8082c00:	887a      	ldrh	r2, [r7, #2]
 8082c02:	f9b7 1000 	ldrsh.w	r1, [r7]
 8082c06:	4826      	ldr	r0, [pc, #152]	; (8082ca0 <spiffs_cb_object_event+0x1e0>)
 8082c08:	f8cd 8000 	str.w	r8, [sp]
 8082c0c:	f009 ff80 	bl	808cb10 <spiffsParticleInfoLog>
        cur_fd->file_nbr = 0;
 8082c10:	2300      	movs	r3, #0
 8082c12:	803b      	strh	r3, [r7, #0]
        cur_fd->obj_id = SPIFFS_OBJ_ID_DELETED;
 8082c14:	807b      	strh	r3, [r7, #2]
 8082c16:	e7d2      	b.n	8082bbe <spiffs_cb_object_event+0xfe>
        cur_fd->cursor_objix_pix = 0;
 8082c18:	2300      	movs	r3, #0
 8082c1a:	817b      	strh	r3, [r7, #10]
 8082c1c:	e7df      	b.n	8082bde <spiffs_cb_object_event+0x11e>
      if (cur_fd->file_nbr == 0 ||
 8082c1e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8082c22:	b189      	cbz	r1, 8082c48 <spiffs_cb_object_event+0x188>
 8082c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8082c26:	b17b      	cbz	r3, 8082c48 <spiffs_cb_object_event+0x188>
          (cur_fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG) != obj_id) continue;
 8082c28:	88fa      	ldrh	r2, [r7, #6]
          cur_fd->ix_map == 0 ||
 8082c2a:	9805      	ldr	r0, [sp, #20]
          (cur_fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG) != obj_id) continue;
 8082c2c:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
          cur_fd->ix_map == 0 ||
 8082c30:	4283      	cmp	r3, r0
 8082c32:	d109      	bne.n	8082c48 <spiffs_cb_object_event+0x188>
      SPIFFS_DBG("       callback: map ix update fd "_SPIPRIfd":"_SPIPRIid" span:"_SPIPRIsp"\n", SPIFFS_FH_OFFS(fs, cur_fd->file_nbr), cur_fd->obj_id, spix);
 8082c34:	4633      	mov	r3, r6
 8082c36:	4650      	mov	r0, sl
 8082c38:	f009 ff6a 	bl	808cb10 <spiffsParticleInfoLog>
      spiffs_update_ix_map(fs, cur_fd, spix, objix);
 8082c3c:	4632      	mov	r2, r6
 8082c3e:	4639      	mov	r1, r7
 8082c40:	4658      	mov	r0, fp
 8082c42:	9b07      	ldr	r3, [sp, #28]
 8082c44:	f7ff f9f4 	bl	8082030 <spiffs_update_ix_map.isra.0>
    for (i = 0; i < fs->fd_count; i++) {
 8082c48:	f109 0901 	add.w	r9, r9, #1
 8082c4c:	3730      	adds	r7, #48	; 0x30
 8082c4e:	e773      	b.n	8082b38 <spiffs_cb_object_event+0x78>
  if (fs->file_cb_f && spix == 0 && (obj_id_raw & SPIFFS_OBJ_ID_IX_FLAG)) {
 8082c50:	2e00      	cmp	r6, #0
 8082c52:	f47f af78 	bne.w	8082b46 <spiffs_cb_object_event+0x86>
 8082c56:	9b06      	ldr	r3, [sp, #24]
 8082c58:	041b      	lsls	r3, r3, #16
 8082c5a:	f57f af74 	bpl.w	8082b46 <spiffs_cb_object_event+0x86>
    if (ev == SPIFFS_EV_IX_NEW) {
 8082c5e:	2c01      	cmp	r4, #1
 8082c60:	d00c      	beq.n	8082c7c <spiffs_cb_object_event+0x1bc>
    } else if (ev == SPIFFS_EV_IX_UPD ||
 8082c62:	b1a4      	cbz	r4, 8082c8e <spiffs_cb_object_event+0x1ce>
 8082c64:	1ee3      	subs	r3, r4, #3
 8082c66:	2b01      	cmp	r3, #1
 8082c68:	d911      	bls.n	8082c8e <spiffs_cb_object_event+0x1ce>
    } else if (ev == SPIFFS_EV_IX_DEL) {
 8082c6a:	2c02      	cmp	r4, #2
      op = SPIFFS_CB_DELETED;
 8082c6c:	4621      	mov	r1, r4
    } else if (ev == SPIFFS_EV_IX_DEL) {
 8082c6e:	d006      	beq.n	8082c7e <spiffs_cb_object_event+0x1be>
      SPIFFS_DBG("       callback: WARNING unknown callback event "_SPIPRIi"\n", ev);
 8082c70:	480c      	ldr	r0, [pc, #48]	; (8082ca4 <spiffs_cb_object_event+0x1e4>)
}
 8082c72:	b00f      	add	sp, #60	; 0x3c
 8082c74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      SPIFFS_DBG("       callback: WARNING unknown callback event "_SPIPRIi"\n", ev);
 8082c78:	f009 bf4a 	b.w	808cb10 <spiffsParticleInfoLog>
      op = SPIFFS_CB_CREATED;
 8082c7c:	4631      	mov	r1, r6
    fs->file_cb_f(fs, op, obj_id, new_pix);
 8082c7e:	4643      	mov	r3, r8
 8082c80:	4628      	mov	r0, r5
 8082c82:	46bc      	mov	ip, r7
 8082c84:	9a05      	ldr	r2, [sp, #20]
}
 8082c86:	b00f      	add	sp, #60	; 0x3c
 8082c88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fs->file_cb_f(fs, op, obj_id, new_pix);
 8082c8c:	4760      	bx	ip
      op = SPIFFS_CB_UPDATED;
 8082c8e:	2101      	movs	r1, #1
 8082c90:	e7f5      	b.n	8082c7e <spiffs_cb_object_event+0x1be>
 8082c92:	bf00      	nop
 8082c94:	08092984 	.word	0x08092984
 8082c98:	080929c0 	.word	0x080929c0
 8082c9c:	08092a58 	.word	0x08092a58
 8082ca0:	08092a17 	.word	0x08092a17
 8082ca4:	08092ace 	.word	0x08092ace
 8082ca8:	080935c8 	.word	0x080935c8
 8082cac:	08092a99 	.word	0x08092a99

08082cb0 <spiffs_object_create>:
    spiffs_page_ix *objix_hdr_pix) {
 8082cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082cb2:	b095      	sub	sp, #84	; 0x54
 8082cb4:	f8ad 1016 	strh.w	r1, [sp, #22]
  res = spiffs_gc_check(fs, SPIFFS_DATA_PAGE_SIZE(fs));
 8082cb8:	69c1      	ldr	r1, [r0, #28]
    spiffs_page_ix *objix_hdr_pix) {
 8082cba:	4604      	mov	r4, r0
  res = spiffs_gc_check(fs, SPIFFS_DATA_PAGE_SIZE(fs));
 8082cbc:	3905      	subs	r1, #5
    spiffs_page_ix *objix_hdr_pix) {
 8082cbe:	4617      	mov	r7, r2
 8082cc0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
  res = spiffs_gc_check(fs, SPIFFS_DATA_PAGE_SIZE(fs));
 8082cc2:	f7fe f96b 	bl	8080f9c <spiffs_gc_check>
  SPIFFS_CHECK_RES(res);
 8082cc6:	1e05      	subs	r5, r0, #0
 8082cc8:	f2c0 80b6 	blt.w	8082e38 <spiffs_object_create+0x188>
  obj_id |= SPIFFS_OBJ_ID_IX_FLAG;
 8082ccc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  res = spiffs_obj_lu_find_free(fs, fs->free_cursor_block_ix, fs->free_cursor_obj_lu_entry, &bix, &entry);
 8082cd0:	4620      	mov	r0, r4
  obj_id |= SPIFFS_OBJ_ID_IX_FLAG;
 8082cd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8082cd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8082cda:	f8ad 3016 	strh.w	r3, [sp, #22]
  res = spiffs_obj_lu_find_free(fs, fs->free_cursor_block_ix, fs->free_cursor_obj_lu_entry, &bix, &entry);
 8082cde:	ab07      	add	r3, sp, #28
 8082ce0:	9300      	str	r3, [sp, #0]
 8082ce2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8082ce4:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8082ce6:	f10d 031a 	add.w	r3, sp, #26
 8082cea:	f7ff fcc1 	bl	8082670 <spiffs_obj_lu_find_free>
  SPIFFS_CHECK_RES(res);
 8082cee:	1e05      	subs	r5, r0, #0
 8082cf0:	f2c0 80a2 	blt.w	8082e38 <spiffs_object_create+0x188>
  SPIFFS_DBG("create: found free page @ "_SPIPRIpg" bix:"_SPIPRIbl" entry:"_SPIPRIsp"\n", (spiffs_page_ix)SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, entry), bix, entry);
 8082cf4:	e9d4 3506 	ldrd	r3, r5, [r4, #24]
 8082cf8:	fbb3 f3f5 	udiv	r3, r3, r5
 8082cfc:	ebb5 0f43 	cmp.w	r5, r3, lsl #1
 8082d00:	ea4f 0143 	mov.w	r1, r3, lsl #1
 8082d04:	bf94      	ite	ls
 8082d06:	fbb1 f1f5 	udivls	r1, r1, r5
 8082d0a:	2101      	movhi	r1, #1
 8082d0c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8082d10:	bf98      	it	ls
 8082d12:	b289      	uxthls	r1, r1
 8082d14:	fb03 f002 	mul.w	r0, r3, r2
 8082d18:	9b07      	ldr	r3, [sp, #28]
 8082d1a:	b280      	uxth	r0, r0
 8082d1c:	4418      	add	r0, r3
 8082d1e:	4401      	add	r1, r0
 8082d20:	b289      	uxth	r1, r1
 8082d22:	4847      	ldr	r0, [pc, #284]	; (8082e40 <spiffs_object_create+0x190>)
 8082d24:	f009 fef4 	bl	808cb10 <spiffsParticleInfoLog>
  res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_UPDT,
 8082d28:	f10d 0016 	add.w	r0, sp, #22
 8082d2c:	9001      	str	r0, [sp, #4]
 8082d2e:	2002      	movs	r0, #2
 8082d30:	9a07      	ldr	r2, [sp, #28]
 8082d32:	6923      	ldr	r3, [r4, #16]
 8082d34:	69a1      	ldr	r1, [r4, #24]
 8082d36:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8082d3a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8082d3e:	9000      	str	r0, [sp, #0]
 8082d40:	fb01 3302 	mla	r3, r1, r2, r3
 8082d44:	4620      	mov	r0, r4
 8082d46:	2200      	movs	r2, #0
 8082d48:	2104      	movs	r1, #4
 8082d4a:	f7fd fafb 	bl	8080344 <spiffs_phys_wr>
  SPIFFS_CHECK_RES(res);
 8082d4e:	1e05      	subs	r5, r0, #0
 8082d50:	db72      	blt.n	8082e38 <spiffs_object_create+0x188>
  fs->stats_p_allocated++;
 8082d52:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  strncpy((char*)oix_hdr.name, (const char*)name, SPIFFS_OBJ_NAME_LEN);
 8082d54:	4639      	mov	r1, r7
  fs->stats_p_allocated++;
 8082d56:	3301      	adds	r3, #1
 8082d58:	64e3      	str	r3, [r4, #76]	; 0x4c
  oix_hdr.p_hdr.obj_id = obj_id;
 8082d5a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  strncpy((char*)oix_hdr.name, (const char*)name, SPIFFS_OBJ_NAME_LEN);
 8082d5e:	2220      	movs	r2, #32
  oix_hdr.p_hdr.obj_id = obj_id;
 8082d60:	f8ad 3020 	strh.w	r3, [sp, #32]
  oix_hdr.p_hdr.span_ix = 0;
 8082d64:	2300      	movs	r3, #0
 8082d66:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  oix_hdr.p_hdr.flags = 0xff & ~(SPIFFS_PH_FLAG_FINAL | SPIFFS_PH_FLAG_INDEX | SPIFFS_PH_FLAG_USED);
 8082d6a:	23f8      	movs	r3, #248	; 0xf8
 8082d6c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  oix_hdr.type = type;
 8082d70:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
  strncpy((char*)oix_hdr.name, (const char*)name, SPIFFS_OBJ_NAME_LEN);
 8082d74:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
  oix_hdr.type = type;
 8082d78:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  oix_hdr.size = SPIFFS_UNDEFINED_LEN; // keep ones so we can update later without wasting this page
 8082d7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8082d80:	930a      	str	r3, [sp, #40]	; 0x28
  strncpy((char*)oix_hdr.name, (const char*)name, SPIFFS_OBJ_NAME_LEN);
 8082d82:	f00f f92a 	bl	8091fda <strncpy>
  res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
 8082d86:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8082d8a:	fbb0 f5f1 	udiv	r5, r0, r1
 8082d8e:	ebb1 0f45 	cmp.w	r1, r5, lsl #1
 8082d92:	ea4f 0245 	mov.w	r2, r5, lsl #1
 8082d96:	bf94      	ite	ls
 8082d98:	fbb2 f2f1 	udivls	r2, r2, r1
 8082d9c:	2201      	movhi	r2, #1
 8082d9e:	9b07      	ldr	r3, [sp, #28]
 8082da0:	6927      	ldr	r7, [r4, #16]
 8082da2:	441a      	add	r2, r3
 8082da4:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8082da8:	fb00 7303 	mla	r3, r0, r3, r7
 8082dac:	202d      	movs	r0, #45	; 0x2d
 8082dae:	af08      	add	r7, sp, #32
 8082db0:	fb01 3302 	mla	r3, r1, r2, r3
 8082db4:	9000      	str	r0, [sp, #0]
 8082db6:	2200      	movs	r2, #0
 8082db8:	2107      	movs	r1, #7
 8082dba:	4620      	mov	r0, r4
 8082dbc:	9701      	str	r7, [sp, #4]
 8082dbe:	f7fd fac1 	bl	8080344 <spiffs_phys_wr>
  SPIFFS_CHECK_RES(res);
 8082dc2:	1e05      	subs	r5, r0, #0
 8082dc4:	db38      	blt.n	8082e38 <spiffs_object_create+0x188>
      SPIFFS_EV_IX_NEW, obj_id, 0, SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, entry), SPIFFS_UNDEFINED_LEN);
 8082dc6:	e9d4 0c06 	ldrd	r0, ip, [r4, #24]
 8082dca:	fbb0 f0fc 	udiv	r0, r0, ip
  spiffs_cb_object_event(fs, (spiffs_page_object_ix *)&oix_hdr,
 8082dce:	f8bd 101a 	ldrh.w	r1, [sp, #26]
      SPIFFS_EV_IX_NEW, obj_id, 0, SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, entry), SPIFFS_UNDEFINED_LEN);
 8082dd2:	0042      	lsls	r2, r0, #1
 8082dd4:	ebbc 0f40 	cmp.w	ip, r0, lsl #1
  spiffs_cb_object_event(fs, (spiffs_page_object_ix *)&oix_hdr,
 8082dd8:	fb00 f101 	mul.w	r1, r0, r1
 8082ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      SPIFFS_EV_IX_NEW, obj_id, 0, SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, entry), SPIFFS_UNDEFINED_LEN);
 8082de0:	bf94      	ite	ls
 8082de2:	fbb2 f2fc 	udivls	r2, r2, ip
 8082de6:	2201      	movhi	r2, #1
  spiffs_cb_object_event(fs, (spiffs_page_object_ix *)&oix_hdr,
 8082de8:	9002      	str	r0, [sp, #8]
      SPIFFS_EV_IX_NEW, obj_id, 0, SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, entry), SPIFFS_UNDEFINED_LEN);
 8082dea:	9807      	ldr	r0, [sp, #28]
  spiffs_cb_object_event(fs, (spiffs_page_object_ix *)&oix_hdr,
 8082dec:	b289      	uxth	r1, r1
 8082dee:	4401      	add	r1, r0
      SPIFFS_EV_IX_NEW, obj_id, 0, SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, entry), SPIFFS_UNDEFINED_LEN);
 8082df0:	bf98      	it	ls
 8082df2:	b292      	uxthls	r2, r2
  spiffs_cb_object_event(fs, (spiffs_page_object_ix *)&oix_hdr,
 8082df4:	440a      	add	r2, r1
 8082df6:	b292      	uxth	r2, r2
 8082df8:	9201      	str	r2, [sp, #4]
 8082dfa:	2200      	movs	r2, #0
 8082dfc:	4639      	mov	r1, r7
 8082dfe:	9200      	str	r2, [sp, #0]
 8082e00:	4620      	mov	r0, r4
 8082e02:	2201      	movs	r2, #1
 8082e04:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8082e08:	f7ff fe5a 	bl	8082ac0 <spiffs_cb_object_event>
  if (objix_hdr_pix) {
 8082e0c:	b1a6      	cbz	r6, 8082e38 <spiffs_object_create+0x188>
    *objix_hdr_pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, entry);
 8082e0e:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 8082e12:	fbb1 f1f0 	udiv	r1, r1, r0
 8082e16:	004b      	lsls	r3, r1, #1
 8082e18:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 8082e1c:	bf94      	ite	ls
 8082e1e:	fbb3 f3f0 	udivls	r3, r3, r0
 8082e22:	2301      	movhi	r3, #1
 8082e24:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8082e28:	bf98      	it	ls
 8082e2a:	b29b      	uxthls	r3, r3
 8082e2c:	434a      	muls	r2, r1
 8082e2e:	9907      	ldr	r1, [sp, #28]
 8082e30:	b292      	uxth	r2, r2
 8082e32:	440a      	add	r2, r1
 8082e34:	4413      	add	r3, r2
 8082e36:	8033      	strh	r3, [r6, #0]
}
 8082e38:	4628      	mov	r0, r5
 8082e3a:	b015      	add	sp, #84	; 0x54
 8082e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082e3e:	bf00      	nop
 8082e40:	08092b02 	.word	0x08092b02

08082e44 <spiffs_object_update_index_hdr>:
    spiffs_page_ix *new_pix) {
 8082e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082e48:	b087      	sub	sp, #28
 8082e4a:	4607      	mov	r7, r0
 8082e4c:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
 8082e50:	460e      	mov	r6, r1
 8082e52:	4699      	mov	r9, r3
  obj_id |=  SPIFFS_OBJ_ID_IX_FLAG;
 8082e54:	f442 4800 	orr.w	r8, r2, #32768	; 0x8000
  if (new_objix_hdr_data) {
 8082e58:	f1ba 0f00 	cmp.w	sl, #0
 8082e5c:	d152      	bne.n	8082f04 <spiffs_object_update_index_hdr+0xc0>
    res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ,
 8082e5e:	6902      	ldr	r2, [r0, #16]
 8082e60:	69c3      	ldr	r3, [r0, #28]
 8082e62:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8082e64:	e9cd 3100 	strd	r3, r1, [sp]
 8082e68:	fb03 2309 	mla	r3, r3, r9, r2
 8082e6c:	2116      	movs	r1, #22
 8082e6e:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
 8082e72:	f7fd f9db 	bl	808022c <spiffs_phys_rd>
    SPIFFS_CHECK_RES(res);
 8082e76:	1e04      	subs	r4, r0, #0
 8082e78:	db40      	blt.n	8082efc <spiffs_object_update_index_hdr+0xb8>
    objix_hdr = (spiffs_page_object_ix_header *)fs->work;
 8082e7a:	6bbd      	ldr	r5, [r7, #56]	; 0x38
  SPIFFS_VALIDATE_OBJIX(objix_hdr->p_hdr, obj_id, 0);
 8082e7c:	792b      	ldrb	r3, [r5, #4]
 8082e7e:	07d8      	lsls	r0, r3, #31
 8082e80:	d444      	bmi.n	8082f0c <spiffs_object_update_index_hdr+0xc8>
 8082e82:	0619      	lsls	r1, r3, #24
 8082e84:	d544      	bpl.n	8082f10 <spiffs_object_update_index_hdr+0xcc>
 8082e86:	079a      	lsls	r2, r3, #30
 8082e88:	d444      	bmi.n	8082f14 <spiffs_object_update_index_hdr+0xd0>
 8082e8a:	075b      	lsls	r3, r3, #29
 8082e8c:	d444      	bmi.n	8082f18 <spiffs_object_update_index_hdr+0xd4>
 8082e8e:	886b      	ldrh	r3, [r5, #2]
 8082e90:	2b00      	cmp	r3, #0
 8082e92:	d143      	bne.n	8082f1c <spiffs_object_update_index_hdr+0xd8>
  if (name) {
 8082e94:	f1bb 0f00 	cmp.w	fp, #0
 8082e98:	d005      	beq.n	8082ea6 <spiffs_object_update_index_hdr+0x62>
    strncpy((char*)objix_hdr->name, (const char*)name, SPIFFS_OBJ_NAME_LEN);
 8082e9a:	2220      	movs	r2, #32
 8082e9c:	4659      	mov	r1, fp
 8082e9e:	f105 000d 	add.w	r0, r5, #13
 8082ea2:	f00f f89a 	bl	8091fda <strncpy>
  if (size) {
 8082ea6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8082ea8:	b103      	cbz	r3, 8082eac <spiffs_object_update_index_hdr+0x68>
    objix_hdr->size = size;
 8082eaa:	60ab      	str	r3, [r5, #8]
  res = spiffs_page_move(fs, fd == 0 ? 0 : fd->file_nbr, (u8_t*)objix_hdr, obj_id, 0, objix_hdr_pix, &new_objix_hdr_pix);
 8082eac:	b366      	cbz	r6, 8082f08 <spiffs_object_update_index_hdr+0xc4>
 8082eae:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 8082eb2:	f10d 0316 	add.w	r3, sp, #22
 8082eb6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8082eba:	2300      	movs	r3, #0
 8082ebc:	462a      	mov	r2, r5
 8082ebe:	9300      	str	r3, [sp, #0]
 8082ec0:	4638      	mov	r0, r7
 8082ec2:	4643      	mov	r3, r8
 8082ec4:	f7ff fd58 	bl	8082978 <spiffs_page_move>
  if (res == SPIFFS_OK) {
 8082ec8:	4604      	mov	r4, r0
 8082eca:	b9b8      	cbnz	r0, 8082efc <spiffs_object_update_index_hdr+0xb8>
    if (new_pix) {
 8082ecc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8082ece:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8082ed2:	b102      	cbz	r2, 8082ed6 <spiffs_object_update_index_hdr+0x92>
      *new_pix = new_objix_hdr_pix;
 8082ed4:	8013      	strh	r3, [r2, #0]
    spiffs_cb_object_event(fs, (spiffs_page_object_ix *)objix_hdr,
 8082ed6:	68aa      	ldr	r2, [r5, #8]
 8082ed8:	f1ba 0f00 	cmp.w	sl, #0
 8082edc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8082ee0:	886b      	ldrh	r3, [r5, #2]
 8082ee2:	bf0c      	ite	eq
 8082ee4:	2204      	moveq	r2, #4
 8082ee6:	2200      	movne	r2, #0
 8082ee8:	9300      	str	r3, [sp, #0]
 8082eea:	4629      	mov	r1, r5
 8082eec:	4643      	mov	r3, r8
 8082eee:	4638      	mov	r0, r7
 8082ef0:	f7ff fde6 	bl	8082ac0 <spiffs_cb_object_event>
    if (fd) fd->objix_hdr_pix = new_objix_hdr_pix; // if this is not in the registered cluster
 8082ef4:	b116      	cbz	r6, 8082efc <spiffs_object_update_index_hdr+0xb8>
 8082ef6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8082efa:	81b3      	strh	r3, [r6, #12]
}
 8082efc:	4620      	mov	r0, r4
 8082efe:	b007      	add	sp, #28
 8082f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082f04:	4655      	mov	r5, sl
 8082f06:	e7b9      	b.n	8082e7c <spiffs_object_update_index_hdr+0x38>
  res = spiffs_page_move(fs, fd == 0 ? 0 : fd->file_nbr, (u8_t*)objix_hdr, obj_id, 0, objix_hdr_pix, &new_objix_hdr_pix);
 8082f08:	4631      	mov	r1, r6
 8082f0a:	e7d2      	b.n	8082eb2 <spiffs_object_update_index_hdr+0x6e>
  SPIFFS_VALIDATE_OBJIX(objix_hdr->p_hdr, obj_id, 0);
 8082f0c:	4c04      	ldr	r4, [pc, #16]	; (8082f20 <spiffs_object_update_index_hdr+0xdc>)
 8082f0e:	e7f5      	b.n	8082efc <spiffs_object_update_index_hdr+0xb8>
 8082f10:	4c04      	ldr	r4, [pc, #16]	; (8082f24 <spiffs_object_update_index_hdr+0xe0>)
 8082f12:	e7f3      	b.n	8082efc <spiffs_object_update_index_hdr+0xb8>
 8082f14:	4c04      	ldr	r4, [pc, #16]	; (8082f28 <spiffs_object_update_index_hdr+0xe4>)
 8082f16:	e7f1      	b.n	8082efc <spiffs_object_update_index_hdr+0xb8>
 8082f18:	4c04      	ldr	r4, [pc, #16]	; (8082f2c <spiffs_object_update_index_hdr+0xe8>)
 8082f1a:	e7ef      	b.n	8082efc <spiffs_object_update_index_hdr+0xb8>
 8082f1c:	4c04      	ldr	r4, [pc, #16]	; (8082f30 <spiffs_object_update_index_hdr+0xec>)
 8082f1e:	e7ed      	b.n	8082efc <spiffs_object_update_index_hdr+0xb8>
 8082f20:	ffffd8e4 	.word	0xffffd8e4
 8082f24:	ffffd8ec 	.word	0xffffd8ec
 8082f28:	ffffd8eb 	.word	0xffffd8eb
 8082f2c:	ffffd8ea 	.word	0xffffd8ea
 8082f30:	ffffd8e3 	.word	0xffffd8e3

08082f34 <spiffs_object_open_by_page>:
    spiffs_mode mode) {
 8082f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082f38:	b090      	sub	sp, #64	; 0x40
 8082f3a:	460f      	mov	r7, r1
  res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ,
 8082f3c:	a904      	add	r1, sp, #16
    spiffs_mode mode) {
 8082f3e:	4615      	mov	r5, r2
 8082f40:	4698      	mov	r8, r3
  res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ,
 8082f42:	69c2      	ldr	r2, [r0, #28]
 8082f44:	6903      	ldr	r3, [r0, #16]
 8082f46:	9101      	str	r1, [sp, #4]
 8082f48:	212d      	movs	r1, #45	; 0x2d
 8082f4a:	fb02 3307 	mla	r3, r2, r7, r3
 8082f4e:	9100      	str	r1, [sp, #0]
 8082f50:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8082f54:	2116      	movs	r1, #22
    spiffs_mode mode) {
 8082f56:	4606      	mov	r6, r0
  res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ,
 8082f58:	f7fd f968 	bl	808022c <spiffs_phys_rd>
  SPIFFS_CHECK_RES(res);
 8082f5c:	1e04      	subs	r4, r0, #0
 8082f5e:	db41      	blt.n	8082fe4 <spiffs_object_open_by_page+0xb0>
  spiffs_block_ix bix = SPIFFS_BLOCK_FOR_PAGE(fs, pix);
 8082f60:	e9d6 2406 	ldrd	r2, r4, [r6, #24]
 8082f64:	fbb2 f0f4 	udiv	r0, r2, r4
 8082f68:	fbb7 fcf0 	udiv	ip, r7, r0
  int entry = SPIFFS_OBJ_LOOKUP_ENTRY_FOR_PAGE(fs, pix);
 8082f6c:	ebb4 0f40 	cmp.w	r4, r0, lsl #1
 8082f70:	ea4f 0140 	mov.w	r1, r0, lsl #1
 8082f74:	bf94      	ite	ls
 8082f76:	fbb1 f1f4 	udivls	r1, r1, r4
 8082f7a:	2101      	movhi	r1, #1
 8082f7c:	fb00 731c 	mls	r3, r0, ip, r7
 8082f80:	1a5b      	subs	r3, r3, r1
  res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ,
 8082f82:	f10d 010e 	add.w	r1, sp, #14
 8082f86:	6930      	ldr	r0, [r6, #16]
 8082f88:	9101      	str	r1, [sp, #4]
 8082f8a:	2102      	movs	r1, #2
 8082f8c:	fb0c 0202 	mla	r2, ip, r2, r0
 8082f90:	9100      	str	r1, [sp, #0]
 8082f92:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8082f96:	2114      	movs	r1, #20
 8082f98:	2200      	movs	r2, #0
 8082f9a:	4630      	mov	r0, r6
 8082f9c:	f7fd f946 	bl	808022c <spiffs_phys_rd>
  fd->size = oix_hdr.size;
 8082fa0:	9b06      	ldr	r3, [sp, #24]
  fd->obj_id = obj_id;
 8082fa2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  fd->size = oix_hdr.size;
 8082fa6:	60ab      	str	r3, [r5, #8]
  fd->offset = 0;
 8082fa8:	2300      	movs	r3, #0
 8082faa:	616b      	str	r3, [r5, #20]
  fd->cursor_objix_spix = 0;
 8082fac:	822b      	strh	r3, [r5, #16]
  SPIFFS_VALIDATE_OBJIX(oix_hdr.p_hdr, fd->obj_id, 0);
 8082fae:	f89d 3014 	ldrb.w	r3, [sp, #20]
  fd->objix_hdr_pix = pix;
 8082fb2:	81af      	strh	r7, [r5, #12]
  fd->cursor_objix_pix = pix;
 8082fb4:	81ef      	strh	r7, [r5, #14]
  SPIFFS_VALIDATE_OBJIX(oix_hdr.p_hdr, fd->obj_id, 0);
 8082fb6:	07df      	lsls	r7, r3, #31
  res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ,
 8082fb8:	4604      	mov	r4, r0
  fd->fs = fs;
 8082fba:	602e      	str	r6, [r5, #0]
  fd->obj_id = obj_id;
 8082fbc:	80ea      	strh	r2, [r5, #6]
  fd->flags = flags;
 8082fbe:	f8a5 801c 	strh.w	r8, [r5, #28]
  SPIFFS_VALIDATE_OBJIX(oix_hdr.p_hdr, fd->obj_id, 0);
 8082fc2:	d413      	bmi.n	8082fec <spiffs_object_open_by_page+0xb8>
 8082fc4:	061e      	lsls	r6, r3, #24
 8082fc6:	d513      	bpl.n	8082ff0 <spiffs_object_open_by_page+0xbc>
 8082fc8:	0798      	lsls	r0, r3, #30
 8082fca:	d413      	bmi.n	8082ff4 <spiffs_object_open_by_page+0xc0>
 8082fcc:	0759      	lsls	r1, r3, #29
 8082fce:	d413      	bmi.n	8082ff8 <spiffs_object_open_by_page+0xc4>
 8082fd0:	0413      	lsls	r3, r2, #16
 8082fd2:	d511      	bpl.n	8082ff8 <spiffs_object_open_by_page+0xc4>
 8082fd4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8082fd8:	b983      	cbnz	r3, 8082ffc <spiffs_object_open_by_page+0xc8>
  SPIFFS_DBG("open: fd "_SPIPRIfd" is obj id "_SPIPRIid"\n", SPIFFS_FH_OFFS(fs, fd->file_nbr), fd->obj_id);
 8082fda:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
 8082fde:	4808      	ldr	r0, [pc, #32]	; (8083000 <spiffs_object_open_by_page+0xcc>)
 8082fe0:	f009 fd96 	bl	808cb10 <spiffsParticleInfoLog>
}
 8082fe4:	4620      	mov	r0, r4
 8082fe6:	b010      	add	sp, #64	; 0x40
 8082fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  SPIFFS_VALIDATE_OBJIX(oix_hdr.p_hdr, fd->obj_id, 0);
 8082fec:	4c05      	ldr	r4, [pc, #20]	; (8083004 <spiffs_object_open_by_page+0xd0>)
 8082fee:	e7f9      	b.n	8082fe4 <spiffs_object_open_by_page+0xb0>
 8082ff0:	4c05      	ldr	r4, [pc, #20]	; (8083008 <spiffs_object_open_by_page+0xd4>)
 8082ff2:	e7f7      	b.n	8082fe4 <spiffs_object_open_by_page+0xb0>
 8082ff4:	4c05      	ldr	r4, [pc, #20]	; (808300c <spiffs_object_open_by_page+0xd8>)
 8082ff6:	e7f5      	b.n	8082fe4 <spiffs_object_open_by_page+0xb0>
 8082ff8:	4c05      	ldr	r4, [pc, #20]	; (8083010 <spiffs_object_open_by_page+0xdc>)
 8082ffa:	e7f3      	b.n	8082fe4 <spiffs_object_open_by_page+0xb0>
 8082ffc:	4c05      	ldr	r4, [pc, #20]	; (8083014 <spiffs_object_open_by_page+0xe0>)
 8082ffe:	e7f1      	b.n	8082fe4 <spiffs_object_open_by_page+0xb0>
 8083000:	08092b36 	.word	0x08092b36
 8083004:	ffffd8e4 	.word	0xffffd8e4
 8083008:	ffffd8ec 	.word	0xffffd8ec
 808300c:	ffffd8eb 	.word	0xffffd8eb
 8083010:	ffffd8ea 	.word	0xffffd8ea
 8083014:	ffffd8e3 	.word	0xffffd8e3

08083018 <spiffs_object_append>:
s32_t spiffs_object_append(spiffs_fd *fd, u32_t offset, u8_t *data, u32_t len) {
 8083018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808301c:	4605      	mov	r5, r0
 808301e:	468b      	mov	fp, r1
 8083020:	b091      	sub	sp, #68	; 0x44
 8083022:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  spiffs *fs = fd->fs;
 8083026:	6806      	ldr	r6, [r0, #0]
  SPIFFS_DBG("append: "_SPIPRIi" bytes @ offs "_SPIPRIi" of size "_SPIPRIi"\n", len, offset, fd->size);
 8083028:	6883      	ldr	r3, [r0, #8]
 808302a:	460a      	mov	r2, r1
 808302c:	4877      	ldr	r0, [pc, #476]	; (808320c <spiffs_object_append+0x1f4>)
 808302e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8083030:	f009 fd6e 	bl	808cb10 <spiffsParticleInfoLog>
  if (offset > fd->size) {
 8083034:	68ab      	ldr	r3, [r5, #8]
 8083036:	455b      	cmp	r3, fp
 8083038:	d204      	bcs.n	8083044 <spiffs_object_append+0x2c>
    SPIFFS_DBG("append: offset reversed to size\n");
 808303a:	4875      	ldr	r0, [pc, #468]	; (8083210 <spiffs_object_append+0x1f8>)
 808303c:	f009 fd68 	bl	808cb10 <spiffsParticleInfoLog>
    offset = fd->size;
 8083040:	f8d5 b008 	ldr.w	fp, [r5, #8]
  res = spiffs_gc_check(fs, len + SPIFFS_DATA_PAGE_SIZE(fs)); // add an extra page of data worth for meta
 8083044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8083046:	4630      	mov	r0, r6
 8083048:	1f59      	subs	r1, r3, #5
 808304a:	69f3      	ldr	r3, [r6, #28]
 808304c:	4419      	add	r1, r3
 808304e:	f7fd ffa5 	bl	8080f9c <spiffs_gc_check>
  if (res != SPIFFS_OK) {
 8083052:	4604      	mov	r4, r0
 8083054:	2800      	cmp	r0, #0
 8083056:	d16e      	bne.n	8083136 <spiffs_object_append+0x11e>
  spiffs_page_object_ix_header *objix_hdr = (spiffs_page_object_ix_header *)fs->work;
 8083058:	6bb3      	ldr	r3, [r6, #56]	; 0x38
  spiffs_span_ix cur_objix_spix = 0;
 808305a:	2700      	movs	r7, #0
  spiffs_page_object_ix_header *objix_hdr = (spiffs_page_object_ix_header *)fs->work;
 808305c:	9307      	str	r3, [sp, #28]
  spiffs_page_ix cur_objix_pix = fd->objix_hdr_pix;
 808305e:	89ab      	ldrh	r3, [r5, #12]
  spiffs_span_ix prev_objix_spix = (spiffs_span_ix)-1;
 8083060:	f64f 7aff 	movw	sl, #65535	; 0xffff
  spiffs_page_ix cur_objix_pix = fd->objix_hdr_pix;
 8083064:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
  spiffs_span_ix data_spix = offset / SPIFFS_DATA_PAGE_SIZE(fs);
 8083068:	69f3      	ldr	r3, [r6, #28]
  u32_t written = 0;
 808306a:	46b8      	mov	r8, r7
  spiffs_span_ix data_spix = offset / SPIFFS_DATA_PAGE_SIZE(fs);
 808306c:	3b05      	subs	r3, #5
 808306e:	fbbb f2f3 	udiv	r2, fp, r3
  u32_t page_offs = offset % SPIFFS_DATA_PAGE_SIZE(fs);
 8083072:	fb03 b312 	mls	r3, r3, r2, fp
  spiffs_span_ix data_spix = offset / SPIFFS_DATA_PAGE_SIZE(fs);
 8083076:	fa1f f982 	uxth.w	r9, r2
  u32_t page_offs = offset % SPIFFS_DATA_PAGE_SIZE(fs);
 808307a:	9308      	str	r3, [sp, #32]
  while (res == SPIFFS_OK && written < len) {
 808307c:	2c00      	cmp	r4, #0
 808307e:	f000 8185 	beq.w	808338c <spiffs_object_append+0x374>
  fd->cursor_objix_pix = cur_objix_pix;
 8083082:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  fd->size = offset+written;
 8083086:	eb0b 0908 	add.w	r9, fp, r8
 808308a:	f8c5 9008 	str.w	r9, [r5, #8]
  fd->offset = offset+written;
 808308e:	f8c5 9014 	str.w	r9, [r5, #20]
  fd->cursor_objix_pix = cur_objix_pix;
 8083092:	81ea      	strh	r2, [r5, #14]
  fd->cursor_objix_spix = cur_objix_spix;
 8083094:	822f      	strh	r7, [r5, #16]
  if (cur_objix_spix != 0) {
 8083096:	2f00      	cmp	r7, #0
 8083098:	f000 82df 	beq.w	808365a <spiffs_object_append+0x642>
    SPIFFS_DBG("append: "_SPIPRIid" store objix page, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", fd->obj_id,
 808309c:	463b      	mov	r3, r7
 808309e:	88e9      	ldrh	r1, [r5, #6]
 80830a0:	485c      	ldr	r0, [pc, #368]	; (8083214 <spiffs_object_append+0x1fc>)
 80830a2:	f8cd 8000 	str.w	r8, [sp]
 80830a6:	f009 fd33 	bl	808cb10 <spiffsParticleInfoLog>
    res2 = spiffs_page_index_check(fs, fd, cur_objix_pix, cur_objix_spix);
 80830aa:	463b      	mov	r3, r7
 80830ac:	4629      	mov	r1, r5
 80830ae:	4630      	mov	r0, r6
 80830b0:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80830b4:	f7fe fe3c 	bl	8081d30 <spiffs_page_index_check>
    SPIFFS_CHECK_RES(res2);
 80830b8:	2800      	cmp	r0, #0
 80830ba:	f2c0 832a 	blt.w	8083712 <spiffs_object_append+0x6fa>
    res2 = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_UPDT,
 80830be:	69f2      	ldr	r2, [r6, #28]
 80830c0:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80830c4:	6933      	ldr	r3, [r6, #16]
 80830c6:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 80830c8:	fb02 3301 	mla	r3, r2, r1, r3
 80830cc:	e9cd 2000 	strd	r2, r0, [sp]
 80830d0:	2106      	movs	r1, #6
 80830d2:	4630      	mov	r0, r6
 80830d4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80830d8:	f7fd f934 	bl	8080344 <spiffs_phys_wr>
    SPIFFS_CHECK_RES(res2);
 80830dc:	2800      	cmp	r0, #0
 80830de:	f2c0 8318 	blt.w	8083712 <spiffs_object_append+0x6fa>
    spiffs_cb_object_event(fs, (spiffs_page_object_ix *)fs->work,
 80830e2:	2700      	movs	r7, #0
 80830e4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80830e8:	9702      	str	r7, [sp, #8]
 80830ea:	9301      	str	r3, [sp, #4]
 80830ec:	9b07      	ldr	r3, [sp, #28]
 80830ee:	4630      	mov	r0, r6
 80830f0:	885b      	ldrh	r3, [r3, #2]
 80830f2:	463a      	mov	r2, r7
 80830f4:	9300      	str	r3, [sp, #0]
 80830f6:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 80830f8:	88eb      	ldrh	r3, [r5, #6]
 80830fa:	f7ff fce1 	bl	8082ac0 <spiffs_cb_object_event>
    res2 = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
 80830fe:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8083102:	4629      	mov	r1, r5
 8083104:	4630      	mov	r0, r6
 8083106:	e9cd 9303 	strd	r9, r3, [sp, #12]
 808310a:	88ea      	ldrh	r2, [r5, #6]
 808310c:	89ab      	ldrh	r3, [r5, #12]
 808310e:	e9cd 7701 	strd	r7, r7, [sp, #4]
 8083112:	9700      	str	r7, [sp, #0]
 8083114:	f7ff fe96 	bl	8082e44 <spiffs_object_update_index_hdr>
 8083118:	4606      	mov	r6, r0
    SPIFFS_DBG("append: "_SPIPRIid" store new size II "_SPIPRIi" in objix_hdr, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi", res "_SPIPRIi"\n", fd->obj_id
 808311a:	e9cd 8001 	strd	r8, r0, [sp, #4]
 808311e:	464a      	mov	r2, r9
 8083120:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8083124:	88e9      	ldrh	r1, [r5, #6]
 8083126:	483c      	ldr	r0, [pc, #240]	; (8083218 <spiffs_object_append+0x200>)
 8083128:	9700      	str	r7, [sp, #0]
 808312a:	f009 fcf1 	bl	808cb10 <spiffsParticleInfoLog>
    SPIFFS_CHECK_RES(res2);
 808312e:	42be      	cmp	r6, r7
 8083130:	bfb8      	it	lt
 8083132:	4634      	movlt	r4, r6
 8083134:	e005      	b.n	8083142 <spiffs_object_append+0x12a>
    SPIFFS_DBG("append: gc check fail "_SPIPRIi"\n", res);
 8083136:	4601      	mov	r1, r0
 8083138:	4838      	ldr	r0, [pc, #224]	; (808321c <spiffs_object_append+0x204>)
 808313a:	f009 fce9 	bl	808cb10 <spiffsParticleInfoLog>
  SPIFFS_CHECK_RES(res);
 808313e:	2c00      	cmp	r4, #0
 8083140:	da8a      	bge.n	8083058 <spiffs_object_append+0x40>
} // spiffs_object_append
 8083142:	4620      	mov	r0, r4
 8083144:	b011      	add	sp, #68	; 0x44
 8083146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            res = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
 808314a:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 808314e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8083152:	e9cd aa01 	strd	sl, sl, [sp, #4]
 8083156:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8083158:	4629      	mov	r1, r5
 808315a:	9300      	str	r3, [sp, #0]
 808315c:	4630      	mov	r0, r6
 808315e:	89ab      	ldrh	r3, [r5, #12]
 8083160:	88ea      	ldrh	r2, [r5, #6]
 8083162:	f7ff fe6f 	bl	8082e44 <spiffs_object_update_index_hdr>
            SPIFFS_CHECK_RES(res);
 8083166:	1e04      	subs	r4, r0, #0
 8083168:	dbeb      	blt.n	8083142 <spiffs_object_append+0x12a>
            SPIFFS_DBG("append: "_SPIPRIid" store new objix_hdr, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", fd->obj_id,
 808316a:	4653      	mov	r3, sl
 808316c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8083170:	88e9      	ldrh	r1, [r5, #6]
 8083172:	482b      	ldr	r0, [pc, #172]	; (8083220 <spiffs_object_append+0x208>)
 8083174:	f8cd 8000 	str.w	r8, [sp]
 8083178:	f009 fcca 	bl	808cb10 <spiffsParticleInfoLog>
 808317c:	e152      	b.n	8083424 <spiffs_object_append+0x40c>
          res = spiffs_page_index_check(fs, fd, cur_objix_pix, prev_objix_spix);
 808317e:	4653      	mov	r3, sl
 8083180:	4629      	mov	r1, r5
 8083182:	4630      	mov	r0, r6
 8083184:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8083188:	f7fe fdd2 	bl	8081d30 <spiffs_page_index_check>
          SPIFFS_CHECK_RES(res);
 808318c:	1e04      	subs	r4, r0, #0
 808318e:	dbd8      	blt.n	8083142 <spiffs_object_append+0x12a>
          res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_UPDT,
 8083190:	69f2      	ldr	r2, [r6, #28]
 8083192:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8083196:	6933      	ldr	r3, [r6, #16]
 8083198:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 808319a:	fb02 3301 	mla	r3, r2, r1, r3
 808319e:	e9cd 2000 	strd	r2, r0, [sp]
 80831a2:	2106      	movs	r1, #6
 80831a4:	4630      	mov	r0, r6
 80831a6:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80831aa:	f7fd f8cb 	bl	8080344 <spiffs_phys_wr>
          SPIFFS_CHECK_RES(res);
 80831ae:	1e04      	subs	r4, r0, #0
 80831b0:	dbc7      	blt.n	8083142 <spiffs_object_append+0x12a>
          spiffs_cb_object_event(fs, (spiffs_page_object_ix *)fs->work,
 80831b2:	f04f 0a00 	mov.w	sl, #0
 80831b6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80831ba:	f8cd a008 	str.w	sl, [sp, #8]
 80831be:	9301      	str	r3, [sp, #4]
 80831c0:	9b07      	ldr	r3, [sp, #28]
 80831c2:	4652      	mov	r2, sl
 80831c4:	885b      	ldrh	r3, [r3, #2]
 80831c6:	4630      	mov	r0, r6
 80831c8:	9300      	str	r3, [sp, #0]
 80831ca:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 80831cc:	88eb      	ldrh	r3, [r5, #6]
 80831ce:	f7ff fc77 	bl	8082ac0 <spiffs_cb_object_event>
          res = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
 80831d2:	eb0b 0308 	add.w	r3, fp, r8
 80831d6:	9309      	str	r3, [sp, #36]	; 0x24
 80831d8:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 80831dc:	9304      	str	r3, [sp, #16]
 80831de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80831e0:	4629      	mov	r1, r5
 80831e2:	e9cd a302 	strd	sl, r3, [sp, #8]
 80831e6:	4630      	mov	r0, r6
 80831e8:	e9cd aa00 	strd	sl, sl, [sp]
 80831ec:	89ab      	ldrh	r3, [r5, #12]
 80831ee:	88ea      	ldrh	r2, [r5, #6]
 80831f0:	f7ff fe28 	bl	8082e44 <spiffs_object_update_index_hdr>
          SPIFFS_CHECK_RES(res);
 80831f4:	1e04      	subs	r4, r0, #0
 80831f6:	dba4      	blt.n	8083142 <spiffs_object_append+0x12a>
          SPIFFS_DBG("append: "_SPIPRIid" store new size I "_SPIPRIi" in objix_hdr, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", fd->obj_id,
 80831f8:	e9cd a800 	strd	sl, r8, [sp]
 80831fc:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8083200:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8083202:	88e9      	ldrh	r1, [r5, #6]
 8083204:	4807      	ldr	r0, [pc, #28]	; (8083224 <spiffs_object_append+0x20c>)
 8083206:	f009 fc83 	bl	808cb10 <spiffsParticleInfoLog>
 808320a:	e10b      	b.n	8083424 <spiffs_object_append+0x40c>
 808320c:	08092b52 	.word	0x08092b52
 8083210:	08092b79 	.word	0x08092b79
 8083214:	08092e3a 	.word	0x08092e3a
 8083218:	08092e70 	.word	0x08092e70
 808321c:	08092b9a 	.word	0x08092b9a
 8083220:	08092be4 	.word	0x08092be4
 8083224:	08092c1d 	.word	0x08092c1d
        spiffs_span_ix len_objix_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, (fd->size-1)/SPIFFS_DATA_PAGE_SIZE(fs));
 8083228:	69f2      	ldr	r2, [r6, #28]
 808322a:	68ab      	ldr	r3, [r5, #8]
 808322c:	1f50      	subs	r0, r2, #5
 808322e:	3b01      	subs	r3, #1
 8083230:	fbb3 f3f0 	udiv	r3, r3, r0
 8083234:	f1a2 002d 	sub.w	r0, r2, #45	; 0x2d
 8083238:	ebb3 0f50 	cmp.w	r3, r0, lsr #1
 808323c:	ea4f 0450 	mov.w	r4, r0, lsr #1
 8083240:	d30c      	bcc.n	808325c <spiffs_object_append+0x244>
        if (written > 0 || cur_objix_spix > len_objix_spix) {
 8083242:	f1b8 0f00 	cmp.w	r8, #0
 8083246:	d109      	bne.n	808325c <spiffs_object_append+0x244>
        spiffs_span_ix len_objix_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, (fd->size-1)/SPIFFS_DATA_PAGE_SIZE(fs));
 8083248:	3a08      	subs	r2, #8
 808324a:	1b1b      	subs	r3, r3, r4
 808324c:	0852      	lsrs	r2, r2, #1
 808324e:	fbb3 f3f2 	udiv	r3, r3, r2
 8083252:	3301      	adds	r3, #1
        if (written > 0 || cur_objix_spix > len_objix_spix) {
 8083254:	b29b      	uxth	r3, r3
 8083256:	429f      	cmp	r7, r3
 8083258:	f240 8120 	bls.w	808349c <spiffs_object_append+0x484>
          p_hdr.flags = 0xff & ~(SPIFFS_PH_FLAG_FINAL | SPIFFS_PH_FLAG_INDEX);
 808325c:	23f9      	movs	r3, #249	; 0xf9
 808325e:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
          res = spiffs_page_allocate_data(fs, fd->obj_id | SPIFFS_OBJ_ID_IX_FLAG,
 8083262:	ab0c      	add	r3, sp, #48	; 0x30
 8083264:	f04f 0a00 	mov.w	sl, #0
 8083268:	9303      	str	r3, [sp, #12]
 808326a:	2301      	movs	r3, #1
          p_hdr.obj_id = fd->obj_id | SPIFFS_OBJ_ID_IX_FLAG;
 808326c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
          res = spiffs_page_allocate_data(fs, fd->obj_id | SPIFFS_OBJ_ID_IX_FLAG,
 8083270:	e9cd a301 	strd	sl, r3, [sp, #4]
 8083274:	4630      	mov	r0, r6
 8083276:	4653      	mov	r3, sl
 8083278:	f8cd a000 	str.w	sl, [sp]
 808327c:	aa0e      	add	r2, sp, #56	; 0x38
          p_hdr.obj_id = fd->obj_id | SPIFFS_OBJ_ID_IX_FLAG;
 808327e:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
          p_hdr.span_ix = cur_objix_spix;
 8083282:	f8ad 703a 	strh.w	r7, [sp, #58]	; 0x3a
          res = spiffs_page_allocate_data(fs, fd->obj_id | SPIFFS_OBJ_ID_IX_FLAG,
 8083286:	f7ff fa79 	bl	808277c <spiffs_page_allocate_data>
          SPIFFS_CHECK_RES(res);
 808328a:	1e04      	subs	r4, r0, #0
 808328c:	f6ff af59 	blt.w	8083142 <spiffs_object_append+0x12a>
          memset(fs->work, 0xff, SPIFFS_CFG_LOG_PAGE_SZ(fs));
 8083290:	21ff      	movs	r1, #255	; 0xff
 8083292:	69f2      	ldr	r2, [r6, #28]
 8083294:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 8083296:	f00e fe15 	bl	8091ec4 <memset>
          _SPIFFS_MEMCPY(fs->work, &p_hdr, sizeof(spiffs_page_header));
 808329a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 808329c:	980e      	ldr	r0, [sp, #56]	; 0x38
 808329e:	6018      	str	r0, [r3, #0]
 80832a0:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
          spiffs_cb_object_event(fs, (spiffs_page_object_ix *)fs->work,
 80832a4:	4630      	mov	r0, r6
          _SPIFFS_MEMCPY(fs->work, &p_hdr, sizeof(spiffs_page_header));
 80832a6:	711a      	strb	r2, [r3, #4]
          spiffs_cb_object_event(fs, (spiffs_page_object_ix *)fs->work,
 80832a8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80832ac:	f8cd a008 	str.w	sl, [sp, #8]
 80832b0:	e9cd 7300 	strd	r7, r3, [sp]
 80832b4:	2201      	movs	r2, #1
 80832b6:	88eb      	ldrh	r3, [r5, #6]
 80832b8:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 80832ba:	f7ff fc01 	bl	8082ac0 <spiffs_cb_object_event>
          SPIFFS_DBG("append: "_SPIPRIid" create objix page, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", fd->obj_id
 80832be:	463b      	mov	r3, r7
 80832c0:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80832c4:	88e9      	ldrh	r1, [r5, #6]
 80832c6:	48b7      	ldr	r0, [pc, #732]	; (80835a4 <spiffs_object_append+0x58c>)
 80832c8:	f8cd 8000 	str.w	r8, [sp]
 80832cc:	f009 fc20 	bl	808cb10 <spiffsParticleInfoLog>
        fd->size = offset+written;
 80832d0:	46ba      	mov	sl, r7
        fd->cursor_objix_pix = cur_objix_pix;
 80832d2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
        fd->cursor_objix_spix = cur_objix_spix;
 80832d6:	822f      	strh	r7, [r5, #16]
        fd->cursor_objix_pix = cur_objix_pix;
 80832d8:	81eb      	strh	r3, [r5, #14]
        fd->offset = offset+written;
 80832da:	eb0b 0308 	add.w	r3, fp, r8
 80832de:	616b      	str	r3, [r5, #20]
        fd->size = offset+written;
 80832e0:	60ab      	str	r3, [r5, #8]
    u32_t to_write = MIN(len-written, SPIFFS_DATA_PAGE_SIZE(fs) - page_offs);
 80832e2:	69f2      	ldr	r2, [r6, #28]
 80832e4:	9908      	ldr	r1, [sp, #32]
 80832e6:	1f53      	subs	r3, r2, #5
 80832e8:	1a59      	subs	r1, r3, r1
 80832ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80832ec:	eba3 0308 	sub.w	r3, r3, r8
 80832f0:	4299      	cmp	r1, r3
 80832f2:	bf28      	it	cs
 80832f4:	4619      	movcs	r1, r3
    if (page_offs == 0) {
 80832f6:	9b08      	ldr	r3, [sp, #32]
    u32_t to_write = MIN(len-written, SPIFFS_DATA_PAGE_SIZE(fs) - page_offs);
 80832f8:	9109      	str	r1, [sp, #36]	; 0x24
    if (page_offs == 0) {
 80832fa:	2b00      	cmp	r3, #0
 80832fc:	f040 811e 	bne.w	808353c <spiffs_object_append+0x524>
      p_hdr.flags = 0xff & ~(SPIFFS_PH_FLAG_FINAL);  // finalize immediately
 8083300:	23fd      	movs	r3, #253	; 0xfd
 8083302:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
      res = spiffs_page_allocate_data(fs, fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG,
 8083306:	ab0d      	add	r3, sp, #52	; 0x34
 8083308:	9303      	str	r3, [sp, #12]
 808330a:	2301      	movs	r3, #1
 808330c:	9302      	str	r3, [sp, #8]
 808330e:	9b08      	ldr	r3, [sp, #32]
      p_hdr.obj_id = fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG;
 8083310:	88e9      	ldrh	r1, [r5, #6]
      res = spiffs_page_allocate_data(fs, fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG,
 8083312:	9301      	str	r3, [sp, #4]
 8083314:	9b09      	ldr	r3, [sp, #36]	; 0x24
      p_hdr.obj_id = fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG;
 8083316:	f3c1 010e 	ubfx	r1, r1, #0, #15
      res = spiffs_page_allocate_data(fs, fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG,
 808331a:	9300      	str	r3, [sp, #0]
 808331c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 808331e:	aa0e      	add	r2, sp, #56	; 0x38
 8083320:	4443      	add	r3, r8
 8083322:	4630      	mov	r0, r6
      p_hdr.obj_id = fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG;
 8083324:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
      p_hdr.span_ix = data_spix;
 8083328:	f8ad 903a 	strh.w	r9, [sp, #58]	; 0x3a
      res = spiffs_page_allocate_data(fs, fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG,
 808332c:	f7ff fa26 	bl	808277c <spiffs_page_allocate_data>
      SPIFFS_DBG("append: "_SPIPRIid" store new data page, "_SPIPRIpg":"_SPIPRIsp" offset:"_SPIPRIi", len "_SPIPRIi", written "_SPIPRIi"\n", fd->obj_id,
 8083330:	9b09      	ldr	r3, [sp, #36]	; 0x24
      res = spiffs_page_allocate_data(fs, fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG,
 8083332:	4604      	mov	r4, r0
      SPIFFS_DBG("append: "_SPIPRIid" store new data page, "_SPIPRIpg":"_SPIPRIsp" offset:"_SPIPRIi", len "_SPIPRIi", written "_SPIPRIi"\n", fd->obj_id,
 8083334:	9301      	str	r3, [sp, #4]
 8083336:	9b08      	ldr	r3, [sp, #32]
 8083338:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 808333c:	9300      	str	r3, [sp, #0]
 808333e:	464b      	mov	r3, r9
 8083340:	88e9      	ldrh	r1, [r5, #6]
 8083342:	4899      	ldr	r0, [pc, #612]	; (80835a8 <spiffs_object_append+0x590>)
 8083344:	f8cd 8008 	str.w	r8, [sp, #8]
      SPIFFS_DBG("append: "_SPIPRIid" store to existing data page, "_SPIPRIpg":"_SPIPRIsp" offset:"_SPIPRIi", len "_SPIPRIi", written "_SPIPRIi"\n", fd->obj_id
 8083348:	f009 fbe2 	bl	808cb10 <spiffsParticleInfoLog>
    if (res != SPIFFS_OK) break;
 808334c:	2c00      	cmp	r4, #0
 808334e:	f47f ae98 	bne.w	8083082 <spiffs_object_append+0x6a>
    if (cur_objix_spix == 0) {
 8083352:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8083356:	2f00      	cmp	r7, #0
 8083358:	f040 814e 	bne.w	80835f8 <spiffs_object_append+0x5e0>
      ((spiffs_page_ix*)((u8_t *)objix_hdr + sizeof(spiffs_page_object_ix_header)))[data_spix] = data_page;
 808335c:	9b07      	ldr	r3, [sp, #28]
      SPIFFS_DBG("append: "_SPIPRIid" wrote page "_SPIPRIpg" to objix_hdr entry "_SPIPRIsp" in mem\n", fd->obj_id
 808335e:	4893      	ldr	r0, [pc, #588]	; (80835ac <spiffs_object_append+0x594>)
      ((spiffs_page_ix*)((u8_t *)objix_hdr + sizeof(spiffs_page_object_ix_header)))[data_spix] = data_page;
 8083360:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 8083364:	f8a3 202d 	strh.w	r2, [r3, #45]	; 0x2d
      SPIFFS_DBG("append: "_SPIPRIid" wrote page "_SPIPRIpg" to objix_hdr entry "_SPIPRIsp" in mem\n", fd->obj_id
 8083368:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 808336c:	464b      	mov	r3, r9
 808336e:	88e9      	ldrh	r1, [r5, #6]
 8083370:	f009 fbce 	bl	808cb10 <spiffsParticleInfoLog>
      objix_hdr->size = offset+written;
 8083374:	9a07      	ldr	r2, [sp, #28]
 8083376:	eb0b 0308 	add.w	r3, fp, r8
 808337a:	6093      	str	r3, [r2, #8]
    written += to_write;
 808337c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    data_spix++;
 808337e:	f109 0901 	add.w	r9, r9, #1
    written += to_write;
 8083382:	4498      	add	r8, r3
    page_offs = 0;
 8083384:	2300      	movs	r3, #0
    data_spix++;
 8083386:	fa1f f989 	uxth.w	r9, r9
    page_offs = 0;
 808338a:	9308      	str	r3, [sp, #32]
  while (res == SPIFFS_OK && written < len) {
 808338c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808338e:	4598      	cmp	r8, r3
 8083390:	f4bf ae77 	bcs.w	8083082 <spiffs_object_append+0x6a>
    cur_objix_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, data_spix);
 8083394:	69f3      	ldr	r3, [r6, #28]
 8083396:	f1a3 022d 	sub.w	r2, r3, #45	; 0x2d
 808339a:	ebb9 0f52 	cmp.w	r9, r2, lsr #1
 808339e:	ea4f 0752 	mov.w	r7, r2, lsr #1
 80833a2:	bf21      	itttt	cs
 80833a4:	3b08      	subcs	r3, #8
 80833a6:	eba9 0707 	subcs.w	r7, r9, r7
 80833aa:	085b      	lsrcs	r3, r3, #1
 80833ac:	fbb7 f7f3 	udivcs	r7, r7, r3
 80833b0:	bf32      	itee	cc
 80833b2:	2700      	movcc	r7, #0
 80833b4:	3701      	addcs	r7, #1
 80833b6:	b2bf      	uxthcs	r7, r7
    if (cur_objix_spix != prev_objix_spix) {
 80833b8:	45ba      	cmp	sl, r7
 80833ba:	d092      	beq.n	80832e2 <spiffs_object_append+0x2ca>
      if (written > 0) {
 80833bc:	f1b8 0f00 	cmp.w	r8, #0
 80833c0:	d034      	beq.n	808342c <spiffs_object_append+0x414>
        SPIFFS_DBG("append: "_SPIPRIid" store objix "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", fd->obj_id,
 80833c2:	4653      	mov	r3, sl
 80833c4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80833c8:	88e9      	ldrh	r1, [r5, #6]
 80833ca:	4879      	ldr	r0, [pc, #484]	; (80835b0 <spiffs_object_append+0x598>)
 80833cc:	f8cd 8000 	str.w	r8, [sp]
 80833d0:	f009 fb9e 	bl	808cb10 <spiffsParticleInfoLog>
        if (prev_objix_spix == 0) {
 80833d4:	f1ba 0f00 	cmp.w	sl, #0
 80833d8:	f47f aed1 	bne.w	808317e <spiffs_object_append+0x166>
          objix_hdr->size = offset+written;
 80833dc:	9a07      	ldr	r2, [sp, #28]
 80833de:	eb0b 0308 	add.w	r3, fp, r8
 80833e2:	6093      	str	r3, [r2, #8]
          if (offset == 0) {
 80833e4:	f1bb 0f00 	cmp.w	fp, #0
 80833e8:	f47f aeaf 	bne.w	808314a <spiffs_object_append+0x132>
            res = spiffs_page_index_check(fs, fd, cur_objix_pix, 0);
 80833ec:	465b      	mov	r3, fp
 80833ee:	4629      	mov	r1, r5
 80833f0:	4630      	mov	r0, r6
 80833f2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80833f6:	f7fe fc9b 	bl	8081d30 <spiffs_page_index_check>
            SPIFFS_CHECK_RES(res);
 80833fa:	1e04      	subs	r4, r0, #0
 80833fc:	f6ff aea1 	blt.w	8083142 <spiffs_object_append+0x12a>
            res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_UPDT,
 8083400:	69f2      	ldr	r2, [r6, #28]
 8083402:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8083406:	6933      	ldr	r3, [r6, #16]
 8083408:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 808340a:	fb02 3301 	mla	r3, r2, r1, r3
 808340e:	e9cd 2000 	strd	r2, r0, [sp]
 8083412:	2106      	movs	r1, #6
 8083414:	4630      	mov	r0, r6
 8083416:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 808341a:	f7fc ff93 	bl	8080344 <spiffs_phys_wr>
            SPIFFS_CHECK_RES(res);
 808341e:	1e04      	subs	r4, r0, #0
 8083420:	f6ff ae8f 	blt.w	8083142 <spiffs_object_append+0x12a>
        fd->size = offset+written;
 8083424:	eb0b 0308 	add.w	r3, fp, r8
 8083428:	60ab      	str	r3, [r5, #8]
        fd->offset = offset+written;
 808342a:	616b      	str	r3, [r5, #20]
      if (cur_objix_spix == 0) {
 808342c:	88e9      	ldrh	r1, [r5, #6]
 808342e:	2f00      	cmp	r7, #0
 8083430:	f47f aefa 	bne.w	8083228 <spiffs_object_append+0x210>
        SPIFFS_DBG("append: "_SPIPRIid" load objixhdr page "_SPIPRIpg":"_SPIPRIsp"\n", fd->obj_id, cur_objix_pix, cur_objix_spix);
 8083434:	463b      	mov	r3, r7
 8083436:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 808343a:	485e      	ldr	r0, [pc, #376]	; (80835b4 <spiffs_object_append+0x59c>)
 808343c:	f009 fb68 	bl	808cb10 <spiffsParticleInfoLog>
        res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ,
 8083440:	69f2      	ldr	r2, [r6, #28]
 8083442:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8083446:	6933      	ldr	r3, [r6, #16]
 8083448:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 808344a:	fb02 3301 	mla	r3, r2, r1, r3
 808344e:	e9cd 2000 	strd	r2, r0, [sp]
 8083452:	2116      	movs	r1, #22
 8083454:	4630      	mov	r0, r6
 8083456:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 808345a:	f7fc fee7 	bl	808022c <spiffs_phys_rd>
        SPIFFS_CHECK_RES(res);
 808345e:	1e04      	subs	r4, r0, #0
 8083460:	f6ff ae6f 	blt.w	8083142 <spiffs_object_append+0x12a>
        SPIFFS_VALIDATE_OBJIX(objix_hdr->p_hdr, fd->obj_id, cur_objix_spix);
 8083464:	9b07      	ldr	r3, [sp, #28]
 8083466:	791b      	ldrb	r3, [r3, #4]
 8083468:	07d8      	lsls	r0, r3, #31
 808346a:	f100 814a 	bmi.w	8083702 <spiffs_object_append+0x6ea>
 808346e:	0619      	lsls	r1, r3, #24
 8083470:	f140 8149 	bpl.w	8083706 <spiffs_object_append+0x6ee>
 8083474:	079a      	lsls	r2, r3, #30
 8083476:	f100 8148 	bmi.w	808370a <spiffs_object_append+0x6f2>
 808347a:	075c      	lsls	r4, r3, #29
 808347c:	f100 8147 	bmi.w	808370e <spiffs_object_append+0x6f6>
 8083480:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8083484:	2b00      	cmp	r3, #0
 8083486:	f280 8142 	bge.w	808370e <spiffs_object_append+0x6f6>
 808348a:	9b07      	ldr	r3, [sp, #28]
 808348c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8083490:	f1ba 0f00 	cmp.w	sl, #0
 8083494:	f43f af25 	beq.w	80832e2 <spiffs_object_append+0x2ca>
 8083498:	4c47      	ldr	r4, [pc, #284]	; (80835b8 <spiffs_object_append+0x5a0>)
 808349a:	e652      	b.n	8083142 <spiffs_object_append+0x12a>
          SPIFFS_DBG("append: "_SPIPRIid" find objix span_ix:"_SPIPRIsp"\n", fd->obj_id, cur_objix_spix);
 808349c:	463a      	mov	r2, r7
 808349e:	4847      	ldr	r0, [pc, #284]	; (80835bc <spiffs_object_append+0x5a4>)
 80834a0:	f009 fb36 	bl	808cb10 <spiffsParticleInfoLog>
          if (fd->cursor_objix_spix == cur_objix_spix) {
 80834a4:	8a2b      	ldrh	r3, [r5, #16]
 80834a6:	42bb      	cmp	r3, r7
 80834a8:	d137      	bne.n	808351a <spiffs_object_append+0x502>
            pix = fd->cursor_objix_pix;
 80834aa:	89eb      	ldrh	r3, [r5, #14]
 80834ac:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
          SPIFFS_DBG("append: "_SPIPRIid" found object index at page "_SPIPRIpg" [fd size "_SPIPRIi"]\n", fd->obj_id, pix, fd->size);
 80834b0:	68ab      	ldr	r3, [r5, #8]
 80834b2:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 80834b6:	88e9      	ldrh	r1, [r5, #6]
 80834b8:	4841      	ldr	r0, [pc, #260]	; (80835c0 <spiffs_object_append+0x5a8>)
 80834ba:	f009 fb29 	bl	808cb10 <spiffsParticleInfoLog>
          res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ,
 80834be:	69f2      	ldr	r2, [r6, #28]
 80834c0:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 80834c4:	6933      	ldr	r3, [r6, #16]
 80834c6:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 80834c8:	fb02 3301 	mla	r3, r2, r1, r3
 80834cc:	e9cd 2000 	strd	r2, r0, [sp]
 80834d0:	2116      	movs	r1, #22
 80834d2:	4630      	mov	r0, r6
 80834d4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80834d8:	f7fc fea8 	bl	808022c <spiffs_phys_rd>
          SPIFFS_CHECK_RES(res);
 80834dc:	1e04      	subs	r4, r0, #0
 80834de:	f6ff ae30 	blt.w	8083142 <spiffs_object_append+0x12a>
          SPIFFS_VALIDATE_OBJIX(objix_hdr->p_hdr, fd->obj_id, cur_objix_spix);
 80834e2:	9b07      	ldr	r3, [sp, #28]
 80834e4:	791b      	ldrb	r3, [r3, #4]
 80834e6:	07d8      	lsls	r0, r3, #31
 80834e8:	f100 810b 	bmi.w	8083702 <spiffs_object_append+0x6ea>
 80834ec:	0619      	lsls	r1, r3, #24
 80834ee:	f140 810a 	bpl.w	8083706 <spiffs_object_append+0x6ee>
 80834f2:	079a      	lsls	r2, r3, #30
 80834f4:	f100 8109 	bmi.w	808370a <spiffs_object_append+0x6f2>
 80834f8:	075b      	lsls	r3, r3, #29
 80834fa:	f100 8108 	bmi.w	808370e <spiffs_object_append+0x6f6>
 80834fe:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8083502:	2b00      	cmp	r3, #0
 8083504:	f280 8103 	bge.w	808370e <spiffs_object_append+0x6f6>
 8083508:	9b07      	ldr	r3, [sp, #28]
 808350a:	885b      	ldrh	r3, [r3, #2]
 808350c:	42bb      	cmp	r3, r7
 808350e:	d1c3      	bne.n	8083498 <spiffs_object_append+0x480>
          cur_objix_pix = pix;
 8083510:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8083514:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8083518:	e6da      	b.n	80832d0 <spiffs_object_append+0x2b8>
            res = spiffs_obj_lu_find_id_and_span(fs, fd->obj_id | SPIFFS_OBJ_ID_IX_FLAG, cur_objix_spix, 0, &pix);
 808351a:	88e9      	ldrh	r1, [r5, #6]
 808351c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8083520:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8083524:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8083528:	9300      	str	r3, [sp, #0]
 808352a:	463a      	mov	r2, r7
 808352c:	4643      	mov	r3, r8
 808352e:	4630      	mov	r0, r6
 8083530:	b289      	uxth	r1, r1
 8083532:	f7ff f8dd 	bl	80826f0 <spiffs_obj_lu_find_id_and_span>
            SPIFFS_CHECK_RES(res);
 8083536:	1e04      	subs	r4, r0, #0
 8083538:	daba      	bge.n	80834b0 <spiffs_object_append+0x498>
 808353a:	e602      	b.n	8083142 <spiffs_object_append+0x12a>
      if (cur_objix_spix == 0) {
 808353c:	2f00      	cmp	r7, #0
 808353e:	d143      	bne.n	80835c8 <spiffs_object_append+0x5b0>
        data_page = ((spiffs_page_ix*)((u8_t *)objix_hdr + sizeof(spiffs_page_object_ix_header)))[data_spix];
 8083540:	9b07      	ldr	r3, [sp, #28]
 8083542:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 8083546:	f8b3 302d 	ldrh.w	r3, [r3, #45]	; 0x2d
        data_page = ((spiffs_page_ix*)((u8_t *)objix + sizeof(spiffs_page_object_ix)))[SPIFFS_OBJ_IX_ENTRY(fs, data_spix)];
 808354a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
      res = spiffs_page_data_check(fs, fd, data_page, data_spix);
 808354e:	4630      	mov	r0, r6
 8083550:	464b      	mov	r3, r9
 8083552:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8083556:	1d29      	adds	r1, r5, #4
 8083558:	f7fe fd0e 	bl	8081f78 <spiffs_page_data_check.isra.0>
      SPIFFS_CHECK_RES(res);
 808355c:	1e04      	subs	r4, r0, #0
 808355e:	f6ff adf0 	blt.w	8083142 <spiffs_object_append+0x12a>
      res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
 8083562:	6932      	ldr	r2, [r6, #16]
 8083564:	69f1      	ldr	r1, [r6, #28]
 8083566:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 808356a:	3205      	adds	r2, #5
 808356c:	fb01 2303 	mla	r3, r1, r3, r2
 8083570:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8083572:	2107      	movs	r1, #7
 8083574:	4442      	add	r2, r8
 8083576:	9201      	str	r2, [sp, #4]
 8083578:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808357a:	4630      	mov	r0, r6
 808357c:	9200      	str	r2, [sp, #0]
 808357e:	9a08      	ldr	r2, [sp, #32]
 8083580:	4413      	add	r3, r2
 8083582:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8083586:	f7fc fedd 	bl	8080344 <spiffs_phys_wr>
      SPIFFS_DBG("append: "_SPIPRIid" store to existing data page, "_SPIPRIpg":"_SPIPRIsp" offset:"_SPIPRIi", len "_SPIPRIi", written "_SPIPRIi"\n", fd->obj_id
 808358a:	9b09      	ldr	r3, [sp, #36]	; 0x24
      res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
 808358c:	4604      	mov	r4, r0
      SPIFFS_DBG("append: "_SPIPRIid" store to existing data page, "_SPIPRIpg":"_SPIPRIsp" offset:"_SPIPRIi", len "_SPIPRIi", written "_SPIPRIi"\n", fd->obj_id
 808358e:	9301      	str	r3, [sp, #4]
 8083590:	9b08      	ldr	r3, [sp, #32]
 8083592:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8083596:	9300      	str	r3, [sp, #0]
 8083598:	88e9      	ldrh	r1, [r5, #6]
 808359a:	464b      	mov	r3, r9
 808359c:	4809      	ldr	r0, [pc, #36]	; (80835c4 <spiffs_object_append+0x5ac>)
 808359e:	f8cd 8008 	str.w	r8, [sp, #8]
 80835a2:	e6d1      	b.n	8083348 <spiffs_object_append+0x330>
 80835a4:	08092c8e 	.word	0x08092c8e
 80835a8:	08092d26 	.word	0x08092d26
 80835ac:	08092dc4 	.word	0x08092dc4
 80835b0:	08092bb4 	.word	0x08092bb4
 80835b4:	08092c63 	.word	0x08092c63
 80835b8:	ffffd8e3 	.word	0xffffd8e3
 80835bc:	08092cc5 	.word	0x08092cc5
 80835c0:	08092ceb 	.word	0x08092ceb
 80835c4:	08092d71 	.word	0x08092d71
        data_page = ((spiffs_page_ix*)((u8_t *)objix + sizeof(spiffs_page_object_ix)))[SPIFFS_OBJ_IX_ENTRY(fs, data_spix)];
 80835c8:	f1a2 012d 	sub.w	r1, r2, #45	; 0x2d
 80835cc:	ebb9 0f51 	cmp.w	r9, r1, lsr #1
 80835d0:	ea4f 0351 	mov.w	r3, r1, lsr #1
 80835d4:	bf21      	itttt	cs
 80835d6:	3a08      	subcs	r2, #8
 80835d8:	eba9 0103 	subcs.w	r1, r9, r3
 80835dc:	0852      	lsrcs	r2, r2, #1
 80835de:	fbb1 f3f2 	udivcs	r3, r1, r2
 80835e2:	bf2c      	ite	cs
 80835e4:	fb02 1313 	mlscs	r3, r2, r3, r1
 80835e8:	f109 0304 	addcc.w	r3, r9, #4
 80835ec:	9a07      	ldr	r2, [sp, #28]
 80835ee:	bf28      	it	cs
 80835f0:	3304      	addcs	r3, #4
 80835f2:	005b      	lsls	r3, r3, #1
 80835f4:	5ad3      	ldrh	r3, [r2, r3]
 80835f6:	e7a8      	b.n	808354a <spiffs_object_append+0x532>
      ((spiffs_page_ix*)((u8_t *)objix + sizeof(spiffs_page_object_ix)))[SPIFFS_OBJ_IX_ENTRY(fs, data_spix)] = data_page;
 80835f8:	69f1      	ldr	r1, [r6, #28]
 80835fa:	f1a1 002d 	sub.w	r0, r1, #45	; 0x2d
 80835fe:	ebb9 0f50 	cmp.w	r9, r0, lsr #1
 8083602:	ea4f 0350 	mov.w	r3, r0, lsr #1
 8083606:	bf21      	itttt	cs
 8083608:	3908      	subcs	r1, #8
 808360a:	eba9 0003 	subcs.w	r0, r9, r3
 808360e:	0849      	lsrcs	r1, r1, #1
 8083610:	fbb0 f3f1 	udivcs	r3, r0, r1
 8083614:	bf2c      	ite	cs
 8083616:	fb01 0313 	mlscs	r3, r1, r3, r0
 808361a:	f109 0304 	addcc.w	r3, r9, #4
 808361e:	9907      	ldr	r1, [sp, #28]
 8083620:	bf28      	it	cs
 8083622:	3304      	addcs	r3, #4
 8083624:	005b      	lsls	r3, r3, #1
 8083626:	52ca      	strh	r2, [r1, r3]
      SPIFFS_DBG("append: "_SPIPRIid" wrote page "_SPIPRIpg" to objix entry "_SPIPRIsp" in mem\n", fd->obj_id
 8083628:	69f3      	ldr	r3, [r6, #28]
 808362a:	88e9      	ldrh	r1, [r5, #6]
 808362c:	f1a3 0c2d 	sub.w	ip, r3, #45	; 0x2d
 8083630:	ebb9 0f5c 	cmp.w	r9, ip, lsr #1
 8083634:	ea4f 005c 	mov.w	r0, ip, lsr #1
 8083638:	bf21      	itttt	cs
 808363a:	3b08      	subcs	r3, #8
 808363c:	eba9 0000 	subcs.w	r0, r9, r0
 8083640:	085b      	lsrcs	r3, r3, #1
 8083642:	fbb0 fcf3 	udivcs	ip, r0, r3
 8083646:	bf2c      	ite	cs
 8083648:	fb03 031c 	mlscs	r3, r3, ip, r0
 808364c:	464b      	movcc	r3, r9
 808364e:	4832      	ldr	r0, [pc, #200]	; (8083718 <spiffs_object_append+0x700>)
 8083650:	bf28      	it	cs
 8083652:	b29b      	uxthcs	r3, r3
 8083654:	f009 fa5c 	bl	808cb10 <spiffsParticleInfoLog>
 8083658:	e690      	b.n	808337c <spiffs_object_append+0x364>
    if (offset == 0) {
 808365a:	f1bb 0f00 	cmp.w	fp, #0
 808365e:	d133      	bne.n	80836c8 <spiffs_object_append+0x6b0>
      objix_hdr->size = offset+written;
 8083660:	9b07      	ldr	r3, [sp, #28]
      SPIFFS_DBG("append: "_SPIPRIid" store fresh objix_hdr page, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", fd->obj_id
 8083662:	482e      	ldr	r0, [pc, #184]	; (808371c <spiffs_object_append+0x704>)
      objix_hdr->size = offset+written;
 8083664:	f8c3 8008 	str.w	r8, [r3, #8]
      SPIFFS_DBG("append: "_SPIPRIid" store fresh objix_hdr page, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", fd->obj_id
 8083668:	88e9      	ldrh	r1, [r5, #6]
 808366a:	465b      	mov	r3, fp
 808366c:	f8cd 8000 	str.w	r8, [sp]
 8083670:	f009 fa4e 	bl	808cb10 <spiffsParticleInfoLog>
      res2 = spiffs_page_index_check(fs, fd, cur_objix_pix, cur_objix_spix);
 8083674:	465b      	mov	r3, fp
 8083676:	4629      	mov	r1, r5
 8083678:	4630      	mov	r0, r6
 808367a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 808367e:	f7fe fb57 	bl	8081d30 <spiffs_page_index_check>
      SPIFFS_CHECK_RES(res2);
 8083682:	2800      	cmp	r0, #0
 8083684:	db45      	blt.n	8083712 <spiffs_object_append+0x6fa>
      res2 = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_UPDT,
 8083686:	69f2      	ldr	r2, [r6, #28]
 8083688:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 808368c:	6933      	ldr	r3, [r6, #16]
 808368e:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 8083690:	fb02 3301 	mla	r3, r2, r1, r3
 8083694:	e9cd 2000 	strd	r2, r0, [sp]
 8083698:	2106      	movs	r1, #6
 808369a:	4630      	mov	r0, r6
 808369c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80836a0:	f7fc fe50 	bl	8080344 <spiffs_phys_wr>
      SPIFFS_CHECK_RES(res2);
 80836a4:	2800      	cmp	r0, #0
 80836a6:	db34      	blt.n	8083712 <spiffs_object_append+0x6fa>
      spiffs_cb_object_event(fs, (spiffs_page_object_ix *)fs->work,
 80836a8:	9b07      	ldr	r3, [sp, #28]
 80836aa:	2204      	movs	r2, #4
 80836ac:	689b      	ldr	r3, [r3, #8]
 80836ae:	4630      	mov	r0, r6
 80836b0:	9302      	str	r3, [sp, #8]
 80836b2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80836b6:	9301      	str	r3, [sp, #4]
 80836b8:	9b07      	ldr	r3, [sp, #28]
 80836ba:	885b      	ldrh	r3, [r3, #2]
 80836bc:	9300      	str	r3, [sp, #0]
 80836be:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 80836c0:	88eb      	ldrh	r3, [r5, #6]
 80836c2:	f7ff f9fd 	bl	8082ac0 <spiffs_cb_object_event>
 80836c6:	e53c      	b.n	8083142 <spiffs_object_append+0x12a>
      res2 = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
 80836c8:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 80836cc:	e9cd 9303 	strd	r9, r3, [sp, #12]
 80836d0:	e9cd 7701 	strd	r7, r7, [sp, #4]
 80836d4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80836d6:	4629      	mov	r1, r5
 80836d8:	4630      	mov	r0, r6
 80836da:	88ea      	ldrh	r2, [r5, #6]
 80836dc:	9300      	str	r3, [sp, #0]
 80836de:	89ab      	ldrh	r3, [r5, #12]
 80836e0:	f7ff fbb0 	bl	8082e44 <spiffs_object_update_index_hdr>
 80836e4:	4606      	mov	r6, r0
      SPIFFS_DBG("append: "_SPIPRIid" store modified objix_hdr page, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", fd->obj_id
 80836e6:	463b      	mov	r3, r7
 80836e8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80836ec:	88e9      	ldrh	r1, [r5, #6]
 80836ee:	480c      	ldr	r0, [pc, #48]	; (8083720 <spiffs_object_append+0x708>)
 80836f0:	f8cd 8000 	str.w	r8, [sp]
 80836f4:	f009 fa0c 	bl	808cb10 <spiffsParticleInfoLog>
      SPIFFS_CHECK_RES(res2);
 80836f8:	ea34 0426 	bics.w	r4, r4, r6, asr #32
 80836fc:	bf28      	it	cs
 80836fe:	4634      	movcs	r4, r6
 8083700:	e51f      	b.n	8083142 <spiffs_object_append+0x12a>
        SPIFFS_VALIDATE_OBJIX(objix_hdr->p_hdr, fd->obj_id, cur_objix_spix);
 8083702:	4c08      	ldr	r4, [pc, #32]	; (8083724 <spiffs_object_append+0x70c>)
 8083704:	e51d      	b.n	8083142 <spiffs_object_append+0x12a>
 8083706:	4c08      	ldr	r4, [pc, #32]	; (8083728 <spiffs_object_append+0x710>)
 8083708:	e51b      	b.n	8083142 <spiffs_object_append+0x12a>
 808370a:	4c08      	ldr	r4, [pc, #32]	; (808372c <spiffs_object_append+0x714>)
 808370c:	e519      	b.n	8083142 <spiffs_object_append+0x12a>
 808370e:	4c08      	ldr	r4, [pc, #32]	; (8083730 <spiffs_object_append+0x718>)
 8083710:	e517      	b.n	8083142 <spiffs_object_append+0x12a>
 8083712:	4604      	mov	r4, r0
 8083714:	e515      	b.n	8083142 <spiffs_object_append+0x12a>
 8083716:	bf00      	nop
 8083718:	08092e01 	.word	0x08092e01
 808371c:	08092ebf 	.word	0x08092ebf
 8083720:	08092eff 	.word	0x08092eff
 8083724:	ffffd8e4 	.word	0xffffd8e4
 8083728:	ffffd8ec 	.word	0xffffd8ec
 808372c:	ffffd8eb 	.word	0xffffd8eb
 8083730:	ffffd8ea 	.word	0xffffd8ea

08083734 <spiffs_object_modify>:
s32_t spiffs_object_modify(spiffs_fd *fd, u32_t offset, u8_t *data, u32_t len) {
 8083734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  spiffs *fs = fd->fs;
 8083738:	6805      	ldr	r5, [r0, #0]
s32_t spiffs_object_modify(spiffs_fd *fd, u32_t offset, u8_t *data, u32_t len) {
 808373a:	b091      	sub	sp, #68	; 0x44
 808373c:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
 8083740:	9109      	str	r1, [sp, #36]	; 0x24
  res = spiffs_gc_check(fs, len + SPIFFS_DATA_PAGE_SIZE(fs));
 8083742:	1f59      	subs	r1, r3, #5
 8083744:	69eb      	ldr	r3, [r5, #28]
s32_t spiffs_object_modify(spiffs_fd *fd, u32_t offset, u8_t *data, u32_t len) {
 8083746:	4606      	mov	r6, r0
  res = spiffs_gc_check(fs, len + SPIFFS_DATA_PAGE_SIZE(fs));
 8083748:	4419      	add	r1, r3
 808374a:	4628      	mov	r0, r5
 808374c:	f7fd fc26 	bl	8080f9c <spiffs_gc_check>
  SPIFFS_CHECK_RES(res);
 8083750:	1e04      	subs	r4, r0, #0
 8083752:	f2c0 8190 	blt.w	8083a76 <spiffs_object_modify+0x342>
  spiffs_page_ix cur_objix_pix = fd->objix_hdr_pix;
 8083756:	89b3      	ldrh	r3, [r6, #12]
  spiffs_span_ix data_spix = offset / SPIFFS_DATA_PAGE_SIZE(fs);
 8083758:	9a09      	ldr	r2, [sp, #36]	; 0x24
  spiffs_page_ix cur_objix_pix = fd->objix_hdr_pix;
 808375a:	9307      	str	r3, [sp, #28]
  spiffs_span_ix data_spix = offset / SPIFFS_DATA_PAGE_SIZE(fs);
 808375c:	69eb      	ldr	r3, [r5, #28]
  spiffs_span_ix cur_objix_spix = 0;
 808375e:	f04f 0700 	mov.w	r7, #0
  spiffs_span_ix data_spix = offset / SPIFFS_DATA_PAGE_SIZE(fs);
 8083762:	f1a3 0305 	sub.w	r3, r3, #5
 8083766:	fbb2 f2f3 	udiv	r2, r2, r3
  u32_t page_offs = offset % SPIFFS_DATA_PAGE_SIZE(fs);
 808376a:	9909      	ldr	r1, [sp, #36]	; 0x24
  spiffs_span_ix prev_objix_spix = (spiffs_span_ix)-1;
 808376c:	f64f 7bff 	movw	fp, #65535	; 0xffff
  u32_t page_offs = offset % SPIFFS_DATA_PAGE_SIZE(fs);
 8083770:	fb03 1312 	mls	r3, r3, r2, r1
  u32_t written = 0;
 8083774:	46b9      	mov	r9, r7
  spiffs_page_object_ix_header *objix_hdr = (spiffs_page_object_ix_header *)fs->work;
 8083776:	f8d5 a038 	ldr.w	sl, [r5, #56]	; 0x38
  spiffs_span_ix data_spix = offset / SPIFFS_DATA_PAGE_SIZE(fs);
 808377a:	fa1f f882 	uxth.w	r8, r2
  u32_t page_offs = offset % SPIFFS_DATA_PAGE_SIZE(fs);
 808377e:	9306      	str	r3, [sp, #24]
  while (res == SPIFFS_OK && written < len) {
 8083780:	f000 8140 	beq.w	8083a04 <spiffs_object_modify+0x2d0>
  fd->offset = offset+written;
 8083784:	9b09      	ldr	r3, [sp, #36]	; 0x24
  fd->cursor_objix_spix = cur_objix_spix;
 8083786:	8237      	strh	r7, [r6, #16]
  fd->offset = offset+written;
 8083788:	444b      	add	r3, r9
 808378a:	6173      	str	r3, [r6, #20]
  fd->cursor_objix_pix = cur_objix_pix;
 808378c:	9b07      	ldr	r3, [sp, #28]
 808378e:	81f3      	strh	r3, [r6, #14]
  if (cur_objix_spix != 0) {
 8083790:	2f00      	cmp	r7, #0
 8083792:	f000 8273 	beq.w	8083c7c <spiffs_object_modify+0x548>
    res2 = spiffs_page_index_check(fs, fd, cur_objix_pix, cur_objix_spix);
 8083796:	463b      	mov	r3, r7
 8083798:	4631      	mov	r1, r6
 808379a:	4628      	mov	r0, r5
 808379c:	9a07      	ldr	r2, [sp, #28]
 808379e:	f7fe fac7 	bl	8081d30 <spiffs_page_index_check>
    SPIFFS_CHECK_RES(res2);
 80837a2:	f1b0 0800 	subs.w	r8, r0, #0
 80837a6:	f2c0 8267 	blt.w	8083c78 <spiffs_object_modify+0x544>
    res2 = spiffs_page_move(fs, fd->file_nbr, (u8_t*)objix, fd->obj_id, 0, cur_objix_pix, &new_objix_pix);
 80837aa:	f04f 0b00 	mov.w	fp, #0
 80837ae:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 80837b2:	9302      	str	r3, [sp, #8]
 80837b4:	9b07      	ldr	r3, [sp, #28]
 80837b6:	4652      	mov	r2, sl
 80837b8:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 80837bc:	9301      	str	r3, [sp, #4]
 80837be:	4628      	mov	r0, r5
 80837c0:	88f3      	ldrh	r3, [r6, #6]
 80837c2:	f8cd b000 	str.w	fp, [sp]
 80837c6:	f7ff f8d7 	bl	8082978 <spiffs_page_move>
 80837ca:	4680      	mov	r8, r0
    SPIFFS_DBG("modify: store modified objix page, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", new_objix_pix, cur_objix_spix, written);
 80837cc:	464b      	mov	r3, r9
 80837ce:	463a      	mov	r2, r7
 80837d0:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 80837d4:	48be      	ldr	r0, [pc, #760]	; (8083ad0 <spiffs_object_modify+0x39c>)
 80837d6:	f009 f99b 	bl	808cb10 <spiffsParticleInfoLog>
    fd->cursor_objix_pix = new_objix_pix;
 80837da:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    SPIFFS_CHECK_RES(res2);
 80837de:	45d8      	cmp	r8, fp
    fd->cursor_objix_pix = new_objix_pix;
 80837e0:	81f3      	strh	r3, [r6, #14]
    fd->cursor_objix_spix = cur_objix_spix;
 80837e2:	8237      	strh	r7, [r6, #16]
    SPIFFS_CHECK_RES(res2);
 80837e4:	f2c0 8248 	blt.w	8083c78 <spiffs_object_modify+0x544>
    spiffs_cb_object_event(fs, (spiffs_page_object_ix *)objix,
 80837e8:	e9cd 3b01 	strd	r3, fp, [sp, #4]
 80837ec:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 80837f0:	465a      	mov	r2, fp
 80837f2:	9300      	str	r3, [sp, #0]
 80837f4:	4651      	mov	r1, sl
 80837f6:	4628      	mov	r0, r5
 80837f8:	88f3      	ldrh	r3, [r6, #6]
 80837fa:	f7ff f961 	bl	8082ac0 <spiffs_cb_object_event>
 80837fe:	e13a      	b.n	8083a76 <spiffs_object_modify+0x342>
          res = spiffs_page_index_check(fs, fd, cur_objix_pix, prev_objix_spix);
 8083800:	465b      	mov	r3, fp
 8083802:	4631      	mov	r1, r6
 8083804:	4628      	mov	r0, r5
 8083806:	9a07      	ldr	r2, [sp, #28]
 8083808:	f7fe fa92 	bl	8081d30 <spiffs_page_index_check>
          SPIFFS_CHECK_RES(res);
 808380c:	1e04      	subs	r4, r0, #0
 808380e:	f2c0 8132 	blt.w	8083a76 <spiffs_object_modify+0x342>
          res = spiffs_page_move(fs, fd->file_nbr, (u8_t*)objix, fd->obj_id, 0, cur_objix_pix, &new_objix_pix);
 8083812:	f04f 0b00 	mov.w	fp, #0
 8083816:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 808381a:	9302      	str	r3, [sp, #8]
 808381c:	9b07      	ldr	r3, [sp, #28]
 808381e:	4652      	mov	r2, sl
 8083820:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 8083824:	9301      	str	r3, [sp, #4]
 8083826:	4628      	mov	r0, r5
 8083828:	88f3      	ldrh	r3, [r6, #6]
 808382a:	f8cd b000 	str.w	fp, [sp]
 808382e:	f7ff f8a3 	bl	8082978 <spiffs_page_move>
 8083832:	4604      	mov	r4, r0
          SPIFFS_DBG("modify: store previous modified objix page, "_SPIPRIid":"_SPIPRIsp", written "_SPIPRIi"\n", new_objix_pix, objix->p_hdr.span_ix, written);
 8083834:	464b      	mov	r3, r9
 8083836:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 808383a:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 808383e:	48a5      	ldr	r0, [pc, #660]	; (8083ad4 <spiffs_object_modify+0x3a0>)
 8083840:	f009 f966 	bl	808cb10 <spiffsParticleInfoLog>
          SPIFFS_CHECK_RES(res);
 8083844:	455c      	cmp	r4, fp
 8083846:	f2c0 8116 	blt.w	8083a76 <spiffs_object_modify+0x342>
          spiffs_cb_object_event(fs, (spiffs_page_object_ix *)objix,
 808384a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 808384e:	f8cd b008 	str.w	fp, [sp, #8]
 8083852:	9301      	str	r3, [sp, #4]
 8083854:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8083858:	465a      	mov	r2, fp
 808385a:	9300      	str	r3, [sp, #0]
 808385c:	4651      	mov	r1, sl
 808385e:	4628      	mov	r0, r5
 8083860:	88f3      	ldrh	r3, [r6, #6]
 8083862:	f7ff f92d 	bl	8082ac0 <spiffs_cb_object_event>
      if (cur_objix_spix == 0) {
 8083866:	bb77      	cbnz	r7, 80838c6 <spiffs_object_modify+0x192>
        SPIFFS_DBG("modify: load objixhdr page "_SPIPRIpg":"_SPIPRIsp"\n", cur_objix_pix, cur_objix_spix);
 8083868:	463a      	mov	r2, r7
 808386a:	9907      	ldr	r1, [sp, #28]
 808386c:	489a      	ldr	r0, [pc, #616]	; (8083ad8 <spiffs_object_modify+0x3a4>)
 808386e:	f009 f94f 	bl	808cb10 <spiffsParticleInfoLog>
        res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ,
 8083872:	69eb      	ldr	r3, [r5, #28]
 8083874:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8083876:	692a      	ldr	r2, [r5, #16]
 8083878:	e9cd 3100 	strd	r3, r1, [sp]
 808387c:	9907      	ldr	r1, [sp, #28]
 808387e:	4628      	mov	r0, r5
 8083880:	fb03 2301 	mla	r3, r3, r1, r2
 8083884:	2116      	movs	r1, #22
 8083886:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
 808388a:	f7fc fccf 	bl	808022c <spiffs_phys_rd>
        SPIFFS_CHECK_RES(res);
 808388e:	1e04      	subs	r4, r0, #0
 8083890:	f2c0 80f1 	blt.w	8083a76 <spiffs_object_modify+0x342>
        SPIFFS_VALIDATE_OBJIX(objix_hdr->p_hdr, fd->obj_id, cur_objix_spix);
 8083894:	f89a 3004 	ldrb.w	r3, [sl, #4]
 8083898:	07d8      	lsls	r0, r3, #31
 808389a:	f100 820a 	bmi.w	8083cb2 <spiffs_object_modify+0x57e>
 808389e:	0619      	lsls	r1, r3, #24
 80838a0:	f140 8209 	bpl.w	8083cb6 <spiffs_object_modify+0x582>
 80838a4:	079a      	lsls	r2, r3, #30
 80838a6:	f100 8208 	bmi.w	8083cba <spiffs_object_modify+0x586>
 80838aa:	075c      	lsls	r4, r3, #29
 80838ac:	f100 8207 	bmi.w	8083cbe <spiffs_object_modify+0x58a>
 80838b0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80838b4:	2b00      	cmp	r3, #0
 80838b6:	f280 8202 	bge.w	8083cbe <spiffs_object_modify+0x58a>
 80838ba:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 80838be:	2b00      	cmp	r3, #0
 80838c0:	d03d      	beq.n	808393e <spiffs_object_modify+0x20a>
 80838c2:	4c86      	ldr	r4, [pc, #536]	; (8083adc <spiffs_object_modify+0x3a8>)
 80838c4:	e0d7      	b.n	8083a76 <spiffs_object_modify+0x342>
        SPIFFS_DBG("modify: find objix span_ix:"_SPIPRIsp"\n", cur_objix_spix);
 80838c6:	4639      	mov	r1, r7
 80838c8:	4885      	ldr	r0, [pc, #532]	; (8083ae0 <spiffs_object_modify+0x3ac>)
 80838ca:	f009 f921 	bl	808cb10 <spiffsParticleInfoLog>
        if (fd->cursor_objix_spix == cur_objix_spix) {
 80838ce:	8a33      	ldrh	r3, [r6, #16]
 80838d0:	42bb      	cmp	r3, r7
 80838d2:	f040 80d4 	bne.w	8083a7e <spiffs_object_modify+0x34a>
          pix = fd->cursor_objix_pix;
 80838d6:	89f3      	ldrh	r3, [r6, #14]
 80838d8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        SPIFFS_DBG("modify: found object index at page "_SPIPRIpg"\n", pix);
 80838dc:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 80838e0:	4880      	ldr	r0, [pc, #512]	; (8083ae4 <spiffs_object_modify+0x3b0>)
 80838e2:	f009 f915 	bl	808cb10 <spiffsParticleInfoLog>
        res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ,
 80838e6:	69ea      	ldr	r2, [r5, #28]
 80838e8:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 80838ec:	692b      	ldr	r3, [r5, #16]
 80838ee:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80838f0:	fb02 3301 	mla	r3, r2, r1, r3
 80838f4:	e9cd 2000 	strd	r2, r0, [sp]
 80838f8:	2116      	movs	r1, #22
 80838fa:	4628      	mov	r0, r5
 80838fc:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
 8083900:	f7fc fc94 	bl	808022c <spiffs_phys_rd>
        SPIFFS_CHECK_RES(res);
 8083904:	1e04      	subs	r4, r0, #0
 8083906:	f2c0 80b6 	blt.w	8083a76 <spiffs_object_modify+0x342>
        SPIFFS_VALIDATE_OBJIX(objix_hdr->p_hdr, fd->obj_id, cur_objix_spix);
 808390a:	f89a 3004 	ldrb.w	r3, [sl, #4]
 808390e:	07d8      	lsls	r0, r3, #31
 8083910:	f100 81cf 	bmi.w	8083cb2 <spiffs_object_modify+0x57e>
 8083914:	0619      	lsls	r1, r3, #24
 8083916:	f140 81ce 	bpl.w	8083cb6 <spiffs_object_modify+0x582>
 808391a:	079a      	lsls	r2, r3, #30
 808391c:	f100 81cd 	bmi.w	8083cba <spiffs_object_modify+0x586>
 8083920:	075b      	lsls	r3, r3, #29
 8083922:	f100 81cc 	bmi.w	8083cbe <spiffs_object_modify+0x58a>
 8083926:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 808392a:	2b00      	cmp	r3, #0
 808392c:	f280 81c7 	bge.w	8083cbe <spiffs_object_modify+0x58a>
 8083930:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8083934:	42bb      	cmp	r3, r7
 8083936:	d1c4      	bne.n	80838c2 <spiffs_object_modify+0x18e>
        cur_objix_pix = pix;
 8083938:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 808393c:	9307      	str	r3, [sp, #28]
      fd->cursor_objix_pix = cur_objix_pix;
 808393e:	9b07      	ldr	r3, [sp, #28]
      fd->cursor_objix_spix = cur_objix_spix;
 8083940:	8237      	strh	r7, [r6, #16]
      fd->cursor_objix_pix = cur_objix_pix;
 8083942:	81f3      	strh	r3, [r6, #14]
      fd->offset = offset+written;
 8083944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8083946:	444b      	add	r3, r9
 8083948:	6173      	str	r3, [r6, #20]
    u32_t to_write = MIN(len-written, SPIFFS_DATA_PAGE_SIZE(fs) - page_offs);
 808394a:	69e9      	ldr	r1, [r5, #28]
 808394c:	9b06      	ldr	r3, [sp, #24]
 808394e:	1f4a      	subs	r2, r1, #5
 8083950:	1ad0      	subs	r0, r2, r3
 8083952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8083954:	eba3 0309 	sub.w	r3, r3, r9
 8083958:	4298      	cmp	r0, r3
 808395a:	bf28      	it	cs
 808395c:	4618      	movcs	r0, r3
 808395e:	9008      	str	r0, [sp, #32]
    if (cur_objix_spix == 0) {
 8083960:	2f00      	cmp	r7, #0
 8083962:	f040 809e 	bne.w	8083aa2 <spiffs_object_modify+0x36e>
      orig_data_pix = ((spiffs_page_ix*)((u8_t *)objix_hdr + sizeof(spiffs_page_object_ix_header)))[data_spix];
 8083966:	eb0a 0348 	add.w	r3, sl, r8, lsl #1
 808396a:	f8b3 b02d 	ldrh.w	fp, [r3, #45]	; 0x2d
    p_hdr.flags = 0xff;
 808396e:	23ff      	movs	r3, #255	; 0xff
    p_hdr.obj_id = fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG;
 8083970:	88f1      	ldrh	r1, [r6, #6]
    p_hdr.flags = 0xff;
 8083972:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
    if (page_offs == 0 && to_write == SPIFFS_DATA_PAGE_SIZE(fs)) {
 8083976:	9b06      	ldr	r3, [sp, #24]
    p_hdr.obj_id = fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG;
 8083978:	f3c1 010e 	ubfx	r1, r1, #0, #15
 808397c:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
    p_hdr.span_ix = data_spix;
 8083980:	f8ad 803a 	strh.w	r8, [sp, #58]	; 0x3a
    if (page_offs == 0 && to_write == SPIFFS_DATA_PAGE_SIZE(fs)) {
 8083984:	2b00      	cmp	r3, #0
 8083986:	f040 80b5 	bne.w	8083af4 <spiffs_object_modify+0x3c0>
 808398a:	9b08      	ldr	r3, [sp, #32]
 808398c:	429a      	cmp	r2, r3
 808398e:	f040 80b1 	bne.w	8083af4 <spiffs_object_modify+0x3c0>
      res = spiffs_page_allocate_data(fs, fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG,
 8083992:	ab0d      	add	r3, sp, #52	; 0x34
 8083994:	9303      	str	r3, [sp, #12]
 8083996:	2301      	movs	r3, #1
 8083998:	9302      	str	r3, [sp, #8]
 808399a:	9b06      	ldr	r3, [sp, #24]
 808399c:	aa0e      	add	r2, sp, #56	; 0x38
 808399e:	9301      	str	r3, [sp, #4]
 80839a0:	9b08      	ldr	r3, [sp, #32]
 80839a2:	4628      	mov	r0, r5
 80839a4:	9300      	str	r3, [sp, #0]
 80839a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80839a8:	444b      	add	r3, r9
 80839aa:	f7fe fee7 	bl	808277c <spiffs_page_allocate_data>
      SPIFFS_DBG("modify: store new data page, "_SPIPRIpg":"_SPIPRIsp" offset:"_SPIPRIi", len "_SPIPRIi", written "_SPIPRIi"\n", data_pix, data_spix, page_offs, to_write, written);
 80839ae:	9b08      	ldr	r3, [sp, #32]
 80839b0:	4642      	mov	r2, r8
 80839b2:	9300      	str	r3, [sp, #0]
 80839b4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80839b8:	9b06      	ldr	r3, [sp, #24]
 80839ba:	484b      	ldr	r0, [pc, #300]	; (8083ae8 <spiffs_object_modify+0x3b4>)
 80839bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80839c0:	f009 f8a6 	bl	808cb10 <spiffsParticleInfoLog>
    res = spiffs_page_delete(fs, orig_data_pix);
 80839c4:	4659      	mov	r1, fp
 80839c6:	4628      	mov	r0, r5
 80839c8:	f7fe ff92 	bl	80828f0 <spiffs_page_delete>
    if (res != SPIFFS_OK) break;
 80839cc:	4604      	mov	r4, r0
 80839ce:	2800      	cmp	r0, #0
 80839d0:	f47f aed8 	bne.w	8083784 <spiffs_object_modify+0x50>
    if (cur_objix_spix == 0) {
 80839d4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80839d8:	2f00      	cmp	r7, #0
 80839da:	f040 8120 	bne.w	8083c1e <spiffs_object_modify+0x4ea>
      SPIFFS_DBG("modify: wrote page "_SPIPRIpg" to objix_hdr entry "_SPIPRIsp" in mem\n", data_pix, data_spix);
 80839de:	4642      	mov	r2, r8
      ((spiffs_page_ix*)((u8_t *)objix_hdr + sizeof(spiffs_page_object_ix_header)))[data_spix] = data_pix;
 80839e0:	eb0a 0348 	add.w	r3, sl, r8, lsl #1
 80839e4:	f8a3 102d 	strh.w	r1, [r3, #45]	; 0x2d
      SPIFFS_DBG("modify: wrote page "_SPIPRIpg" to objix_hdr entry "_SPIPRIsp" in mem\n", data_pix, data_spix);
 80839e8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80839ec:	483f      	ldr	r0, [pc, #252]	; (8083aec <spiffs_object_modify+0x3b8>)
      SPIFFS_DBG("modify: wrote page "_SPIPRIpg" to objix entry "_SPIPRIsp" in mem\n", data_pix, (spiffs_span_ix)SPIFFS_OBJ_IX_ENTRY(fs, data_spix));
 80839ee:	f009 f88f 	bl	808cb10 <spiffsParticleInfoLog>
    written += to_write;
 80839f2:	9b08      	ldr	r3, [sp, #32]
 80839f4:	46bb      	mov	fp, r7
 80839f6:	4499      	add	r9, r3
    page_offs = 0;
 80839f8:	2300      	movs	r3, #0
    data_spix++;
 80839fa:	f108 0801 	add.w	r8, r8, #1
 80839fe:	fa1f f888 	uxth.w	r8, r8
    page_offs = 0;
 8083a02:	9306      	str	r3, [sp, #24]
  while (res == SPIFFS_OK && written < len) {
 8083a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8083a06:	4599      	cmp	r9, r3
 8083a08:	f4bf aebc 	bcs.w	8083784 <spiffs_object_modify+0x50>
    cur_objix_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, data_spix);
 8083a0c:	69eb      	ldr	r3, [r5, #28]
 8083a0e:	f1a3 022d 	sub.w	r2, r3, #45	; 0x2d
 8083a12:	ebb8 0f52 	cmp.w	r8, r2, lsr #1
 8083a16:	ea4f 0752 	mov.w	r7, r2, lsr #1
 8083a1a:	bf21      	itttt	cs
 8083a1c:	3b08      	subcs	r3, #8
 8083a1e:	eba8 0707 	subcs.w	r7, r8, r7
 8083a22:	085b      	lsrcs	r3, r3, #1
 8083a24:	fbb7 f7f3 	udivcs	r7, r7, r3
 8083a28:	bf32      	itee	cc
 8083a2a:	2700      	movcc	r7, #0
 8083a2c:	3701      	addcs	r7, #1
 8083a2e:	b2bf      	uxthcs	r7, r7
    if (cur_objix_spix != prev_objix_spix) {
 8083a30:	45bb      	cmp	fp, r7
 8083a32:	d08a      	beq.n	808394a <spiffs_object_modify+0x216>
      if (written > 0) {
 8083a34:	f1b9 0f00 	cmp.w	r9, #0
 8083a38:	f43f af15 	beq.w	8083866 <spiffs_object_modify+0x132>
        if (prev_objix_spix == 0) {
 8083a3c:	f1bb 0f00 	cmp.w	fp, #0
 8083a40:	f47f aede 	bne.w	8083800 <spiffs_object_modify+0xcc>
          res = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
 8083a44:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8083a48:	e9cd b303 	strd	fp, r3, [sp, #12]
 8083a4c:	e9cd bb01 	strd	fp, fp, [sp, #4]
 8083a50:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8083a52:	4631      	mov	r1, r6
 8083a54:	88f2      	ldrh	r2, [r6, #6]
 8083a56:	9300      	str	r3, [sp, #0]
 8083a58:	4628      	mov	r0, r5
 8083a5a:	89b3      	ldrh	r3, [r6, #12]
 8083a5c:	f7ff f9f2 	bl	8082e44 <spiffs_object_update_index_hdr>
 8083a60:	4604      	mov	r4, r0
          SPIFFS_DBG("modify: store modified objix_hdr page, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", new_objix_hdr_pix, 0, written);
 8083a62:	464b      	mov	r3, r9
 8083a64:	465a      	mov	r2, fp
 8083a66:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8083a6a:	4821      	ldr	r0, [pc, #132]	; (8083af0 <spiffs_object_modify+0x3bc>)
 8083a6c:	f009 f850 	bl	808cb10 <spiffsParticleInfoLog>
          SPIFFS_CHECK_RES(res);
 8083a70:	2c00      	cmp	r4, #0
 8083a72:	f6bf aef8 	bge.w	8083866 <spiffs_object_modify+0x132>
} // spiffs_object_modify
 8083a76:	4620      	mov	r0, r4
 8083a78:	b011      	add	sp, #68	; 0x44
 8083a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          res = spiffs_obj_lu_find_id_and_span(fs, fd->obj_id | SPIFFS_OBJ_ID_IX_FLAG, cur_objix_spix, 0, &pix);
 8083a7e:	88f1      	ldrh	r1, [r6, #6]
 8083a80:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8083a84:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8083a88:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8083a8c:	9300      	str	r3, [sp, #0]
 8083a8e:	463a      	mov	r2, r7
 8083a90:	2300      	movs	r3, #0
 8083a92:	4628      	mov	r0, r5
 8083a94:	b289      	uxth	r1, r1
 8083a96:	f7fe fe2b 	bl	80826f0 <spiffs_obj_lu_find_id_and_span>
          SPIFFS_CHECK_RES(res);
 8083a9a:	1e04      	subs	r4, r0, #0
 8083a9c:	f6bf af1e 	bge.w	80838dc <spiffs_object_modify+0x1a8>
 8083aa0:	e7e9      	b.n	8083a76 <spiffs_object_modify+0x342>
      orig_data_pix = ((spiffs_page_ix*)((u8_t *)objix + sizeof(spiffs_page_object_ix)))[SPIFFS_OBJ_IX_ENTRY(fs, data_spix)];
 8083aa2:	f1a1 002d 	sub.w	r0, r1, #45	; 0x2d
 8083aa6:	ebb8 0f50 	cmp.w	r8, r0, lsr #1
 8083aaa:	ea4f 0350 	mov.w	r3, r0, lsr #1
 8083aae:	bf21      	itttt	cs
 8083ab0:	3908      	subcs	r1, #8
 8083ab2:	eba8 0003 	subcs.w	r0, r8, r3
 8083ab6:	0849      	lsrcs	r1, r1, #1
 8083ab8:	fbb0 f3f1 	udivcs	r3, r0, r1
 8083abc:	bf2a      	itet	cs
 8083abe:	fb01 0313 	mlscs	r3, r1, r3, r0
 8083ac2:	f108 0304 	addcc.w	r3, r8, #4
 8083ac6:	3304      	addcs	r3, #4
 8083ac8:	005b      	lsls	r3, r3, #1
 8083aca:	f83a b003 	ldrh.w	fp, [sl, r3]
 8083ace:	e74e      	b.n	808396e <spiffs_object_modify+0x23a>
 8083ad0:	08093141 	.word	0x08093141
 8083ad4:	08092f80 	.word	0x08092f80
 8083ad8:	08092fc3 	.word	0x08092fc3
 8083adc:	ffffd8e3 	.word	0xffffd8e3
 8083ae0:	08092fe9 	.word	0x08092fe9
 8083ae4:	0809300a 	.word	0x0809300a
 8083ae8:	08093033 	.word	0x08093033
 8083aec:	080930d5 	.word	0x080930d5
 8083af0:	08092f42 	.word	0x08092f42
      res = spiffs_page_data_check(fs, fd, orig_data_pix, data_spix);
 8083af4:	4643      	mov	r3, r8
 8083af6:	465a      	mov	r2, fp
 8083af8:	4628      	mov	r0, r5
 8083afa:	1d31      	adds	r1, r6, #4
 8083afc:	f7fe fa3c 	bl	8081f78 <spiffs_page_data_check.isra.0>
      SPIFFS_CHECK_RES(res);
 8083b00:	1e04      	subs	r4, r0, #0
 8083b02:	dbb8      	blt.n	8083a76 <spiffs_object_modify+0x342>
      res = spiffs_page_allocate_data(fs, fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG,
 8083b04:	ab0d      	add	r3, sp, #52	; 0x34
 8083b06:	9303      	str	r3, [sp, #12]
 8083b08:	2300      	movs	r3, #0
 8083b0a:	88f1      	ldrh	r1, [r6, #6]
 8083b0c:	4628      	mov	r0, r5
 8083b0e:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8083b12:	9300      	str	r3, [sp, #0]
 8083b14:	aa0e      	add	r2, sp, #56	; 0x38
 8083b16:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8083b1a:	f7fe fe2f 	bl	808277c <spiffs_page_allocate_data>
      if (res != SPIFFS_OK) break;
 8083b1e:	4604      	mov	r4, r0
 8083b20:	2800      	cmp	r0, #0
 8083b22:	f47f ae2f 	bne.w	8083784 <spiffs_object_modify+0x50>
      if (page_offs > 0) {
 8083b26:	9b06      	ldr	r3, [sp, #24]
 8083b28:	2b00      	cmp	r3, #0
 8083b2a:	d148      	bne.n	8083bbe <spiffs_object_modify+0x48a>
      if (page_offs + to_write < SPIFFS_DATA_PAGE_SIZE(fs)) {
 8083b2c:	9b06      	ldr	r3, [sp, #24]
 8083b2e:	9a08      	ldr	r2, [sp, #32]
 8083b30:	69e8      	ldr	r0, [r5, #28]
 8083b32:	189c      	adds	r4, r3, r2
 8083b34:	f1a0 0e05 	sub.w	lr, r0, #5
 8083b38:	4574      	cmp	r4, lr
 8083b3a:	d354      	bcc.n	8083be6 <spiffs_object_modify+0x4b2>
      res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
 8083b3c:	692a      	ldr	r2, [r5, #16]
 8083b3e:	69e9      	ldr	r1, [r5, #28]
 8083b40:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8083b44:	3205      	adds	r2, #5
 8083b46:	fb01 2303 	mla	r3, r1, r3, r2
 8083b4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8083b4c:	2107      	movs	r1, #7
 8083b4e:	444a      	add	r2, r9
 8083b50:	9201      	str	r2, [sp, #4]
 8083b52:	9a08      	ldr	r2, [sp, #32]
 8083b54:	4628      	mov	r0, r5
 8083b56:	9200      	str	r2, [sp, #0]
 8083b58:	9a06      	ldr	r2, [sp, #24]
 8083b5a:	4413      	add	r3, r2
 8083b5c:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
 8083b60:	f7fc fbf0 	bl	8080344 <spiffs_phys_wr>
      if (res != SPIFFS_OK) break;
 8083b64:	4604      	mov	r4, r0
 8083b66:	2800      	cmp	r0, #0
 8083b68:	f47f ae0c 	bne.w	8083784 <spiffs_object_modify+0x50>
      res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
 8083b6c:	a80f      	add	r0, sp, #60	; 0x3c
 8083b6e:	69e9      	ldr	r1, [r5, #28]
 8083b70:	692a      	ldr	r2, [r5, #16]
 8083b72:	9001      	str	r0, [sp, #4]
 8083b74:	2001      	movs	r0, #1
      p_hdr.flags &= ~SPIFFS_PH_FLAG_FINAL;
 8083b76:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
      res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
 8083b7a:	3204      	adds	r2, #4
      p_hdr.flags &= ~SPIFFS_PH_FLAG_FINAL;
 8083b7c:	f023 0302 	bic.w	r3, r3, #2
 8083b80:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
      res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
 8083b84:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8083b88:	9000      	str	r0, [sp, #0]
 8083b8a:	fb01 2303 	mla	r3, r1, r3, r2
 8083b8e:	4628      	mov	r0, r5
 8083b90:	2107      	movs	r1, #7
 8083b92:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
 8083b96:	f7fc fbd5 	bl	8080344 <spiffs_phys_wr>
      if (res != SPIFFS_OK) break;
 8083b9a:	4604      	mov	r4, r0
 8083b9c:	2800      	cmp	r0, #0
 8083b9e:	f47f adf1 	bne.w	8083784 <spiffs_object_modify+0x50>
      SPIFFS_DBG("modify: store to existing data page, src:"_SPIPRIpg", dst:"_SPIPRIpg":"_SPIPRIsp" offset:"_SPIPRIi", len "_SPIPRIi", written "_SPIPRIi"\n", orig_data_pix, data_pix, data_spix, page_offs, to_write, written);
 8083ba2:	9b08      	ldr	r3, [sp, #32]
 8083ba4:	4659      	mov	r1, fp
 8083ba6:	9301      	str	r3, [sp, #4]
 8083ba8:	9b06      	ldr	r3, [sp, #24]
 8083baa:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8083bae:	9300      	str	r3, [sp, #0]
 8083bb0:	4844      	ldr	r0, [pc, #272]	; (8083cc4 <spiffs_object_modify+0x590>)
 8083bb2:	4643      	mov	r3, r8
 8083bb4:	f8cd 9008 	str.w	r9, [sp, #8]
 8083bb8:	f008 ffaa 	bl	808cb10 <spiffsParticleInfoLog>
 8083bbc:	e702      	b.n	80839c4 <spiffs_object_modify+0x290>
 8083bbe:	6929      	ldr	r1, [r5, #16]
 8083bc0:	69ea      	ldr	r2, [r5, #28]
        res = spiffs_phys_cpy(fs, fd->file_nbr,
 8083bc2:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8083bc6:	9b06      	ldr	r3, [sp, #24]
 8083bc8:	3105      	adds	r1, #5
 8083bca:	9300      	str	r3, [sp, #0]
 8083bcc:	fb02 130b 	mla	r3, r2, fp, r1
 8083bd0:	fb02 1200 	mla	r2, r2, r0, r1
 8083bd4:	4628      	mov	r0, r5
 8083bd6:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 8083bda:	f7fe faff 	bl	80821dc <spiffs_phys_cpy>
        if (res != SPIFFS_OK) break;
 8083bde:	4604      	mov	r4, r0
 8083be0:	2800      	cmp	r0, #0
 8083be2:	d0a3      	beq.n	8083b2c <spiffs_object_modify+0x3f8>
 8083be4:	e5ce      	b.n	8083784 <spiffs_object_modify+0x50>
 8083be6:	692a      	ldr	r2, [r5, #16]
        res = spiffs_phys_cpy(fs, fd->file_nbr,
 8083be8:	9b06      	ldr	r3, [sp, #24]
 8083bea:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 8083bee:	3205      	adds	r2, #5
 8083bf0:	9908      	ldr	r1, [sp, #32]
 8083bf2:	4413      	add	r3, r2
 8083bf4:	fb00 220c 	mla	r2, r0, ip, r2
 8083bf8:	440b      	add	r3, r1
 8083bfa:	9906      	ldr	r1, [sp, #24]
 8083bfc:	fb00 330b 	mla	r3, r0, fp, r3
 8083c00:	440a      	add	r2, r1
 8083c02:	ebae 0104 	sub.w	r1, lr, r4
 8083c06:	9100      	str	r1, [sp, #0]
 8083c08:	9908      	ldr	r1, [sp, #32]
 8083c0a:	4628      	mov	r0, r5
 8083c0c:	440a      	add	r2, r1
 8083c0e:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 8083c12:	f7fe fae3 	bl	80821dc <spiffs_phys_cpy>
        if (res != SPIFFS_OK) break;
 8083c16:	4604      	mov	r4, r0
 8083c18:	2800      	cmp	r0, #0
 8083c1a:	d08f      	beq.n	8083b3c <spiffs_object_modify+0x408>
 8083c1c:	e5b2      	b.n	8083784 <spiffs_object_modify+0x50>
      ((spiffs_page_ix*)((u8_t *)objix + sizeof(spiffs_page_object_ix)))[SPIFFS_OBJ_IX_ENTRY(fs, data_spix)] = data_pix;
 8083c1e:	69ea      	ldr	r2, [r5, #28]
 8083c20:	f1a2 002d 	sub.w	r0, r2, #45	; 0x2d
 8083c24:	ebb8 0f50 	cmp.w	r8, r0, lsr #1
 8083c28:	ea4f 0350 	mov.w	r3, r0, lsr #1
 8083c2c:	bf21      	itttt	cs
 8083c2e:	3a08      	subcs	r2, #8
 8083c30:	eba8 0003 	subcs.w	r0, r8, r3
 8083c34:	0852      	lsrcs	r2, r2, #1
 8083c36:	fbb0 f3f2 	udivcs	r3, r0, r2
 8083c3a:	bf2a      	itet	cs
 8083c3c:	fb02 0313 	mlscs	r3, r2, r3, r0
 8083c40:	f108 0304 	addcc.w	r3, r8, #4
 8083c44:	3304      	addcs	r3, #4
 8083c46:	005b      	lsls	r3, r3, #1
 8083c48:	f82a 1003 	strh.w	r1, [sl, r3]
      SPIFFS_DBG("modify: wrote page "_SPIPRIpg" to objix entry "_SPIPRIsp" in mem\n", data_pix, (spiffs_span_ix)SPIFFS_OBJ_IX_ENTRY(fs, data_spix));
 8083c4c:	69ea      	ldr	r2, [r5, #28]
 8083c4e:	f1a2 032d 	sub.w	r3, r2, #45	; 0x2d
 8083c52:	ebb8 0f53 	cmp.w	r8, r3, lsr #1
 8083c56:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8083c5a:	bf21      	itttt	cs
 8083c5c:	3a08      	subcs	r2, #8
 8083c5e:	eba8 0000 	subcs.w	r0, r8, r0
 8083c62:	0852      	lsrcs	r2, r2, #1
 8083c64:	fbb0 f3f2 	udivcs	r3, r0, r2
 8083c68:	bf2c      	ite	cs
 8083c6a:	fb02 0213 	mlscs	r2, r2, r3, r0
 8083c6e:	4642      	movcc	r2, r8
 8083c70:	4815      	ldr	r0, [pc, #84]	; (8083cc8 <spiffs_object_modify+0x594>)
 8083c72:	bf28      	it	cs
 8083c74:	b292      	uxthcs	r2, r2
 8083c76:	e6ba      	b.n	80839ee <spiffs_object_modify+0x2ba>
    SPIFFS_CHECK_RES(res2);
 8083c78:	4644      	mov	r4, r8
 8083c7a:	e6fc      	b.n	8083a76 <spiffs_object_modify+0x342>
    res2 = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
 8083c7c:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8083c80:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8083c84:	e9cd 7701 	strd	r7, r7, [sp, #4]
 8083c88:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8083c8a:	4631      	mov	r1, r6
 8083c8c:	4628      	mov	r0, r5
 8083c8e:	88f2      	ldrh	r2, [r6, #6]
 8083c90:	9300      	str	r3, [sp, #0]
 8083c92:	89b3      	ldrh	r3, [r6, #12]
 8083c94:	f7ff f8d6 	bl	8082e44 <spiffs_object_update_index_hdr>
 8083c98:	4605      	mov	r5, r0
    SPIFFS_DBG("modify: store modified objix_hdr page, "_SPIPRIpg":"_SPIPRIsp", written "_SPIPRIi"\n", new_objix_hdr_pix, 0, written);
 8083c9a:	464b      	mov	r3, r9
 8083c9c:	463a      	mov	r2, r7
 8083c9e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8083ca2:	480a      	ldr	r0, [pc, #40]	; (8083ccc <spiffs_object_modify+0x598>)
 8083ca4:	f008 ff34 	bl	808cb10 <spiffsParticleInfoLog>
    SPIFFS_CHECK_RES(res2);
 8083ca8:	ea34 0425 	bics.w	r4, r4, r5, asr #32
 8083cac:	bf28      	it	cs
 8083cae:	462c      	movcs	r4, r5
 8083cb0:	e6e1      	b.n	8083a76 <spiffs_object_modify+0x342>
        SPIFFS_VALIDATE_OBJIX(objix_hdr->p_hdr, fd->obj_id, cur_objix_spix);
 8083cb2:	4c07      	ldr	r4, [pc, #28]	; (8083cd0 <spiffs_object_modify+0x59c>)
 8083cb4:	e6df      	b.n	8083a76 <spiffs_object_modify+0x342>
 8083cb6:	4c07      	ldr	r4, [pc, #28]	; (8083cd4 <spiffs_object_modify+0x5a0>)
 8083cb8:	e6dd      	b.n	8083a76 <spiffs_object_modify+0x342>
 8083cba:	4c07      	ldr	r4, [pc, #28]	; (8083cd8 <spiffs_object_modify+0x5a4>)
 8083cbc:	e6db      	b.n	8083a76 <spiffs_object_modify+0x342>
 8083cbe:	4c07      	ldr	r4, [pc, #28]	; (8083cdc <spiffs_object_modify+0x5a8>)
 8083cc0:	e6d9      	b.n	8083a76 <spiffs_object_modify+0x342>
 8083cc2:	bf00      	nop
 8083cc4:	08093079 	.word	0x08093079
 8083cc8:	0809310d 	.word	0x0809310d
 8083ccc:	08092f42 	.word	0x08092f42
 8083cd0:	ffffd8e4 	.word	0xffffd8e4
 8083cd4:	ffffd8ec 	.word	0xffffd8ec
 8083cd8:	ffffd8eb 	.word	0xffffd8eb
 8083cdc:	ffffd8ea 	.word	0xffffd8ea

08083ce0 <spiffs_object_find_object_index_header_by_name>:
    spiffs_page_ix *pix) {
 8083ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8083ce2:	b089      	sub	sp, #36	; 0x24
  res = spiffs_obj_lu_find_entry_visitor(fs,
 8083ce4:	ab07      	add	r3, sp, #28
 8083ce6:	9305      	str	r3, [sp, #20]
 8083ce8:	f10d 031a 	add.w	r3, sp, #26
 8083cec:	9304      	str	r3, [sp, #16]
 8083cee:	2300      	movs	r3, #0
    spiffs_page_ix *pix) {
 8083cf0:	4615      	mov	r5, r2
  res = spiffs_obj_lu_find_entry_visitor(fs,
 8083cf2:	4a16      	ldr	r2, [pc, #88]	; (8083d4c <spiffs_object_find_object_index_header_by_name+0x6c>)
 8083cf4:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8083cf8:	e9cd 3200 	strd	r3, r2, [sp]
 8083cfc:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8083cfe:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
    spiffs_page_ix *pix) {
 8083d00:	4604      	mov	r4, r0
  res = spiffs_obj_lu_find_entry_visitor(fs,
 8083d02:	f7fe fa97 	bl	8082234 <spiffs_obj_lu_find_entry_visitor>
  if (res == SPIFFS_VIS_END) {
 8083d06:	4b12      	ldr	r3, [pc, #72]	; (8083d50 <spiffs_object_find_object_index_header_by_name+0x70>)
 8083d08:	4298      	cmp	r0, r3
 8083d0a:	d01c      	beq.n	8083d46 <spiffs_object_find_object_index_header_by_name+0x66>
  SPIFFS_CHECK_RES(res);
 8083d0c:	2800      	cmp	r0, #0
 8083d0e:	db18      	blt.n	8083d42 <spiffs_object_find_object_index_header_by_name+0x62>
  if (pix) {
 8083d10:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 8083d14:	9e07      	ldr	r6, [sp, #28]
 8083d16:	b195      	cbz	r5, 8083d3e <spiffs_object_find_object_index_header_by_name+0x5e>
    *pix = SPIFFS_OBJ_LOOKUP_ENTRY_TO_PIX(fs, bix, entry);
 8083d18:	e9d4 2c06 	ldrd	r2, ip, [r4, #24]
 8083d1c:	fbb2 f2fc 	udiv	r2, r2, ip
 8083d20:	0053      	lsls	r3, r2, #1
 8083d22:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 8083d26:	bf94      	ite	ls
 8083d28:	fbb3 f3fc 	udivls	r3, r3, ip
 8083d2c:	2301      	movhi	r3, #1
 8083d2e:	fb02 f107 	mul.w	r1, r2, r7
 8083d32:	b289      	uxth	r1, r1
 8083d34:	bf98      	it	ls
 8083d36:	b29b      	uxthls	r3, r3
 8083d38:	4431      	add	r1, r6
 8083d3a:	440b      	add	r3, r1
 8083d3c:	802b      	strh	r3, [r5, #0]
  fs->cursor_block_ix = bix;
 8083d3e:	85a7      	strh	r7, [r4, #44]	; 0x2c
  fs->cursor_obj_lu_entry = entry;
 8083d40:	6326      	str	r6, [r4, #48]	; 0x30
}
 8083d42:	b009      	add	sp, #36	; 0x24
 8083d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    res = SPIFFS_ERR_NOT_FOUND;
 8083d46:	4803      	ldr	r0, [pc, #12]	; (8083d54 <spiffs_object_find_object_index_header_by_name+0x74>)
 8083d48:	e7fb      	b.n	8083d42 <spiffs_object_find_object_index_header_by_name+0x62>
 8083d4a:	bf00      	nop
 8083d4c:	08081df1 	.word	0x08081df1
 8083d50:	ffffd8a8 	.word	0xffffd8a8
 8083d54:	ffffd8ee 	.word	0xffffd8ee

08083d58 <spiffs_object_truncate>:
    u8_t remove_full) {
 8083d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((fd->size == SPIFFS_UNDEFINED_LEN || fd->size == 0) && !remove_full) {
 8083d5c:	6883      	ldr	r3, [r0, #8]
    u8_t remove_full) {
 8083d5e:	b08f      	sub	sp, #60	; 0x3c
  if ((fd->size == SPIFFS_UNDEFINED_LEN || fd->size == 0) && !remove_full) {
 8083d60:	3b01      	subs	r3, #1
 8083d62:	3303      	adds	r3, #3
    u8_t remove_full) {
 8083d64:	4605      	mov	r5, r0
 8083d66:	4691      	mov	r9, r2
  spiffs *fs = fd->fs;
 8083d68:	6804      	ldr	r4, [r0, #0]
    u8_t remove_full) {
 8083d6a:	9107      	str	r1, [sp, #28]
  if ((fd->size == SPIFFS_UNDEFINED_LEN || fd->size == 0) && !remove_full) {
 8083d6c:	f240 80b1 	bls.w	8083ed2 <spiffs_object_truncate+0x17a>
 8083d70:	2a00      	cmp	r2, #0
 8083d72:	f000 825d 	beq.w	8084230 <spiffs_object_truncate+0x4d8>
  spiffs_page_ix objix_pix = fd->objix_hdr_pix;
 8083d76:	89ab      	ldrh	r3, [r5, #12]
  spiffs_span_ix data_spix = (fd->size > 0 ? fd->size-1 : 0) / SPIFFS_DATA_PAGE_SIZE(fs);
 8083d78:	68ae      	ldr	r6, [r5, #8]
  spiffs_page_ix objix_pix = fd->objix_hdr_pix;
 8083d7a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
  spiffs_span_ix data_spix = (fd->size > 0 ? fd->size-1 : 0) / SPIFFS_DATA_PAGE_SIZE(fs);
 8083d7e:	2e00      	cmp	r6, #0
 8083d80:	f040 80b8 	bne.w	8083ef4 <spiffs_object_truncate+0x19c>
 8083d84:	4637      	mov	r7, r6
 8083d86:	69e1      	ldr	r1, [r4, #28]
 8083d88:	1f4a      	subs	r2, r1, #5
 8083d8a:	fbb7 f7f2 	udiv	r7, r7, r2
  u32_t cur_size = fd->size == (u32_t)SPIFFS_UNDEFINED_LEN ? 0 : fd->size ;
 8083d8e:	1c72      	adds	r2, r6, #1
  spiffs_page_object_ix_header *objix_hdr = (spiffs_page_object_ix_header *)fs->work;
 8083d90:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  u32_t cur_size = fd->size == (u32_t)SPIFFS_UNDEFINED_LEN ? 0 : fd->size ;
 8083d92:	bf08      	it	eq
 8083d94:	2600      	moveq	r6, #0
  spiffs_span_ix data_spix = (fd->size > 0 ? fd->size-1 : 0) / SPIFFS_DATA_PAGE_SIZE(fs);
 8083d96:	b2bf      	uxth	r7, r7
  spiffs_page_object_ix_header *objix_hdr = (spiffs_page_object_ix_header *)fs->work;
 8083d98:	9206      	str	r2, [sp, #24]
  if (remove_full && new_size == 0) {
 8083d9a:	f1b9 0f00 	cmp.w	r9, #0
 8083d9e:	d016      	beq.n	8083dce <spiffs_object_truncate+0x76>
 8083da0:	9a07      	ldr	r2, [sp, #28]
 8083da2:	b9a2      	cbnz	r2, 8083dce <spiffs_object_truncate+0x76>
    u8_t flags = ~( SPIFFS_PH_FLAG_USED | SPIFFS_PH_FLAG_INDEX | SPIFFS_PH_FLAG_FINAL | SPIFFS_PH_FLAG_IXDELE);
 8083da4:	22b8      	movs	r2, #184	; 0xb8
    res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_UPDT,
 8083da6:	a80c      	add	r0, sp, #48	; 0x30
    u8_t flags = ~( SPIFFS_PH_FLAG_USED | SPIFFS_PH_FLAG_INDEX | SPIFFS_PH_FLAG_FINAL | SPIFFS_PH_FLAG_IXDELE);
 8083da8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
    res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_UPDT,
 8083dac:	6922      	ldr	r2, [r4, #16]
 8083dae:	9001      	str	r0, [sp, #4]
 8083db0:	2001      	movs	r0, #1
 8083db2:	3204      	adds	r2, #4
 8083db4:	fb01 2303 	mla	r3, r1, r3, r2
 8083db8:	9000      	str	r0, [sp, #0]
 8083dba:	2106      	movs	r1, #6
 8083dbc:	4620      	mov	r0, r4
 8083dbe:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8083dc2:	f7fc fabf 	bl	8080344 <spiffs_phys_wr>
    SPIFFS_CHECK_RES(res);
 8083dc6:	f1b0 0a00 	subs.w	sl, r0, #0
 8083dca:	f2c0 808f 	blt.w	8083eec <spiffs_object_truncate+0x194>
      break;
 8083dce:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8083dd2:	f04f 0800 	mov.w	r8, #0
  while (cur_size > new_size) {
 8083dd6:	9b07      	ldr	r3, [sp, #28]
 8083dd8:	429e      	cmp	r6, r3
 8083dda:	d94b      	bls.n	8083e74 <spiffs_object_truncate+0x11c>
    cur_objix_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, data_spix);
 8083ddc:	69e3      	ldr	r3, [r4, #28]
 8083dde:	f1a3 022d 	sub.w	r2, r3, #45	; 0x2d
 8083de2:	ebb7 0f52 	cmp.w	r7, r2, lsr #1
 8083de6:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8083dea:	f0c0 8232 	bcc.w	8084252 <spiffs_object_truncate+0x4fa>
 8083dee:	3b08      	subs	r3, #8
 8083df0:	eba7 0808 	sub.w	r8, r7, r8
 8083df4:	085b      	lsrs	r3, r3, #1
 8083df6:	fbb8 f8f3 	udiv	r8, r8, r3
 8083dfa:	f108 0801 	add.w	r8, r8, #1
 8083dfe:	fa1f f888 	uxth.w	r8, r8
    if (prev_objix_spix != cur_objix_spix) {
 8083e02:	45c3      	cmp	fp, r8
 8083e04:	f040 822b 	bne.w	808425e <spiffs_object_truncate+0x506>
    if (cur_objix_spix == 0) {
 8083e08:	f1b8 0f00 	cmp.w	r8, #0
 8083e0c:	f040 809f 	bne.w	8083f4e <spiffs_object_truncate+0x1f6>
      data_pix = ((spiffs_page_ix*)((u8_t *)objix_hdr + sizeof(spiffs_page_object_ix_header)))[data_spix];
 8083e10:	9a06      	ldr	r2, [sp, #24]
 8083e12:	007b      	lsls	r3, r7, #1
 8083e14:	332d      	adds	r3, #45	; 0x2d
 8083e16:	f832 b003 	ldrh.w	fp, [r2, r3]
      ((spiffs_page_ix*)((u8_t *)objix_hdr + sizeof(spiffs_page_object_ix_header)))[data_spix] = SPIFFS_OBJ_ID_FREE;
 8083e1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8083e1e:	f04f 0800 	mov.w	r8, #0
 8083e22:	9906      	ldr	r1, [sp, #24]
 8083e24:	52ca      	strh	r2, [r1, r3]
    SPIFFS_DBG("truncate: got data pix "_SPIPRIpg"\n", data_pix);
 8083e26:	4659      	mov	r1, fp
 8083e28:	48c4      	ldr	r0, [pc, #784]	; (808413c <spiffs_object_truncate+0x3e4>)
 8083e2a:	f008 fe71 	bl	808cb10 <spiffsParticleInfoLog>
    if (new_size == 0 || remove_full || cur_size - new_size >= SPIFFS_DATA_PAGE_SIZE(fs)) {
 8083e2e:	9b07      	ldr	r3, [sp, #28]
 8083e30:	b15b      	cbz	r3, 8083e4a <spiffs_object_truncate+0xf2>
 8083e32:	f1b9 0f00 	cmp.w	r9, #0
 8083e36:	d108      	bne.n	8083e4a <spiffs_object_truncate+0xf2>
 8083e38:	69e3      	ldr	r3, [r4, #28]
 8083e3a:	3b05      	subs	r3, #5
 8083e3c:	9308      	str	r3, [sp, #32]
 8083e3e:	9b07      	ldr	r3, [sp, #28]
 8083e40:	9a08      	ldr	r2, [sp, #32]
 8083e42:	1af3      	subs	r3, r6, r3
 8083e44:	4293      	cmp	r3, r2
 8083e46:	f0c0 80be 	bcc.w	8083fc6 <spiffs_object_truncate+0x26e>
      res = spiffs_page_data_check(fs, fd, data_pix, data_spix);
 8083e4a:	463b      	mov	r3, r7
 8083e4c:	1d29      	adds	r1, r5, #4
 8083e4e:	465a      	mov	r2, fp
 8083e50:	4620      	mov	r0, r4
 8083e52:	f7fe f891 	bl	8081f78 <spiffs_page_data_check.isra.0>
      if (res != SPIFFS_ERR_DELETED && res != SPIFFS_OK && res != SPIFFS_ERR_INDEX_REF_FREE) {
 8083e56:	4bba      	ldr	r3, [pc, #744]	; (8084140 <spiffs_object_truncate+0x3e8>)
      res = spiffs_page_data_check(fs, fd, data_pix, data_spix);
 8083e58:	4601      	mov	r1, r0
      if (res != SPIFFS_ERR_DELETED && res != SPIFFS_OK && res != SPIFFS_ERR_INDEX_REF_FREE) {
 8083e5a:	4298      	cmp	r0, r3
 8083e5c:	f000 809b 	beq.w	8083f96 <spiffs_object_truncate+0x23e>
 8083e60:	2800      	cmp	r0, #0
 8083e62:	f000 8090 	beq.w	8083f86 <spiffs_object_truncate+0x22e>
 8083e66:	3b0b      	subs	r3, #11
 8083e68:	4298      	cmp	r0, r3
 8083e6a:	f000 8094 	beq.w	8083f96 <spiffs_object_truncate+0x23e>
        SPIFFS_DBG("truncate: err validating data pix "_SPIPRIi"\n", res);
 8083e6e:	48b5      	ldr	r0, [pc, #724]	; (8084144 <spiffs_object_truncate+0x3ec>)
          SPIFFS_DBG("truncate: err deleting data pix "_SPIPRIi"\n", res);
 8083e70:	f008 fe4e 	bl	808cb10 <spiffsParticleInfoLog>
  if (cur_objix_spix == 0) {
 8083e74:	f1b8 0f00 	cmp.w	r8, #0
 8083e78:	f040 819c 	bne.w	80841b4 <spiffs_object_truncate+0x45c>
    if (cur_size == 0) {
 8083e7c:	2e00      	cmp	r6, #0
 8083e7e:	f040 8190 	bne.w	80841a2 <spiffs_object_truncate+0x44a>
      if (remove_full) {
 8083e82:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 8083e86:	f1b9 0f00 	cmp.w	r9, #0
 8083e8a:	f000 816b 	beq.w	8084164 <spiffs_object_truncate+0x40c>
        SPIFFS_DBG("truncate: remove object index header page "_SPIPRIpg"\n", objix_pix);
 8083e8e:	48ae      	ldr	r0, [pc, #696]	; (8084148 <spiffs_object_truncate+0x3f0>)
 8083e90:	f008 fe3e 	bl	808cb10 <spiffsParticleInfoLog>
        res = spiffs_page_index_check(fs, fd, objix_pix, 0);
 8083e94:	4633      	mov	r3, r6
 8083e96:	4629      	mov	r1, r5
 8083e98:	4620      	mov	r0, r4
 8083e9a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8083e9e:	f7fd ff47 	bl	8081d30 <spiffs_page_index_check>
        SPIFFS_CHECK_RES(res);
 8083ea2:	f1b0 0a00 	subs.w	sl, r0, #0
 8083ea6:	db21      	blt.n	8083eec <spiffs_object_truncate+0x194>
        res = spiffs_page_delete(fs, objix_pix);
 8083ea8:	4620      	mov	r0, r4
 8083eaa:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 8083eae:	f7fe fd1f 	bl	80828f0 <spiffs_page_delete>
        SPIFFS_CHECK_RES(res);
 8083eb2:	f1b0 0a00 	subs.w	sl, r0, #0
 8083eb6:	db19      	blt.n	8083eec <spiffs_object_truncate+0x194>
        spiffs_cb_object_event(fs, (spiffs_page_object_ix *)0,
 8083eb8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8083ebc:	2202      	movs	r2, #2
 8083ebe:	e9cd 6300 	strd	r6, r3, [sp]
 8083ec2:	4631      	mov	r1, r6
 8083ec4:	4620      	mov	r0, r4
 8083ec6:	88eb      	ldrh	r3, [r5, #6]
 8083ec8:	9602      	str	r6, [sp, #8]
 8083eca:	f7fe fdf9 	bl	8082ac0 <spiffs_cb_object_event>
  fd->size = cur_size;
 8083ece:	60ae      	str	r6, [r5, #8]
  return res;
 8083ed0:	e00c      	b.n	8083eec <spiffs_object_truncate+0x194>
  if (remove_full == 0) {
 8083ed2:	2a00      	cmp	r2, #0
 8083ed4:	f47f af4f 	bne.w	8083d76 <spiffs_object_truncate+0x1e>
    res = spiffs_gc_check(fs, SPIFFS_DATA_PAGE_SIZE(fs) * 2);
 8083ed8:	69e1      	ldr	r1, [r4, #28]
 8083eda:	4620      	mov	r0, r4
 8083edc:	3905      	subs	r1, #5
 8083ede:	0049      	lsls	r1, r1, #1
 8083ee0:	f7fd f85c 	bl	8080f9c <spiffs_gc_check>
    SPIFFS_CHECK_RES(res);
 8083ee4:	f1b0 0a00 	subs.w	sl, r0, #0
 8083ee8:	f6bf af45 	bge.w	8083d76 <spiffs_object_truncate+0x1e>
} // spiffs_object_truncate
 8083eec:	4650      	mov	r0, sl
 8083eee:	b00f      	add	sp, #60	; 0x3c
 8083ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  spiffs_span_ix data_spix = (fd->size > 0 ? fd->size-1 : 0) / SPIFFS_DATA_PAGE_SIZE(fs);
 8083ef4:	1e77      	subs	r7, r6, #1
 8083ef6:	e746      	b.n	8083d86 <spiffs_object_truncate+0x2e>
            SPIFFS_DBG("truncate: update objix hdr page "_SPIPRIpg":"_SPIPRIsp" to size "_SPIPRIi"\n", fd->objix_hdr_pix, prev_objix_spix, cur_size);
 8083ef8:	4633      	mov	r3, r6
 8083efa:	465a      	mov	r2, fp
 8083efc:	89a9      	ldrh	r1, [r5, #12]
 8083efe:	4893      	ldr	r0, [pc, #588]	; (808414c <spiffs_object_truncate+0x3f4>)
 8083f00:	f008 fe06 	bl	808cb10 <spiffsParticleInfoLog>
            res = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
 8083f04:	ab0b      	add	r3, sp, #44	; 0x2c
 8083f06:	e9cd 6303 	strd	r6, r3, [sp, #12]
 8083f0a:	4629      	mov	r1, r5
 8083f0c:	4620      	mov	r0, r4
 8083f0e:	e9cd 9901 	strd	r9, r9, [sp, #4]
 8083f12:	89ab      	ldrh	r3, [r5, #12]
 8083f14:	88ea      	ldrh	r2, [r5, #6]
 8083f16:	f8cd 9000 	str.w	r9, [sp]
 8083f1a:	f7fe ff93 	bl	8082e44 <spiffs_object_update_index_hdr>
            SPIFFS_CHECK_RES(res);
 8083f1e:	f1b0 0a00 	subs.w	sl, r0, #0
 8083f22:	f280 81ce 	bge.w	80842c2 <spiffs_object_truncate+0x56a>
 8083f26:	e7e1      	b.n	8083eec <spiffs_object_truncate+0x194>
        res = spiffs_obj_lu_find_id_and_span(fs, fd->obj_id | SPIFFS_OBJ_ID_IX_FLAG, cur_objix_spix, 0, &objix_pix);
 8083f28:	88e9      	ldrh	r1, [r5, #6]
 8083f2a:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 8083f2e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8083f32:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8083f36:	9300      	str	r3, [sp, #0]
 8083f38:	4642      	mov	r2, r8
 8083f3a:	2300      	movs	r3, #0
 8083f3c:	4620      	mov	r0, r4
 8083f3e:	b289      	uxth	r1, r1
 8083f40:	f7fe fbd6 	bl	80826f0 <spiffs_obj_lu_find_id_and_span>
        SPIFFS_CHECK_RES(res);
 8083f44:	f1b0 0a00 	subs.w	sl, r0, #0
 8083f48:	f280 81c3 	bge.w	80842d2 <spiffs_object_truncate+0x57a>
 8083f4c:	e7ce      	b.n	8083eec <spiffs_object_truncate+0x194>
      data_pix = ((spiffs_page_ix*)((u8_t *)objix + sizeof(spiffs_page_object_ix)))[SPIFFS_OBJ_IX_ENTRY(fs, data_spix)];
 8083f4e:	69e2      	ldr	r2, [r4, #28]
 8083f50:	f1a2 012d 	sub.w	r1, r2, #45	; 0x2d
 8083f54:	ebb7 0f51 	cmp.w	r7, r1, lsr #1
 8083f58:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8083f5c:	bf21      	itttt	cs
 8083f5e:	3a08      	subcs	r2, #8
 8083f60:	1af9      	subcs	r1, r7, r3
 8083f62:	0852      	lsrcs	r2, r2, #1
 8083f64:	fbb1 f3f2 	udivcs	r3, r1, r2
 8083f68:	bf2c      	ite	cs
 8083f6a:	fb02 1313 	mlscs	r3, r2, r3, r1
 8083f6e:	1d3b      	addcc	r3, r7, #4
 8083f70:	9a06      	ldr	r2, [sp, #24]
 8083f72:	bf28      	it	cs
 8083f74:	3304      	addcs	r3, #4
 8083f76:	005b      	lsls	r3, r3, #1
 8083f78:	f832 b003 	ldrh.w	fp, [r2, r3]
      ((spiffs_page_ix*)((u8_t *)objix + sizeof(spiffs_page_object_ix)))[SPIFFS_OBJ_IX_ENTRY(fs, data_spix)] = SPIFFS_OBJ_ID_FREE;
 8083f7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8083f80:	9906      	ldr	r1, [sp, #24]
 8083f82:	52ca      	strh	r2, [r1, r3]
 8083f84:	e74f      	b.n	8083e26 <spiffs_object_truncate+0xce>
        res = spiffs_page_delete(fs, data_pix);
 8083f86:	4659      	mov	r1, fp
 8083f88:	4620      	mov	r0, r4
 8083f8a:	f7fe fcb1 	bl	80828f0 <spiffs_page_delete>
        if (res != SPIFFS_OK) {
 8083f8e:	4601      	mov	r1, r0
 8083f90:	b108      	cbz	r0, 8083f96 <spiffs_object_truncate+0x23e>
          SPIFFS_DBG("truncate: err deleting data pix "_SPIPRIi"\n", res);
 8083f92:	486f      	ldr	r0, [pc, #444]	; (8084150 <spiffs_object_truncate+0x3f8>)
 8083f94:	e76c      	b.n	8083e70 <spiffs_object_truncate+0x118>
      if (cur_size % SPIFFS_DATA_PAGE_SIZE(fs) == 0) {
 8083f96:	69e2      	ldr	r2, [r4, #28]
 8083f98:	1f51      	subs	r1, r2, #5
 8083f9a:	fbb6 f3f1 	udiv	r3, r6, r1
 8083f9e:	fb01 6313 	mls	r3, r1, r3, r6
 8083fa2:	b973      	cbnz	r3, 8083fc2 <spiffs_object_truncate+0x26a>
        cur_size -= SPIFFS_DATA_PAGE_SIZE(fs);
 8083fa4:	f1c2 0205 	rsb	r2, r2, #5
 8083fa8:	4416      	add	r6, r2
      SPIFFS_DBG("truncate: delete data page "_SPIPRIpg" for data spix:"_SPIPRIsp", cur_size:"_SPIPRIi"\n", data_pix, data_spix, cur_size);
 8083faa:	463a      	mov	r2, r7
 8083fac:	4659      	mov	r1, fp
 8083fae:	4633      	mov	r3, r6
 8083fb0:	4868      	ldr	r0, [pc, #416]	; (8084154 <spiffs_object_truncate+0x3fc>)
      fd->size = cur_size;
 8083fb2:	60ae      	str	r6, [r5, #8]
      fd->offset = cur_size;
 8083fb4:	616e      	str	r6, [r5, #20]
    data_spix--;
 8083fb6:	3f01      	subs	r7, #1
      SPIFFS_DBG("truncate: delete data page "_SPIPRIpg" for data spix:"_SPIPRIsp", cur_size:"_SPIPRIi"\n", data_pix, data_spix, cur_size);
 8083fb8:	f008 fdaa 	bl	808cb10 <spiffsParticleInfoLog>
    data_spix--;
 8083fbc:	46c3      	mov	fp, r8
 8083fbe:	b2bf      	uxth	r7, r7
 8083fc0:	e709      	b.n	8083dd6 <spiffs_object_truncate+0x7e>
        cur_size -= cur_size % SPIFFS_DATA_PAGE_SIZE(fs);
 8083fc2:	1af6      	subs	r6, r6, r3
 8083fc4:	e7f1      	b.n	8083faa <spiffs_object_truncate+0x252>
      u32_t bytes_to_remove = SPIFFS_DATA_PAGE_SIZE(fs) - (new_size % SPIFFS_DATA_PAGE_SIZE(fs));
 8083fc6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8083fca:	fbb3 f3f2 	udiv	r3, r3, r2
 8083fce:	9907      	ldr	r1, [sp, #28]
      SPIFFS_DBG("truncate: delete "_SPIPRIi" bytes from data page "_SPIPRIpg" for data spix:"_SPIPRIsp", cur_size:"_SPIPRIi"\n", bytes_to_remove, data_pix, data_spix, cur_size);
 8083fd0:	9600      	str	r6, [sp, #0]
      u32_t bytes_to_remove = SPIFFS_DATA_PAGE_SIZE(fs) - (new_size % SPIFFS_DATA_PAGE_SIZE(fs));
 8083fd2:	fb02 1313 	mls	r3, r2, r3, r1
 8083fd6:	9309      	str	r3, [sp, #36]	; 0x24
      SPIFFS_DBG("truncate: delete "_SPIPRIi" bytes from data page "_SPIPRIpg" for data spix:"_SPIPRIsp", cur_size:"_SPIPRIi"\n", bytes_to_remove, data_pix, data_spix, cur_size);
 8083fd8:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 8083fdc:	463b      	mov	r3, r7
 8083fde:	1a09      	subs	r1, r1, r0
 8083fe0:	465a      	mov	r2, fp
 8083fe2:	485d      	ldr	r0, [pc, #372]	; (8084158 <spiffs_object_truncate+0x400>)
 8083fe4:	f008 fd94 	bl	808cb10 <spiffsParticleInfoLog>
      res = spiffs_page_data_check(fs, fd, data_pix, data_spix);
 8083fe8:	463b      	mov	r3, r7
 8083fea:	465a      	mov	r2, fp
 8083fec:	4620      	mov	r0, r4
 8083fee:	1d29      	adds	r1, r5, #4
      SPIFFS_DBG("truncate: delete "_SPIPRIi" bytes from data page "_SPIPRIpg" for data spix:"_SPIPRIsp", cur_size:"_SPIPRIi"\n", bytes_to_remove, data_pix, data_spix, cur_size);
 8083ff0:	46ba      	mov	sl, r7
      res = spiffs_page_data_check(fs, fd, data_pix, data_spix);
 8083ff2:	f7fd ffc1 	bl	8081f78 <spiffs_page_data_check.isra.0>
      if (res != SPIFFS_OK) break;
 8083ff6:	2800      	cmp	r0, #0
 8083ff8:	f47f af3c 	bne.w	8083e74 <spiffs_object_truncate+0x11c>
      p_hdr.flags = 0xff;
 8083ffc:	23ff      	movs	r3, #255	; 0xff
      p_hdr.obj_id = fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG;
 8083ffe:	88e9      	ldrh	r1, [r5, #6]
      p_hdr.flags = 0xff;
 8084000:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
      res = spiffs_page_allocate_data(fs, fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG,
 8084004:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8084008:	e9cd 9302 	strd	r9, r3, [sp, #8]
      p_hdr.obj_id = fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG;
 808400c:	f3c1 010e 	ubfx	r1, r1, #0, #15
      res = spiffs_page_allocate_data(fs, fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG,
 8084010:	464b      	mov	r3, r9
 8084012:	4620      	mov	r0, r4
 8084014:	e9cd 9900 	strd	r9, r9, [sp]
 8084018:	aa0c      	add	r2, sp, #48	; 0x30
      p_hdr.obj_id = fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG;
 808401a:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
      p_hdr.span_ix = data_spix;
 808401e:	f8ad 7032 	strh.w	r7, [sp, #50]	; 0x32
      res = spiffs_page_allocate_data(fs, fd->obj_id & ~SPIFFS_OBJ_ID_IX_FLAG,
 8084022:	f7fe fbab 	bl	808277c <spiffs_page_allocate_data>
      if (res != SPIFFS_OK) break;
 8084026:	2800      	cmp	r0, #0
 8084028:	f47f af24 	bne.w	8083e74 <spiffs_object_truncate+0x11c>
          SPIFFS_PAGE_TO_PADDR(fs, new_data_pix) + sizeof(spiffs_page_header),
 808402c:	69e0      	ldr	r0, [r4, #28]
      res = spiffs_phys_cpy(fs, 0,
 808402e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8084030:	1f43      	subs	r3, r0, #5
 8084032:	6921      	ldr	r1, [r4, #16]
 8084034:	4413      	add	r3, r2
 8084036:	9a08      	ldr	r2, [sp, #32]
          SPIFFS_PAGE_TO_PADDR(fs, new_data_pix) + sizeof(spiffs_page_header),
 8084038:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 808403c:	3105      	adds	r1, #5
      res = spiffs_phys_cpy(fs, 0,
 808403e:	1a9b      	subs	r3, r3, r2
 8084040:	9300      	str	r3, [sp, #0]
 8084042:	fb00 120c 	mla	r2, r0, ip, r1
 8084046:	fb00 130b 	mla	r3, r0, fp, r1
 808404a:	4649      	mov	r1, r9
 808404c:	4620      	mov	r0, r4
 808404e:	f7fe f8c5 	bl	80821dc <spiffs_phys_cpy>
      if (res != SPIFFS_OK) break;
 8084052:	2800      	cmp	r0, #0
 8084054:	f47f af0e 	bne.w	8083e74 <spiffs_object_truncate+0x11c>
      res = spiffs_page_delete(fs, data_pix);
 8084058:	4659      	mov	r1, fp
 808405a:	4620      	mov	r0, r4
 808405c:	f7fe fc48 	bl	80828f0 <spiffs_page_delete>
      if (res != SPIFFS_OK) break;
 8084060:	2800      	cmp	r0, #0
 8084062:	f47f af07 	bne.w	8083e74 <spiffs_object_truncate+0x11c>
      p_hdr.flags &= ~SPIFFS_PH_FLAG_FINAL;
 8084066:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
      res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
 808406a:	a80d      	add	r0, sp, #52	; 0x34
      p_hdr.flags &= ~SPIFFS_PH_FLAG_FINAL;
 808406c:	f023 0302 	bic.w	r3, r3, #2
 8084070:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
      res = _spiffs_wr(fs, SPIFFS_OP_T_OBJ_DA | SPIFFS_OP_C_UPDT,
 8084074:	69e1      	ldr	r1, [r4, #28]
 8084076:	6922      	ldr	r2, [r4, #16]
 8084078:	9001      	str	r0, [sp, #4]
 808407a:	2001      	movs	r0, #1
 808407c:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8084080:	3204      	adds	r2, #4
 8084082:	fb01 2303 	mla	r3, r1, r3, r2
 8084086:	9000      	str	r0, [sp, #0]
 8084088:	2107      	movs	r1, #7
 808408a:	4620      	mov	r0, r4
 808408c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8084090:	f7fc f958 	bl	8080344 <spiffs_phys_wr>
      if (res != SPIFFS_OK) break;
 8084094:	2800      	cmp	r0, #0
 8084096:	f47f aeed 	bne.w	8083e74 <spiffs_object_truncate+0x11c>
      if (cur_objix_spix == 0) {
 808409a:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 808409e:	f1b8 0f00 	cmp.w	r8, #0
 80840a2:	d120      	bne.n	80840e6 <spiffs_object_truncate+0x38e>
        ((spiffs_page_ix*)((u8_t *)objix_hdr + sizeof(spiffs_page_object_ix_header)))[data_spix] = new_data_pix;
 80840a4:	9b06      	ldr	r3, [sp, #24]
 80840a6:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 80840aa:	f8a3 102d 	strh.w	r1, [r3, #45]	; 0x2d
        SPIFFS_DBG("truncate: wrote page "_SPIPRIpg" to objix_hdr entry "_SPIPRIsp" in mem\n", new_data_pix, (spiffs_span_ix)SPIFFS_OBJ_IX_ENTRY(fs, data_spix));
 80840ae:	69e3      	ldr	r3, [r4, #28]
 80840b0:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80840b4:	f1a3 002d 	sub.w	r0, r3, #45	; 0x2d
 80840b8:	ebb7 0f50 	cmp.w	r7, r0, lsr #1
 80840bc:	ea4f 0250 	mov.w	r2, r0, lsr #1
 80840c0:	d308      	bcc.n	80840d4 <spiffs_object_truncate+0x37c>
 80840c2:	3b08      	subs	r3, #8
 80840c4:	1abf      	subs	r7, r7, r2
 80840c6:	085b      	lsrs	r3, r3, #1
 80840c8:	fbb7 faf3 	udiv	sl, r7, r3
 80840cc:	fb03 771a 	mls	r7, r3, sl, r7
 80840d0:	fa1f fa87 	uxth.w	sl, r7
 80840d4:	4652      	mov	r2, sl
 80840d6:	4821      	ldr	r0, [pc, #132]	; (808415c <spiffs_object_truncate+0x404>)
        SPIFFS_DBG("truncate: wrote page "_SPIPRIpg" to objix entry "_SPIPRIsp" in mem\n", new_data_pix, (spiffs_span_ix)SPIFFS_OBJ_IX_ENTRY(fs, data_spix));
 80840d8:	f008 fd1a 	bl	808cb10 <spiffsParticleInfoLog>
      fd->size = new_size;
 80840dc:	9b07      	ldr	r3, [sp, #28]
      break;
 80840de:	461e      	mov	r6, r3
      fd->size = new_size;
 80840e0:	60ab      	str	r3, [r5, #8]
      fd->offset = cur_size;
 80840e2:	616b      	str	r3, [r5, #20]
      break;
 80840e4:	e6c6      	b.n	8083e74 <spiffs_object_truncate+0x11c>
        ((spiffs_page_ix*)((u8_t *)objix + sizeof(spiffs_page_object_ix)))[SPIFFS_OBJ_IX_ENTRY(fs, data_spix)] = new_data_pix;
 80840e6:	69e2      	ldr	r2, [r4, #28]
 80840e8:	f1a2 002d 	sub.w	r0, r2, #45	; 0x2d
 80840ec:	ebb7 0f50 	cmp.w	r7, r0, lsr #1
 80840f0:	ea4f 0350 	mov.w	r3, r0, lsr #1
 80840f4:	bf21      	itttt	cs
 80840f6:	3a08      	subcs	r2, #8
 80840f8:	1af8      	subcs	r0, r7, r3
 80840fa:	0852      	lsrcs	r2, r2, #1
 80840fc:	fbb0 f3f2 	udivcs	r3, r0, r2
 8084100:	bf2c      	ite	cs
 8084102:	fb02 0313 	mlscs	r3, r2, r3, r0
 8084106:	1d3b      	addcc	r3, r7, #4
 8084108:	9a06      	ldr	r2, [sp, #24]
 808410a:	bf28      	it	cs
 808410c:	3304      	addcs	r3, #4
 808410e:	005b      	lsls	r3, r3, #1
 8084110:	52d1      	strh	r1, [r2, r3]
        SPIFFS_DBG("truncate: wrote page "_SPIPRIpg" to objix entry "_SPIPRIsp" in mem\n", new_data_pix, (spiffs_span_ix)SPIFFS_OBJ_IX_ENTRY(fs, data_spix));
 8084112:	69e3      	ldr	r3, [r4, #28]
 8084114:	f1a3 002d 	sub.w	r0, r3, #45	; 0x2d
 8084118:	ebb7 0f50 	cmp.w	r7, r0, lsr #1
 808411c:	ea4f 0250 	mov.w	r2, r0, lsr #1
 8084120:	d308      	bcc.n	8084134 <spiffs_object_truncate+0x3dc>
 8084122:	3b08      	subs	r3, #8
 8084124:	1abf      	subs	r7, r7, r2
 8084126:	085b      	lsrs	r3, r3, #1
 8084128:	fbb7 faf3 	udiv	sl, r7, r3
 808412c:	fb03 771a 	mls	r7, r3, sl, r7
 8084130:	fa1f fa87 	uxth.w	sl, r7
 8084134:	4652      	mov	r2, sl
 8084136:	480a      	ldr	r0, [pc, #40]	; (8084160 <spiffs_object_truncate+0x408>)
 8084138:	e7ce      	b.n	80840d8 <spiffs_object_truncate+0x380>
 808413a:	bf00      	nop
 808413c:	08093210 	.word	0x08093210
 8084140:	ffffd8ec 	.word	0xffffd8ec
 8084144:	0809322d 	.word	0x0809322d
 8084148:	08093377 	.word	0x08093377
 808414c:	080931a2 	.word	0x080931a2
 8084150:	08093253 	.word	0x08093253
 8084154:	08093277 	.word	0x08093277
 8084158:	080932b8 	.word	0x080932b8
 808415c:	08093307 	.word	0x08093307
 8084160:	08093341 	.word	0x08093341
        SPIFFS_DBG("truncate: reset objix_hdr page "_SPIPRIpg"\n", objix_pix);
 8084164:	4874      	ldr	r0, [pc, #464]	; (8084338 <spiffs_object_truncate+0x5e0>)
 8084166:	f008 fcd3 	bl	808cb10 <spiffsParticleInfoLog>
            SPIFFS_CFG_LOG_PAGE_SZ(fs) - sizeof(spiffs_page_object_ix_header));
 808416a:	69e2      	ldr	r2, [r4, #28]
        memset(fs->work + sizeof(spiffs_page_object_ix_header), 0xff,
 808416c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 808416e:	21ff      	movs	r1, #255	; 0xff
 8084170:	3a2d      	subs	r2, #45	; 0x2d
 8084172:	302d      	adds	r0, #45	; 0x2d
 8084174:	f00d fea6 	bl	8091ec4 <memset>
        res = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
 8084178:	ab0b      	add	r3, sp, #44	; 0x2c
 808417a:	9304      	str	r3, [sp, #16]
 808417c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8084180:	e9cd 6302 	strd	r6, r3, [sp, #8]
 8084184:	9601      	str	r6, [sp, #4]
      res = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
 8084186:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8084188:	9300      	str	r3, [sp, #0]
 808418a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    res = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
 808418e:	4629      	mov	r1, r5
 8084190:	4620      	mov	r0, r4
 8084192:	88ea      	ldrh	r2, [r5, #6]
 8084194:	f7fe fe56 	bl	8082e44 <spiffs_object_update_index_hdr>
    SPIFFS_CHECK_RES(res);
 8084198:	f1b0 0a00 	subs.w	sl, r0, #0
 808419c:	f6bf ae97 	bge.w	8083ece <spiffs_object_truncate+0x176>
 80841a0:	e6a4      	b.n	8083eec <spiffs_object_truncate+0x194>
      SPIFFS_DBG("truncate: update object index header page with indices and size\n");
 80841a2:	4866      	ldr	r0, [pc, #408]	; (808433c <spiffs_object_truncate+0x5e4>)
 80841a4:	f008 fcb4 	bl	808cb10 <spiffsParticleInfoLog>
      res = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
 80841a8:	ab0b      	add	r3, sp, #44	; 0x2c
 80841aa:	e9cd 6303 	strd	r6, r3, [sp, #12]
 80841ae:	e9cd 8801 	strd	r8, r8, [sp, #4]
 80841b2:	e7e8      	b.n	8084186 <spiffs_object_truncate+0x42e>
    res = spiffs_page_index_check(fs, fd, objix_pix, cur_objix_spix);
 80841b4:	4643      	mov	r3, r8
 80841b6:	4629      	mov	r1, r5
 80841b8:	4620      	mov	r0, r4
 80841ba:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 80841be:	f7fd fdb7 	bl	8081d30 <spiffs_page_index_check>
    SPIFFS_CHECK_RES(res);
 80841c2:	f1b0 0a00 	subs.w	sl, r0, #0
 80841c6:	f6ff ae91 	blt.w	8083eec <spiffs_object_truncate+0x194>
    res = spiffs_page_move(fs, fd->file_nbr, (u8_t*)objix_hdr, fd->obj_id, 0, objix_pix, &new_objix_pix);
 80841ca:	2700      	movs	r7, #0
 80841cc:	ab0c      	add	r3, sp, #48	; 0x30
 80841ce:	9302      	str	r3, [sp, #8]
 80841d0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80841d4:	4620      	mov	r0, r4
 80841d6:	9301      	str	r3, [sp, #4]
 80841d8:	9a06      	ldr	r2, [sp, #24]
 80841da:	88eb      	ldrh	r3, [r5, #6]
 80841dc:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
 80841e0:	9700      	str	r7, [sp, #0]
 80841e2:	f7fe fbc9 	bl	8082978 <spiffs_page_move>
    SPIFFS_CHECK_RES(res);
 80841e6:	f1b0 0a00 	subs.w	sl, r0, #0
 80841ea:	f6ff ae7f 	blt.w	8083eec <spiffs_object_truncate+0x194>
    spiffs_cb_object_event(fs, (spiffs_page_object_ix *)objix_hdr,
 80841ee:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80841f2:	9702      	str	r7, [sp, #8]
 80841f4:	9301      	str	r3, [sp, #4]
 80841f6:	9b06      	ldr	r3, [sp, #24]
 80841f8:	463a      	mov	r2, r7
 80841fa:	885b      	ldrh	r3, [r3, #2]
 80841fc:	4620      	mov	r0, r4
 80841fe:	9906      	ldr	r1, [sp, #24]
 8084200:	9300      	str	r3, [sp, #0]
 8084202:	88eb      	ldrh	r3, [r5, #6]
 8084204:	f7fe fc5c 	bl	8082ac0 <spiffs_cb_object_event>
    SPIFFS_DBG("truncate: store modified objix page, "_SPIPRIpg":"_SPIPRIsp"\n", new_objix_pix, cur_objix_spix);
 8084208:	4642      	mov	r2, r8
 808420a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 808420e:	484c      	ldr	r0, [pc, #304]	; (8084340 <spiffs_object_truncate+0x5e8>)
 8084210:	f008 fc7e 	bl	808cb10 <spiffsParticleInfoLog>
    fd->cursor_objix_pix = new_objix_pix;
 8084214:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    res = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
 8084218:	e9cd 7701 	strd	r7, r7, [sp, #4]
    fd->cursor_objix_pix = new_objix_pix;
 808421c:	81eb      	strh	r3, [r5, #14]
    res = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
 808421e:	ab0b      	add	r3, sp, #44	; 0x2c
 8084220:	e9cd 6303 	strd	r6, r3, [sp, #12]
    fd->cursor_objix_spix = cur_objix_spix;
 8084224:	f8a5 8010 	strh.w	r8, [r5, #16]
    res = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
 8084228:	89ab      	ldrh	r3, [r5, #12]
    fd->offset = cur_size;
 808422a:	616e      	str	r6, [r5, #20]
    res = spiffs_object_update_index_hdr(fs, fd, fd->obj_id,
 808422c:	9700      	str	r7, [sp, #0]
 808422e:	e7ae      	b.n	808418e <spiffs_object_truncate+0x436>
    return res;
 8084230:	4692      	mov	sl, r2
 8084232:	e65b      	b.n	8083eec <spiffs_object_truncate+0x194>
      SPIFFS_VALIDATE_OBJIX(objix_hdr->p_hdr, fd->obj_id, cur_objix_spix);
 8084234:	f8df a114 	ldr.w	sl, [pc, #276]	; 808434c <spiffs_object_truncate+0x5f4>
 8084238:	e658      	b.n	8083eec <spiffs_object_truncate+0x194>
 808423a:	f8df a114 	ldr.w	sl, [pc, #276]	; 8084350 <spiffs_object_truncate+0x5f8>
 808423e:	e655      	b.n	8083eec <spiffs_object_truncate+0x194>
 8084240:	f8df a110 	ldr.w	sl, [pc, #272]	; 8084354 <spiffs_object_truncate+0x5fc>
 8084244:	e652      	b.n	8083eec <spiffs_object_truncate+0x194>
 8084246:	f8df a110 	ldr.w	sl, [pc, #272]	; 8084358 <spiffs_object_truncate+0x600>
 808424a:	e64f      	b.n	8083eec <spiffs_object_truncate+0x194>
 808424c:	f8df a10c 	ldr.w	sl, [pc, #268]	; 808435c <spiffs_object_truncate+0x604>
 8084250:	e64c      	b.n	8083eec <spiffs_object_truncate+0x194>
    if (prev_objix_spix != cur_objix_spix) {
 8084252:	f1bb 0f00 	cmp.w	fp, #0
 8084256:	f43f addb 	beq.w	8083e10 <spiffs_object_truncate+0xb8>
    cur_objix_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, data_spix);
 808425a:	f04f 0800 	mov.w	r8, #0
      if (prev_objix_spix != (spiffs_span_ix)-1) {
 808425e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8084262:	459b      	cmp	fp, r3
 8084264:	d02e      	beq.n	80842c4 <spiffs_object_truncate+0x56c>
        SPIFFS_DBG("truncate: delete objix page "_SPIPRIpg":"_SPIPRIsp"\n", objix_pix, prev_objix_spix);
 8084266:	465a      	mov	r2, fp
 8084268:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 808426c:	4835      	ldr	r0, [pc, #212]	; (8084344 <spiffs_object_truncate+0x5ec>)
 808426e:	f008 fc4f 	bl	808cb10 <spiffsParticleInfoLog>
        res = spiffs_page_index_check(fs, fd, objix_pix, prev_objix_spix);
 8084272:	465b      	mov	r3, fp
 8084274:	4629      	mov	r1, r5
 8084276:	4620      	mov	r0, r4
 8084278:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 808427c:	f7fd fd58 	bl	8081d30 <spiffs_page_index_check>
        SPIFFS_CHECK_RES(res);
 8084280:	f1b0 0a00 	subs.w	sl, r0, #0
 8084284:	f6ff ae32 	blt.w	8083eec <spiffs_object_truncate+0x194>
        res = spiffs_page_delete(fs, objix_pix);
 8084288:	4620      	mov	r0, r4
 808428a:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 808428e:	f7fe fb2f 	bl	80828f0 <spiffs_page_delete>
        SPIFFS_CHECK_RES(res);
 8084292:	f1b0 0a00 	subs.w	sl, r0, #0
 8084296:	f6ff ae29 	blt.w	8083eec <spiffs_object_truncate+0x194>
        spiffs_cb_object_event(fs, (spiffs_page_object_ix *)0,
 808429a:	2100      	movs	r1, #0
 808429c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80842a0:	9102      	str	r1, [sp, #8]
 80842a2:	9301      	str	r3, [sp, #4]
 80842a4:	9b06      	ldr	r3, [sp, #24]
 80842a6:	2202      	movs	r2, #2
 80842a8:	885b      	ldrh	r3, [r3, #2]
 80842aa:	4620      	mov	r0, r4
 80842ac:	9300      	str	r3, [sp, #0]
 80842ae:	88eb      	ldrh	r3, [r5, #6]
 80842b0:	f7fe fc06 	bl	8082ac0 <spiffs_cb_object_event>
        if (prev_objix_spix > 0) {
 80842b4:	f1bb 0f00 	cmp.w	fp, #0
 80842b8:	d004      	beq.n	80842c4 <spiffs_object_truncate+0x56c>
          if (remove_full == 0) {
 80842ba:	f1b9 0f00 	cmp.w	r9, #0
 80842be:	f43f ae1b 	beq.w	8083ef8 <spiffs_object_truncate+0x1a0>
          fd->size = cur_size;
 80842c2:	60ae      	str	r6, [r5, #8]
      if (cur_objix_spix == 0) {
 80842c4:	f1b8 0f00 	cmp.w	r8, #0
 80842c8:	f47f ae2e 	bne.w	8083f28 <spiffs_object_truncate+0x1d0>
        objix_pix = fd->objix_hdr_pix;
 80842cc:	89ab      	ldrh	r3, [r5, #12]
 80842ce:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
      SPIFFS_DBG("truncate: load objix page "_SPIPRIpg":"_SPIPRIsp" for data spix:"_SPIPRIsp"\n", objix_pix, cur_objix_spix, data_spix);
 80842d2:	463b      	mov	r3, r7
 80842d4:	4642      	mov	r2, r8
 80842d6:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 80842da:	481b      	ldr	r0, [pc, #108]	; (8084348 <spiffs_object_truncate+0x5f0>)
 80842dc:	f008 fc18 	bl	808cb10 <spiffsParticleInfoLog>
      res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ,
 80842e0:	69e2      	ldr	r2, [r4, #28]
 80842e2:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 80842e6:	6923      	ldr	r3, [r4, #16]
 80842e8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80842ea:	fb02 3301 	mla	r3, r2, r1, r3
 80842ee:	e9cd 2000 	strd	r2, r0, [sp]
 80842f2:	2116      	movs	r1, #22
 80842f4:	4620      	mov	r0, r4
 80842f6:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80842fa:	f7fb ff97 	bl	808022c <spiffs_phys_rd>
      SPIFFS_CHECK_RES(res);
 80842fe:	f1b0 0a00 	subs.w	sl, r0, #0
 8084302:	f6ff adf3 	blt.w	8083eec <spiffs_object_truncate+0x194>
      SPIFFS_VALIDATE_OBJIX(objix_hdr->p_hdr, fd->obj_id, cur_objix_spix);
 8084306:	9b06      	ldr	r3, [sp, #24]
 8084308:	791b      	ldrb	r3, [r3, #4]
 808430a:	07d8      	lsls	r0, r3, #31
 808430c:	d492      	bmi.n	8084234 <spiffs_object_truncate+0x4dc>
 808430e:	0619      	lsls	r1, r3, #24
 8084310:	d593      	bpl.n	808423a <spiffs_object_truncate+0x4e2>
 8084312:	079a      	lsls	r2, r3, #30
 8084314:	d494      	bmi.n	8084240 <spiffs_object_truncate+0x4e8>
 8084316:	075b      	lsls	r3, r3, #29
 8084318:	d495      	bmi.n	8084246 <spiffs_object_truncate+0x4ee>
 808431a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 808431e:	2b00      	cmp	r3, #0
 8084320:	da91      	bge.n	8084246 <spiffs_object_truncate+0x4ee>
 8084322:	9b06      	ldr	r3, [sp, #24]
 8084324:	885b      	ldrh	r3, [r3, #2]
 8084326:	4543      	cmp	r3, r8
 8084328:	d190      	bne.n	808424c <spiffs_object_truncate+0x4f4>
      fd->cursor_objix_pix = objix_pix;
 808432a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
      fd->cursor_objix_spix = cur_objix_spix;
 808432e:	f8a5 8010 	strh.w	r8, [r5, #16]
      fd->cursor_objix_pix = objix_pix;
 8084332:	81eb      	strh	r3, [r5, #14]
      fd->offset = cur_size;
 8084334:	616e      	str	r6, [r5, #20]
      prev_objix_spix = cur_objix_spix;
 8084336:	e567      	b.n	8083e08 <spiffs_object_truncate+0xb0>
 8084338:	080933a7 	.word	0x080933a7
 808433c:	080933cc 	.word	0x080933cc
 8084340:	0809340d 	.word	0x0809340d
 8084344:	0809317b 	.word	0x0809317b
 8084348:	080931d8 	.word	0x080931d8
 808434c:	ffffd8e4 	.word	0xffffd8e4
 8084350:	ffffd8ec 	.word	0xffffd8ec
 8084354:	ffffd8eb 	.word	0xffffd8eb
 8084358:	ffffd8ea 	.word	0xffffd8ea
 808435c:	ffffd8e3 	.word	0xffffd8e3

08084360 <spiffs_object_read>:
    u8_t *dst) {
 8084360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  spiffs *fs = fd->fs;
 8084364:	6807      	ldr	r7, [r0, #0]
    u8_t *dst) {
 8084366:	4606      	mov	r6, r0
  spiffs_span_ix data_spix = offset / SPIFFS_DATA_PAGE_SIZE(fs);
 8084368:	69fc      	ldr	r4, [r7, #28]
  u32_t cur_offset = offset;
 808436a:	4688      	mov	r8, r1
  spiffs_span_ix data_spix = offset / SPIFFS_DATA_PAGE_SIZE(fs);
 808436c:	3c05      	subs	r4, #5
 808436e:	fbb1 f4f4 	udiv	r4, r1, r4
  spiffs_span_ix prev_objix_spix = (spiffs_span_ix)-1;
 8084372:	f64f 7bff 	movw	fp, #65535	; 0xffff
  s32_t res = SPIFFS_OK;
 8084376:	2000      	movs	r0, #0
    u8_t *dst) {
 8084378:	b089      	sub	sp, #36	; 0x24
 808437a:	e9cd 3204 	strd	r3, r2, [sp, #16]
  spiffs_page_object_ix_header *objix_hdr = (spiffs_page_object_ix_header *)fs->work;
 808437e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    u8_t *dst) {
 8084380:	9103      	str	r1, [sp, #12]
  spiffs_span_ix data_spix = offset / SPIFFS_DATA_PAGE_SIZE(fs);
 8084382:	b2a4      	uxth	r4, r4
  spiffs_page_object_ix_header *objix_hdr = (spiffs_page_object_ix_header *)fs->work;
 8084384:	9302      	str	r3, [sp, #8]
  while (cur_offset < offset + len) {
 8084386:	9b03      	ldr	r3, [sp, #12]
 8084388:	9a05      	ldr	r2, [sp, #20]
 808438a:	eb03 0a02 	add.w	sl, r3, r2
 808438e:	45c2      	cmp	sl, r8
 8084390:	f240 80cb 	bls.w	808452a <spiffs_object_read+0x1ca>
    if (fd->ix_map && data_spix >= fd->ix_map->start_spix && data_spix <= fd->ix_map->end_spix
 8084394:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8084396:	b162      	cbz	r2, 80843b2 <spiffs_object_read+0x52>
 8084398:	8913      	ldrh	r3, [r2, #8]
 808439a:	42a3      	cmp	r3, r4
 808439c:	d809      	bhi.n	80843b2 <spiffs_object_read+0x52>
 808439e:	8951      	ldrh	r1, [r2, #10]
 80843a0:	42a1      	cmp	r1, r4
 80843a2:	d306      	bcc.n	80843b2 <spiffs_object_read+0x52>
        && fd->ix_map->map_buf[data_spix - fd->ix_map->start_spix]) {
 80843a4:	6812      	ldr	r2, [r2, #0]
 80843a6:	1ae3      	subs	r3, r4, r3
 80843a8:	f832 9013 	ldrh.w	r9, [r2, r3, lsl #1]
 80843ac:	f1b9 0f00 	cmp.w	r9, #0
 80843b0:	d158      	bne.n	8084464 <spiffs_object_read+0x104>
      cur_objix_spix = SPIFFS_OBJ_IX_ENTRY_SPAN_IX(fs, data_spix);
 80843b2:	69fb      	ldr	r3, [r7, #28]
 80843b4:	f1a3 022d 	sub.w	r2, r3, #45	; 0x2d
 80843b8:	ebb4 0f52 	cmp.w	r4, r2, lsr #1
 80843bc:	ea4f 0552 	mov.w	r5, r2, lsr #1
 80843c0:	f0c0 80db 	bcc.w	808457a <spiffs_object_read+0x21a>
 80843c4:	3b08      	subs	r3, #8
 80843c6:	1b65      	subs	r5, r4, r5
 80843c8:	085b      	lsrs	r3, r3, #1
 80843ca:	fbb5 f5f3 	udiv	r5, r5, r3
 80843ce:	3501      	adds	r5, #1
 80843d0:	b2ad      	uxth	r5, r5
      if (prev_objix_spix != cur_objix_spix) {
 80843d2:	45ab      	cmp	fp, r5
 80843d4:	d03d      	beq.n	8084452 <spiffs_object_read+0xf2>
        if (cur_objix_spix == 0) {
 80843d6:	2d00      	cmp	r5, #0
 80843d8:	f040 808a 	bne.w	80844f0 <spiffs_object_read+0x190>
          objix_pix = fd->objix_hdr_pix;
 80843dc:	2500      	movs	r5, #0
 80843de:	89b3      	ldrh	r3, [r6, #12]
 80843e0:	f8ad 301e 	strh.w	r3, [sp, #30]
        SPIFFS_DBG("read: load objix page "_SPIPRIpg":"_SPIPRIsp" for data spix:"_SPIPRIsp"\n", objix_pix, cur_objix_spix, data_spix);
 80843e4:	4623      	mov	r3, r4
 80843e6:	462a      	mov	r2, r5
 80843e8:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80843ec:	4865      	ldr	r0, [pc, #404]	; (8084584 <spiffs_object_read+0x224>)
 80843ee:	f008 fb8f 	bl	808cb10 <spiffsParticleInfoLog>
        res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_IX | SPIFFS_OP_C_READ,
 80843f2:	69fa      	ldr	r2, [r7, #28]
 80843f4:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80843f8:	693b      	ldr	r3, [r7, #16]
 80843fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80843fc:	fb02 3301 	mla	r3, r2, r1, r3
 8084400:	e9cd 2000 	strd	r2, r0, [sp]
 8084404:	2116      	movs	r1, #22
 8084406:	4638      	mov	r0, r7
 8084408:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
 808440c:	f7fb ff0e 	bl	808022c <spiffs_phys_rd>
        SPIFFS_CHECK_RES(res);
 8084410:	2800      	cmp	r0, #0
 8084412:	f2c0 808a 	blt.w	808452a <spiffs_object_read+0x1ca>
        SPIFFS_VALIDATE_OBJIX(objix->p_hdr, fd->obj_id, cur_objix_spix);
 8084416:	9b02      	ldr	r3, [sp, #8]
 8084418:	791b      	ldrb	r3, [r3, #4]
 808441a:	07d8      	lsls	r0, r3, #31
 808441c:	f100 80a1 	bmi.w	8084562 <spiffs_object_read+0x202>
 8084420:	0619      	lsls	r1, r3, #24
 8084422:	f140 80a0 	bpl.w	8084566 <spiffs_object_read+0x206>
 8084426:	079a      	lsls	r2, r3, #30
 8084428:	f100 809f 	bmi.w	808456a <spiffs_object_read+0x20a>
 808442c:	075b      	lsls	r3, r3, #29
 808442e:	f100 809e 	bmi.w	808456e <spiffs_object_read+0x20e>
 8084432:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8084436:	2b00      	cmp	r3, #0
 8084438:	f280 8099 	bge.w	808456e <spiffs_object_read+0x20e>
 808443c:	9b02      	ldr	r3, [sp, #8]
 808443e:	885b      	ldrh	r3, [r3, #2]
 8084440:	42ab      	cmp	r3, r5
 8084442:	f040 8096 	bne.w	8084572 <spiffs_object_read+0x212>
        fd->cursor_objix_pix = objix_pix;
 8084446:	f8bd 301e 	ldrh.w	r3, [sp, #30]
        fd->offset = cur_offset;
 808444a:	f8c6 8014 	str.w	r8, [r6, #20]
        fd->cursor_objix_pix = objix_pix;
 808444e:	81f3      	strh	r3, [r6, #14]
        fd->cursor_objix_spix = cur_objix_spix;
 8084450:	8235      	strh	r5, [r6, #16]
      if (cur_objix_spix == 0) {
 8084452:	2d00      	cmp	r5, #0
 8084454:	d16c      	bne.n	8084530 <spiffs_object_read+0x1d0>
        data_pix = ((spiffs_page_ix*)((u8_t *)objix_hdr + sizeof(spiffs_page_object_ix_header)))[data_spix];
 8084456:	f04f 0b00 	mov.w	fp, #0
 808445a:	9b02      	ldr	r3, [sp, #8]
 808445c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8084460:	f8b3 902d 	ldrh.w	r9, [r3, #45]	; 0x2d
    len_to_read = MIN(len_to_read, SPIFFS_DATA_PAGE_SIZE(fs) - (cur_offset % SPIFFS_DATA_PAGE_SIZE(fs)));
 8084464:	69f9      	ldr	r1, [r7, #28]
    u32_t len_to_read = offset + len - cur_offset;
 8084466:	ebaa 0a08 	sub.w	sl, sl, r8
    len_to_read = MIN(len_to_read, SPIFFS_DATA_PAGE_SIZE(fs) - (cur_offset % SPIFFS_DATA_PAGE_SIZE(fs)));
 808446a:	1f4a      	subs	r2, r1, #5
 808446c:	fbb8 f3f2 	udiv	r3, r8, r2
 8084470:	fb02 8013 	mls	r0, r2, r3, r8
    len_to_read = MIN(len_to_read, fd->size);
 8084474:	68b3      	ldr	r3, [r6, #8]
    len_to_read = MIN(len_to_read, SPIFFS_DATA_PAGE_SIZE(fs) - (cur_offset % SPIFFS_DATA_PAGE_SIZE(fs)));
 8084476:	1a15      	subs	r5, r2, r0
 8084478:	459a      	cmp	sl, r3
 808447a:	bf28      	it	cs
 808447c:	469a      	movcs	sl, r3
    len_to_read = MIN(len_to_read, fd->size);
 808447e:	4555      	cmp	r5, sl
 8084480:	bf28      	it	cs
 8084482:	4655      	movcs	r5, sl
    SPIFFS_DBG("read: offset:"_SPIPRIi" rd:"_SPIPRIi" data spix:"_SPIPRIsp" is data_pix:"_SPIPRIpg" addr:"_SPIPRIad"\n", cur_offset, len_to_read, data_spix, data_pix,
 8084484:	693b      	ldr	r3, [r7, #16]
 8084486:	462a      	mov	r2, r5
 8084488:	3305      	adds	r3, #5
 808448a:	4403      	add	r3, r0
 808448c:	fb09 3301 	mla	r3, r9, r1, r3
 8084490:	483d      	ldr	r0, [pc, #244]	; (8084588 <spiffs_object_read+0x228>)
 8084492:	e9cd 9300 	strd	r9, r3, [sp]
 8084496:	4641      	mov	r1, r8
 8084498:	4623      	mov	r3, r4
 808449a:	f008 fb39 	bl	808cb10 <spiffsParticleInfoLog>
    if (len_to_read <= 0) {
 808449e:	2d00      	cmp	r5, #0
 80844a0:	d069      	beq.n	8084576 <spiffs_object_read+0x216>
    res = spiffs_page_data_check(fs, fd, data_pix, data_spix);
 80844a2:	4623      	mov	r3, r4
 80844a4:	464a      	mov	r2, r9
 80844a6:	4638      	mov	r0, r7
 80844a8:	1d31      	adds	r1, r6, #4
 80844aa:	f7fd fd65 	bl	8081f78 <spiffs_page_data_check.isra.0>
    SPIFFS_CHECK_RES(res);
 80844ae:	2800      	cmp	r0, #0
 80844b0:	db3b      	blt.n	808452a <spiffs_object_read+0x1ca>
    res = _spiffs_rd(
 80844b2:	69f8      	ldr	r0, [r7, #28]
 80844b4:	6939      	ldr	r1, [r7, #16]
 80844b6:	1f43      	subs	r3, r0, #5
 80844b8:	fbb8 f2f3 	udiv	r2, r8, r3
 80844bc:	fb03 8212 	mls	r2, r3, r2, r8
 80844c0:	3105      	adds	r1, #5
 80844c2:	1853      	adds	r3, r2, r1
 80844c4:	9a04      	ldr	r2, [sp, #16]
 80844c6:	fb00 3309 	mla	r3, r0, r9, r3
 80844ca:	e9cd 5200 	strd	r5, r2, [sp]
 80844ce:	2117      	movs	r1, #23
 80844d0:	4638      	mov	r0, r7
 80844d2:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
 80844d6:	f7fb fea9 	bl	808022c <spiffs_phys_rd>
    SPIFFS_CHECK_RES(res);
 80844da:	2800      	cmp	r0, #0
 80844dc:	db25      	blt.n	808452a <spiffs_object_read+0x1ca>
    dst += len_to_read;
 80844de:	9b04      	ldr	r3, [sp, #16]
    cur_offset += len_to_read;
 80844e0:	44a8      	add	r8, r5
    dst += len_to_read;
 80844e2:	442b      	add	r3, r5
    data_spix++;
 80844e4:	3401      	adds	r4, #1
    dst += len_to_read;
 80844e6:	9304      	str	r3, [sp, #16]
    fd->offset = cur_offset;
 80844e8:	f8c6 8014 	str.w	r8, [r6, #20]
    data_spix++;
 80844ec:	b2a4      	uxth	r4, r4
 80844ee:	e74a      	b.n	8084386 <spiffs_object_read+0x26>
          SPIFFS_DBG("read: find objix "_SPIPRIid":"_SPIPRIsp"\n", fd->obj_id, cur_objix_spix);
 80844f0:	462a      	mov	r2, r5
 80844f2:	88f1      	ldrh	r1, [r6, #6]
 80844f4:	4825      	ldr	r0, [pc, #148]	; (808458c <spiffs_object_read+0x22c>)
 80844f6:	f008 fb0b 	bl	808cb10 <spiffsParticleInfoLog>
          if (fd->cursor_objix_spix == cur_objix_spix) {
 80844fa:	8a33      	ldrh	r3, [r6, #16]
 80844fc:	42ab      	cmp	r3, r5
 80844fe:	d103      	bne.n	8084508 <spiffs_object_read+0x1a8>
            objix_pix = fd->cursor_objix_pix;
 8084500:	89f3      	ldrh	r3, [r6, #14]
 8084502:	f8ad 301e 	strh.w	r3, [sp, #30]
 8084506:	e76d      	b.n	80843e4 <spiffs_object_read+0x84>
            res = spiffs_obj_lu_find_id_and_span(fs, fd->obj_id | SPIFFS_OBJ_ID_IX_FLAG, cur_objix_spix, 0, &objix_pix);
 8084508:	88f1      	ldrh	r1, [r6, #6]
 808450a:	f10d 031e 	add.w	r3, sp, #30
 808450e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8084512:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8084516:	9300      	str	r3, [sp, #0]
 8084518:	462a      	mov	r2, r5
 808451a:	2300      	movs	r3, #0
 808451c:	4638      	mov	r0, r7
 808451e:	b289      	uxth	r1, r1
 8084520:	f7fe f8e6 	bl	80826f0 <spiffs_obj_lu_find_id_and_span>
            SPIFFS_CHECK_RES(res);
 8084524:	2800      	cmp	r0, #0
 8084526:	f6bf af5d 	bge.w	80843e4 <spiffs_object_read+0x84>
}
 808452a:	b009      	add	sp, #36	; 0x24
 808452c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084530:	69fa      	ldr	r2, [r7, #28]
        data_pix = ((spiffs_page_ix*)((u8_t *)objix + sizeof(spiffs_page_object_ix)))[SPIFFS_OBJ_IX_ENTRY(fs, data_spix)];
 8084532:	46ab      	mov	fp, r5
 8084534:	f1a2 012d 	sub.w	r1, r2, #45	; 0x2d
 8084538:	ebb4 0f51 	cmp.w	r4, r1, lsr #1
 808453c:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8084540:	bf21      	itttt	cs
 8084542:	3a08      	subcs	r2, #8
 8084544:	1ae1      	subcs	r1, r4, r3
 8084546:	0852      	lsrcs	r2, r2, #1
 8084548:	fbb1 f3f2 	udivcs	r3, r1, r2
 808454c:	bf2c      	ite	cs
 808454e:	fb02 1313 	mlscs	r3, r2, r3, r1
 8084552:	1d23      	addcc	r3, r4, #4
 8084554:	9a02      	ldr	r2, [sp, #8]
 8084556:	bf28      	it	cs
 8084558:	3304      	addcs	r3, #4
 808455a:	005b      	lsls	r3, r3, #1
 808455c:	f832 9003 	ldrh.w	r9, [r2, r3]
 8084560:	e780      	b.n	8084464 <spiffs_object_read+0x104>
        SPIFFS_VALIDATE_OBJIX(objix->p_hdr, fd->obj_id, cur_objix_spix);
 8084562:	480b      	ldr	r0, [pc, #44]	; (8084590 <spiffs_object_read+0x230>)
 8084564:	e7e1      	b.n	808452a <spiffs_object_read+0x1ca>
 8084566:	480b      	ldr	r0, [pc, #44]	; (8084594 <spiffs_object_read+0x234>)
 8084568:	e7df      	b.n	808452a <spiffs_object_read+0x1ca>
 808456a:	480b      	ldr	r0, [pc, #44]	; (8084598 <spiffs_object_read+0x238>)
 808456c:	e7dd      	b.n	808452a <spiffs_object_read+0x1ca>
 808456e:	480b      	ldr	r0, [pc, #44]	; (808459c <spiffs_object_read+0x23c>)
 8084570:	e7db      	b.n	808452a <spiffs_object_read+0x1ca>
 8084572:	480b      	ldr	r0, [pc, #44]	; (80845a0 <spiffs_object_read+0x240>)
 8084574:	e7d9      	b.n	808452a <spiffs_object_read+0x1ca>
      res = SPIFFS_ERR_END_OF_OBJECT;
 8084576:	480b      	ldr	r0, [pc, #44]	; (80845a4 <spiffs_object_read+0x244>)
 8084578:	e7d7      	b.n	808452a <spiffs_object_read+0x1ca>
      if (prev_objix_spix != cur_objix_spix) {
 808457a:	f1bb 0f00 	cmp.w	fp, #0
 808457e:	f47f af2d 	bne.w	80843dc <spiffs_object_read+0x7c>
 8084582:	e768      	b.n	8084456 <spiffs_object_read+0xf6>
 8084584:	08093459 	.word	0x08093459
 8084588:	0809348d 	.word	0x0809348d
 808458c:	0809343d 	.word	0x0809343d
 8084590:	ffffd8e4 	.word	0xffffd8e4
 8084594:	ffffd8ec 	.word	0xffffd8ec
 8084598:	ffffd8eb 	.word	0xffffd8eb
 808459c:	ffffd8ea 	.word	0xffffd8ea
 80845a0:	ffffd8e3 	.word	0xffffd8e3
 80845a4:	ffffd8ed 	.word	0xffffd8ed

080845a8 <spiffs_obj_lu_find_free_obj_id>:
s32_t spiffs_obj_lu_find_free_obj_id(spiffs *fs, spiffs_obj_id *obj_id, const u8_t *conflicting_name) {
 80845a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80845ac:	4605      	mov	r5, r0
 80845ae:	4690      	mov	r8, r2
  u32_t max_objects = (fs->block_count * SPIFFS_OBJ_LOOKUP_MAX_ENTRIES(fs)) / 2;
 80845b0:	e9d5 0307 	ldrd	r0, r3, [r5, #28]
 80845b4:	69aa      	ldr	r2, [r5, #24]
 80845b6:	2401      	movs	r4, #1
 80845b8:	fbb2 f2f0 	udiv	r2, r2, r0
s32_t spiffs_obj_lu_find_free_obj_id(spiffs *fs, spiffs_obj_id *obj_id, const u8_t *conflicting_name) {
 80845bc:	460f      	mov	r7, r1
  u32_t max_objects = (fs->block_count * SPIFFS_OBJ_LOOKUP_MAX_ENTRIES(fs)) / 2;
 80845be:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
 80845c2:	ea4f 0142 	mov.w	r1, r2, lsl #1
 80845c6:	bf94      	ite	ls
 80845c8:	fbb1 f1f0 	udivls	r1, r1, r0
 80845cc:	4621      	movhi	r1, r4
 80845ce:	1a52      	subs	r2, r2, r1
 80845d0:	4353      	muls	r3, r2
 80845d2:	085b      	lsrs	r3, r3, #1
  state.max_obj_id = max_objects + 1;
 80845d4:	3301      	adds	r3, #1
 80845d6:	b29a      	uxth	r2, r3
  if (state.max_obj_id & SPIFFS_OBJ_ID_IX_FLAG) {
 80845d8:	041b      	lsls	r3, r3, #16
    state.max_obj_id = ((spiffs_obj_id)-1) & ~SPIFFS_OBJ_ID_IX_FLAG;
 80845da:	bf48      	it	mi
 80845dc:	f647 73ff 	movwmi	r3, #32767	; 0x7fff
s32_t spiffs_obj_lu_find_free_obj_id(spiffs *fs, spiffs_obj_id *obj_id, const u8_t *conflicting_name) {
 80845e0:	b08d      	sub	sp, #52	; 0x34
    state.max_obj_id = ((spiffs_obj_id)-1) & ~SPIFFS_OBJ_ID_IX_FLAG;
 80845e2:	bf48      	it	mi
 80845e4:	f8ad 3026 	strhmi.w	r3, [sp, #38]	; 0x26
  state.compaction = 0;
 80845e8:	f04f 0300 	mov.w	r3, #0
  state.conflicting_name = conflicting_name;
 80845ec:	e9cd 380a 	strd	r3, r8, [sp, #40]	; 0x28
        SPIFFS_DBG("free_obj_id: COMP select index:"_SPIPRIi" min_count:"_SPIPRIi" min:"_SPIPRIid" max:"_SPIPRIid" compact:"_SPIPRIi"\n", min_i, min_count, state.min_obj_id, state.max_obj_id, state.compaction);
 80845f0:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8084798 <spiffs_obj_lu_find_free_obj_id+0x1f0>
          SPIFFS_DBG("free_obj_id: COMP SEL chunk:"_SPIPRIi" min:"_SPIPRIid" -> "_SPIPRIid"\n", state.compaction, state.min_obj_id, state.min_obj_id + min_i *  state.compaction);
 80845f4:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 808479c <spiffs_obj_lu_find_free_obj_id+0x1f4>
      SPIFFS_DBG("free_obj_id: COMP min:"_SPIPRIid" max:"_SPIPRIid" compact:"_SPIPRIi"\n", state.min_obj_id, state.max_obj_id, state.compaction);
 80845f8:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 80847a0 <spiffs_obj_lu_find_free_obj_id+0x1f8>
  state.min_obj_id = 1;
 80845fc:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
  state.max_obj_id = max_objects + 1;
 8084600:	bf58      	it	pl
 8084602:	f8ad 2026 	strhpl.w	r2, [sp, #38]	; 0x26
    if (state.max_obj_id - state.min_obj_id <= (spiffs_obj_id)SPIFFS_CFG_LOG_PAGE_SZ(fs)*8) {
 8084606:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 808460a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 808460e:	f8d5 e01c 	ldr.w	lr, [r5, #28]
 8084612:	1ad1      	subs	r1, r2, r3
 8084614:	fa1f f08e 	uxth.w	r0, lr
 8084618:	ebb1 0fc0 	cmp.w	r1, r0, lsl #3
 808461c:	dc39      	bgt.n	8084692 <spiffs_obj_lu_find_free_obj_id+0xea>
      SPIFFS_DBG("free_obj_id: BITM min:"_SPIPRIid" max:"_SPIPRIid"\n", state.min_obj_id, state.max_obj_id);
 808461e:	4619      	mov	r1, r3
 8084620:	4857      	ldr	r0, [pc, #348]	; (8084780 <spiffs_obj_lu_find_free_obj_id+0x1d8>)
 8084622:	f008 fa75 	bl	808cb10 <spiffsParticleInfoLog>
      memset(fs->work, 0, SPIFFS_CFG_LOG_PAGE_SZ(fs));
 8084626:	2100      	movs	r1, #0
 8084628:	69ea      	ldr	r2, [r5, #28]
 808462a:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 808462c:	f00d fc4a 	bl	8091ec4 <memset>
      res = spiffs_obj_lu_find_entry_visitor(fs, 0, 0, 0, 0, spiffs_obj_lu_find_free_obj_id_bitmap_v,
 8084630:	2300      	movs	r3, #0
 8084632:	aa09      	add	r2, sp, #36	; 0x24
 8084634:	e9cd 8202 	strd	r8, r2, [sp, #8]
 8084638:	4a52      	ldr	r2, [pc, #328]	; (8084784 <spiffs_obj_lu_find_free_obj_id+0x1dc>)
 808463a:	4619      	mov	r1, r3
 808463c:	e9cd 3200 	strd	r3, r2, [sp]
 8084640:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8084644:	461a      	mov	r2, r3
 8084646:	4628      	mov	r0, r5
 8084648:	f7fd fdf4 	bl	8082234 <spiffs_obj_lu_find_entry_visitor>
      if (res == SPIFFS_VIS_END) res = SPIFFS_OK;
 808464c:	4b4e      	ldr	r3, [pc, #312]	; (8084788 <spiffs_obj_lu_find_free_obj_id+0x1e0>)
 808464e:	4298      	cmp	r0, r3
 8084650:	d001      	beq.n	8084656 <spiffs_obj_lu_find_free_obj_id+0xae>
      SPIFFS_CHECK_RES(res);
 8084652:	2800      	cmp	r0, #0
 8084654:	db15      	blt.n	8084682 <spiffs_obj_lu_find_free_obj_id+0xda>
      for (i = 0; i < SPIFFS_CFG_LOG_PAGE_SZ(fs); i++) {
 8084656:	2100      	movs	r1, #0
 8084658:	69ea      	ldr	r2, [r5, #28]
 808465a:	428a      	cmp	r2, r1
 808465c:	d101      	bne.n	8084662 <spiffs_obj_lu_find_free_obj_id+0xba>
          return SPIFFS_ERR_FULL;
 808465e:	484b      	ldr	r0, [pc, #300]	; (808478c <spiffs_obj_lu_find_free_obj_id+0x1e4>)
 8084660:	e00f      	b.n	8084682 <spiffs_obj_lu_find_free_obj_id+0xda>
        u8_t mask = fs->work[i];
 8084662:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8084664:	5c5e      	ldrb	r6, [r3, r1]
        if (mask == 0xff) {
 8084666:	2eff      	cmp	r6, #255	; 0xff
 8084668:	d011      	beq.n	808468e <spiffs_obj_lu_find_free_obj_id+0xe6>
        for (j = 0; j < 8; j++) {
 808466a:	2300      	movs	r3, #0
          if ((mask & (1<<j)) == 0) {
 808466c:	fa46 f003 	asr.w	r0, r6, r3
 8084670:	f010 0001 	ands.w	r0, r0, #1
 8084674:	d108      	bne.n	8084688 <spiffs_obj_lu_find_free_obj_id+0xe0>
            *obj_id = (i<<3)+j+state.min_obj_id;
 8084676:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 808467a:	4413      	add	r3, r2
 808467c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8084680:	803b      	strh	r3, [r7, #0]
}
 8084682:	b00d      	add	sp, #52	; 0x34
 8084684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (j = 0; j < 8; j++) {
 8084688:	3301      	adds	r3, #1
 808468a:	2b08      	cmp	r3, #8
 808468c:	d1ee      	bne.n	808466c <spiffs_obj_lu_find_free_obj_id+0xc4>
      for (i = 0; i < SPIFFS_CFG_LOG_PAGE_SZ(fs); i++) {
 808468e:	3101      	adds	r1, #1
 8084690:	e7e3      	b.n	808465a <spiffs_obj_lu_find_free_obj_id+0xb2>
      if (state.compaction != 0) {
 8084692:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8084696:	f1bc 0f00 	cmp.w	ip, #0
 808469a:	d124      	bne.n	80846e6 <spiffs_obj_lu_find_free_obj_id+0x13e>
      state.compaction = (state.max_obj_id-state.min_obj_id) / ((SPIFFS_CFG_LOG_PAGE_SZ(fs) / sizeof(u8_t)));
 808469c:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 80846a0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80846a4:	69e8      	ldr	r0, [r5, #28]
 80846a6:	1a53      	subs	r3, r2, r1
 80846a8:	fbb3 f3f0 	udiv	r3, r3, r0
      res = spiffs_obj_lu_find_entry_visitor(fs, 0, 0, 0, 0, spiffs_obj_lu_find_free_obj_id_compact_v, &state, 0, 0, 0);
 80846ac:	2600      	movs	r6, #0
      SPIFFS_DBG("free_obj_id: COMP min:"_SPIPRIid" max:"_SPIPRIid" compact:"_SPIPRIi"\n", state.min_obj_id, state.max_obj_id, state.compaction);
 80846ae:	4658      	mov	r0, fp
      state.compaction = (state.max_obj_id-state.min_obj_id) / ((SPIFFS_CFG_LOG_PAGE_SZ(fs) / sizeof(u8_t)));
 80846b0:	930a      	str	r3, [sp, #40]	; 0x28
      SPIFFS_DBG("free_obj_id: COMP min:"_SPIPRIid" max:"_SPIPRIid" compact:"_SPIPRIi"\n", state.min_obj_id, state.max_obj_id, state.compaction);
 80846b2:	f008 fa2d 	bl	808cb10 <spiffsParticleInfoLog>
      memset(fs->work, 0, SPIFFS_CFG_LOG_PAGE_SZ(fs));
 80846b6:	2100      	movs	r1, #0
 80846b8:	69ea      	ldr	r2, [r5, #28]
 80846ba:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80846bc:	f00d fc02 	bl	8091ec4 <memset>
      res = spiffs_obj_lu_find_entry_visitor(fs, 0, 0, 0, 0, spiffs_obj_lu_find_free_obj_id_compact_v, &state, 0, 0, 0);
 80846c0:	ab09      	add	r3, sp, #36	; 0x24
 80846c2:	9302      	str	r3, [sp, #8]
 80846c4:	4b32      	ldr	r3, [pc, #200]	; (8084790 <spiffs_obj_lu_find_free_obj_id+0x1e8>)
 80846c6:	4632      	mov	r2, r6
 80846c8:	e9cd 6300 	strd	r6, r3, [sp]
 80846cc:	4631      	mov	r1, r6
 80846ce:	4633      	mov	r3, r6
 80846d0:	4628      	mov	r0, r5
 80846d2:	e9cd 6604 	strd	r6, r6, [sp, #16]
 80846d6:	9603      	str	r6, [sp, #12]
 80846d8:	f7fd fdac 	bl	8082234 <spiffs_obj_lu_find_entry_visitor>
      if (res == SPIFFS_VIS_END) res = SPIFFS_OK;
 80846dc:	4c2a      	ldr	r4, [pc, #168]	; (8084788 <spiffs_obj_lu_find_free_obj_id+0x1e0>)
 80846de:	42a0      	cmp	r0, r4
 80846e0:	d147      	bne.n	8084772 <spiffs_obj_lu_find_free_obj_id+0x1ca>
      state.conflicting_name = 0; // searched for conflicting name once, no need to do it again
 80846e2:	960b      	str	r6, [sp, #44]	; 0x2c
  while (res == SPIFFS_OK && free_obj_id == SPIFFS_OBJ_ID_FREE) {
 80846e4:	e78f      	b.n	8084606 <spiffs_obj_lu_find_free_obj_id+0x5e>
        u8_t *map = (u8_t *)fs->work;
 80846e6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
        u8_t min_count = 0xff;
 80846e8:	26ff      	movs	r6, #255	; 0xff
        u8_t *map = (u8_t *)fs->work;
 80846ea:	9107      	str	r1, [sp, #28]
        u32_t i, min_i = 0;
 80846ec:	2100      	movs	r1, #0
        for (i = 0; i < SPIFFS_CFG_LOG_PAGE_SZ(fs)/sizeof(u8_t); i++) {
 80846ee:	4608      	mov	r0, r1
 80846f0:	4586      	cmp	lr, r0
 80846f2:	d105      	bne.n	8084700 <spiffs_obj_lu_find_free_obj_id+0x158>
        if (min_count == state.compaction) {
 80846f4:	45b4      	cmp	ip, r6
 80846f6:	d11f      	bne.n	8084738 <spiffs_obj_lu_find_free_obj_id+0x190>
          SPIFFS_DBG("free_obj_id: compacted table is full\n");
 80846f8:	4826      	ldr	r0, [pc, #152]	; (8084794 <spiffs_obj_lu_find_free_obj_id+0x1ec>)
 80846fa:	f008 fa09 	bl	808cb10 <spiffsParticleInfoLog>
 80846fe:	e7ae      	b.n	808465e <spiffs_obj_lu_find_free_obj_id+0xb6>
          if (map[i] < min_count) {
 8084700:	9c07      	ldr	r4, [sp, #28]
 8084702:	5c24      	ldrb	r4, [r4, r0]
 8084704:	42b4      	cmp	r4, r6
 8084706:	d202      	bcs.n	808470e <spiffs_obj_lu_find_free_obj_id+0x166>
            if (min_count == 0) {
 8084708:	b11c      	cbz	r4, 8084712 <spiffs_obj_lu_find_free_obj_id+0x16a>
 808470a:	4626      	mov	r6, r4
 808470c:	4601      	mov	r1, r0
        for (i = 0; i < SPIFFS_CFG_LOG_PAGE_SZ(fs)/sizeof(u8_t); i++) {
 808470e:	3001      	adds	r0, #1
 8084710:	e7ee      	b.n	80846f0 <spiffs_obj_lu_find_free_obj_id+0x148>
 8084712:	4601      	mov	r1, r0
        SPIFFS_DBG("free_obj_id: COMP select index:"_SPIPRIi" min_count:"_SPIPRIi" min:"_SPIPRIid" max:"_SPIPRIid" compact:"_SPIPRIi"\n", min_i, min_count, state.min_obj_id, state.max_obj_id, state.compaction);
 8084714:	4648      	mov	r0, r9
 8084716:	e9cd 2c00 	strd	r2, ip, [sp]
 808471a:	4622      	mov	r2, r4
 808471c:	9107      	str	r1, [sp, #28]
 808471e:	f008 f9f7 	bl	808cb10 <spiffsParticleInfoLog>
        if (min_count == 0) {
 8084722:	9907      	ldr	r1, [sp, #28]
 8084724:	980a      	ldr	r0, [sp, #40]	; 0x28
 8084726:	b28e      	uxth	r6, r1
 8084728:	b944      	cbnz	r4, 808473c <spiffs_obj_lu_find_free_obj_id+0x194>
          *obj_id = min_i * state.compaction + state.min_obj_id;
 808472a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 808472e:	fb00 1606 	mla	r6, r0, r6, r1
          return SPIFFS_OK;
 8084732:	4620      	mov	r0, r4
          *obj_id = min_i * state.compaction + state.min_obj_id;
 8084734:	803e      	strh	r6, [r7, #0]
          return SPIFFS_OK;
 8084736:	e7a4      	b.n	8084682 <spiffs_obj_lu_find_free_obj_id+0xda>
 8084738:	4634      	mov	r4, r6
 808473a:	e7eb      	b.n	8084714 <spiffs_obj_lu_find_free_obj_id+0x16c>
          SPIFFS_DBG("free_obj_id: COMP SEL chunk:"_SPIPRIi" min:"_SPIPRIid" -> "_SPIPRIid"\n", state.compaction, state.min_obj_id, state.min_obj_id + min_i *  state.compaction);
 808473c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8084740:	fb01 2300 	mla	r3, r1, r0, r2
 8084744:	4601      	mov	r1, r0
 8084746:	4650      	mov	r0, sl
 8084748:	f008 f9e2 	bl	808cb10 <spiffsParticleInfoLog>
          state.min_obj_id += min_i *  state.compaction;
 808474c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8084750:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
        if ((state.max_obj_id - state.min_obj_id <= (spiffs_obj_id)SPIFFS_CFG_LOG_PAGE_SZ(fs)*8)) {
 8084754:	8baa      	ldrh	r2, [r5, #28]
          state.min_obj_id += min_i *  state.compaction;
 8084756:	fb06 1603 	mla	r6, r6, r3, r1
 808475a:	b2b6      	uxth	r6, r6
          state.max_obj_id = state.min_obj_id + state.compaction;
 808475c:	4433      	add	r3, r6
 808475e:	b29b      	uxth	r3, r3
 8084760:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        if ((state.max_obj_id - state.min_obj_id <= (spiffs_obj_id)SPIFFS_CFG_LOG_PAGE_SZ(fs)*8)) {
 8084764:	1b9b      	subs	r3, r3, r6
 8084766:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
          state.min_obj_id += min_i *  state.compaction;
 808476a:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
        if ((state.max_obj_id - state.min_obj_id <= (spiffs_obj_id)SPIFFS_CFG_LOG_PAGE_SZ(fs)*8)) {
 808476e:	dc95      	bgt.n	808469c <spiffs_obj_lu_find_free_obj_id+0xf4>
 8084770:	e749      	b.n	8084606 <spiffs_obj_lu_find_free_obj_id+0x5e>
      SPIFFS_CHECK_RES(res);
 8084772:	2800      	cmp	r0, #0
 8084774:	db85      	blt.n	8084682 <spiffs_obj_lu_find_free_obj_id+0xda>
      state.conflicting_name = 0; // searched for conflicting name once, no need to do it again
 8084776:	960b      	str	r6, [sp, #44]	; 0x2c
  while (res == SPIFFS_OK && free_obj_id == SPIFFS_OBJ_ID_FREE) {
 8084778:	f43f af45 	beq.w	8084606 <spiffs_obj_lu_find_free_obj_id+0x5e>
 808477c:	e781      	b.n	8084682 <spiffs_obj_lu_find_free_obj_id+0xda>
 808477e:	bf00      	nop
 8084780:	080934ce 	.word	0x080934ce
 8084784:	08081e71 	.word	0x08081e71
 8084788:	ffffd8a8 	.word	0xffffd8a8
 808478c:	ffffd8ef 	.word	0xffffd8ef
 8084790:	08082139 	.word	0x08082139
 8084794:	08093523 	.word	0x08093523
 8084798:	08093549 	.word	0x08093549
 808479c:	08093596 	.word	0x08093596
 80847a0:	080934f3 	.word	0x080934f3

080847a4 <spiffs_fd_find_new>:
#endif

s32_t spiffs_fd_find_new(spiffs *fs, spiffs_fd **fd, const char *name) {
 80847a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80847a8:	4604      	mov	r4, r0
 80847aa:	4689      	mov	r9, r1
#if SPIFFS_TEMPORAL_FD_CACHE
  u32_t i;
  u16_t min_score = 0xffff;
  u32_t cand_ix = (u32_t)-1;
  u32_t name_hash = name ? spiffs_hash(fs, (const u8_t *)name) : 0;
 80847ac:	4615      	mov	r5, r2
 80847ae:	4610      	mov	r0, r2
 80847b0:	b10a      	cbz	r2, 80847b6 <spiffs_fd_find_new+0x12>
 80847b2:	f7fd fbd1 	bl	8081f58 <spiffs_hash.isra.0>
  spiffs_fd *fds = (spiffs_fd *)fs->fd_space;
 80847b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c

  if (name) {
 80847b8:	b125      	cbz	r5, 80847c4 <spiffs_fd_find_new+0x20>
 80847ba:	461a      	mov	r2, r3
    // first, decrease score of all closed descriptors
    for (i = 0; i < fs->fd_count; i++) {
 80847bc:	2700      	movs	r7, #0
 80847be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80847c0:	42b9      	cmp	r1, r7
 80847c2:	d80d      	bhi.n	80847e0 <spiffs_fd_find_new+0x3c>
      }
    }
  }

  // find the free fd with least score or name match
  for (i = 0; i < fs->fd_count; i++) {
 80847c4:	461f      	mov	r7, r3
  u32_t cand_ix = (u32_t)-1;
 80847c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  u16_t min_score = 0xffff;
 80847ca:	f64f 7cff 	movw	ip, #65535	; 0xffff
  for (i = 0; i < fs->fd_count; i++) {
 80847ce:	2100      	movs	r1, #0
 80847d0:	f8d4 8040 	ldr.w	r8, [r4, #64]	; 0x40
 80847d4:	4588      	cmp	r8, r1
 80847d6:	d10f      	bne.n	80847f8 <spiffs_fd_find_new+0x54>
        cand_ix = i;
      }
    }
  }

  if (cand_ix != (u32_t)-1) {
 80847d8:	1c51      	adds	r1, r2, #1
 80847da:	d120      	bne.n	808481e <spiffs_fd_find_new+0x7a>
    }
    cur_fd->file_nbr = cand_ix+1;
    *fd = cur_fd;
    return SPIFFS_OK;
  } else {
    return SPIFFS_ERR_OUT_OF_FILE_DESCS;
 80847dc:	482a      	ldr	r0, [pc, #168]	; (8084888 <spiffs_fd_find_new+0xe4>)
 80847de:	e04c      	b.n	808487a <spiffs_fd_find_new+0xd6>
      if (cur_fd->file_nbr == 0) {
 80847e0:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 80847e4:	b929      	cbnz	r1, 80847f2 <spiffs_fd_find_new+0x4e>
        if (cur_fd->score > 1) { // score == 0 indicates never used fd
 80847e6:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 80847e8:	2901      	cmp	r1, #1
          cur_fd->score--;
 80847ea:	bf84      	itt	hi
 80847ec:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 80847f0:	8511      	strhhi	r1, [r2, #40]	; 0x28
    for (i = 0; i < fs->fd_count; i++) {
 80847f2:	3701      	adds	r7, #1
 80847f4:	3230      	adds	r2, #48	; 0x30
 80847f6:	e7e2      	b.n	80847be <spiffs_fd_find_new+0x1a>
    if (cur_fd->file_nbr == 0) {
 80847f8:	f9b7 e004 	ldrsh.w	lr, [r7, #4]
 80847fc:	f1be 0f00 	cmp.w	lr, #0
 8084800:	d109      	bne.n	8084816 <spiffs_fd_find_new+0x72>
      if (name && cur_fd->name_hash == name_hash) {
 8084802:	b115      	cbz	r5, 808480a <spiffs_fd_find_new+0x66>
 8084804:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8084806:	4286      	cmp	r6, r0
 8084808:	d008      	beq.n	808481c <spiffs_fd_find_new+0x78>
      if (cur_fd->score < min_score) {
 808480a:	f8b7 e028 	ldrh.w	lr, [r7, #40]	; 0x28
 808480e:	45e6      	cmp	lr, ip
 8084810:	bf3c      	itt	cc
 8084812:	460a      	movcc	r2, r1
 8084814:	46f4      	movcc	ip, lr
  for (i = 0; i < fs->fd_count; i++) {
 8084816:	3101      	adds	r1, #1
 8084818:	3730      	adds	r7, #48	; 0x30
 808481a:	e7db      	b.n	80847d4 <spiffs_fd_find_new+0x30>
 808481c:	460a      	mov	r2, r1
    spiffs_fd *cur_fd = &fds[cand_ix];
 808481e:	2130      	movs	r1, #48	; 0x30
 8084820:	fb01 3302 	mla	r3, r1, r2, r3
    if (name) {
 8084824:	b325      	cbz	r5, 8084870 <spiffs_fd_find_new+0xcc>
      if (cur_fd->name_hash == name_hash && cur_fd->score > 0) {
 8084826:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8084828:	4281      	cmp	r1, r0
 808482a:	d128      	bne.n	808487e <spiffs_fd_find_new+0xda>
 808482c:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 808482e:	b331      	cbz	r1, 808487e <spiffs_fd_find_new+0xda>
        fs->cursor_block_ix = SPIFFS_BLOCK_FOR_PAGE(fs, cur_fd->objix_hdr_pix);
 8084830:	e9d4 0706 	ldrd	r0, r7, [r4, #24]
 8084834:	fbb0 f0f7 	udiv	r0, r0, r7
 8084838:	8999      	ldrh	r1, [r3, #12]
        fs->cursor_obj_lu_entry = SPIFFS_OBJ_LOOKUP_ENTRY_FOR_PAGE(fs, cur_fd->objix_hdr_pix);
 808483a:	ebb7 0f40 	cmp.w	r7, r0, lsl #1
        fs->cursor_block_ix = SPIFFS_BLOCK_FOR_PAGE(fs, cur_fd->objix_hdr_pix);
 808483e:	fbb1 f1f0 	udiv	r1, r1, r0
 8084842:	85a1      	strh	r1, [r4, #44]	; 0x2c
        fs->cursor_obj_lu_entry = SPIFFS_OBJ_LOOKUP_ENTRY_FOR_PAGE(fs, cur_fd->objix_hdr_pix);
 8084844:	899d      	ldrh	r5, [r3, #12]
 8084846:	fbb5 f1f0 	udiv	r1, r5, r0
 808484a:	fb00 5111 	mls	r1, r0, r1, r5
 808484e:	ea4f 0540 	mov.w	r5, r0, lsl #1
 8084852:	bf94      	ite	ls
 8084854:	fbb5 f0f7 	udivls	r0, r5, r7
 8084858:	2001      	movhi	r0, #1
 808485a:	1a08      	subs	r0, r1, r0
 808485c:	6320      	str	r0, [r4, #48]	; 0x30
        if (cur_fd->score < 0xffff-SPIFFS_TEMPORAL_CACHE_HIT_SCORE) {
 808485e:	f64f 70fa 	movw	r0, #65530	; 0xfffa
 8084862:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 8084864:	4281      	cmp	r1, r0
          cur_fd->score = 0xffff;
 8084866:	bf8c      	ite	hi
 8084868:	f64f 71ff 	movwhi	r1, #65535	; 0xffff
          cur_fd->score += SPIFFS_TEMPORAL_CACHE_HIT_SCORE;
 808486c:	3104      	addls	r1, #4
          cur_fd->score = 0xffff;
 808486e:	8519      	strh	r1, [r3, #40]	; 0x28
    return SPIFFS_OK;
 8084870:	2000      	movs	r0, #0
    cur_fd->file_nbr = cand_ix+1;
 8084872:	3201      	adds	r2, #1
 8084874:	809a      	strh	r2, [r3, #4]
    *fd = cur_fd;
 8084876:	f8c9 3000 	str.w	r3, [r9]
      return SPIFFS_OK;
    }
  }
  return SPIFFS_ERR_OUT_OF_FILE_DESCS;
#endif
}
 808487a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        cur_fd->score = SPIFFS_TEMPORAL_CACHE_HIT_SCORE;
 808487e:	2104      	movs	r1, #4
        cur_fd->name_hash = name_hash;
 8084880:	6258      	str	r0, [r3, #36]	; 0x24
        cur_fd->score = SPIFFS_TEMPORAL_CACHE_HIT_SCORE;
 8084882:	8519      	strh	r1, [r3, #40]	; 0x28
        cur_fd->name_hash = name_hash;
 8084884:	e7f4      	b.n	8084870 <spiffs_fd_find_new+0xcc>
 8084886:	bf00      	nop
 8084888:	ffffd8e9 	.word	0xffffd8e9

0808488c <spiffs_fd_return>:

s32_t spiffs_fd_return(spiffs *fs, spiffs_file f) {
  if (f <= 0 || f > (s16_t)fs->fd_count) {
 808488c:	2900      	cmp	r1, #0
 808488e:	dd10      	ble.n	80848b2 <spiffs_fd_return+0x26>
 8084890:	f9b0 3040 	ldrsh.w	r3, [r0, #64]	; 0x40
 8084894:	428b      	cmp	r3, r1
 8084896:	db0c      	blt.n	80848b2 <spiffs_fd_return+0x26>
    return SPIFFS_ERR_BAD_DESCRIPTOR;
  }
  spiffs_fd *fds = (spiffs_fd *)fs->fd_space;
  spiffs_fd *fd = &fds[f-1];
 8084898:	2330      	movs	r3, #48	; 0x30
 808489a:	434b      	muls	r3, r1
 808489c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80848a0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80848a2:	440b      	add	r3, r1
  if (fd->file_nbr == 0) {
 80848a4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80848a8:	b12a      	cbz	r2, 80848b6 <spiffs_fd_return+0x2a>
    return SPIFFS_ERR_FILE_CLOSED;
  }
  fd->file_nbr = 0;
 80848aa:	2000      	movs	r0, #0
 80848ac:	8098      	strh	r0, [r3, #4]
#if SPIFFS_IX_MAP
  fd->ix_map = 0;
 80848ae:	62d8      	str	r0, [r3, #44]	; 0x2c
#endif
  return SPIFFS_OK;
 80848b0:	4770      	bx	lr
    return SPIFFS_ERR_BAD_DESCRIPTOR;
 80848b2:	4802      	ldr	r0, [pc, #8]	; (80848bc <spiffs_fd_return+0x30>)
 80848b4:	4770      	bx	lr
    return SPIFFS_ERR_FILE_CLOSED;
 80848b6:	4802      	ldr	r0, [pc, #8]	; (80848c0 <spiffs_fd_return+0x34>)
}
 80848b8:	4770      	bx	lr
 80848ba:	bf00      	nop
 80848bc:	ffffd8e6 	.word	0xffffd8e6
 80848c0:	ffffd8e8 	.word	0xffffd8e8

080848c4 <spiffs_fd_get>:

s32_t spiffs_fd_get(spiffs *fs, spiffs_file f, spiffs_fd **fd) {
  if (f <= 0 || f > (s16_t)fs->fd_count) {
 80848c4:	1e0b      	subs	r3, r1, #0
 80848c6:	dd10      	ble.n	80848ea <spiffs_fd_get+0x26>
 80848c8:	f9b0 1040 	ldrsh.w	r1, [r0, #64]	; 0x40
 80848cc:	4299      	cmp	r1, r3
 80848ce:	db0c      	blt.n	80848ea <spiffs_fd_get+0x26>
    return SPIFFS_ERR_BAD_DESCRIPTOR;
  }
  spiffs_fd *fds = (spiffs_fd *)fs->fd_space;
  *fd = &fds[f-1];
 80848d0:	2130      	movs	r1, #48	; 0x30
 80848d2:	4359      	muls	r1, r3
 80848d4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80848d6:	3930      	subs	r1, #48	; 0x30
 80848d8:	4419      	add	r1, r3
 80848da:	6011      	str	r1, [r2, #0]
  if ((*fd)->file_nbr == 0) {
 80848dc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    return SPIFFS_ERR_FILE_CLOSED;
 80848e0:	4803      	ldr	r0, [pc, #12]	; (80848f0 <spiffs_fd_get+0x2c>)
  if ((*fd)->file_nbr == 0) {
 80848e2:	2b00      	cmp	r3, #0
    return SPIFFS_ERR_FILE_CLOSED;
 80848e4:	bf18      	it	ne
 80848e6:	2000      	movne	r0, #0
 80848e8:	4770      	bx	lr
    return SPIFFS_ERR_BAD_DESCRIPTOR;
 80848ea:	4802      	ldr	r0, [pc, #8]	; (80848f4 <spiffs_fd_get+0x30>)
  }
  return SPIFFS_OK;
}
 80848ec:	4770      	bx	lr
 80848ee:	bf00      	nop
 80848f0:	ffffd8e8 	.word	0xffffd8e8
 80848f4:	ffffd8e6 	.word	0xffffd8e6

080848f8 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80848f8:	b510      	push	{r4, lr}
 80848fa:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80848fc:	6880      	ldr	r0, [r0, #8]
 80848fe:	b108      	cbz	r0, 8084904 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 8084900:	f008 faec 	bl	808cedc <os_mutex_recursive_destroy>
 8084904:	4620      	mov	r0, r4
 8084906:	bd10      	pop	{r4, pc}

08084908 <_ZN17Adafruit_MAX31865C1Eaaaa>:
    @param spi_miso the SPI MISO pin to use
    @param spi_clk the SPI clock pin to use
*/
/**************************************************************************/
//
Adafruit_MAX31865::Adafruit_MAX31865(int8_t spi_cs, int8_t spi_mosi,
 8084908:	b530      	push	{r4, r5, lr}
                                     int8_t spi_miso, int8_t spi_clk)
    : spi_dev(spi_cs, spi_clk, spi_miso, spi_mosi, 1000000,
              SPI_BITORDER_MSBFIRST, SPI_MODE1) {}
 808490a:	2501      	movs	r5, #1
Adafruit_MAX31865::Adafruit_MAX31865(int8_t spi_cs, int8_t spi_mosi,
 808490c:	4604      	mov	r4, r0
 808490e:	b085      	sub	sp, #20
              SPI_BITORDER_MSBFIRST, SPI_MODE1) {}
 8084910:	e9cd 5502 	strd	r5, r5, [sp, #8]
 8084914:	4d04      	ldr	r5, [pc, #16]	; (8084928 <_ZN17Adafruit_MAX31865C1Eaaaa+0x20>)
 8084916:	e9cd 2500 	strd	r2, r5, [sp]
 808491a:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 808491e:	f000 f9e7 	bl	8084cf0 <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh>
 8084922:	4620      	mov	r0, r4
 8084924:	b005      	add	sp, #20
 8084926:	bd30      	pop	{r4, r5, pc}
 8084928:	000f4240 	.word	0x000f4240

0808492c <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>:

  return ret;
}

void Adafruit_MAX31865::readRegisterN(uint8_t addr, uint8_t buffer[],
                                      uint8_t n) {
 808492c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  addr &= 0x7F; // make sure top bit is not set
 808492e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8084932:	f88d 100f 	strb.w	r1, [sp, #15]

  spi_dev.write_then_read(&addr, 1, buffer, n);
 8084936:	21ff      	movs	r1, #255	; 0xff
 8084938:	e9cd 3100 	strd	r3, r1, [sp]
 808493c:	4613      	mov	r3, r2
 808493e:	f10d 010f 	add.w	r1, sp, #15
 8084942:	2201      	movs	r2, #1
 8084944:	f000 fb65 	bl	8085012 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
}
 8084948:	b005      	add	sp, #20
 808494a:	f85d fb04 	ldr.w	pc, [sp], #4

0808494e <_ZN17Adafruit_MAX3186513readRegister8Eh>:
  uint8_t ret = 0;
 808494e:	2300      	movs	r3, #0
uint8_t Adafruit_MAX31865::readRegister8(uint8_t addr) {
 8084950:	b507      	push	{r0, r1, r2, lr}
  uint8_t ret = 0;
 8084952:	f88d 3007 	strb.w	r3, [sp, #7]
  readRegisterN(addr, &ret, 1);
 8084956:	f10d 0207 	add.w	r2, sp, #7
 808495a:	2301      	movs	r3, #1
 808495c:	f7ff ffe6 	bl	808492c <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>
}
 8084960:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8084964:	b003      	add	sp, #12
 8084966:	f85d fb04 	ldr.w	pc, [sp], #4

0808496a <_ZN17Adafruit_MAX318659readFaultEv>:
  return readRegister8(MAX31865_FAULTSTAT_REG);
 808496a:	2107      	movs	r1, #7
 808496c:	f7ff bfef 	b.w	808494e <_ZN17Adafruit_MAX3186513readRegister8Eh>

08084970 <_ZN17Adafruit_MAX3186514readRegister16Eh>:
  uint8_t buffer[2] = {0, 0};
 8084970:	2300      	movs	r3, #0
uint16_t Adafruit_MAX31865::readRegister16(uint8_t addr) {
 8084972:	b507      	push	{r0, r1, r2, lr}
  uint8_t buffer[2] = {0, 0};
 8084974:	f8ad 3004 	strh.w	r3, [sp, #4]
  readRegisterN(addr, buffer, 2);
 8084978:	aa01      	add	r2, sp, #4
 808497a:	2302      	movs	r3, #2
 808497c:	f7ff ffd6 	bl	808492c <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>
  return ret;
 8084980:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8084984:	ba40      	rev16	r0, r0
}
 8084986:	b280      	uxth	r0, r0
 8084988:	b003      	add	sp, #12
 808498a:	f85d fb04 	ldr.w	pc, [sp], #4

0808498e <_ZN17Adafruit_MAX3186514writeRegister8Ehh>:

void Adafruit_MAX31865::writeRegister8(uint8_t addr, uint8_t data) {
 808498e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  addr |= 0x80; // make sure top bit is set

  uint8_t buffer[2] = {addr, data};
  spi_dev.write(buffer, 2);
 8084990:	2300      	movs	r3, #0
  addr |= 0x80; // make sure top bit is set
 8084992:	f061 017f 	orn	r1, r1, #127	; 0x7f
  uint8_t buffer[2] = {addr, data};
 8084996:	f88d 100c 	strb.w	r1, [sp, #12]
 808499a:	f88d 200d 	strb.w	r2, [sp, #13]
  spi_dev.write(buffer, 2);
 808499e:	9300      	str	r3, [sp, #0]
 80849a0:	2202      	movs	r2, #2
 80849a2:	a903      	add	r1, sp, #12
 80849a4:	f000 fb03 	bl	8084fae <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
}
 80849a8:	b005      	add	sp, #20
 80849aa:	f85d fb04 	ldr.w	pc, [sp], #4

080849ae <_ZN17Adafruit_MAX3186510clearFaultEv>:
void Adafruit_MAX31865::clearFault(void) {
 80849ae:	b510      	push	{r4, lr}
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
 80849b0:	2100      	movs	r1, #0
void Adafruit_MAX31865::clearFault(void) {
 80849b2:	4604      	mov	r4, r0
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
 80849b4:	f7ff ffcb 	bl	808494e <_ZN17Adafruit_MAX3186513readRegister8Eh>
  t &= ~0x2C;
 80849b8:	f000 02d3 	and.w	r2, r0, #211	; 0xd3
  writeRegister8(MAX31865_CONFIG_REG, t);
 80849bc:	2100      	movs	r1, #0
 80849be:	4620      	mov	r0, r4
}
 80849c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister8(MAX31865_CONFIG_REG, t);
 80849c4:	f042 0202 	orr.w	r2, r2, #2
 80849c8:	f7ff bfe1 	b.w	808498e <_ZN17Adafruit_MAX3186514writeRegister8Ehh>

080849cc <_ZN17Adafruit_MAX3186510enableBiasEb>:
void Adafruit_MAX31865::enableBias(bool b) {
 80849cc:	b538      	push	{r3, r4, r5, lr}
 80849ce:	460d      	mov	r5, r1
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
 80849d0:	2100      	movs	r1, #0
void Adafruit_MAX31865::enableBias(bool b) {
 80849d2:	4604      	mov	r4, r0
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
 80849d4:	f7ff ffbb 	bl	808494e <_ZN17Adafruit_MAX3186513readRegister8Eh>
  if (b) {
 80849d8:	b145      	cbz	r5, 80849ec <_ZN17Adafruit_MAX3186510enableBiasEb+0x20>
    t |= MAX31865_CONFIG_BIAS; // enable bias
 80849da:	f060 027f 	orn	r2, r0, #127	; 0x7f
 80849de:	b2d2      	uxtb	r2, r2
  writeRegister8(MAX31865_CONFIG_REG, t);
 80849e0:	4620      	mov	r0, r4
}
 80849e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(MAX31865_CONFIG_REG, t);
 80849e6:	2100      	movs	r1, #0
 80849e8:	f7ff bfd1 	b.w	808498e <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
    t &= ~MAX31865_CONFIG_BIAS; // disable bias
 80849ec:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80849f0:	e7f6      	b.n	80849e0 <_ZN17Adafruit_MAX3186510enableBiasEb+0x14>

080849f2 <_ZN17Adafruit_MAX3186511autoConvertEb>:
void Adafruit_MAX31865::autoConvert(bool b) {
 80849f2:	b538      	push	{r3, r4, r5, lr}
 80849f4:	460d      	mov	r5, r1
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
 80849f6:	2100      	movs	r1, #0
void Adafruit_MAX31865::autoConvert(bool b) {
 80849f8:	4604      	mov	r4, r0
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
 80849fa:	f7ff ffa8 	bl	808494e <_ZN17Adafruit_MAX3186513readRegister8Eh>
  if (b) {
 80849fe:	b145      	cbz	r5, 8084a12 <_ZN17Adafruit_MAX3186511autoConvertEb+0x20>
    t |= MAX31865_CONFIG_MODEAUTO; // enable autoconvert
 8084a00:	f040 0240 	orr.w	r2, r0, #64	; 0x40
 8084a04:	b2d2      	uxtb	r2, r2
  writeRegister8(MAX31865_CONFIG_REG, t);
 8084a06:	4620      	mov	r0, r4
}
 8084a08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(MAX31865_CONFIG_REG, t);
 8084a0c:	2100      	movs	r1, #0
 8084a0e:	f7ff bfbe 	b.w	808498e <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
    t &= ~MAX31865_CONFIG_MODEAUTO; // disable autoconvert
 8084a12:	f000 02bf 	and.w	r2, r0, #191	; 0xbf
 8084a16:	e7f6      	b.n	8084a06 <_ZN17Adafruit_MAX3186511autoConvertEb+0x14>

08084a18 <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires>:
void Adafruit_MAX31865::setWires(max31865_numwires_t wires) {
 8084a18:	b538      	push	{r3, r4, r5, lr}
 8084a1a:	460d      	mov	r5, r1
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
 8084a1c:	2100      	movs	r1, #0
void Adafruit_MAX31865::setWires(max31865_numwires_t wires) {
 8084a1e:	4604      	mov	r4, r0
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
 8084a20:	f7ff ff95 	bl	808494e <_ZN17Adafruit_MAX3186513readRegister8Eh>
  if (wires == MAX31865_3WIRE) {
 8084a24:	2d01      	cmp	r5, #1
    t |= MAX31865_CONFIG_3WIRE;
 8084a26:	bf0c      	ite	eq
 8084a28:	f040 0210 	orreq.w	r2, r0, #16
    t &= ~MAX31865_CONFIG_3WIRE;
 8084a2c:	f000 02ef 	andne.w	r2, r0, #239	; 0xef
  writeRegister8(MAX31865_CONFIG_REG, t);
 8084a30:	f04f 0100 	mov.w	r1, #0
 8084a34:	4620      	mov	r0, r4
}
 8084a36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    t |= MAX31865_CONFIG_3WIRE;
 8084a3a:	bf08      	it	eq
 8084a3c:	b2d2      	uxtbeq	r2, r2
  writeRegister8(MAX31865_CONFIG_REG, t);
 8084a3e:	f7ff bfa6 	b.w	808498e <_ZN17Adafruit_MAX3186514writeRegister8Ehh>

08084a42 <_ZN17Adafruit_MAX318655beginE17max31865_numwires>:
bool Adafruit_MAX31865::begin(max31865_numwires_t wires) {
 8084a42:	b538      	push	{r3, r4, r5, lr}
 8084a44:	4604      	mov	r4, r0
 8084a46:	460d      	mov	r5, r1
  spi_dev.begin();
 8084a48:	f000 f9c1 	bl	8084dce <_ZN18Adafruit_SPIDevice5beginEv>
  setWires(wires);
 8084a4c:	4629      	mov	r1, r5
 8084a4e:	4620      	mov	r0, r4
 8084a50:	f7ff ffe2 	bl	8084a18 <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires>
  enableBias(false);
 8084a54:	4620      	mov	r0, r4
 8084a56:	2100      	movs	r1, #0
 8084a58:	f7ff ffb8 	bl	80849cc <_ZN17Adafruit_MAX3186510enableBiasEb>
  autoConvert(false);
 8084a5c:	2100      	movs	r1, #0
 8084a5e:	4620      	mov	r0, r4
 8084a60:	f7ff ffc7 	bl	80849f2 <_ZN17Adafruit_MAX3186511autoConvertEb>
  clearFault();
 8084a64:	4620      	mov	r0, r4
 8084a66:	f7ff ffa2 	bl	80849ae <_ZN17Adafruit_MAX3186510clearFaultEv>
}
 8084a6a:	2001      	movs	r0, #1
 8084a6c:	bd38      	pop	{r3, r4, r5, pc}

08084a6e <_ZN17Adafruit_MAX318657readRTDEv>:
uint16_t Adafruit_MAX31865::readRTD(void) {
 8084a6e:	b538      	push	{r3, r4, r5, lr}
 8084a70:	4604      	mov	r4, r0
  clearFault();
 8084a72:	f7ff ff9c 	bl	80849ae <_ZN17Adafruit_MAX3186510clearFaultEv>
  enableBias(true);
 8084a76:	2101      	movs	r1, #1
 8084a78:	4620      	mov	r0, r4
 8084a7a:	f7ff ffa7 	bl	80849cc <_ZN17Adafruit_MAX3186510enableBiasEb>
  delay(10);
 8084a7e:	200a      	movs	r0, #10
 8084a80:	f008 fdeb 	bl	808d65a <delay>
  uint8_t t = readRegister8(MAX31865_CONFIG_REG);
 8084a84:	2100      	movs	r1, #0
 8084a86:	4620      	mov	r0, r4
 8084a88:	f7ff ff61 	bl	808494e <_ZN17Adafruit_MAX3186513readRegister8Eh>
  t |= MAX31865_CONFIG_1SHOT;
 8084a8c:	f040 0220 	orr.w	r2, r0, #32
  writeRegister8(MAX31865_CONFIG_REG, t);
 8084a90:	b2d2      	uxtb	r2, r2
 8084a92:	2100      	movs	r1, #0
 8084a94:	4620      	mov	r0, r4
 8084a96:	f7ff ff7a 	bl	808498e <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
  delay(65);
 8084a9a:	2041      	movs	r0, #65	; 0x41
 8084a9c:	f008 fddd 	bl	808d65a <delay>
  uint16_t rtd = readRegister16(MAX31865_RTDMSB_REG);
 8084aa0:	2101      	movs	r1, #1
 8084aa2:	4620      	mov	r0, r4
 8084aa4:	f7ff ff64 	bl	8084970 <_ZN17Adafruit_MAX3186514readRegister16Eh>
 8084aa8:	4605      	mov	r5, r0
  enableBias(false); // Disable bias current again to reduce selfheating.
 8084aaa:	2100      	movs	r1, #0
 8084aac:	4620      	mov	r0, r4
 8084aae:	f7ff ff8d 	bl	80849cc <_ZN17Adafruit_MAX3186510enableBiasEb>
}
 8084ab2:	f3c5 004f 	ubfx	r0, r5, #1, #16
 8084ab6:	bd38      	pop	{r3, r4, r5, pc}

08084ab8 <_ZN17Adafruit_MAX3186511temperatureEff>:
float Adafruit_MAX31865::temperature(float RTDnominal, float refResistor) {
 8084ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8084aba:	4614      	mov	r4, r2
 8084abc:	460e      	mov	r6, r1
  Rt = readRTD();
 8084abe:	f7ff ffd6 	bl	8084a6e <_ZN17Adafruit_MAX318657readRTDEv>
 8084ac2:	f00c fdbd 	bl	8091640 <__aeabi_ui2f>
  Rt /= 32768;
 8084ac6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 8084aca:	f00c fe11 	bl	80916f0 <__aeabi_fmul>
  Rt *= refResistor;
 8084ace:	4621      	mov	r1, r4
 8084ad0:	f00c fe0e 	bl	80916f0 <__aeabi_fmul>
 8084ad4:	4605      	mov	r5, r0
  Z3 = (4 * RTD_B) / RTDnominal;
 8084ad6:	4630      	mov	r0, r6
 8084ad8:	f00c f99a 	bl	8090e10 <__aeabi_f2d>
 8084adc:	4602      	mov	r2, r0
 8084ade:	460b      	mov	r3, r1
 8084ae0:	a151      	add	r1, pc, #324	; (adr r1, 8084c28 <_ZN17Adafruit_MAX3186511temperatureEff+0x170>)
 8084ae2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8084ae6:	f00c fb15 	bl	8091114 <__aeabi_ddiv>
 8084aea:	f00c fca3 	bl	8091434 <__aeabi_d2f>
  temp = Z2 + (Z3 * Rt);
 8084aee:	4629      	mov	r1, r5
 8084af0:	f00c fdfe 	bl	80916f0 <__aeabi_fmul>
 8084af4:	495a      	ldr	r1, [pc, #360]	; (8084c60 <_ZN17Adafruit_MAX3186511temperatureEff+0x1a8>)
 8084af6:	f00c fcf3 	bl	80914e0 <__addsf3>
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8084afa:	f00b ff7d 	bl	80909f8 <sqrtf>
  temp = (sqrt(temp) + Z1) / Z4;
 8084afe:	4959      	ldr	r1, [pc, #356]	; (8084c64 <_ZN17Adafruit_MAX3186511temperatureEff+0x1ac>)
 8084b00:	f00c fcec 	bl	80914dc <__aeabi_fsub>
 8084b04:	4958      	ldr	r1, [pc, #352]	; (8084c68 <_ZN17Adafruit_MAX3186511temperatureEff+0x1b0>)
 8084b06:	f00c fea7 	bl	8091858 <__aeabi_fdiv>
  if (temp >= 0)
 8084b0a:	2100      	movs	r1, #0
  temp = (sqrt(temp) + Z1) / Z4;
 8084b0c:	4604      	mov	r4, r0
  if (temp >= 0)
 8084b0e:	f00c ffa1 	bl	8091a54 <__aeabi_fcmpge>
 8084b12:	2800      	cmp	r0, #0
 8084b14:	f040 8085 	bne.w	8084c22 <_ZN17Adafruit_MAX3186511temperatureEff+0x16a>
  Rt /= RTDnominal;
 8084b18:	4631      	mov	r1, r6
 8084b1a:	4628      	mov	r0, r5
 8084b1c:	f00c fe9c 	bl	8091858 <__aeabi_fdiv>
  Rt *= 100; // normalize to 100 ohm
 8084b20:	4952      	ldr	r1, [pc, #328]	; (8084c6c <_ZN17Adafruit_MAX3186511temperatureEff+0x1b4>)
 8084b22:	f00c fde5 	bl	80916f0 <__aeabi_fmul>
  rpoly *= Rt; // square
 8084b26:	4601      	mov	r1, r0
  Rt *= 100; // normalize to 100 ohm
 8084b28:	4604      	mov	r4, r0
  rpoly *= Rt; // square
 8084b2a:	f00c fde1 	bl	80916f0 <__aeabi_fmul>
 8084b2e:	4605      	mov	r5, r0
  temp += 2.2228 * rpoly;
 8084b30:	4620      	mov	r0, r4
 8084b32:	f00c f96d 	bl	8090e10 <__aeabi_f2d>
 8084b36:	a33e      	add	r3, pc, #248	; (adr r3, 8084c30 <_ZN17Adafruit_MAX3186511temperatureEff+0x178>)
 8084b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084b3c:	f00c f9c0 	bl	8090ec0 <__aeabi_dmul>
 8084b40:	a33d      	add	r3, pc, #244	; (adr r3, 8084c38 <_ZN17Adafruit_MAX3186511temperatureEff+0x180>)
 8084b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084b46:	f00c f803 	bl	8090b50 <__aeabi_dsub>
 8084b4a:	f00c fc73 	bl	8091434 <__aeabi_d2f>
  temp += 2.5859e-3 * rpoly;
 8084b4e:	f00c f95f 	bl	8090e10 <__aeabi_f2d>
 8084b52:	4606      	mov	r6, r0
 8084b54:	4628      	mov	r0, r5
 8084b56:	460f      	mov	r7, r1
 8084b58:	f00c f95a 	bl	8090e10 <__aeabi_f2d>
 8084b5c:	a338      	add	r3, pc, #224	; (adr r3, 8084c40 <_ZN17Adafruit_MAX3186511temperatureEff+0x188>)
 8084b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084b62:	f00c f9ad 	bl	8090ec0 <__aeabi_dmul>
 8084b66:	4602      	mov	r2, r0
 8084b68:	460b      	mov	r3, r1
 8084b6a:	4630      	mov	r0, r6
 8084b6c:	4639      	mov	r1, r7
 8084b6e:	f00b fff1 	bl	8090b54 <__adddf3>
 8084b72:	4606      	mov	r6, r0
 8084b74:	460f      	mov	r7, r1
  rpoly *= Rt; // ^3
 8084b76:	4620      	mov	r0, r4
 8084b78:	4629      	mov	r1, r5
 8084b7a:	f00c fdb9 	bl	80916f0 <__aeabi_fmul>
  temp += 2.5859e-3 * rpoly;
 8084b7e:	4639      	mov	r1, r7
  rpoly *= Rt; // ^3
 8084b80:	4605      	mov	r5, r0
  temp += 2.5859e-3 * rpoly;
 8084b82:	4630      	mov	r0, r6
 8084b84:	f00c fc56 	bl	8091434 <__aeabi_d2f>
  temp -= 4.8260e-6 * rpoly;
 8084b88:	f00c f942 	bl	8090e10 <__aeabi_f2d>
 8084b8c:	4606      	mov	r6, r0
 8084b8e:	4628      	mov	r0, r5
 8084b90:	460f      	mov	r7, r1
 8084b92:	f00c f93d 	bl	8090e10 <__aeabi_f2d>
 8084b96:	a32c      	add	r3, pc, #176	; (adr r3, 8084c48 <_ZN17Adafruit_MAX3186511temperatureEff+0x190>)
 8084b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084b9c:	f00c f990 	bl	8090ec0 <__aeabi_dmul>
 8084ba0:	4602      	mov	r2, r0
 8084ba2:	460b      	mov	r3, r1
 8084ba4:	4630      	mov	r0, r6
 8084ba6:	4639      	mov	r1, r7
 8084ba8:	f00b ffd2 	bl	8090b50 <__aeabi_dsub>
 8084bac:	4606      	mov	r6, r0
 8084bae:	460f      	mov	r7, r1
  rpoly *= Rt; // ^4
 8084bb0:	4620      	mov	r0, r4
 8084bb2:	4629      	mov	r1, r5
 8084bb4:	f00c fd9c 	bl	80916f0 <__aeabi_fmul>
  temp -= 4.8260e-6 * rpoly;
 8084bb8:	4639      	mov	r1, r7
  rpoly *= Rt; // ^4
 8084bba:	4605      	mov	r5, r0
  temp -= 4.8260e-6 * rpoly;
 8084bbc:	4630      	mov	r0, r6
 8084bbe:	f00c fc39 	bl	8091434 <__aeabi_d2f>
  temp -= 2.8183e-8 * rpoly;
 8084bc2:	f00c f925 	bl	8090e10 <__aeabi_f2d>
 8084bc6:	4606      	mov	r6, r0
 8084bc8:	4628      	mov	r0, r5
 8084bca:	460f      	mov	r7, r1
 8084bcc:	f00c f920 	bl	8090e10 <__aeabi_f2d>
 8084bd0:	a31f      	add	r3, pc, #124	; (adr r3, 8084c50 <_ZN17Adafruit_MAX3186511temperatureEff+0x198>)
 8084bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084bd6:	f00c f973 	bl	8090ec0 <__aeabi_dmul>
 8084bda:	4602      	mov	r2, r0
 8084bdc:	460b      	mov	r3, r1
 8084bde:	4630      	mov	r0, r6
 8084be0:	4639      	mov	r1, r7
 8084be2:	f00b ffb5 	bl	8090b50 <__aeabi_dsub>
 8084be6:	4606      	mov	r6, r0
 8084be8:	460f      	mov	r7, r1
  rpoly *= Rt; // ^5
 8084bea:	4620      	mov	r0, r4
 8084bec:	4629      	mov	r1, r5
 8084bee:	f00c fd7f 	bl	80916f0 <__aeabi_fmul>
  temp += 1.5243e-10 * rpoly;
 8084bf2:	f00c f90d 	bl	8090e10 <__aeabi_f2d>
 8084bf6:	a318      	add	r3, pc, #96	; (adr r3, 8084c58 <_ZN17Adafruit_MAX3186511temperatureEff+0x1a0>)
 8084bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084bfc:	f00c f960 	bl	8090ec0 <__aeabi_dmul>
 8084c00:	4604      	mov	r4, r0
 8084c02:	460d      	mov	r5, r1
  temp -= 2.8183e-8 * rpoly;
 8084c04:	4630      	mov	r0, r6
 8084c06:	4639      	mov	r1, r7
 8084c08:	f00c fc14 	bl	8091434 <__aeabi_d2f>
  temp += 1.5243e-10 * rpoly;
 8084c0c:	f00c f900 	bl	8090e10 <__aeabi_f2d>
 8084c10:	4602      	mov	r2, r0
 8084c12:	460b      	mov	r3, r1
 8084c14:	4620      	mov	r0, r4
 8084c16:	4629      	mov	r1, r5
 8084c18:	f00b ff9c 	bl	8090b54 <__adddf3>
 8084c1c:	f00c fc0a 	bl	8091434 <__aeabi_d2f>
 8084c20:	4604      	mov	r4, r0
}
 8084c22:	4620      	mov	r0, r4
 8084c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8084c26:	bf00      	nop
 8084c28:	ee19ce88 	.word	0xee19ce88
 8084c2c:	bec360af 	.word	0xbec360af
 8084c30:	5dcc63f1 	.word	0x5dcc63f1
 8084c34:	4001c84b 	.word	0x4001c84b
 8084c38:	e0000000 	.word	0xe0000000
 8084c3c:	406e40a3 	.word	0x406e40a3
 8084c40:	7dc882bb 	.word	0x7dc882bb
 8084c44:	3f652f06 	.word	0x3f652f06
 8084c48:	c766c293 	.word	0xc766c293
 8084c4c:	3ed43de0 	.word	0x3ed43de0
 8084c50:	513156ce 	.word	0x513156ce
 8084c54:	3e5e42e2 	.word	0x3e5e42e2
 8084c58:	61e4fa3e 	.word	0x61e4fa3e
 8084c5c:	3de4f327 	.word	0x3de4f327
 8084c60:	37938317 	.word	0x37938317
 8084c64:	3b801132 	.word	0x3b801132
 8084c68:	b59b057f 	.word	0xb59b057f
 8084c6c:	42c80000 	.word	0x42c80000

08084c70 <_ZN8particle11SPISettingsD1Ev>:
  }
 8084c70:	4770      	bx	lr

08084c72 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
 8084c72:	b510      	push	{r4, lr}
 8084c74:	4604      	mov	r4, r0
  }
 8084c76:	2110      	movs	r1, #16
 8084c78:	f00b feb5 	bl	80909e6 <_ZdlPvj>
 8084c7c:	4620      	mov	r0, r4
 8084c7e:	bd10      	pop	{r4, pc}

08084c80 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 8084c80:	b40e      	push	{r1, r2, r3}
 8084c82:	b503      	push	{r0, r1, lr}
 8084c84:	ab03      	add	r3, sp, #12
 8084c86:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 8084c8a:	2100      	movs	r1, #0
        va_start(args, format);
 8084c8c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 8084c8e:	f00a fe46 	bl	808f91e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 8084c92:	b002      	add	sp, #8
 8084c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8084c98:	b003      	add	sp, #12
 8084c9a:	4770      	bx	lr

08084c9c <_ZNK8particle11SPISettings7printToER5Print>:
  virtual size_t printTo(Print& p) const
 8084c9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8084c9e:	4604      	mov	r4, r0
    if (default_ && clock_ == 0)
 8084ca0:	7922      	ldrb	r2, [r4, #4]
  virtual size_t printTo(Print& p) const
 8084ca2:	4608      	mov	r0, r1
 8084ca4:	68a3      	ldr	r3, [r4, #8]
    if (default_ && clock_ == 0)
 8084ca6:	b132      	cbz	r2, 8084cb6 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
 8084ca8:	b9a3      	cbnz	r3, 8084cd4 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
 8084caa:	490b      	ldr	r1, [pc, #44]	; (8084cd8 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
  }
 8084cac:	b002      	add	sp, #8
 8084cae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
 8084cb2:	f00a bdfa 	b.w	808f8aa <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 8084cb6:	4a09      	ldr	r2, [pc, #36]	; (8084cdc <_ZNK8particle11SPISettings7printToER5Print+0x40>)
 8084cb8:	7b26      	ldrb	r6, [r4, #12]
 8084cba:	4d09      	ldr	r5, [pc, #36]	; (8084ce0 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
 8084cbc:	4909      	ldr	r1, [pc, #36]	; (8084ce4 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
 8084cbe:	7b64      	ldrb	r4, [r4, #13]
 8084cc0:	2e01      	cmp	r6, #1
 8084cc2:	bf18      	it	ne
 8084cc4:	4629      	movne	r1, r5
 8084cc6:	e9cd 1400 	strd	r1, r4, [sp]
 8084cca:	4907      	ldr	r1, [pc, #28]	; (8084ce8 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
 8084ccc:	f7ff ffd8 	bl	8084c80 <_ZN5Print6printfEPKcz>
  }
 8084cd0:	b002      	add	sp, #8
 8084cd2:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 8084cd4:	4a05      	ldr	r2, [pc, #20]	; (8084cec <_ZNK8particle11SPISettings7printToER5Print+0x50>)
 8084cd6:	e7ef      	b.n	8084cb8 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
 8084cd8:	080935f1 	.word	0x080935f1
 8084cdc:	08094ad5 	.word	0x08094ad5
 8084ce0:	080935ed 	.word	0x080935ed
 8084ce4:	080935e9 	.word	0x080935e9
 8084ce8:	08093607 	.word	0x08093607
 8084cec:	080935e0 	.word	0x080935e0

08084cf0 <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh>:
 *    @param  freq The SPI clock frequency to use, defaults to 1MHz
 *    @param  dataOrder The SPI data order to use for bits within each byte,
 * defaults to SPI_BITORDER_MSBFIRST
 *    @param  dataMode The SPI mode to use, defaults to SPI_MODE0
 */
Adafruit_SPIDevice::Adafruit_SPIDevice(int8_t cspin, int8_t sckpin,
 8084cf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084cf4:	468b      	mov	fp, r1
  _sck = sckpin;
  _miso = misopin;
  _mosi = mosipin;

#ifdef BUSIO_USE_FAST_PINIO
  csPort = (BusIO_PortReg *)portOutputRegister(digitalPinToPort(cspin));
 8084cf6:	261c      	movs	r6, #28
Adafruit_SPIDevice::Adafruit_SPIDevice(int8_t cspin, int8_t sckpin,
 8084cf8:	f99d 9028 	ldrsb.w	r9, [sp, #40]	; 0x28
  _cs = cspin;
 8084cfc:	7381      	strb	r1, [r0, #14]
  _sck = sckpin;
 8084cfe:	73c2      	strb	r2, [r0, #15]
  _miso = misopin;
 8084d00:	7443      	strb	r3, [r0, #17]
  _mosi = mosipin;
 8084d02:	f880 9010 	strb.w	r9, [r0, #16]
Adafruit_SPIDevice::Adafruit_SPIDevice(int8_t cspin, int8_t sckpin,
 8084d06:	4604      	mov	r4, r0
 8084d08:	4692      	mov	sl, r2
 8084d0a:	461d      	mov	r5, r3
 8084d0c:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
 8084d10:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
  csPort = (BusIO_PortReg *)portOutputRegister(digitalPinToPort(cspin));
 8084d14:	f008 f942 	bl	808cf9c <HAL_Pin_Map>
 8084d18:	fb06 fb0b 	mul.w	fp, r6, fp
 8084d1c:	f850 200b 	ldr.w	r2, [r0, fp]
 8084d20:	3214      	adds	r2, #20
 8084d22:	6222      	str	r2, [r4, #32]
  csPinMask = digitalPinToBitMask(cspin);
 8084d24:	f008 f93a 	bl	808cf9c <HAL_Pin_Map>
 8084d28:	4483      	add	fp, r0
 8084d2a:	f8bb 2004 	ldrh.w	r2, [fp, #4]
  if (mosipin != -1) {
 8084d2e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
  csPinMask = digitalPinToBitMask(cspin);
 8084d32:	6322      	str	r2, [r4, #48]	; 0x30
  if (mosipin != -1) {
 8084d34:	d00b      	beq.n	8084d4e <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh+0x5e>
    mosiPort = (BusIO_PortReg *)portOutputRegister(digitalPinToPort(mosipin));
 8084d36:	f008 f931 	bl	808cf9c <HAL_Pin_Map>
 8084d3a:	fb06 f609 	mul.w	r6, r6, r9
 8084d3e:	5983      	ldr	r3, [r0, r6]
 8084d40:	3314      	adds	r3, #20
 8084d42:	6163      	str	r3, [r4, #20]
    mosiPinMask = digitalPinToBitMask(mosipin);
 8084d44:	f008 f92a 	bl	808cf9c <HAL_Pin_Map>
 8084d48:	4406      	add	r6, r0
 8084d4a:	88b3      	ldrh	r3, [r6, #4]
 8084d4c:	6263      	str	r3, [r4, #36]	; 0x24
  }
  if (misopin != -1) {
 8084d4e:	1c6b      	adds	r3, r5, #1
 8084d50:	d00b      	beq.n	8084d6a <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh+0x7a>
    misoPort = (BusIO_PortReg *)portInputRegister(digitalPinToPort(misopin));
 8084d52:	f008 f923 	bl	808cf9c <HAL_Pin_Map>
 8084d56:	231c      	movs	r3, #28
 8084d58:	435d      	muls	r5, r3
 8084d5a:	5943      	ldr	r3, [r0, r5]
 8084d5c:	3310      	adds	r3, #16
 8084d5e:	61e3      	str	r3, [r4, #28]
    misoPinMask = digitalPinToBitMask(misopin);
 8084d60:	f008 f91c 	bl	808cf9c <HAL_Pin_Map>
 8084d64:	4405      	add	r5, r0
 8084d66:	88ab      	ldrh	r3, [r5, #4]
 8084d68:	62a3      	str	r3, [r4, #40]	; 0x28
  }
  clkPort = (BusIO_PortReg *)portOutputRegister(digitalPinToPort(sckpin));
 8084d6a:	251c      	movs	r5, #28
 8084d6c:	f008 f916 	bl	808cf9c <HAL_Pin_Map>
 8084d70:	fb05 f50a 	mul.w	r5, r5, sl
 8084d74:	5943      	ldr	r3, [r0, r5]
 8084d76:	3314      	adds	r3, #20
 8084d78:	61a3      	str	r3, [r4, #24]
  clkPinMask = digitalPinToBitMask(sckpin);
 8084d7a:	f008 f90f 	bl	808cf9c <HAL_Pin_Map>
 8084d7e:	4405      	add	r5, r0
 8084d80:	88ab      	ldrh	r3, [r5, #4]
#endif

  _freq = freq;
  _dataOrder = dataOrder;
  _dataMode = dataMode;
  _begun = false;
 8084d82:	2500      	movs	r5, #0
  clkPinMask = digitalPinToBitMask(sckpin);
 8084d84:	62e3      	str	r3, [r4, #44]	; 0x2c
  _freq = freq;
 8084d86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  _spiSetting = new SPISettings(freq, dataOrder, dataMode);
 8084d88:	2010      	movs	r0, #16
  _freq = freq;
 8084d8a:	60a3      	str	r3, [r4, #8]
  _dataOrder = dataOrder;
 8084d8c:	f884 800c 	strb.w	r8, [r4, #12]
  _dataMode = dataMode;
 8084d90:	7367      	strb	r7, [r4, #13]
  _begun = false;
 8084d92:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  _spiSetting = new SPISettings(freq, dataOrder, dataMode);
 8084d96:	f7fb f980 	bl	808009a <_Znwj>
 8084d9a:	b138      	cbz	r0, 8084dac <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh+0xbc>
      dataMode_{dataMode}
 8084d9c:	4b06      	ldr	r3, [pc, #24]	; (8084db8 <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh+0xc8>)
 8084d9e:	7105      	strb	r5, [r0, #4]
 8084da0:	6003      	str	r3, [r0, #0]
 8084da2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8084da4:	f880 800c 	strb.w	r8, [r0, #12]
 8084da8:	6083      	str	r3, [r0, #8]
 8084daa:	7347      	strb	r7, [r0, #13]
  _spi = NULL;
 8084dac:	2300      	movs	r3, #0
  _spiSetting = new SPISettings(freq, dataOrder, dataMode);
 8084dae:	6060      	str	r0, [r4, #4]
  _spi = NULL;
 8084db0:	6023      	str	r3, [r4, #0]
}
 8084db2:	4620      	mov	r0, r4
 8084db4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084db8:	0809362c 	.word	0x0809362c

08084dbc <_ZN18Adafruit_SPIDeviceD1Ev>:

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
 8084dbc:	b510      	push	{r4, lr}
 8084dbe:	4604      	mov	r4, r0
  if (_spiSetting) {
 8084dc0:	6840      	ldr	r0, [r0, #4]
 8084dc2:	b110      	cbz	r0, 8084dca <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
 8084dc4:	6803      	ldr	r3, [r0, #0]
 8084dc6:	689b      	ldr	r3, [r3, #8]
 8084dc8:	4798      	blx	r3
    _spiSetting = nullptr;
  }
}
 8084dca:	4620      	mov	r0, r4
 8084dcc:	bd10      	pop	{r4, pc}

08084dce <_ZN18Adafruit_SPIDevice5beginEv>:
/*!
 *    @brief  Initializes SPI bus and sets CS pin high
 *    @return Always returns true because there's no way to test success of SPI
 * init
 */
bool Adafruit_SPIDevice::begin(void) {
 8084dce:	b538      	push	{r3, r4, r5, lr}
 8084dd0:	4604      	mov	r4, r0
  pinMode(_cs, OUTPUT);
 8084dd2:	f990 000e 	ldrsb.w	r0, [r0, #14]
 8084dd6:	2101      	movs	r1, #1
 8084dd8:	b280      	uxth	r0, r0
 8084dda:	f00b fd1b 	bl	8090814 <pinMode>
  digitalWrite(_cs, HIGH);
 8084dde:	f994 000e 	ldrsb.w	r0, [r4, #14]
 8084de2:	2101      	movs	r1, #1
 8084de4:	b280      	uxth	r0, r0
 8084de6:	f00b fd26 	bl	8090836 <digitalWrite>

  if (_spi) { // hardware SPI
 8084dea:	6825      	ldr	r5, [r4, #0]
 8084dec:	b135      	cbz	r5, 8084dfc <_ZN18Adafruit_SPIDevice5beginEv+0x2e>
    _spi->begin();
 8084dee:	4628      	mov	r0, r5
 8084df0:	f00a fdec 	bl	808f9cc <_ZN8SPIClass5beginEv>
    if (_miso != -1) {
      pinMode(_miso, INPUT);
    }
  }

  _begun = true;
 8084df4:	2001      	movs	r0, #1
 8084df6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return true;
}
 8084dfa:	bd38      	pop	{r3, r4, r5, pc}
    pinMode(_sck, OUTPUT);
 8084dfc:	f994 000f 	ldrsb.w	r0, [r4, #15]
 8084e00:	2101      	movs	r1, #1
 8084e02:	b280      	uxth	r0, r0
 8084e04:	f00b fd06 	bl	8090814 <pinMode>
    if ((_dataMode == SPI_MODE0) || (_dataMode == SPI_MODE1)) {
 8084e08:	7b63      	ldrb	r3, [r4, #13]
 8084e0a:	f994 000f 	ldrsb.w	r0, [r4, #15]
 8084e0e:	2b01      	cmp	r3, #1
      digitalWrite(_sck, LOW);
 8084e10:	bf94      	ite	ls
 8084e12:	4629      	movls	r1, r5
      digitalWrite(_sck, HIGH);
 8084e14:	2101      	movhi	r1, #1
 8084e16:	b280      	uxth	r0, r0
 8084e18:	f00b fd0d 	bl	8090836 <digitalWrite>
    if (_mosi != -1) {
 8084e1c:	f994 0010 	ldrsb.w	r0, [r4, #16]
 8084e20:	1c42      	adds	r2, r0, #1
 8084e22:	d009      	beq.n	8084e38 <_ZN18Adafruit_SPIDevice5beginEv+0x6a>
      pinMode(_mosi, OUTPUT);
 8084e24:	2101      	movs	r1, #1
 8084e26:	b280      	uxth	r0, r0
 8084e28:	f00b fcf4 	bl	8090814 <pinMode>
      digitalWrite(_mosi, HIGH);
 8084e2c:	f994 0010 	ldrsb.w	r0, [r4, #16]
 8084e30:	2101      	movs	r1, #1
 8084e32:	b280      	uxth	r0, r0
 8084e34:	f00b fcff 	bl	8090836 <digitalWrite>
    if (_miso != -1) {
 8084e38:	f994 0011 	ldrsb.w	r0, [r4, #17]
 8084e3c:	1c43      	adds	r3, r0, #1
 8084e3e:	d0d9      	beq.n	8084df4 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
      pinMode(_miso, INPUT);
 8084e40:	2100      	movs	r1, #0
 8084e42:	b280      	uxth	r0, r0
 8084e44:	f00b fce6 	bl	8090814 <pinMode>
 8084e48:	e7d4      	b.n	8084df4 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
	...

08084e4c <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
 8084e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084e50:	4604      	mov	r4, r0
  if (_spi) {
 8084e52:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
 8084e54:	460d      	mov	r5, r1
 8084e56:	4613      	mov	r3, r2
 8084e58:	b085      	sub	sp, #20
  if (_spi) {
 8084e5a:	b138      	cbz	r0, 8084e6c <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
 8084e5c:	2200      	movs	r2, #0
 8084e5e:	9200      	str	r2, [sp, #0]
 8084e60:	460a      	mov	r2, r1
 8084e62:	f00a fe61 	bl	808fb28 <_ZN8SPIClass8transferEPvS0_jPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
 8084e66:	b005      	add	sp, #20
 8084e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
 8084e6c:	7b22      	ldrb	r2, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 8084e6e:	68a0      	ldr	r0, [r4, #8]
    startbit = 0x80;
 8084e70:	2a00      	cmp	r2, #0
 8084e72:	bf0c      	ite	eq
 8084e74:	f04f 0b01 	moveq.w	fp, #1
 8084e78:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
 8084e7c:	780a      	ldrb	r2, [r1, #0]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 8084e7e:	4f44      	ldr	r7, [pc, #272]	; (8084f90 <_ZN18Adafruit_SPIDevice8transferEPhj+0x144>)
  bool towrite, lastmosi = !(buffer[0] & startbit);
 8084e80:	ea1b 0f02 	tst.w	fp, r2
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 8084e84:	fbb7 f7f0 	udiv	r7, r7, r0
  bool towrite, lastmosi = !(buffer[0] & startbit);
 8084e88:	bf0c      	ite	eq
 8084e8a:	f04f 0901 	moveq.w	r9, #1
 8084e8e:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 8084e92:	18cb      	adds	r3, r1, r3
 8084e94:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
 8084e96:	9303      	str	r3, [sp, #12]
 8084e98:	9b03      	ldr	r3, [sp, #12]
 8084e9a:	42ab      	cmp	r3, r5
 8084e9c:	d0e3      	beq.n	8084e66 <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    for (uint8_t b = startbit; b != 0;
 8084e9e:	465e      	mov	r6, fp
    uint8_t reply = 0;
 8084ea0:	f04f 0800 	mov.w	r8, #0
    uint8_t send = buffer[i];
 8084ea4:	f895 a000 	ldrb.w	sl, [r5]
      if (bitdelay_us) {
 8084ea8:	b117      	cbz	r7, 8084eb0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x64>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 8084eaa:	4638      	mov	r0, r7
 8084eac:	f008 f83e 	bl	808cf2c <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
 8084eb0:	7b63      	ldrb	r3, [r4, #13]
 8084eb2:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8084eb6:	d141      	bne.n	8084f3c <_ZN18Adafruit_SPIDevice8transferEPhj+0xf0>
        if ((_mosi != -1) && (lastmosi != towrite)) {
 8084eb8:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8084ebc:	1c5a      	adds	r2, r3, #1
 8084ebe:	d00f      	beq.n	8084ee0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
        towrite = send & b;
 8084ec0:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
 8084ec4:	bf14      	ite	ne
 8084ec6:	2301      	movne	r3, #1
 8084ec8:	2300      	moveq	r3, #0
 8084eca:	454b      	cmp	r3, r9
 8084ecc:	d008      	beq.n	8084ee0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
          if (towrite)
 8084ece:	6963      	ldr	r3, [r4, #20]
 8084ed0:	6a60      	ldr	r0, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
 8084ed2:	681a      	ldr	r2, [r3, #0]
          if (towrite)
 8084ed4:	2900      	cmp	r1, #0
 8084ed6:	d02c      	beq.n	8084f32 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe6>
            *mosiPort |= mosiPinMask;
 8084ed8:	f04f 0901 	mov.w	r9, #1
 8084edc:	4302      	orrs	r2, r0
 8084ede:	601a      	str	r2, [r3, #0]
        *clkPort |= clkPinMask; // Clock high
 8084ee0:	69a1      	ldr	r1, [r4, #24]
 8084ee2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8084ee4:	680a      	ldr	r2, [r1, #0]
 8084ee6:	4313      	orrs	r3, r2
 8084ee8:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
 8084eea:	b117      	cbz	r7, 8084ef2 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa6>
 8084eec:	4638      	mov	r0, r7
 8084eee:	f008 f81d 	bl	808cf2c <HAL_Delay_Microseconds>
        if (_miso != -1) {
 8084ef2:	f994 3011 	ldrsb.w	r3, [r4, #17]
 8084ef6:	3301      	adds	r3, #1
 8084ef8:	d006      	beq.n	8084f08 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbc>
          if (*misoPort & misoPinMask) {
 8084efa:	69e3      	ldr	r3, [r4, #28]
 8084efc:	681a      	ldr	r2, [r3, #0]
 8084efe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8084f00:	421a      	tst	r2, r3
            reply |= b;
 8084f02:	bf18      	it	ne
 8084f04:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
 8084f08:	69a1      	ldr	r1, [r4, #24]
 8084f0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8084f0c:	680a      	ldr	r2, [r1, #0]
 8084f0e:	ea22 0303 	bic.w	r3, r2, r3
 8084f12:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
 8084f14:	f994 3011 	ldrsb.w	r3, [r4, #17]
 8084f18:	3301      	adds	r3, #1
        buffer[i] = reply;
 8084f1a:	bf18      	it	ne
 8084f1c:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
 8084f20:	7b23      	ldrb	r3, [r4, #12]
 8084f22:	2b00      	cmp	r3, #0
 8084f24:	d132      	bne.n	8084f8c <_ZN18Adafruit_SPIDevice8transferEPhj+0x140>
 8084f26:	0076      	lsls	r6, r6, #1
 8084f28:	b2f6      	uxtb	r6, r6
 8084f2a:	2e00      	cmp	r6, #0
 8084f2c:	d1bc      	bne.n	8084ea8 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5c>
  for (size_t i = 0; i < len; i++) {
 8084f2e:	3501      	adds	r5, #1
 8084f30:	e7b2      	b.n	8084e98 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4c>
            *mosiPort &= ~mosiPinMask;
 8084f32:	ea22 0200 	bic.w	r2, r2, r0
 8084f36:	4689      	mov	r9, r1
 8084f38:	601a      	str	r2, [r3, #0]
 8084f3a:	e7d1      	b.n	8084ee0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
        *clkPort |= clkPinMask; // Clock high
 8084f3c:	69a1      	ldr	r1, [r4, #24]
 8084f3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8084f40:	680a      	ldr	r2, [r1, #0]
 8084f42:	4313      	orrs	r3, r2
 8084f44:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
 8084f46:	b117      	cbz	r7, 8084f4e <_ZN18Adafruit_SPIDevice8transferEPhj+0x102>
 8084f48:	4638      	mov	r0, r7
 8084f4a:	f007 ffef 	bl	808cf2c <HAL_Delay_Microseconds>
        if (_mosi != -1) {
 8084f4e:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8084f52:	3301      	adds	r3, #1
 8084f54:	d008      	beq.n	8084f68 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11c>
          if (send & b)
 8084f56:	6963      	ldr	r3, [r4, #20]
 8084f58:	6a61      	ldr	r1, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
 8084f5a:	681a      	ldr	r2, [r3, #0]
          if (send & b)
 8084f5c:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
 8084f60:	bf14      	ite	ne
 8084f62:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
 8084f64:	438a      	biceq	r2, r1
 8084f66:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
 8084f68:	69a1      	ldr	r1, [r4, #24]
 8084f6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8084f6c:	680a      	ldr	r2, [r1, #0]
 8084f6e:	ea22 0303 	bic.w	r3, r2, r3
 8084f72:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
 8084f74:	f994 3011 	ldrsb.w	r3, [r4, #17]
 8084f78:	3301      	adds	r3, #1
 8084f7a:	d0cb      	beq.n	8084f14 <_ZN18Adafruit_SPIDevice8transferEPhj+0xc8>
          if (*misoPort & misoPinMask) {
 8084f7c:	69e3      	ldr	r3, [r4, #28]
 8084f7e:	681a      	ldr	r2, [r3, #0]
 8084f80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8084f82:	421a      	tst	r2, r3
            reply |= b;
 8084f84:	bf18      	it	ne
 8084f86:	ea46 0808 	orrne.w	r8, r6, r8
 8084f8a:	e7c3      	b.n	8084f14 <_ZN18Adafruit_SPIDevice8transferEPhj+0xc8>
    for (uint8_t b = startbit; b != 0;
 8084f8c:	0876      	lsrs	r6, r6, #1
 8084f8e:	e7cc      	b.n	8084f2a <_ZN18Adafruit_SPIDevice8transferEPhj+0xde>
 8084f90:	0007a120 	.word	0x0007a120

08084f94 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
 8084f94:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
 8084f96:	2201      	movs	r2, #1
  uint8_t data = send;
 8084f98:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
 8084f9c:	f10d 0107 	add.w	r1, sp, #7
 8084fa0:	f7ff ff54 	bl	8084e4c <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
 8084fa4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8084fa8:	b003      	add	sp, #12
 8084faa:	f85d fb04 	ldr.w	pc, [sp], #4

08084fae <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
 8084fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084fb2:	4604      	mov	r4, r0
  if (_spi) {
 8084fb4:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
 8084fb6:	460e      	mov	r6, r1
 8084fb8:	4617      	mov	r7, r2
 8084fba:	461d      	mov	r5, r3
  if (_spi) {
 8084fbc:	b110      	cbz	r0, 8084fc4 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
 8084fbe:	6861      	ldr	r1, [r4, #4]
 8084fc0:	f00a fd46 	bl	808fa50 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
 8084fc4:	f994 000e 	ldrsb.w	r0, [r4, #14]
 8084fc8:	2100      	movs	r1, #0
 8084fca:	b280      	uxth	r0, r0
 8084fcc:	f00b fc33 	bl	8090836 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
 8084fd0:	9b06      	ldr	r3, [sp, #24]
 8084fd2:	eb05 0803 	add.w	r8, r5, r3
 8084fd6:	4545      	cmp	r5, r8
 8084fd8:	d108      	bne.n	8084fec <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
 8084fda:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
 8084fdc:	42b7      	cmp	r7, r6
 8084fde:	d00b      	beq.n	8084ff8 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
 8084fe0:	4620      	mov	r0, r4
 8084fe2:	f816 1b01 	ldrb.w	r1, [r6], #1
 8084fe6:	f7ff ffd5 	bl	8084f94 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
 8084fea:	e7f7      	b.n	8084fdc <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
 8084fec:	4620      	mov	r0, r4
 8084fee:	f815 1b01 	ldrb.w	r1, [r5], #1
 8084ff2:	f7ff ffcf 	bl	8084f94 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
 8084ff6:	e7ee      	b.n	8084fd6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
 8084ff8:	f994 000e 	ldrsb.w	r0, [r4, #14]
 8084ffc:	2101      	movs	r1, #1
 8084ffe:	b280      	uxth	r0, r0
 8085000:	f00b fc19 	bl	8090836 <digitalWrite>

  if (_spi) {
 8085004:	6820      	ldr	r0, [r4, #0]
 8085006:	b108      	cbz	r0, 808500c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
 8085008:	f00a fd08 	bl	808fa1c <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 808500c:	2001      	movs	r0, #1
 808500e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08085012 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
 8085012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8085016:	4604      	mov	r4, r0
  if (_spi) {
 8085018:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
 808501a:	460e      	mov	r6, r1
 808501c:	4617      	mov	r7, r2
 808501e:	461d      	mov	r5, r3
 8085020:	f89d 801c 	ldrb.w	r8, [sp, #28]
  if (_spi) {
 8085024:	b110      	cbz	r0, 808502c <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
 8085026:	6861      	ldr	r1, [r4, #4]
 8085028:	f00a fd12 	bl	808fa50 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
 808502c:	f994 000e 	ldrsb.w	r0, [r4, #14]
 8085030:	2100      	movs	r1, #0
 8085032:	b280      	uxth	r0, r0
 8085034:	f00b fbff 	bl	8090836 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
 8085038:	4437      	add	r7, r6
 808503a:	42be      	cmp	r6, r7
 808503c:	d10a      	bne.n	8085054 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
 808503e:	9b06      	ldr	r3, [sp, #24]
 8085040:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
 8085042:	42ae      	cmp	r6, r5
 8085044:	d00c      	beq.n	8085060 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
 8085046:	4641      	mov	r1, r8
 8085048:	4620      	mov	r0, r4
 808504a:	f7ff ffa3 	bl	8084f94 <_ZN18Adafruit_SPIDevice8transferEh>
 808504e:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
 8085052:	e7f6      	b.n	8085042 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
 8085054:	4620      	mov	r0, r4
 8085056:	f816 1b01 	ldrb.w	r1, [r6], #1
 808505a:	f7ff ff9b 	bl	8084f94 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
 808505e:	e7ec      	b.n	808503a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
 8085060:	f994 000e 	ldrsb.w	r0, [r4, #14]
 8085064:	2101      	movs	r1, #1
 8085066:	b280      	uxth	r0, r0
 8085068:	f00b fbe5 	bl	8090836 <digitalWrite>

  if (_spi) {
 808506c:	6820      	ldr	r0, [r4, #0]
 808506e:	b108      	cbz	r0, 8085074 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
 8085070:	f00a fcd4 	bl	808fa1c <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
 8085074:	2001      	movs	r0, #1
 8085076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808507a <_ZN21Apm303GensetQueryBankC1Ev>:

Apm303GensetQueryBank::Apm303GensetQueryBank()
{
    //******** Apm303 MAIN_DATA QUERY GROUP ********//

    apm303MainDatakey[GEN_QUERY1].start_addr = APM303_START_ADDR1;
 808507a:	2224      	movs	r2, #36	; 0x24
 808507c:	8002      	strh	r2, [r0, #0]
    apm303MainDatakey[GEN_QUERY1].num_of_regs = APM303_NUM_OF_REGS1;
 808507e:	2207      	movs	r2, #7
 8085080:	8042      	strh	r2, [r0, #2]

    apm303MainDatakey[GEN_QUERY2].start_addr = APM303_START_ADDR2;
 8085082:	2228      	movs	r2, #40	; 0x28
Apm303GensetQueryBank::Apm303GensetQueryBank()
 8085084:	b510      	push	{r4, lr}
    apm303MainDatakey[GEN_QUERY2].start_addr = APM303_START_ADDR2;
 8085086:	8082      	strh	r2, [r0, #4]
    apm303MainDatakey[GEN_QUERY4].start_addr = APM303_START_ADDR4;
    apm303MainDatakey[GEN_QUERY4].num_of_regs = APM303_NUM_OF_REGS4;

    //******** Apm303 BASIC_INSTRUMENTATION_DATA QUERY GROUP ********//

    apm303BasInstDataKey[GEN_QUERY1].start_addr = APM303_START_ADDR5;
 8085088:	2400      	movs	r4, #0
    apm303MainDatakey[GEN_QUERY3].start_addr = APM303_START_ADDR3;
 808508a:	222c      	movs	r2, #44	; 0x2c
    apm303BasInstDataKey[GEN_QUERY1].start_addr = APM303_START_ADDR5;
 808508c:	8204      	strh	r4, [r0, #16]
    apm303MainDatakey[GEN_QUERY3].start_addr = APM303_START_ADDR3;
 808508e:	8102      	strh	r2, [r0, #8]
    apm303BasInstDataKey[GEN_QUERY1].num_of_regs = APM303_NUM_OF_REGS5;
 8085090:	240f      	movs	r4, #15
    apm303MainDatakey[GEN_QUERY3].num_of_regs = APM303_NUM_OF_REGS3;
 8085092:	220b      	movs	r2, #11
    apm303BasInstDataKey[GEN_QUERY1].num_of_regs = APM303_NUM_OF_REGS5;
 8085094:	8244      	strh	r4, [r0, #18]
    apm303MainDatakey[GEN_QUERY3].num_of_regs = APM303_NUM_OF_REGS3;
 8085096:	8142      	strh	r2, [r0, #10]

    apm303BasInstDataKey[GEN_QUERY2].start_addr = APM303_START_ADDR6;
 8085098:	2415      	movs	r4, #21
    apm303MainDatakey[GEN_QUERY4].start_addr = APM303_START_ADDR4;
 808509a:	2237      	movs	r2, #55	; 0x37
    apm303MainDatakey[GEN_QUERY2].num_of_regs = APM303_NUM_OF_REGS2;
 808509c:	2109      	movs	r1, #9
    apm303MainDatakey[GEN_QUERY4].start_addr = APM303_START_ADDR4;
 808509e:	8182      	strh	r2, [r0, #12]
    apm303BasInstDataKey[GEN_QUERY2].start_addr = APM303_START_ADDR6;
 80850a0:	8284      	strh	r4, [r0, #20]
    apm303MainDatakey[GEN_QUERY4].num_of_regs = APM303_NUM_OF_REGS4;
 80850a2:	220c      	movs	r2, #12
    apm303BasInstDataKey[GEN_QUERY2].num_of_regs = APM303_NUM_OF_REGS6;
 80850a4:	240e      	movs	r4, #14
    apm303MainDatakey[GEN_QUERY2].num_of_regs = APM303_NUM_OF_REGS2;
 80850a6:	80c1      	strh	r1, [r0, #6]
    apm303MainDatakey[GEN_QUERY4].num_of_regs = APM303_NUM_OF_REGS4;
 80850a8:	81c2      	strh	r2, [r0, #14]
    apm303BasInstDataKey[GEN_QUERY2].num_of_regs = APM303_NUM_OF_REGS6;
 80850aa:	82c4      	strh	r4, [r0, #22]

    //******** Apm303 DERIVED_INSTRUMENTATION_DATA QUERY GROUP ********//

    apm303DerInstDataKey[GEN_QUERY1].start_addr = APM303_START_ADDR7;
 80850ac:	8301      	strh	r1, [r0, #24]
    apm303DerInstDataKey[GEN_QUERY1].num_of_regs = APM303_NUM_OF_REGS7;
 80850ae:	8342      	strh	r2, [r0, #26]
}
 80850b0:	bd10      	pop	{r4, pc}

080850b2 <_ZN21Apm303GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>:

void Apm303GensetQueryBank::getGenQueryKey(GeneratorDataSet gen_data_set, uint8_t gen_query_unit, 
                        GeneratorQueryKey *apm303Key)
{
    switch (gen_data_set)
 80850b2:	2903      	cmp	r1, #3
 80850b4:	d80a      	bhi.n	80850cc <_ZN21Apm303GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x1a>
 80850b6:	e8df f001 	tbb	[pc, r1]
 80850ba:	0a02      	.short	0x0a02
 80850bc:	1610      	.short	0x1610
    {
        case GEN_MAIN:
        {
            apm303Key->start_addr = apm303MainDatakey[gen_query_unit].start_addr;
 80850be:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80850c2:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
 80850c6:	801a      	strh	r2, [r3, #0]
            apm303Key->num_of_regs = apm303MainDatakey[gen_query_unit].num_of_regs;
 80850c8:	884a      	ldrh	r2, [r1, #2]
        }

        case GEN_ENG_STATUS:
        {
            apm303Key->start_addr = APM303_ENGINE_STATE_ADDR;
            apm303Key->num_of_regs = NUM_OF_ENGSTATE_REGS;
 80850ca:	805a      	strh	r2, [r3, #2]

            break;
        }
    }

}
 80850cc:	4770      	bx	lr
            apm303Key->start_addr = apm303BasInstDataKey[gen_query_unit].start_addr;
 80850ce:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80850d2:	8a02      	ldrh	r2, [r0, #16]
 80850d4:	801a      	strh	r2, [r3, #0]
            apm303Key->num_of_regs = apm303BasInstDataKey[gen_query_unit].num_of_regs;
 80850d6:	8a42      	ldrh	r2, [r0, #18]
 80850d8:	e7f7      	b.n	80850ca <_ZN21Apm303GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x18>
            apm303Key->start_addr = apm303DerInstDataKey[gen_query_unit].start_addr;
 80850da:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80850de:	8b02      	ldrh	r2, [r0, #24]
 80850e0:	801a      	strh	r2, [r3, #0]
            apm303Key->num_of_regs = apm303DerInstDataKey[gen_query_unit].num_of_regs;
 80850e2:	8b42      	ldrh	r2, [r0, #26]
 80850e4:	e7f1      	b.n	80850ca <_ZN21Apm303GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x18>
            apm303Key->start_addr = APM303_ENGINE_STATE_ADDR;
 80850e6:	2217      	movs	r2, #23
 80850e8:	801a      	strh	r2, [r3, #0]
            apm303Key->num_of_regs = NUM_OF_ENGSTATE_REGS;
 80850ea:	2201      	movs	r2, #1
 80850ec:	e7ed      	b.n	80850ca <_ZN21Apm303GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x18>

080850ee <_ZN21Apm303GensetQueryBankD1Ev>:

Apm303GensetQueryBank::~Apm303GensetQueryBank(){}
 80850ee:	4770      	bx	lr

080850f0 <_Z21processApm303MainDataPmPt>:
        }
    }
}

void processApm303MainData(uint32_t *modbus_buffer, uint16_t *alarm_buffer)
{
 80850f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80850f4:	4605      	mov	r5, r0
     main_gen_data[RUN_HRS] = modbus_buffer[RUN_HRS]*0.1;
 80850f6:	6800      	ldr	r0, [r0, #0]
{
 80850f8:	460f      	mov	r7, r1
     main_gen_data[RUN_HRS] = modbus_buffer[RUN_HRS]*0.1;
 80850fa:	f00b fe67 	bl	8090dcc <__aeabi_ui2d>
 80850fe:	a31c      	add	r3, pc, #112	; (adr r3, 8085170 <_Z21processApm303MainDataPmPt+0x80>)
 8085100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085104:	f00b fedc 	bl	8090ec0 <__aeabi_dmul>
 8085108:	f00c f994 	bl	8091434 <__aeabi_d2f>
 808510c:	4c1a      	ldr	r4, [pc, #104]	; (8085178 <_Z21processApm303MainDataPmPt+0x88>)
     main_gen_data[CTRL_MODE] = modbus_buffer[CTRL_MODE] == 1 ? GEN_AUTO_MODE : GEN_MANUAL_MODE;
     main_gen_data[ENGINE_STATE] = modbus_buffer[ENGINE_STATE] == 1 ? ENGINE_RUNNING : ENGINE_AT_REST;

     //TODO: Since FC=2 is yet to be implemented in Modbus library, these would always return 0.
     //Run through the 24 possible alarms to get which ones are present and append to main_gen_data[]
     uint8_t metric_indx = ALARM_CODE1;
 808510e:	2604      	movs	r6, #4
     main_gen_data[RUN_HRS] = modbus_buffer[RUN_HRS]*0.1;
 8085110:	6020      	str	r0, [r4, #0]
     main_gen_data[NUM_OF_STARTS] = modbus_buffer[NUM_OF_STARTS];
 8085112:	6868      	ldr	r0, [r5, #4]
 8085114:	f00c fa94 	bl	8091640 <__aeabi_ui2f>
 8085118:	6060      	str	r0, [r4, #4]
     main_gen_data[CTRL_MODE] = modbus_buffer[CTRL_MODE] == 1 ? GEN_AUTO_MODE : GEN_MANUAL_MODE;
 808511a:	68ab      	ldr	r3, [r5, #8]
     for (uint8_t alarm_reg_indx = ALARM_REG1; alarm_reg_indx < MBDATA_ALRM_BUFF_SIZE; alarm_reg_indx++)
     {
        if (alarm_buffer[alarm_reg_indx] == 1)
        {
            main_gen_data[metric_indx++] = alarm_code;
            main_gen_data[metric_indx++] = 3;
 808511c:	f8df 905c 	ldr.w	r9, [pc, #92]	; 808517c <_Z21processApm303MainDataPmPt+0x8c>
     main_gen_data[CTRL_MODE] = modbus_buffer[CTRL_MODE] == 1 ? GEN_AUTO_MODE : GEN_MANUAL_MODE;
 8085120:	2b01      	cmp	r3, #1
 8085122:	bf14      	ite	ne
 8085124:	f04f 4380 	movne.w	r3, #1073741824	; 0x40000000
 8085128:	f04f 537e 	moveq.w	r3, #1065353216	; 0x3f800000
 808512c:	60a3      	str	r3, [r4, #8]
     main_gen_data[ENGINE_STATE] = modbus_buffer[ENGINE_STATE] == 1 ? ENGINE_RUNNING : ENGINE_AT_REST;
 808512e:	68eb      	ldr	r3, [r5, #12]
     uint8_t alarm_code = 1;
 8085130:	2501      	movs	r5, #1
     main_gen_data[ENGINE_STATE] = modbus_buffer[ENGINE_STATE] == 1 ? ENGINE_RUNNING : ENGINE_AT_REST;
 8085132:	2b01      	cmp	r3, #1
 8085134:	bf14      	ite	ne
 8085136:	2300      	movne	r3, #0
 8085138:	4b10      	ldreq	r3, [pc, #64]	; (808517c <_Z21processApm303MainDataPmPt+0x8c>)
 808513a:	3f02      	subs	r7, #2
 808513c:	60e3      	str	r3, [r4, #12]
        if (alarm_buffer[alarm_reg_indx] == 1)
 808513e:	f837 3f02 	ldrh.w	r3, [r7, #2]!
 8085142:	2b01      	cmp	r3, #1
 8085144:	d10c      	bne.n	8085160 <_Z21processApm303MainDataPmPt+0x70>
            main_gen_data[metric_indx++] = alarm_code;
 8085146:	4628      	mov	r0, r5
 8085148:	f00c fa7a 	bl	8091640 <__aeabi_ui2f>
 808514c:	f106 0801 	add.w	r8, r6, #1
 8085150:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 8085154:	fa5f f888 	uxtb.w	r8, r8
            main_gen_data[metric_indx++] = 3;
 8085158:	3602      	adds	r6, #2
 808515a:	b2f6      	uxtb	r6, r6
 808515c:	f844 9028 	str.w	r9, [r4, r8, lsl #2]
        }
        alarm_code++;
 8085160:	3501      	adds	r5, #1
 8085162:	b2ed      	uxtb	r5, r5
     for (uint8_t alarm_reg_indx = ALARM_REG1; alarm_reg_indx < MBDATA_ALRM_BUFF_SIZE; alarm_reg_indx++)
 8085164:	2d19      	cmp	r5, #25
 8085166:	d1ea      	bne.n	808513e <_Z21processApm303MainDataPmPt+0x4e>
    }
}
 8085168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808516c:	f3af 8000 	nop.w
 8085170:	9999999a 	.word	0x9999999a
 8085174:	3fb99999 	.word	0x3fb99999
 8085178:	20000cd8 	.word	0x20000cd8
 808517c:	40400000 	.word	0x40400000

08085180 <_Z24processApm303BasInstDataPmPt>:

void processApm303BasInstData(uint32_t *modbus_buffer, uint16_t *alarm_buffer)
{
 8085180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bas_inst_gen_data[metric_indx++] = modbus_buffer[CHARGER_ALT_VOLT] * 0.1;

    for (; metric_indx < L1_CURR; metric_indx++)
    {
        if ((metric_indx == ENGINE_BATT_VOLT) || (metric_indx == GEN_FREQCY))
        { bas_inst_gen_data[metric_indx] = modbus_buffer[metric_indx] * 0.1; }
 8085184:	f20f 09b8 	addw	r9, pc, #184	; 0xb8
 8085188:	e9d9 8900 	ldrd	r8, r9, [r9]
    bas_inst_gen_data[metric_indx++] = MB_UNAVAIL_VAL;
 808518c:	4c2e      	ldr	r4, [pc, #184]	; (8085248 <_Z24processApm303BasInstDataPmPt+0xc8>)
 808518e:	4e2f      	ldr	r6, [pc, #188]	; (808524c <_Z24processApm303BasInstDataPmPt+0xcc>)
{
 8085190:	4605      	mov	r5, r0
    bas_inst_gen_data[metric_indx++] = MB_UNAVAIL_VAL;
 8085192:	6026      	str	r6, [r4, #0]
    bas_inst_gen_data[metric_indx++] = modbus_buffer[OIL_PRESSR] * 0.1;
 8085194:	6840      	ldr	r0, [r0, #4]
 8085196:	f00b fe19 	bl	8090dcc <__aeabi_ui2d>
 808519a:	a329      	add	r3, pc, #164	; (adr r3, 8085240 <_Z24processApm303BasInstDataPmPt+0xc0>)
 808519c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80851a0:	f00b fe8e 	bl	8090ec0 <__aeabi_dmul>
 80851a4:	f00c f946 	bl	8091434 <__aeabi_d2f>
 80851a8:	6060      	str	r0, [r4, #4]
    bas_inst_gen_data[metric_indx++] = modbus_buffer[COOL_TEMP];
 80851aa:	68a8      	ldr	r0, [r5, #8]
 80851ac:	f00c fa48 	bl	8091640 <__aeabi_ui2f>
    bas_inst_gen_data[metric_indx++] = MB_UNAVAIL_VAL;
 80851b0:	60e6      	str	r6, [r4, #12]
    bas_inst_gen_data[metric_indx++] = modbus_buffer[COOL_TEMP];
 80851b2:	60a0      	str	r0, [r4, #8]
    bas_inst_gen_data[metric_indx++] = MB_UNAVAIL_VAL;
 80851b4:	6126      	str	r6, [r4, #16]
    bas_inst_gen_data[metric_indx++] = modbus_buffer[CHARGER_ALT_VOLT] * 0.1;
 80851b6:	6968      	ldr	r0, [r5, #20]
 80851b8:	f00b fe08 	bl	8090dcc <__aeabi_ui2d>
 80851bc:	a320      	add	r3, pc, #128	; (adr r3, 8085240 <_Z24processApm303BasInstDataPmPt+0xc0>)
 80851be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80851c2:	f00b fe7d 	bl	8090ec0 <__aeabi_dmul>
 80851c6:	46a2      	mov	sl, r4
 80851c8:	f00c f934 	bl	8091434 <__aeabi_d2f>
 80851cc:	4657      	mov	r7, sl
 80851ce:	6160      	str	r0, [r4, #20]
 80851d0:	2406      	movs	r4, #6
        if ((metric_indx == ENGINE_BATT_VOLT) || (metric_indx == GEN_FREQCY))
 80851d2:	2c06      	cmp	r4, #6
        { bas_inst_gen_data[metric_indx] = modbus_buffer[metric_indx] * 0.1; }
 80851d4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80851d8:	b2e3      	uxtb	r3, r4
        if ((metric_indx == ENGINE_BATT_VOLT) || (metric_indx == GEN_FREQCY))
 80851da:	d001      	beq.n	80851e0 <_Z24processApm303BasInstDataPmPt+0x60>
 80851dc:	2b08      	cmp	r3, #8
 80851de:	d11e      	bne.n	808521e <_Z24processApm303BasInstDataPmPt+0x9e>
        { bas_inst_gen_data[metric_indx] = modbus_buffer[metric_indx] * 0.1; }
 80851e0:	f00b fdf4 	bl	8090dcc <__aeabi_ui2d>
 80851e4:	4642      	mov	r2, r8
 80851e6:	464b      	mov	r3, r9
 80851e8:	f00b fe6a 	bl	8090ec0 <__aeabi_dmul>
 80851ec:	f00c f922 	bl	8091434 <__aeabi_d2f>
 80851f0:	3401      	adds	r4, #1
    for (; metric_indx < L1_CURR; metric_indx++)
 80851f2:	2c0f      	cmp	r4, #15
        else
        { bas_inst_gen_data[metric_indx] = modbus_buffer[metric_indx]; }   
 80851f4:	f8ca 0018 	str.w	r0, [sl, #24]
    for (; metric_indx < L1_CURR; metric_indx++)
 80851f8:	f10a 0a04 	add.w	sl, sl, #4
 80851fc:	d1e9      	bne.n	80851d2 <_Z24processApm303BasInstDataPmPt+0x52>
    for (; metric_indx < CURR_LAG_LEAD; metric_indx++)
    {
        if (metric_indx == EARTH_CURR)
        { bas_inst_gen_data[metric_indx] = MB_UNAVAIL_VAL; }
        else
        { bas_inst_gen_data[metric_indx] = modbus_buffer[metric_indx] * 0.1; }    
 80851fe:	f20f 0940 	addw	r9, pc, #64	; 0x40
 8085202:	e9d9 8900 	ldrd	r8, r9, [r9]
        if (metric_indx == EARTH_CURR)
 8085206:	2c12      	cmp	r4, #18
 8085208:	d10c      	bne.n	8085224 <_Z24processApm303BasInstDataPmPt+0xa4>
        { bas_inst_gen_data[metric_indx] = MB_UNAVAIL_VAL; }
 808520a:	64be      	str	r6, [r7, #72]	; 0x48
    for (; metric_indx < CURR_LAG_LEAD; metric_indx++)
 808520c:	3401      	adds	r4, #1
 808520e:	2c16      	cmp	r4, #22
 8085210:	d1f9      	bne.n	8085206 <_Z24processApm303BasInstDataPmPt+0x86>
    }

    bas_inst_gen_data[metric_indx] = modbus_buffer[CURR_LAG_LEAD];
 8085212:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8085214:	f00c fa14 	bl	8091640 <__aeabi_ui2f>
 8085218:	65b8      	str	r0, [r7, #88]	; 0x58
}
 808521a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        { bas_inst_gen_data[metric_indx] = modbus_buffer[metric_indx]; }   
 808521e:	f00c fa0f 	bl	8091640 <__aeabi_ui2f>
 8085222:	e7e5      	b.n	80851f0 <_Z24processApm303BasInstDataPmPt+0x70>
        { bas_inst_gen_data[metric_indx] = modbus_buffer[metric_indx] * 0.1; }    
 8085224:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8085228:	f00b fdd0 	bl	8090dcc <__aeabi_ui2d>
 808522c:	4642      	mov	r2, r8
 808522e:	464b      	mov	r3, r9
 8085230:	f00b fe46 	bl	8090ec0 <__aeabi_dmul>
 8085234:	f00c f8fe 	bl	8091434 <__aeabi_d2f>
 8085238:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 808523c:	e7e6      	b.n	808520c <_Z24processApm303BasInstDataPmPt+0x8c>
 808523e:	bf00      	nop
 8085240:	9999999a 	.word	0x9999999a
 8085244:	3fb99999 	.word	0x3fb99999
 8085248:	200005c8 	.word	0x200005c8
 808524c:	ccc0a468 	.word	0xccc0a468

08085250 <_Z24processApm303DerInstDataPmPt>:

void processApm303DerInstData(uint32_t *modbus_buffer, uint16_t *alarm_buffer)
{
 8085250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     uint8_t metric_indx = TOTAL_WATT;
     for (; metric_indx < L1_KVAR; metric_indx++)
     { der_inst_gen_data[metric_indx] = modbus_buffer[metric_indx] * 0.1; }
 8085254:	f20f 0970 	addw	r9, pc, #112	; 0x70
 8085258:	e9d9 8900 	ldrd	r8, r9, [r9]
 808525c:	4f1e      	ldr	r7, [pc, #120]	; (80852d8 <_Z24processApm303DerInstDataPmPt+0x88>)
{
 808525e:	4604      	mov	r4, r0
 8085260:	463e      	mov	r6, r7
 8085262:	1f05      	subs	r5, r0, #4
 8085264:	f100 0a10 	add.w	sl, r0, #16
     { der_inst_gen_data[metric_indx] = modbus_buffer[metric_indx] * 0.1; }
 8085268:	f855 0f04 	ldr.w	r0, [r5, #4]!
 808526c:	f00b fdae 	bl	8090dcc <__aeabi_ui2d>
 8085270:	4642      	mov	r2, r8
 8085272:	464b      	mov	r3, r9
 8085274:	f00b fe24 	bl	8090ec0 <__aeabi_dmul>
 8085278:	f00c f8dc 	bl	8091434 <__aeabi_d2f>
     for (; metric_indx < L1_KVAR; metric_indx++)
 808527c:	4555      	cmp	r5, sl
     { der_inst_gen_data[metric_indx] = modbus_buffer[metric_indx] * 0.1; }
 808527e:	f847 0b04 	str.w	r0, [r7], #4
     for (; metric_indx < L1_KVAR; metric_indx++)
 8085282:	d1f1      	bne.n	8085268 <_Z24processApm303DerInstDataPmPt+0x18>

     for (; metric_indx < L1_PF; metric_indx++)
     { der_inst_gen_data[metric_indx] = MB_UNAVAIL_VAL; }

     for (; metric_indx < PERCENT_OF_FULL_POWER; metric_indx++)
     { der_inst_gen_data[metric_indx] = modbus_buffer[metric_indx] * 0.01; }
 8085284:	f20f 0948 	addw	r9, pc, #72	; 0x48
 8085288:	e9d9 8900 	ldrd	r8, r9, [r9]
     { der_inst_gen_data[metric_indx] = MB_UNAVAIL_VAL; }
 808528c:	4b13      	ldr	r3, [pc, #76]	; (80852dc <_Z24processApm303DerInstDataPmPt+0x8c>)
 808528e:	f8df a050 	ldr.w	sl, [pc, #80]	; 80852e0 <_Z24processApm303DerInstDataPmPt+0x90>
 8085292:	461d      	mov	r5, r3
 8085294:	f104 0720 	add.w	r7, r4, #32
 8085298:	6173      	str	r3, [r6, #20]
 808529a:	61b3      	str	r3, [r6, #24]
 808529c:	61f3      	str	r3, [r6, #28]
 808529e:	6233      	str	r3, [r6, #32]
     for (; metric_indx < PERCENT_OF_FULL_POWER; metric_indx++)
 80852a0:	3430      	adds	r4, #48	; 0x30
     { der_inst_gen_data[metric_indx] = modbus_buffer[metric_indx] * 0.01; }
 80852a2:	f857 0f04 	ldr.w	r0, [r7, #4]!
 80852a6:	f00b fd91 	bl	8090dcc <__aeabi_ui2d>
 80852aa:	4642      	mov	r2, r8
 80852ac:	464b      	mov	r3, r9
 80852ae:	f00b fe07 	bl	8090ec0 <__aeabi_dmul>
 80852b2:	f00c f8bf 	bl	8091434 <__aeabi_d2f>
     for (; metric_indx < PERCENT_OF_FULL_POWER; metric_indx++)
 80852b6:	42bc      	cmp	r4, r7
     { der_inst_gen_data[metric_indx] = modbus_buffer[metric_indx] * 0.01; }
 80852b8:	f84a 0b04 	str.w	r0, [sl], #4
     for (; metric_indx < PERCENT_OF_FULL_POWER; metric_indx++)
 80852bc:	d1f1      	bne.n	80852a2 <_Z24processApm303DerInstDataPmPt+0x52>

     der_inst_gen_data[PERCENT_OF_FULL_POWER] = MB_UNAVAIL_VAL;
 80852be:	6375      	str	r5, [r6, #52]	; 0x34
 80852c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80852c4:	f3af 8000 	nop.w
 80852c8:	9999999a 	.word	0x9999999a
 80852cc:	3fb99999 	.word	0x3fb99999
 80852d0:	47ae147b 	.word	0x47ae147b
 80852d4:	3f847ae1 	.word	0x3f847ae1
 80852d8:	20000664 	.word	0x20000664
 80852dc:	ccc0a468 	.word	0xccc0a468
 80852e0:	20000688 	.word	0x20000688

080852e4 <_Z19formatGenDataApm30316GeneratorDataSetPmPt>:
{
 80852e4:	4603      	mov	r3, r0
    switch (data_group)
 80852e6:	2b01      	cmp	r3, #1
{
 80852e8:	4608      	mov	r0, r1
 80852ea:	4611      	mov	r1, r2
    switch (data_group)
 80852ec:	d004      	beq.n	80852f8 <_Z19formatGenDataApm30316GeneratorDataSetPmPt+0x14>
 80852ee:	2b02      	cmp	r3, #2
 80852f0:	d004      	beq.n	80852fc <_Z19formatGenDataApm30316GeneratorDataSetPmPt+0x18>
 80852f2:	b92b      	cbnz	r3, 8085300 <_Z19formatGenDataApm30316GeneratorDataSetPmPt+0x1c>
            processApm303MainData(modbus_buffer, alarm_buffer);
 80852f4:	f7ff befc 	b.w	80850f0 <_Z21processApm303MainDataPmPt>
            processApm303BasInstData(modbus_buffer, alarm_buffer);
 80852f8:	f7ff bf42 	b.w	8085180 <_Z24processApm303BasInstDataPmPt>
            processApm303DerInstData(modbus_buffer, alarm_buffer);
 80852fc:	f7ff bfa8 	b.w	8085250 <_Z24processApm303DerInstDataPmPt>
}
 8085300:	4770      	bx	lr

08085302 <_ZN20Dcp10GensetQueryBankC1Ev>:

Dcp10GensetQueryBank::Dcp10GensetQueryBank()
{
    //******** DCP10 MAIN_DATA QUERY GROUP ********//

    dcp10MainDatakey[GEN_QUERY1].start_addr = DCP10_START_ADDR1;
 8085302:	f242 0230 	movw	r2, #8240	; 0x2030
 8085306:	8002      	strh	r2, [r0, #0]
    dcp10MainDatakey[GEN_QUERY1].num_of_regs = DCP10_NUM_OF_REGS1;
 8085308:	2201      	movs	r2, #1
 808530a:	8042      	strh	r2, [r0, #2]

    dcp10MainDatakey[GEN_QUERY2].start_addr = DCP10_START_ADDR2;
    dcp10MainDatakey[GEN_QUERY2].num_of_regs = DCP10_NUM_OF_REGS2;

    dcp10MainDatakey[GEN_QUERY3].start_addr = DCP10_START_ADDR3;
    dcp10MainDatakey[GEN_QUERY3].num_of_regs = DCP10_NUM_OF_REGS3;
 808530c:	8142      	strh	r2, [r0, #10]

    //******** DCP10 BASIC_INSTRUMENTATION_DATA QUERY GROUP ********//

    dcp10BasInstDataKey[GEN_QUERY1].start_addr = DCP10_START_ADDR4;
 808530e:	f241 0216 	movw	r2, #4118	; 0x1016
    dcp10MainDatakey[GEN_QUERY2].start_addr = DCP10_START_ADDR2;
 8085312:	f241 011e 	movw	r1, #4126	; 0x101e
    dcp10BasInstDataKey[GEN_QUERY1].start_addr = DCP10_START_ADDR4;
 8085316:	8182      	strh	r2, [r0, #12]
    dcp10BasInstDataKey[GEN_QUERY1].num_of_regs = DCP10_NUM_OF_REGS4;
 8085318:	2205      	movs	r2, #5
    dcp10MainDatakey[GEN_QUERY2].start_addr = DCP10_START_ADDR2;
 808531a:	8081      	strh	r1, [r0, #4]
    dcp10BasInstDataKey[GEN_QUERY1].num_of_regs = DCP10_NUM_OF_REGS4;
 808531c:	81c2      	strh	r2, [r0, #14]
    dcp10MainDatakey[GEN_QUERY2].num_of_regs = DCP10_NUM_OF_REGS2;
 808531e:	2103      	movs	r1, #3

    dcp10BasInstDataKey[GEN_QUERY2].start_addr = DCP10_START_ADDR5;
 8085320:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    dcp10MainDatakey[GEN_QUERY2].num_of_regs = DCP10_NUM_OF_REGS2;
 8085324:	80c1      	strh	r1, [r0, #6]
    dcp10BasInstDataKey[GEN_QUERY2].start_addr = DCP10_START_ADDR5;
 8085326:	8202      	strh	r2, [r0, #16]
    dcp10MainDatakey[GEN_QUERY3].start_addr = DCP10_START_ADDR3;
 8085328:	f241 010c 	movw	r1, #4108	; 0x100c
    dcp10BasInstDataKey[GEN_QUERY2].num_of_regs = DCP10_NUM_OF_REGS5;
 808532c:	220d      	movs	r2, #13
    dcp10MainDatakey[GEN_QUERY3].start_addr = DCP10_START_ADDR3;
 808532e:	8101      	strh	r1, [r0, #8]
    dcp10BasInstDataKey[GEN_QUERY2].num_of_regs = DCP10_NUM_OF_REGS5;
 8085330:	8242      	strh	r2, [r0, #18]
}
 8085332:	4770      	bx	lr

08085334 <_ZN20Dcp10GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>:

void Dcp10GensetQueryBank::getGenQueryKey(GeneratorDataSet gen_data_set, uint8_t gen_query_unit, 
                        GeneratorQueryKey *dcp10Key)
{
    switch (gen_data_set)
 8085334:	2901      	cmp	r1, #1
 8085336:	d00a      	beq.n	808534e <_ZN20Dcp10GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x1a>
 8085338:	2903      	cmp	r1, #3
 808533a:	d00e      	beq.n	808535a <_ZN20Dcp10GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x26>
 808533c:	b931      	cbnz	r1, 808534c <_ZN20Dcp10GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x18>
    {
        case GEN_MAIN:
        {
            dcp10Key->start_addr = dcp10MainDatakey[gen_query_unit].start_addr;
 808533e:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8085342:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
 8085346:	801a      	strh	r2, [r3, #0]
            dcp10Key->num_of_regs = dcp10MainDatakey[gen_query_unit].num_of_regs;
 8085348:	884a      	ldrh	r2, [r1, #2]
        }

        case GEN_ENG_STATUS:
        {
            dcp10Key->start_addr = DCP10_ENGINE_STATE_ADDR;
            dcp10Key->num_of_regs = NUM_OF_ENGSTATE_REGS;
 808534a:	805a      	strh	r2, [r3, #2]

            break;
        }
    }
}
 808534c:	4770      	bx	lr
            dcp10Key->start_addr = dcp10BasInstDataKey[gen_query_unit].start_addr;
 808534e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8085352:	8982      	ldrh	r2, [r0, #12]
 8085354:	801a      	strh	r2, [r3, #0]
            dcp10Key->num_of_regs = dcp10BasInstDataKey[gen_query_unit].num_of_regs;
 8085356:	89c2      	ldrh	r2, [r0, #14]
 8085358:	e7f7      	b.n	808534a <_ZN20Dcp10GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x16>
            dcp10Key->start_addr = DCP10_ENGINE_STATE_ADDR;
 808535a:	f241 020c 	movw	r2, #4108	; 0x100c
 808535e:	801a      	strh	r2, [r3, #0]
            dcp10Key->num_of_regs = NUM_OF_ENGSTATE_REGS;
 8085360:	2201      	movs	r2, #1
 8085362:	e7f2      	b.n	808534a <_ZN20Dcp10GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x16>

08085364 <_ZN20Dcp10GensetQueryBankD1Ev>:

Dcp10GensetQueryBank::~Dcp10GensetQueryBank(){}
 8085364:	4770      	bx	lr
	...

08085368 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt>:

void formatGenDataDCP10(GeneratorDataSet data_group, uint32_t *modbus_buffer, uint16_t *alarm_buffer)
{
 8085368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808536c:	460d      	mov	r5, r1
 808536e:	4616      	mov	r6, r2
    switch (data_group)
 8085370:	b118      	cbz	r0, 808537a <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0x12>
 8085372:	2801      	cmp	r0, #1
 8085374:	d043      	beq.n	80853fe <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0x96>
            }

            break;
        }
    }
 8085376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            main_gen_data[RUN_HRS] = modbus_buffer[RUN_HRS];
 808537a:	6808      	ldr	r0, [r1, #0]
 808537c:	f00c f960 	bl	8091640 <__aeabi_ui2f>
 8085380:	4c43      	ldr	r4, [pc, #268]	; (8085490 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0x128>)
            main_gen_data[NUM_OF_STARTS] = MB_UNAVAIL_VAL;
 8085382:	4b44      	ldr	r3, [pc, #272]	; (8085494 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0x12c>)
            main_gen_data[RUN_HRS] = modbus_buffer[RUN_HRS];
 8085384:	6020      	str	r0, [r4, #0]
            main_gen_data[NUM_OF_STARTS] = MB_UNAVAIL_VAL;
 8085386:	6063      	str	r3, [r4, #4]
            main_gen_data[CTRL_MODE] = modbus_buffer[CTRL_MODE] & DCP10_CTRL_MOD_MASK;
 8085388:	68a8      	ldr	r0, [r5, #8]
 808538a:	f000 0020 	and.w	r0, r0, #32
 808538e:	f00c f957 	bl	8091640 <__aeabi_ui2f>
            main_gen_data[CTRL_MODE] = main_gen_data[CTRL_MODE] == 0 ? GEN_MANUAL_MODE : GEN_AUTO_MODE;
 8085392:	2100      	movs	r1, #0
 8085394:	f00c fb40 	bl	8091a18 <__aeabi_fcmpeq>
 8085398:	b9c8      	cbnz	r0, 80853ce <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0x66>
 808539a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 808539e:	60a3      	str	r3, [r4, #8]
            main_gen_data[ENGINE_STATE] = modbus_buffer[ENGINE_STATE] > 497 ? ENGINE_RUNNING : ENGINE_AT_REST;
 80853a0:	68eb      	ldr	r3, [r5, #12]
 80853a2:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 80853a6:	bf34      	ite	cc
 80853a8:	2300      	movcc	r3, #0
 80853aa:	4b3b      	ldrcs	r3, [pc, #236]	; (8085498 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0x130>)
 80853ac:	60e3      	str	r3, [r4, #12]
            main_gen_data[alrm_indx++] = alarm_buffer[ALARM_REG1] & DCP10_SHT_ALRM_MASK;
 80853ae:	8830      	ldrh	r0, [r6, #0]
 80853b0:	f000 0010 	and.w	r0, r0, #16
 80853b4:	f00c f948 	bl	8091648 <__aeabi_i2f>
            if (main_gen_data[ALARM_CODE1] == DCP10_SHT_ALRM_MASK)
 80853b8:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80853bc:	f00c fb2c 	bl	8091a18 <__aeabi_fcmpeq>
 80853c0:	b140      	cbz	r0, 80853d4 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0x6c>
                main_gen_data[ALARM_CODE1] = 1;
 80853c2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80853c6:	6123      	str	r3, [r4, #16]
                main_gen_data[alrm_indx] = 3;
 80853c8:	4b33      	ldr	r3, [pc, #204]	; (8085498 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0x130>)
 80853ca:	6163      	str	r3, [r4, #20]
                return;
 80853cc:	e7d3      	b.n	8085376 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0xe>
            main_gen_data[CTRL_MODE] = main_gen_data[CTRL_MODE] == 0 ? GEN_MANUAL_MODE : GEN_AUTO_MODE;
 80853ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80853d2:	e7e4      	b.n	808539e <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0x36>
            main_gen_data[ALARM_CODE1] = 0;
 80853d4:	2500      	movs	r5, #0
 80853d6:	6125      	str	r5, [r4, #16]
            main_gen_data[alrm_indx++] = alarm_buffer[ALARM_REG2];
 80853d8:	8870      	ldrh	r0, [r6, #2]
 80853da:	f00c f931 	bl	8091640 <__aeabi_ui2f>
            if ( main_gen_data[alrm_indx++] > 0 &&  main_gen_data[alrm_indx++] <= 15)
 80853de:	4629      	mov	r1, r5
            main_gen_data[alrm_indx++] = alarm_buffer[ALARM_REG2];
 80853e0:	6120      	str	r0, [r4, #16]
            if ( main_gen_data[alrm_indx++] > 0 &&  main_gen_data[alrm_indx++] <= 15)
 80853e2:	6960      	ldr	r0, [r4, #20]
 80853e4:	f00c fb40 	bl	8091a68 <__aeabi_fcmpgt>
 80853e8:	b138      	cbz	r0, 80853fa <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0x92>
 80853ea:	492c      	ldr	r1, [pc, #176]	; (808549c <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0x134>)
 80853ec:	69a0      	ldr	r0, [r4, #24]
 80853ee:	f00c fb27 	bl	8091a40 <__aeabi_fcmple>
 80853f2:	b110      	cbz	r0, 80853fa <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0x92>
                main_gen_data[alrm_indx] = 3;
 80853f4:	4b28      	ldr	r3, [pc, #160]	; (8085498 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0x130>)
 80853f6:	61e3      	str	r3, [r4, #28]
                return;
 80853f8:	e7bd      	b.n	8085376 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0xe>
            main_gen_data[ALARM_CODE1] = 0;
 80853fa:	6125      	str	r5, [r4, #16]
            break;
 80853fc:	e7bb      	b.n	8085376 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0xe>
            bas_inst_gen_data[TOTAL_KWH] = MB_UNAVAIL_VAL;
 80853fe:	4c28      	ldr	r4, [pc, #160]	; (80854a0 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0x138>)
 8085400:	4e24      	ldr	r6, [pc, #144]	; (8085494 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0x12c>)
            bas_inst_gen_data[GEN_FREQCY] = modbus_buffer[GEN_FREQCY] * 0.1;
 8085402:	462f      	mov	r7, r5
            bas_inst_gen_data[TOTAL_KWH] = MB_UNAVAIL_VAL;
 8085404:	6026      	str	r6, [r4, #0]
            bas_inst_gen_data[OIL_PRESSR] = modbus_buffer[OIL_PRESSR];
 8085406:	6848      	ldr	r0, [r1, #4]
 8085408:	f00c f91a 	bl	8091640 <__aeabi_ui2f>
 808540c:	6060      	str	r0, [r4, #4]
            bas_inst_gen_data[COOL_TEMP] = modbus_buffer[COOL_TEMP];
 808540e:	68a8      	ldr	r0, [r5, #8]
 8085410:	f00c f916 	bl	8091640 <__aeabi_ui2f>
            bas_inst_gen_data[OIL_TEMP] = MB_UNAVAIL_VAL;
 8085414:	60e6      	str	r6, [r4, #12]
            bas_inst_gen_data[COOL_TEMP] = modbus_buffer[COOL_TEMP];
 8085416:	60a0      	str	r0, [r4, #8]
            bas_inst_gen_data[FUEL_LEVEL] = MB_UNAVAIL_VAL;
 8085418:	6126      	str	r6, [r4, #16]
            bas_inst_gen_data[CHARGER_ALT_VOLT] = modbus_buffer [CHARGER_ALT_VOLT] * 0.1;
 808541a:	6968      	ldr	r0, [r5, #20]
 808541c:	f00b fcd6 	bl	8090dcc <__aeabi_ui2d>
 8085420:	a319      	add	r3, pc, #100	; (adr r3, 8085488 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0x120>)
 8085422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085426:	f00b fd4b 	bl	8090ec0 <__aeabi_dmul>
 808542a:	f00c f803 	bl	8091434 <__aeabi_d2f>
 808542e:	6160      	str	r0, [r4, #20]
            bas_inst_gen_data[ENGINE_BATT_VOLT] = modbus_buffer[ENGINE_BATT_VOLT] * 0.1;
 8085430:	69a8      	ldr	r0, [r5, #24]
 8085432:	f00b fccb 	bl	8090dcc <__aeabi_ui2d>
 8085436:	a314      	add	r3, pc, #80	; (adr r3, 8085488 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0x120>)
 8085438:	e9d3 2300 	ldrd	r2, r3, [r3]
 808543c:	f00b fd40 	bl	8090ec0 <__aeabi_dmul>
 8085440:	f00b fff8 	bl	8091434 <__aeabi_d2f>
 8085444:	61a0      	str	r0, [r4, #24]
            bas_inst_gen_data[ENGINE_SPEED] = modbus_buffer[ENGINE_SPEED];
 8085446:	69e8      	ldr	r0, [r5, #28]
 8085448:	f00c f8fa 	bl	8091640 <__aeabi_ui2f>
 808544c:	61e0      	str	r0, [r4, #28]
            bas_inst_gen_data[GEN_FREQCY] = modbus_buffer[GEN_FREQCY] * 0.1;
 808544e:	f857 0f20 	ldr.w	r0, [r7, #32]!
 8085452:	f00b fcbb 	bl	8090dcc <__aeabi_ui2d>
 8085456:	a30c      	add	r3, pc, #48	; (adr r3, 8085488 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0x120>)
 8085458:	e9d3 2300 	ldrd	r2, r3, [r3]
 808545c:	f00b fd30 	bl	8090ec0 <__aeabi_dmul>
 8085460:	f00b ffe8 	bl	8091434 <__aeabi_d2f>
 8085464:	f104 0824 	add.w	r8, r4, #36	; 0x24
 8085468:	6220      	str	r0, [r4, #32]
            for (; metrc_indx < EARTH_CURR; metrc_indx++)
 808546a:	3544      	adds	r5, #68	; 0x44
                bas_inst_gen_data[metrc_indx] = modbus_buffer[metrc_indx];
 808546c:	f857 0f04 	ldr.w	r0, [r7, #4]!
 8085470:	f00c f8e6 	bl	8091640 <__aeabi_ui2f>
            for (; metrc_indx < EARTH_CURR; metrc_indx++)
 8085474:	42bd      	cmp	r5, r7
                bas_inst_gen_data[metrc_indx] = modbus_buffer[metrc_indx];
 8085476:	f848 0b04 	str.w	r0, [r8], #4
            for (; metrc_indx < EARTH_CURR; metrc_indx++)
 808547a:	d1f7      	bne.n	808546c <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0x104>
                bas_inst_gen_data[metrc_indx] = MB_UNAVAIL_VAL;
 808547c:	64a6      	str	r6, [r4, #72]	; 0x48
 808547e:	64e6      	str	r6, [r4, #76]	; 0x4c
 8085480:	6526      	str	r6, [r4, #80]	; 0x50
 8085482:	6566      	str	r6, [r4, #84]	; 0x54
 8085484:	65a6      	str	r6, [r4, #88]	; 0x58
            for ( ; metrc_indx <= CURR_LAG_LEAD; metrc_indx++)
 8085486:	e776      	b.n	8085376 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt+0xe>
 8085488:	9999999a 	.word	0x9999999a
 808548c:	3fb99999 	.word	0x3fb99999
 8085490:	20000cd8 	.word	0x20000cd8
 8085494:	ccc0a468 	.word	0xccc0a468
 8085498:	40400000 	.word	0x40400000
 808549c:	41700000 	.word	0x41700000
 80854a0:	200005c8 	.word	0x200005c8

080854a4 <_ZN18DseGensetQueryBankC1Ev>:

DseGensetQueryBank::DseGensetQueryBank()
{
    //******** DSE MAIN_DATA QUERY GROUP ********//

    dseMainDatakey[GEN_QUERY1].start_addr = DSE_START_ADDR1;
 80854a4:	f240 7206 	movw	r2, #1798	; 0x706
 80854a8:	8002      	strh	r2, [r0, #0]
    dseMainDatakey[GEN_QUERY1].num_of_regs = DSE_NUM_OF_REGS1;
 80854aa:	220c      	movs	r2, #12
 80854ac:	8042      	strh	r2, [r0, #2]

    dseMainDatakey[GEN_QUERY2].start_addr = DSE_START_ADDR2;
 80854ae:	f44f 7241 	mov.w	r2, #772	; 0x304
 80854b2:	8082      	strh	r2, [r0, #4]
    dseMainDatakey[GEN_QUERY2].num_of_regs = DSE_NUM_OF_REGS2;
 80854b4:	2201      	movs	r2, #1
 80854b6:	80c2      	strh	r2, [r0, #6]

    dseMainDatakey[GEN_QUERY3].start_addr = DSE_START_ADDR3;
    dseMainDatakey[GEN_QUERY3].num_of_regs = DSE_NUM_OF_REGS3;
 80854b8:	8142      	strh	r2, [r0, #10]

    dseMainDatakey[GEN_QUERY4].start_addr = DSE_START_ADDR4;
 80854ba:	f649 2201 	movw	r2, #39425	; 0x9a01
 80854be:	8182      	strh	r2, [r0, #12]
    dseMainDatakey[GEN_QUERY4].num_of_regs = DSE_NUM_OF_REGS4;
 80854c0:	2206      	movs	r2, #6
 80854c2:	81c2      	strh	r2, [r0, #14]

    //******** DSE BASIC_INSTRUMENTATION_DATA QUERY GROUP ********//

    dseBasInstDataKey[GEN_QUERY1].start_addr = DSE_START_ADDR5;
 80854c4:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80854c8:	8202      	strh	r2, [r0, #16]
    dseBasInstDataKey[GEN_QUERY1].num_of_regs = DSE_NUM_OF_REGS5;

    dseBasInstDataKey[GEN_QUERY2].start_addr = DSE_START_ADDR6;
 80854ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80854ce:	8282      	strh	r2, [r0, #20]
    dseBasInstDataKey[GEN_QUERY2].num_of_regs = DSE_NUM_OF_REGS6;
 80854d0:	2214      	movs	r2, #20
    dseMainDatakey[GEN_QUERY3].start_addr = DSE_START_ADDR3;
 80854d2:	f240 4107 	movw	r1, #1031	; 0x407
    dseBasInstDataKey[GEN_QUERY2].num_of_regs = DSE_NUM_OF_REGS6;
 80854d6:	82c2      	strh	r2, [r0, #22]

    dseBasInstDataKey[GEN_QUERY3].start_addr = DSE_START_ADDR7;
 80854d8:	f240 4214 	movw	r2, #1044	; 0x414
    dseMainDatakey[GEN_QUERY3].start_addr = DSE_START_ADDR3;
 80854dc:	8101      	strh	r1, [r0, #8]
    dseBasInstDataKey[GEN_QUERY3].start_addr = DSE_START_ADDR7;
 80854de:	8302      	strh	r2, [r0, #24]
    dseBasInstDataKey[GEN_QUERY1].num_of_regs = DSE_NUM_OF_REGS5;
 80854e0:	2102      	movs	r1, #2
    dseBasInstDataKey[GEN_QUERY3].num_of_regs = DSE_NUM_OF_REGS7;

    //******** DSE DERIVED_INSTRUMENTATION_DATA QUERY GROUP ********//

    dseDerInstDataKey.start_addr = DSE_START_ADDR8;
 80854e2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    dseBasInstDataKey[GEN_QUERY1].num_of_regs = DSE_NUM_OF_REGS5;
 80854e6:	8241      	strh	r1, [r0, #18]
    dseDerInstDataKey.start_addr = DSE_START_ADDR8;
 80854e8:	8382      	strh	r2, [r0, #28]

    dseGridBasInstDataKey[GEN_QUERY2].start_addr = DSE_START_ADDR10;
    dseGridBasInstDataKey[GEN_QUERY2].num_of_regs = DSE_NUM_OF_REGS10;

    dseGridBasInstDataKey[GEN_QUERY3].start_addr = DSE_START_ADDR11;
    dseGridBasInstDataKey[GEN_QUERY3].num_of_regs = DSE_NUM_OF_REGS11;
 80854ea:	8541      	strh	r1, [r0, #42]	; 0x2a
    dseDerInstDataKey.num_of_regs = DSE_NUM_OF_REGS8;
 80854ec:	2217      	movs	r2, #23

    //******** GRID-DSE DERIVED_INSTRUMENTATION_DATA QUERY GROUP ********//
    dseGridDerInstDataKey[GEN_QUERY1].start_addr = DSE_START_ADDR12;
 80854ee:	f44f 61c3 	mov.w	r1, #1560	; 0x618
DseGensetQueryBank::DseGensetQueryBank()
 80854f2:	b530      	push	{r4, r5, lr}
    dseDerInstDataKey.num_of_regs = DSE_NUM_OF_REGS8;
 80854f4:	83c2      	strh	r2, [r0, #30]
    dseBasInstDataKey[GEN_QUERY3].num_of_regs = DSE_NUM_OF_REGS7;
 80854f6:	240f      	movs	r4, #15
    dseGridBasInstDataKey[GEN_QUERY1].start_addr = DSE_START_ADDR9;
 80854f8:	f240 4223 	movw	r2, #1059	; 0x423
    dseGridDerInstDataKey[GEN_QUERY1].start_addr = DSE_START_ADDR12;
 80854fc:	8581      	strh	r1, [r0, #44]	; 0x2c
    dseGridDerInstDataKey[GEN_QUERY1].num_of_regs = DSE_NUM_OF_REGS12;
 80854fe:	210a      	movs	r1, #10
    dseGridBasInstDataKey[GEN_QUERY2].start_addr = DSE_START_ADDR10;
 8085500:	f240 4533 	movw	r5, #1075	; 0x433
    dseBasInstDataKey[GEN_QUERY3].num_of_regs = DSE_NUM_OF_REGS7;
 8085504:	8344      	strh	r4, [r0, #26]
    dseGridBasInstDataKey[GEN_QUERY1].start_addr = DSE_START_ADDR9;
 8085506:	8402      	strh	r2, [r0, #32]
    dseGridBasInstDataKey[GEN_QUERY2].num_of_regs = DSE_NUM_OF_REGS10;
 8085508:	84c4      	strh	r4, [r0, #38]	; 0x26
    dseGridBasInstDataKey[GEN_QUERY1].num_of_regs = DSE_NUM_OF_REGS9;
 808550a:	220d      	movs	r2, #13
    dseGridBasInstDataKey[GEN_QUERY3].start_addr = DSE_START_ADDR11;
 808550c:	f240 7412 	movw	r4, #1810	; 0x712
    dseGridDerInstDataKey[GEN_QUERY1].num_of_regs = DSE_NUM_OF_REGS12;
 8085510:	85c1      	strh	r1, [r0, #46]	; 0x2e

    dseGridDerInstDataKey[GEN_QUERY2].start_addr = DSE_START_ADDR13;
 8085512:	f240 6122 	movw	r1, #1570	; 0x622
    dseGridBasInstDataKey[GEN_QUERY1].num_of_regs = DSE_NUM_OF_REGS9;
 8085516:	8442      	strh	r2, [r0, #34]	; 0x22
    dseGridBasInstDataKey[GEN_QUERY2].start_addr = DSE_START_ADDR10;
 8085518:	8485      	strh	r5, [r0, #36]	; 0x24
    dseGridBasInstDataKey[GEN_QUERY3].start_addr = DSE_START_ADDR11;
 808551a:	8504      	strh	r4, [r0, #40]	; 0x28
    dseGridDerInstDataKey[GEN_QUERY2].start_addr = DSE_START_ADDR13;
 808551c:	8601      	strh	r1, [r0, #48]	; 0x30
    dseGridDerInstDataKey[GEN_QUERY2].num_of_regs = DSE_NUM_OF_REGS13;
 808551e:	8642      	strh	r2, [r0, #50]	; 0x32
}
 8085520:	bd30      	pop	{r4, r5, pc}

08085522 <_ZN18DseGensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>:

void DseGensetQueryBank::getGenQueryKey(GeneratorDataSet gen_data_set, uint8_t gen_query_unit,
                                        GeneratorQueryKey *dseKey)
{
  switch (gen_data_set)
 8085522:	2903      	cmp	r1, #3
 8085524:	d80a      	bhi.n	808553c <_ZN18DseGensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x1a>
 8085526:	e8df f001 	tbb	[pc, r1]
 808552a:	0a02      	.short	0x0a02
 808552c:	1410      	.short	0x1410
  {
    case GEN_MAIN:
    {
      dseKey->start_addr = dseMainDatakey[gen_query_unit].start_addr;
 808552e:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8085532:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
 8085536:	801a      	strh	r2, [r3, #0]
      dseKey->num_of_regs = dseMainDatakey[gen_query_unit].num_of_regs;
 8085538:	884a      	ldrh	r2, [r1, #2]
    }

    case GEN_ENG_STATUS:
    {
      dseKey->start_addr = DSE_ENGINE_STATE_ADDR;
      dseKey->num_of_regs = NUM_OF_ENGSTATE_REGS;
 808553a:	805a      	strh	r2, [r3, #2]

      break;
    }
  }   
}
 808553c:	4770      	bx	lr
      dseKey->start_addr = dseBasInstDataKey[gen_query_unit].start_addr;
 808553e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8085542:	8a02      	ldrh	r2, [r0, #16]
 8085544:	801a      	strh	r2, [r3, #0]
      dseKey->num_of_regs = dseBasInstDataKey[gen_query_unit].num_of_regs;
 8085546:	8a42      	ldrh	r2, [r0, #18]
 8085548:	e7f7      	b.n	808553a <_ZN18DseGensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x18>
      dseKey->start_addr = dseDerInstDataKey.start_addr;
 808554a:	8b82      	ldrh	r2, [r0, #28]
 808554c:	801a      	strh	r2, [r3, #0]
      dseKey->num_of_regs = dseDerInstDataKey.num_of_regs;
 808554e:	8bc2      	ldrh	r2, [r0, #30]
 8085550:	e7f3      	b.n	808553a <_ZN18DseGensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x18>
      dseKey->start_addr = DSE_ENGINE_STATE_ADDR;
 8085552:	f240 4207 	movw	r2, #1031	; 0x407
 8085556:	801a      	strh	r2, [r3, #0]
      dseKey->num_of_regs = NUM_OF_ENGSTATE_REGS;
 8085558:	2201      	movs	r2, #1
 808555a:	e7ee      	b.n	808553a <_ZN18DseGensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x18>

0808555c <_ZN18DseGensetQueryBank15getGridQueryKeyE11GridDataSethP17GeneratorQueryKey>:

void DseGensetQueryBank::getGridQueryKey(GridDataSet grid_data_set, uint8_t grid_query_unit, 
                         GeneratorQueryKey *dseKey)
{
  switch (grid_data_set)
 808555c:	2901      	cmp	r1, #1
 808555e:	d002      	beq.n	8085566 <_ZN18DseGensetQueryBank15getGridQueryKeyE11GridDataSethP17GeneratorQueryKey+0xa>
 8085560:	2902      	cmp	r1, #2
 8085562:	d007      	beq.n	8085574 <_ZN18DseGensetQueryBank15getGridQueryKeyE11GridDataSethP17GeneratorQueryKey+0x18>
 8085564:	4770      	bx	lr
  {
    case GRID_BAS_INST:
    {
      dseKey->start_addr = dseGridBasInstDataKey[grid_query_unit].start_addr;
 8085566:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 808556a:	8c02      	ldrh	r2, [r0, #32]
 808556c:	801a      	strh	r2, [r3, #0]
      dseKey->num_of_regs = dseGridBasInstDataKey[grid_query_unit].num_of_regs;
 808556e:	8c42      	ldrh	r2, [r0, #34]	; 0x22
    }

    case GRID_DER_INST:
    {
      dseKey->start_addr = dseGridDerInstDataKey[grid_query_unit].start_addr;
      dseKey->num_of_regs = dseGridDerInstDataKey[grid_query_unit].num_of_regs;
 8085570:	805a      	strh	r2, [r3, #2]

      break;
    } 
  }
}
 8085572:	4770      	bx	lr
      dseKey->start_addr = dseGridDerInstDataKey[grid_query_unit].start_addr;
 8085574:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8085578:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 808557a:	801a      	strh	r2, [r3, #0]
      dseKey->num_of_regs = dseGridDerInstDataKey[grid_query_unit].num_of_regs;
 808557c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
 808557e:	e7f7      	b.n	8085570 <_ZN18DseGensetQueryBank15getGridQueryKeyE11GridDataSethP17GeneratorQueryKey+0x14>

08085580 <_ZN18DseGensetQueryBankD1Ev>:

DseGensetQueryBank::~DseGensetQueryBank(){}
 8085580:	4770      	bx	lr
	...

08085584 <_Z18processDseMainDataPmPt>:
    }
  }
}

void processDseMainData(uint32_t *modbus_buffer, uint16_t *alarm_buffer)
{
 8085584:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  main_gen_data[RUN_HRS] = modbus_buffer[RUN_HRS] / 3600;
 8085588:	f44f 6361 	mov.w	r3, #3600	; 0xe10
{
 808558c:	4605      	mov	r5, r0
  main_gen_data[RUN_HRS] = modbus_buffer[RUN_HRS] / 3600;
 808558e:	6800      	ldr	r0, [r0, #0]
{
 8085590:	460c      	mov	r4, r1
  main_gen_data[RUN_HRS] = modbus_buffer[RUN_HRS] / 3600;
 8085592:	fbb0 f0f3 	udiv	r0, r0, r3
 8085596:	f00c f853 	bl	8091640 <__aeabi_ui2f>
 808559a:	4f23      	ldr	r7, [pc, #140]	; (8085628 <_Z18processDseMainDataPmPt+0xa4>)
  // If the Gen frequeny is greater than 49.7Hz, then Gen is running, otherwise the Gen is not running
  main_gen_data[ENGINE_STATE] = modbus_buffer[ENGINE_STATE] > 497 ? ENGINE_RUNNING : ENGINE_AT_REST;

  // Alarms; Cycle through the 6 alarm registers and apply bitwise ops to get actual alarms
  uint8_t alarm_code = 1;
  uint8_t data_indx = ALARM_CODE1;
 808559c:	f04f 0a04 	mov.w	sl, #4
  main_gen_data[RUN_HRS] = modbus_buffer[RUN_HRS] / 3600;
 80855a0:	6038      	str	r0, [r7, #0]
  main_gen_data[NUM_OF_STARTS] = modbus_buffer[NUM_OF_STARTS];
 80855a2:	6868      	ldr	r0, [r5, #4]
 80855a4:	f00c f84c 	bl	8091640 <__aeabi_ui2f>
 80855a8:	6078      	str	r0, [r7, #4]
  main_gen_data[CTRL_MODE] = modbus_buffer[CTRL_MODE];
 80855aa:	68a8      	ldr	r0, [r5, #8]
 80855ac:	f00c f848 	bl	8091640 <__aeabi_ui2f>
 80855b0:	60b8      	str	r0, [r7, #8]
  main_gen_data[ENGINE_STATE] = modbus_buffer[ENGINE_STATE] > 497 ? ENGINE_RUNNING : ENGINE_AT_REST;
 80855b2:	68eb      	ldr	r3, [r5, #12]
  uint8_t alarm_code = 1;
 80855b4:	2501      	movs	r5, #1
  main_gen_data[ENGINE_STATE] = modbus_buffer[ENGINE_STATE] > 497 ? ENGINE_RUNNING : ENGINE_AT_REST;
 80855b6:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 80855ba:	bf34      	ite	cc
 80855bc:	2300      	movcc	r3, #0
 80855be:	4b1b      	ldrcs	r3, [pc, #108]	; (808562c <_Z18processDseMainDataPmPt+0xa8>)
 80855c0:	60fb      	str	r3, [r7, #12]
  uint8_t alarm_code = 1;
 80855c2:	46a8      	mov	r8, r5
 80855c4:	f04f 0b0c 	mov.w	fp, #12
  for(uint8_t alarm_reg_indx = 0; alarm_reg_indx < DSE_ALARM_REGS; alarm_reg_indx++)
  {
    for (int bit_shift_offset = 3; bit_shift_offset >= 0; bit_shift_offset--)
    {
      uint8_t alarm_status = (alarm_buffer[alarm_reg_indx] >> (DSE_BIT_SHIFT_VAL * bit_shift_offset)) & DSE_ALARM_BIT_MASK;
 80855c8:	8826      	ldrh	r6, [r4, #0]
 80855ca:	fa46 f60b 	asr.w	r6, r6, fp
 80855ce:	f006 060f 	and.w	r6, r6, #15

      // Check if alarm is active
      if (alarm_status > INACTIVE && alarm_status <= CONTROLLED_SHUTDOWN_ALARM)
 80855d2:	1eb3      	subs	r3, r6, #2
 80855d4:	2b03      	cmp	r3, #3
 80855d6:	d815      	bhi.n	8085604 <_Z18processDseMainDataPmPt+0x80>
      {
        main_gen_data[data_indx++] = alarm_code * 1.0;     // Alarm code
 80855d8:	4640      	mov	r0, r8
 80855da:	f00b fc07 	bl	8090dec <__aeabi_i2d>
 80855de:	f00b ff29 	bl	8091434 <__aeabi_d2f>
 80855e2:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
        main_gen_data[data_indx++] = alarm_status * 1.0;   // Alarm status
 80855e6:	4630      	mov	r0, r6
 80855e8:	f00b fc00 	bl	8090dec <__aeabi_i2d>
 80855ec:	f00b ff22 	bl	8091434 <__aeabi_d2f>
        main_gen_data[data_indx++] = alarm_code * 1.0;     // Alarm code
 80855f0:	f10a 0901 	add.w	r9, sl, #1
 80855f4:	fa5f f989 	uxtb.w	r9, r9
        main_gen_data[data_indx++] = alarm_status * 1.0;   // Alarm status
 80855f8:	f10a 0a02 	add.w	sl, sl, #2
 80855fc:	fa5f fa8a 	uxtb.w	sl, sl
 8085600:	f847 0029 	str.w	r0, [r7, r9, lsl #2]
      }

      alarm_code++;
 8085604:	f1ab 0b04 	sub.w	fp, fp, #4
 8085608:	f108 0801 	add.w	r8, r8, #1
    for (int bit_shift_offset = 3; bit_shift_offset >= 0; bit_shift_offset--)
 808560c:	f11b 0f04 	cmn.w	fp, #4
      alarm_code++;
 8085610:	fa5f f888 	uxtb.w	r8, r8
    for (int bit_shift_offset = 3; bit_shift_offset >= 0; bit_shift_offset--)
 8085614:	d1d8      	bne.n	80855c8 <_Z18processDseMainDataPmPt+0x44>
 8085616:	3504      	adds	r5, #4
 8085618:	b2ed      	uxtb	r5, r5
  for(uint8_t alarm_reg_indx = 0; alarm_reg_indx < DSE_ALARM_REGS; alarm_reg_indx++)
 808561a:	2d19      	cmp	r5, #25
 808561c:	f104 0402 	add.w	r4, r4, #2
 8085620:	d1cf      	bne.n	80855c2 <_Z18processDseMainDataPmPt+0x3e>
    }
  }
}
 8085622:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085626:	bf00      	nop
 8085628:	20000cd8 	.word	0x20000cd8
 808562c:	40400000 	.word	0x40400000

08085630 <_Z21processDseBasInstDataPm>:

void processDseBasInstData(uint32_t *modbus_buffer)
{
 8085630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t data_indx = TOTAL_KWH;

  bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_U32BIT_SENTINEL_VALUE ? 
 8085634:	f06f 1306 	mvn.w	r3, #393222	; 0x60006
{
 8085638:	4604      	mov	r4, r0
  bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_U32BIT_SENTINEL_VALUE ? 
 808563a:	6800      	ldr	r0, [r0, #0]
 808563c:	4298      	cmp	r0, r3
 808563e:	d275      	bcs.n	808572c <_Z21processDseBasInstDataPm+0xfc>
                                 modbus_buffer[data_indx] * MULTPLR_PT1 : MB_SENTL_VAL;        // Gen Cummulative Kilowatt hours
 8085640:	f00b fffe 	bl	8091640 <__aeabi_ui2f>
  bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_U32BIT_SENTINEL_VALUE ? 
 8085644:	4942      	ldr	r1, [pc, #264]	; (8085750 <_Z21processDseBasInstDataPm+0x120>)
 8085646:	f00c f853 	bl	80916f0 <__aeabi_fmul>
 808564a:	4d42      	ldr	r5, [pc, #264]	; (8085754 <_Z21processDseBasInstDataPm+0x124>)
 808564c:	4627      	mov	r7, r4
 808564e:	462e      	mov	r6, r5
      
  for (data_indx = OIL_PRESSR; data_indx < CHARGER_ALT_VOLT; data_indx++)
  {
    // Oil pressure, Coolant tmep, Oil temp, Fuel level
    bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?
 8085650:	f647 79f8 	movw	r9, #32760	; 0x7ff8
 8085654:	f8df a108 	ldr.w	sl, [pc, #264]	; 8085760 <_Z21processDseBasInstDataPm+0x130>
  bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_U32BIT_SENTINEL_VALUE ? 
 8085658:	f846 0b04 	str.w	r0, [r6], #4
  for (data_indx = OIL_PRESSR; data_indx < CHARGER_ALT_VOLT; data_indx++)
 808565c:	f104 0810 	add.w	r8, r4, #16
    bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?
 8085660:	f857 0f04 	ldr.w	r0, [r7, #4]!
 8085664:	4548      	cmp	r0, r9
 8085666:	d863      	bhi.n	8085730 <_Z21processDseBasInstDataPm+0x100>
 8085668:	f00b ffea 	bl	8091640 <__aeabi_ui2f>
  for (data_indx = OIL_PRESSR; data_indx < CHARGER_ALT_VOLT; data_indx++)
 808566c:	4547      	cmp	r7, r8
    bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?
 808566e:	f846 0b04 	str.w	r0, [r6], #4
  for (data_indx = OIL_PRESSR; data_indx < CHARGER_ALT_VOLT; data_indx++)
 8085672:	d1f5      	bne.n	8085660 <_Z21processDseBasInstDataPm+0x30>
                                 modbus_buffer[data_indx] : MB_SENTL_VAL;
  }
   
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ?
 8085674:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8085678:	6960      	ldr	r0, [r4, #20]
 808567a:	4298      	cmp	r0, r3
 808567c:	d85a      	bhi.n	8085734 <_Z21processDseBasInstDataPm+0x104>
                                   modbus_buffer[data_indx] * MULTPLR_PT1 : MB_SENTL_VAL;      // Charger alternator voltage
 808567e:	f00b ffdf 	bl	8091640 <__aeabi_ui2f>
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ?
 8085682:	4933      	ldr	r1, [pc, #204]	; (8085750 <_Z21processDseBasInstDataPm+0x120>)
 8085684:	f00c f834 	bl	80916f0 <__aeabi_fmul>
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ? 
 8085688:	f64f 73f8 	movw	r3, #65528	; 0xfff8
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ?
 808568c:	6168      	str	r0, [r5, #20]
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ? 
 808568e:	69a0      	ldr	r0, [r4, #24]
 8085690:	4298      	cmp	r0, r3
 8085692:	d851      	bhi.n	8085738 <_Z21processDseBasInstDataPm+0x108>
                                   modbus_buffer[data_indx] * MULTPLR_PT1 : MB_SENTL_VAL;      // Enigne battery voltage
 8085694:	f00b ffd4 	bl	8091640 <__aeabi_ui2f>
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ? 
 8085698:	492d      	ldr	r1, [pc, #180]	; (8085750 <_Z21processDseBasInstDataPm+0x120>)
 808569a:	f00c f829 	bl	80916f0 <__aeabi_fmul>
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ? 
 808569e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ? 
 80856a2:	61a8      	str	r0, [r5, #24]
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ? 
 80856a4:	69e0      	ldr	r0, [r4, #28]
 80856a6:	4298      	cmp	r0, r3
 80856a8:	d848      	bhi.n	808573c <_Z21processDseBasInstDataPm+0x10c>
 80856aa:	f00b ffc9 	bl	8091640 <__aeabi_ui2f>
                                   modbus_buffer[data_indx] : MB_SENTL_VAL;                    // Engine speed     
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ? 
 80856ae:	f64f 73f8 	movw	r3, #65528	; 0xfff8
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ? 
 80856b2:	61e8      	str	r0, [r5, #28]
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ? 
 80856b4:	6a20      	ldr	r0, [r4, #32]
 80856b6:	4298      	cmp	r0, r3
 80856b8:	d842      	bhi.n	8085740 <_Z21processDseBasInstDataPm+0x110>
                                   modbus_buffer[data_indx] * MULTPLR_PT1 : MB_SENTL_VAL;      // Gen frequency
 80856ba:	f00b ffc1 	bl	8091640 <__aeabi_ui2f>
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ? 
 80856be:	4924      	ldr	r1, [pc, #144]	; (8085750 <_Z21processDseBasInstDataPm+0x120>)
 80856c0:	f00c f816 	bl	80916f0 <__aeabi_fmul>
 80856c4:	4f24      	ldr	r7, [pc, #144]	; (8085758 <_Z21processDseBasInstDataPm+0x128>)

  for (; data_indx < L1_WATT; data_indx++) // data_indx starts at 9
  {
    // L1-N, L2-N, L3-N, L1-L2, L2-L3, L3-L1 votlages, L1-L2, L2-L3, L3-L1 Currents, Earth current
    bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
 80856c6:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8085764 <_Z21processDseBasInstDataPm+0x134>
 80856ca:	f8df b094 	ldr.w	fp, [pc, #148]	; 8085760 <_Z21processDseBasInstDataPm+0x130>
 80856ce:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8085750 <_Z21processDseBasInstDataPm+0x120>
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ? 
 80856d2:	6228      	str	r0, [r5, #32]
  for (; data_indx < L1_WATT; data_indx++) // data_indx starts at 9
 80856d4:	f104 0620 	add.w	r6, r4, #32
 80856d8:	f104 0848 	add.w	r8, r4, #72	; 0x48
    bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
 80856dc:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80856e0:	4550      	cmp	r0, sl
 80856e2:	d22f      	bcs.n	8085744 <_Z21processDseBasInstDataPm+0x114>
                                   modbus_buffer[data_indx] * MULTPLR_PT1 : MB_SENTL_VAL;
 80856e4:	f00b ffac 	bl	8091640 <__aeabi_ui2f>
    bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
 80856e8:	4649      	mov	r1, r9
 80856ea:	f00c f801 	bl	80916f0 <__aeabi_fmul>
  for (; data_indx < L1_WATT; data_indx++) // data_indx starts at 9
 80856ee:	4546      	cmp	r6, r8
    bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
 80856f0:	f847 0b04 	str.w	r0, [r7], #4
  for (; data_indx < L1_WATT; data_indx++) // data_indx starts at 9
 80856f4:	d1f2      	bne.n	80856dc <_Z21processDseBasInstDataPm+0xac>
 80856f6:	4f19      	ldr	r7, [pc, #100]	; (808575c <_Z21processDseBasInstDataPm+0x12c>)
  }

  for(;data_indx < CURR_LAG_LEAD; data_indx++) // data_indx starts at 19
  {
    // L1, L2 & L3 Wattage
    bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
 80856f8:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8085764 <_Z21processDseBasInstDataPm+0x134>
 80856fc:	f8df a060 	ldr.w	sl, [pc, #96]	; 8085760 <_Z21processDseBasInstDataPm+0x130>
 8085700:	f104 0854 	add.w	r8, r4, #84	; 0x54
 8085704:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8085708:	4548      	cmp	r0, r9
 808570a:	d21d      	bcs.n	8085748 <_Z21processDseBasInstDataPm+0x118>
 808570c:	f00b ff98 	bl	8091640 <__aeabi_ui2f>
  for(;data_indx < CURR_LAG_LEAD; data_indx++) // data_indx starts at 19
 8085710:	4546      	cmp	r6, r8
    bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
 8085712:	f847 0b04 	str.w	r0, [r7], #4
  for(;data_indx < CURR_LAG_LEAD; data_indx++) // data_indx starts at 19
 8085716:	d1f5      	bne.n	8085704 <_Z21processDseBasInstDataPm+0xd4>
                                   modbus_buffer[data_indx] : MB_SENTL_VAL;
  }

  bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ? 
 8085718:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 808571c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 808571e:	4298      	cmp	r0, r3
 8085720:	d814      	bhi.n	808574c <_Z21processDseBasInstDataPm+0x11c>
 8085722:	f00b ff8d 	bl	8091640 <__aeabi_ui2f>
 8085726:	65a8      	str	r0, [r5, #88]	; 0x58
                                 modbus_buffer[data_indx] : MB_SENTL_VAL;                      // Current Lag-Lead
}
 8085728:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_U32BIT_SENTINEL_VALUE ? 
 808572c:	480c      	ldr	r0, [pc, #48]	; (8085760 <_Z21processDseBasInstDataPm+0x130>)
 808572e:	e78c      	b.n	808564a <_Z21processDseBasInstDataPm+0x1a>
    bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?
 8085730:	4650      	mov	r0, sl
 8085732:	e79b      	b.n	808566c <_Z21processDseBasInstDataPm+0x3c>
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ?
 8085734:	480a      	ldr	r0, [pc, #40]	; (8085760 <_Z21processDseBasInstDataPm+0x130>)
 8085736:	e7a7      	b.n	8085688 <_Z21processDseBasInstDataPm+0x58>
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ? 
 8085738:	4809      	ldr	r0, [pc, #36]	; (8085760 <_Z21processDseBasInstDataPm+0x130>)
 808573a:	e7b0      	b.n	808569e <_Z21processDseBasInstDataPm+0x6e>
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ? 
 808573c:	4808      	ldr	r0, [pc, #32]	; (8085760 <_Z21processDseBasInstDataPm+0x130>)
 808573e:	e7b6      	b.n	80856ae <_Z21processDseBasInstDataPm+0x7e>
  bas_inst_gen_data[data_indx++] = modbus_buffer[data_indx] < DSE_U16BIT_SENTINEL_VALUE ? 
 8085740:	4807      	ldr	r0, [pc, #28]	; (8085760 <_Z21processDseBasInstDataPm+0x130>)
 8085742:	e7bf      	b.n	80856c4 <_Z21processDseBasInstDataPm+0x94>
    bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
 8085744:	4658      	mov	r0, fp
 8085746:	e7d2      	b.n	80856ee <_Z21processDseBasInstDataPm+0xbe>
    bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
 8085748:	4650      	mov	r0, sl
 808574a:	e7e1      	b.n	8085710 <_Z21processDseBasInstDataPm+0xe0>
  bas_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ? 
 808574c:	4804      	ldr	r0, [pc, #16]	; (8085760 <_Z21processDseBasInstDataPm+0x130>)
 808574e:	e7ea      	b.n	8085726 <_Z21processDseBasInstDataPm+0xf6>
 8085750:	3dcccccd 	.word	0x3dcccccd
 8085754:	200005c8 	.word	0x200005c8
 8085758:	200005ec 	.word	0x200005ec
 808575c:	20000614 	.word	0x20000614
 8085760:	ccbebc20 	.word	0xccbebc20
 8085764:	7ff97ff9 	.word	0x7ff97ff9

08085768 <_Z21processDseDerInstDataPm>:

void processDseDerInstData(uint32_t *modbus_buffer)
{
 8085768:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808576c:	4f1e      	ldr	r7, [pc, #120]	; (80857e8 <_Z21processDseDerInstDataPm+0x80>)
 808576e:	4605      	mov	r5, r0
 8085770:	463e      	mov	r6, r7
  uint8_t data_indx = TOTAL_WATT;
  for (; data_indx < L1_PF; data_indx++)
  {
    // Gen total W, L1 L2 L3 VA, Gen total VA, L1 L2 L3 VAr, Gen total VAr
    der_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ? 
 8085772:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80857f8 <_Z21processDseDerInstDataPm+0x90>
 8085776:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80857f4 <_Z21processDseDerInstDataPm+0x8c>
 808577a:	1f04      	subs	r4, r0, #4
 808577c:	f100 0820 	add.w	r8, r0, #32
 8085780:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8085784:	4548      	cmp	r0, r9
 8085786:	d228      	bcs.n	80857da <_Z21processDseDerInstDataPm+0x72>
 8085788:	f00b ff5a 	bl	8091640 <__aeabi_ui2f>
  for (; data_indx < L1_PF; data_indx++)
 808578c:	4544      	cmp	r4, r8
    der_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ? 
 808578e:	f847 0b04 	str.w	r0, [r7], #4
  for (; data_indx < L1_PF; data_indx++)
 8085792:	d1f5      	bne.n	8085780 <_Z21processDseDerInstDataPm+0x18>
  }

  for (; data_indx < PERCENT_OF_FULL_POWER; data_indx++) // data_indx starts at 9,
  {
    // L1 L2 L3 PF, Gen Average PF
    der_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?  
 8085794:	f647 7af8 	movw	sl, #32760	; 0x7ff8
 8085798:	4f14      	ldr	r7, [pc, #80]	; (80857ec <_Z21processDseDerInstDataPm+0x84>)
 808579a:	f8df b058 	ldr.w	fp, [pc, #88]	; 80857f4 <_Z21processDseDerInstDataPm+0x8c>
 808579e:	f8df 905c 	ldr.w	r9, [pc, #92]	; 80857fc <_Z21processDseDerInstDataPm+0x94>
 80857a2:	f105 0830 	add.w	r8, r5, #48	; 0x30
 80857a6:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80857aa:	4550      	cmp	r0, sl
 80857ac:	d817      	bhi.n	80857de <_Z21processDseDerInstDataPm+0x76>
                                   modbus_buffer[data_indx] * MULTPLR_PT01 : MB_SENTL_VAL;
 80857ae:	f00b ff47 	bl	8091640 <__aeabi_ui2f>
    der_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?  
 80857b2:	4649      	mov	r1, r9
 80857b4:	f00b ff9c 	bl	80916f0 <__aeabi_fmul>
  for (; data_indx < PERCENT_OF_FULL_POWER; data_indx++) // data_indx starts at 9,
 80857b8:	4544      	cmp	r4, r8
    der_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?  
 80857ba:	f847 0b04 	str.w	r0, [r7], #4
  for (; data_indx < PERCENT_OF_FULL_POWER; data_indx++) // data_indx starts at 9,
 80857be:	d1f2      	bne.n	80857a6 <_Z21processDseDerInstDataPm+0x3e>
  }

  der_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ? 
 80857c0:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 80857c4:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80857c6:	4298      	cmp	r0, r3
 80857c8:	d80b      	bhi.n	80857e2 <_Z21processDseDerInstDataPm+0x7a>
                                 modbus_buffer[data_indx] * MULTPLR_PT1 : MB_SENTL_VAL;      // Gen Full Power percent
 80857ca:	f00b ff39 	bl	8091640 <__aeabi_ui2f>
  der_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ? 
 80857ce:	4908      	ldr	r1, [pc, #32]	; (80857f0 <_Z21processDseDerInstDataPm+0x88>)
 80857d0:	f00b ff8e 	bl	80916f0 <__aeabi_fmul>
 80857d4:	6370      	str	r0, [r6, #52]	; 0x34
}
 80857d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    der_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ? 
 80857da:	4650      	mov	r0, sl
 80857dc:	e7d6      	b.n	808578c <_Z21processDseDerInstDataPm+0x24>
    der_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?  
 80857de:	4658      	mov	r0, fp
 80857e0:	e7ea      	b.n	80857b8 <_Z21processDseDerInstDataPm+0x50>
  der_inst_gen_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ? 
 80857e2:	4804      	ldr	r0, [pc, #16]	; (80857f4 <_Z21processDseDerInstDataPm+0x8c>)
 80857e4:	e7f6      	b.n	80857d4 <_Z21processDseDerInstDataPm+0x6c>
 80857e6:	bf00      	nop
 80857e8:	20000664 	.word	0x20000664
 80857ec:	20000688 	.word	0x20000688
 80857f0:	3dcccccd 	.word	0x3dcccccd
 80857f4:	ccbebc20 	.word	0xccbebc20
 80857f8:	7ff97ff9 	.word	0x7ff97ff9
 80857fc:	3c23d70a 	.word	0x3c23d70a

08085800 <_Z16formatGenDataDSE16GeneratorDataSetPmPt>:
{
 8085800:	4603      	mov	r3, r0
  switch (data_group)
 8085802:	2b01      	cmp	r3, #1
{
 8085804:	4608      	mov	r0, r1
 8085806:	4611      	mov	r1, r2
  switch (data_group)
 8085808:	d004      	beq.n	8085814 <_Z16formatGenDataDSE16GeneratorDataSetPmPt+0x14>
 808580a:	2b02      	cmp	r3, #2
 808580c:	d004      	beq.n	8085818 <_Z16formatGenDataDSE16GeneratorDataSetPmPt+0x18>
 808580e:	b92b      	cbnz	r3, 808581c <_Z16formatGenDataDSE16GeneratorDataSetPmPt+0x1c>
      processDseMainData(modbus_buffer, alarm_buffer);
 8085810:	f7ff beb8 	b.w	8085584 <_Z18processDseMainDataPmPt>
      processDseBasInstData(modbus_buffer);
 8085814:	f7ff bf0c 	b.w	8085630 <_Z21processDseBasInstDataPm>
      processDseDerInstData(modbus_buffer);
 8085818:	f7ff bfa6 	b.w	8085768 <_Z21processDseDerInstDataPm>
}
 808581c:	4770      	bx	lr
	...

08085820 <_Z25processDseGridBasInstDataPm>:

void processDseGridBasInstData(uint32_t *modbus_buffer)
{
 8085820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t data_indx = GRID_ACCUM_KWH;

  bas_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
 8085824:	4b1c      	ldr	r3, [pc, #112]	; (8085898 <_Z25processDseGridBasInstDataPm+0x78>)
{
 8085826:	4604      	mov	r4, r0
  bas_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
 8085828:	6800      	ldr	r0, [r0, #0]
 808582a:	4298      	cmp	r0, r3
 808582c:	d22e      	bcs.n	808588c <_Z25processDseGridBasInstDataPm+0x6c>
                                  (modbus_buffer[data_indx] * MULTPLR_PT1) : MB_SENTL_VAL;
 808582e:	f00b ff07 	bl	8091640 <__aeabi_ui2f>
  bas_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
 8085832:	491a      	ldr	r1, [pc, #104]	; (808589c <_Z25processDseGridBasInstDataPm+0x7c>)
 8085834:	f00b ff5c 	bl	80916f0 <__aeabi_fmul>
 8085838:	4625      	mov	r5, r4

  // Grid:Frequency | Grid:l1,l2,l3,l1l2,l2l3,l3l1 voltage | Grid:CurrLaglead | Grid:l1,l2,l3,earth current
  for(data_indx = GRID_FREQ; data_indx <= GRID_EARTH_AMP; data_indx++)
  {
    bas_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?
 808583a:	f647 79f8 	movw	r9, #32760	; 0x7ff8
  bas_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
 808583e:	4e18      	ldr	r6, [pc, #96]	; (80858a0 <_Z25processDseGridBasInstDataPm+0x80>)
    bas_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?
 8085840:	f8df a064 	ldr.w	sl, [pc, #100]	; 80858a8 <_Z25processDseGridBasInstDataPm+0x88>
 8085844:	f8df 8054 	ldr.w	r8, [pc, #84]	; 808589c <_Z25processDseGridBasInstDataPm+0x7c>
  bas_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
 8085848:	f846 0b04 	str.w	r0, [r6], #4
  for(data_indx = GRID_FREQ; data_indx <= GRID_EARTH_AMP; data_indx++)
 808584c:	f104 0730 	add.w	r7, r4, #48	; 0x30
    bas_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?
 8085850:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8085854:	4548      	cmp	r0, r9
 8085856:	d81b      	bhi.n	8085890 <_Z25processDseGridBasInstDataPm+0x70>
                                    (modbus_buffer[data_indx] * MULTPLR_PT1) : MB_SENTL_VAL;
 8085858:	f00b fef2 	bl	8091640 <__aeabi_ui2f>
    bas_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?
 808585c:	4641      	mov	r1, r8
 808585e:	f00b ff47 	bl	80916f0 <__aeabi_fmul>
  for(data_indx = GRID_FREQ; data_indx <= GRID_EARTH_AMP; data_indx++)
 8085862:	42bd      	cmp	r5, r7
    bas_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?
 8085864:	f846 0b04 	str.w	r0, [r6], #4
  for(data_indx = GRID_FREQ; data_indx <= GRID_EARTH_AMP; data_indx++)
 8085868:	d1f2      	bne.n	8085850 <_Z25processDseGridBasInstDataPm+0x30>
 808586a:	4e0e      	ldr	r6, [pc, #56]	; (80858a4 <_Z25processDseGridBasInstDataPm+0x84>)
  }

  // Grid:l1,l2,l3 watts
  for(data_indx = GRID_L1_WATT; data_indx <= GRID_L3_WATT; data_indx++)
  {
    bas_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
 808586c:	4f0a      	ldr	r7, [pc, #40]	; (8085898 <_Z25processDseGridBasInstDataPm+0x78>)
 808586e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 80858a8 <_Z25processDseGridBasInstDataPm+0x88>
 8085872:	343c      	adds	r4, #60	; 0x3c
 8085874:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8085878:	42b8      	cmp	r0, r7
 808587a:	d20b      	bcs.n	8085894 <_Z25processDseGridBasInstDataPm+0x74>
 808587c:	f00b fee0 	bl	8091640 <__aeabi_ui2f>
  for(data_indx = GRID_L1_WATT; data_indx <= GRID_L3_WATT; data_indx++)
 8085880:	42a5      	cmp	r5, r4
    bas_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
 8085882:	f846 0b04 	str.w	r0, [r6], #4
  for(data_indx = GRID_L1_WATT; data_indx <= GRID_L3_WATT; data_indx++)
 8085886:	d1f5      	bne.n	8085874 <_Z25processDseGridBasInstDataPm+0x54>
                                    modbus_buffer[data_indx] : MB_SENTL_VAL;
  }

}
 8085888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  bas_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
 808588c:	4806      	ldr	r0, [pc, #24]	; (80858a8 <_Z25processDseGridBasInstDataPm+0x88>)
 808588e:	e7d3      	b.n	8085838 <_Z25processDseGridBasInstDataPm+0x18>
    bas_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?
 8085890:	4650      	mov	r0, sl
 8085892:	e7e6      	b.n	8085862 <_Z25processDseGridBasInstDataPm+0x42>
    bas_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
 8085894:	4640      	mov	r0, r8
 8085896:	e7f3      	b.n	8085880 <_Z25processDseGridBasInstDataPm+0x60>
 8085898:	7ff97ff9 	.word	0x7ff97ff9
 808589c:	3dcccccd 	.word	0x3dcccccd
 80858a0:	20000624 	.word	0x20000624
 80858a4:	20000658 	.word	0x20000658
 80858a8:	ccbebc20 	.word	0xccbebc20

080858ac <_Z25processDseGridDerInstDataPm>:

void processDseGridDerInstData(uint32_t *modbus_buffer)
{
 80858ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80858b0:	4f1e      	ldr	r7, [pc, #120]	; (808592c <_Z25processDseGridDerInstDataPm+0x80>)
 80858b2:	4605      	mov	r5, r0
 80858b4:	463e      	mov	r6, r7
  // Grid:totalWatts | Grid:l1,l2,l3,total VA | Grid:l1,l2,l3,total VAr
  for (uint8_t data_indx = TOTAL_GRID_KW; data_indx <= GRID_TOTAL_VAR; data_indx++)
  {
    der_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
 80858b6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 808593c <_Z25processDseGridDerInstDataPm+0x90>
 80858ba:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8085938 <_Z25processDseGridDerInstDataPm+0x8c>
 80858be:	1f04      	subs	r4, r0, #4
 80858c0:	f100 0820 	add.w	r8, r0, #32
 80858c4:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80858c8:	4548      	cmp	r0, r9
 80858ca:	d228      	bcs.n	808591e <_Z25processDseGridDerInstDataPm+0x72>
 80858cc:	f00b feb8 	bl	8091640 <__aeabi_ui2f>
  for (uint8_t data_indx = TOTAL_GRID_KW; data_indx <= GRID_TOTAL_VAR; data_indx++)
 80858d0:	4544      	cmp	r4, r8
    der_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
 80858d2:	f847 0b04 	str.w	r0, [r7], #4
  for (uint8_t data_indx = TOTAL_GRID_KW; data_indx <= GRID_TOTAL_VAR; data_indx++)
 80858d6:	d1f5      	bne.n	80858c4 <_Z25processDseGridDerInstDataPm+0x18>
  }

  // Grid:l1,l2,l3,average powerFactor
  for (uint8_t data_indx = GRID_L1_PF; data_indx <= GRID_AVERAGE_PF; data_indx++)
  {
    der_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?
 80858d8:	f647 7af8 	movw	sl, #32760	; 0x7ff8
 80858dc:	4f14      	ldr	r7, [pc, #80]	; (8085930 <_Z25processDseGridDerInstDataPm+0x84>)
 80858de:	f8df b058 	ldr.w	fp, [pc, #88]	; 8085938 <_Z25processDseGridDerInstDataPm+0x8c>
 80858e2:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8085940 <_Z25processDseGridDerInstDataPm+0x94>
 80858e6:	f105 0830 	add.w	r8, r5, #48	; 0x30
 80858ea:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80858ee:	4550      	cmp	r0, sl
 80858f0:	d817      	bhi.n	8085922 <_Z25processDseGridDerInstDataPm+0x76>
                                    (modbus_buffer[data_indx] * MULTPLR_PT01) : MB_SENTL_VAL;
 80858f2:	f00b fea5 	bl	8091640 <__aeabi_ui2f>
    der_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?
 80858f6:	4649      	mov	r1, r9
 80858f8:	f00b fefa 	bl	80916f0 <__aeabi_fmul>
  for (uint8_t data_indx = GRID_L1_PF; data_indx <= GRID_AVERAGE_PF; data_indx++)
 80858fc:	4544      	cmp	r4, r8
    der_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?
 80858fe:	f847 0b04 	str.w	r0, [r7], #4
  for (uint8_t data_indx = GRID_L1_PF; data_indx <= GRID_AVERAGE_PF; data_indx++)
 8085902:	d1f2      	bne.n	80858ea <_Z25processDseGridDerInstDataPm+0x3e>
  }

  // Grid:percentOfPower
  der_inst_grid_data[PERCENT_OF_GRID_POWER] = modbus_buffer[PERCENT_OF_GRID_POWER] < DSE_16BIT_SENTINEL_VALUE ?
 8085904:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8085908:	6b68      	ldr	r0, [r5, #52]	; 0x34
 808590a:	4298      	cmp	r0, r3
 808590c:	d80b      	bhi.n	8085926 <_Z25processDseGridDerInstDataPm+0x7a>
                                              (modbus_buffer[PERCENT_OF_GRID_POWER] * MULTPLR_PT1) : MB_SENTL_VAL; 
 808590e:	f00b fe97 	bl	8091640 <__aeabi_ui2f>
  der_inst_grid_data[PERCENT_OF_GRID_POWER] = modbus_buffer[PERCENT_OF_GRID_POWER] < DSE_16BIT_SENTINEL_VALUE ?
 8085912:	4908      	ldr	r1, [pc, #32]	; (8085934 <_Z25processDseGridDerInstDataPm+0x88>)
 8085914:	f00b feec 	bl	80916f0 <__aeabi_fmul>
 8085918:	6370      	str	r0, [r6, #52]	; 0x34
 808591a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    der_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_32BIT_SENTINEL_VALUE ?
 808591e:	4650      	mov	r0, sl
 8085920:	e7d6      	b.n	80858d0 <_Z25processDseGridDerInstDataPm+0x24>
    der_inst_grid_data[data_indx] = modbus_buffer[data_indx] < DSE_16BIT_SENTINEL_VALUE ?
 8085922:	4658      	mov	r0, fp
 8085924:	e7ea      	b.n	80858fc <_Z25processDseGridDerInstDataPm+0x50>
  der_inst_grid_data[PERCENT_OF_GRID_POWER] = modbus_buffer[PERCENT_OF_GRID_POWER] < DSE_16BIT_SENTINEL_VALUE ?
 8085926:	4804      	ldr	r0, [pc, #16]	; (8085938 <_Z25processDseGridDerInstDataPm+0x8c>)
 8085928:	e7f6      	b.n	8085918 <_Z25processDseGridDerInstDataPm+0x6c>
 808592a:	bf00      	nop
 808592c:	2000069c 	.word	0x2000069c
 8085930:	200006c0 	.word	0x200006c0
 8085934:	3dcccccd 	.word	0x3dcccccd
 8085938:	ccbebc20 	.word	0xccbebc20
 808593c:	7ff97ff9 	.word	0x7ff97ff9
 8085940:	3c23d70a 	.word	0x3c23d70a

08085944 <_Z17formatGridDataDSE11GridDataSetPm>:
{
 8085944:	4603      	mov	r3, r0
  switch (metric_grp)
 8085946:	2b01      	cmp	r3, #1
{
 8085948:	4608      	mov	r0, r1
  switch (metric_grp)
 808594a:	d002      	beq.n	8085952 <_Z17formatGridDataDSE11GridDataSetPm+0xe>
 808594c:	2b02      	cmp	r3, #2
 808594e:	d002      	beq.n	8085956 <_Z17formatGridDataDSE11GridDataSetPm+0x12>
 8085950:	4770      	bx	lr
      processDseGridBasInstData(modbus_buffer);
 8085952:	f7ff bf65 	b.w	8085820 <_Z25processDseGridBasInstDataPm>
      processDseGridDerInstData(modbus_buffer);
 8085956:	f7ff bfa9 	b.w	80858ac <_Z25processDseGridDerInstDataPm>
	...

0808595c <__tcf_0>:
// Array of Grid metrics ready to be published to the cloud.
float bas_inst_grid_data[BASINST_GRID_DATA_SIZE];
float der_inst_grid_data[DERINST_GRID_DATA_SIZE];

// Instantiate 6 objects of the GXGenerator class
GXGenerator gxGen[MAXIMUM_GENSETS];
 808595c:	b570      	push	{r4, r5, r6, lr}
 808595e:	2405      	movs	r4, #5
 8085960:	26e8      	movs	r6, #232	; 0xe8
 8085962:	4d04      	ldr	r5, [pc, #16]	; (8085974 <__tcf_0+0x18>)
 8085964:	fb06 5004 	mla	r0, r6, r4, r5
 8085968:	f003 faf2 	bl	8088f50 <_ZN11GXGeneratorD1Ev>
 808596c:	3c01      	subs	r4, #1
 808596e:	d2f9      	bcs.n	8085964 <__tcf_0+0x8>
 8085970:	bd70      	pop	{r4, r5, r6, pc}
 8085972:	bf00      	nop
 8085974:	20000768 	.word	0x20000768

08085978 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
 8085978:	b513      	push	{r0, r1, r4, lr}
 808597a:	4604      	mov	r4, r0
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 808597c:	4b04      	ldr	r3, [pc, #16]	; (8085990 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
 808597e:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8085980:	f88d 3000 	strb.w	r3, [sp]
 8085984:	233c      	movs	r3, #60	; 0x3c
 8085986:	f008 f84f 	bl	808da28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
 808598a:	4620      	mov	r0, r4
 808598c:	b002      	add	sp, #8
 808598e:	bd10      	pop	{r4, pc}
 8085990:	200005c4 	.word	0x200005c4

08085994 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8085994:	b40e      	push	{r1, r2, r3}
 8085996:	b510      	push	{r4, lr}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8085998:	2300      	movs	r3, #0
    log(LOG_LEVEL_INFO, fmt, args);
 808599a:	6801      	ldr	r1, [r0, #0]
    attr.flags = 0;
 808599c:	2020      	movs	r0, #32
inline void spark::Logger::info(const char *fmt, ...) const {
 808599e:	b08d      	sub	sp, #52	; 0x34
 80859a0:	aa0f      	add	r2, sp, #60	; 0x3c
 80859a2:	f852 4b04 	ldr.w	r4, [r2], #4
    attr.flags = 0;
 80859a6:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80859aa:	e9cd 4200 	strd	r4, r2, [sp]
    va_start(args, fmt);
 80859ae:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80859b0:	201e      	movs	r0, #30
 80859b2:	aa04      	add	r2, sp, #16
 80859b4:	f007 fc7a 	bl	808d2ac <log_message_v>
}
 80859b8:	b00d      	add	sp, #52	; 0x34
 80859ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80859be:	b003      	add	sp, #12
 80859c0:	4770      	bx	lr
	...

080859c4 <_Z28test_checkInitialisedGenSetsv>:

  return true;
}

void test_checkInitialisedGenSets()
{
 80859c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80859c8:	2400      	movs	r4, #0
  for (uint8_t k = NO_GEN_SPECIFIED; k < num_of_gensets; k++)
 80859ca:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8085a08 <_Z28test_checkInitialisedGenSetsv+0x44>
  {
    GeneratorType genC_Type;
    genC_Type = gxGen[k].getControllerId();
 80859ce:	4f0b      	ldr	r7, [pc, #44]	; (80859fc <_Z28test_checkInitialisedGenSetsv+0x38>)

    Log.info("\nGEN%d TYPE:%d\n", k+ZERO_INDEX_CORRECTION, genC_Type);
 80859d0:	4e0b      	ldr	r6, [pc, #44]	; (8085a00 <_Z28test_checkInitialisedGenSetsv+0x3c>)
  for (uint8_t k = NO_GEN_SPECIFIED; k < num_of_gensets; k++)
 80859d2:	f898 3000 	ldrb.w	r3, [r8]
 80859d6:	b2e5      	uxtb	r5, r4
 80859d8:	42ab      	cmp	r3, r5
 80859da:	d90c      	bls.n	80859f6 <_Z28test_checkInitialisedGenSetsv+0x32>
    genC_Type = gxGen[k].getControllerId();
 80859dc:	20e8      	movs	r0, #232	; 0xe8
 80859de:	fb00 7005 	mla	r0, r0, r5, r7
 80859e2:	f002 fe50 	bl	8088686 <_ZN11GXGenerator15getControllerIdEv>
    Log.info("\nGEN%d TYPE:%d\n", k+ZERO_INDEX_CORRECTION, genC_Type);
 80859e6:	4631      	mov	r1, r6
    genC_Type = gxGen[k].getControllerId();
 80859e8:	4603      	mov	r3, r0
    Log.info("\nGEN%d TYPE:%d\n", k+ZERO_INDEX_CORRECTION, genC_Type);
 80859ea:	1c6a      	adds	r2, r5, #1
 80859ec:	4805      	ldr	r0, [pc, #20]	; (8085a04 <_Z28test_checkInitialisedGenSetsv+0x40>)
 80859ee:	f7ff ffd1 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
  for (uint8_t k = NO_GEN_SPECIFIED; k < num_of_gensets; k++)
 80859f2:	3401      	adds	r4, #1
 80859f4:	e7ed      	b.n	80859d2 <_Z28test_checkInitialisedGenSetsv+0xe>
  }
  
}
 80859f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80859fa:	bf00      	nop
 80859fc:	20000768 	.word	0x20000768
 8085a00:	08093638 	.word	0x08093638
 8085a04:	200015a4 	.word	0x200015a4
 8085a08:	20000da8 	.word	0x20000da8

08085a0c <_Z20initialiseGenDevicesP15GeneratorConfig>:
{
 8085a0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8085a10:	2100      	movs	r1, #0
 8085a12:	4c1b      	ldr	r4, [pc, #108]	; (8085a80 <_Z20initialiseGenDevicesP15GeneratorConfig+0x74>)
 8085a14:	4605      	mov	r5, r0
 8085a16:	7823      	ldrb	r3, [r4, #0]
 8085a18:	4602      	mov	r2, r0
 8085a1a:	3054      	adds	r0, #84	; 0x54
    if (!(genconFigVals[i].type == UINT8_MAX))
 8085a1c:	7996      	ldrb	r6, [r2, #6]
 8085a1e:	320e      	adds	r2, #14
 8085a20:	2eff      	cmp	r6, #255	; 0xff
       num_of_gensets++;
 8085a22:	bf1e      	ittt	ne
 8085a24:	3301      	addne	r3, #1
 8085a26:	2101      	movne	r1, #1
 8085a28:	b2db      	uxtbne	r3, r3
  for (uint8_t i = NO_GEN_SPECIFIED; i < GEN6; i++)
 8085a2a:	4282      	cmp	r2, r0
 8085a2c:	d1f6      	bne.n	8085a1c <_Z20initialiseGenDevicesP15GeneratorConfig+0x10>
 8085a2e:	b101      	cbz	r1, 8085a32 <_Z20initialiseGenDevicesP15GeneratorConfig+0x26>
 8085a30:	7023      	strb	r3, [r4, #0]
  if ((num_of_gensets > NO_GENSET) && (num_of_gensets <= MAXIMUM_GENSETS))
 8085a32:	7823      	ldrb	r3, [r4, #0]
 8085a34:	2600      	movs	r6, #0
 8085a36:	3b01      	subs	r3, #1
 8085a38:	2b05      	cmp	r3, #5
  { gxgen_config_state = true; }
 8085a3a:	bf98      	it	ls
 8085a3c:	2201      	movls	r2, #1
    gen_type = static_cast<GeneratorType>(genconFigVals[j].type);
 8085a3e:	f04f 090e 	mov.w	r9, #14
    gxGen[j].setCrendentials(gen_slave_id, baud_code, given_gx_relay, gen_type);
 8085a42:	f04f 08e8 	mov.w	r8, #232	; 0xe8
  { gxgen_config_state = true; }
 8085a46:	bf98      	it	ls
 8085a48:	4b0e      	ldrls	r3, [pc, #56]	; (8085a84 <_Z20initialiseGenDevicesP15GeneratorConfig+0x78>)
    gxGen[j].setCrendentials(gen_slave_id, baud_code, given_gx_relay, gen_type);
 8085a4a:	4f0f      	ldr	r7, [pc, #60]	; (8085a88 <_Z20initialiseGenDevicesP15GeneratorConfig+0x7c>)
  { gxgen_config_state = true; }
 8085a4c:	bf98      	it	ls
 8085a4e:	701a      	strbls	r2, [r3, #0]
  for (uint8_t j = NO_GEN_SPECIFIED; j < num_of_gensets; j++)
 8085a50:	7823      	ldrb	r3, [r4, #0]
 8085a52:	b2f0      	uxtb	r0, r6
 8085a54:	4283      	cmp	r3, r0
 8085a56:	d90c      	bls.n	8085a72 <_Z20initialiseGenDevicesP15GeneratorConfig+0x66>
    gen_type = static_cast<GeneratorType>(genconFigVals[j].type);
 8085a58:	fb09 5100 	mla	r1, r9, r0, r5
    gxGen[j].setCrendentials(gen_slave_id, baud_code, given_gx_relay, gen_type);
 8085a5c:	798b      	ldrb	r3, [r1, #6]
 8085a5e:	fb08 7000 	mla	r0, r8, r0, r7
 8085a62:	9300      	str	r3, [sp, #0]
 8085a64:	7a0b      	ldrb	r3, [r1, #8]
 8085a66:	7b0a      	ldrb	r2, [r1, #12]
 8085a68:	79c9      	ldrb	r1, [r1, #7]
 8085a6a:	f002 fe01 	bl	8088670 <_ZN11GXGenerator15setCrendentialsEhhh13GeneratorType>
  for (uint8_t j = NO_GEN_SPECIFIED; j < num_of_gensets; j++)
 8085a6e:	3601      	adds	r6, #1
 8085a70:	e7ee      	b.n	8085a50 <_Z20initialiseGenDevicesP15GeneratorConfig+0x44>
  test_checkInitialisedGenSets();
 8085a72:	f7ff ffa7 	bl	80859c4 <_Z28test_checkInitialisedGenSetsv>
}
 8085a76:	2001      	movs	r0, #1
 8085a78:	b003      	add	sp, #12
 8085a7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8085a7e:	bf00      	nop
 8085a80:	20000da8 	.word	0x20000da8
 8085a84:	2000124e 	.word	0x2000124e
 8085a88:	20000768 	.word	0x20000768

08085a8c <_Z18readGenMainMetricshh>:
  return (static_cast<GeneratorSlot>(gen_unit + ZERO_INDEX_CORRECTION));
  
}

GeneratorDataSet readGenMainMetrics(uint8_t gen_unit, uint8_t num_of_queries)
{
 8085a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t gendata_error_count = NO_GEN_SPECIFIED;

  for (uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
  {
    modbus_t genMainQuery;
    gxGen[gen_unit].getMainQueryPacket(i, &genMainQuery);
 8085a90:	24e8      	movs	r4, #232	; 0xe8
 8085a92:	2600      	movs	r6, #0
 8085a94:	4b29      	ldr	r3, [pc, #164]	; (8085b3c <_Z18readGenMainMetricshh+0xb0>)
  uint8_t gendata_error_count = NO_GEN_SPECIFIED;
 8085a96:	46b1      	mov	r9, r6
    gxGen[gen_unit].getMainQueryPacket(i, &genMainQuery);
 8085a98:	fb04 3400 	mla	r4, r4, r0, r3

    Log.info("MAIN_DATA Slave_ID:%d, Func_Code:%d, Start_Address:%d, Num_Of_Regs:%d", 
             genMainQuery.u8id, genMainQuery.u8fct, genMainQuery.u16RegAdd, genMainQuery.u16CoilsNo);

    gxGen[gen_unit].validate_ans = false;
 8085a9c:	46a2      	mov	sl, r4
{
 8085a9e:	b089      	sub	sp, #36	; 0x24
 8085aa0:	9103      	str	r1, [sp, #12]
  for (uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
 8085aa2:	9b03      	ldr	r3, [sp, #12]
 8085aa4:	fa5f fb86 	uxtb.w	fp, r6
 8085aa8:	42b3      	cmp	r3, r6
 8085aaa:	d03e      	beq.n	8085b2a <_Z18readGenMainMetricshh+0x9e>
    gxGen[gen_unit].getMainQueryPacket(i, &genMainQuery);
 8085aac:	f10d 0814 	add.w	r8, sp, #20
 8085ab0:	4642      	mov	r2, r8
 8085ab2:	4659      	mov	r1, fp
 8085ab4:	4620      	mov	r0, r4
 8085ab6:	f002 fde9 	bl	808868c <_ZN11GXGenerator18getMainQueryPacketEhP8modbus_t>
    Log.info("MAIN_DATA Slave_ID:%d, Func_Code:%d, Start_Address:%d, Num_Of_Regs:%d", 
 8085aba:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8085abe:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8085ac2:	9301      	str	r3, [sp, #4]
 8085ac4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8085ac8:	491d      	ldr	r1, [pc, #116]	; (8085b40 <_Z18readGenMainMetricshh+0xb4>)
 8085aca:	9300      	str	r3, [sp, #0]
 8085acc:	481d      	ldr	r0, [pc, #116]	; (8085b44 <_Z18readGenMainMetricshh+0xb8>)
 8085ace:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8085ad2:	f7ff ff5f 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
    gxGen[gen_unit].validate_ans = false;
 8085ad6:	2300      	movs	r3, #0

    for (uint8_t j = MB_1_POLL; j < MB_12_POLLS; j++)
 8085ad8:	2501      	movs	r5, #1
    gxGen[gen_unit].validate_ans = false;
 8085ada:	f88a 3062 	strb.w	r3, [sl, #98]	; 0x62
    {
      // Pass the Modbus query packet to the Genset controller
      gxGen[gen_unit].query(genMainQuery);
 8085ade:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8085ae2:	4620      	mov	r0, r4
 8085ae4:	f006 fb7e 	bl	808c1e4 <_ZN6Modbus5queryE8modbus_t>
      delay(20);
 8085ae8:	2014      	movs	r0, #20
 8085aea:	f007 fdb6 	bl	808d65a <delay>

      gxGen[gen_unit].poll();
 8085aee:	4620      	mov	r0, r4
 8085af0:	f006 fa0c 	bl	808bf0c <_ZN6Modbus4pollEv>

      if (gxGen[gen_unit].validate_ans == true)
 8085af4:	f89a 3062 	ldrb.w	r3, [sl, #98]	; 0x62
 8085af8:	b13b      	cbz	r3, 8085b0a <_Z18readGenMainMetricshh+0x7e>
      {
        gxGen[gen_unit].extractMainMetrics(i);
 8085afa:	4659      	mov	r1, fp
 8085afc:	4620      	mov	r0, r4
 8085afe:	f002 ff53 	bl	80889a8 <_ZN11GXGenerator18extractMainMetricsEh>
        gendata_error_count = NO_GEN_SPECIFIED;
 8085b02:	2700      	movs	r7, #0
  for (uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
 8085b04:	46b9      	mov	r9, r7
 8085b06:	3601      	adds	r6, #1
 8085b08:	e7cb      	b.n	8085aa2 <_Z18readGenMainMetricshh+0x16>
        break;
      }
      else gendata_error_count++;  
 8085b0a:	eb09 0705 	add.w	r7, r9, r5

      if (gxGen[gen_unit].getState() == COM_IDLE)
 8085b0e:	4620      	mov	r0, r4
      else gendata_error_count++;  
 8085b10:	b2ff      	uxtb	r7, r7
      if (gxGen[gen_unit].getState() == COM_IDLE)
 8085b12:	f005 ffb4 	bl	808ba7e <_ZN6Modbus8getStateEv>
 8085b16:	b918      	cbnz	r0, 8085b20 <_Z18readGenMainMetricshh+0x94>
      {
        Log.info("Running main_Modbus data poll from the GenSet");
 8085b18:	490b      	ldr	r1, [pc, #44]	; (8085b48 <_Z18readGenMainMetricshh+0xbc>)
 8085b1a:	480a      	ldr	r0, [pc, #40]	; (8085b44 <_Z18readGenMainMetricshh+0xb8>)
 8085b1c:	f7ff ff3a 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
    for (uint8_t j = MB_1_POLL; j < MB_12_POLLS; j++)
 8085b20:	3501      	adds	r5, #1
 8085b22:	b2ed      	uxtb	r5, r5
 8085b24:	2d0c      	cmp	r5, #12
 8085b26:	d1da      	bne.n	8085ade <_Z18readGenMainMetricshh+0x52>
 8085b28:	e7ec      	b.n	8085b04 <_Z18readGenMainMetricshh+0x78>
      } 
    }
  }
  
  if(gendata_error_count > NO_GEN_SPECIFIED)
     return GEN_NOT_READY;
 8085b2a:	f1b9 0f00 	cmp.w	r9, #0

  return GEN_BASINST;
}
 8085b2e:	bf0c      	ite	eq
 8085b30:	2001      	moveq	r0, #1
 8085b32:	2005      	movne	r0, #5
 8085b34:	b009      	add	sp, #36	; 0x24
 8085b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085b3a:	bf00      	nop
 8085b3c:	20000768 	.word	0x20000768
 8085b40:	08093648 	.word	0x08093648
 8085b44:	200015a4 	.word	0x200015a4
 8085b48:	0809368e 	.word	0x0809368e

08085b4c <_Z21readGenBasInstMetricshh>:

GeneratorDataSet readGenBasInstMetrics(uint8_t gen_unit, uint8_t num_of_queries)
{
 8085b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t gendata_error_count = NO_GEN_SPECIFIED;

  for (uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
  {
    modbus_t genBasInstQuery;
    gxGen[gen_unit].getBasInstQueryPacket(i, &genBasInstQuery);
 8085b50:	24e8      	movs	r4, #232	; 0xe8
 8085b52:	2600      	movs	r6, #0
 8085b54:	4b29      	ldr	r3, [pc, #164]	; (8085bfc <_Z21readGenBasInstMetricshh+0xb0>)
  uint8_t gendata_error_count = NO_GEN_SPECIFIED;
 8085b56:	46b1      	mov	r9, r6
    gxGen[gen_unit].getBasInstQueryPacket(i, &genBasInstQuery);
 8085b58:	fb04 3400 	mla	r4, r4, r0, r3

    Log.info("BASINST_DATA Slave_ID:%d, Func_Code:%d, Start_Address:%d, Num_Of_Regs:%d", 
             genBasInstQuery.u8id, genBasInstQuery.u8fct, genBasInstQuery.u16RegAdd, genBasInstQuery.u16CoilsNo);

    gxGen[gen_unit].validate_ans = false;
 8085b5c:	46a2      	mov	sl, r4
{
 8085b5e:	b089      	sub	sp, #36	; 0x24
 8085b60:	9103      	str	r1, [sp, #12]
  for (uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
 8085b62:	9b03      	ldr	r3, [sp, #12]
 8085b64:	fa5f fb86 	uxtb.w	fp, r6
 8085b68:	42b3      	cmp	r3, r6
 8085b6a:	d03e      	beq.n	8085bea <_Z21readGenBasInstMetricshh+0x9e>
    gxGen[gen_unit].getBasInstQueryPacket(i, &genBasInstQuery);
 8085b6c:	f10d 0814 	add.w	r8, sp, #20
 8085b70:	4642      	mov	r2, r8
 8085b72:	4659      	mov	r1, fp
 8085b74:	4620      	mov	r0, r4
 8085b76:	f002 fdd9 	bl	808872c <_ZN11GXGenerator21getBasInstQueryPacketEhP8modbus_t>
    Log.info("BASINST_DATA Slave_ID:%d, Func_Code:%d, Start_Address:%d, Num_Of_Regs:%d", 
 8085b7a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8085b7e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8085b82:	9301      	str	r3, [sp, #4]
 8085b84:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8085b88:	491d      	ldr	r1, [pc, #116]	; (8085c00 <_Z21readGenBasInstMetricshh+0xb4>)
 8085b8a:	9300      	str	r3, [sp, #0]
 8085b8c:	481d      	ldr	r0, [pc, #116]	; (8085c04 <_Z21readGenBasInstMetricshh+0xb8>)
 8085b8e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8085b92:	f7ff feff 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
    gxGen[gen_unit].validate_ans = false;
 8085b96:	2300      	movs	r3, #0

    for (uint8_t j = MB_1_POLL; j < MB_12_POLLS; j++)
 8085b98:	2501      	movs	r5, #1
    gxGen[gen_unit].validate_ans = false;
 8085b9a:	f88a 3062 	strb.w	r3, [sl, #98]	; 0x62
    {
      // Pass the Modbus query packet to the Genset controller
      gxGen[gen_unit].query(genBasInstQuery);
 8085b9e:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8085ba2:	4620      	mov	r0, r4
 8085ba4:	f006 fb1e 	bl	808c1e4 <_ZN6Modbus5queryE8modbus_t>
      delay(20);
 8085ba8:	2014      	movs	r0, #20
 8085baa:	f007 fd56 	bl	808d65a <delay>

      gxGen[gen_unit].poll();
 8085bae:	4620      	mov	r0, r4
 8085bb0:	f006 f9ac 	bl	808bf0c <_ZN6Modbus4pollEv>

      if (gxGen[gen_unit].validate_ans == true)
 8085bb4:	f89a 3062 	ldrb.w	r3, [sl, #98]	; 0x62
 8085bb8:	b13b      	cbz	r3, 8085bca <_Z21readGenBasInstMetricshh+0x7e>
      {
        gxGen[gen_unit].extractBasInstMetrics(i);
 8085bba:	4659      	mov	r1, fp
 8085bbc:	4620      	mov	r0, r4
 8085bbe:	f002 ff93 	bl	8088ae8 <_ZN11GXGenerator21extractBasInstMetricsEh>
        gendata_error_count = NO_GEN_SPECIFIED;
 8085bc2:	2700      	movs	r7, #0
  for (uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
 8085bc4:	46b9      	mov	r9, r7
 8085bc6:	3601      	adds	r6, #1
 8085bc8:	e7cb      	b.n	8085b62 <_Z21readGenBasInstMetricshh+0x16>
        break;
      }
      else gendata_error_count++;
 8085bca:	eb09 0705 	add.w	r7, r9, r5

      if (gxGen[gen_unit].getState() == COM_IDLE)
 8085bce:	4620      	mov	r0, r4
      else gendata_error_count++;
 8085bd0:	b2ff      	uxtb	r7, r7
      if (gxGen[gen_unit].getState() == COM_IDLE)
 8085bd2:	f005 ff54 	bl	808ba7e <_ZN6Modbus8getStateEv>
 8085bd6:	b918      	cbnz	r0, 8085be0 <_Z21readGenBasInstMetricshh+0x94>
      {
        Log.info("Running BasInst_Modbus data poll from the GenSet");
 8085bd8:	490b      	ldr	r1, [pc, #44]	; (8085c08 <_Z21readGenBasInstMetricshh+0xbc>)
 8085bda:	480a      	ldr	r0, [pc, #40]	; (8085c04 <_Z21readGenBasInstMetricshh+0xb8>)
 8085bdc:	f7ff feda 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
    for (uint8_t j = MB_1_POLL; j < MB_12_POLLS; j++)
 8085be0:	3501      	adds	r5, #1
 8085be2:	b2ed      	uxtb	r5, r5
 8085be4:	2d0c      	cmp	r5, #12
 8085be6:	d1da      	bne.n	8085b9e <_Z21readGenBasInstMetricshh+0x52>
 8085be8:	e7ec      	b.n	8085bc4 <_Z21readGenBasInstMetricshh+0x78>
      } 
    }
  }

  if(gendata_error_count > NO_GEN_SPECIFIED)
     return GEN_NOT_READY;
 8085bea:	f1b9 0f00 	cmp.w	r9, #0

  return GEN_DERINST;
}
 8085bee:	bf0c      	ite	eq
 8085bf0:	2002      	moveq	r0, #2
 8085bf2:	2005      	movne	r0, #5
 8085bf4:	b009      	add	sp, #36	; 0x24
 8085bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085bfa:	bf00      	nop
 8085bfc:	20000768 	.word	0x20000768
 8085c00:	080936bc 	.word	0x080936bc
 8085c04:	200015a4 	.word	0x200015a4
 8085c08:	08093705 	.word	0x08093705

08085c0c <_Z21readGenDerInstMetricshh>:

GeneratorDataSet readGenDerInstMetrics(uint8_t gen_unit, uint8_t num_of_queries) 
{
 8085c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t gendata_error_count = NO_GEN_SPECIFIED;

  for (uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
  {
    modbus_t genDerInstQuery;
    gxGen[gen_unit].getDerInstQueryPacket(i, &genDerInstQuery);
 8085c10:	24e8      	movs	r4, #232	; 0xe8
 8085c12:	2600      	movs	r6, #0
 8085c14:	4b29      	ldr	r3, [pc, #164]	; (8085cbc <_Z21readGenDerInstMetricshh+0xb0>)
  uint8_t gendata_error_count = NO_GEN_SPECIFIED;
 8085c16:	46b1      	mov	r9, r6
    gxGen[gen_unit].getDerInstQueryPacket(i, &genDerInstQuery);
 8085c18:	fb04 3400 	mla	r4, r4, r0, r3

    Log.info("DERINST_DATA Slave_ID:%d, Func_Code:%d, Start_Address:%d, Num_Of_Regs:%d", 
             genDerInstQuery.u8id, genDerInstQuery.u8fct, genDerInstQuery.u16RegAdd, genDerInstQuery.u16CoilsNo);

    gxGen[gen_unit].validate_ans = false;
 8085c1c:	46a2      	mov	sl, r4
{
 8085c1e:	b089      	sub	sp, #36	; 0x24
 8085c20:	9103      	str	r1, [sp, #12]
  for (uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
 8085c22:	9b03      	ldr	r3, [sp, #12]
 8085c24:	fa5f fb86 	uxtb.w	fp, r6
 8085c28:	42b3      	cmp	r3, r6
 8085c2a:	d03e      	beq.n	8085caa <_Z21readGenDerInstMetricshh+0x9e>
    gxGen[gen_unit].getDerInstQueryPacket(i, &genDerInstQuery);
 8085c2c:	f10d 0814 	add.w	r8, sp, #20
 8085c30:	4642      	mov	r2, r8
 8085c32:	4659      	mov	r1, fp
 8085c34:	4620      	mov	r0, r4
 8085c36:	f002 fdc7 	bl	80887c8 <_ZN11GXGenerator21getDerInstQueryPacketEhP8modbus_t>
    Log.info("DERINST_DATA Slave_ID:%d, Func_Code:%d, Start_Address:%d, Num_Of_Regs:%d", 
 8085c3a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8085c3e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8085c42:	9301      	str	r3, [sp, #4]
 8085c44:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8085c48:	491d      	ldr	r1, [pc, #116]	; (8085cc0 <_Z21readGenDerInstMetricshh+0xb4>)
 8085c4a:	9300      	str	r3, [sp, #0]
 8085c4c:	481d      	ldr	r0, [pc, #116]	; (8085cc4 <_Z21readGenDerInstMetricshh+0xb8>)
 8085c4e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8085c52:	f7ff fe9f 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
    gxGen[gen_unit].validate_ans = false;
 8085c56:	2300      	movs	r3, #0

    for (uint8_t j = MB_1_POLL; j < MB_12_POLLS; j++)
 8085c58:	2501      	movs	r5, #1
    gxGen[gen_unit].validate_ans = false;
 8085c5a:	f88a 3062 	strb.w	r3, [sl, #98]	; 0x62
    {
      // Pass the Modbus query packet to the Genset controller
      gxGen[gen_unit].query(genDerInstQuery);
 8085c5e:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8085c62:	4620      	mov	r0, r4
 8085c64:	f006 fabe 	bl	808c1e4 <_ZN6Modbus5queryE8modbus_t>
      delay(20);
 8085c68:	2014      	movs	r0, #20
 8085c6a:	f007 fcf6 	bl	808d65a <delay>

      gxGen[gen_unit].poll();
 8085c6e:	4620      	mov	r0, r4
 8085c70:	f006 f94c 	bl	808bf0c <_ZN6Modbus4pollEv>

      if (gxGen[gen_unit].validate_ans == true)
 8085c74:	f89a 3062 	ldrb.w	r3, [sl, #98]	; 0x62
 8085c78:	b13b      	cbz	r3, 8085c8a <_Z21readGenDerInstMetricshh+0x7e>
      {
        gxGen[gen_unit].extractDerInstMetrics(i);
 8085c7a:	4659      	mov	r1, fp
 8085c7c:	4620      	mov	r0, r4
 8085c7e:	f003 f821 	bl	8088cc4 <_ZN11GXGenerator21extractDerInstMetricsEh>
        gendata_error_count = NO_GEN_SPECIFIED;
 8085c82:	2700      	movs	r7, #0
  for (uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
 8085c84:	46b9      	mov	r9, r7
 8085c86:	3601      	adds	r6, #1
 8085c88:	e7cb      	b.n	8085c22 <_Z21readGenDerInstMetricshh+0x16>
        break;
      }
      else gendata_error_count++;
 8085c8a:	eb09 0705 	add.w	r7, r9, r5

      if (gxGen[gen_unit].getState() == COM_IDLE)
 8085c8e:	4620      	mov	r0, r4
      else gendata_error_count++;
 8085c90:	b2ff      	uxtb	r7, r7
      if (gxGen[gen_unit].getState() == COM_IDLE)
 8085c92:	f005 fef4 	bl	808ba7e <_ZN6Modbus8getStateEv>
 8085c96:	b918      	cbnz	r0, 8085ca0 <_Z21readGenDerInstMetricshh+0x94>
      {
        Log.info("Running DerInst_Modbus data poll from the GenSet");
 8085c98:	490b      	ldr	r1, [pc, #44]	; (8085cc8 <_Z21readGenDerInstMetricshh+0xbc>)
 8085c9a:	480a      	ldr	r0, [pc, #40]	; (8085cc4 <_Z21readGenDerInstMetricshh+0xb8>)
 8085c9c:	f7ff fe7a 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
    for (uint8_t j = MB_1_POLL; j < MB_12_POLLS; j++)
 8085ca0:	3501      	adds	r5, #1
 8085ca2:	b2ed      	uxtb	r5, r5
 8085ca4:	2d0c      	cmp	r5, #12
 8085ca6:	d1da      	bne.n	8085c5e <_Z21readGenDerInstMetricshh+0x52>
 8085ca8:	e7ec      	b.n	8085c84 <_Z21readGenDerInstMetricshh+0x78>
      }
    }
  }

  if(gendata_error_count > NO_GEN_SPECIFIED)
     return GEN_NOT_READY;
 8085caa:	f1b9 0f00 	cmp.w	r9, #0

  return GEN_READY;
}
 8085cae:	bf0c      	ite	eq
 8085cb0:	2004      	moveq	r0, #4
 8085cb2:	2005      	movne	r0, #5
 8085cb4:	b009      	add	sp, #36	; 0x24
 8085cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085cba:	bf00      	nop
 8085cbc:	20000768 	.word	0x20000768
 8085cc0:	08093736 	.word	0x08093736
 8085cc4:	200015a4 	.word	0x200015a4
 8085cc8:	0809377f 	.word	0x0809377f

08085ccc <_Z27readGridBasInstMetrcFromGenh>:

GridDataSet readGridBasInstMetrcFromGen(uint8_t num_of_queries)
{
 8085ccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8085cd0:	2400      	movs	r4, #0
 8085cd2:	4680      	mov	r8, r0
  for(uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
  {
    // Prepare the Modbus query packet(from the Genset query Bank) and set validate ans to false
    modbus_t gridBasInstQuery;
    gxGen[gen_unit].getGridBasInstQueryPacket(i, &gridBasInstQuery);
    gxGen[gen_unit].validate_ans = false;
 8085cd4:	46a2      	mov	sl, r4
  uint8_t gridmetrc_error_val = GRID_DONE;
 8085cd6:	4620      	mov	r0, r4
    gxGen[gen_unit].getGridBasInstQueryPacket(i, &gridBasInstQuery);
 8085cd8:	4d17      	ldr	r5, [pc, #92]	; (8085d38 <_Z27readGridBasInstMetrcFromGenh+0x6c>)
 8085cda:	af01      	add	r7, sp, #4
  for(uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
 8085cdc:	4544      	cmp	r4, r8
 8085cde:	fa5f f984 	uxtb.w	r9, r4
 8085ce2:	d022      	beq.n	8085d2a <_Z27readGridBasInstMetrcFromGenh+0x5e>
    gxGen[gen_unit].validate_ans = false;
 8085ce4:	260b      	movs	r6, #11
    gxGen[gen_unit].getGridBasInstQueryPacket(i, &gridBasInstQuery);
 8085ce6:	463a      	mov	r2, r7
 8085ce8:	4649      	mov	r1, r9
 8085cea:	4813      	ldr	r0, [pc, #76]	; (8085d38 <_Z27readGridBasInstMetrcFromGenh+0x6c>)
 8085cec:	f002 fde4 	bl	80888b8 <_ZN11GXGenerator25getGridBasInstQueryPacketEhP8modbus_t>
    gxGen[gen_unit].validate_ans = false;
 8085cf0:	f885 a062 	strb.w	sl, [r5, #98]	; 0x62

    for(uint8_t j = MB_1_POLL; j < MB_12_POLLS; j++)
    {
      // Send Modbus Query (packet) to the Modbus device and poll for response after a 20ms delay
      gxGen[gen_unit].query(gridBasInstQuery);
 8085cf4:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8085cf8:	4628      	mov	r0, r5
 8085cfa:	f006 fa73 	bl	808c1e4 <_ZN6Modbus5queryE8modbus_t>
      delay(20);
 8085cfe:	2014      	movs	r0, #20
 8085d00:	f007 fcab 	bl	808d65a <delay>
      gxGen[gen_unit].poll();
 8085d04:	4628      	mov	r0, r5
 8085d06:	f006 f901 	bl	808bf0c <_ZN6Modbus4pollEv>

      // If there's a valid respond, extract the raw metrics and break out of this polling loop
      if(gxGen[gen_unit].validate_ans == true)
 8085d0a:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
 8085d0e:	b133      	cbz	r3, 8085d1e <_Z27readGridBasInstMetrcFromGenh+0x52>
      {
        gxGen[gen_unit].extractGridBasInstMetrics(i);
 8085d10:	4628      	mov	r0, r5
 8085d12:	4649      	mov	r1, r9
 8085d14:	f003 f834 	bl	8088d80 <_ZN11GXGenerator25extractGridBasInstMetricsEh>
        gridmetrc_error_val = GRID_DONE;
 8085d18:	2000      	movs	r0, #0
  for(uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
 8085d1a:	3401      	adds	r4, #1
 8085d1c:	e7de      	b.n	8085cdc <_Z27readGridBasInstMetrcFromGenh+0x10>
    for(uint8_t j = MB_1_POLL; j < MB_12_POLLS; j++)
 8085d1e:	3e01      	subs	r6, #1
 8085d20:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8085d24:	d1e6      	bne.n	8085cf4 <_Z27readGridBasInstMetrcFromGenh+0x28>
        break;
      }
      else gridmetrc_error_val = GRID_UNDONE;
 8085d26:	2003      	movs	r0, #3
 8085d28:	e7f7      	b.n	8085d1a <_Z27readGridBasInstMetrcFromGenh+0x4e>

  // Return GRID_UNDONE if there was no Valid for GX to publish error message to the cloud
  if(gridmetrc_error_val == GRID_UNDONE)
     return GRID_UNDONE;
  
  return GRID_DER_INST;
 8085d2a:	2803      	cmp	r0, #3
}
 8085d2c:	bf18      	it	ne
 8085d2e:	2002      	movne	r0, #2
 8085d30:	b004      	add	sp, #16
 8085d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8085d36:	bf00      	nop
 8085d38:	20000768 	.word	0x20000768

08085d3c <_Z27readGridDerInstMetrcFromGenh>:

GridDataSet readGridDerInstMetrcFromGen(uint8_t num_of_queries)
{
 8085d3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8085d40:	2400      	movs	r4, #0
 8085d42:	4680      	mov	r8, r0
  for(uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
  {
    // Prepare the Modbus query packet(from the Genset query Bank) and set validate ans to false
    modbus_t gridDerInstQuery;
    gxGen[gen_unit].getGridDerInstQueryPacket(i, &gridDerInstQuery);
    gxGen[gen_unit].validate_ans = false;
 8085d44:	46a2      	mov	sl, r4
  uint8_t gridmetrc_error_val = GRID_DONE;
 8085d46:	4620      	mov	r0, r4
    gxGen[gen_unit].getGridDerInstQueryPacket(i, &gridDerInstQuery);
 8085d48:	4d17      	ldr	r5, [pc, #92]	; (8085da8 <_Z27readGridDerInstMetrcFromGenh+0x6c>)
 8085d4a:	af01      	add	r7, sp, #4
  for(uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
 8085d4c:	4544      	cmp	r4, r8
 8085d4e:	fa5f f984 	uxtb.w	r9, r4
 8085d52:	d022      	beq.n	8085d9a <_Z27readGridDerInstMetrcFromGenh+0x5e>
    gxGen[gen_unit].validate_ans = false;
 8085d54:	260b      	movs	r6, #11
    gxGen[gen_unit].getGridDerInstQueryPacket(i, &gridDerInstQuery);
 8085d56:	463a      	mov	r2, r7
 8085d58:	4649      	mov	r1, r9
 8085d5a:	4813      	ldr	r0, [pc, #76]	; (8085da8 <_Z27readGridDerInstMetrcFromGenh+0x6c>)
 8085d5c:	f002 fdca 	bl	80888f4 <_ZN11GXGenerator25getGridDerInstQueryPacketEhP8modbus_t>
    gxGen[gen_unit].validate_ans = false;
 8085d60:	f885 a062 	strb.w	sl, [r5, #98]	; 0x62

    for(uint8_t j = MB_1_POLL; j < MB_12_POLLS; j++)
    {
      // Send Modbus Query (packet) to the Modbus device and poll for response after a 20ms delay
      gxGen[gen_unit].query(gridDerInstQuery);
 8085d64:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8085d68:	4628      	mov	r0, r5
 8085d6a:	f006 fa3b 	bl	808c1e4 <_ZN6Modbus5queryE8modbus_t>
      delay(20);
 8085d6e:	2014      	movs	r0, #20
 8085d70:	f007 fc73 	bl	808d65a <delay>
      gxGen[gen_unit].poll();
 8085d74:	4628      	mov	r0, r5
 8085d76:	f006 f8c9 	bl	808bf0c <_ZN6Modbus4pollEv>

      // If there's a valid respond, extract the raw metrics and break out of this polling loop
      if(gxGen[gen_unit].validate_ans == true)
 8085d7a:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
 8085d7e:	b133      	cbz	r3, 8085d8e <_Z27readGridDerInstMetrcFromGenh+0x52>
      {
        gxGen[gen_unit].extractGridDerInstMetrics(i);
 8085d80:	4628      	mov	r0, r5
 8085d82:	4649      	mov	r1, r9
 8085d84:	f003 f846 	bl	8088e14 <_ZN11GXGenerator25extractGridDerInstMetricsEh>
        gridmetrc_error_val = GRID_DONE;
 8085d88:	2000      	movs	r0, #0
  for(uint8_t i = GEN_QUERY1; i < num_of_queries; i++)
 8085d8a:	3401      	adds	r4, #1
 8085d8c:	e7de      	b.n	8085d4c <_Z27readGridDerInstMetrcFromGenh+0x10>
    for(uint8_t j = MB_1_POLL; j < MB_12_POLLS; j++)
 8085d8e:	3e01      	subs	r6, #1
 8085d90:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8085d94:	d1e6      	bne.n	8085d64 <_Z27readGridDerInstMetrcFromGenh+0x28>
        break;
      }
      else gridmetrc_error_val = GRID_UNDONE;
 8085d96:	2003      	movs	r0, #3
 8085d98:	e7f7      	b.n	8085d8a <_Z27readGridDerInstMetrcFromGenh+0x4e>

  // Return GRID_UNDONE if there was no Valid for GX to publish error message to the cloud
  if(gridmetrc_error_val == GRID_UNDONE)
     return GRID_UNDONE;
  
  return GRID_DONE;
 8085d9a:	2803      	cmp	r0, #3
}
 8085d9c:	bf18      	it	ne
 8085d9e:	2000      	movne	r0, #0
 8085da0:	b004      	add	sp, #16
 8085da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8085da6:	bf00      	nop
 8085da8:	20000768 	.word	0x20000768

08085dac <_Z19checkGenEngineStateh>:

GeneratorDataSet checkGenEngineState(uint8_t gen_unit)
{
 8085dac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  // Setup the communication baudrate for the Modbus Rtu interface with the Genset controller 
  uint8_t baud_code = gxGen[gen_unit].getBaudIndex();
 8085db0:	24e8      	movs	r4, #232	; 0xe8
 8085db2:	4b22      	ldr	r3, [pc, #136]	; (8085e3c <_Z19checkGenEngineStateh+0x90>)
  uint8_t gendata_error_count = NO_GEN_SPECIFIED;

  modbus_t genEngStateQuery;
  gxGen[gen_unit].getEngStateQueryPacket(GEN_QUERY1, &genEngStateQuery);

  gxGen[gen_unit].validate_ans = false;
 8085db4:	2500      	movs	r5, #0
  uint8_t baud_code = gxGen[gen_unit].getBaudIndex();
 8085db6:	fb04 3400 	mla	r4, r4, r0, r3
 8085dba:	4620      	mov	r0, r4
 8085dbc:	f003 f882 	bl	8088ec4 <_ZN11GXGenerator12getBaudIndexEv>
    gxGen[gen_unit].query(genEngStateQuery);
    delay(20);

    gxGen[gen_unit].poll();

    if (gxGen[gen_unit].validate_ans == true)
 8085dc0:	4627      	mov	r7, r4
  uint32_t gen_baud_rate = GEN_BAUD_RATE[baud_code];
 8085dc2:	4b1f      	ldr	r3, [pc, #124]	; (8085e40 <_Z19checkGenEngineStateh+0x94>)
  gxGen[gen_unit].getEngStateQueryPacket(GEN_QUERY1, &genEngStateQuery);
 8085dc4:	ae01      	add	r6, sp, #4
  gxGen[gen_unit].begin(gen_baud_rate);
 8085dc6:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 8085dca:	4620      	mov	r0, r4
 8085dcc:	f005 ffae 	bl	808bd2c <_ZN6Modbus5beginEl>
  gxGen[gen_unit].setTimeOut(MODBUS_ROLL_OVER_TIME);
 8085dd0:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8085dd4:	4620      	mov	r0, r4
 8085dd6:	f005 fe4f 	bl	808ba78 <_ZN6Modbus10setTimeOutEt>
  delay(25);
 8085dda:	2019      	movs	r0, #25
 8085ddc:	f007 fc3d 	bl	808d65a <delay>
      break;
    }
    else gendata_error_count++;

    if (gxGen[gen_unit].getState() == COM_IDLE)
    { Log.info("Running Engine_State data poll from the GenSet"); }
 8085de0:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8085e48 <_Z19checkGenEngineStateh+0x9c>
  gxGen[gen_unit].getEngStateQueryPacket(GEN_QUERY1, &genEngStateQuery);
 8085de4:	4632      	mov	r2, r6
 8085de6:	2100      	movs	r1, #0
 8085de8:	4620      	mov	r0, r4
 8085dea:	f002 fd21 	bl	8088830 <_ZN11GXGenerator22getEngStateQueryPacketEhP8modbus_t>
  gxGen[gen_unit].validate_ans = false;
 8085dee:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
    gxGen[gen_unit].query(genEngStateQuery);
 8085df2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8085df6:	4620      	mov	r0, r4
 8085df8:	f006 f9f4 	bl	808c1e4 <_ZN6Modbus5queryE8modbus_t>
    delay(20);
 8085dfc:	2014      	movs	r0, #20
 8085dfe:	f007 fc2c 	bl	808d65a <delay>
    gxGen[gen_unit].poll();
 8085e02:	4620      	mov	r0, r4
 8085e04:	f006 f882 	bl	808bf0c <_ZN6Modbus4pollEv>
    if (gxGen[gen_unit].validate_ans == true)
 8085e08:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8085e0c:	b99b      	cbnz	r3, 8085e36 <_Z19checkGenEngineStateh+0x8a>
    else gendata_error_count++;
 8085e0e:	3501      	adds	r5, #1
    if (gxGen[gen_unit].getState() == COM_IDLE)
 8085e10:	4620      	mov	r0, r4
    else gendata_error_count++;
 8085e12:	b2ed      	uxtb	r5, r5
    if (gxGen[gen_unit].getState() == COM_IDLE)
 8085e14:	f005 fe33 	bl	808ba7e <_ZN6Modbus8getStateEv>
 8085e18:	b918      	cbnz	r0, 8085e22 <_Z19checkGenEngineStateh+0x76>
    { Log.info("Running Engine_State data poll from the GenSet"); }
 8085e1a:	4641      	mov	r1, r8
 8085e1c:	4809      	ldr	r0, [pc, #36]	; (8085e44 <_Z19checkGenEngineStateh+0x98>)
 8085e1e:	f7ff fdb9 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
  for (uint8_t i = MB_1_POLL; i < MB_12_POLLS; i++)
 8085e22:	2d0b      	cmp	r5, #11
 8085e24:	d1e5      	bne.n	8085df2 <_Z19checkGenEngineStateh+0x46>
  }

  // Update the engine_state variable within the Generator class with the latest value
  gxGen[gen_unit].updateEngineStatus(gendata_error_count);
 8085e26:	4620      	mov	r0, r4
 8085e28:	4629      	mov	r1, r5
 8085e2a:	f003 f82d 	bl	8088e88 <_ZN11GXGenerator18updateEngineStatusEh>
  return GEN_READY;
}
 8085e2e:	2004      	movs	r0, #4
 8085e30:	b004      	add	sp, #16
 8085e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      gendata_error_count = NO_GEN_SPECIFIED;
 8085e36:	2500      	movs	r5, #0
 8085e38:	e7f5      	b.n	8085e26 <_Z19checkGenEngineStateh+0x7a>
 8085e3a:	bf00      	nop
 8085e3c:	20000768 	.word	0x20000768
 8085e40:	20000000 	.word	0x20000000
 8085e44:	200015a4 	.word	0x200015a4
 8085e48:	080937b0 	.word	0x080937b0

08085e4c <_Z13formatGenDatah16GeneratorDataSet>:

void formatGenData(uint8_t gen_unit, GeneratorDataSet gen_data_group)
{
  GeneratorType gen_type = gxGen[gen_unit].getControllerId();
 8085e4c:	22e8      	movs	r2, #232	; 0xe8
 8085e4e:	4b15      	ldr	r3, [pc, #84]	; (8085ea4 <_Z13formatGenDatah16GeneratorDataSet+0x58>)
{
 8085e50:	b510      	push	{r4, lr}
  GeneratorType gen_type = gxGen[gen_unit].getControllerId();
 8085e52:	fb02 3000 	mla	r0, r2, r0, r3
{
 8085e56:	460c      	mov	r4, r1
  GeneratorType gen_type = gxGen[gen_unit].getControllerId();
 8085e58:	f002 fc15 	bl	8088686 <_ZN11GXGenerator15getControllerIdEv>

  switch (gen_type)
 8085e5c:	3801      	subs	r0, #1
 8085e5e:	2803      	cmp	r0, #3
 8085e60:	d81f      	bhi.n	8085ea2 <_Z13formatGenDatah16GeneratorDataSet+0x56>
 8085e62:	e8df f000 	tbb	[pc, r0]
 8085e66:	0902      	.short	0x0902
 8085e68:	1710      	.short	0x1710
  {
    case DCP_10:
    {
      formatGenDataDCP10(gen_data_group, extracted_modbus_databuff, gen_alrm_regval);
 8085e6a:	4620      	mov	r0, r4
    {
      formatGenDataApm303(gen_data_group, extracted_modbus_databuff, gen_alrm_regval);
      break;
    }
  }
}
 8085e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      formatGenDataDCP10(gen_data_group, extracted_modbus_databuff, gen_alrm_regval);
 8085e70:	4a0d      	ldr	r2, [pc, #52]	; (8085ea8 <_Z13formatGenDatah16GeneratorDataSet+0x5c>)
 8085e72:	490e      	ldr	r1, [pc, #56]	; (8085eac <_Z13formatGenDatah16GeneratorDataSet+0x60>)
 8085e74:	f7ff ba78 	b.w	8085368 <_Z18formatGenDataDCP1016GeneratorDataSetPmPt>
      formatGenDataDSE(gen_data_group, extracted_modbus_databuff, gen_alrm_regval);
 8085e78:	4620      	mov	r0, r4
}
 8085e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      formatGenDataDSE(gen_data_group, extracted_modbus_databuff, gen_alrm_regval);
 8085e7e:	4a0a      	ldr	r2, [pc, #40]	; (8085ea8 <_Z13formatGenDatah16GeneratorDataSet+0x5c>)
 8085e80:	490a      	ldr	r1, [pc, #40]	; (8085eac <_Z13formatGenDatah16GeneratorDataSet+0x60>)
 8085e82:	f7ff bcbd 	b.w	8085800 <_Z16formatGenDataDSE16GeneratorDataSetPmPt>
      formatGenDataCummins1302(gen_data_group, extracted_modbus_databuff, gen_alrm_regval);
 8085e86:	4620      	mov	r0, r4
}
 8085e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      formatGenDataCummins1302(gen_data_group, extracted_modbus_databuff, gen_alrm_regval);
 8085e8c:	4a06      	ldr	r2, [pc, #24]	; (8085ea8 <_Z13formatGenDatah16GeneratorDataSet+0x5c>)
 8085e8e:	4907      	ldr	r1, [pc, #28]	; (8085eac <_Z13formatGenDatah16GeneratorDataSet+0x60>)
 8085e90:	f003 ba46 	b.w	8089320 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt>
      formatGenDataApm303(gen_data_group, extracted_modbus_databuff, gen_alrm_regval);
 8085e94:	4620      	mov	r0, r4
}
 8085e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      formatGenDataApm303(gen_data_group, extracted_modbus_databuff, gen_alrm_regval);
 8085e9a:	4a03      	ldr	r2, [pc, #12]	; (8085ea8 <_Z13formatGenDatah16GeneratorDataSet+0x5c>)
 8085e9c:	4903      	ldr	r1, [pc, #12]	; (8085eac <_Z13formatGenDatah16GeneratorDataSet+0x60>)
 8085e9e:	f7ff ba21 	b.w	80852e4 <_Z19formatGenDataApm30316GeneratorDataSetPmPt>
}
 8085ea2:	bd10      	pop	{r4, pc}
 8085ea4:	20000768 	.word	0x20000768
 8085ea8:	20000738 	.word	0x20000738
 8085eac:	200006d4 	.word	0x200006d4

08085eb0 <_Z21formatGridDataFromGen11GridDataSet>:

void formatGridDataFromGen(GridDataSet grid_data_grp)
{
 8085eb0:	b510      	push	{r4, lr}
 8085eb2:	4604      	mov	r4, r0
  uint8_t gen_unit = GEN1 - ZERO_INDEX_CORRECTION;
  GeneratorType gen_type = gxGen[gen_unit].getControllerId();
 8085eb4:	4805      	ldr	r0, [pc, #20]	; (8085ecc <_Z21formatGridDataFromGen11GridDataSet+0x1c>)
 8085eb6:	f002 fbe6 	bl	8088686 <_ZN11GXGenerator15getControllerIdEv>

  if(gen_type == DSE_857)
 8085eba:	2802      	cmp	r0, #2
 8085ebc:	d105      	bne.n	8085eca <_Z21formatGridDataFromGen11GridDataSet+0x1a>
   formatGridDataDSE(grid_data_grp, extracted_modbus_databuff);
 8085ebe:	4620      	mov	r0, r4
}
 8085ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   formatGridDataDSE(grid_data_grp, extracted_modbus_databuff);
 8085ec4:	4902      	ldr	r1, [pc, #8]	; (8085ed0 <_Z21formatGridDataFromGen11GridDataSet+0x20>)
 8085ec6:	f7ff bd3d 	b.w	8085944 <_Z17formatGridDataDSE11GridDataSetPm>
}
 8085eca:	bd10      	pop	{r4, pc}
 8085ecc:	20000768 	.word	0x20000768
 8085ed0:	200006d4 	.word	0x200006d4

08085ed4 <_Z15pubGenMainMtrcsh>:
    }
  }
}

GeneratorDataSet pubGenMainMtrcs(uint8_t gen_spot)
{
 8085ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8085ed8:	4604      	mov	r4, r0
 8085eda:	b090      	sub	sp, #64	; 0x40

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8085edc:	496a      	ldr	r1, [pc, #424]	; (8086088 <_Z15pubGenMainMtrcsh+0x1b4>)
 8085ede:	a808      	add	r0, sp, #32
 8085ee0:	f009 feda 	bl	808fc98 <_ZN6StringC1EPKc>
  String gxGenMetricString = "{\n\"v\":\"1\",\n\"gen" + String(gen_spot + ZERO_INDEX_CORRECTION) + 
 8085ee4:	220a      	movs	r2, #10
 8085ee6:	1c61      	adds	r1, r4, #1
 8085ee8:	a804      	add	r0, sp, #16
 8085eea:	f009 ff55 	bl	808fd98 <_ZN6StringC1Eih>
 8085eee:	a904      	add	r1, sp, #16
 8085ef0:	a808      	add	r0, sp, #32
 8085ef2:	f00a f802 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
                             "\":\"" + String(Time.now()) + ":";
 8085ef6:	4965      	ldr	r1, [pc, #404]	; (808608c <_Z15pubGenMainMtrcsh+0x1b8>)
 8085ef8:	f00a f80b 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 8085efc:	4604      	mov	r4, r0
 8085efe:	f00a f973 	bl	80901e8 <_ZN9TimeClass3nowEv>
 8085f02:	220a      	movs	r2, #10
 8085f04:	4601      	mov	r1, r0
 8085f06:	a80c      	add	r0, sp, #48	; 0x30
 8085f08:	f009 ff6c 	bl	808fde4 <_ZN6StringC1Elh>
 8085f0c:	4620      	mov	r0, r4
 8085f0e:	a90c      	add	r1, sp, #48	; 0x30
 8085f10:	f009 fff3 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 8085f14:	495e      	ldr	r1, [pc, #376]	; (8086090 <_Z15pubGenMainMtrcsh+0x1bc>)
 8085f16:	f009 fffc 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 8085f1a:	4601      	mov	r1, r0
 8085f1c:	4668      	mov	r0, sp
 8085f1e:	f009 ff05 	bl	808fd2c <_ZN6StringC1ERKS_>
 8085f22:	a80c      	add	r0, sp, #48	; 0x30
 8085f24:	f009 fe6e 	bl	808fc04 <_ZN6StringD1Ev>

  gxGenMetricString.concat(String(main_gen_data[RUN_HRS], 1) + ":");
 8085f28:	4e5a      	ldr	r6, [pc, #360]	; (8086094 <_Z15pubGenMainMtrcsh+0x1c0>)
  String gxGenMetricString = "{\n\"v\":\"1\",\n\"gen" + String(gen_spot + ZERO_INDEX_CORRECTION) + 
 8085f2a:	a804      	add	r0, sp, #16
 8085f2c:	f009 fe6a 	bl	808fc04 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8085f30:	a808      	add	r0, sp, #32
 8085f32:	f009 fe67 	bl	808fc04 <_ZN6StringD1Ev>
  gxGenMetricString.concat(String(main_gen_data[RUN_HRS], 1) + ":");
 8085f36:	2201      	movs	r2, #1
 8085f38:	6831      	ldr	r1, [r6, #0]
 8085f3a:	a808      	add	r0, sp, #32
 8085f3c:	f009 ff79 	bl	808fe32 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 8085f40:	a908      	add	r1, sp, #32
 8085f42:	a80c      	add	r0, sp, #48	; 0x30
 8085f44:	f009 fef2 	bl	808fd2c <_ZN6StringC1ERKS_>
 8085f48:	4951      	ldr	r1, [pc, #324]	; (8086090 <_Z15pubGenMainMtrcsh+0x1bc>)
 8085f4a:	a80c      	add	r0, sp, #48	; 0x30
 8085f4c:	f009 ffe1 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 8085f50:	4601      	mov	r1, r0
 8085f52:	4668      	mov	r0, sp
 8085f54:	f009 ffb1 	bl	808feba <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8085f58:	a80c      	add	r0, sp, #48	; 0x30
 8085f5a:	f009 fe53 	bl	808fc04 <_ZN6StringD1Ev>
 8085f5e:	a808      	add	r0, sp, #32
 8085f60:	f009 fe50 	bl	808fc04 <_ZN6StringD1Ev>
 8085f64:	2401      	movs	r4, #1

  for (uint8_t data_indx = NUM_OF_STARTS; data_indx < ALARM_CODE1; data_indx++)
  {
    if ((main_gen_data[data_indx] == MB_UNAVAIL_VAL) || 
 8085f66:	f8df 813c 	ldr.w	r8, [pc, #316]	; 80860a4 <_Z15pubGenMainMtrcsh+0x1d0>
        (main_gen_data[data_indx] == MB_SENTL_VAL))
    { gxGenMetricString.concat(":"); }
 8085f6a:	4f49      	ldr	r7, [pc, #292]	; (8086090 <_Z15pubGenMainMtrcsh+0x1bc>)
    if ((main_gen_data[data_indx] == MB_UNAVAIL_VAL) || 
 8085f6c:	f8df 9138 	ldr.w	r9, [pc, #312]	; 80860a8 <_Z15pubGenMainMtrcsh+0x1d4>
 8085f70:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 8085f74:	4641      	mov	r1, r8
 8085f76:	4628      	mov	r0, r5
 8085f78:	f00b fd4e 	bl	8091a18 <__aeabi_fcmpeq>
 8085f7c:	b930      	cbnz	r0, 8085f8c <_Z15pubGenMainMtrcsh+0xb8>
 8085f7e:	4649      	mov	r1, r9
 8085f80:	4628      	mov	r0, r5
 8085f82:	f00b fd49 	bl	8091a18 <__aeabi_fcmpeq>
 8085f86:	4602      	mov	r2, r0
 8085f88:	2800      	cmp	r0, #0
 8085f8a:	d066      	beq.n	808605a <_Z15pubGenMainMtrcsh+0x186>
    { gxGenMetricString.concat(":"); }
 8085f8c:	4639      	mov	r1, r7
 8085f8e:	4668      	mov	r0, sp
 8085f90:	f009 ff97 	bl	808fec2 <_ZN6String6concatEPKc>
  for (uint8_t data_indx = NUM_OF_STARTS; data_indx < ALARM_CODE1; data_indx++)
 8085f94:	3401      	adds	r4, #1
 8085f96:	2c04      	cmp	r4, #4
 8085f98:	d1ea      	bne.n	8085f70 <_Z15pubGenMainMtrcsh+0x9c>
 8085f9a:	4f3e      	ldr	r7, [pc, #248]	; (8086094 <_Z15pubGenMainMtrcsh+0x1c0>)
    { gxGenMetricString.concat(String(main_gen_data[data_indx], 0) + ":"); }
  }

  for (uint8_t alrm_indx = ALARM_CODE1; alrm_indx < MAIN_GEN_DATA_SIZE; alrm_indx += 2)
  {
    if ((main_gen_data[alrm_indx] > GEN_ALM_NONE) && (main_gen_data[alrm_indx] <= TOTAL_SUPPORTED_ALARMS))
 8085f9c:	f04f 0800 	mov.w	r8, #0
  for (uint8_t data_indx = NUM_OF_STARTS; data_indx < ALARM_CODE1; data_indx++)
 8085fa0:	463d      	mov	r5, r7
    if ((main_gen_data[alrm_indx] > GEN_ALM_NONE) && (main_gen_data[alrm_indx] <= TOTAL_SUPPORTED_ALARMS))
 8085fa2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80860ac <_Z15pubGenMainMtrcsh+0x1d8>
    {
      gxGenMetricString.concat(String(main_gen_data[alrm_indx], 0) + ",");
 8085fa6:	f8df a108 	ldr.w	sl, [pc, #264]	; 80860b0 <_Z15pubGenMainMtrcsh+0x1dc>
    if ((main_gen_data[alrm_indx] > GEN_ALM_NONE) && (main_gen_data[alrm_indx] <= TOTAL_SUPPORTED_ALARMS))
 8085faa:	692e      	ldr	r6, [r5, #16]
 8085fac:	4641      	mov	r1, r8
 8085fae:	4630      	mov	r0, r6
 8085fb0:	f00b fd5a 	bl	8091a68 <__aeabi_fcmpgt>
 8085fb4:	2800      	cmp	r0, #0
 8085fb6:	d032      	beq.n	808601e <_Z15pubGenMainMtrcsh+0x14a>
 8085fb8:	4649      	mov	r1, r9
 8085fba:	4630      	mov	r0, r6
 8085fbc:	f00b fd40 	bl	8091a40 <__aeabi_fcmple>
 8085fc0:	b368      	cbz	r0, 808601e <_Z15pubGenMainMtrcsh+0x14a>
      gxGenMetricString.concat(String(main_gen_data[alrm_indx], 0) + ",");
 8085fc2:	2200      	movs	r2, #0
 8085fc4:	4631      	mov	r1, r6
 8085fc6:	a808      	add	r0, sp, #32
 8085fc8:	f009 ff33 	bl	808fe32 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 8085fcc:	a908      	add	r1, sp, #32
 8085fce:	a80c      	add	r0, sp, #48	; 0x30
 8085fd0:	f009 feac 	bl	808fd2c <_ZN6StringC1ERKS_>
 8085fd4:	4651      	mov	r1, sl
 8085fd6:	a80c      	add	r0, sp, #48	; 0x30
 8085fd8:	f009 ff9b 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 8085fdc:	4601      	mov	r1, r0
 8085fde:	4668      	mov	r0, sp
 8085fe0:	f009 ff6b 	bl	808feba <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8085fe4:	a80c      	add	r0, sp, #48	; 0x30
 8085fe6:	f009 fe0d 	bl	808fc04 <_ZN6StringD1Ev>
 8085fea:	a808      	add	r0, sp, #32
 8085fec:	f009 fe0a 	bl	808fc04 <_ZN6StringD1Ev>
      gxGenMetricString.concat(String(main_gen_data[alrm_indx + ZERO_INDEX_CORRECTION], 0) + ";");
 8085ff0:	2200      	movs	r2, #0
 8085ff2:	6969      	ldr	r1, [r5, #20]
 8085ff4:	a808      	add	r0, sp, #32
 8085ff6:	f009 ff1c 	bl	808fe32 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 8085ffa:	a908      	add	r1, sp, #32
 8085ffc:	a80c      	add	r0, sp, #48	; 0x30
 8085ffe:	f009 fe95 	bl	808fd2c <_ZN6StringC1ERKS_>
 8086002:	4925      	ldr	r1, [pc, #148]	; (8086098 <_Z15pubGenMainMtrcsh+0x1c4>)
 8086004:	a80c      	add	r0, sp, #48	; 0x30
 8086006:	f009 ff84 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 808600a:	4601      	mov	r1, r0
 808600c:	4668      	mov	r0, sp
 808600e:	f009 ff54 	bl	808feba <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8086012:	a80c      	add	r0, sp, #48	; 0x30
 8086014:	f009 fdf6 	bl	808fc04 <_ZN6StringD1Ev>
 8086018:	a808      	add	r0, sp, #32
 808601a:	f009 fdf3 	bl	808fc04 <_ZN6StringD1Ev>
  for (uint8_t alrm_indx = ALARM_CODE1; alrm_indx < MAIN_GEN_DATA_SIZE; alrm_indx += 2)
 808601e:	3402      	adds	r4, #2
 8086020:	2c34      	cmp	r4, #52	; 0x34
 8086022:	f105 0508 	add.w	r5, r5, #8
 8086026:	d1c0      	bne.n	8085faa <_Z15pubGenMainMtrcsh+0xd6>
    }      
  }

  gxGenMetricString.concat("\"\n}");
 8086028:	491c      	ldr	r1, [pc, #112]	; (808609c <_Z15pubGenMainMtrcsh+0x1c8>)
 808602a:	4668      	mov	r0, sp
 808602c:	f009 ff49 	bl	808fec2 <_ZN6String6concatEPKc>

  Log.info(gxGenMetricString);
 8086030:	9900      	ldr	r1, [sp, #0]
 8086032:	481b      	ldr	r0, [pc, #108]	; (80860a0 <_Z15pubGenMainMtrcsh+0x1cc>)
 8086034:	f7ff fcae 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
  saveAndPublishMetrics(gxGenMetricString);
 8086038:	4668      	mov	r0, sp
 808603a:	f003 fff5 	bl	808a028 <_Z21saveAndPublishMetricsR6String>

  for (uint8_t i = 0; i < MAIN_GEN_DATA_SIZE; i++)
  { main_gen_data[i] = 0.0f; }
 808603e:	2300      	movs	r3, #0
 8086040:	3c01      	subs	r4, #1
  for (uint8_t i = 0; i < MAIN_GEN_DATA_SIZE; i++)
 8086042:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  { main_gen_data[i] = 0.0f; }
 8086046:	f847 3b04 	str.w	r3, [r7], #4
  for (uint8_t i = 0; i < MAIN_GEN_DATA_SIZE; i++)
 808604a:	d1f9      	bne.n	8086040 <_Z15pubGenMainMtrcsh+0x16c>
                             "\":\"" + String(Time.now()) + ":";
 808604c:	4668      	mov	r0, sp
 808604e:	f009 fdd9 	bl	808fc04 <_ZN6StringD1Ev>
  
  return GEN_BASINST;
}
 8086052:	2001      	movs	r0, #1
 8086054:	b010      	add	sp, #64	; 0x40
 8086056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    { gxGenMetricString.concat(String(main_gen_data[data_indx], 0) + ":"); }
 808605a:	4629      	mov	r1, r5
 808605c:	a808      	add	r0, sp, #32
 808605e:	f009 fee8 	bl	808fe32 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 8086062:	a908      	add	r1, sp, #32
 8086064:	a80c      	add	r0, sp, #48	; 0x30
 8086066:	f009 fe61 	bl	808fd2c <_ZN6StringC1ERKS_>
 808606a:	4639      	mov	r1, r7
 808606c:	a80c      	add	r0, sp, #48	; 0x30
 808606e:	f009 ff50 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 8086072:	4601      	mov	r1, r0
 8086074:	4668      	mov	r0, sp
 8086076:	f009 ff20 	bl	808feba <_ZN6String6concatERKS_>
class StringSumHelper : public String
 808607a:	a80c      	add	r0, sp, #48	; 0x30
 808607c:	f009 fdc2 	bl	808fc04 <_ZN6StringD1Ev>
 8086080:	a808      	add	r0, sp, #32
 8086082:	f009 fdbf 	bl	808fc04 <_ZN6StringD1Ev>
 8086086:	e785      	b.n	8085f94 <_Z15pubGenMainMtrcsh+0xc0>
 8086088:	080937df 	.word	0x080937df
 808608c:	0809385d 	.word	0x0809385d
 8086090:	08093bfa 	.word	0x08093bfa
 8086094:	20000cd8 	.word	0x20000cd8
 8086098:	080937ef 	.word	0x080937ef
 808609c:	080938c3 	.word	0x080938c3
 80860a0:	200015a4 	.word	0x200015a4
 80860a4:	ccc0a468 	.word	0xccc0a468
 80860a8:	ccbebc20 	.word	0xccbebc20
 80860ac:	41c00000 	.word	0x41c00000
 80860b0:	08094597 	.word	0x08094597

080860b4 <_Z18pubGenBasInstMtrcsh>:

GeneratorDataSet pubGenBasInstMtrcs(uint8_t gen_spot)
{
 80860b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80860b8:	4604      	mov	r4, r0
 80860ba:	b090      	sub	sp, #64	; 0x40
	StringSumHelper(const char *p) : String(p) {}
 80860bc:	4938      	ldr	r1, [pc, #224]	; (80861a0 <_Z18pubGenBasInstMtrcsh+0xec>)
 80860be:	a808      	add	r0, sp, #32
 80860c0:	f009 fdea 	bl	808fc98 <_ZN6StringC1EPKc>
  String gxGenMetricString = "{\n\"v\":\"1\",\n\"gen" + String(gen_spot + ZERO_INDEX_CORRECTION) + 
 80860c4:	220a      	movs	r2, #10
 80860c6:	1c61      	adds	r1, r4, #1
 80860c8:	a804      	add	r0, sp, #16
 80860ca:	f009 fe65 	bl	808fd98 <_ZN6StringC1Eih>
 80860ce:	a904      	add	r1, sp, #16
 80860d0:	a808      	add	r0, sp, #32
 80860d2:	f009 ff12 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
                             "_basInst\":\n\"" + String(Time.now()) + ",";
 80860d6:	4933      	ldr	r1, [pc, #204]	; (80861a4 <_Z18pubGenBasInstMtrcsh+0xf0>)
 80860d8:	f009 ff1b 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 80860dc:	4604      	mov	r4, r0
 80860de:	f00a f883 	bl	80901e8 <_ZN9TimeClass3nowEv>
 80860e2:	220a      	movs	r2, #10
 80860e4:	4601      	mov	r1, r0
 80860e6:	a80c      	add	r0, sp, #48	; 0x30
 80860e8:	f009 fe7c 	bl	808fde4 <_ZN6StringC1Elh>
 80860ec:	4620      	mov	r0, r4
 80860ee:	a90c      	add	r1, sp, #48	; 0x30
 80860f0:	f009 ff03 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 80860f4:	492c      	ldr	r1, [pc, #176]	; (80861a8 <_Z18pubGenBasInstMtrcsh+0xf4>)
 80860f6:	f009 ff0c 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 80860fa:	4601      	mov	r1, r0
 80860fc:	4668      	mov	r0, sp
 80860fe:	f009 fe15 	bl	808fd2c <_ZN6StringC1ERKS_>
 8086102:	a80c      	add	r0, sp, #48	; 0x30
 8086104:	f009 fd7e 	bl	808fc04 <_ZN6StringD1Ev>
 8086108:	4e28      	ldr	r6, [pc, #160]	; (80861ac <_Z18pubGenBasInstMtrcsh+0xf8>)
  String gxGenMetricString = "{\n\"v\":\"1\",\n\"gen" + String(gen_spot + ZERO_INDEX_CORRECTION) + 
 808610a:	a804      	add	r0, sp, #16
 808610c:	f009 fd7a 	bl	808fc04 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8086110:	a808      	add	r0, sp, #32
 8086112:	f009 fd77 	bl	808fc04 <_ZN6StringD1Ev>
 8086116:	4637      	mov	r7, r6

  for (uint8_t metric_indx = TOTAL_KWH; metric_indx <= CURR_LAG_LEAD; metric_indx++)
 8086118:	2400      	movs	r4, #0
  {
    if ((bas_inst_gen_data[metric_indx] == MB_SENTL_VAL) || 
 808611a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 80861b8 <_Z18pubGenBasInstMtrcsh+0x104>
        (bas_inst_gen_data[metric_indx] == MB_UNAVAIL_VAL))
    { gxGenMetricString.concat(","); }
 808611e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80861a8 <_Z18pubGenBasInstMtrcsh+0xf4>
    if ((bas_inst_gen_data[metric_indx] == MB_SENTL_VAL) || 
 8086122:	f8df a098 	ldr.w	sl, [pc, #152]	; 80861bc <_Z18pubGenBasInstMtrcsh+0x108>
 8086126:	f857 5b04 	ldr.w	r5, [r7], #4
 808612a:	4641      	mov	r1, r8
 808612c:	4628      	mov	r0, r5
 808612e:	f00b fc73 	bl	8091a18 <__aeabi_fcmpeq>
 8086132:	b920      	cbnz	r0, 808613e <_Z18pubGenBasInstMtrcsh+0x8a>
 8086134:	4651      	mov	r1, sl
 8086136:	4628      	mov	r0, r5
 8086138:	f00b fc6e 	bl	8091a18 <__aeabi_fcmpeq>
 808613c:	b300      	cbz	r0, 8086180 <_Z18pubGenBasInstMtrcsh+0xcc>
    { gxGenMetricString.concat(","); }
 808613e:	4649      	mov	r1, r9
 8086140:	4668      	mov	r0, sp
 8086142:	f009 febe 	bl	808fec2 <_ZN6String6concatEPKc>
  for (uint8_t metric_indx = TOTAL_KWH; metric_indx <= CURR_LAG_LEAD; metric_indx++)
 8086146:	3401      	adds	r4, #1
 8086148:	b2e4      	uxtb	r4, r4
 808614a:	2c17      	cmp	r4, #23
 808614c:	d1eb      	bne.n	8086126 <_Z18pubGenBasInstMtrcsh+0x72>
      if (!(metric_indx == CURR_LAG_LEAD))
      { gxGenMetricString.concat(","); }
    }      
  }

  gxGenMetricString.concat("\"\n}");
 808614e:	4918      	ldr	r1, [pc, #96]	; (80861b0 <_Z18pubGenBasInstMtrcsh+0xfc>)
 8086150:	4668      	mov	r0, sp
 8086152:	f009 feb6 	bl	808fec2 <_ZN6String6concatEPKc>

  Log.info(gxGenMetricString);
 8086156:	9900      	ldr	r1, [sp, #0]
 8086158:	4816      	ldr	r0, [pc, #88]	; (80861b4 <_Z18pubGenBasInstMtrcsh+0x100>)
 808615a:	f7ff fc1b 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
  saveAndPublishMetrics(gxGenMetricString);
 808615e:	4668      	mov	r0, sp
 8086160:	f003 ff62 	bl	808a028 <_Z21saveAndPublishMetricsR6String>

  for (uint8_t i = 0; i < BASIC_INST_GEN_DATA_SIZE; i++)
  { bas_inst_gen_data[i] = 0.0f; }
 8086164:	2300      	movs	r3, #0
 8086166:	3c01      	subs	r4, #1
  for (uint8_t i = 0; i < BASIC_INST_GEN_DATA_SIZE; i++)
 8086168:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  { bas_inst_gen_data[i] = 0.0f; }
 808616c:	f846 3b04 	str.w	r3, [r6], #4
  for (uint8_t i = 0; i < BASIC_INST_GEN_DATA_SIZE; i++)
 8086170:	d1f9      	bne.n	8086166 <_Z18pubGenBasInstMtrcsh+0xb2>
                             "_basInst\":\n\"" + String(Time.now()) + ",";
 8086172:	4668      	mov	r0, sp
 8086174:	f009 fd46 	bl	808fc04 <_ZN6StringD1Ev>
  
  return GEN_DERINST;
}
 8086178:	2002      	movs	r0, #2
 808617a:	b010      	add	sp, #64	; 0x40
 808617c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      gxGenMetricString.concat(String(bas_inst_gen_data[metric_indx], 1));
 8086180:	2201      	movs	r2, #1
 8086182:	4629      	mov	r1, r5
 8086184:	a80c      	add	r0, sp, #48	; 0x30
 8086186:	f009 fe54 	bl	808fe32 <_ZN6StringC1Efi>
 808618a:	a90c      	add	r1, sp, #48	; 0x30
 808618c:	4668      	mov	r0, sp
 808618e:	f009 fe94 	bl	808feba <_ZN6String6concatERKS_>
 8086192:	a80c      	add	r0, sp, #48	; 0x30
 8086194:	f009 fd36 	bl	808fc04 <_ZN6StringD1Ev>
      if (!(metric_indx == CURR_LAG_LEAD))
 8086198:	2c16      	cmp	r4, #22
 808619a:	d1d0      	bne.n	808613e <_Z18pubGenBasInstMtrcsh+0x8a>
 808619c:	e7d3      	b.n	8086146 <_Z18pubGenBasInstMtrcsh+0x92>
 808619e:	bf00      	nop
 80861a0:	080937df 	.word	0x080937df
 80861a4:	080937f1 	.word	0x080937f1
 80861a8:	08094597 	.word	0x08094597
 80861ac:	200005c8 	.word	0x200005c8
 80861b0:	080938c3 	.word	0x080938c3
 80861b4:	200015a4 	.word	0x200015a4
 80861b8:	ccbebc20 	.word	0xccbebc20
 80861bc:	ccc0a468 	.word	0xccc0a468

080861c0 <_Z18pubGenDerInstMtrcsh>:

GeneratorDataSet pubGenDerInstMtrcs(uint8_t gen_spot)
{
 80861c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80861c4:	4604      	mov	r4, r0
 80861c6:	b090      	sub	sp, #64	; 0x40
	StringSumHelper(const char *p) : String(p) {}
 80861c8:	4938      	ldr	r1, [pc, #224]	; (80862ac <_Z18pubGenDerInstMtrcsh+0xec>)
 80861ca:	a808      	add	r0, sp, #32
 80861cc:	f009 fd64 	bl	808fc98 <_ZN6StringC1EPKc>
  String gxGenMetricString = "{\n\"v\":\"1\",\n\"gen" + String(gen_spot + ZERO_INDEX_CORRECTION) + 
 80861d0:	220a      	movs	r2, #10
 80861d2:	1c61      	adds	r1, r4, #1
 80861d4:	a804      	add	r0, sp, #16
 80861d6:	f009 fddf 	bl	808fd98 <_ZN6StringC1Eih>
 80861da:	a904      	add	r1, sp, #16
 80861dc:	a808      	add	r0, sp, #32
 80861de:	f009 fe8c 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
                             "_derInst\":\n\"" + String(Time.now()) + ",";
 80861e2:	4933      	ldr	r1, [pc, #204]	; (80862b0 <_Z18pubGenDerInstMtrcsh+0xf0>)
 80861e4:	f009 fe95 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 80861e8:	4604      	mov	r4, r0
 80861ea:	f009 fffd 	bl	80901e8 <_ZN9TimeClass3nowEv>
 80861ee:	220a      	movs	r2, #10
 80861f0:	4601      	mov	r1, r0
 80861f2:	a80c      	add	r0, sp, #48	; 0x30
 80861f4:	f009 fdf6 	bl	808fde4 <_ZN6StringC1Elh>
 80861f8:	4620      	mov	r0, r4
 80861fa:	a90c      	add	r1, sp, #48	; 0x30
 80861fc:	f009 fe7d 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 8086200:	492c      	ldr	r1, [pc, #176]	; (80862b4 <_Z18pubGenDerInstMtrcsh+0xf4>)
 8086202:	f009 fe86 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 8086206:	4601      	mov	r1, r0
 8086208:	4668      	mov	r0, sp
 808620a:	f009 fd8f 	bl	808fd2c <_ZN6StringC1ERKS_>
 808620e:	a80c      	add	r0, sp, #48	; 0x30
 8086210:	f009 fcf8 	bl	808fc04 <_ZN6StringD1Ev>
 8086214:	4e28      	ldr	r6, [pc, #160]	; (80862b8 <_Z18pubGenDerInstMtrcsh+0xf8>)
  String gxGenMetricString = "{\n\"v\":\"1\",\n\"gen" + String(gen_spot + ZERO_INDEX_CORRECTION) + 
 8086216:	a804      	add	r0, sp, #16
 8086218:	f009 fcf4 	bl	808fc04 <_ZN6StringD1Ev>
class StringSumHelper : public String
 808621c:	a808      	add	r0, sp, #32
 808621e:	f009 fcf1 	bl	808fc04 <_ZN6StringD1Ev>
 8086222:	4637      	mov	r7, r6
  for (uint8_t metric_indx = TOTAL_WATT; metric_indx <= PERCENT_OF_FULL_POWER; metric_indx++)
 8086224:	2400      	movs	r4, #0
  {
    if ((der_inst_gen_data[metric_indx] == MB_SENTL_VAL) || 
 8086226:	f8df 809c 	ldr.w	r8, [pc, #156]	; 80862c4 <_Z18pubGenDerInstMtrcsh+0x104>
        (der_inst_gen_data[metric_indx] == MB_UNAVAIL_VAL))
    { gxGenMetricString.concat(","); }
 808622a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80862b4 <_Z18pubGenDerInstMtrcsh+0xf4>
    if ((der_inst_gen_data[metric_indx] == MB_SENTL_VAL) || 
 808622e:	f8df a098 	ldr.w	sl, [pc, #152]	; 80862c8 <_Z18pubGenDerInstMtrcsh+0x108>
 8086232:	f857 5b04 	ldr.w	r5, [r7], #4
 8086236:	4641      	mov	r1, r8
 8086238:	4628      	mov	r0, r5
 808623a:	f00b fbed 	bl	8091a18 <__aeabi_fcmpeq>
 808623e:	b920      	cbnz	r0, 808624a <_Z18pubGenDerInstMtrcsh+0x8a>
 8086240:	4651      	mov	r1, sl
 8086242:	4628      	mov	r0, r5
 8086244:	f00b fbe8 	bl	8091a18 <__aeabi_fcmpeq>
 8086248:	b300      	cbz	r0, 808628c <_Z18pubGenDerInstMtrcsh+0xcc>
    { gxGenMetricString.concat(","); }
 808624a:	4649      	mov	r1, r9
 808624c:	4668      	mov	r0, sp
 808624e:	f009 fe38 	bl	808fec2 <_ZN6String6concatEPKc>
  for (uint8_t metric_indx = TOTAL_WATT; metric_indx <= PERCENT_OF_FULL_POWER; metric_indx++)
 8086252:	3401      	adds	r4, #1
 8086254:	b2e4      	uxtb	r4, r4
 8086256:	2c0e      	cmp	r4, #14
 8086258:	d1eb      	bne.n	8086232 <_Z18pubGenDerInstMtrcsh+0x72>
      if (!(metric_indx == PERCENT_OF_FULL_POWER))
      { gxGenMetricString.concat(","); }
    }    
  }
  
  gxGenMetricString.concat("\"\n}");
 808625a:	4918      	ldr	r1, [pc, #96]	; (80862bc <_Z18pubGenDerInstMtrcsh+0xfc>)
 808625c:	4668      	mov	r0, sp
 808625e:	f009 fe30 	bl	808fec2 <_ZN6String6concatEPKc>

  Log.info(gxGenMetricString);
 8086262:	9900      	ldr	r1, [sp, #0]
 8086264:	4816      	ldr	r0, [pc, #88]	; (80862c0 <_Z18pubGenDerInstMtrcsh+0x100>)
 8086266:	f7ff fb95 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
  saveAndPublishMetrics(gxGenMetricString);
 808626a:	4668      	mov	r0, sp
 808626c:	f003 fedc 	bl	808a028 <_Z21saveAndPublishMetricsR6String>

  for (uint8_t i = 0; i < DERIV_INST_GEN_DATA_SIZE; i++)
  { der_inst_gen_data[i] = 0.0f; }
 8086270:	2300      	movs	r3, #0
 8086272:	3c01      	subs	r4, #1
  for (uint8_t i = 0; i < DERIV_INST_GEN_DATA_SIZE; i++)
 8086274:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  { der_inst_gen_data[i] = 0.0f; }
 8086278:	f846 3b04 	str.w	r3, [r6], #4
  for (uint8_t i = 0; i < DERIV_INST_GEN_DATA_SIZE; i++)
 808627c:	d1f9      	bne.n	8086272 <_Z18pubGenDerInstMtrcsh+0xb2>
                             "_derInst\":\n\"" + String(Time.now()) + ",";
 808627e:	4668      	mov	r0, sp
 8086280:	f009 fcc0 	bl	808fc04 <_ZN6StringD1Ev>
  
  return GEN_MAIN;
}
 8086284:	4620      	mov	r0, r4
 8086286:	b010      	add	sp, #64	; 0x40
 8086288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      gxGenMetricString.concat(String(der_inst_gen_data[metric_indx], 1));
 808628c:	2201      	movs	r2, #1
 808628e:	4629      	mov	r1, r5
 8086290:	a80c      	add	r0, sp, #48	; 0x30
 8086292:	f009 fdce 	bl	808fe32 <_ZN6StringC1Efi>
 8086296:	a90c      	add	r1, sp, #48	; 0x30
 8086298:	4668      	mov	r0, sp
 808629a:	f009 fe0e 	bl	808feba <_ZN6String6concatERKS_>
 808629e:	a80c      	add	r0, sp, #48	; 0x30
 80862a0:	f009 fcb0 	bl	808fc04 <_ZN6StringD1Ev>
      if (!(metric_indx == PERCENT_OF_FULL_POWER))
 80862a4:	2c0d      	cmp	r4, #13
 80862a6:	d1d0      	bne.n	808624a <_Z18pubGenDerInstMtrcsh+0x8a>
 80862a8:	e7d3      	b.n	8086252 <_Z18pubGenDerInstMtrcsh+0x92>
 80862aa:	bf00      	nop
 80862ac:	080937df 	.word	0x080937df
 80862b0:	080937fe 	.word	0x080937fe
 80862b4:	08094597 	.word	0x08094597
 80862b8:	20000664 	.word	0x20000664
 80862bc:	080938c3 	.word	0x080938c3
 80862c0:	200015a4 	.word	0x200015a4
 80862c4:	ccbebc20 	.word	0xccbebc20
 80862c8:	ccc0a468 	.word	0xccc0a468

080862cc <_Z17publishGenMetricsh>:
{
 80862cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (gxGen[gen_unit].derInstAvailable() == false)
 80862ce:	27e8      	movs	r7, #232	; 0xe8
{
 80862d0:	4606      	mov	r6, r0
      if (gxGen[gen_unit].derInstAvailable() == false)
 80862d2:	4b16      	ldr	r3, [pc, #88]	; (808632c <_Z17publishGenMetricsh+0x60>)
 80862d4:	fb07 3700 	mla	r7, r7, r0, r3
      gen_metric_group = pubGenMainMtrcs(gen_unit);
 80862d8:	4630      	mov	r0, r6
 80862da:	f7ff fdfb 	bl	8085ed4 <_Z15pubGenMainMtrcsh>
 80862de:	4604      	mov	r4, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80862e0:	f006 fe2c 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
      pubgen_metrics_interval = millis() + GEN_METRICS_PUBLISH_INTERVAL; 
 80862e4:	f200 454c 	addw	r5, r0, #1100	; 0x44c
    if ((gen_metric_group == GEN_BASINST) && (millis() > pubgen_metrics_interval))
 80862e8:	2c01      	cmp	r4, #1
 80862ea:	d10f      	bne.n	808630c <_Z17publishGenMetricsh+0x40>
 80862ec:	f006 fe26 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
 80862f0:	42a8      	cmp	r0, r5
 80862f2:	d9fb      	bls.n	80862ec <_Z17publishGenMetricsh+0x20>
      gen_metric_group = pubGenBasInstMtrcs(gen_unit);
 80862f4:	4630      	mov	r0, r6
 80862f6:	f7ff fedd 	bl	80860b4 <_Z18pubGenBasInstMtrcsh>
 80862fa:	4604      	mov	r4, r0
      if (gxGen[gen_unit].derInstAvailable() == false)
 80862fc:	4638      	mov	r0, r7
 80862fe:	f002 fdd7 	bl	8088eb0 <_ZN11GXGenerator16derInstAvailableEv>
 8086302:	b188      	cbz	r0, 8086328 <_Z17publishGenMetricsh+0x5c>
 8086304:	f006 fe1a 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
      pubgen_metrics_interval = millis() + GEN_METRICS_PUBLISH_INTERVAL; 
 8086308:	f200 454c 	addw	r5, r0, #1100	; 0x44c
    if ((gen_metric_group == GEN_DERINST) && (millis() > pubgen_metrics_interval))
 808630c:	2c02      	cmp	r4, #2
 808630e:	d108      	bne.n	8086322 <_Z17publishGenMetricsh+0x56>
 8086310:	f006 fe14 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
 8086314:	42a8      	cmp	r0, r5
 8086316:	d9fb      	bls.n	8086310 <_Z17publishGenMetricsh+0x44>
      gen_metric_group = pubGenDerInstMtrcs(gen_unit);
 8086318:	4630      	mov	r0, r6
}
 808631a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      gen_metric_group = pubGenDerInstMtrcs(gen_unit);
 808631e:	f7ff bf4f 	b.w	80861c0 <_Z18pubGenDerInstMtrcsh>
    if (gen_metric_group == GEN_MAIN)
 8086322:	2c00      	cmp	r4, #0
 8086324:	d1e0      	bne.n	80862e8 <_Z17publishGenMetricsh+0x1c>
 8086326:	e7d7      	b.n	80862d8 <_Z17publishGenMetricsh+0xc>
}
 8086328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808632a:	bf00      	nop
 808632c:	20000768 	.word	0x20000768

08086330 <_Z19pubGridBasInstMtrcsv>:

GridDataSet pubGridBasInstMtrcs()
{
 8086330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8086334:	b091      	sub	sp, #68	; 0x44
	StringSumHelper(const char *p) : String(p) {}
 8086336:	4935      	ldr	r1, [pc, #212]	; (808640c <_Z19pubGridBasInstMtrcsv+0xdc>)
 8086338:	a808      	add	r0, sp, #32
 808633a:	f009 fcad 	bl	808fc98 <_ZN6StringC1EPKc>
  String gxGridMetricString = "{\"v\":\"1\",\"s\":" + String(gridmetrics_active) + 
 808633e:	4b34      	ldr	r3, [pc, #208]	; (8086410 <_Z19pubGridBasInstMtrcsv+0xe0>)
 8086340:	220a      	movs	r2, #10
 8086342:	7819      	ldrb	r1, [r3, #0]
 8086344:	a804      	add	r0, sp, #16
 8086346:	f009 fd15 	bl	808fd74 <_ZN6StringC1Ehh>
 808634a:	a904      	add	r1, sp, #16
 808634c:	a808      	add	r0, sp, #32
 808634e:	f009 fdd4 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
                              ",\"grid_basInst\":\"" + String(Time.now()) + ",";
 8086352:	4930      	ldr	r1, [pc, #192]	; (8086414 <_Z19pubGridBasInstMtrcsv+0xe4>)
 8086354:	f009 fddd 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 8086358:	4604      	mov	r4, r0
 808635a:	f009 ff45 	bl	80901e8 <_ZN9TimeClass3nowEv>
 808635e:	220a      	movs	r2, #10
 8086360:	4601      	mov	r1, r0
 8086362:	a80c      	add	r0, sp, #48	; 0x30
 8086364:	f009 fd3e 	bl	808fde4 <_ZN6StringC1Elh>
 8086368:	4620      	mov	r0, r4
 808636a:	a90c      	add	r1, sp, #48	; 0x30
 808636c:	f009 fdc5 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 8086370:	4929      	ldr	r1, [pc, #164]	; (8086418 <_Z19pubGridBasInstMtrcsv+0xe8>)
 8086372:	f009 fdce 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 8086376:	4601      	mov	r1, r0
 8086378:	4668      	mov	r0, sp
 808637a:	f009 fcd7 	bl	808fd2c <_ZN6StringC1ERKS_>
 808637e:	a80c      	add	r0, sp, #48	; 0x30
 8086380:	f009 fc40 	bl	808fc04 <_ZN6StringD1Ev>
 8086384:	4d25      	ldr	r5, [pc, #148]	; (808641c <_Z19pubGridBasInstMtrcsv+0xec>)
  String gxGridMetricString = "{\"v\":\"1\",\"s\":" + String(gridmetrics_active) + 
 8086386:	a804      	add	r0, sp, #16
 8086388:	f009 fc3c 	bl	808fc04 <_ZN6StringD1Ev>
class StringSumHelper : public String
 808638c:	a808      	add	r0, sp, #32
 808638e:	f009 fc39 	bl	808fc04 <_ZN6StringD1Ev>
 8086392:	462e      	mov	r6, r5
  
  for(uint8_t metrc_indx = GRID_ACCUM_KWH; metrc_indx <= GRID_L3_WATT; metrc_indx++)
 8086394:	2400      	movs	r4, #0
  {
    if(bas_inst_grid_data[metrc_indx] == MB_SENTL_VAL)
 8086396:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8086428 <_Z19pubGridBasInstMtrcsv+0xf8>
    { gxGridMetricString.concat(","); }
 808639a:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8086418 <_Z19pubGridBasInstMtrcsv+0xe8>
    if(bas_inst_grid_data[metrc_indx] == MB_SENTL_VAL)
 808639e:	f856 7b04 	ldr.w	r7, [r6], #4
 80863a2:	4641      	mov	r1, r8
 80863a4:	4638      	mov	r0, r7
 80863a6:	f00b fb37 	bl	8091a18 <__aeabi_fcmpeq>
 80863aa:	b300      	cbz	r0, 80863ee <_Z19pubGridBasInstMtrcsv+0xbe>
    { gxGridMetricString.concat(","); }
 80863ac:	4649      	mov	r1, r9
 80863ae:	4668      	mov	r0, sp
 80863b0:	f009 fd87 	bl	808fec2 <_ZN6String6concatEPKc>
  for(uint8_t metrc_indx = GRID_ACCUM_KWH; metrc_indx <= GRID_L3_WATT; metrc_indx++)
 80863b4:	3401      	adds	r4, #1
 80863b6:	b2e4      	uxtb	r4, r4
 80863b8:	2c10      	cmp	r4, #16
 80863ba:	d1f0      	bne.n	808639e <_Z19pubGridBasInstMtrcsv+0x6e>
      if(!(metrc_indx == GRID_L3_WATT))
      { gxGridMetricString.concat(","); }
    }
  }

  gxGridMetricString.concat("\"}");
 80863bc:	4918      	ldr	r1, [pc, #96]	; (8086420 <_Z19pubGridBasInstMtrcsv+0xf0>)
 80863be:	4668      	mov	r0, sp
 80863c0:	f009 fd7f 	bl	808fec2 <_ZN6String6concatEPKc>

  Log.info(gxGridMetricString); 
 80863c4:	9900      	ldr	r1, [sp, #0]
 80863c6:	4817      	ldr	r0, [pc, #92]	; (8086424 <_Z19pubGridBasInstMtrcsv+0xf4>)
 80863c8:	f7ff fae4 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
  saveAndPublishMetrics(gxGridMetricString);
 80863cc:	4668      	mov	r0, sp
 80863ce:	f003 fe2b 	bl	808a028 <_Z21saveAndPublishMetricsR6String>
  
  for(uint8_t i = GRID_DONE; i < BASINST_GRID_DATA_SIZE; i++)
  { bas_inst_grid_data[i] = 0.0f; }
 80863d2:	2300      	movs	r3, #0
 80863d4:	3c01      	subs	r4, #1
  for(uint8_t i = GRID_DONE; i < BASINST_GRID_DATA_SIZE; i++)
 80863d6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  { bas_inst_grid_data[i] = 0.0f; }
 80863da:	f845 3b04 	str.w	r3, [r5], #4
  for(uint8_t i = GRID_DONE; i < BASINST_GRID_DATA_SIZE; i++)
 80863de:	d1f9      	bne.n	80863d4 <_Z19pubGridBasInstMtrcsv+0xa4>
                              ",\"grid_basInst\":\"" + String(Time.now()) + ",";
 80863e0:	4668      	mov	r0, sp
 80863e2:	f009 fc0f 	bl	808fc04 <_ZN6StringD1Ev>

  return GRID_DER_INST;
}
 80863e6:	2002      	movs	r0, #2
 80863e8:	b011      	add	sp, #68	; 0x44
 80863ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      gxGridMetricString.concat(String(bas_inst_grid_data[metrc_indx], 2));
 80863ee:	2202      	movs	r2, #2
 80863f0:	4639      	mov	r1, r7
 80863f2:	a80c      	add	r0, sp, #48	; 0x30
 80863f4:	f009 fd1d 	bl	808fe32 <_ZN6StringC1Efi>
 80863f8:	a90c      	add	r1, sp, #48	; 0x30
 80863fa:	4668      	mov	r0, sp
 80863fc:	f009 fd5d 	bl	808feba <_ZN6String6concatERKS_>
 8086400:	a80c      	add	r0, sp, #48	; 0x30
 8086402:	f009 fbff 	bl	808fc04 <_ZN6StringD1Ev>
      if(!(metrc_indx == GRID_L3_WATT))
 8086406:	2c0f      	cmp	r4, #15
 8086408:	d1d0      	bne.n	80863ac <_Z19pubGridBasInstMtrcsv+0x7c>
 808640a:	e7d3      	b.n	80863b4 <_Z19pubGridBasInstMtrcsv+0x84>
 808640c:	0809380b 	.word	0x0809380b
 8086410:	20001244 	.word	0x20001244
 8086414:	08093819 	.word	0x08093819
 8086418:	08094597 	.word	0x08094597
 808641c:	20000624 	.word	0x20000624
 8086420:	080939b2 	.word	0x080939b2
 8086424:	200015a4 	.word	0x200015a4
 8086428:	ccbebc20 	.word	0xccbebc20

0808642c <_Z19pubGridDerInstMtrcsv>:

GridDataSet pubGridDerInstMtrcs()
{
 808642c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8086430:	b091      	sub	sp, #68	; 0x44
	StringSumHelper(const char *p) : String(p) {}
 8086432:	4935      	ldr	r1, [pc, #212]	; (8086508 <_Z19pubGridDerInstMtrcsv+0xdc>)
 8086434:	a808      	add	r0, sp, #32
 8086436:	f009 fc2f 	bl	808fc98 <_ZN6StringC1EPKc>
  String gxGridMetricString = "{\"v\":\"1\",\"s\":" + String(gridmetrics_active) + 
 808643a:	4b34      	ldr	r3, [pc, #208]	; (808650c <_Z19pubGridDerInstMtrcsv+0xe0>)
 808643c:	220a      	movs	r2, #10
 808643e:	7819      	ldrb	r1, [r3, #0]
 8086440:	a804      	add	r0, sp, #16
 8086442:	f009 fc97 	bl	808fd74 <_ZN6StringC1Ehh>
 8086446:	a904      	add	r1, sp, #16
 8086448:	a808      	add	r0, sp, #32
 808644a:	f009 fd56 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
                              ",\"grid_DerInst\":\"" + String(Time.now()) + ",";
 808644e:	4930      	ldr	r1, [pc, #192]	; (8086510 <_Z19pubGridDerInstMtrcsv+0xe4>)
 8086450:	f009 fd5f 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 8086454:	4604      	mov	r4, r0
 8086456:	f009 fec7 	bl	80901e8 <_ZN9TimeClass3nowEv>
 808645a:	220a      	movs	r2, #10
 808645c:	4601      	mov	r1, r0
 808645e:	a80c      	add	r0, sp, #48	; 0x30
 8086460:	f009 fcc0 	bl	808fde4 <_ZN6StringC1Elh>
 8086464:	4620      	mov	r0, r4
 8086466:	a90c      	add	r1, sp, #48	; 0x30
 8086468:	f009 fd47 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 808646c:	4929      	ldr	r1, [pc, #164]	; (8086514 <_Z19pubGridDerInstMtrcsv+0xe8>)
 808646e:	f009 fd50 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 8086472:	4601      	mov	r1, r0
 8086474:	4668      	mov	r0, sp
 8086476:	f009 fc59 	bl	808fd2c <_ZN6StringC1ERKS_>
 808647a:	a80c      	add	r0, sp, #48	; 0x30
 808647c:	f009 fbc2 	bl	808fc04 <_ZN6StringD1Ev>
 8086480:	4d25      	ldr	r5, [pc, #148]	; (8086518 <_Z19pubGridDerInstMtrcsv+0xec>)
  String gxGridMetricString = "{\"v\":\"1\",\"s\":" + String(gridmetrics_active) + 
 8086482:	a804      	add	r0, sp, #16
 8086484:	f009 fbbe 	bl	808fc04 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8086488:	a808      	add	r0, sp, #32
 808648a:	f009 fbbb 	bl	808fc04 <_ZN6StringD1Ev>
 808648e:	462e      	mov	r6, r5
  
  for(uint8_t metrc_indx = TOTAL_GRID_KW; metrc_indx <= PERCENT_OF_GRID_POWER; metrc_indx++)
 8086490:	2400      	movs	r4, #0
  {
    if(der_inst_grid_data[metrc_indx] == MB_SENTL_VAL)
 8086492:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8086524 <_Z19pubGridDerInstMtrcsv+0xf8>
    { gxGridMetricString.concat(","); }
 8086496:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8086514 <_Z19pubGridDerInstMtrcsv+0xe8>
    if(der_inst_grid_data[metrc_indx] == MB_SENTL_VAL)
 808649a:	f856 7b04 	ldr.w	r7, [r6], #4
 808649e:	4641      	mov	r1, r8
 80864a0:	4638      	mov	r0, r7
 80864a2:	f00b fab9 	bl	8091a18 <__aeabi_fcmpeq>
 80864a6:	b300      	cbz	r0, 80864ea <_Z19pubGridDerInstMtrcsv+0xbe>
    { gxGridMetricString.concat(","); }
 80864a8:	4649      	mov	r1, r9
 80864aa:	4668      	mov	r0, sp
 80864ac:	f009 fd09 	bl	808fec2 <_ZN6String6concatEPKc>
  for(uint8_t metrc_indx = TOTAL_GRID_KW; metrc_indx <= PERCENT_OF_GRID_POWER; metrc_indx++)
 80864b0:	3401      	adds	r4, #1
 80864b2:	b2e4      	uxtb	r4, r4
 80864b4:	2c0e      	cmp	r4, #14
 80864b6:	d1f0      	bne.n	808649a <_Z19pubGridDerInstMtrcsv+0x6e>
      if(!(metrc_indx == PERCENT_OF_GRID_POWER))
      { gxGridMetricString.concat(","); }
    }
  }

  gxGridMetricString.concat("\"}");
 80864b8:	4918      	ldr	r1, [pc, #96]	; (808651c <_Z19pubGridDerInstMtrcsv+0xf0>)
 80864ba:	4668      	mov	r0, sp
 80864bc:	f009 fd01 	bl	808fec2 <_ZN6String6concatEPKc>

  Log.info(gxGridMetricString); 
 80864c0:	9900      	ldr	r1, [sp, #0]
 80864c2:	4817      	ldr	r0, [pc, #92]	; (8086520 <_Z19pubGridDerInstMtrcsv+0xf4>)
 80864c4:	f7ff fa66 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
  saveAndPublishMetrics(gxGridMetricString);
 80864c8:	4668      	mov	r0, sp
 80864ca:	f003 fdad 	bl	808a028 <_Z21saveAndPublishMetricsR6String>

  for(uint8_t i = GRID_DONE; i < DERINST_GRID_DATA_SIZE; i++)
  { der_inst_grid_data[i] = 0.0f; }
 80864ce:	2300      	movs	r3, #0
 80864d0:	3c01      	subs	r4, #1
  for(uint8_t i = GRID_DONE; i < DERINST_GRID_DATA_SIZE; i++)
 80864d2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  { der_inst_grid_data[i] = 0.0f; }
 80864d6:	f845 3b04 	str.w	r3, [r5], #4
  for(uint8_t i = GRID_DONE; i < DERINST_GRID_DATA_SIZE; i++)
 80864da:	d1f9      	bne.n	80864d0 <_Z19pubGridDerInstMtrcsv+0xa4>
                              ",\"grid_DerInst\":\"" + String(Time.now()) + ",";
 80864dc:	4668      	mov	r0, sp
 80864de:	f009 fb91 	bl	808fc04 <_ZN6StringD1Ev>

  return GRID_BAS_INST;
}
 80864e2:	2001      	movs	r0, #1
 80864e4:	b011      	add	sp, #68	; 0x44
 80864e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      gxGridMetricString.concat(String(der_inst_grid_data[metrc_indx], 2));
 80864ea:	2202      	movs	r2, #2
 80864ec:	4639      	mov	r1, r7
 80864ee:	a80c      	add	r0, sp, #48	; 0x30
 80864f0:	f009 fc9f 	bl	808fe32 <_ZN6StringC1Efi>
 80864f4:	a90c      	add	r1, sp, #48	; 0x30
 80864f6:	4668      	mov	r0, sp
 80864f8:	f009 fcdf 	bl	808feba <_ZN6String6concatERKS_>
 80864fc:	a80c      	add	r0, sp, #48	; 0x30
 80864fe:	f009 fb81 	bl	808fc04 <_ZN6StringD1Ev>
      if(!(metrc_indx == PERCENT_OF_GRID_POWER))
 8086502:	2c0d      	cmp	r4, #13
 8086504:	d1d0      	bne.n	80864a8 <_Z19pubGridDerInstMtrcsv+0x7c>
 8086506:	e7d3      	b.n	80864b0 <_Z19pubGridDerInstMtrcsv+0x84>
 8086508:	0809380b 	.word	0x0809380b
 808650c:	20001244 	.word	0x20001244
 8086510:	0809382b 	.word	0x0809382b
 8086514:	08094597 	.word	0x08094597
 8086518:	2000069c 	.word	0x2000069c
 808651c:	080939b2 	.word	0x080939b2
 8086520:	200015a4 	.word	0x200015a4
 8086524:	ccbebc20 	.word	0xccbebc20

08086528 <_Z18publishGridMetricsv>:
{
 8086528:	b538      	push	{r3, r4, r5, lr}
      grid_metrc_grp = pubGridBasInstMtrcs();
 808652a:	f7ff ff01 	bl	8086330 <_Z19pubGridBasInstMtrcsv>
 808652e:	4604      	mov	r4, r0
 8086530:	f006 fd04 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
      pubgrid_metrics_interval = millis() + GEN_METRICS_PUBLISH_INTERVAL;
 8086534:	f200 454c 	addw	r5, r0, #1100	; 0x44c
 8086538:	e001      	b.n	808653e <_Z18publishGridMetricsv+0x16>
    if(grid_metrc_grp == GRID_BAS_INST)
 808653a:	2c01      	cmp	r4, #1
 808653c:	d0f5      	beq.n	808652a <_Z18publishGridMetricsv+0x2>
    if((grid_metrc_grp == GRID_DER_INST) && (millis() > pubgrid_metrics_interval))
 808653e:	2c02      	cmp	r4, #2
 8086540:	d1fb      	bne.n	808653a <_Z18publishGridMetricsv+0x12>
 8086542:	f006 fcfb 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
 8086546:	4285      	cmp	r5, r0
 8086548:	d2fb      	bcs.n	8086542 <_Z18publishGridMetricsv+0x1a>
}
 808654a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      grid_metrc_grp = pubGridDerInstMtrcs();
 808654e:	f7ff bf6d 	b.w	808642c <_Z19pubGridDerInstMtrcsv>
	...

08086554 <_Z17saveStateOfRelays17GenControlCommanda>:
  }
  return gridmetrics_active;
}

void saveStateOfRelays(GenControlCommand ctrlCommand, int8_t relay_name)
{
 8086554:	b538      	push	{r3, r4, r5, lr}
 8086556:	4605      	mov	r5, r0
 8086558:	460c      	mov	r4, r1
  uint8_t old_rly_states = RELAY_1_2_OFF;
  uint8_t new_rly_states = RELAY_1_2_OFF;

  // Check if the configurations in EEPROM are still valid
  if(validateConfigurations() == false){ return;}
 808655a:	f006 fc0d 	bl	808cd78 <_Z22validateConfigurationsv>
 808655e:	b1e8      	cbz	r0, 808659c <_Z17saveStateOfRelays17GenControlCommanda+0x48>

  old_rly_states = mainGXConfig.RELAYS_STATE;
 8086560:	4b0f      	ldr	r3, [pc, #60]	; (80865a0 <_Z17saveStateOfRelays17GenControlCommanda+0x4c>)
 8086562:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76

  switch (old_rly_states)
 8086566:	2a02      	cmp	r2, #2
 8086568:	d805      	bhi.n	8086576 <_Z17saveStateOfRelays17GenControlCommanda+0x22>
 808656a:	b16a      	cbz	r2, 8086588 <_Z17saveStateOfRelays17GenControlCommanda+0x34>

    /* old states: Relay-1 is ON, relay-2 is OFF. If the command is to Run gen(turn-on a relay), relay-2 would come ON.
       Hence both relays are ON. If the command is shutdown, relay-1 would go OFF, making both relays to be OFF */
    case RELAY_1_ON:
    {
      new_rly_states = (ctrlCommand == RUN_GEN) ? RELAY_1_2_ON : RELAY_1_2_OFF;
 808656c:	2d01      	cmp	r5, #1
 808656e:	bf0c      	ite	eq
 8086570:	2203      	moveq	r2, #3
 8086572:	2200      	movne	r2, #0
 8086574:	e002      	b.n	808657c <_Z17saveStateOfRelays17GenControlCommanda+0x28>
  switch (old_rly_states)
 8086576:	2a03      	cmp	r2, #3
 8086578:	d00b      	beq.n	8086592 <_Z17saveStateOfRelays17GenControlCommanda+0x3e>
 808657a:	2200      	movs	r2, #0
      new_rly_states = (relay_name == GX_RELAY_1) ? RELAY_2_ON : RELAY_1_ON;
      break;
    }
  }

  mainGXConfig.RELAYS_STATE = new_rly_states;
 808657c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
  storeConfigurations();
}
 8086580:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  storeConfigurations();
 8086584:	f006 bc24 	b.w	808cdd0 <_Z19storeConfigurationsv>
      new_rly_states = (relay_name == GX_RELAY_1) ? RELAY_2_ON : RELAY_1_ON;
 8086588:	2c01      	cmp	r4, #1
 808658a:	bf14      	ite	ne
 808658c:	2202      	movne	r2, #2
 808658e:	2201      	moveq	r2, #1
 8086590:	e7f4      	b.n	808657c <_Z17saveStateOfRelays17GenControlCommanda+0x28>
      new_rly_states = (relay_name == GX_RELAY_1) ? RELAY_1_ON : RELAY_2_ON;
 8086592:	2c01      	cmp	r4, #1
 8086594:	bf14      	ite	ne
 8086596:	2201      	movne	r2, #1
 8086598:	2202      	moveq	r2, #2
 808659a:	e7ef      	b.n	808657c <_Z17saveStateOfRelays17GenControlCommanda+0x28>
}
 808659c:	bd38      	pop	{r3, r4, r5, pc}
 808659e:	bf00      	nop
 80865a0:	20001268 	.word	0x20001268

080865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80865a4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80865a6:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80865a8:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80865aa:	b17c      	cbz	r4, 80865cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80865ac:	6863      	ldr	r3, [r4, #4]
 80865ae:	3b01      	subs	r3, #1
 80865b0:	6063      	str	r3, [r4, #4]
 80865b2:	b95b      	cbnz	r3, 80865cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80865b4:	6823      	ldr	r3, [r4, #0]
 80865b6:	4620      	mov	r0, r4
 80865b8:	689b      	ldr	r3, [r3, #8]
 80865ba:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80865bc:	68a3      	ldr	r3, [r4, #8]
 80865be:	3b01      	subs	r3, #1
 80865c0:	60a3      	str	r3, [r4, #8]
 80865c2:	b91b      	cbnz	r3, 80865cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80865c4:	6823      	ldr	r3, [r4, #0]
 80865c6:	4620      	mov	r0, r4
 80865c8:	68db      	ldr	r3, [r3, #12]
 80865ca:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80865cc:	4628      	mov	r0, r5
 80865ce:	bd38      	pop	{r3, r4, r5, pc}

080865d0 <_Z16runGridDataPollsv>:
{
 80865d0:	b570      	push	{r4, r5, r6, lr}
  if((gridmetrics_active > GRID_MTRCS_GEN) || (gxgen_config_state == false)) 
 80865d2:	4b4c      	ldr	r3, [pc, #304]	; (8086704 <_Z16runGridDataPollsv+0x134>)
{
 80865d4:	b092      	sub	sp, #72	; 0x48
  if((gridmetrics_active > GRID_MTRCS_GEN) || (gxgen_config_state == false)) 
 80865d6:	781b      	ldrb	r3, [r3, #0]
 80865d8:	2b01      	cmp	r3, #1
 80865da:	d835      	bhi.n	8086648 <_Z16runGridDataPollsv+0x78>
 80865dc:	4b4a      	ldr	r3, [pc, #296]	; (8086708 <_Z16runGridDataPollsv+0x138>)
 80865de:	781b      	ldrb	r3, [r3, #0]
 80865e0:	2b00      	cmp	r3, #0
 80865e2:	d031      	beq.n	8086648 <_Z16runGridDataPollsv+0x78>
  commLed.led_mode = LED_SOLID;
 80865e4:	2401      	movs	r4, #1
 80865e6:	4d49      	ldr	r5, [pc, #292]	; (808670c <_Z16runGridDataPollsv+0x13c>)
        total_query = gxGen[gen_unit].getGridDerInstQueryNum();
 80865e8:	4e49      	ldr	r6, [pc, #292]	; (8086710 <_Z16runGridDataPollsv+0x140>)
  commLed.ledRoutine();
 80865ea:	4628      	mov	r0, r5
  commLed.led_mode = LED_SOLID;
 80865ec:	722c      	strb	r4, [r5, #8]
  commLed.ledRoutine();
 80865ee:	f002 fd0d 	bl	808900c <_ZN3LED10ledRoutineEv>
  uint8_t baud_code = gxGen[gen_unit].getBaudIndex();
 80865f2:	4847      	ldr	r0, [pc, #284]	; (8086710 <_Z16runGridDataPollsv+0x140>)
 80865f4:	f002 fc66 	bl	8088ec4 <_ZN11GXGenerator12getBaudIndexEv>
  uint32_t gen_baud_rate = GEN_BAUD_RATE[baud_code];
 80865f8:	4b46      	ldr	r3, [pc, #280]	; (8086714 <_Z16runGridDataPollsv+0x144>)
  gxGen[gen_unit].begin(gen_baud_rate);
 80865fa:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 80865fe:	4844      	ldr	r0, [pc, #272]	; (8086710 <_Z16runGridDataPollsv+0x140>)
 8086600:	f005 fb94 	bl	808bd2c <_ZN6Modbus5beginEl>
  gxGen[gen_unit].setTimeOut(MODBUS_ROLL_OVER_TIME);
 8086604:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8086608:	4841      	ldr	r0, [pc, #260]	; (8086710 <_Z16runGridDataPollsv+0x140>)
 808660a:	f005 fa35 	bl	808ba78 <_ZN6Modbus10setTimeOutEt>
  delay(25);
 808660e:	2019      	movs	r0, #25
 8086610:	f007 f823 	bl	808d65a <delay>
    switch (grid_metrc_grp)
 8086614:	2c03      	cmp	r4, #3
 8086616:	d8fd      	bhi.n	8086614 <_Z16runGridDataPollsv+0x44>
 8086618:	e8df f004 	tbb	[pc, r4]
 808661c:	2a221802 	.word	0x2a221802
        commLed.led_mode = LED_OFF;
 8086620:	2300      	movs	r3, #0
        commLed.ledRoutine();
 8086622:	483a      	ldr	r0, [pc, #232]	; (808670c <_Z16runGridDataPollsv+0x13c>)
        commLed.led_mode = LED_OFF;
 8086624:	722b      	strb	r3, [r5, #8]
        commLed.ledRoutine();
 8086626:	f002 fcf1 	bl	808900c <_ZN3LED10ledRoutineEv>
        publishGridMetrics();
 808662a:	f7ff ff7d 	bl	8086528 <_Z18publishGridMetricsv>
  memset(extracted_modbus_databuff, 0, sizeof(extracted_modbus_databuff));
 808662e:	2264      	movs	r2, #100	; 0x64
 8086630:	2100      	movs	r1, #0
 8086632:	4839      	ldr	r0, [pc, #228]	; (8086718 <_Z16runGridDataPollsv+0x148>)
 8086634:	f00b fc46 	bl	8091ec4 <memset>
  memset(gen_alrm_regval, 0, sizeof(gen_alrm_regval));
 8086638:	2230      	movs	r2, #48	; 0x30
 808663a:	2100      	movs	r1, #0
 808663c:	4837      	ldr	r0, [pc, #220]	; (808671c <_Z16runGridDataPollsv+0x14c>)
 808663e:	f00b fc41 	bl	8091ec4 <memset>
  poll_griddata_flag = false;
 8086642:	2200      	movs	r2, #0
 8086644:	4b36      	ldr	r3, [pc, #216]	; (8086720 <_Z16runGridDataPollsv+0x150>)
 8086646:	701a      	strb	r2, [r3, #0]
}
 8086648:	b012      	add	sp, #72	; 0x48
 808664a:	bd70      	pop	{r4, r5, r6, pc}
        total_query = gxGen[gen_unit].getGridBasInstQueryNum();
 808664c:	4630      	mov	r0, r6
 808664e:	f002 f99d 	bl	808898c <_ZN11GXGenerator22getGridBasInstQueryNumEv>
        grid_metrc_grp = readGridBasInstMetrcFromGen(total_query);
 8086652:	f7ff fb3b 	bl	8085ccc <_Z27readGridBasInstMetrcFromGenh>
 8086656:	4604      	mov	r4, r0
        formatGridDataFromGen(GRID_BAS_INST);
 8086658:	2001      	movs	r0, #1
        formatGridDataFromGen(GRID_DER_INST);
 808665a:	f7ff fc29 	bl	8085eb0 <_Z21formatGridDataFromGen11GridDataSet>
        break;
 808665e:	e7d9      	b.n	8086614 <_Z16runGridDataPollsv+0x44>
        total_query = gxGen[gen_unit].getGridDerInstQueryNum();
 8086660:	4630      	mov	r0, r6
 8086662:	f002 f99a 	bl	808899a <_ZN11GXGenerator22getGridDerInstQueryNumEv>
        grid_metrc_grp = readGridDerInstMetrcFromGen(total_query);
 8086666:	f7ff fb69 	bl	8085d3c <_Z27readGridDerInstMetrcFromGenh>
 808666a:	4604      	mov	r4, r0
        formatGridDataFromGen(GRID_DER_INST);
 808666c:	2002      	movs	r0, #2
 808666e:	e7f4      	b.n	808665a <_Z16runGridDataPollsv+0x8a>
        commLed.led_mode = LED_BLINK_ERROR;
 8086670:	2303      	movs	r3, #3
        commLed.ledRoutine();
 8086672:	4826      	ldr	r0, [pc, #152]	; (808670c <_Z16runGridDataPollsv+0x13c>)
        commLed.led_mode = LED_BLINK_ERROR;
 8086674:	722b      	strb	r3, [r5, #8]
        commLed.ledRoutine();
 8086676:	f002 fcc9 	bl	808900c <_ZN3LED10ledRoutineEv>
	StringSumHelper(const char *p) : String(p) {}
 808667a:	492a      	ldr	r1, [pc, #168]	; (8086724 <_Z16runGridDataPollsv+0x154>)
 808667c:	a806      	add	r0, sp, #24
 808667e:	f009 fb0b 	bl	808fc98 <_ZN6StringC1EPKc>
        String gxGenErrorString = "{\n\"e\":\"gx_error\",\n\"s\":\"grid\",\n\"c\":\"" + String(gen_unit + ZERO_INDEX_CORRECTION) +
 8086682:	220a      	movs	r2, #10
 8086684:	2101      	movs	r1, #1
 8086686:	a80a      	add	r0, sp, #40	; 0x28
 8086688:	f009 fb86 	bl	808fd98 <_ZN6StringC1Eih>
 808668c:	a90a      	add	r1, sp, #40	; 0x28
 808668e:	a806      	add	r0, sp, #24
 8086690:	f009 fc33 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
                                  "\",\n\"ts\":\"" + String(Time.now()) + "\"\n}";
 8086694:	4924      	ldr	r1, [pc, #144]	; (8086728 <_Z16runGridDataPollsv+0x158>)
 8086696:	f009 fc3c 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 808669a:	4604      	mov	r4, r0
 808669c:	f009 fda4 	bl	80901e8 <_ZN9TimeClass3nowEv>
 80866a0:	220a      	movs	r2, #10
 80866a2:	4601      	mov	r1, r0
 80866a4:	a80e      	add	r0, sp, #56	; 0x38
 80866a6:	f009 fb9d 	bl	808fde4 <_ZN6StringC1Elh>
 80866aa:	a90e      	add	r1, sp, #56	; 0x38
 80866ac:	4620      	mov	r0, r4
 80866ae:	f009 fc24 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 80866b2:	491e      	ldr	r1, [pc, #120]	; (808672c <_Z16runGridDataPollsv+0x15c>)
 80866b4:	f009 fc2d 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 80866b8:	4601      	mov	r1, r0
 80866ba:	a802      	add	r0, sp, #8
 80866bc:	f009 fb36 	bl	808fd2c <_ZN6StringC1ERKS_>
 80866c0:	a80e      	add	r0, sp, #56	; 0x38
 80866c2:	f009 fa9f 	bl	808fc04 <_ZN6StringD1Ev>
        String gxGenErrorString = "{\n\"e\":\"gx_error\",\n\"s\":\"grid\",\n\"c\":\"" + String(gen_unit + ZERO_INDEX_CORRECTION) +
 80866c6:	a80a      	add	r0, sp, #40	; 0x28
 80866c8:	f009 fa9c 	bl	808fc04 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80866cc:	a806      	add	r0, sp, #24
 80866ce:	f009 fa99 	bl	808fc04 <_ZN6StringD1Ev>
        Log.info(gxGenErrorString);
 80866d2:	9902      	ldr	r1, [sp, #8]
 80866d4:	4816      	ldr	r0, [pc, #88]	; (8086730 <_Z16runGridDataPollsv+0x160>)
 80866d6:	f7ff f95d 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
 80866da:	4b16      	ldr	r3, [pc, #88]	; (8086734 <_Z16runGridDataPollsv+0x164>)
 80866dc:	4a16      	ldr	r2, [pc, #88]	; (8086738 <_Z16runGridDataPollsv+0x168>)
 80866de:	781b      	ldrb	r3, [r3, #0]
 80866e0:	7812      	ldrb	r2, [r2, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80866e2:	4916      	ldr	r1, [pc, #88]	; (808673c <_Z16runGridDataPollsv+0x16c>)
 80866e4:	4313      	orrs	r3, r2
 80866e6:	f88d 3000 	strb.w	r3, [sp]
 80866ea:	9a02      	ldr	r2, [sp, #8]
 80866ec:	233c      	movs	r3, #60	; 0x3c
 80866ee:	a80e      	add	r0, sp, #56	; 0x38
 80866f0:	f007 f99a 	bl	808da28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80866f4:	a80f      	add	r0, sp, #60	; 0x3c
 80866f6:	f7ff ff55 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                                  "\",\n\"ts\":\"" + String(Time.now()) + "\"\n}";
 80866fa:	a802      	add	r0, sp, #8
 80866fc:	f009 fa82 	bl	808fc04 <_ZN6StringD1Ev>
  while (continue_grid_metrc_poll == true)
 8086700:	e795      	b.n	808662e <_Z16runGridDataPollsv+0x5e>
 8086702:	bf00      	nop
 8086704:	20001244 	.word	0x20001244
 8086708:	2000124e 	.word	0x2000124e
 808670c:	20001188 	.word	0x20001188
 8086710:	20000768 	.word	0x20000768
 8086714:	20000000 	.word	0x20000000
 8086718:	200006d4 	.word	0x200006d4
 808671c:	20000738 	.word	0x20000738
 8086720:	200012f5 	.word	0x200012f5
 8086724:	0809383d 	.word	0x0809383d
 8086728:	08093861 	.word	0x08093861
 808672c:	080938c3 	.word	0x080938c3
 8086730:	200015a4 	.word	0x200015a4
 8086734:	200005c5 	.word	0x200005c5
 8086738:	200005c6 	.word	0x200005c6
 808673c:	0809386b 	.word	0x0809386b

08086740 <_Z17collectGenMetricsh>:
{
 8086740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        query_count = gxGen[gen_unit].getMainQueryNum();
 8086744:	26e8      	movs	r6, #232	; 0xe8
{
 8086746:	4604      	mov	r4, r0
        formatGenData(gen_unit, GEN_MAIN);
 8086748:	f04f 0b00 	mov.w	fp, #0
        query_count = gxGen[gen_unit].getMainQueryNum();
 808674c:	4b57      	ldr	r3, [pc, #348]	; (80868ac <_Z17collectGenMetricsh+0x16c>)
        commLed.led_mode = LED_BLINK_ERROR;
 808674e:	f8df 817c 	ldr.w	r8, [pc, #380]	; 80868cc <_Z17collectGenMetricsh+0x18c>
        query_count = gxGen[gen_unit].getMainQueryNum();
 8086752:	fb06 3600 	mla	r6, r6, r0, r3
{
 8086756:	b093      	sub	sp, #76	; 0x4c
        query_count = gxGen[gen_unit].getMainQueryNum();
 8086758:	4630      	mov	r0, r6
 808675a:	f002 f8eb 	bl	8088934 <_ZN11GXGenerator15getMainQueryNumEv>
 808675e:	4601      	mov	r1, r0
        gen_metric_group = readGenMainMetrics(gen_unit, query_count);
 8086760:	4620      	mov	r0, r4
 8086762:	f7ff f993 	bl	8085a8c <_Z18readGenMainMetricshh>
        formatGenData(gen_unit, GEN_MAIN);
 8086766:	2100      	movs	r1, #0
        gen_metric_group = readGenMainMetrics(gen_unit, query_count);
 8086768:	4605      	mov	r5, r0
        formatGenData(gen_unit, GEN_MAIN);
 808676a:	4620      	mov	r0, r4
 808676c:	f7ff fb6e 	bl	8085e4c <_Z13formatGenDatah16GeneratorDataSet>
        break;
 8086770:	2701      	movs	r7, #1
    memset(extracted_modbus_databuff, 0, sizeof(extracted_modbus_databuff));
 8086772:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80868d0 <_Z17collectGenMetricsh+0x190>
    memset(gen_alrm_regval, 0, sizeof(gen_alrm_regval));
 8086776:	f8df 915c 	ldr.w	r9, [pc, #348]	; 80868d4 <_Z17collectGenMetricsh+0x194>
    memset(extracted_modbus_databuff, 0, sizeof(extracted_modbus_databuff));
 808677a:	2264      	movs	r2, #100	; 0x64
 808677c:	2100      	movs	r1, #0
 808677e:	4650      	mov	r0, sl
 8086780:	f00b fba0 	bl	8091ec4 <memset>
    memset(gen_alrm_regval, 0, sizeof(gen_alrm_regval));
 8086784:	2230      	movs	r2, #48	; 0x30
 8086786:	2100      	movs	r1, #0
 8086788:	4648      	mov	r0, r9
 808678a:	f00b fb9b 	bl	8091ec4 <memset>
  while (check_gen_metric == true)
 808678e:	b927      	cbnz	r7, 808679a <_Z17collectGenMetricsh+0x5a>
  return (static_cast<GeneratorSlot>(gen_unit + ZERO_INDEX_CORRECTION));
 8086790:	1c60      	adds	r0, r4, #1
}
 8086792:	b2c0      	uxtb	r0, r0
 8086794:	b013      	add	sp, #76	; 0x4c
 8086796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (gen_metric_group)
 808679a:	2d05      	cmp	r5, #5
 808679c:	d8ed      	bhi.n	808677a <_Z17collectGenMetricsh+0x3a>
 808679e:	a301      	add	r3, pc, #4	; (adr r3, 80867a4 <_Z17collectGenMetricsh+0x64>)
 80867a0:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 80867a4:	08086759 	.word	0x08086759
 80867a8:	080867bd 	.word	0x080867bd
 80867ac:	080867e9 	.word	0x080867e9
 80867b0:	0808677b 	.word	0x0808677b
 80867b4:	08086805 	.word	0x08086805
 80867b8:	08086819 	.word	0x08086819
        query_count = gxGen[gen_unit].getBasInstQueryNum();
 80867bc:	4630      	mov	r0, r6
 80867be:	f002 f8cb 	bl	8088958 <_ZN11GXGenerator18getBasInstQueryNumEv>
 80867c2:	4601      	mov	r1, r0
        gen_metric_group = readGenBasInstMetrics(gen_unit, query_count);
 80867c4:	4620      	mov	r0, r4
 80867c6:	f7ff f9c1 	bl	8085b4c <_Z21readGenBasInstMetricshh>
        formatGenData(gen_unit, GEN_BASINST);
 80867ca:	2101      	movs	r1, #1
        gen_metric_group = readGenBasInstMetrics(gen_unit, query_count);
 80867cc:	4605      	mov	r5, r0
        formatGenData(gen_unit, GEN_BASINST);
 80867ce:	4620      	mov	r0, r4
 80867d0:	f7ff fb3c 	bl	8085e4c <_Z13formatGenDatah16GeneratorDataSet>
        if (gxGen[gen_unit].derInstAvailable() == false)
 80867d4:	4630      	mov	r0, r6
 80867d6:	f002 fb6b 	bl	8088eb0 <_ZN11GXGenerator16derInstAvailableEv>
 80867da:	2800      	cmp	r0, #0
 80867dc:	4603      	mov	r3, r0
 80867de:	bf04      	itt	eq
 80867e0:	2504      	moveq	r5, #4
 80867e2:	463b      	moveq	r3, r7
            gen_metric_group = GEN_READY;
 80867e4:	461f      	mov	r7, r3
 80867e6:	e7c8      	b.n	808677a <_Z17collectGenMetricsh+0x3a>
        query_count = gxGen[gen_unit].getDerInstQueryNum();
 80867e8:	4630      	mov	r0, r6
 80867ea:	f002 f8c5 	bl	8088978 <_ZN11GXGenerator18getDerInstQueryNumEv>
 80867ee:	4601      	mov	r1, r0
        gen_metric_group = readGenDerInstMetrics(gen_unit, query_count);
 80867f0:	4620      	mov	r0, r4
 80867f2:	f7ff fa0b 	bl	8085c0c <_Z21readGenDerInstMetricshh>
        formatGenData(gen_unit, GEN_DERINST);
 80867f6:	2102      	movs	r1, #2
        gen_metric_group = readGenDerInstMetrics(gen_unit, query_count);
 80867f8:	4605      	mov	r5, r0
        formatGenData(gen_unit, GEN_DERINST);
 80867fa:	4620      	mov	r0, r4
 80867fc:	f7ff fb26 	bl	8085e4c <_Z13formatGenDatah16GeneratorDataSet>
        break;
 8086800:	463b      	mov	r3, r7
 8086802:	e7ef      	b.n	80867e4 <_Z17collectGenMetricsh+0xa4>
        commLed.ledRoutine();
 8086804:	4640      	mov	r0, r8
        commLed.led_mode = LED_OFF;
 8086806:	f888 b008 	strb.w	fp, [r8, #8]
        commLed.ledRoutine();
 808680a:	f002 fbff 	bl	808900c <_ZN3LED10ledRoutineEv>
        publishGenMetrics(gen_unit);
 808680e:	4620      	mov	r0, r4
 8086810:	f7ff fd5c 	bl	80862cc <_Z17publishGenMetricsh>
        check_gen_metric = false;
 8086814:	2300      	movs	r3, #0
 8086816:	e7e5      	b.n	80867e4 <_Z17collectGenMetricsh+0xa4>
        commLed.led_mode = LED_BLINK_ERROR;
 8086818:	2303      	movs	r3, #3
        commLed.ledRoutine();
 808681a:	4640      	mov	r0, r8
        commLed.led_mode = LED_BLINK_ERROR;
 808681c:	f888 3008 	strb.w	r3, [r8, #8]
        commLed.ledRoutine();
 8086820:	f002 fbf4 	bl	808900c <_ZN3LED10ledRoutineEv>
	StringSumHelper(const char *p) : String(p) {}
 8086824:	4922      	ldr	r1, [pc, #136]	; (80868b0 <_Z17collectGenMetricsh+0x170>)
 8086826:	a80a      	add	r0, sp, #40	; 0x28
 8086828:	f009 fa36 	bl	808fc98 <_ZN6StringC1EPKc>
        String gxGenErrorString = "{\n\"e\":\"gx_error\",\n\"s\":\"gen\",\n\"c\":\"" + String(gen_unit + ZERO_INDEX_CORRECTION) +
 808682c:	220a      	movs	r2, #10
 808682e:	1c61      	adds	r1, r4, #1
 8086830:	a806      	add	r0, sp, #24
 8086832:	f009 fab1 	bl	808fd98 <_ZN6StringC1Eih>
 8086836:	a906      	add	r1, sp, #24
 8086838:	a80a      	add	r0, sp, #40	; 0x28
 808683a:	f009 fb5e 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
                                  "\",\n\"ts\":\"" + String(Time.now()) + "\"\n}";
 808683e:	491d      	ldr	r1, [pc, #116]	; (80868b4 <_Z17collectGenMetricsh+0x174>)
 8086840:	f009 fb67 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 8086844:	4607      	mov	r7, r0
 8086846:	f009 fccf 	bl	80901e8 <_ZN9TimeClass3nowEv>
 808684a:	220a      	movs	r2, #10
 808684c:	4601      	mov	r1, r0
 808684e:	a80e      	add	r0, sp, #56	; 0x38
 8086850:	f009 fac8 	bl	808fde4 <_ZN6StringC1Elh>
 8086854:	a90e      	add	r1, sp, #56	; 0x38
 8086856:	4638      	mov	r0, r7
 8086858:	f009 fb4f 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 808685c:	4916      	ldr	r1, [pc, #88]	; (80868b8 <_Z17collectGenMetricsh+0x178>)
 808685e:	f009 fb58 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 8086862:	4601      	mov	r1, r0
 8086864:	a802      	add	r0, sp, #8
 8086866:	f009 fa61 	bl	808fd2c <_ZN6StringC1ERKS_>
 808686a:	a80e      	add	r0, sp, #56	; 0x38
 808686c:	f009 f9ca 	bl	808fc04 <_ZN6StringD1Ev>
        String gxGenErrorString = "{\n\"e\":\"gx_error\",\n\"s\":\"gen\",\n\"c\":\"" + String(gen_unit + ZERO_INDEX_CORRECTION) +
 8086870:	a806      	add	r0, sp, #24
 8086872:	f009 f9c7 	bl	808fc04 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8086876:	a80a      	add	r0, sp, #40	; 0x28
 8086878:	f009 f9c4 	bl	808fc04 <_ZN6StringD1Ev>
        Log.info(gxGenErrorString);
 808687c:	9902      	ldr	r1, [sp, #8]
 808687e:	480f      	ldr	r0, [pc, #60]	; (80868bc <_Z17collectGenMetricsh+0x17c>)
 8086880:	f7ff f888 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
 8086884:	4b0e      	ldr	r3, [pc, #56]	; (80868c0 <_Z17collectGenMetricsh+0x180>)
 8086886:	4a0f      	ldr	r2, [pc, #60]	; (80868c4 <_Z17collectGenMetricsh+0x184>)
 8086888:	781b      	ldrb	r3, [r3, #0]
 808688a:	7812      	ldrb	r2, [r2, #0]
 808688c:	490e      	ldr	r1, [pc, #56]	; (80868c8 <_Z17collectGenMetricsh+0x188>)
 808688e:	4313      	orrs	r3, r2
 8086890:	f88d 3000 	strb.w	r3, [sp]
 8086894:	9a02      	ldr	r2, [sp, #8]
 8086896:	233c      	movs	r3, #60	; 0x3c
 8086898:	a80e      	add	r0, sp, #56	; 0x38
 808689a:	f007 f8c5 	bl	808da28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 808689e:	a80f      	add	r0, sp, #60	; 0x3c
 80868a0:	f7ff fe80 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                                  "\",\n\"ts\":\"" + String(Time.now()) + "\"\n}";
 80868a4:	a802      	add	r0, sp, #8
 80868a6:	f009 f9ad 	bl	808fc04 <_ZN6StringD1Ev>
 80868aa:	e7b3      	b.n	8086814 <_Z17collectGenMetricsh+0xd4>
 80868ac:	20000768 	.word	0x20000768
 80868b0:	08093874 	.word	0x08093874
 80868b4:	08093861 	.word	0x08093861
 80868b8:	080938c3 	.word	0x080938c3
 80868bc:	200015a4 	.word	0x200015a4
 80868c0:	200005c5 	.word	0x200005c5
 80868c4:	200005c6 	.word	0x200005c6
 80868c8:	08093897 	.word	0x08093897
 80868cc:	20001188 	.word	0x20001188
 80868d0:	200006d4 	.word	0x200006d4
 80868d4:	20000738 	.word	0x20000738

080868d8 <_Z15runGenDataPollsv>:
  commLed.led_mode = LED_SOLID;
 80868d8:	2301      	movs	r3, #1
 80868da:	481b      	ldr	r0, [pc, #108]	; (8086948 <_Z15runGenDataPollsv+0x70>)
{
 80868dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  commLed.led_mode = LED_SOLID;
 80868e0:	7203      	strb	r3, [r0, #8]
  commLed.ledRoutine();
 80868e2:	2600      	movs	r6, #0
 80868e4:	f002 fb92 	bl	808900c <_ZN3LED10ledRoutineEv>
  for (uint8_t i = NO_GEN_SPECIFIED; i < num_of_gensets; i++)
 80868e8:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8086958 <_Z15runGenDataPollsv+0x80>
    uint8_t baud_code = gxGen[i].getBaudIndex();
 80868ec:	f8df 906c 	ldr.w	r9, [pc, #108]	; 808695c <_Z15runGenDataPollsv+0x84>
    uint32_t gen_baud_rate = GEN_BAUD_RATE[baud_code];
 80868f0:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8086960 <_Z15runGenDataPollsv+0x88>
  for (uint8_t i = NO_GEN_SPECIFIED; i < num_of_gensets; i++)
 80868f4:	f89a 3000 	ldrb.w	r3, [sl]
 80868f8:	b2f5      	uxtb	r5, r6
 80868fa:	42ab      	cmp	r3, r5
 80868fc:	d91e      	bls.n	808693c <_Z15runGenDataPollsv+0x64>
    uint8_t baud_code = gxGen[i].getBaudIndex();
 80868fe:	24e8      	movs	r4, #232	; 0xe8
 8086900:	fb04 9405 	mla	r4, r4, r5, r9
 8086904:	4620      	mov	r0, r4
 8086906:	f002 fadd 	bl	8088ec4 <_ZN11GXGenerator12getBaudIndexEv>
    uint32_t gen_baud_rate = GEN_BAUD_RATE[baud_code];
 808690a:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
    gxGen[i].begin(gen_baud_rate);
 808690e:	4620      	mov	r0, r4
 8086910:	4639      	mov	r1, r7
 8086912:	f005 fa0b 	bl	808bd2c <_ZN6Modbus5beginEl>
    gxGen[i].setTimeOut(MODBUS_ROLL_OVER_TIME);
 8086916:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 808691a:	4620      	mov	r0, r4
 808691c:	f005 f8ac 	bl	808ba78 <_ZN6Modbus10setTimeOutEt>
    Log.info("\nGEN%d BAUDRATE:%d", i+ZERO_INDEX_CORRECTION, gen_baud_rate);
 8086920:	463b      	mov	r3, r7
 8086922:	490a      	ldr	r1, [pc, #40]	; (808694c <_Z15runGenDataPollsv+0x74>)
 8086924:	1c6a      	adds	r2, r5, #1
 8086926:	480a      	ldr	r0, [pc, #40]	; (8086950 <_Z15runGenDataPollsv+0x78>)
 8086928:	f7ff f834 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
    delay(25);
 808692c:	2019      	movs	r0, #25
 808692e:	f006 fe94 	bl	808d65a <delay>
    collectGenMetrics(i);
 8086932:	4628      	mov	r0, r5
 8086934:	f7ff ff04 	bl	8086740 <_Z17collectGenMetricsh>
  for (uint8_t i = NO_GEN_SPECIFIED; i < num_of_gensets; i++)
 8086938:	3601      	adds	r6, #1
 808693a:	e7db      	b.n	80868f4 <_Z15runGenDataPollsv+0x1c>
  poll_gendata_flag = false; 
 808693c:	2200      	movs	r2, #0
 808693e:	4b05      	ldr	r3, [pc, #20]	; (8086954 <_Z15runGenDataPollsv+0x7c>)
 8086940:	701a      	strb	r2, [r3, #0]
}
 8086942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8086946:	bf00      	nop
 8086948:	20001188 	.word	0x20001188
 808694c:	080938a0 	.word	0x080938a0
 8086950:	200015a4 	.word	0x200015a4
 8086954:	200012f4 	.word	0x200012f4
 8086958:	20000da8 	.word	0x20000da8
 808695c:	20000768 	.word	0x20000768
 8086960:	20000000 	.word	0x20000000

08086964 <_Z15publishEngStateh>:
{
 8086964:	b530      	push	{r4, r5, lr}
 8086966:	4604      	mov	r4, r0
 8086968:	b093      	sub	sp, #76	; 0x4c
	StringSumHelper(const char *p) : String(p) {}
 808696a:	4930      	ldr	r1, [pc, #192]	; (8086a2c <_Z15publishEngStateh+0xc8>)
 808696c:	a80a      	add	r0, sp, #40	; 0x28
 808696e:	f009 f993 	bl	808fc98 <_ZN6StringC1EPKc>
  String gxGenEngStateString = "{\n\"v\":\"1\",\n\"gen" + String(gen_unit + ZERO_INDEX_CORRECTION) + 
 8086972:	220a      	movs	r2, #10
 8086974:	1c61      	adds	r1, r4, #1
 8086976:	a806      	add	r0, sp, #24
 8086978:	f009 fa0e 	bl	808fd98 <_ZN6StringC1Eih>
 808697c:	a906      	add	r1, sp, #24
 808697e:	a80a      	add	r0, sp, #40	; 0x28
 8086980:	f009 fabb 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
                             "_engState\":\n\"" + String(Time.now()) + ":";
 8086984:	492a      	ldr	r1, [pc, #168]	; (8086a30 <_Z15publishEngStateh+0xcc>)
 8086986:	f009 fac4 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 808698a:	4605      	mov	r5, r0
 808698c:	f009 fc2c 	bl	80901e8 <_ZN9TimeClass3nowEv>
 8086990:	220a      	movs	r2, #10
 8086992:	4601      	mov	r1, r0
 8086994:	a80e      	add	r0, sp, #56	; 0x38
 8086996:	f009 fa25 	bl	808fde4 <_ZN6StringC1Elh>
 808699a:	a90e      	add	r1, sp, #56	; 0x38
 808699c:	4628      	mov	r0, r5
 808699e:	f009 faac 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 80869a2:	4924      	ldr	r1, [pc, #144]	; (8086a34 <_Z15publishEngStateh+0xd0>)
 80869a4:	f009 fab5 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 80869a8:	4601      	mov	r1, r0
 80869aa:	a802      	add	r0, sp, #8
 80869ac:	f009 f9be 	bl	808fd2c <_ZN6StringC1ERKS_>
 80869b0:	a80e      	add	r0, sp, #56	; 0x38
 80869b2:	f009 f927 	bl	808fc04 <_ZN6StringD1Ev>
  String gxGenEngStateString = "{\n\"v\":\"1\",\n\"gen" + String(gen_unit + ZERO_INDEX_CORRECTION) + 
 80869b6:	a806      	add	r0, sp, #24
 80869b8:	f009 f924 	bl	808fc04 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80869bc:	a80a      	add	r0, sp, #40	; 0x28
 80869be:	f009 f921 	bl	808fc04 <_ZN6StringD1Ev>
  String val = "NA\"\n}";
 80869c2:	491d      	ldr	r1, [pc, #116]	; (8086a38 <_Z15publishEngStateh+0xd4>)
 80869c4:	a80e      	add	r0, sp, #56	; 0x38
 80869c6:	f009 f967 	bl	808fc98 <_ZN6StringC1EPKc>
  if (gxGen[gen_unit].getEngineStatus() == ENGINE_RUNNING) {val = "ON\"\n}";}
 80869ca:	23e8      	movs	r3, #232	; 0xe8
 80869cc:	481b      	ldr	r0, [pc, #108]	; (8086a3c <_Z15publishEngStateh+0xd8>)
 80869ce:	fb03 0404 	mla	r4, r3, r4, r0
 80869d2:	4620      	mov	r0, r4
 80869d4:	f002 fa79 	bl	8088eca <_ZN11GXGenerator15getEngineStatusEv>
 80869d8:	2803      	cmp	r0, #3
 80869da:	d11f      	bne.n	8086a1c <_Z15publishEngStateh+0xb8>
 80869dc:	4918      	ldr	r1, [pc, #96]	; (8086a40 <_Z15publishEngStateh+0xdc>)
  else if(gxGen[gen_unit].getEngineStatus() == ENGINE_AT_REST) {val = "OFF\"\n}";}
 80869de:	a80e      	add	r0, sp, #56	; 0x38
 80869e0:	f009 f9b7 	bl	808fd52 <_ZN6StringaSEPKc>
  gxGenEngStateString.concat(val); 
 80869e4:	a90e      	add	r1, sp, #56	; 0x38
 80869e6:	a802      	add	r0, sp, #8
 80869e8:	f009 fa67 	bl	808feba <_ZN6String6concatERKS_>
 80869ec:	4b15      	ldr	r3, [pc, #84]	; (8086a44 <_Z15publishEngStateh+0xe0>)
 80869ee:	4a16      	ldr	r2, [pc, #88]	; (8086a48 <_Z15publishEngStateh+0xe4>)
 80869f0:	781b      	ldrb	r3, [r3, #0]
 80869f2:	7812      	ldrb	r2, [r2, #0]
 80869f4:	4915      	ldr	r1, [pc, #84]	; (8086a4c <_Z15publishEngStateh+0xe8>)
 80869f6:	4313      	orrs	r3, r2
 80869f8:	f88d 3000 	strb.w	r3, [sp]
 80869fc:	9a02      	ldr	r2, [sp, #8]
 80869fe:	233c      	movs	r3, #60	; 0x3c
 8086a00:	a80a      	add	r0, sp, #40	; 0x28
 8086a02:	f007 f811 	bl	808da28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8086a06:	a80b      	add	r0, sp, #44	; 0x2c
 8086a08:	f7ff fdcc 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String val = "NA\"\n}";
 8086a0c:	a80e      	add	r0, sp, #56	; 0x38
 8086a0e:	f009 f8f9 	bl	808fc04 <_ZN6StringD1Ev>
                             "_engState\":\n\"" + String(Time.now()) + ":";
 8086a12:	a802      	add	r0, sp, #8
 8086a14:	f009 f8f6 	bl	808fc04 <_ZN6StringD1Ev>
}
 8086a18:	b013      	add	sp, #76	; 0x4c
 8086a1a:	bd30      	pop	{r4, r5, pc}
  else if(gxGen[gen_unit].getEngineStatus() == ENGINE_AT_REST) {val = "OFF\"\n}";}
 8086a1c:	4620      	mov	r0, r4
 8086a1e:	f002 fa54 	bl	8088eca <_ZN11GXGenerator15getEngineStatusEv>
 8086a22:	2800      	cmp	r0, #0
 8086a24:	d1de      	bne.n	80869e4 <_Z15publishEngStateh+0x80>
 8086a26:	490a      	ldr	r1, [pc, #40]	; (8086a50 <_Z15publishEngStateh+0xec>)
 8086a28:	e7d9      	b.n	80869de <_Z15publishEngStateh+0x7a>
 8086a2a:	bf00      	nop
 8086a2c:	080937df 	.word	0x080937df
 8086a30:	080938b3 	.word	0x080938b3
 8086a34:	08093bfa 	.word	0x08093bfa
 8086a38:	080938c1 	.word	0x080938c1
 8086a3c:	20000768 	.word	0x20000768
 8086a40:	080938c7 	.word	0x080938c7
 8086a44:	200005c5 	.word	0x200005c5
 8086a48:	200005c6 	.word	0x200005c6
 8086a4c:	080938d4 	.word	0x080938d4
 8086a50:	080938cd 	.word	0x080938cd

08086a54 <_Z10genControl6String>:

int genControl(String ctrlParameter)
{
 8086a54:	b530      	push	{r4, r5, lr}
 8086a56:	b089      	sub	sp, #36	; 0x24
  // Get the desired Generator unit from the received string.
  uint8_t gen_unit = atoi(getStringValueAtIndex(ctrlParameter, COMMA_CHAR, 0));
 8086a58:	4601      	mov	r1, r0
{
 8086a5a:	4605      	mov	r5, r0
  uint8_t gen_unit = atoi(getStringValueAtIndex(ctrlParameter, COMMA_CHAR, 0));
 8086a5c:	4668      	mov	r0, sp
 8086a5e:	f009 f965 	bl	808fd2c <_ZN6StringC1ERKS_>
 8086a62:	2300      	movs	r3, #0
 8086a64:	222c      	movs	r2, #44	; 0x2c
 8086a66:	4669      	mov	r1, sp
 8086a68:	a804      	add	r0, sp, #16
 8086a6a:	f002 fd6d 	bl	8089548 <_Z21getStringValueAtIndex6Stringci>
 8086a6e:	9804      	ldr	r0, [sp, #16]
 8086a70:	f00b f9da 	bl	8091e28 <atoi>
 8086a74:	b2c4      	uxtb	r4, r0
 8086a76:	a804      	add	r0, sp, #16
 8086a78:	f009 f8c4 	bl	808fc04 <_ZN6StringD1Ev>
 8086a7c:	4668      	mov	r0, sp
 8086a7e:	f009 f8c1 	bl	808fc04 <_ZN6StringD1Ev>
  if ((gen_unit < MINIMUM_GENSETS) || (gen_unit > num_of_gensets)) return UNCONFIGURED_GEN_UNIT_ERROR;
 8086a82:	2c00      	cmp	r4, #0
 8086a84:	d051      	beq.n	8086b2a <_Z10genControl6String+0xd6>
 8086a86:	4b2a      	ldr	r3, [pc, #168]	; (8086b30 <_Z10genControl6String+0xdc>)
 8086a88:	781b      	ldrb	r3, [r3, #0]
 8086a8a:	42a3      	cmp	r3, r4
 8086a8c:	d34d      	bcc.n	8086b2a <_Z10genControl6String+0xd6>
  gen_unit = gen_unit - ZERO_INDEX_CORRECTION;

  // Retrieve the desired control command to be executed from the received string.
  uint8_t ctrl_cmmnd;
  String ctrlCmmdString = getStringValueAtIndex(ctrlParameter, COMMA_CHAR, 1); 
 8086a8e:	4629      	mov	r1, r5
 8086a90:	a804      	add	r0, sp, #16
 8086a92:	f009 f94b 	bl	808fd2c <_ZN6StringC1ERKS_>
 8086a96:	a904      	add	r1, sp, #16
 8086a98:	2301      	movs	r3, #1
 8086a9a:	222c      	movs	r2, #44	; 0x2c
 8086a9c:	4668      	mov	r0, sp
 8086a9e:	f002 fd53 	bl	8089548 <_Z21getStringValueAtIndex6Stringci>
 8086aa2:	a804      	add	r0, sp, #16
 8086aa4:	f009 f8ae 	bl	808fc04 <_ZN6StringD1Ev>
  gen_unit = gen_unit - ZERO_INDEX_CORRECTION;
 8086aa8:	3c01      	subs	r4, #1
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8086aaa:	4668      	mov	r0, sp
 8086aac:	4921      	ldr	r1, [pc, #132]	; (8086b34 <_Z10genControl6String+0xe0>)
 8086aae:	b2e4      	uxtb	r4, r4
 8086ab0:	f009 fa65 	bl	808ff7e <_ZNK6String6equalsEPKc>
  if(ctrlCmmdString == "stop") ctrl_cmmnd = SHUTDOWN_GEN;
 8086ab4:	b9d8      	cbnz	r0, 8086aee <_Z10genControl6String+0x9a>
 8086ab6:	4668      	mov	r0, sp
 8086ab8:	491f      	ldr	r1, [pc, #124]	; (8086b38 <_Z10genControl6String+0xe4>)
 8086aba:	f009 fa60 	bl	808ff7e <_ZNK6String6equalsEPKc>
  else if(ctrlCmmdString == "start") ctrl_cmmnd = RUN_GEN;
 8086abe:	b9c0      	cbnz	r0, 8086af2 <_Z10genControl6String+0x9e>
 8086ac0:	4668      	mov	r0, sp
 8086ac2:	491e      	ldr	r1, [pc, #120]	; (8086b3c <_Z10genControl6String+0xe8>)
 8086ac4:	f009 fa5b 	bl	808ff7e <_ZNK6String6equalsEPKc>
  else if(ctrlCmmdString == "state") ctrl_cmmnd = GET_GEN_STATE;
 8086ac8:	b360      	cbz	r0, 8086b24 <_Z10genControl6String+0xd0>
 8086aca:	2502      	movs	r5, #2
  else return GEN_CTRL_CMD_ERROR;

  // Read the engine status of the desired Genset and update it in the Generator class
  checkGenEngineState(gen_unit);
 8086acc:	4620      	mov	r0, r4
 8086ace:	f7ff f96d 	bl	8085dac <_Z19checkGenEngineStateh>

  // Process the received control command
  int8_t ctrl_relay_id;
  switch (ctrl_cmmnd)
 8086ad2:	2d01      	cmp	r5, #1
 8086ad4:	d01f      	beq.n	8086b16 <_Z10genControl6String+0xc2>
 8086ad6:	2d02      	cmp	r5, #2
 8086ad8:	d10d      	bne.n	8086af6 <_Z10genControl6String+0xa2>
  {
    case GET_GEN_STATE:
    {
      publishEngState(gen_unit);
 8086ada:	4620      	mov	r0, r4
 8086adc:	f7ff ff42 	bl	8086964 <_Z15publishEngStateh>
      return ctrl_cmmnd;
 8086ae0:	462c      	mov	r4, r5
  String ctrlCmmdString = getStringValueAtIndex(ctrlParameter, COMMA_CHAR, 1); 
 8086ae2:	4668      	mov	r0, sp
 8086ae4:	f009 f88e 	bl	808fc04 <_ZN6StringD1Ev>
  
  // Saved the latest state of the relays if the control command ran successfully. 
  saveStateOfRelays(static_cast<GenControlCommand>(ctrl_cmmnd), ctrl_relay_id); 

  return ctrl_relay_id;
 8086ae8:	4620      	mov	r0, r4
 8086aea:	b009      	add	sp, #36	; 0x24
 8086aec:	bd30      	pop	{r4, r5, pc}
  if(ctrlCmmdString == "stop") ctrl_cmmnd = SHUTDOWN_GEN;
 8086aee:	2500      	movs	r5, #0
 8086af0:	e7ec      	b.n	8086acc <_Z10genControl6String+0x78>
  else if(ctrlCmmdString == "start") ctrl_cmmnd = RUN_GEN;
 8086af2:	2501      	movs	r5, #1
 8086af4:	e7ea      	b.n	8086acc <_Z10genControl6String+0x78>
      ctrl_relay_id = gxGen[gen_unit].setGenToStop();
 8086af6:	20e8      	movs	r0, #232	; 0xe8
 8086af8:	4b11      	ldr	r3, [pc, #68]	; (8086b40 <_Z10genControl6String+0xec>)
 8086afa:	fb00 3004 	mla	r0, r0, r4, r3
 8086afe:	f002 fa07 	bl	8088f10 <_ZN11GXGenerator12setGenToStopEv>
  if(!((ctrl_relay_id == GX_RELAY_1) || (ctrl_relay_id == GX_RELAY_2)))
 8086b02:	1e43      	subs	r3, r0, #1
 8086b04:	b2db      	uxtb	r3, r3
 8086b06:	2b01      	cmp	r3, #1
 8086b08:	4604      	mov	r4, r0
 8086b0a:	d8ea      	bhi.n	8086ae2 <_Z10genControl6String+0x8e>
  saveStateOfRelays(static_cast<GenControlCommand>(ctrl_cmmnd), ctrl_relay_id); 
 8086b0c:	4601      	mov	r1, r0
 8086b0e:	4628      	mov	r0, r5
 8086b10:	f7ff fd20 	bl	8086554 <_Z17saveStateOfRelays17GenControlCommanda>
  return ctrl_relay_id;
 8086b14:	e7e5      	b.n	8086ae2 <_Z10genControl6String+0x8e>
      ctrl_relay_id = gxGen[gen_unit].setGenToStart();
 8086b16:	20e8      	movs	r0, #232	; 0xe8
 8086b18:	4b09      	ldr	r3, [pc, #36]	; (8086b40 <_Z10genControl6String+0xec>)
 8086b1a:	fb00 3004 	mla	r0, r0, r4, r3
 8086b1e:	f002 f9d7 	bl	8088ed0 <_ZN11GXGenerator13setGenToStartEv>
      break;
 8086b22:	e7ee      	b.n	8086b02 <_Z10genControl6String+0xae>
  else return GEN_CTRL_CMD_ERROR;
 8086b24:	f06f 0409 	mvn.w	r4, #9
 8086b28:	e7db      	b.n	8086ae2 <_Z10genControl6String+0x8e>
  if ((gen_unit < MINIMUM_GENSETS) || (gen_unit > num_of_gensets)) return UNCONFIGURED_GEN_UNIT_ERROR;
 8086b2a:	f06f 0408 	mvn.w	r4, #8
 8086b2e:	e7db      	b.n	8086ae8 <_Z10genControl6String+0x94>
 8086b30:	20000da8 	.word	0x20000da8
 8086b34:	080938df 	.word	0x080938df
 8086b38:	080938e4 	.word	0x080938e4
 8086b3c:	080938f6 	.word	0x080938f6
 8086b40:	20000768 	.word	0x20000768

08086b44 <_Z14genMetricsSTATv>:
{
 8086b44:	b513      	push	{r0, r1, r4, lr}
  if(validateConfigurations() == false)
 8086b46:	f006 f917 	bl	808cd78 <_Z22validateConfigurationsv>
 8086b4a:	b178      	cbz	r0, 8086b6c <_Z14genMetricsSTATv+0x28>
  if (genmetrics_active == 1)
 8086b4c:	4c09      	ldr	r4, [pc, #36]	; (8086b74 <_Z14genMetricsSTATv+0x30>)
    Particle.publish("Gen Metrics state", "OFF");
 8086b4e:	4668      	mov	r0, sp
  if (genmetrics_active == 1)
 8086b50:	7822      	ldrb	r2, [r4, #0]
    Particle.publish("Gen Metrics state", "OFF");
 8086b52:	4909      	ldr	r1, [pc, #36]	; (8086b78 <_Z14genMetricsSTATv+0x34>)
  if (genmetrics_active == 1)
 8086b54:	2a01      	cmp	r2, #1
    Particle.publish("Gen Metrics state", "ON");
 8086b56:	bf0c      	ite	eq
 8086b58:	4a08      	ldreq	r2, [pc, #32]	; (8086b7c <_Z14genMetricsSTATv+0x38>)
    Particle.publish("Gen Metrics state", "OFF");
 8086b5a:	4a09      	ldrne	r2, [pc, #36]	; (8086b80 <_Z14genMetricsSTATv+0x3c>)
 8086b5c:	f7fe ff0c 	bl	8085978 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 8086b60:	a801      	add	r0, sp, #4
 8086b62:	f7ff fd1f 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return genmetrics_active; 
 8086b66:	7820      	ldrb	r0, [r4, #0]
}
 8086b68:	b002      	add	sp, #8
 8086b6a:	bd10      	pop	{r4, pc}
  { return CONFIG_INVALID; }
 8086b6c:	f06f 0015 	mvn.w	r0, #21
 8086b70:	e7fa      	b.n	8086b68 <_Z14genMetricsSTATv+0x24>
 8086b72:	bf00      	nop
 8086b74:	2000123c 	.word	0x2000123c
 8086b78:	080938ea 	.word	0x080938ea
 8086b7c:	08094b57 	.word	0x08094b57
 8086b80:	080938fc 	.word	0x080938fc

08086b84 <_Z12genMetricsSW6String>:
{
 8086b84:	b510      	push	{r4, lr}
 8086b86:	b086      	sub	sp, #24
 8086b88:	4604      	mov	r4, r0
  if(validateConfigurations() == false){ return CONFIG_INVALID;}
 8086b8a:	f006 f8f5 	bl	808cd78 <_Z22validateConfigurationsv>
 8086b8e:	2800      	cmp	r0, #0
 8086b90:	d040      	beq.n	8086c14 <_Z12genMetricsSW6String+0x90>
 8086b92:	4620      	mov	r0, r4
 8086b94:	4921      	ldr	r1, [pc, #132]	; (8086c1c <_Z12genMetricsSW6String+0x98>)
 8086b96:	f009 f9f2 	bl	808ff7e <_ZNK6String6equalsEPKc>
  if (commandParameter == "")
 8086b9a:	b1a0      	cbz	r0, 8086bc6 <_Z12genMetricsSW6String+0x42>
    val = mainGXConfig.GENMETRICS_ACTIVE;
 8086b9c:	4b20      	ldr	r3, [pc, #128]	; (8086c20 <_Z12genMetricsSW6String+0x9c>)
    Particle.publish("Gen Metrics state", String(val));
 8086b9e:	220a      	movs	r2, #10
    val = mainGXConfig.GENMETRICS_ACTIVE;
 8086ba0:	781c      	ldrb	r4, [r3, #0]
    Particle.publish("Gen Metrics state", String(val));
 8086ba2:	a802      	add	r0, sp, #8
 8086ba4:	4621      	mov	r1, r4
 8086ba6:	f009 f8e5 	bl	808fd74 <_ZN6StringC1Ehh>
 8086baa:	9a02      	ldr	r2, [sp, #8]
 8086bac:	491d      	ldr	r1, [pc, #116]	; (8086c24 <_Z12genMetricsSW6String+0xa0>)
 8086bae:	4668      	mov	r0, sp
 8086bb0:	f7fe fee2 	bl	8085978 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 8086bb4:	a801      	add	r0, sp, #4
 8086bb6:	f7ff fcf5 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8086bba:	a802      	add	r0, sp, #8
 8086bbc:	f009 f822 	bl	808fc04 <_ZN6StringD1Ev>
    return val;
 8086bc0:	4620      	mov	r0, r4
}
 8086bc2:	b006      	add	sp, #24
 8086bc4:	bd10      	pop	{r4, pc}
  else if(atoi(commandParameter) == 1 || atoi(commandParameter) == 0)
 8086bc6:	6820      	ldr	r0, [r4, #0]
 8086bc8:	f00b f92e 	bl	8091e28 <atoi>
 8086bcc:	2801      	cmp	r0, #1
 8086bce:	d115      	bne.n	8086bfc <_Z12genMetricsSW6String+0x78>
    switch (atoi(commandParameter))
 8086bd0:	6820      	ldr	r0, [r4, #0]
 8086bd2:	f00b f929 	bl	8091e28 <atoi>
 8086bd6:	2801      	cmp	r0, #1
 8086bd8:	4c13      	ldr	r4, [pc, #76]	; (8086c28 <_Z12genMetricsSW6String+0xa4>)
 8086bda:	d117      	bne.n	8086c0c <_Z12genMetricsSW6String+0x88>
      Particle.publish("Gen Metrics state", "Gen Metrics queries Activated");
 8086bdc:	4a13      	ldr	r2, [pc, #76]	; (8086c2c <_Z12genMetricsSW6String+0xa8>)
      genmetrics_active = 1;
 8086bde:	7020      	strb	r0, [r4, #0]
      Particle.publish("Gen Metrics state", "Gen Metrics queries Deactivated");
 8086be0:	4910      	ldr	r1, [pc, #64]	; (8086c24 <_Z12genMetricsSW6String+0xa0>)
 8086be2:	a802      	add	r0, sp, #8
 8086be4:	f7fe fec8 	bl	8085978 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 8086be8:	a803      	add	r0, sp, #12
 8086bea:	f7ff fcdb 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    mainGXConfig.GENMETRICS_ACTIVE = genmetrics_active;
 8086bee:	7822      	ldrb	r2, [r4, #0]
 8086bf0:	4b0b      	ldr	r3, [pc, #44]	; (8086c20 <_Z12genMetricsSW6String+0x9c>)
 8086bf2:	701a      	strb	r2, [r3, #0]
    storeConfigurations();
 8086bf4:	f006 f8ec 	bl	808cdd0 <_Z19storeConfigurationsv>
    return genmetrics_active;
 8086bf8:	7820      	ldrb	r0, [r4, #0]
 8086bfa:	e7e2      	b.n	8086bc2 <_Z12genMetricsSW6String+0x3e>
  else if(atoi(commandParameter) == 1 || atoi(commandParameter) == 0)
 8086bfc:	6820      	ldr	r0, [r4, #0]
 8086bfe:	f00b f913 	bl	8091e28 <atoi>
 8086c02:	2800      	cmp	r0, #0
 8086c04:	d0e4      	beq.n	8086bd0 <_Z12genMetricsSW6String+0x4c>
  return -1;
 8086c06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8086c0a:	e7da      	b.n	8086bc2 <_Z12genMetricsSW6String+0x3e>
      genmetrics_active = 0;
 8086c0c:	2300      	movs	r3, #0
      Particle.publish("Gen Metrics state", "Gen Metrics queries Deactivated");
 8086c0e:	4a08      	ldr	r2, [pc, #32]	; (8086c30 <_Z12genMetricsSW6String+0xac>)
      genmetrics_active = 0;
 8086c10:	7023      	strb	r3, [r4, #0]
      Particle.publish("Gen Metrics state", "Gen Metrics queries Deactivated");
 8086c12:	e7e5      	b.n	8086be0 <_Z12genMetricsSW6String+0x5c>
  if(validateConfigurations() == false){ return CONFIG_INVALID;}
 8086c14:	f06f 0015 	mvn.w	r0, #21
 8086c18:	e7d3      	b.n	8086bc2 <_Z12genMetricsSW6String+0x3e>
 8086c1a:	bf00      	nop
 8086c1c:	08094ad5 	.word	0x08094ad5
 8086c20:	20001268 	.word	0x20001268
 8086c24:	080938ea 	.word	0x080938ea
 8086c28:	2000123c 	.word	0x2000123c
 8086c2c:	08093900 	.word	0x08093900
 8086c30:	0809391e 	.word	0x0809391e

08086c34 <_Z13gridMetricsSW6String>:
{
 8086c34:	b510      	push	{r4, lr}
 8086c36:	b086      	sub	sp, #24
 8086c38:	4604      	mov	r4, r0
  if(validateConfigurations() == false){ return CONFIG_INVALID;}
 8086c3a:	f006 f89d 	bl	808cd78 <_Z22validateConfigurationsv>
 8086c3e:	2800      	cmp	r0, #0
 8086c40:	d03d      	beq.n	8086cbe <_Z13gridMetricsSW6String+0x8a>
 8086c42:	4620      	mov	r0, r4
 8086c44:	4921      	ldr	r1, [pc, #132]	; (8086ccc <_Z13gridMetricsSW6String+0x98>)
 8086c46:	f009 f99a 	bl	808ff7e <_ZNK6String6equalsEPKc>
  if (commandParameter == "")
 8086c4a:	b1a8      	cbz	r0, 8086c78 <_Z13gridMetricsSW6String+0x44>
    grid_state_val = mainGXConfig.GRIDMETRICS_ACTIVE;
 8086c4c:	4b20      	ldr	r3, [pc, #128]	; (8086cd0 <_Z13gridMetricsSW6String+0x9c>)
    Particle.publish("Grid_Mtrcs_state", String(grid_state_val));
 8086c4e:	220a      	movs	r2, #10
    grid_state_val = mainGXConfig.GRIDMETRICS_ACTIVE;
 8086c50:	f893 4077 	ldrb.w	r4, [r3, #119]	; 0x77
    Particle.publish("Grid_Mtrcs_state", String(grid_state_val));
 8086c54:	a802      	add	r0, sp, #8
 8086c56:	4621      	mov	r1, r4
 8086c58:	f009 f88c 	bl	808fd74 <_ZN6StringC1Ehh>
 8086c5c:	9a02      	ldr	r2, [sp, #8]
 8086c5e:	491d      	ldr	r1, [pc, #116]	; (8086cd4 <_Z13gridMetricsSW6String+0xa0>)
 8086c60:	4668      	mov	r0, sp
 8086c62:	f7fe fe89 	bl	8085978 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 8086c66:	a801      	add	r0, sp, #4
 8086c68:	f7ff fc9c 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8086c6c:	a802      	add	r0, sp, #8
 8086c6e:	f008 ffc9 	bl	808fc04 <_ZN6StringD1Ev>
    return grid_state_val;
 8086c72:	4620      	mov	r0, r4
}
 8086c74:	b006      	add	sp, #24
 8086c76:	bd10      	pop	{r4, pc}
  switch (atoi(commandParameter))
 8086c78:	6820      	ldr	r0, [r4, #0]
 8086c7a:	f00b f8d5 	bl	8091e28 <atoi>
 8086c7e:	2801      	cmp	r0, #1
 8086c80:	d015      	beq.n	8086cae <_Z13gridMetricsSW6String+0x7a>
 8086c82:	2802      	cmp	r0, #2
 8086c84:	d017      	beq.n	8086cb6 <_Z13gridMetricsSW6String+0x82>
 8086c86:	b9e8      	cbnz	r0, 8086cc4 <_Z13gridMetricsSW6String+0x90>
      gridmetrics_active = GRID_MTRCS_OFF;
 8086c88:	4b13      	ldr	r3, [pc, #76]	; (8086cd8 <_Z13gridMetricsSW6String+0xa4>)
      Particle.publish("Grid_Mtrcs_state", "Grid Metrics Deactivated");
 8086c8a:	4a14      	ldr	r2, [pc, #80]	; (8086cdc <_Z13gridMetricsSW6String+0xa8>)
      gridmetrics_active = GRID_MTRCS_OFF;
 8086c8c:	7018      	strb	r0, [r3, #0]
      Particle.publish("Grid_Mtrcs_state", "Grid Metrics Activated: Meter");
 8086c8e:	4911      	ldr	r1, [pc, #68]	; (8086cd4 <_Z13gridMetricsSW6String+0xa0>)
  mainGXConfig.GRIDMETRICS_ACTIVE = gridmetrics_active;
 8086c90:	4c11      	ldr	r4, [pc, #68]	; (8086cd8 <_Z13gridMetricsSW6String+0xa4>)
      Particle.publish("Grid_Mtrcs_state", "Grid Metrics Activated: Meter");
 8086c92:	a802      	add	r0, sp, #8
 8086c94:	f7fe fe70 	bl	8085978 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 8086c98:	a803      	add	r0, sp, #12
 8086c9a:	f7ff fc83 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  mainGXConfig.GRIDMETRICS_ACTIVE = gridmetrics_active;
 8086c9e:	7822      	ldrb	r2, [r4, #0]
 8086ca0:	4b0b      	ldr	r3, [pc, #44]	; (8086cd0 <_Z13gridMetricsSW6String+0x9c>)
 8086ca2:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
  storeConfigurations();
 8086ca6:	f006 f893 	bl	808cdd0 <_Z19storeConfigurationsv>
  return gridmetrics_active;
 8086caa:	7820      	ldrb	r0, [r4, #0]
 8086cac:	e7e2      	b.n	8086c74 <_Z13gridMetricsSW6String+0x40>
      gridmetrics_active = GRID_MTRCS_GEN;
 8086cae:	4b0a      	ldr	r3, [pc, #40]	; (8086cd8 <_Z13gridMetricsSW6String+0xa4>)
      Particle.publish("Grid_Mtrcs_state", "Grid Metrics Activated: Genset");
 8086cb0:	4a0b      	ldr	r2, [pc, #44]	; (8086ce0 <_Z13gridMetricsSW6String+0xac>)
      gridmetrics_active = GRID_MTRCS_GEN;
 8086cb2:	7018      	strb	r0, [r3, #0]
      Particle.publish("Grid_Mtrcs_state", "Grid Metrics Activated: Genset");
 8086cb4:	e7eb      	b.n	8086c8e <_Z13gridMetricsSW6String+0x5a>
      gridmetrics_active = GRID_MTRCS_METER;
 8086cb6:	4b08      	ldr	r3, [pc, #32]	; (8086cd8 <_Z13gridMetricsSW6String+0xa4>)
      Particle.publish("Grid_Mtrcs_state", "Grid Metrics Activated: Meter");
 8086cb8:	4a0a      	ldr	r2, [pc, #40]	; (8086ce4 <_Z13gridMetricsSW6String+0xb0>)
      gridmetrics_active = GRID_MTRCS_METER;
 8086cba:	7018      	strb	r0, [r3, #0]
      Particle.publish("Grid_Mtrcs_state", "Grid Metrics Activated: Meter");
 8086cbc:	e7e7      	b.n	8086c8e <_Z13gridMetricsSW6String+0x5a>
  if(validateConfigurations() == false){ return CONFIG_INVALID;}
 8086cbe:	f06f 0015 	mvn.w	r0, #21
 8086cc2:	e7d7      	b.n	8086c74 <_Z13gridMetricsSW6String+0x40>
  switch (atoi(commandParameter))
 8086cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8086cc8:	e7d4      	b.n	8086c74 <_Z13gridMetricsSW6String+0x40>
 8086cca:	bf00      	nop
 8086ccc:	08094ad5 	.word	0x08094ad5
 8086cd0:	20001268 	.word	0x20001268
 8086cd4:	0809393e 	.word	0x0809393e
 8086cd8:	20001244 	.word	0x20001244
 8086cdc:	0809394f 	.word	0x0809394f
 8086ce0:	08093968 	.word	0x08093968
 8086ce4:	08093987 	.word	0x08093987

08086ce8 <_Z15gridMetricsSTATv>:
{
 8086ce8:	b513      	push	{r0, r1, r4, lr}
  if(validateConfigurations() == false)
 8086cea:	f006 f845 	bl	808cd78 <_Z22validateConfigurationsv>
 8086cee:	b1a8      	cbz	r0, 8086d1c <_Z15gridMetricsSTATv+0x34>
  switch (gridmetrics_active)
 8086cf0:	4c0c      	ldr	r4, [pc, #48]	; (8086d24 <_Z15gridMetricsSTATv+0x3c>)
 8086cf2:	7822      	ldrb	r2, [r4, #0]
 8086cf4:	2a01      	cmp	r2, #1
 8086cf6:	d00d      	beq.n	8086d14 <_Z15gridMetricsSTATv+0x2c>
 8086cf8:	2a02      	cmp	r2, #2
 8086cfa:	d00d      	beq.n	8086d18 <_Z15gridMetricsSTATv+0x30>
 8086cfc:	b93a      	cbnz	r2, 8086d0e <_Z15gridMetricsSTATv+0x26>
      Particle.publish("Grid_Mtrcs_state", "{\"State\":\"OFF\"}");
 8086cfe:	4a0a      	ldr	r2, [pc, #40]	; (8086d28 <_Z15gridMetricsSTATv+0x40>)
      Particle.publish("Grid_Mtrcs_state", "{\"State\":\"ON\",\"Source\":\"Meter\"}");
 8086d00:	4668      	mov	r0, sp
 8086d02:	490a      	ldr	r1, [pc, #40]	; (8086d2c <_Z15gridMetricsSTATv+0x44>)
 8086d04:	f7fe fe38 	bl	8085978 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 8086d08:	a801      	add	r0, sp, #4
 8086d0a:	f7ff fc4b 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return gridmetrics_active;
 8086d0e:	7820      	ldrb	r0, [r4, #0]
}
 8086d10:	b002      	add	sp, #8
 8086d12:	bd10      	pop	{r4, pc}
      Particle.publish("Grid_Mtrcs_state", "{\"State\":\"ON\",\"Source\":\"Genset\"}");
 8086d14:	4a06      	ldr	r2, [pc, #24]	; (8086d30 <_Z15gridMetricsSTATv+0x48>)
 8086d16:	e7f3      	b.n	8086d00 <_Z15gridMetricsSTATv+0x18>
      Particle.publish("Grid_Mtrcs_state", "{\"State\":\"ON\",\"Source\":\"Meter\"}");
 8086d18:	4a06      	ldr	r2, [pc, #24]	; (8086d34 <_Z15gridMetricsSTATv+0x4c>)
 8086d1a:	e7f1      	b.n	8086d00 <_Z15gridMetricsSTATv+0x18>
  { return CONFIG_INVALID; }
 8086d1c:	f06f 0015 	mvn.w	r0, #21
 8086d20:	e7f6      	b.n	8086d10 <_Z15gridMetricsSTATv+0x28>
 8086d22:	bf00      	nop
 8086d24:	20001244 	.word	0x20001244
 8086d28:	080939a5 	.word	0x080939a5
 8086d2c:	0809393e 	.word	0x0809393e
 8086d30:	080939b5 	.word	0x080939b5
 8086d34:	080939d6 	.word	0x080939d6

08086d38 <_GLOBAL__sub_I_GEN_BAUD_RATE>:
 8086d38:	b538      	push	{r3, r4, r5, lr}
        val_(val) {
 8086d3a:	2400      	movs	r4, #0
 8086d3c:	2201      	movs	r2, #1
 8086d3e:	4b0b      	ldr	r3, [pc, #44]	; (8086d6c <_GLOBAL__sub_I_GEN_BAUD_RATE+0x34>)
GXGenerator gxGen[MAXIMUM_GENSETS];
 8086d40:	4d0b      	ldr	r5, [pc, #44]	; (8086d70 <_GLOBAL__sub_I_GEN_BAUD_RATE+0x38>)
 8086d42:	701c      	strb	r4, [r3, #0]
 8086d44:	4b0b      	ldr	r3, [pc, #44]	; (8086d74 <_GLOBAL__sub_I_GEN_BAUD_RATE+0x3c>)
 8086d46:	701a      	strb	r2, [r3, #0]
 8086d48:	2208      	movs	r2, #8
 8086d4a:	4b0b      	ldr	r3, [pc, #44]	; (8086d78 <_GLOBAL__sub_I_GEN_BAUD_RATE+0x40>)
 8086d4c:	701a      	strb	r2, [r3, #0]
 8086d4e:	1928      	adds	r0, r5, r4
 8086d50:	34e8      	adds	r4, #232	; 0xe8
 8086d52:	f001 fc67 	bl	8088624 <_ZN11GXGeneratorC1Ev>
 8086d56:	f5b4 6fae 	cmp.w	r4, #1392	; 0x570
 8086d5a:	d1f8      	bne.n	8086d4e <_GLOBAL__sub_I_GEN_BAUD_RATE+0x16>
 8086d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
GXGenerator gxGen[MAXIMUM_GENSETS];
 8086d60:	2000      	movs	r0, #0
 8086d62:	4a06      	ldr	r2, [pc, #24]	; (8086d7c <_GLOBAL__sub_I_GEN_BAUD_RATE+0x44>)
 8086d64:	4906      	ldr	r1, [pc, #24]	; (8086d80 <_GLOBAL__sub_I_GEN_BAUD_RATE+0x48>)
 8086d66:	f009 be39 	b.w	80909dc <__aeabi_atexit>
 8086d6a:	bf00      	nop
 8086d6c:	200005c4 	.word	0x200005c4
 8086d70:	20000768 	.word	0x20000768
 8086d74:	200005c5 	.word	0x200005c5
 8086d78:	200005c6 	.word	0x200005c6
 8086d7c:	200005b0 	.word	0x200005b0
 8086d80:	0808595d 	.word	0x0808595d

08086d84 <_ZNK5spark6Logger4warnEPKcz>:
inline void spark::Logger::warn(const char *fmt, ...) const {
 8086d84:	b40e      	push	{r1, r2, r3}
 8086d86:	b510      	push	{r4, lr}
    attr.flags = 0;
 8086d88:	2300      	movs	r3, #0
    log(LOG_LEVEL_WARN, fmt, args);
 8086d8a:	6801      	ldr	r1, [r0, #0]
    attr.flags = 0;
 8086d8c:	2020      	movs	r0, #32
inline void spark::Logger::warn(const char *fmt, ...) const {
 8086d8e:	b08d      	sub	sp, #52	; 0x34
 8086d90:	aa0f      	add	r2, sp, #60	; 0x3c
 8086d92:	f852 4b04 	ldr.w	r4, [r2], #4
    attr.flags = 0;
 8086d96:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8086d9a:	e9cd 4200 	strd	r4, r2, [sp]
    va_start(args, fmt);
 8086d9e:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8086da0:	2028      	movs	r0, #40	; 0x28
 8086da2:	aa04      	add	r2, sp, #16
 8086da4:	f006 fa82 	bl	808d2ac <log_message_v>
}
 8086da8:	b00d      	add	sp, #52	; 0x34
 8086daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8086dae:	b003      	add	sp, #12
 8086db0:	4770      	bx	lr
	...

08086db4 <_Z17binaryInputChangeh>:
const long min_in = 1486;
const long max_in = 4359;

int binaryInputChange(uint8_t pin)
{
  switch (pin)
 8086db4:	3801      	subs	r0, #1
 8086db6:	2803      	cmp	r0, #3
 8086db8:	d815      	bhi.n	8086de6 <_Z17binaryInputChangeh+0x32>
 8086dba:	e8df f000 	tbb	[pc, r0]
 8086dbe:	0c10      	.short	0x0c10
 8086dc0:	0208      	.short	0x0208
  {
  case 4:
    return !gx_interval.bin_input4;
 8086dc2:	4b0a      	ldr	r3, [pc, #40]	; (8086dec <_Z17binaryInputChangeh+0x38>)
 8086dc4:	f893 0438 	ldrb.w	r0, [r3, #1080]	; 0x438
    break;

  case 3:
    return !gx_interval.bin_input3;
 8086dc8:	f080 0001 	eor.w	r0, r0, #1
 8086dcc:	4770      	bx	lr
 8086dce:	4b07      	ldr	r3, [pc, #28]	; (8086dec <_Z17binaryInputChangeh+0x38>)
 8086dd0:	f893 0439 	ldrb.w	r0, [r3, #1081]	; 0x439
 8086dd4:	e7f8      	b.n	8086dc8 <_Z17binaryInputChangeh+0x14>
    break;

  case 2:
    return !gx_interval.bin_input2;
 8086dd6:	4b05      	ldr	r3, [pc, #20]	; (8086dec <_Z17binaryInputChangeh+0x38>)
 8086dd8:	f893 043a 	ldrb.w	r0, [r3, #1082]	; 0x43a
 8086ddc:	e7f4      	b.n	8086dc8 <_Z17binaryInputChangeh+0x14>
    break;

  case 1:
    return !gx_interval.bin_input1;
 8086dde:	4b03      	ldr	r3, [pc, #12]	; (8086dec <_Z17binaryInputChangeh+0x38>)
 8086de0:	f893 043b 	ldrb.w	r0, [r3, #1083]	; 0x43b
 8086de4:	e7f0      	b.n	8086dc8 <_Z17binaryInputChangeh+0x14>
{
 8086de6:	f44f 70ca 	mov.w	r0, #404	; 0x194
    return 404;
    break;
  }

  return 0;
}
 8086dea:	4770      	bx	lr
 8086dec:	200000f8 	.word	0x200000f8

08086df0 <_Z16readBinaryInputsv>:

void readBinaryInputs()
{
  // Store the cummulative state of the binary inputs; for interrupt checks
  static volatile uint8_t PrevBinInputSum = 0;
  volatile uint8_t currBinInputSum = 0;
 8086df0:	2300      	movs	r3, #0
{
 8086df2:	b570      	push	{r4, r5, r6, lr}

  portExpander.digitalRead(D_IN4, &gx_interval.bin_input4);
 8086df4:	210c      	movs	r1, #12
{
 8086df6:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
  portExpander.digitalRead(D_IN4, &gx_interval.bin_input4);
 8086dfa:	4a50      	ldr	r2, [pc, #320]	; (8086f3c <_Z16readBinaryInputsv+0x14c>)
 8086dfc:	4850      	ldr	r0, [pc, #320]	; (8086f40 <_Z16readBinaryInputsv+0x150>)
  volatile uint8_t currBinInputSum = 0;
 8086dfe:	f88d 3437 	strb.w	r3, [sp, #1079]	; 0x437
  portExpander.digitalRead(D_IN4, &gx_interval.bin_input4);
 8086e02:	f005 ff81 	bl	808cd08 <_ZN7TCA953511digitalReadEtPb>
  portExpander.digitalRead(D_IN3, &gx_interval.bin_input3);
 8086e06:	210d      	movs	r1, #13
 8086e08:	4a4e      	ldr	r2, [pc, #312]	; (8086f44 <_Z16readBinaryInputsv+0x154>)
 8086e0a:	484d      	ldr	r0, [pc, #308]	; (8086f40 <_Z16readBinaryInputsv+0x150>)
 8086e0c:	f005 ff7c 	bl	808cd08 <_ZN7TCA953511digitalReadEtPb>
   * state all 4 Binary inputs.
   * The raw boolean results were inverted due to the nature of the opto-coupler IC of the Binary Inputs circuit on the GX board;
   * The IC usually inverts the value of it's input.
   */
  currBinInputSum = static_cast<uint8_t>(!gx_interval.bin_input1) + (static_cast<uint8_t>(!gx_interval.bin_input2) * 2) +
                    (static_cast<uint8_t>(!gx_interval.bin_input3) * 3) + (static_cast<uint8_t>(!gx_interval.bin_input4) * 4); 
 8086e10:	4c4d      	ldr	r4, [pc, #308]	; (8086f48 <_Z16readBinaryInputsv+0x158>)
  portExpander.digitalRead(D_IN2, &gx_interval.bin_input2);
 8086e12:	210e      	movs	r1, #14
 8086e14:	4a4d      	ldr	r2, [pc, #308]	; (8086f4c <_Z16readBinaryInputsv+0x15c>)
 8086e16:	484a      	ldr	r0, [pc, #296]	; (8086f40 <_Z16readBinaryInputsv+0x150>)
 8086e18:	f005 ff76 	bl	808cd08 <_ZN7TCA953511digitalReadEtPb>
  portExpander.digitalRead(D_IN1, &gx_interval.bin_input1);
 8086e1c:	4a4c      	ldr	r2, [pc, #304]	; (8086f50 <_Z16readBinaryInputsv+0x160>)
 8086e1e:	210f      	movs	r1, #15
 8086e20:	4847      	ldr	r0, [pc, #284]	; (8086f40 <_Z16readBinaryInputsv+0x150>)
 8086e22:	f005 ff71 	bl	808cd08 <_ZN7TCA953511digitalReadEtPb>
                    (static_cast<uint8_t>(!gx_interval.bin_input3) * 3) + (static_cast<uint8_t>(!gx_interval.bin_input4) * 4); 
 8086e26:	f894 3439 	ldrb.w	r3, [r4, #1081]	; 0x439
  currBinInputSum = static_cast<uint8_t>(!gx_interval.bin_input1) + (static_cast<uint8_t>(!gx_interval.bin_input2) * 2) +
 8086e2a:	f894 243a 	ldrb.w	r2, [r4, #1082]	; 0x43a
                    (static_cast<uint8_t>(!gx_interval.bin_input3) * 3) + (static_cast<uint8_t>(!gx_interval.bin_input4) * 4); 
 8086e2e:	f083 0301 	eor.w	r3, r3, #1
  currBinInputSum = static_cast<uint8_t>(!gx_interval.bin_input1) + (static_cast<uint8_t>(!gx_interval.bin_input2) * 2) +
 8086e32:	f082 0201 	eor.w	r2, r2, #1
 8086e36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8086e3a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8086e3e:	f894 243b 	ldrb.w	r2, [r4, #1083]	; 0x43b
   * Comparing the current state of the Binary inputs against the previous state. 
   * If there's a variance, it means that one or more of the binary inputs have changed state.
   * It sets the _app_state_ variable to inputUpdate for immediate publishing of the "device" 
   * event to the particle console and running of a modbus poll for Alarms
   */
  if (currBinInputSum != PrevBinInputSum)
 8086e42:	4d44      	ldr	r5, [pc, #272]	; (8086f54 <_Z16readBinaryInputsv+0x164>)
  currBinInputSum = static_cast<uint8_t>(!gx_interval.bin_input1) + (static_cast<uint8_t>(!gx_interval.bin_input2) * 2) +
 8086e44:	f082 0201 	eor.w	r2, r2, #1
 8086e48:	4413      	add	r3, r2
                    (static_cast<uint8_t>(!gx_interval.bin_input3) * 3) + (static_cast<uint8_t>(!gx_interval.bin_input4) * 4); 
 8086e4a:	f894 2438 	ldrb.w	r2, [r4, #1080]	; 0x438
 8086e4e:	f082 0201 	eor.w	r2, r2, #1
 8086e52:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8086e56:	b2db      	uxtb	r3, r3
  currBinInputSum = static_cast<uint8_t>(!gx_interval.bin_input1) + (static_cast<uint8_t>(!gx_interval.bin_input2) * 2) +
 8086e58:	f88d 3437 	strb.w	r3, [sp, #1079]	; 0x437
  if (currBinInputSum != PrevBinInputSum)
 8086e5c:	f89d 2437 	ldrb.w	r2, [sp, #1079]	; 0x437
 8086e60:	782b      	ldrb	r3, [r5, #0]
 8086e62:	429a      	cmp	r2, r3
 8086e64:	d063      	beq.n	8086f2e <_Z16readBinaryInputsv+0x13e>
	StringSumHelper(const char *p) : String(p) {}
 8086e66:	493c      	ldr	r1, [pc, #240]	; (8086f58 <_Z16readBinaryInputsv+0x168>)
 8086e68:	f50d 6089 	add.w	r0, sp, #1096	; 0x448
 8086e6c:	f008 ff14 	bl	808fc98 <_ZN6StringC1EPKc>
  { 
    Log.info("BINARY INPUTS HAVE CHANGED: " 
    + String(!gx_interval.bin_input1)
 8086e70:	f894 143b 	ldrb.w	r1, [r4, #1083]	; 0x43b
 8086e74:	220a      	movs	r2, #10
 8086e76:	f081 0101 	eor.w	r1, r1, #1
 8086e7a:	f50d 6087 	add.w	r0, sp, #1080	; 0x438
 8086e7e:	f008 ff8b 	bl	808fd98 <_ZN6StringC1Eih>
 8086e82:	f50d 6187 	add.w	r1, sp, #1080	; 0x438
 8086e86:	f50d 6089 	add.w	r0, sp, #1096	; 0x448
 8086e8a:	f009 f836 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 8086e8e:	4606      	mov	r6, r0
    + String(!gx_interval.bin_input2)
 8086e90:	f894 143a 	ldrb.w	r1, [r4, #1082]	; 0x43a
 8086e94:	220a      	movs	r2, #10
 8086e96:	f081 0101 	eor.w	r1, r1, #1
 8086e9a:	f50d 608b 	add.w	r0, sp, #1112	; 0x458
 8086e9e:	f008 ff7b 	bl	808fd98 <_ZN6StringC1Eih>
 8086ea2:	4630      	mov	r0, r6
 8086ea4:	f50d 618b 	add.w	r1, sp, #1112	; 0x458
 8086ea8:	f009 f827 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 8086eac:	4606      	mov	r6, r0
    + String(!gx_interval.bin_input3)
 8086eae:	f894 1439 	ldrb.w	r1, [r4, #1081]	; 0x439
 8086eb2:	220a      	movs	r2, #10
 8086eb4:	f081 0101 	eor.w	r1, r1, #1
 8086eb8:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
 8086ebc:	f008 ff6c 	bl	808fd98 <_ZN6StringC1Eih>
 8086ec0:	4630      	mov	r0, r6
 8086ec2:	f50d 618d 	add.w	r1, sp, #1128	; 0x468
 8086ec6:	f009 f818 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 8086eca:	4606      	mov	r6, r0
    + String(!gx_interval.bin_input4));
 8086ecc:	f894 1438 	ldrb.w	r1, [r4, #1080]	; 0x438
 8086ed0:	220a      	movs	r2, #10
 8086ed2:	f081 0101 	eor.w	r1, r1, #1
 8086ed6:	f50d 608f 	add.w	r0, sp, #1144	; 0x478
 8086eda:	f008 ff5d 	bl	808fd98 <_ZN6StringC1Eih>
 8086ede:	f50d 618f 	add.w	r1, sp, #1144	; 0x478
 8086ee2:	4630      	mov	r0, r6
 8086ee4:	f009 f809 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
    Log.info("BINARY INPUTS HAVE CHANGED: " 
 8086ee8:	6801      	ldr	r1, [r0, #0]
 8086eea:	481c      	ldr	r0, [pc, #112]	; (8086f5c <_Z16readBinaryInputsv+0x16c>)
 8086eec:	f7fe fd52 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
    + String(!gx_interval.bin_input4));
 8086ef0:	f50d 608f 	add.w	r0, sp, #1144	; 0x478
 8086ef4:	f008 fe86 	bl	808fc04 <_ZN6StringD1Ev>
    + String(!gx_interval.bin_input3)
 8086ef8:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
 8086efc:	f008 fe82 	bl	808fc04 <_ZN6StringD1Ev>
    + String(!gx_interval.bin_input2)
 8086f00:	f50d 608b 	add.w	r0, sp, #1112	; 0x458
 8086f04:	f008 fe7e 	bl	808fc04 <_ZN6StringD1Ev>
    + String(!gx_interval.bin_input1)
 8086f08:	f50d 6087 	add.w	r0, sp, #1080	; 0x438
 8086f0c:	f008 fe7a 	bl	808fc04 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8086f10:	f50d 6089 	add.w	r0, sp, #1096	; 0x448
 8086f14:	f008 fe76 	bl	808fc04 <_ZN6StringD1Ev>

    publishDeviceState(gx_interval);
 8086f18:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8086f1c:	f104 0110 	add.w	r1, r4, #16
 8086f20:	4668      	mov	r0, sp
 8086f22:	f00a ffa7 	bl	8091e74 <memcpy>
 8086f26:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8086f2a:	f003 f923 	bl	808a174 <_Z18publishDeviceState18HiResSensorReading>
    
  }

  PrevBinInputSum = currBinInputSum;    
 8086f2e:	f89d 3437 	ldrb.w	r3, [sp, #1079]	; 0x437
 8086f32:	b2db      	uxtb	r3, r3
 8086f34:	702b      	strb	r3, [r5, #0]
}
 8086f36:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 8086f3a:	bd70      	pop	{r4, r5, r6, pc}
 8086f3c:	20000530 	.word	0x20000530
 8086f40:	200012f6 	.word	0x200012f6
 8086f44:	20000531 	.word	0x20000531
 8086f48:	200000f8 	.word	0x200000f8
 8086f4c:	20000532 	.word	0x20000532
 8086f50:	20000533 	.word	0x20000533
 8086f54:	20000dbe 	.word	0x20000dbe
 8086f58:	080939f6 	.word	0x080939f6
 8086f5c:	200015a4 	.word	0x200015a4

08086f60 <_Z16checkTemperaturev>:

float checkTemperature()
{
 8086f60:	b510      	push	{r4, lr}
  thermo.begin(MAX31865_2WIRE);    // Open the SPI comm port for ThermoCpl Sensor
 8086f62:	2100      	movs	r1, #0
 8086f64:	4824      	ldr	r0, [pc, #144]	; (8086ff8 <_Z16checkTemperaturev+0x98>)
 8086f66:	f7fd fd6c 	bl	8084a42 <_ZN17Adafruit_MAX318655beginE17max31865_numwires>

  uint8_t temp_sensor_fault = 0;
  float temperature_value = thermo.temperature(RNOMINAL, RREF);
 8086f6a:	4a24      	ldr	r2, [pc, #144]	; (8086ffc <_Z16checkTemperaturev+0x9c>)
 8086f6c:	4924      	ldr	r1, [pc, #144]	; (8087000 <_Z16checkTemperaturev+0xa0>)
 8086f6e:	4822      	ldr	r0, [pc, #136]	; (8086ff8 <_Z16checkTemperaturev+0x98>)
 8086f70:	f7fd fda2 	bl	8084ab8 <_ZN17Adafruit_MAX3186511temperatureEff>
 8086f74:	4604      	mov	r4, r0
  temp_sensor_fault = thermo.readFault();
 8086f76:	4820      	ldr	r0, [pc, #128]	; (8086ff8 <_Z16checkTemperaturev+0x98>)
 8086f78:	f7fd fcf7 	bl	808496a <_ZN17Adafruit_MAX318659readFaultEv>

  if (temp_sensor_fault == 0) return temperature_value;
 8086f7c:	b310      	cbz	r0, 8086fc4 <_Z16checkTemperaturev+0x64>
  
  // If there's a fault, write it on the serial log
  if (temp_sensor_fault == UINT8_MAX) Log.warn("RTD SPi comm error");
 8086f7e:	28ff      	cmp	r0, #255	; 0xff
 8086f80:	d122      	bne.n	8086fc8 <_Z16checkTemperaturev+0x68>
 8086f82:	4920      	ldr	r1, [pc, #128]	; (8087004 <_Z16checkTemperaturev+0xa4>)
  else if (temp_sensor_fault == MAX31865_FAULT_HIGHTHRESH) Log.warn("RTD High Threshold");
  else if (temp_sensor_fault == MAX31865_FAULT_LOWTHRESH) Log.warn("RTD Low Threshold");
  else if (temp_sensor_fault == MAX31865_FAULT_REFINLOW) Log.warn("REFIN > 0.85*Bais");
  else if (temp_sensor_fault == MAX31865_FAULT_REFINHIGH) Log.warn("REFIN < 0.85*Bais, FORCE-open");
  else if (temp_sensor_fault == MAX31865_FAULT_RTDINLOW) Log.warn("RTD < 0.85*Bais, FORCE-open");
  else if (temp_sensor_fault == MAX31865_FAULT_OVUV) Log.warn("over/under voltage");
 8086f84:	4820      	ldr	r0, [pc, #128]	; (8087008 <_Z16checkTemperaturev+0xa8>)
 8086f86:	f7ff fefd 	bl	8086d84 <_ZNK5spark6Logger4warnEPKcz>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 8086f8a:	4c20      	ldr	r4, [pc, #128]	; (808700c <_Z16checkTemperaturev+0xac>)

  thermo.clearFault(); // Clear any fault value
 8086f8c:	481a      	ldr	r0, [pc, #104]	; (8086ff8 <_Z16checkTemperaturev+0x98>)
 8086f8e:	f7fd fd0e 	bl	80849ae <_ZN17Adafruit_MAX3186510clearFaultEv>
 8086f92:	7823      	ldrb	r3, [r4, #0]
 8086f94:	f3bf 8f5b 	dmb	ish
 8086f98:	07db      	lsls	r3, r3, #31
 8086f9a:	d40f      	bmi.n	8086fbc <_Z16checkTemperaturev+0x5c>
 8086f9c:	4620      	mov	r0, r4
 8086f9e:	f7f9 f88f 	bl	80800c0 <__cxa_guard_acquire>
 8086fa2:	b158      	cbz	r0, 8086fbc <_Z16checkTemperaturev+0x5c>
 8086fa4:	2101      	movs	r1, #1
 8086fa6:	481a      	ldr	r0, [pc, #104]	; (8087010 <_Z16checkTemperaturev+0xb0>)
 8086fa8:	f008 fd01 	bl	808f9ae <_ZN8SPIClassC1E19hal_spi_interface_t>
 8086fac:	4620      	mov	r0, r4
 8086fae:	f7f9 f88c 	bl	80800ca <__cxa_guard_release>
 8086fb2:	4a18      	ldr	r2, [pc, #96]	; (8087014 <_Z16checkTemperaturev+0xb4>)
 8086fb4:	4918      	ldr	r1, [pc, #96]	; (8087018 <_Z16checkTemperaturev+0xb8>)
 8086fb6:	4816      	ldr	r0, [pc, #88]	; (8087010 <_Z16checkTemperaturev+0xb0>)
 8086fb8:	f009 fd10 	bl	80909dc <__aeabi_atexit>
    }
    void begin(hal_spi_mode_t mode, uint16_t ss_pin = SPI_DEFAULT_SS) {
        instance().begin(mode, ss_pin);
    }
    void end() {
        instance().end();
 8086fbc:	4814      	ldr	r0, [pc, #80]	; (8087010 <_Z16checkTemperaturev+0xb0>)
 8086fbe:	f008 fd21 	bl	808fa04 <_ZN8SPIClass3endEv>

  SPI1.end();          // Close the SPI comm Port for the ThermoCpl Sensor

  return TEMP_SENSOR_SENTINEL_VALUE; 
 8086fc2:	4c16      	ldr	r4, [pc, #88]	; (808701c <_Z16checkTemperaturev+0xbc>)
}
 8086fc4:	4620      	mov	r0, r4
 8086fc6:	bd10      	pop	{r4, pc}
  else if (temp_sensor_fault == MAX31865_FAULT_HIGHTHRESH) Log.warn("RTD High Threshold");
 8086fc8:	2880      	cmp	r0, #128	; 0x80
 8086fca:	d101      	bne.n	8086fd0 <_Z16checkTemperaturev+0x70>
 8086fcc:	4914      	ldr	r1, [pc, #80]	; (8087020 <_Z16checkTemperaturev+0xc0>)
 8086fce:	e7d9      	b.n	8086f84 <_Z16checkTemperaturev+0x24>
  else if (temp_sensor_fault == MAX31865_FAULT_LOWTHRESH) Log.warn("RTD Low Threshold");
 8086fd0:	2840      	cmp	r0, #64	; 0x40
 8086fd2:	d101      	bne.n	8086fd8 <_Z16checkTemperaturev+0x78>
 8086fd4:	4913      	ldr	r1, [pc, #76]	; (8087024 <_Z16checkTemperaturev+0xc4>)
 8086fd6:	e7d5      	b.n	8086f84 <_Z16checkTemperaturev+0x24>
  else if (temp_sensor_fault == MAX31865_FAULT_REFINLOW) Log.warn("REFIN > 0.85*Bais");
 8086fd8:	2820      	cmp	r0, #32
 8086fda:	d101      	bne.n	8086fe0 <_Z16checkTemperaturev+0x80>
 8086fdc:	4912      	ldr	r1, [pc, #72]	; (8087028 <_Z16checkTemperaturev+0xc8>)
 8086fde:	e7d1      	b.n	8086f84 <_Z16checkTemperaturev+0x24>
  else if (temp_sensor_fault == MAX31865_FAULT_REFINHIGH) Log.warn("REFIN < 0.85*Bais, FORCE-open");
 8086fe0:	2810      	cmp	r0, #16
 8086fe2:	d101      	bne.n	8086fe8 <_Z16checkTemperaturev+0x88>
 8086fe4:	4911      	ldr	r1, [pc, #68]	; (808702c <_Z16checkTemperaturev+0xcc>)
 8086fe6:	e7cd      	b.n	8086f84 <_Z16checkTemperaturev+0x24>
  else if (temp_sensor_fault == MAX31865_FAULT_RTDINLOW) Log.warn("RTD < 0.85*Bais, FORCE-open");
 8086fe8:	2808      	cmp	r0, #8
 8086fea:	d101      	bne.n	8086ff0 <_Z16checkTemperaturev+0x90>
 8086fec:	4910      	ldr	r1, [pc, #64]	; (8087030 <_Z16checkTemperaturev+0xd0>)
 8086fee:	e7c9      	b.n	8086f84 <_Z16checkTemperaturev+0x24>
  else if (temp_sensor_fault == MAX31865_FAULT_OVUV) Log.warn("over/under voltage");
 8086ff0:	2804      	cmp	r0, #4
 8086ff2:	d1ca      	bne.n	8086f8a <_Z16checkTemperaturev+0x2a>
 8086ff4:	490f      	ldr	r1, [pc, #60]	; (8087034 <_Z16checkTemperaturev+0xd4>)
 8086ff6:	e7c5      	b.n	8086f84 <_Z16checkTemperaturev+0x24>
 8086ff8:	200013dc 	.word	0x200013dc
 8086ffc:	43d70000 	.word	0x43d70000
 8087000:	42c80000 	.word	0x42c80000
 8087004:	08093a13 	.word	0x08093a13
 8087008:	200015a4 	.word	0x200015a4
 808700c:	20000dac 	.word	0x20000dac
 8087010:	20000db0 	.word	0x20000db0
 8087014:	200005b0 	.word	0x200005b0
 8087018:	080848f9 	.word	0x080848f9
 808701c:	448ae38d 	.word	0x448ae38d
 8087020:	08093a26 	.word	0x08093a26
 8087024:	08093a39 	.word	0x08093a39
 8087028:	08093a4b 	.word	0x08093a4b
 808702c:	08093a5d 	.word	0x08093a5d
 8087030:	08093a7b 	.word	0x08093a7b
 8087034:	08093a97 	.word	0x08093a97

08087038 <_Z14getBattVoltagev>:

float getBattVoltage()
{
 8087038:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808703a:	2506      	movs	r5, #6
  int batt_adc_rollavg = 0;
 808703c:	2400      	movs	r4, #0

  for (int i = 0; i <= NUMBER_OF_SAMPLES; i++)
  { 
    // Sample battery voltage ADC channel
    batt_adc_rollavg += analogRead(VIN_INPUT);
 808703e:	200f      	movs	r0, #15
 8087040:	f009 fc12 	bl	8090868 <analogRead>
 8087044:	4404      	add	r4, r0
    delay(1);
 8087046:	2001      	movs	r0, #1
 8087048:	f006 fb07 	bl	808d65a <delay>
  for (int i = 0; i <= NUMBER_OF_SAMPLES; i++)
 808704c:	3d01      	subs	r5, #1
 808704e:	d1f6      	bne.n	808703e <_Z14getBattVoltagev+0x6>
  }

  batt_adc_rollavg /= NUMBER_OF_SAMPLES;
  uint16_t batt_volt = map((long)batt_adc_rollavg, min_in, max_in, 1000, 2900);
 8087050:	f640 3354 	movw	r3, #2900	; 0xb54
 8087054:	2005      	movs	r0, #5
 8087056:	f241 1207 	movw	r2, #4359	; 0x1107
 808705a:	f240 51ce 	movw	r1, #1486	; 0x5ce
 808705e:	9300      	str	r3, [sp, #0]
 8087060:	fb94 f0f0 	sdiv	r0, r4, r0
 8087064:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8087068:	f006 fab0 	bl	808d5cc <_Z3mapiiiii>

  float batt_f = (float)batt_volt / 100.0;
 808706c:	b280      	uxth	r0, r0
 808706e:	f00a fae7 	bl	8091640 <__aeabi_ui2f>
 8087072:	4902      	ldr	r1, [pc, #8]	; (808707c <_Z14getBattVoltagev+0x44>)
 8087074:	f00a fbf0 	bl	8091858 <__aeabi_fdiv>

  return batt_f;
}
 8087078:	b003      	add	sp, #12
 808707a:	bd30      	pop	{r4, r5, pc}
 808707c:	42c80000 	.word	0x42c80000

08087080 <_Z14getFuelVoltagev>:

// Sample voltage corresponding to fuel level
float getFuelVoltage()
{
 8087080:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8087082:	2406      	movs	r4, #6
  int fuel_adc_rollavg = 0;
 8087084:	2500      	movs	r5, #0

  for (int i = 0; i <= NUMBER_OF_SAMPLES; i++)
  { 
    // Sample fuel level voltage ADC channel
    fuel_adc_rollavg += analogRead(ANALOG_INPUT_1);
 8087086:	200e      	movs	r0, #14
 8087088:	f009 fbee 	bl	8090868 <analogRead>
 808708c:	4405      	add	r5, r0
    delay(1);
 808708e:	2001      	movs	r0, #1
 8087090:	f006 fae3 	bl	808d65a <delay>
  for (int i = 0; i <= NUMBER_OF_SAMPLES; i++)
 8087094:	3c01      	subs	r4, #1
 8087096:	d1f6      	bne.n	8087086 <_Z14getFuelVoltagev+0x6>
  }

  fuel_adc_rollavg /= NUMBER_OF_SAMPLES;
  uint16_t fuel_volt = map((long)fuel_adc_rollavg, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 1000);
 8087098:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808709c:	2005      	movs	r0, #5
 808709e:	f640 62a1 	movw	r2, #3745	; 0xea1
 80870a2:	4621      	mov	r1, r4
 80870a4:	9300      	str	r3, [sp, #0]
 80870a6:	fb95 f0f0 	sdiv	r0, r5, r0
 80870aa:	4623      	mov	r3, r4
 80870ac:	f006 fa8e 	bl	808d5cc <_Z3mapiiiii>
  float fuel_f = fuel_volt / 100.0;
 80870b0:	b280      	uxth	r0, r0
 80870b2:	f009 fe9b 	bl	8090dec <__aeabi_i2d>
 80870b6:	2200      	movs	r2, #0
 80870b8:	4b03      	ldr	r3, [pc, #12]	; (80870c8 <_Z14getFuelVoltagev+0x48>)
 80870ba:	f00a f82b 	bl	8091114 <__aeabi_ddiv>
 80870be:	f00a f9b9 	bl	8091434 <__aeabi_d2f>

  return fuel_f;
}
 80870c2:	b003      	add	sp, #12
 80870c4:	bd30      	pop	{r4, r5, pc}
 80870c6:	bf00      	nop
 80870c8:	40590000 	.word	0x40590000
 80870cc:	00000000 	.word	0x00000000

080870d0 <_Z21getPyranomterReadingsv>:

// Sample voltage corresponding to pyranomter sensor readings
float getPyranomterReadings()
{
 80870d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80870d2:	2506      	movs	r5, #6
  int pyr_adc_rollavg = 0;
 80870d4:	2400      	movs	r4, #0
{
 80870d6:	b087      	sub	sp, #28

  for (int i = 0; i <= NUMBER_OF_SAMPLES; i++)
  { 
    // Sample ADC channel
    pyr_adc_rollavg += analogRead(ANALOG_INPUT_2);
 80870d8:	2010      	movs	r0, #16
 80870da:	f009 fbc5 	bl	8090868 <analogRead>
 80870de:	4404      	add	r4, r0
    delay(1);
 80870e0:	2001      	movs	r0, #1
 80870e2:	f006 faba 	bl	808d65a <delay>
  for (int i = 0; i <= NUMBER_OF_SAMPLES; i++)
 80870e6:	3d01      	subs	r5, #1
 80870e8:	d1f6      	bne.n	80870d8 <_Z21getPyranomterReadingsv+0x8>
  }

  pyr_adc_rollavg /= NUMBER_OF_SAMPLES;

  // Calculate real world voltage
  double pyr_volt = map((double)pyr_adc_rollavg, (double)MIN_ADC_VALUE, (double)MAX_ADC_VALUE, (double)0, (double)1000);
 80870ea:	2005      	movs	r0, #5
 80870ec:	2600      	movs	r6, #0
 80870ee:	2700      	movs	r7, #0
 80870f0:	fb94 f0f0 	sdiv	r0, r4, r0
 80870f4:	2400      	movs	r4, #0
 80870f6:	4d14      	ldr	r5, [pc, #80]	; (8087148 <_Z21getPyranomterReadingsv+0x78>)
 80870f8:	f009 fe78 	bl	8090dec <__aeabi_i2d>
 80870fc:	a30e      	add	r3, pc, #56	; (adr r3, 8087138 <_Z21getPyranomterReadingsv+0x68>)
 80870fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8087102:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8087106:	e9cd 2300 	strd	r2, r3, [sp]
 808710a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 808710e:	4632      	mov	r2, r6
 8087110:	463b      	mov	r3, r7
 8087112:	f006 fa67 	bl	808d5e4 <_Z3mapddddd>
  // Pyranometer input voltage in mv
  pyr_volt = (pyr_volt / 100.0) * 1000;
 8087116:	2200      	movs	r2, #0
 8087118:	4b0c      	ldr	r3, [pc, #48]	; (808714c <_Z21getPyranomterReadingsv+0x7c>)
 808711a:	f009 fffb 	bl	8091114 <__aeabi_ddiv>
 808711e:	4622      	mov	r2, r4
 8087120:	462b      	mov	r3, r5
 8087122:	f009 fecd 	bl	8090ec0 <__aeabi_dmul>
  
  // Return shortwave radiation from the input analog voltage (W m^-2)
  return PYRANOMETER_CALIBRATION_FACTOR * pyr_volt;
 8087126:	a306      	add	r3, pc, #24	; (adr r3, 8087140 <_Z21getPyranomterReadingsv+0x70>)
 8087128:	e9d3 2300 	ldrd	r2, r3, [r3]
 808712c:	f009 fec8 	bl	8090ec0 <__aeabi_dmul>
 8087130:	f00a f980 	bl	8091434 <__aeabi_d2f>
}
 8087134:	b007      	add	sp, #28
 8087136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8087138:	00000000 	.word	0x00000000
 808713c:	40ad4200 	.word	0x40ad4200
 8087140:	9999999a 	.word	0x9999999a
 8087144:	3fd99999 	.word	0x3fd99999
 8087148:	408f4000 	.word	0x408f4000
 808714c:	40590000 	.word	0x40590000

08087150 <_Z18initSensorReadingsv>:

void initSensorReadings()
{
  // get status of all sensor readings
  sensor_reading_status = mainGXConfig.SENSOR_READINGS_STATUS;
 8087150:	4b06      	ldr	r3, [pc, #24]	; (808716c <_Z18initSensorReadingsv+0x1c>)
 8087152:	4a07      	ldr	r2, [pc, #28]	; (8087170 <_Z18initSensorReadingsv+0x20>)
 8087154:	f8b3 106e 	ldrh.w	r1, [r3, #110]	; 0x6e
 8087158:	8011      	strh	r1, [r2, #0]
  //checks if it's a new device or an already configured one ( checks if EEPROM is EMPTY)
  if (sensor_reading_status == 0xFFFF){
    sensor_reading_status = SENSOR_READINGS_DEFAULT_STATUS;
  }
  // get selected temperature sensor
  selected_temperature_sensor = mainGXConfig.SELECTED_TEMPERATURE_SENSOR;
 808715a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
  if ( selected_temperature_sensor < 0 || selected_temperature_sensor > 1 )
 808715e:	4b05      	ldr	r3, [pc, #20]	; (8087174 <_Z18initSensorReadingsv+0x24>)
 8087160:	2a01      	cmp	r2, #1
    selected_temperature_sensor = 0;
 8087162:	bf88      	it	hi
 8087164:	2200      	movhi	r2, #0
 8087166:	701a      	strb	r2, [r3, #0]
}
 8087168:	4770      	bx	lr
 808716a:	bf00      	nop
 808716c:	20001268 	.word	0x20001268
 8087170:	20000dc0 	.word	0x20000dc0
 8087174:	20000dbf 	.word	0x20000dbf

08087178 <_Z16getSensorBitMask6String>:

uint16_t getSensorBitMask(String sensor)
{
 8087178:	b510      	push	{r4, lr}
 808717a:	4604      	mov	r4, r0
  sensor = sensor.toLowerCase();
 808717c:	f008 ff3e 	bl	808fffc <_ZN6String11toLowerCaseEv>
 8087180:	4601      	mov	r1, r0
 8087182:	4620      	mov	r0, r4
 8087184:	f008 fdc3 	bl	808fd0e <_ZN6StringaSERKS_>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8087188:	4620      	mov	r0, r4
 808718a:	4912      	ldr	r1, [pc, #72]	; (80871d4 <_Z16getSensorBitMask6String+0x5c>)
 808718c:	f008 fef7 	bl	808ff7e <_ZNK6String6equalsEPKc>
  if(sensor == "voltage")
 8087190:	b9b8      	cbnz	r0, 80871c2 <_Z16getSensorBitMask6String+0x4a>
 8087192:	4620      	mov	r0, r4
 8087194:	4910      	ldr	r1, [pc, #64]	; (80871d8 <_Z16getSensorBitMask6String+0x60>)
 8087196:	f008 fef2 	bl	808ff7e <_ZNK6String6equalsEPKc>
    return VOLT_READINGS;
  else if(sensor == "fuel level")
 808719a:	b9a0      	cbnz	r0, 80871c6 <_Z16getSensorBitMask6String+0x4e>
 808719c:	4620      	mov	r0, r4
 808719e:	490f      	ldr	r1, [pc, #60]	; (80871dc <_Z16getSensorBitMask6String+0x64>)
 80871a0:	f008 feed 	bl	808ff7e <_ZNK6String6equalsEPKc>
    return FUEL_LEVEL_READINGS;
  else if(sensor == "pyranometer")
 80871a4:	b988      	cbnz	r0, 80871ca <_Z16getSensorBitMask6String+0x52>
 80871a6:	4620      	mov	r0, r4
 80871a8:	490d      	ldr	r1, [pc, #52]	; (80871e0 <_Z16getSensorBitMask6String+0x68>)
 80871aa:	f008 fee8 	bl	808ff7e <_ZNK6String6equalsEPKc>
    return PYRANOMETER_READINGS;
  else if(sensor == "temperature")
 80871ae:	b970      	cbnz	r0, 80871ce <_Z16getSensorBitMask6String+0x56>
 80871b0:	4620      	mov	r0, r4
 80871b2:	490c      	ldr	r1, [pc, #48]	; (80871e4 <_Z16getSensorBitMask6String+0x6c>)
 80871b4:	f008 fee3 	bl	808ff7e <_ZNK6String6equalsEPKc>
    return TEMPERATURE_READINGS;
  else if(sensor == "res sensor")
 80871b8:	2800      	cmp	r0, #0
    return RES_SENSOR_READINGS;
 80871ba:	bf0c      	ite	eq
 80871bc:	2000      	moveq	r0, #0
 80871be:	2010      	movne	r0, #16
  return 0;
}
 80871c0:	bd10      	pop	{r4, pc}
    return VOLT_READINGS;
 80871c2:	2001      	movs	r0, #1
 80871c4:	e7fc      	b.n	80871c0 <_Z16getSensorBitMask6String+0x48>
    return FUEL_LEVEL_READINGS;
 80871c6:	2002      	movs	r0, #2
 80871c8:	e7fa      	b.n	80871c0 <_Z16getSensorBitMask6String+0x48>
    return PYRANOMETER_READINGS;
 80871ca:	2004      	movs	r0, #4
 80871cc:	e7f8      	b.n	80871c0 <_Z16getSensorBitMask6String+0x48>
    return TEMPERATURE_READINGS;
 80871ce:	2008      	movs	r0, #8
 80871d0:	e7f6      	b.n	80871c0 <_Z16getSensorBitMask6String+0x48>
 80871d2:	bf00      	nop
 80871d4:	08093aa2 	.word	0x08093aa2
 80871d8:	08093aaa 	.word	0x08093aaa
 80871dc:	08093ab5 	.word	0x08093ab5
 80871e0:	08093ac1 	.word	0x08093ac1
 80871e4:	08093acd 	.word	0x08093acd

080871e8 <_Z22setSensorReadingStatus6String>:

int setSensorReadingStatus(String commandParameter)
{
 80871e8:	b510      	push	{r4, lr}
 80871ea:	4604      	mov	r4, r0
 80871ec:	b08c      	sub	sp, #48	; 0x30
  String sensor = getStringValueAtIndex(commandParameter, ',', 0);
 80871ee:	4601      	mov	r1, r0
 80871f0:	a808      	add	r0, sp, #32
 80871f2:	f008 fd9b 	bl	808fd2c <_ZN6StringC1ERKS_>
 80871f6:	2300      	movs	r3, #0
 80871f8:	222c      	movs	r2, #44	; 0x2c
 80871fa:	a908      	add	r1, sp, #32
 80871fc:	4668      	mov	r0, sp
 80871fe:	f002 f9a3 	bl	8089548 <_Z21getStringValueAtIndex6Stringci>
 8087202:	a808      	add	r0, sp, #32
 8087204:	f008 fcfe 	bl	808fc04 <_ZN6StringD1Ev>
  String status = getStringValueAtIndex(commandParameter, ',', 1);
 8087208:	4621      	mov	r1, r4
 808720a:	a808      	add	r0, sp, #32
 808720c:	f008 fd8e 	bl	808fd2c <_ZN6StringC1ERKS_>
 8087210:	2301      	movs	r3, #1
 8087212:	222c      	movs	r2, #44	; 0x2c
 8087214:	a908      	add	r1, sp, #32
 8087216:	a804      	add	r0, sp, #16
 8087218:	f002 f996 	bl	8089548 <_Z21getStringValueAtIndex6Stringci>
 808721c:	a808      	add	r0, sp, #32
 808721e:	f008 fcf1 	bl	808fc04 <_ZN6StringD1Ev>

  uint16_t sensor_bit_mask = getSensorBitMask(sensor);
 8087222:	4669      	mov	r1, sp
 8087224:	a808      	add	r0, sp, #32
 8087226:	f008 fd81 	bl	808fd2c <_ZN6StringC1ERKS_>
 808722a:	a808      	add	r0, sp, #32
 808722c:	f7ff ffa4 	bl	8087178 <_Z16getSensorBitMask6String>
 8087230:	4604      	mov	r4, r0
 8087232:	a808      	add	r0, sp, #32
 8087234:	f008 fce6 	bl	808fc04 <_ZN6StringD1Ev>
  // If sensor name is incorrect
  if(sensor_bit_mask == 0)
 8087238:	b954      	cbnz	r4, 8087250 <_Z22setSensorReadingStatus6String+0x68>
    return -1;
 808723a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  String status = getStringValueAtIndex(commandParameter, ',', 1);
 808723e:	a804      	add	r0, sp, #16
 8087240:	f008 fce0 	bl	808fc04 <_ZN6StringD1Ev>
  String sensor = getStringValueAtIndex(commandParameter, ',', 0);
 8087244:	4668      	mov	r0, sp
 8087246:	f008 fcdd 	bl	808fc04 <_ZN6StringD1Ev>
  if(validateConfigurations() == false){ return CONFIG_INVALID;}

  mainGXConfig.SENSOR_READINGS_STATUS = sensor_reading_status;
  storeConfigurations();
  return 1;
}
 808724a:	4620      	mov	r0, r4
 808724c:	b00c      	add	sp, #48	; 0x30
 808724e:	bd10      	pop	{r4, pc}
  if(atoi(status) == 1)
 8087250:	9804      	ldr	r0, [sp, #16]
 8087252:	f00a fde9 	bl	8091e28 <atoi>
 8087256:	2801      	cmp	r0, #1
 8087258:	d10f      	bne.n	808727a <_Z22setSensorReadingStatus6String+0x92>
    sensor_reading_status |= sensor_bit_mask;
 808725a:	4b0e      	ldr	r3, [pc, #56]	; (8087294 <_Z22setSensorReadingStatus6String+0xac>)
 808725c:	8818      	ldrh	r0, [r3, #0]
 808725e:	4304      	orrs	r4, r0
    sensor_reading_status &= ~sensor_bit_mask;
 8087260:	801c      	strh	r4, [r3, #0]
  if(validateConfigurations() == false){ return CONFIG_INVALID;}
 8087262:	f005 fd89 	bl	808cd78 <_Z22validateConfigurationsv>
 8087266:	b190      	cbz	r0, 808728e <_Z22setSensorReadingStatus6String+0xa6>
  mainGXConfig.SENSOR_READINGS_STATUS = sensor_reading_status;
 8087268:	4b0a      	ldr	r3, [pc, #40]	; (8087294 <_Z22setSensorReadingStatus6String+0xac>)
  return 1;
 808726a:	2401      	movs	r4, #1
  mainGXConfig.SENSOR_READINGS_STATUS = sensor_reading_status;
 808726c:	881a      	ldrh	r2, [r3, #0]
 808726e:	4b0a      	ldr	r3, [pc, #40]	; (8087298 <_Z22setSensorReadingStatus6String+0xb0>)
 8087270:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
  storeConfigurations();
 8087274:	f005 fdac 	bl	808cdd0 <_Z19storeConfigurationsv>
  return 1;
 8087278:	e7e1      	b.n	808723e <_Z22setSensorReadingStatus6String+0x56>
  else if(atoi(status) == 0)
 808727a:	9804      	ldr	r0, [sp, #16]
 808727c:	f00a fdd4 	bl	8091e28 <atoi>
 8087280:	2800      	cmp	r0, #0
 8087282:	d1da      	bne.n	808723a <_Z22setSensorReadingStatus6String+0x52>
    sensor_reading_status &= ~sensor_bit_mask;
 8087284:	4b03      	ldr	r3, [pc, #12]	; (8087294 <_Z22setSensorReadingStatus6String+0xac>)
 8087286:	8818      	ldrh	r0, [r3, #0]
 8087288:	ea20 0404 	bic.w	r4, r0, r4
 808728c:	e7e8      	b.n	8087260 <_Z22setSensorReadingStatus6String+0x78>
  if(validateConfigurations() == false){ return CONFIG_INVALID;}
 808728e:	f06f 0415 	mvn.w	r4, #21
 8087292:	e7d4      	b.n	808723e <_Z22setSensorReadingStatus6String+0x56>
 8087294:	20000dc0 	.word	0x20000dc0
 8087298:	20001268 	.word	0x20001268

0808729c <_Z10binaryRead6String>:

int binaryRead(String commandParameter)
{
 808729c:	b510      	push	{r4, lr}
 808729e:	4908      	ldr	r1, [pc, #32]	; (80872c0 <_Z10binaryRead6String+0x24>)
 80872a0:	4604      	mov	r4, r0
 80872a2:	f008 fe6c 	bl	808ff7e <_ZNK6String6equalsEPKc>
  return (commandParameter == "") ? binaryInputChange() : binaryInputChange((uint8_t)atoi(commandParameter));
 80872a6:	b938      	cbnz	r0, 80872b8 <_Z10binaryRead6String+0x1c>
 80872a8:	6820      	ldr	r0, [r4, #0]
 80872aa:	f00a fdbd 	bl	8091e28 <atoi>
}
 80872ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (commandParameter == "") ? binaryInputChange() : binaryInputChange((uint8_t)atoi(commandParameter));
 80872b2:	b2c0      	uxtb	r0, r0
 80872b4:	f7ff bd7e 	b.w	8086db4 <_Z17binaryInputChangeh>
  readBinaryInputs();
 80872b8:	f7ff fd9a 	bl	8086df0 <_Z16readBinaryInputsv>
}
 80872bc:	20c8      	movs	r0, #200	; 0xc8
 80872be:	bd10      	pop	{r4, pc}
 80872c0:	08094ad5 	.word	0x08094ad5

080872c4 <_Z23selectTemperatureSensor6String>:

int selectTemperatureSensor(String commandParameter)
{
 80872c4:	b538      	push	{r3, r4, r5, lr}
 80872c6:	4604      	mov	r4, r0
  commandParameter = commandParameter.toLowerCase();
 80872c8:	f008 fe98 	bl	808fffc <_ZN6String11toLowerCaseEv>
 80872cc:	4601      	mov	r1, r0
 80872ce:	4620      	mov	r0, r4
 80872d0:	f008 fd1d 	bl	808fd0e <_ZN6StringaSERKS_>
 80872d4:	4620      	mov	r0, r4
 80872d6:	4911      	ldr	r1, [pc, #68]	; (808731c <_Z23selectTemperatureSensor6String+0x58>)
 80872d8:	f008 fe51 	bl	808ff7e <_ZNK6String6equalsEPKc>
  if(commandParameter == "digital")
 80872dc:	4605      	mov	r5, r0
 80872de:	b170      	cbz	r0, 80872fe <_Z23selectTemperatureSensor6String+0x3a>
    selected_temperature_sensor = DIGITAL_INPUT;
 80872e0:	2201      	movs	r2, #1
 80872e2:	4b0f      	ldr	r3, [pc, #60]	; (8087320 <_Z23selectTemperatureSensor6String+0x5c>)
 80872e4:	701a      	strb	r2, [r3, #0]
    selected_temperature_sensor = ANALOG_INPUT;
  else 
    return -1;
  
  // Check if the configurations in EEPROM are still valid
  if(validateConfigurations() == false){ return CONFIG_INVALID;}
 80872e6:	f005 fd47 	bl	808cd78 <_Z22validateConfigurationsv>
 80872ea:	b198      	cbz	r0, 8087314 <_Z23selectTemperatureSensor6String+0x50>

  mainGXConfig.SELECTED_TEMPERATURE_SENSOR = selected_temperature_sensor;
 80872ec:	4b0c      	ldr	r3, [pc, #48]	; (8087320 <_Z23selectTemperatureSensor6String+0x5c>)
 80872ee:	781a      	ldrb	r2, [r3, #0]
 80872f0:	4b0c      	ldr	r3, [pc, #48]	; (8087324 <_Z23selectTemperatureSensor6String+0x60>)
 80872f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  storeConfigurations();
 80872f6:	f005 fd6b 	bl	808cdd0 <_Z19storeConfigurationsv>
  return 1;
 80872fa:	2001      	movs	r0, #1
}
 80872fc:	bd38      	pop	{r3, r4, r5, pc}
 80872fe:	4620      	mov	r0, r4
 8087300:	4909      	ldr	r1, [pc, #36]	; (8087328 <_Z23selectTemperatureSensor6String+0x64>)
 8087302:	f008 fe3c 	bl	808ff7e <_ZNK6String6equalsEPKc>
  else if(commandParameter == "analog")
 8087306:	b110      	cbz	r0, 808730e <_Z23selectTemperatureSensor6String+0x4a>
    selected_temperature_sensor = ANALOG_INPUT;
 8087308:	4b05      	ldr	r3, [pc, #20]	; (8087320 <_Z23selectTemperatureSensor6String+0x5c>)
 808730a:	701d      	strb	r5, [r3, #0]
 808730c:	e7eb      	b.n	80872e6 <_Z23selectTemperatureSensor6String+0x22>
    return -1;
 808730e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8087312:	e7f3      	b.n	80872fc <_Z23selectTemperatureSensor6String+0x38>
  if(validateConfigurations() == false){ return CONFIG_INVALID;}
 8087314:	f06f 0015 	mvn.w	r0, #21
 8087318:	e7f0      	b.n	80872fc <_Z23selectTemperatureSensor6String+0x38>
 808731a:	bf00      	nop
 808731c:	08093ad8 	.word	0x08093ad8
 8087320:	20000dbf 	.word	0x20000dbf
 8087324:	20001268 	.word	0x20001268
 8087328:	08093ae0 	.word	0x08093ae0

0808732c <_Z25selectedTemperatureSensorv>:

int selectedTemperatureSensor()
{
 808732c:	b530      	push	{r4, r5, lr}
 808732e:	b089      	sub	sp, #36	; 0x24
  // Check if the configurations in EEPROM are still valid
  if(validateConfigurations() == false){ return CONFIG_INVALID;}
 8087330:	f005 fd22 	bl	808cd78 <_Z22validateConfigurationsv>
 8087334:	2800      	cmp	r0, #0
 8087336:	d039      	beq.n	80873ac <_Z25selectedTemperatureSensorv+0x80>
  
  String jsonString = String("{\"v\": \"1\",\n\"temp_sensor\": ");
  if (selected_temperature_sensor == ANALOG_INPUT)
 8087338:	4d1e      	ldr	r5, [pc, #120]	; (80873b4 <_Z25selectedTemperatureSensorv+0x88>)
  String jsonString = String("{\"v\": \"1\",\n\"temp_sensor\": ");
 808733a:	491f      	ldr	r1, [pc, #124]	; (80873b8 <_Z25selectedTemperatureSensorv+0x8c>)
 808733c:	a804      	add	r0, sp, #16
 808733e:	f008 fcab 	bl	808fc98 <_ZN6StringC1EPKc>
  if (selected_temperature_sensor == ANALOG_INPUT)
 8087342:	782b      	ldrb	r3, [r5, #0]
 8087344:	2b00      	cmp	r3, #0
 8087346:	d12d      	bne.n	80873a4 <_Z25selectedTemperatureSensorv+0x78>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8087348:	491c      	ldr	r1, [pc, #112]	; (80873bc <_Z25selectedTemperatureSensorv+0x90>)
 808734a:	a804      	add	r0, sp, #16
 808734c:	f008 fdb9 	bl	808fec2 <_ZN6String6concatEPKc>
 8087350:	491b      	ldr	r1, [pc, #108]	; (80873c0 <_Z25selectedTemperatureSensorv+0x94>)
 8087352:	a804      	add	r0, sp, #16
 8087354:	f008 fdb5 	bl	808fec2 <_ZN6String6concatEPKc>
    return Flags<TagT, ValueT>(val_ | flags.val_);
 8087358:	4b1a      	ldr	r3, [pc, #104]	; (80873c4 <_Z25selectedTemperatureSensorv+0x98>)
 808735a:	4a1b      	ldr	r2, [pc, #108]	; (80873c8 <_Z25selectedTemperatureSensorv+0x9c>)
 808735c:	781b      	ldrb	r3, [r3, #0]
 808735e:	7812      	ldrb	r2, [r2, #0]
 8087360:	491a      	ldr	r1, [pc, #104]	; (80873cc <_Z25selectedTemperatureSensorv+0xa0>)
 8087362:	4313      	orrs	r3, r2
 8087364:	f88d 3000 	strb.w	r3, [sp]
 8087368:	9a04      	ldr	r2, [sp, #16]
 808736a:	233c      	movs	r3, #60	; 0x3c
 808736c:	a802      	add	r0, sp, #8
 808736e:	f006 fb5b 	bl	808da28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
 8087372:	9c03      	ldr	r4, [sp, #12]
 8087374:	b17c      	cbz	r4, 8087396 <_Z25selectedTemperatureSensorv+0x6a>
      if (--_M_use_count == 0)
 8087376:	6863      	ldr	r3, [r4, #4]
 8087378:	3b01      	subs	r3, #1
 808737a:	6063      	str	r3, [r4, #4]
 808737c:	b95b      	cbnz	r3, 8087396 <_Z25selectedTemperatureSensorv+0x6a>
          _M_dispose();
 808737e:	6823      	ldr	r3, [r4, #0]
 8087380:	4620      	mov	r0, r4
 8087382:	689b      	ldr	r3, [r3, #8]
 8087384:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8087386:	68a3      	ldr	r3, [r4, #8]
 8087388:	3b01      	subs	r3, #1
 808738a:	60a3      	str	r3, [r4, #8]
 808738c:	b91b      	cbnz	r3, 8087396 <_Z25selectedTemperatureSensorv+0x6a>
            _M_destroy();
 808738e:	6823      	ldr	r3, [r4, #0]
 8087390:	4620      	mov	r0, r4
 8087392:	68db      	ldr	r3, [r3, #12]
 8087394:	4798      	blx	r3
  String jsonString = String("{\"v\": \"1\",\n\"temp_sensor\": ");
 8087396:	a804      	add	r0, sp, #16
  else if (selected_temperature_sensor == DIGITAL_INPUT)
    jsonString += "\"Digital\"\n";

  jsonString += "}\n";
  Particle.publish("gx_event", jsonString, PRIVATE, WITH_ACK);
  return selected_temperature_sensor;
 8087398:	782c      	ldrb	r4, [r5, #0]
  String jsonString = String("{\"v\": \"1\",\n\"temp_sensor\": ");
 808739a:	f008 fc33 	bl	808fc04 <_ZN6StringD1Ev>
}
 808739e:	4620      	mov	r0, r4
 80873a0:	b009      	add	sp, #36	; 0x24
 80873a2:	bd30      	pop	{r4, r5, pc}
  else if (selected_temperature_sensor == DIGITAL_INPUT)
 80873a4:	2b01      	cmp	r3, #1
 80873a6:	d1d3      	bne.n	8087350 <_Z25selectedTemperatureSensorv+0x24>
 80873a8:	4909      	ldr	r1, [pc, #36]	; (80873d0 <_Z25selectedTemperatureSensorv+0xa4>)
 80873aa:	e7ce      	b.n	808734a <_Z25selectedTemperatureSensorv+0x1e>
  if(validateConfigurations() == false){ return CONFIG_INVALID;}
 80873ac:	f06f 0415 	mvn.w	r4, #21
 80873b0:	e7f5      	b.n	808739e <_Z25selectedTemperatureSensorv+0x72>
 80873b2:	bf00      	nop
 80873b4:	20000dbf 	.word	0x20000dbf
 80873b8:	08093ae7 	.word	0x08093ae7
 80873bc:	080942f5 	.word	0x080942f5
 80873c0:	08093b02 	.word	0x08093b02
 80873c4:	20000dbc 	.word	0x20000dbc
 80873c8:	20000dbd 	.word	0x20000dbd
 80873cc:	0809386b 	.word	0x0809386b
 80873d0:	08094311 	.word	0x08094311

080873d4 <_Z29disableMetricsExceptFuelLevelv>:

int disableMetricsExceptFuelLevel()
{
 80873d4:	b508      	push	{r3, lr}
  // Verify if configurations in the EEPROM are still valid
  if(validateConfigurations() == false)
 80873d6:	f005 fccf 	bl	808cd78 <_Z22validateConfigurationsv>
 80873da:	b148      	cbz	r0, 80873f0 <_Z29disableMetricsExceptFuelLevelv+0x1c>
  { return CONFIG_INVALID; }

  //create a bitmask for fuel level readings ( having only fuel level readings enabled)
  sensor_reading_status = (1 << FUEL_LEVEL_READINGS);
 80873dc:	2304      	movs	r3, #4
 80873de:	4a06      	ldr	r2, [pc, #24]	; (80873f8 <_Z29disableMetricsExceptFuelLevelv+0x24>)
 80873e0:	8013      	strh	r3, [r2, #0]

  // save config in EEPROM
  mainGXConfig.SENSOR_READINGS_STATUS = sensor_reading_status;
 80873e2:	4a06      	ldr	r2, [pc, #24]	; (80873fc <_Z29disableMetricsExceptFuelLevelv+0x28>)
 80873e4:	f8a2 306e 	strh.w	r3, [r2, #110]	; 0x6e
  storeConfigurations();
 80873e8:	f005 fcf2 	bl	808cdd0 <_Z19storeConfigurationsv>
  
  return 1;
 80873ec:	2001      	movs	r0, #1
}
 80873ee:	bd08      	pop	{r3, pc}
  { return CONFIG_INVALID; }
 80873f0:	f06f 0015 	mvn.w	r0, #21
 80873f4:	e7fb      	b.n	80873ee <_Z29disableMetricsExceptFuelLevelv+0x1a>
 80873f6:	bf00      	nop
 80873f8:	20000dc0 	.word	0x20000dc0
 80873fc:	20001268 	.word	0x20001268

08087400 <_GLOBAL__sub_I_sensor_reading_status>:
        val_(val) {
 8087400:	2201      	movs	r2, #1
 8087402:	4b03      	ldr	r3, [pc, #12]	; (8087410 <_GLOBAL__sub_I_sensor_reading_status+0x10>)
 8087404:	701a      	strb	r2, [r3, #0]
 8087406:	2208      	movs	r2, #8
 8087408:	4b02      	ldr	r3, [pc, #8]	; (8087414 <_GLOBAL__sub_I_sensor_reading_status+0x14>)
 808740a:	701a      	strb	r2, [r3, #0]
}
 808740c:	4770      	bx	lr
 808740e:	bf00      	nop
 8087410:	20000dbc 	.word	0x20000dbc
 8087414:	20000dbd 	.word	0x20000dbd

08087418 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
 8087418:	b510      	push	{r4, lr}
 808741a:	4604      	mov	r4, r0
          _M_dispose();
 808741c:	6803      	ldr	r3, [r0, #0]
 808741e:	689b      	ldr	r3, [r3, #8]
 8087420:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8087422:	68a3      	ldr	r3, [r4, #8]
 8087424:	3b01      	subs	r3, #1
 8087426:	60a3      	str	r3, [r4, #8]
 8087428:	b92b      	cbnz	r3, 8087436 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
 808742a:	6823      	ldr	r3, [r4, #0]
 808742c:	4620      	mov	r0, r4
    }
 808742e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 8087432:	68db      	ldr	r3, [r3, #12]
 8087434:	4718      	bx	r3
    }
 8087436:	bd10      	pop	{r4, pc}

08087438 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list.isra.0>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
 8087438:	b510      	push	{r4, lr}
 808743a:	4604      	mov	r4, r0
 808743c:	4608      	mov	r0, r1
 808743e:	4619      	mov	r1, r3
    attr.flags = 0;
 8087440:	f04f 0c20 	mov.w	ip, #32
 8087444:	2300      	movs	r3, #0
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
 8087446:	b08a      	sub	sp, #40	; 0x28
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8087448:	e9cd 2100 	strd	r2, r1, [sp]
 808744c:	4621      	mov	r1, r4
 808744e:	aa02      	add	r2, sp, #8
    attr.flags = 0;
 8087450:	e9cd c302 	strd	ip, r3, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8087454:	f005 ff2a 	bl	808d2ac <log_message_v>
}
 8087458:	b00a      	add	sp, #40	; 0x28
 808745a:	bd10      	pop	{r4, pc}

0808745c <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
 808745c:	b40e      	push	{r1, r2, r3}
 808745e:	b503      	push	{r0, r1, lr}
 8087460:	ab03      	add	r3, sp, #12
 8087462:	f853 2b04 	ldr.w	r2, [r3], #4
    log(LOG_LEVEL_TRACE, fmt, args);
 8087466:	2101      	movs	r1, #1
 8087468:	6800      	ldr	r0, [r0, #0]
    va_start(args, fmt);
 808746a:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
 808746c:	f7ff ffe4 	bl	8087438 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list.isra.0>
}
 8087470:	b002      	add	sp, #8
 8087472:	f85d eb04 	ldr.w	lr, [sp], #4
 8087476:	b003      	add	sp, #12
 8087478:	4770      	bx	lr

0808747a <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
 808747a:	b40e      	push	{r1, r2, r3}
 808747c:	b503      	push	{r0, r1, lr}
 808747e:	ab03      	add	r3, sp, #12
 8087480:	f853 2b04 	ldr.w	r2, [r3], #4
    log(LOG_LEVEL_ERROR, fmt, args);
 8087484:	2132      	movs	r1, #50	; 0x32
 8087486:	6800      	ldr	r0, [r0, #0]
    va_start(args, fmt);
 8087488:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
 808748a:	f7ff ffd5 	bl	8087438 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list.isra.0>
}
 808748e:	b002      	add	sp, #8
 8087490:	f85d eb04 	ldr.w	lr, [sp], #4
 8087494:	b003      	add	sp, #12
 8087496:	4770      	bx	lr

08087498 <_Z17performSHYFTResetv>:
  Log.info("Hitting resetDelay timer!");
  performSHYFTReset();
}

void performSHYFTReset()
{
 8087498:	b507      	push	{r0, r1, r2, lr}
  Log.trace("Going down for system reset. See ya later.");
 808749a:	490b      	ldr	r1, [pc, #44]	; (80874c8 <_Z17performSHYFTResetv+0x30>)
 808749c:	480b      	ldr	r0, [pc, #44]	; (80874cc <_Z17performSHYFTResetv+0x34>)
 808749e:	f7ff ffdd 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>

  if (hardResetRequested)
 80874a2:	4b0b      	ldr	r3, [pc, #44]	; (80874d0 <_Z17performSHYFTResetv+0x38>)
 80874a4:	781b      	ldrb	r3, [r3, #0]
 80874a6:	b14b      	cbz	r3, 80874bc <_Z17performSHYFTResetv+0x24>
  {
    System.sleep(SLEEP_MODE_DEEP, 5);
 80874a8:	4b0a      	ldr	r3, [pc, #40]	; (80874d4 <_Z17performSHYFTResetv+0x3c>)
 80874aa:	2205      	movs	r2, #5
 80874ac:	2101      	movs	r1, #1
 80874ae:	4668      	mov	r0, sp
 80874b0:	681b      	ldr	r3, [r3, #0]
 80874b2:	f008 fe2b 	bl	809010c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
  }
  else
  {
    System.reset();
  }
}
 80874b6:	b003      	add	sp, #12
 80874b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80874bc:	b003      	add	sp, #12
 80874be:	f85d eb04 	ldr.w	lr, [sp], #4
    System.reset();
 80874c2:	f008 be20 	b.w	8090106 <_ZN11SystemClass5resetEv>
 80874c6:	bf00      	nop
 80874c8:	08093b05 	.word	0x08093b05
 80874cc:	200015a4 	.word	0x200015a4
 80874d0:	20000dda 	.word	0x20000dda
 80874d4:	20000dd4 	.word	0x20000dd4

080874d8 <_Z20setPerformSHYFTResetv>:
{
 80874d8:	b508      	push	{r3, lr}
  Log.info("Hitting resetDelay timer!");
 80874da:	4904      	ldr	r1, [pc, #16]	; (80874ec <_Z20setPerformSHYFTResetv+0x14>)
 80874dc:	4804      	ldr	r0, [pc, #16]	; (80874f0 <_Z20setPerformSHYFTResetv+0x18>)
 80874de:	f7fe fa59 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
}
 80874e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  performSHYFTReset();
 80874e6:	f7ff bfd7 	b.w	8087498 <_Z17performSHYFTResetv>
 80874ea:	bf00      	nop
 80874ec:	08093b30 	.word	0x08093b30
 80874f0:	200015a4 	.word	0x200015a4

080874f4 <_Z17triggerCloudReset6String>:

int triggerCloudReset(String command)
{
 80874f4:	b513      	push	{r0, r1, r4, lr}
 80874f6:	4604      	mov	r4, r0
  Log.info("Received cloud reset command: resetting momentarily.");
 80874f8:	4915      	ldr	r1, [pc, #84]	; (8087550 <_Z17triggerCloudReset6String+0x5c>)
 80874fa:	4816      	ldr	r0, [pc, #88]	; (8087554 <_Z17triggerCloudReset6String+0x60>)
 80874fc:	f7fe fa4a 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8087500:	4620      	mov	r0, r4
 8087502:	4915      	ldr	r1, [pc, #84]	; (8087558 <_Z17triggerCloudReset6String+0x64>)
 8087504:	f008 fd3b 	bl	808ff7e <_ZNK6String6equalsEPKc>

  Reset::Reason resetReason;

  if (command == "1")
 8087508:	b1f8      	cbz	r0, 808754a <_Z17triggerCloudReset6String+0x56>
  {
    hardResetRequested = true;
 808750a:	2201      	movs	r2, #1
    resetReason = Reset::Reason::CLOUD_RESET_HARD;
 808750c:	218a      	movs	r1, #138	; 0x8a
    hardResetRequested = true;
 808750e:	4b13      	ldr	r3, [pc, #76]	; (808755c <_Z17triggerCloudReset6String+0x68>)
 8087510:	701a      	strb	r2, [r3, #0]
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 8087512:	4c13      	ldr	r4, [pc, #76]	; (8087560 <_Z17triggerCloudReset6String+0x6c>)
  else
  {
    resetReason = Reset::Reason::CLOUD_RESET;
  }

  shyftStateMan.syncResetReason(resetReason, false);
 8087514:	4813      	ldr	r0, [pc, #76]	; (8087564 <_Z17triggerCloudReset6String+0x70>)
 8087516:	2200      	movs	r2, #0
 8087518:	f001 ffe6 	bl	80894e8 <_ZN14SHYFTStateSync15syncResetReasonEN5Reset6ReasonEb>
 808751c:	68a0      	ldr	r0, [r4, #8]
 808751e:	b130      	cbz	r0, 808752e <_Z17triggerCloudReset6String+0x3a>
 8087520:	2300      	movs	r3, #0
 8087522:	2102      	movs	r1, #2
 8087524:	461a      	mov	r2, r3
 8087526:	e9cd 3300 	strd	r3, r3, [sp]
 808752a:	f005 fcaf 	bl	808ce8c <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
 808752e:	68a0      	ldr	r0, [r4, #8]
 8087530:	b140      	cbz	r0, 8087544 <_Z17triggerCloudReset6String+0x50>
 8087532:	2300      	movs	r3, #0
 8087534:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8087538:	4619      	mov	r1, r3
 808753a:	e9cd 2300 	strd	r2, r3, [sp]
 808753e:	461a      	mov	r2, r3
 8087540:	f005 fca4 	bl	808ce8c <os_timer_change>

  resetDelay.start();
  return 1;
}
 8087544:	2001      	movs	r0, #1
 8087546:	b002      	add	sp, #8
 8087548:	bd10      	pop	{r4, pc}
    resetReason = Reset::Reason::CLOUD_RESET;
 808754a:	2194      	movs	r1, #148	; 0x94
 808754c:	e7e1      	b.n	8087512 <_Z17triggerCloudReset6String+0x1e>
 808754e:	bf00      	nop
 8087550:	08093b4a 	.word	0x08093b4a
 8087554:	200015a4 	.word	0x200015a4
 8087558:	08094764 	.word	0x08094764
 808755c:	20000dda 	.word	0x20000dda
 8087560:	2000131c 	.word	0x2000131c
 8087564:	2000133c 	.word	0x2000133c

08087568 <_Z16checkHwdWatchdogv>:

void checkHwdWatchdog()
{
 8087568:	b508      	push	{r3, lr}
  digitalWrite(timer_pin, LOW);
 808756a:	2100      	movs	r1, #0
 808756c:	2007      	movs	r0, #7
 808756e:	f009 f962 	bl	8090836 <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 8087572:	2001      	movs	r0, #1
 8087574:	f005 fcda 	bl	808cf2c <HAL_Delay_Microseconds>
  delayMicroseconds(1);
  digitalWrite(timer_pin, HIGH);
}
 8087578:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(timer_pin, HIGH);
 808757c:	2101      	movs	r1, #1
 808757e:	2007      	movs	r0, #7
 8087580:	f009 b959 	b.w	8090836 <digitalWrite>

08087584 <_Z18setElectronChrgOffb>:

void setElectronChrgOff(bool disable)
{
 8087584:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8087586:	4604      	mov	r4, r0
  PMIC pmic;
 8087588:	2100      	movs	r1, #0
 808758a:	a801      	add	r0, sp, #4
 808758c:	f008 f86d 	bl	808f66a <_ZN4PMICC1Eb>

  if (disable)
 8087590:	b1dc      	cbz	r4, 80875ca <_Z18setElectronChrgOffb+0x46>
  {
    Log.trace("Setting PMIC Charger Off, and FuelGauge to sleep.");
 8087592:	4915      	ldr	r1, [pc, #84]	; (80875e8 <_Z18setElectronChrgOffb+0x64>)
 8087594:	4815      	ldr	r0, [pc, #84]	; (80875ec <_Z18setElectronChrgOffb+0x68>)
 8087596:	f7ff ff61 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>
    pmic.begin();
 808759a:	a801      	add	r0, sp, #4
 808759c:	f008 f86d 	bl	808f67a <_ZN4PMIC5beginEv>
    pmic.disableBATFET();
 80875a0:	a801      	add	r0, sp, #4
 80875a2:	f008 f946 	bl	808f832 <_ZN4PMIC13disableBATFETEv>
    pmic.disableCharging();
 80875a6:	a801      	add	r0, sp, #4
 80875a8:	f008 f919 	bl	808f7de <_ZN4PMIC15disableChargingEv>

    FuelGauge fg;
 80875ac:	2100      	movs	r1, #0
 80875ae:	a802      	add	r0, sp, #8
 80875b0:	f006 fbbc 	bl	808dd2c <_ZN9FuelGaugeC1Eb>
    fg.sleep();
 80875b4:	a802      	add	r0, sp, #8
 80875b6:	f006 fcdd 	bl	808df74 <_ZN9FuelGauge5sleepEv>
    FuelGauge fg;
 80875ba:	a802      	add	r0, sp, #8
 80875bc:	f006 fbc5 	bl	808dd4a <_ZN9FuelGaugeD1Ev>
  PMIC pmic;
 80875c0:	a801      	add	r0, sp, #4
 80875c2:	f008 f871 	bl	808f6a8 <_ZN4PMICD1Ev>
    Log.trace("Setting PMIC Charger On");
    pmic.begin();
    pmic.enableBATFET();
    pmic.enableCharging();
  }
}
 80875c6:	b004      	add	sp, #16
 80875c8:	bd10      	pop	{r4, pc}
    Log.trace("Setting PMIC Charger On");
 80875ca:	4909      	ldr	r1, [pc, #36]	; (80875f0 <_Z18setElectronChrgOffb+0x6c>)
 80875cc:	4807      	ldr	r0, [pc, #28]	; (80875ec <_Z18setElectronChrgOffb+0x68>)
 80875ce:	f7ff ff45 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>
    pmic.begin();
 80875d2:	a801      	add	r0, sp, #4
 80875d4:	f008 f851 	bl	808f67a <_ZN4PMIC5beginEv>
    pmic.enableBATFET();
 80875d8:	a801      	add	r0, sp, #4
 80875da:	f008 f915 	bl	808f808 <_ZN4PMIC12enableBATFETEv>
    pmic.enableCharging();
 80875de:	a801      	add	r0, sp, #4
 80875e0:	f008 f8e6 	bl	808f7b0 <_ZN4PMIC14enableChargingEv>
 80875e4:	e7ec      	b.n	80875c0 <_Z18setElectronChrgOffb+0x3c>
 80875e6:	bf00      	nop
 80875e8:	08093b7f 	.word	0x08093b7f
 80875ec:	200015a4 	.word	0x200015a4
 80875f0:	08093bb1 	.word	0x08093bb1

080875f4 <_Z17checkLastLoopTimev>:

void checkLastLoopTime()
{
 80875f4:	b538      	push	{r3, r4, r5, lr}
  unsigned long lastLoopMillis = loop_millis;
 80875f6:	4d07      	ldr	r5, [pc, #28]	; (8087614 <_Z17checkLastLoopTimev+0x20>)
 80875f8:	682c      	ldr	r4, [r5, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80875fa:	f005 fc9f 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
  loop_millis = millis();
 80875fe:	6028      	str	r0, [r5, #0]
  unsigned long diff = loop_millis - lastLoopMillis;

  if (lastLoopMillis != 0 && diff > LONG_LOOP_THRESHOLD)
 8087600:	b13c      	cbz	r4, 8087612 <_Z17checkLastLoopTimev+0x1e>
  unsigned long diff = loop_millis - lastLoopMillis;
 8087602:	1b02      	subs	r2, r0, r4
  if (lastLoopMillis != 0 && diff > LONG_LOOP_THRESHOLD)
 8087604:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8087608:	d903      	bls.n	8087612 <_Z17checkLastLoopTimev+0x1e>
  {
    Log.warn("Warning: long loops of %lums", diff);
 808760a:	4903      	ldr	r1, [pc, #12]	; (8087618 <_Z17checkLastLoopTimev+0x24>)
 808760c:	4803      	ldr	r0, [pc, #12]	; (808761c <_Z17checkLastLoopTimev+0x28>)
 808760e:	f7ff fbb9 	bl	8086d84 <_ZNK5spark6Logger4warnEPKcz>
  }
}
 8087612:	bd38      	pop	{r3, r4, r5, pc}
 8087614:	20001264 	.word	0x20001264
 8087618:	08093bc9 	.word	0x08093bc9
 808761c:	200015a4 	.word	0x200015a4

08087620 <_Z23checkAndCleanFileSystemR8GXSpiffsR6StringPKc>:

void checkAndCleanFileSystem(GXSpiffs &GXPartition, SPIFFS_FILE_KEY &file_key, SPIFFS_PARTITION_KEY_FRMT file_name_format)
{
	GXPartition.cleanStorage(file_key, file_name_format);
 8087620:	f000 bc4e 	b.w	8087ec0 <_ZN8GXSpiffs12cleanStorageER6StringPKc>

08087624 <_Z12publishErrorPKcs>:
  publishError(src, ec);
  Log.error(err_log);
}

void publishError(const char* src, ErrCode ec)
{
 8087624:	b530      	push	{r4, r5, lr}
 8087626:	4605      	mov	r5, r0
 8087628:	b08f      	sub	sp, #60	; 0x3c
 808762a:	460c      	mov	r4, r1
  String jsonString = "{\"e\":\"gx_error\", \"s\":";
 808762c:	a802      	add	r0, sp, #8
 808762e:	4939      	ldr	r1, [pc, #228]	; (8087714 <_Z12publishErrorPKcs+0xf0>)
 8087630:	f008 fb32 	bl	808fc98 <_ZN6StringC1EPKc>
	StringSumHelper(const char *p) : String(p) {}
 8087634:	4938      	ldr	r1, [pc, #224]	; (8087718 <_Z12publishErrorPKcs+0xf4>)
 8087636:	a80a      	add	r0, sp, #40	; 0x28
 8087638:	f008 fb2e 	bl	808fc98 <_ZN6StringC1EPKc>
  jsonString += "\"" + String(src) + "\",";
 808763c:	4629      	mov	r1, r5
 808763e:	a806      	add	r0, sp, #24
 8087640:	f008 fb2a 	bl	808fc98 <_ZN6StringC1EPKc>
 8087644:	a906      	add	r1, sp, #24
 8087646:	a80a      	add	r0, sp, #40	; 0x28
 8087648:	f008 fc57 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 808764c:	4933      	ldr	r1, [pc, #204]	; (808771c <_Z12publishErrorPKcs+0xf8>)
 808764e:	f008 fc60 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 8087652:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8087654:	a802      	add	r0, sp, #8
 8087656:	f008 fc30 	bl	808feba <_ZN6String6concatERKS_>
 808765a:	a806      	add	r0, sp, #24
 808765c:	f008 fad2 	bl	808fc04 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8087660:	a80a      	add	r0, sp, #40	; 0x28
 8087662:	f008 facf 	bl	808fc04 <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
 8087666:	492e      	ldr	r1, [pc, #184]	; (8087720 <_Z12publishErrorPKcs+0xfc>)
 8087668:	a80a      	add	r0, sp, #40	; 0x28
 808766a:	f008 fb15 	bl	808fc98 <_ZN6StringC1EPKc>
  jsonString += "\"c\":\"" + String(ec) + "\"";
 808766e:	220a      	movs	r2, #10
 8087670:	4621      	mov	r1, r4
 8087672:	a806      	add	r0, sp, #24
 8087674:	f008 fb90 	bl	808fd98 <_ZN6StringC1Eih>
 8087678:	a906      	add	r1, sp, #24
 808767a:	a80a      	add	r0, sp, #40	; 0x28
 808767c:	f008 fc3d 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 8087680:	4925      	ldr	r1, [pc, #148]	; (8087718 <_Z12publishErrorPKcs+0xf4>)
 8087682:	f008 fc46 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 8087686:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8087688:	a802      	add	r0, sp, #8
 808768a:	f008 fc16 	bl	808feba <_ZN6String6concatERKS_>
 808768e:	a806      	add	r0, sp, #24
 8087690:	f008 fab8 	bl	808fc04 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8087694:	a80a      	add	r0, sp, #40	; 0x28
 8087696:	f008 fab5 	bl	808fc04 <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
 808769a:	4922      	ldr	r1, [pc, #136]	; (8087724 <_Z12publishErrorPKcs+0x100>)
 808769c:	a80a      	add	r0, sp, #40	; 0x28
 808769e:	f008 fafb 	bl	808fc98 <_ZN6StringC1EPKc>
  jsonString += (", \"ts\":" + String(Time.now()));
 80876a2:	f008 fda1 	bl	80901e8 <_ZN9TimeClass3nowEv>
 80876a6:	220a      	movs	r2, #10
 80876a8:	4601      	mov	r1, r0
 80876aa:	a806      	add	r0, sp, #24
 80876ac:	f008 fb9a 	bl	808fde4 <_ZN6StringC1Elh>
 80876b0:	a906      	add	r1, sp, #24
 80876b2:	a80a      	add	r0, sp, #40	; 0x28
 80876b4:	f008 fc21 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 80876b8:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80876ba:	a802      	add	r0, sp, #8
 80876bc:	f008 fbfd 	bl	808feba <_ZN6String6concatERKS_>
 80876c0:	a806      	add	r0, sp, #24
 80876c2:	f008 fa9f 	bl	808fc04 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80876c6:	a80a      	add	r0, sp, #40	; 0x28
 80876c8:	f008 fa9c 	bl	808fc04 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80876cc:	4916      	ldr	r1, [pc, #88]	; (8087728 <_Z12publishErrorPKcs+0x104>)
 80876ce:	a802      	add	r0, sp, #8
 80876d0:	f008 fbf7 	bl	808fec2 <_ZN6String6concatEPKc>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80876d4:	f005 fe98 	bl	808d408 <spark_cloud_flag_connected>
  jsonString += "}";

  if (!Particle.connected()) return;
 80876d8:	b920      	cbnz	r0, 80876e4 <_Z12publishErrorPKcs+0xc0>
  String jsonString = "{\"e\":\"gx_error\", \"s\":";
 80876da:	a802      	add	r0, sp, #8
 80876dc:	f008 fa92 	bl	808fc04 <_ZN6StringD1Ev>
  Particle.publish("gx_error", jsonString, PRIVATE, WITH_ACK);
}
 80876e0:	b00f      	add	sp, #60	; 0x3c
 80876e2:	bd30      	pop	{r4, r5, pc}
    return Flags<TagT, ValueT>(val_ | flags.val_);
 80876e4:	4b11      	ldr	r3, [pc, #68]	; (808772c <_Z12publishErrorPKcs+0x108>)
 80876e6:	4a12      	ldr	r2, [pc, #72]	; (8087730 <_Z12publishErrorPKcs+0x10c>)
 80876e8:	781b      	ldrb	r3, [r3, #0]
 80876ea:	7812      	ldrb	r2, [r2, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80876ec:	a80a      	add	r0, sp, #40	; 0x28
 80876ee:	4313      	orrs	r3, r2
 80876f0:	f88d 3000 	strb.w	r3, [sp]
 80876f4:	9a02      	ldr	r2, [sp, #8]
 80876f6:	233c      	movs	r3, #60	; 0x3c
 80876f8:	490e      	ldr	r1, [pc, #56]	; (8087734 <_Z12publishErrorPKcs+0x110>)
 80876fa:	f006 f995 	bl	808da28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
 80876fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8087700:	2800      	cmp	r0, #0
 8087702:	d0ea      	beq.n	80876da <_Z12publishErrorPKcs+0xb6>
      if (--_M_use_count == 0)
 8087704:	6843      	ldr	r3, [r0, #4]
 8087706:	3b01      	subs	r3, #1
 8087708:	6043      	str	r3, [r0, #4]
 808770a:	2b00      	cmp	r3, #0
 808770c:	d1e5      	bne.n	80876da <_Z12publishErrorPKcs+0xb6>
 808770e:	f7ff fe83 	bl	8087418 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
 8087712:	e7e2      	b.n	80876da <_Z12publishErrorPKcs+0xb6>
 8087714:	08093be6 	.word	0x08093be6
 8087718:	080938bf 	.word	0x080938bf
 808771c:	08094596 	.word	0x08094596
 8087720:	0809385b 	.word	0x0809385b
 8087724:	08093bfc 	.word	0x08093bfc
 8087728:	080938c5 	.word	0x080938c5
 808772c:	20000dd8 	.word	0x20000dd8
 8087730:	20000dd9 	.word	0x20000dd9
 8087734:	08093897 	.word	0x08093897

08087738 <_Z20publishAndLogMetricsR6StringPKc>:

bool publishAndLogMetrics(String &publishString, const char* logString)
{
 8087738:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 808773a:	4606      	mov	r6, r0
 808773c:	460d      	mov	r5, r1
    static bool connected(void) { return spark_cloud_flag_connected(); }
 808773e:	f005 fe63 	bl	808d408 <spark_cloud_flag_connected>
  if (!Particle.connected()) return false;
 8087742:	4604      	mov	r4, r0
 8087744:	b1c0      	cbz	r0, 8087778 <_Z20publishAndLogMetricsR6StringPKc+0x40>
 8087746:	4b0e      	ldr	r3, [pc, #56]	; (8087780 <_Z20publishAndLogMetricsR6StringPKc+0x48>)
 8087748:	4a0e      	ldr	r2, [pc, #56]	; (8087784 <_Z20publishAndLogMetricsR6StringPKc+0x4c>)
 808774a:	781b      	ldrb	r3, [r3, #0]
 808774c:	7812      	ldrb	r2, [r2, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808774e:	a802      	add	r0, sp, #8
 8087750:	4313      	orrs	r3, r2
 8087752:	f88d 3000 	strb.w	r3, [sp]
 8087756:	6832      	ldr	r2, [r6, #0]
 8087758:	233c      	movs	r3, #60	; 0x3c
 808775a:	490b      	ldr	r1, [pc, #44]	; (8087788 <_Z20publishAndLogMetricsR6StringPKc+0x50>)
 808775c:	f006 f964 	bl	808da28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
 8087760:	9803      	ldr	r0, [sp, #12]
 8087762:	b128      	cbz	r0, 8087770 <_Z20publishAndLogMetricsR6StringPKc+0x38>
      if (--_M_use_count == 0)
 8087764:	6843      	ldr	r3, [r0, #4]
 8087766:	3b01      	subs	r3, #1
 8087768:	6043      	str	r3, [r0, #4]
 808776a:	b90b      	cbnz	r3, 8087770 <_Z20publishAndLogMetricsR6StringPKc+0x38>
 808776c:	f7ff fe54 	bl	8087418 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>

  Particle.publish("gx_metrics", publishString, PRIVATE, WITH_ACK);
  Log.info(logString);
 8087770:	4629      	mov	r1, r5
 8087772:	4806      	ldr	r0, [pc, #24]	; (808778c <_Z20publishAndLogMetricsR6StringPKc+0x54>)
 8087774:	f7fe f90e 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
  return true;
}
 8087778:	4620      	mov	r0, r4
 808777a:	b004      	add	sp, #16
 808777c:	bd70      	pop	{r4, r5, r6, pc}
 808777e:	bf00      	nop
 8087780:	20000dd8 	.word	0x20000dd8
 8087784:	20000dd9 	.word	0x20000dd9
 8087788:	080938d4 	.word	0x080938d4
 808778c:	200015a4 	.word	0x200015a4

08087790 <_Z11enableFlashR6String>:

int enableFlash(String &command)
{
 8087790:	b510      	push	{r4, lr}
 8087792:	4604      	mov	r4, r0
  // Check if the configurations in EEPROM are still valid
  if(validateConfigurations() == false){ return CONFIG_INVALID;}
 8087794:	f005 faf0 	bl	808cd78 <_Z22validateConfigurationsv>
 8087798:	b330      	cbz	r0, 80877e8 <_Z11enableFlashR6String+0x58>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 808779a:	4620      	mov	r0, r4
 808779c:	4915      	ldr	r1, [pc, #84]	; (80877f4 <_Z11enableFlashR6String+0x64>)
 808779e:	f008 fbee 	bl	808ff7e <_ZNK6String6equalsEPKc>
  
  if (command == "") return mainGXConfig.USE_FLASH;
 80877a2:	b118      	cbz	r0, 80877ac <_Z11enableFlashR6String+0x1c>
 80877a4:	4b14      	ldr	r3, [pc, #80]	; (80877f8 <_Z11enableFlashR6String+0x68>)
 80877a6:	f893 0075 	ldrb.w	r0, [r3, #117]	; 0x75
  }

  storeConfigurations();

  return comm;
}
 80877aa:	bd10      	pop	{r4, pc}
  uint8_t comm = atoi(command);
 80877ac:	6820      	ldr	r0, [r4, #0]
 80877ae:	f00a fb3b 	bl	8091e28 <atoi>
 80877b2:	b2c4      	uxtb	r4, r0
  if (comm > 1) return -1;
 80877b4:	2c01      	cmp	r4, #1
 80877b6:	d81a      	bhi.n	80877ee <_Z11enableFlashR6String+0x5e>
  if (comm == 0 && use_flash != comm) {
 80877b8:	4b10      	ldr	r3, [pc, #64]	; (80877fc <_Z11enableFlashR6String+0x6c>)
 80877ba:	781a      	ldrb	r2, [r3, #0]
 80877bc:	b95c      	cbnz	r4, 80877d6 <_Z11enableFlashR6String+0x46>
 80877be:	b132      	cbz	r2, 80877ce <_Z11enableFlashR6String+0x3e>
    shouldPerformSHYFTReset = true;
 80877c0:	2201      	movs	r2, #1
    use_flash = comm;
 80877c2:	701c      	strb	r4, [r3, #0]
    mainGXConfig.USE_FLASH = use_flash;
 80877c4:	4b0c      	ldr	r3, [pc, #48]	; (80877f8 <_Z11enableFlashR6String+0x68>)
 80877c6:	f883 4075 	strb.w	r4, [r3, #117]	; 0x75
    shouldPerformSHYFTReset = true;
 80877ca:	4b0d      	ldr	r3, [pc, #52]	; (8087800 <_Z11enableFlashR6String+0x70>)
    shouldPerformSHYFTReset = true;
 80877cc:	701a      	strb	r2, [r3, #0]
  storeConfigurations();
 80877ce:	f005 faff 	bl	808cdd0 <_Z19storeConfigurationsv>
  return comm;
 80877d2:	4620      	mov	r0, r4
 80877d4:	e7e9      	b.n	80877aa <_Z11enableFlashR6String+0x1a>
  else if (comm == 1 && use_flash != comm){
 80877d6:	2a01      	cmp	r2, #1
 80877d8:	d0f9      	beq.n	80877ce <_Z11enableFlashR6String+0x3e>
    use_flash = comm;
 80877da:	2201      	movs	r2, #1
 80877dc:	701a      	strb	r2, [r3, #0]
    mainGXConfig.USE_FLASH = use_flash;
 80877de:	4b06      	ldr	r3, [pc, #24]	; (80877f8 <_Z11enableFlashR6String+0x68>)
 80877e0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    shouldPerformSHYFTReset = true;
 80877e4:	4b06      	ldr	r3, [pc, #24]	; (8087800 <_Z11enableFlashR6String+0x70>)
 80877e6:	e7f1      	b.n	80877cc <_Z11enableFlashR6String+0x3c>
  if(validateConfigurations() == false){ return CONFIG_INVALID;}
 80877e8:	f06f 0015 	mvn.w	r0, #21
 80877ec:	e7dd      	b.n	80877aa <_Z11enableFlashR6String+0x1a>
  if (comm > 1) return -1;
 80877ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80877f2:	e7da      	b.n	80877aa <_Z11enableFlashR6String+0x1a>
 80877f4:	08094ad5 	.word	0x08094ad5
 80877f8:	20001268 	.word	0x20001268
 80877fc:	20000538 	.word	0x20000538
 8087800:	20000ddb 	.word	0x20000ddb

08087804 <_Z22saveGXPublishIntervalsR6String>:

int saveGXPublishIntervals(String &command)
{
 8087804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087806:	491d      	ldr	r1, [pc, #116]	; (808787c <_Z22saveGXPublishIntervalsR6String+0x78>)
 8087808:	b089      	sub	sp, #36	; 0x24
 808780a:	4606      	mov	r6, r0
 808780c:	f008 fbb7 	bl	808ff7e <_ZNK6String6equalsEPKc>
  // Baundary values to check before storing an interval for GX a metric to the EEPROM 
  const uint16_t MIN_MTRC_INTERVL = 30, MAX_MTRC_INTERVL = 7200;
  const int MTRC_INTERVL_ERROR = -98;

  // If the comand received is an empty string, raise the flag to publish the saved metric intervals.
  if (command == "")
 8087810:	4604      	mov	r4, r0
 8087812:	b128      	cbz	r0, 8087820 <_Z22saveGXPublishIntervalsR6String+0x1c>
  {
    pub_gx_intervls_flag = true;
 8087814:	4b1a      	ldr	r3, [pc, #104]	; (8087880 <_Z22saveGXPublishIntervalsR6String+0x7c>)
 8087816:	2201      	movs	r2, #1
    return NUM_OF_GX_METRICS;
 8087818:	2004      	movs	r0, #4
    pub_gx_intervls_flag = true;
 808781a:	701a      	strb	r2, [r3, #0]
  }
  storeConfigurations();
  shouldPerformSHYFTReset = true;

  return NUM_OF_GX_METRICS;
}
 808781c:	b009      	add	sp, #36	; 0x24
 808781e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(validateConfigurations() == false){ return CONFIG_INVALID;}
 8087820:	f005 faaa 	bl	808cd78 <_Z22validateConfigurationsv>
 8087824:	b320      	cbz	r0, 8087870 <_Z22saveGXPublishIntervalsR6String+0x6c>
 8087826:	4f17      	ldr	r7, [pc, #92]	; (8087884 <_Z22saveGXPublishIntervalsR6String+0x80>)
    uint16_t mtrc_intervl = atoi(getStringValueAtIndex(command, COMMA_CHAR, itratr));
 8087828:	4631      	mov	r1, r6
 808782a:	a804      	add	r0, sp, #16
 808782c:	f008 fa7e 	bl	808fd2c <_ZN6StringC1ERKS_>
 8087830:	4623      	mov	r3, r4
 8087832:	222c      	movs	r2, #44	; 0x2c
 8087834:	a904      	add	r1, sp, #16
 8087836:	4668      	mov	r0, sp
 8087838:	f001 fe86 	bl	8089548 <_Z21getStringValueAtIndex6Stringci>
 808783c:	9800      	ldr	r0, [sp, #0]
 808783e:	f00a faf3 	bl	8091e28 <atoi>
 8087842:	b285      	uxth	r5, r0
 8087844:	4668      	mov	r0, sp
 8087846:	f008 f9dd 	bl	808fc04 <_ZN6StringD1Ev>
 808784a:	a804      	add	r0, sp, #16
 808784c:	f008 f9da 	bl	808fc04 <_ZN6StringD1Ev>
    if((mtrc_intervl < MIN_MTRC_INTERVL) || (mtrc_intervl > MAX_MTRC_INTERVL))
 8087850:	f641 4202 	movw	r2, #7170	; 0x1c02
 8087854:	f1a5 031e 	sub.w	r3, r5, #30
 8087858:	b29b      	uxth	r3, r3
 808785a:	4293      	cmp	r3, r2
 808785c:	d80b      	bhi.n	8087876 <_Z22saveGXPublishIntervalsR6String+0x72>
    { mainGXConfig.GXMETRICS_INTRVLS[itratr] = mtrc_intervl; }  
 808785e:	3401      	adds	r4, #1
  for (uint8_t itratr = DEVICE_MTRC; itratr < ALL_GX_MTRC; itratr++)
 8087860:	2c04      	cmp	r4, #4
    { mainGXConfig.GXMETRICS_INTRVLS[itratr] = mtrc_intervl; }  
 8087862:	f827 5b02 	strh.w	r5, [r7], #2
  for (uint8_t itratr = DEVICE_MTRC; itratr < ALL_GX_MTRC; itratr++)
 8087866:	d1df      	bne.n	8087828 <_Z22saveGXPublishIntervalsR6String+0x24>
  storeConfigurations();
 8087868:	f005 fab2 	bl	808cdd0 <_Z19storeConfigurationsv>
  shouldPerformSHYFTReset = true;
 808786c:	4b06      	ldr	r3, [pc, #24]	; (8087888 <_Z22saveGXPublishIntervalsR6String+0x84>)
 808786e:	e7d2      	b.n	8087816 <_Z22saveGXPublishIntervalsR6String+0x12>
  if(validateConfigurations() == false){ return CONFIG_INVALID;}
 8087870:	f06f 0015 	mvn.w	r0, #21
 8087874:	e7d2      	b.n	808781c <_Z22saveGXPublishIntervalsR6String+0x18>
    { return MTRC_INTERVL_ERROR; }
 8087876:	f06f 0061 	mvn.w	r0, #97	; 0x61
 808787a:	e7cf      	b.n	808781c <_Z22saveGXPublishIntervalsR6String+0x18>
 808787c:	08094ad5 	.word	0x08094ad5
 8087880:	20001304 	.word	0x20001304
 8087884:	200012e0 	.word	0x200012e0
 8087888:	20000ddb 	.word	0x20000ddb

0808788c <_GLOBAL__sub_I_GX_metric_key>:
        val_(val) {
 808788c:	2200      	movs	r2, #0
 808788e:	4b0a      	ldr	r3, [pc, #40]	; (80878b8 <_GLOBAL__sub_I_GX_metric_key+0x2c>)
}
 8087890:	b510      	push	{r4, lr}
 8087892:	601a      	str	r2, [r3, #0]
 8087894:	2201      	movs	r2, #1
 8087896:	4b09      	ldr	r3, [pc, #36]	; (80878bc <_GLOBAL__sub_I_GX_metric_key+0x30>)
SPIFFS_FILE_KEY GX_metric_key = "met";
 8087898:	4c09      	ldr	r4, [pc, #36]	; (80878c0 <_GLOBAL__sub_I_GX_metric_key+0x34>)
 808789a:	701a      	strb	r2, [r3, #0]
 808789c:	2208      	movs	r2, #8
 808789e:	4b09      	ldr	r3, [pc, #36]	; (80878c4 <_GLOBAL__sub_I_GX_metric_key+0x38>)
 80878a0:	4620      	mov	r0, r4
 80878a2:	4909      	ldr	r1, [pc, #36]	; (80878c8 <_GLOBAL__sub_I_GX_metric_key+0x3c>)
 80878a4:	701a      	strb	r2, [r3, #0]
 80878a6:	f008 f9f7 	bl	808fc98 <_ZN6StringC1EPKc>
 80878aa:	4620      	mov	r0, r4
}
 80878ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SPIFFS_FILE_KEY GX_metric_key = "met";
 80878b0:	4a06      	ldr	r2, [pc, #24]	; (80878cc <_GLOBAL__sub_I_GX_metric_key+0x40>)
 80878b2:	4907      	ldr	r1, [pc, #28]	; (80878d0 <_GLOBAL__sub_I_GX_metric_key+0x44>)
 80878b4:	f009 b892 	b.w	80909dc <__aeabi_atexit>
 80878b8:	20000dd4 	.word	0x20000dd4
 80878bc:	20000dd8 	.word	0x20000dd8
 80878c0:	20000dc4 	.word	0x20000dc4
 80878c4:	20000dd9 	.word	0x20000dd9
 80878c8:	08093c04 	.word	0x08093c04
 80878cc:	200005b0 	.word	0x200005b0
 80878d0:	0808fc05 	.word	0x0808fc05

080878d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE3endEv.isra.0>:
    void end() {
 80878d4:	b510      	push	{r4, lr}
        static SPIClass instance(Interface);
 80878d6:	4c0d      	ldr	r4, [pc, #52]	; (808790c <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE3endEv.isra.0+0x38>)
 80878d8:	7823      	ldrb	r3, [r4, #0]
 80878da:	f3bf 8f5b 	dmb	ish
 80878de:	07db      	lsls	r3, r3, #31
 80878e0:	d40f      	bmi.n	8087902 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE3endEv.isra.0+0x2e>
 80878e2:	4620      	mov	r0, r4
 80878e4:	f7f8 fbec 	bl	80800c0 <__cxa_guard_acquire>
 80878e8:	b158      	cbz	r0, 8087902 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE3endEv.isra.0+0x2e>
 80878ea:	2101      	movs	r1, #1
 80878ec:	4808      	ldr	r0, [pc, #32]	; (8087910 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE3endEv.isra.0+0x3c>)
 80878ee:	f008 f85e 	bl	808f9ae <_ZN8SPIClassC1E19hal_spi_interface_t>
 80878f2:	4620      	mov	r0, r4
 80878f4:	f7f8 fbe9 	bl	80800ca <__cxa_guard_release>
 80878f8:	4a06      	ldr	r2, [pc, #24]	; (8087914 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE3endEv.isra.0+0x40>)
 80878fa:	4907      	ldr	r1, [pc, #28]	; (8087918 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE3endEv.isra.0+0x44>)
 80878fc:	4804      	ldr	r0, [pc, #16]	; (8087910 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE3endEv.isra.0+0x3c>)
 80878fe:	f009 f86d 	bl	80909dc <__aeabi_atexit>
    }
 8087902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        instance().end();
 8087906:	4802      	ldr	r0, [pc, #8]	; (8087910 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE3endEv.isra.0+0x3c>)
 8087908:	f008 b87c 	b.w	808fa04 <_ZN8SPIClass3endEv>
 808790c:	20000dac 	.word	0x20000dac
 8087910:	20000db0 	.word	0x20000db0
 8087914:	200005b0 	.word	0x200005b0
 8087918:	080848f9 	.word	0x080848f9

0808791c <_ZN8GXSpiffsC1EP15SpiFlashWinbondP14SpiffsParticle>:
extern GXConfiguration mainGXConfig;

GXSpiffs::GXSpiffs(SpiFlashWinbond *_spiFlash, SpiffsParticle *_filesys)
{
    spiFlash = _spiFlash;
    filesys = _filesys;
 808791c:	e9c0 1200 	strd	r1, r2, [r0]
}
 8087920:	4770      	bx	lr
	...

08087924 <_ZN8GXSpiffs16checkFreeStorageE21SPIFFS_PARTITION_TYPE>:
    spiffslog.trace("The oldest file is:");
    spiffslog.trace(prt_key_format, oldest_file_ts, oldest_file_idx);
}

s32_t GXSpiffs::checkFreeStorage(SPIFFS_PARTITION_TYPE prt_type = METRICS_PRT)
{
 8087924:	b570      	push	{r4, r5, r6, lr}
    spiFlash->begin();
 8087926:	4606      	mov	r6, r0
{
 8087928:	4604      	mov	r4, r0
 808792a:	460d      	mov	r5, r1
    spiFlash->begin();
 808792c:	f856 0b0c 	ldr.w	r0, [r6], #12
 8087930:	6803      	ldr	r3, [r0, #0]
 8087932:	689b      	ldr	r3, [r3, #8]
 8087934:	4798      	blx	r3
	 * (repeated powerlosses in mending or gc) you might have to delete some files.
	 *
	 * @param total         total number of bytes in filesystem
	 * @param used          used number of bytes in filesystem
	 */
	inline s32_t info(u32_t *total, u32_t *used) { return SPIFFS_info(&fs, total, used); };
 8087936:	6860      	ldr	r0, [r4, #4]
 8087938:	4632      	mov	r2, r6
 808793a:	f104 0108 	add.w	r1, r4, #8
 808793e:	3028      	adds	r0, #40	; 0x28
 8087940:	f7fa f970 	bl	8081c24 <SPIFFS_info>

    filesys->info(&total, &used);
    s32_t left;

    spiffslog.trace("Total storage capacity on the %s partiton: %lu bytes", 
 8087944:	490d      	ldr	r1, [pc, #52]	; (808797c <_ZN8GXSpiffs16checkFreeStorageE21SPIFFS_PARTITION_TYPE+0x58>)
 8087946:	4a0e      	ldr	r2, [pc, #56]	; (8087980 <_ZN8GXSpiffs16checkFreeStorageE21SPIFFS_PARTITION_TYPE+0x5c>)
 8087948:	68a3      	ldr	r3, [r4, #8]
 808794a:	2d00      	cmp	r5, #0
 808794c:	bf08      	it	eq
 808794e:	460a      	moveq	r2, r1
 8087950:	480c      	ldr	r0, [pc, #48]	; (8087984 <_ZN8GXSpiffs16checkFreeStorageE21SPIFFS_PARTITION_TYPE+0x60>)
 8087952:	490d      	ldr	r1, [pc, #52]	; (8087988 <_ZN8GXSpiffs16checkFreeStorageE21SPIFFS_PARTITION_TYPE+0x64>)
 8087954:	f7ff fd82 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>
                        (prt_type == METRICS_PRT) ? "Metrics" : "Test", total);

    spiffslog.trace("Used (bytes): %lu bytes", used);
 8087958:	68e2      	ldr	r2, [r4, #12]
 808795a:	490c      	ldr	r1, [pc, #48]	; (808798c <_ZN8GXSpiffs16checkFreeStorageE21SPIFFS_PARTITION_TYPE+0x68>)
 808795c:	4809      	ldr	r0, [pc, #36]	; (8087984 <_ZN8GXSpiffs16checkFreeStorageE21SPIFFS_PARTITION_TYPE+0x60>)
 808795e:	f7ff fd7d 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>
    
    left = total - used;
 8087962:	e9d4 2402 	ldrd	r2, r4, [r4, #8]
 8087966:	1b14      	subs	r4, r2, r4
    spiffslog.trace("Free (bytes): %li bytes\n", left);
 8087968:	4622      	mov	r2, r4
 808796a:	4909      	ldr	r1, [pc, #36]	; (8087990 <_ZN8GXSpiffs16checkFreeStorageE21SPIFFS_PARTITION_TYPE+0x6c>)
 808796c:	4805      	ldr	r0, [pc, #20]	; (8087984 <_ZN8GXSpiffs16checkFreeStorageE21SPIFFS_PARTITION_TYPE+0x60>)
 808796e:	f7ff fd75 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>

    // Close the SPIFFS transaction
    SPI1.end();
 8087972:	f7ff ffaf 	bl	80878d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE3endEv.isra.0>
    return left;
}
 8087976:	4620      	mov	r0, r4
 8087978:	bd70      	pop	{r4, r5, r6, pc}
 808797a:	bf00      	nop
 808797c:	08094603 	.word	0x08094603
 8087980:	08093c13 	.word	0x08093c13
 8087984:	20000de0 	.word	0x20000de0
 8087988:	08093c18 	.word	0x08093c18
 808798c:	08093c4d 	.word	0x08093c4d
 8087990:	08093c65 	.word	0x08093c65

08087994 <_ZN8GXSpiffs23checkFreeStoragePercentEv>:

float GXSpiffs::checkFreeStoragePercent()
{
 8087994:	b538      	push	{r3, r4, r5, lr}
 8087996:	4604      	mov	r4, r0
 8087998:	6840      	ldr	r0, [r0, #4]
 808799a:	f104 020c 	add.w	r2, r4, #12
 808799e:	f104 0108 	add.w	r1, r4, #8
 80879a2:	3028      	adds	r0, #40	; 0x28
 80879a4:	f7fa f93e 	bl	8081c24 <SPIFFS_info>
    filesys->info(&total, &used);
    float percent_left = float(checkFreeStorage() / (float)total) * 100;
 80879a8:	2100      	movs	r1, #0
 80879aa:	4620      	mov	r0, r4
 80879ac:	f7ff ffba 	bl	8087924 <_ZN8GXSpiffs16checkFreeStorageE21SPIFFS_PARTITION_TYPE>
 80879b0:	f009 fe4a 	bl	8091648 <__aeabi_i2f>
 80879b4:	4605      	mov	r5, r0
 80879b6:	68a0      	ldr	r0, [r4, #8]
 80879b8:	f009 fe42 	bl	8091640 <__aeabi_ui2f>
 80879bc:	4601      	mov	r1, r0
 80879be:	4628      	mov	r0, r5
 80879c0:	f009 ff4a 	bl	8091858 <__aeabi_fdiv>
 80879c4:	4906      	ldr	r1, [pc, #24]	; (80879e0 <_ZN8GXSpiffs23checkFreeStoragePercentEv+0x4c>)
 80879c6:	f009 fe93 	bl	80916f0 <__aeabi_fmul>
 80879ca:	4604      	mov	r4, r0
    spiffslog.info("Free storage: %.2f%%", percent_left);
 80879cc:	f009 fa20 	bl	8090e10 <__aeabi_f2d>
 80879d0:	4602      	mov	r2, r0
 80879d2:	460b      	mov	r3, r1
 80879d4:	4803      	ldr	r0, [pc, #12]	; (80879e4 <_ZN8GXSpiffs23checkFreeStoragePercentEv+0x50>)
 80879d6:	4904      	ldr	r1, [pc, #16]	; (80879e8 <_ZN8GXSpiffs23checkFreeStoragePercentEv+0x54>)
 80879d8:	f7fd ffdc 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>

    return percent_left;
}
 80879dc:	4620      	mov	r0, r4
 80879de:	bd38      	pop	{r3, r4, r5, pc}
 80879e0:	42c80000 	.word	0x42c80000
 80879e4:	20000de0 	.word	0x20000de0
 80879e8:	08093c7e 	.word	0x08093c7e

080879ec <_Z22fetchCounterFromEEPROMv>:

uint16_t fetchCounterFromEEPROM()
{
    uint16_t counter;
    counter = mainGXConfig.SAVED_METRIC_COUNT;
    if (counter == 0xFFFF || counter > MAX_COUNTER_VALUE)
 80879ec:	f242 720f 	movw	r2, #9999	; 0x270f
{
 80879f0:	b510      	push	{r4, lr}
    counter = mainGXConfig.SAVED_METRIC_COUNT;
 80879f2:	4b05      	ldr	r3, [pc, #20]	; (8087a08 <_Z22fetchCounterFromEEPROMv+0x1c>)
 80879f4:	8858      	ldrh	r0, [r3, #2]
    if (counter == 0xFFFF || counter > MAX_COUNTER_VALUE)
 80879f6:	4290      	cmp	r0, r2
 80879f8:	d904      	bls.n	8087a04 <_Z22fetchCounterFromEEPROMv+0x18>
    {
        // Set the counter if it hasn't been initialized or reset if it reaches max value.
        counter = 1;
        mainGXConfig.SAVED_METRIC_COUNT = counter;
 80879fa:	2401      	movs	r4, #1
 80879fc:	805c      	strh	r4, [r3, #2]
        storeConfigurations();
 80879fe:	f005 f9e7 	bl	808cdd0 <_Z19storeConfigurationsv>
        counter = 1;
 8087a02:	4620      	mov	r0, r4
    }
    return counter;
}
 8087a04:	bd10      	pop	{r4, pc}
 8087a06:	bf00      	nop
 8087a08:	20001268 	.word	0x20001268

08087a0c <_Z24incrementCounterInEEPROMv>:

void incrementCounterInEEPROM()
{
 8087a0c:	b508      	push	{r3, lr}
    // Check if the configurations in EEPROM are still valid
    if(validateConfigurations() == false){ return;}
 8087a0e:	f005 f9b3 	bl	808cd78 <_Z22validateConfigurationsv>
 8087a12:	b138      	cbz	r0, 8087a24 <_Z24incrementCounterInEEPROMv+0x18>
    
    // Increment the counter in EEPROM
    ++mainGXConfig.SAVED_METRIC_COUNT;
 8087a14:	4a04      	ldr	r2, [pc, #16]	; (8087a28 <_Z24incrementCounterInEEPROMv+0x1c>)
 8087a16:	8853      	ldrh	r3, [r2, #2]
 8087a18:	3301      	adds	r3, #1
 8087a1a:	8053      	strh	r3, [r2, #2]
    storeConfigurations();
}
 8087a1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    storeConfigurations();
 8087a20:	f005 b9d6 	b.w	808cdd0 <_Z19storeConfigurationsv>
}
 8087a24:	bd08      	pop	{r3, pc}
 8087a26:	bf00      	nop
 8087a28:	20001268 	.word	0x20001268

08087a2c <_ZN14GXPartitionOpsC1EP15SpiFlashWinbondP14SpiffsParticle>:

GXPartitionOps::GXPartitionOps(SpiFlashWinbond *_spiFlash, SpiffsParticle *_filesys)
 8087a2c:	b510      	push	{r4, lr}
 8087a2e:	4604      	mov	r4, r0
 8087a30:	2300      	movs	r3, #0
{
    GXspiFlash = _spiFlash;
    GXFileSys = _filesys;
 8087a32:	e9c4 1200 	strd	r1, r2, [r4]
GXPartitionOps::GXPartitionOps(SpiFlashWinbond *_spiFlash, SpiffsParticle *_filesys)
 8087a36:	8123      	strh	r3, [r4, #8]
 8087a38:	60e3      	str	r3, [r4, #12]

    // Start the spiffs transaction
    GXspiFlash->begin();
 8087a3a:	680b      	ldr	r3, [r1, #0]
GXPartitionOps::GXPartitionOps(SpiFlashWinbond *_spiFlash, SpiffsParticle *_filesys)
 8087a3c:	4608      	mov	r0, r1
    GXspiFlash->begin();
 8087a3e:	689b      	ldr	r3, [r3, #8]
 8087a40:	4798      	blx	r3
}
 8087a42:	4620      	mov	r0, r4
 8087a44:	bd10      	pop	{r4, pc}

08087a46 <_ZN14GXPartitionOpsD1Ev>:

GXPartitionOps::~GXPartitionOps()
 8087a46:	b510      	push	{r4, lr}
 8087a48:	4604      	mov	r4, r0
{
    // Clean-up
    if (_dir != NULL){
 8087a4a:	68c0      	ldr	r0, [r0, #12]
 8087a4c:	b118      	cbz	r0, 8087a56 <_ZN14GXPartitionOpsD1Ev+0x10>
	inline s32_t closedir(spiffs_DIR *d) { return SPIFFS_closedir(d); };
 8087a4e:	f7fa f8c9 	bl	8081be4 <SPIFFS_closedir>
        // Close open directories
        GXFileSys->closedir(_dir);
        _dir = NULL;
 8087a52:	2300      	movs	r3, #0
 8087a54:	60e3      	str	r3, [r4, #12]
    }
    if (gx_file_handle != 0){
 8087a56:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8087a5a:	b129      	cbz	r1, 8087a68 <_ZN14GXPartitionOpsD1Ev+0x22>
	inline s32_t close( spiffs_file fh) { return SPIFFS_close(&fs, fh); };
 8087a5c:	6860      	ldr	r0, [r4, #4]
 8087a5e:	3028      	adds	r0, #40	; 0x28
 8087a60:	f7fa f82c 	bl	8081abc <SPIFFS_close>
        // Close open file handles
        GXFileSys->close(gx_file_handle);
        gx_file_handle = 0;
 8087a64:	2300      	movs	r3, #0
 8087a66:	8123      	strh	r3, [r4, #8]
    }
    SPI1.end();
 8087a68:	f7ff ff34 	bl	80878d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE3endEv.isra.0>
}
 8087a6c:	4620      	mov	r0, r4
 8087a6e:	bd10      	pop	{r4, pc}

08087a70 <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE>:
{
 8087a70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8087a72:	4604      	mov	r4, r0
 8087a74:	460d      	mov	r5, r1
    spiffslog.info("---- INITIALIZING SPIFFS ----");
 8087a76:	481b      	ldr	r0, [pc, #108]	; (8087ae4 <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x74>)
 8087a78:	491b      	ldr	r1, [pc, #108]	; (8087ae8 <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x78>)
 8087a7a:	f7fd ff8b 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
    GXPartitionOps partitionMgr(spiFlash, filesys);
 8087a7e:	e9d4 1200 	ldrd	r1, r2, [r4]
 8087a82:	4668      	mov	r0, sp
 8087a84:	f7ff ffd2 	bl	8087a2c <_ZN14GXPartitionOpsC1EP15SpiFlashWinbondP14SpiffsParticle>
    if (PRT_TYPE == METRICS_PRT)
 8087a88:	b1fd      	cbz	r5, 8087aca <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x5a>
    else if (PRT_TYPE == TEST_PRT)
 8087a8a:	2d01      	cmp	r5, #1
 8087a8c:	d111      	bne.n	8087ab2 <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x42>
	inline SpiffsParticle &withPhysicalAddr(size_t value) { config.phys_addr = value; return *this; };
 8087a8e:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
        prt_size = 2;
 8087a92:	2602      	movs	r6, #2
 8087a94:	9b01      	ldr	r3, [sp, #4]
 8087a96:	619a      	str	r2, [r3, #24]
    partitionMgr.setPhysicalSize(prt_size * ONE_KILOBYTE * ONE_KILOBYTE);
 8087a98:	9801      	ldr	r0, [sp, #4]
 8087a9a:	0533      	lsls	r3, r6, #20
    inline SpiffsParticle &setPhysicalSize(size_t value) { return GXFileSys->withPhysicalSize(value); }

    /**
	 * @brief Mount the file system and format if necessary
	 */
    inline s32_t mountAndFormatIfNecessary() {return GXFileSys->mountAndFormatIfNecessary(); }
 8087a9c:	2100      	movs	r1, #0
	inline SpiffsParticle &withPhysicalSize(size_t value) { config.phys_size = value; return *this; };
 8087a9e:	6143      	str	r3, [r0, #20]
 8087aa0:	f004 ff60 	bl	808c964 <_ZN14SpiffsParticle25mountAndFormatIfNecessaryEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE>
    if (res != SPIFFS_OK)
 8087aa4:	4604      	mov	r4, r0
 8087aa6:	b190      	cbz	r0, 8087ace <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x5e>
        publishError(SPI_FLASH, FLASH_ERRCODE::MOUNT_FAILED);
 8087aa8:	2101      	movs	r1, #1
 8087aaa:	4810      	ldr	r0, [pc, #64]	; (8087aec <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x7c>)
 8087aac:	f7ff fdba 	bl	8087624 <_Z12publishErrorPKcs>
 8087ab0:	e003      	b.n	8087aba <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x4a>
        spiffslog.error("Partition type uninitialized and partition size cannot be zero!");
 8087ab2:	490f      	ldr	r1, [pc, #60]	; (8087af0 <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x80>)
 8087ab4:	480b      	ldr	r0, [pc, #44]	; (8087ae4 <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x74>)
 8087ab6:	f7ff fce0 	bl	808747a <_ZNK5spark6Logger5errorEPKcz>
        return SPIFFS_RET::SPIFFS_FAIL;
 8087aba:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    GXPartitionOps partitionMgr(spiFlash, filesys);
 8087abe:	4668      	mov	r0, sp
 8087ac0:	f7ff ffc1 	bl	8087a46 <_ZN14GXPartitionOpsD1Ev>
}
 8087ac4:	4620      	mov	r0, r4
 8087ac6:	b004      	add	sp, #16
 8087ac8:	bd70      	pop	{r4, r5, r6, pc}
        prt_size = 6;
 8087aca:	2606      	movs	r6, #6
 8087acc:	e7e4      	b.n	8087a98 <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x28>
    spiffslog.trace("%s Partition with size: %uMB mounted successfully.",
 8087ace:	4909      	ldr	r1, [pc, #36]	; (8087af4 <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x84>)
 8087ad0:	4a09      	ldr	r2, [pc, #36]	; (8087af8 <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x88>)
 8087ad2:	4633      	mov	r3, r6
 8087ad4:	2d00      	cmp	r5, #0
 8087ad6:	bf08      	it	eq
 8087ad8:	460a      	moveq	r2, r1
 8087ada:	4802      	ldr	r0, [pc, #8]	; (8087ae4 <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x74>)
 8087adc:	4907      	ldr	r1, [pc, #28]	; (8087afc <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x8c>)
 8087ade:	f7ff fcbd 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>
    return SPIFFS_OK;
 8087ae2:	e7ec      	b.n	8087abe <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE+0x4e>
 8087ae4:	20000de0 	.word	0x20000de0
 8087ae8:	08093c93 	.word	0x08093c93
 8087aec:	08093dd8 	.word	0x08093dd8
 8087af0:	08093d98 	.word	0x08093d98
 8087af4:	08094603 	.word	0x08094603
 8087af8:	08093c13 	.word	0x08093c13
 8087afc:	08093de2 	.word	0x08093de2

08087b00 <_ZN14GXPartitionOps10createFileEPKcR6String>:

s32_t GXPartitionOps::createFile(const char* file_name, String &content)
{
 8087b00:	b570      	push	{r4, r5, r6, lr}
 8087b02:	4604      	mov	r4, r0
	inline spiffs_file open(const char *path, spiffs_flags flags, spiffs_mode mode = 0777) { return SPIFFS_open(&fs, path, flags, mode); };
 8087b04:	6840      	ldr	r0, [r0, #4]
 8087b06:	4615      	mov	r5, r2
 8087b08:	f240 13ff 	movw	r3, #511	; 0x1ff
 8087b0c:	221c      	movs	r2, #28
 8087b0e:	3028      	adds	r0, #40	; 0x28
 8087b10:	460e      	mov	r6, r1
 8087b12:	f7f9 fd2d 	bl	8081570 <SPIFFS_open>
    gx_file_handle = GXFileSys->open(file_name, SPIFFS_O_CREAT | SPIFFS_O_RDWR);
    if (gx_file_handle < 0)
 8087b16:	2800      	cmp	r0, #0
    gx_file_handle = GXFileSys->open(file_name, SPIFFS_O_CREAT | SPIFFS_O_RDWR);
 8087b18:	8120      	strh	r0, [r4, #8]
    if (gx_file_handle < 0)
 8087b1a:	da06      	bge.n	8087b2a <_ZN14GXPartitionOps10createFileEPKcR6String+0x2a>
    {
        spiffslog.error("Failed to create file.");
 8087b1c:	490b      	ldr	r1, [pc, #44]	; (8087b4c <_ZN14GXPartitionOps10createFileEPKcR6String+0x4c>)
 8087b1e:	480c      	ldr	r0, [pc, #48]	; (8087b50 <_ZN14GXPartitionOps10createFileEPKcR6String+0x50>)
 8087b20:	f7ff fcab 	bl	808747a <_ZNK5spark6Logger5errorEPKcz>
        return gx_file_handle;
 8087b24:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
    }
    spiffslog.trace("%s file created successfully", file_name);
    
    s32_t err = GXFileSys->write(gx_file_handle, content.c_str(), content.length() + 1);
    return err;
}
 8087b28:	bd70      	pop	{r4, r5, r6, pc}
    spiffslog.trace("%s file created successfully", file_name);
 8087b2a:	4632      	mov	r2, r6
 8087b2c:	4909      	ldr	r1, [pc, #36]	; (8087b54 <_ZN14GXPartitionOps10createFileEPKcR6String+0x54>)
 8087b2e:	4808      	ldr	r0, [pc, #32]	; (8087b50 <_ZN14GXPartitionOps10createFileEPKcR6String+0x50>)
 8087b30:	f7ff fc94 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>
    s32_t err = GXFileSys->write(gx_file_handle, content.c_str(), content.length() + 1);
 8087b34:	68ab      	ldr	r3, [r5, #8]
	inline s32_t write(spiffs_file fh, const void *buf, s32_t len) { return SPIFFS_write(&fs, fh, const_cast<void *>(buf), len); };
 8087b36:	6860      	ldr	r0, [r4, #4]
 8087b38:	682a      	ldr	r2, [r5, #0]
 8087b3a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8087b3e:	3301      	adds	r3, #1
 8087b40:	3028      	adds	r0, #40	; 0x28
}
 8087b42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8087b46:	f7f9 be37 	b.w	80817b8 <SPIFFS_write>
 8087b4a:	bf00      	nop
 8087b4c:	08093d1e 	.word	0x08093d1e
 8087b50:	20000de0 	.word	0x20000de0
 8087b54:	08093d35 	.word	0x08093d35

08087b58 <_ZN8GXSpiffs13saveGXMetricsER6String>:
{
 8087b58:	b570      	push	{r4, r5, r6, lr}
 8087b5a:	b094      	sub	sp, #80	; 0x50
 8087b5c:	4615      	mov	r5, r2
    GXPartitionOps partitionMgr(spiFlash, filesys);
 8087b5e:	c906      	ldmia	r1, {r1, r2}
{
 8087b60:	4604      	mov	r4, r0
    GXPartitionOps partitionMgr(spiFlash, filesys);
 8087b62:	4668      	mov	r0, sp
 8087b64:	f7ff ff62 	bl	8087a2c <_ZN14GXPartitionOpsC1EP15SpiFlashWinbondP14SpiffsParticle>
	StringSumHelper(const char *p) : String(p) {}
 8087b68:	4928      	ldr	r1, [pc, #160]	; (8087c0c <_ZN8GXSpiffs13saveGXMetricsER6String+0xb4>)
 8087b6a:	a80c      	add	r0, sp, #48	; 0x30
 8087b6c:	f008 f894 	bl	808fc98 <_ZN6StringC1EPKc>
    String metric_name = "met" + String(Time.now()) + "_" + String(fetchCounterFromEEPROM());
 8087b70:	f008 fb3a 	bl	80901e8 <_ZN9TimeClass3nowEv>
 8087b74:	220a      	movs	r2, #10
 8087b76:	4601      	mov	r1, r0
 8087b78:	a808      	add	r0, sp, #32
 8087b7a:	f008 f933 	bl	808fde4 <_ZN6StringC1Elh>
 8087b7e:	a908      	add	r1, sp, #32
 8087b80:	a80c      	add	r0, sp, #48	; 0x30
 8087b82:	f008 f9ba 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 8087b86:	4922      	ldr	r1, [pc, #136]	; (8087c10 <_ZN8GXSpiffs13saveGXMetricsER6String+0xb8>)
 8087b88:	f008 f9c3 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 8087b8c:	4606      	mov	r6, r0
 8087b8e:	f7ff ff2d 	bl	80879ec <_Z22fetchCounterFromEEPROMv>
 8087b92:	220a      	movs	r2, #10
 8087b94:	4601      	mov	r1, r0
 8087b96:	a810      	add	r0, sp, #64	; 0x40
 8087b98:	f008 f8fe 	bl	808fd98 <_ZN6StringC1Eih>
 8087b9c:	a910      	add	r1, sp, #64	; 0x40
 8087b9e:	4630      	mov	r0, r6
 8087ba0:	f008 f9ab 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 8087ba4:	4601      	mov	r1, r0
 8087ba6:	a804      	add	r0, sp, #16
 8087ba8:	f008 f8c0 	bl	808fd2c <_ZN6StringC1ERKS_>
 8087bac:	a810      	add	r0, sp, #64	; 0x40
 8087bae:	f008 f829 	bl	808fc04 <_ZN6StringD1Ev>
 8087bb2:	a808      	add	r0, sp, #32
 8087bb4:	f008 f826 	bl	808fc04 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8087bb8:	a80c      	add	r0, sp, #48	; 0x30
 8087bba:	f008 f823 	bl	808fc04 <_ZN6StringD1Ev>
    s32_t err = partitionMgr.createFile(metric_name.c_str(), metric_to_save);
 8087bbe:	462a      	mov	r2, r5
 8087bc0:	4668      	mov	r0, sp
 8087bc2:	9904      	ldr	r1, [sp, #16]
 8087bc4:	f7ff ff9c 	bl	8087b00 <_ZN14GXPartitionOps10createFileEPKcR6String>
    if (err < 0)
 8087bc8:	2800      	cmp	r0, #0
 8087bca:	da17      	bge.n	8087bfc <_ZN8GXSpiffs13saveGXMetricsER6String+0xa4>
        spiffslog.error("Failed to write metric data to file: '%s'", metric_name.c_str());
 8087bcc:	9a04      	ldr	r2, [sp, #16]
 8087bce:	4911      	ldr	r1, [pc, #68]	; (8087c14 <_ZN8GXSpiffs13saveGXMetricsER6String+0xbc>)
 8087bd0:	4811      	ldr	r0, [pc, #68]	; (8087c18 <_ZN8GXSpiffs13saveGXMetricsER6String+0xc0>)
 8087bd2:	f7ff fc52 	bl	808747a <_ZNK5spark6Logger5errorEPKcz>
        publishError(SPI_FLASH, FLASH_ERRCODE::WRITE_FAILED);
 8087bd6:	2102      	movs	r1, #2
 8087bd8:	4810      	ldr	r0, [pc, #64]	; (8087c1c <_ZN8GXSpiffs13saveGXMetricsER6String+0xc4>)
 8087bda:	f7ff fd23 	bl	8087624 <_Z12publishErrorPKcs>
        return String(SPIFFS_FAIL);
 8087bde:	220a      	movs	r2, #10
 8087be0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8087be4:	4620      	mov	r0, r4
 8087be6:	f008 f8d7 	bl	808fd98 <_ZN6StringC1Eih>
    String metric_name = "met" + String(Time.now()) + "_" + String(fetchCounterFromEEPROM());
 8087bea:	a804      	add	r0, sp, #16
 8087bec:	f008 f80a 	bl	808fc04 <_ZN6StringD1Ev>
    GXPartitionOps partitionMgr(spiFlash, filesys);
 8087bf0:	4668      	mov	r0, sp
 8087bf2:	f7ff ff28 	bl	8087a46 <_ZN14GXPartitionOpsD1Ev>
}
 8087bf6:	4620      	mov	r0, r4
 8087bf8:	b014      	add	sp, #80	; 0x50
 8087bfa:	bd70      	pop	{r4, r5, r6, pc}
    incrementCounterInEEPROM();
 8087bfc:	f7ff ff06 	bl	8087a0c <_Z24incrementCounterInEEPROMv>
    return metric_name;
 8087c00:	4620      	mov	r0, r4
 8087c02:	a904      	add	r1, sp, #16
 8087c04:	f008 f878 	bl	808fcf8 <_ZN6StringC1EOS_>
 8087c08:	e7ef      	b.n	8087bea <_ZN8GXSpiffs13saveGXMetricsER6String+0x92>
 8087c0a:	bf00      	nop
 8087c0c:	08093c04 	.word	0x08093c04
 8087c10:	08093e15 	.word	0x08093e15
 8087c14:	08093e17 	.word	0x08093e17
 8087c18:	20000de0 	.word	0x20000de0
 8087c1c:	08093dd8 	.word	0x08093dd8

08087c20 <_ZN14GXPartitionOps8readFileEPKcR6String>:

s32_t GXPartitionOps::readFile(const char* file_name, String &buffer_to_fill)
{
 8087c20:	b570      	push	{r4, r5, r6, lr}
 8087c22:	4604      	mov	r4, r0
 8087c24:	460d      	mov	r5, r1
	inline s32_t stat(const char *path, spiffs_stat *s) { return SPIFFS_stat(&fs, path, s); };
 8087c26:	6840      	ldr	r0, [r0, #4]
 8087c28:	b090      	sub	sp, #64	; 0x40
 8087c2a:	4616      	mov	r6, r2
 8087c2c:	3028      	adds	r0, #40	; 0x28
 8087c2e:	aa05      	add	r2, sp, #20
 8087c30:	f7f9 ff02 	bl	8081a38 <SPIFFS_stat>
	inline spiffs_file open(const char *path, spiffs_flags flags, spiffs_mode mode = 0777) { return SPIFFS_open(&fs, path, flags, mode); };
 8087c34:	6860      	ldr	r0, [r4, #4]
 8087c36:	2208      	movs	r2, #8
 8087c38:	f240 13ff 	movw	r3, #511	; 0x1ff
 8087c3c:	4629      	mov	r1, r5
 8087c3e:	3028      	adds	r0, #40	; 0x28
 8087c40:	f7f9 fc96 	bl	8081570 <SPIFFS_open>
    // Get the file information, e.g. file size
    spiffs_stat file_info;
    GXFileSys->stat(file_name, &file_info);

    gx_file_handle = GXFileSys->open(file_name, SPIFFS_O_RDONLY);
    if (gx_file_handle < 0)
 8087c44:	2800      	cmp	r0, #0
    {
        spiffslog.error("Failed to open file %s", file_name);
 8087c46:	462a      	mov	r2, r5
    gx_file_handle = GXFileSys->open(file_name, SPIFFS_O_RDONLY);
 8087c48:	8120      	strh	r0, [r4, #8]
    if (gx_file_handle < 0)
 8087c4a:	da08      	bge.n	8087c5e <_ZN14GXPartitionOps8readFileEPKcR6String+0x3e>
        spiffslog.error("Failed to open file %s", file_name);
 8087c4c:	491a      	ldr	r1, [pc, #104]	; (8087cb8 <_ZN14GXPartitionOps8readFileEPKcR6String+0x98>)
 8087c4e:	481b      	ldr	r0, [pc, #108]	; (8087cbc <_ZN14GXPartitionOps8readFileEPKcR6String+0x9c>)
 8087c50:	f7ff fc13 	bl	808747a <_ZNK5spark6Logger5errorEPKcz>
        return gx_file_handle;
 8087c54:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
    buffer_to_fill = String((char*)dynamic_buffer);

    // Free memory
    delete [] dynamic_buffer;
    return err;
}
 8087c58:	4620      	mov	r0, r4
 8087c5a:	b010      	add	sp, #64	; 0x40
 8087c5c:	bd70      	pop	{r4, r5, r6, pc}
    spiffslog.trace("'%s' file opened successfully", file_name);
 8087c5e:	4918      	ldr	r1, [pc, #96]	; (8087cc0 <_ZN14GXPartitionOps8readFileEPKcR6String+0xa0>)
 8087c60:	4816      	ldr	r0, [pc, #88]	; (8087cbc <_ZN14GXPartitionOps8readFileEPKcR6String+0x9c>)
 8087c62:	f7ff fbfb 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>
    spiffslog.trace("File size: %lu", file_info.size);
 8087c66:	9a06      	ldr	r2, [sp, #24]
 8087c68:	4916      	ldr	r1, [pc, #88]	; (8087cc4 <_ZN14GXPartitionOps8readFileEPKcR6String+0xa4>)
 8087c6a:	4814      	ldr	r0, [pc, #80]	; (8087cbc <_ZN14GXPartitionOps8readFileEPKcR6String+0x9c>)
 8087c6c:	f7ff fbf6 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>
    uint8_t *dynamic_buffer = new uint8_t[file_info.size];
 8087c70:	9806      	ldr	r0, [sp, #24]
 8087c72:	f7f8 fa14 	bl	808009e <_Znaj>
    if (dynamic_buffer == nullptr)
 8087c76:	4605      	mov	r5, r0
 8087c78:	b930      	cbnz	r0, 8087c88 <_ZN14GXPartitionOps8readFileEPKcR6String+0x68>
        spiffslog.error("Memory allocation failed!");
 8087c7a:	4913      	ldr	r1, [pc, #76]	; (8087cc8 <_ZN14GXPartitionOps8readFileEPKcR6String+0xa8>)
 8087c7c:	480f      	ldr	r0, [pc, #60]	; (8087cbc <_ZN14GXPartitionOps8readFileEPKcR6String+0x9c>)
 8087c7e:	f7ff fbfc 	bl	808747a <_ZNK5spark6Logger5errorEPKcz>
        return -1;
 8087c82:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8087c86:	e7e7      	b.n	8087c58 <_ZN14GXPartitionOps8readFileEPKcR6String+0x38>
	inline s32_t read(spiffs_file fh, void *buf, s32_t len) { return SPIFFS_read(&fs, fh, buf, len); };
 8087c88:	6860      	ldr	r0, [r4, #4]
 8087c8a:	462a      	mov	r2, r5
 8087c8c:	9b06      	ldr	r3, [sp, #24]
 8087c8e:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8087c92:	3028      	adds	r0, #40	; 0x28
 8087c94:	f7f9 fd0c 	bl	80816b0 <SPIFFS_read>
    buffer_to_fill = String((char*)dynamic_buffer);
 8087c98:	4629      	mov	r1, r5
 8087c9a:	4604      	mov	r4, r0
 8087c9c:	a801      	add	r0, sp, #4
 8087c9e:	f007 fffb 	bl	808fc98 <_ZN6StringC1EPKc>
 8087ca2:	a901      	add	r1, sp, #4
 8087ca4:	4630      	mov	r0, r6
 8087ca6:	f008 f84c 	bl	808fd42 <_ZN6StringaSEOS_>
 8087caa:	a801      	add	r0, sp, #4
 8087cac:	f007 ffaa 	bl	808fc04 <_ZN6StringD1Ev>
    delete [] dynamic_buffer;
 8087cb0:	4628      	mov	r0, r5
 8087cb2:	f7f8 f9f8 	bl	80800a6 <_ZdaPv>
    return err;
 8087cb6:	e7cf      	b.n	8087c58 <_ZN14GXPartitionOps8readFileEPKcR6String+0x38>
 8087cb8:	08093e41 	.word	0x08093e41
 8087cbc:	20000de0 	.word	0x20000de0
 8087cc0:	08093e58 	.word	0x08093e58
 8087cc4:	08093e76 	.word	0x08093e76
 8087cc8:	08093e85 	.word	0x08093e85

08087ccc <_ZN8GXSpiffs13readGXMetricsEPKc>:
{
 8087ccc:	b530      	push	{r4, r5, lr}
 8087cce:	4615      	mov	r5, r2
    GXPartitionOps partitionMgr(spiFlash, filesys);
 8087cd0:	c906      	ldmia	r1, {r1, r2}
{
 8087cd2:	b089      	sub	sp, #36	; 0x24
 8087cd4:	4604      	mov	r4, r0
    GXPartitionOps partitionMgr(spiFlash, filesys);
 8087cd6:	4668      	mov	r0, sp
 8087cd8:	f7ff fea8 	bl	8087a2c <_ZN14GXPartitionOpsC1EP15SpiFlashWinbondP14SpiffsParticle>
    String metric_to_return;
 8087cdc:	4913      	ldr	r1, [pc, #76]	; (8087d2c <_ZN8GXSpiffs13readGXMetricsEPKc+0x60>)
 8087cde:	a804      	add	r0, sp, #16
 8087ce0:	f007 ffda 	bl	808fc98 <_ZN6StringC1EPKc>
    s32_t res = partitionMgr.readFile(metric_name, metric_to_return);
 8087ce4:	4629      	mov	r1, r5
 8087ce6:	4668      	mov	r0, sp
 8087ce8:	aa04      	add	r2, sp, #16
 8087cea:	f7ff ff99 	bl	8087c20 <_ZN14GXPartitionOps8readFileEPKcR6String>
    if (res < 0)
 8087cee:	2800      	cmp	r0, #0
 8087cf0:	da17      	bge.n	8087d22 <_ZN8GXSpiffs13readGXMetricsEPKc+0x56>
        spiffslog.error("Error metric reading data from: \'%s\'", metric_name);
 8087cf2:	462a      	mov	r2, r5
 8087cf4:	490e      	ldr	r1, [pc, #56]	; (8087d30 <_ZN8GXSpiffs13readGXMetricsEPKc+0x64>)
 8087cf6:	480f      	ldr	r0, [pc, #60]	; (8087d34 <_ZN8GXSpiffs13readGXMetricsEPKc+0x68>)
 8087cf8:	f7ff fbbf 	bl	808747a <_ZNK5spark6Logger5errorEPKcz>
        publishError(SPI_FLASH, FLASH_ERRCODE::READ_FAILED);
 8087cfc:	2103      	movs	r1, #3
 8087cfe:	480e      	ldr	r0, [pc, #56]	; (8087d38 <_ZN8GXSpiffs13readGXMetricsEPKc+0x6c>)
 8087d00:	f7ff fc90 	bl	8087624 <_Z12publishErrorPKcs>
        return String(SPIFFS_FAIL);
 8087d04:	220a      	movs	r2, #10
 8087d06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8087d0a:	4620      	mov	r0, r4
 8087d0c:	f008 f844 	bl	808fd98 <_ZN6StringC1Eih>
    String metric_to_return;
 8087d10:	a804      	add	r0, sp, #16
 8087d12:	f007 ff77 	bl	808fc04 <_ZN6StringD1Ev>
    GXPartitionOps partitionMgr(spiFlash, filesys);
 8087d16:	4668      	mov	r0, sp
 8087d18:	f7ff fe95 	bl	8087a46 <_ZN14GXPartitionOpsD1Ev>
}
 8087d1c:	4620      	mov	r0, r4
 8087d1e:	b009      	add	sp, #36	; 0x24
 8087d20:	bd30      	pop	{r4, r5, pc}
    return metric_to_return;
 8087d22:	4620      	mov	r0, r4
 8087d24:	a904      	add	r1, sp, #16
 8087d26:	f007 ffe7 	bl	808fcf8 <_ZN6StringC1EOS_>
 8087d2a:	e7f1      	b.n	8087d10 <_ZN8GXSpiffs13readGXMetricsEPKc+0x44>
 8087d2c:	08094ad5 	.word	0x08094ad5
 8087d30:	08093e9f 	.word	0x08093e9f
 8087d34:	20000de0 	.word	0x20000de0
 8087d38:	08093dd8 	.word	0x08093dd8

08087d3c <_ZN14GXPartitionOps10deleteFileEPKc>:

s32_t GXPartitionOps::deleteFile(const char* file_name)
{
 8087d3c:	b538      	push	{r3, r4, r5, lr}
 8087d3e:	4605      	mov	r5, r0
 8087d40:	460c      	mov	r4, r1
    spiffslog.trace("Attempting to delete '%s'", file_name);
 8087d42:	460a      	mov	r2, r1
 8087d44:	480a      	ldr	r0, [pc, #40]	; (8087d70 <_ZN14GXPartitionOps10deleteFileEPKc+0x34>)
 8087d46:	490b      	ldr	r1, [pc, #44]	; (8087d74 <_ZN14GXPartitionOps10deleteFileEPKc+0x38>)
 8087d48:	f7ff fb88 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>
	inline s32_t remove(const char *path) { return SPIFFS_remove(&fs, path); };
 8087d4c:	6868      	ldr	r0, [r5, #4]
 8087d4e:	4621      	mov	r1, r4
 8087d50:	3028      	adds	r0, #40	; 0x28
 8087d52:	f7f9 fe05 	bl	8081960 <SPIFFS_remove>
    s32_t ret = GXFileSys->remove(file_name);

    if (ret == SPIFFS_OK) return SPIFFS_OK;
 8087d56:	b150      	cbz	r0, 8087d6e <_ZN14GXPartitionOps10deleteFileEPKc+0x32>

    spiffslog.error("Failed to delete '%s'!", file_name);
 8087d58:	4622      	mov	r2, r4
 8087d5a:	4907      	ldr	r1, [pc, #28]	; (8087d78 <_ZN14GXPartitionOps10deleteFileEPKc+0x3c>)
 8087d5c:	4804      	ldr	r0, [pc, #16]	; (8087d70 <_ZN14GXPartitionOps10deleteFileEPKc+0x34>)
 8087d5e:	f7ff fb8c 	bl	808747a <_ZNK5spark6Logger5errorEPKcz>
    publishError(SPI_FLASH, FLASH_ERRCODE::DELETE_FAILED);
 8087d62:	4806      	ldr	r0, [pc, #24]	; (8087d7c <_ZN14GXPartitionOps10deleteFileEPKc+0x40>)
 8087d64:	2104      	movs	r1, #4
 8087d66:	f7ff fc5d 	bl	8087624 <_Z12publishErrorPKcs>
 8087d6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return SPIFFS_FAIL;
}
 8087d6e:	bd38      	pop	{r3, r4, r5, pc}
 8087d70:	20000de0 	.word	0x20000de0
 8087d74:	08093ec4 	.word	0x08093ec4
 8087d78:	08093ede 	.word	0x08093ede
 8087d7c:	08093dd8 	.word	0x08093dd8

08087d80 <_ZN14GXPartitionOps13openDirectoryEP10spiffs_DIR>:

void GXPartitionOps::openDirectory(spiffs_DIR *dir)
{
 8087d80:	b538      	push	{r3, r4, r5, lr}
 8087d82:	4604      	mov	r4, r0
	inline spiffs_DIR *opendir(const char *name, spiffs_DIR *d) { return SPIFFS_opendir(&fs, name, d); };
 8087d84:	6840      	ldr	r0, [r0, #4]
 8087d86:	460d      	mov	r5, r1
 8087d88:	460a      	mov	r2, r1
 8087d8a:	3028      	adds	r0, #40	; 0x28
 8087d8c:	2100      	movs	r1, #0
 8087d8e:	f7f9 fec7 	bl	8081b20 <SPIFFS_opendir>
    if (GXFileSys->opendir(NULL, dir) != 0)
 8087d92:	b100      	cbz	r0, 8087d96 <_ZN14GXPartitionOps13openDirectoryEP10spiffs_DIR+0x16>
    {
        _dir = dir;
 8087d94:	60e5      	str	r5, [r4, #12]
    }
}
 8087d96:	bd38      	pop	{r3, r4, r5, pc}

08087d98 <_ZN8GXSpiffs13getOldestFileEPKcRmRt>:
{
 8087d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087d9a:	b095      	sub	sp, #84	; 0x54
 8087d9c:	460e      	mov	r6, r1
 8087d9e:	4614      	mov	r4, r2
    GXPartitionOps partitionMgr(spiFlash, filesys);
 8087da0:	e9d0 1200 	ldrd	r1, r2, [r0]
 8087da4:	a805      	add	r0, sp, #20
{
 8087da6:	461d      	mov	r5, r3
    GXPartitionOps partitionMgr(spiFlash, filesys);
 8087da8:	f7ff fe40 	bl	8087a2c <_ZN14GXPartitionOpsC1EP15SpiFlashWinbondP14SpiffsParticle>
    spiffslog.trace("Searching for the oldest file...");
 8087dac:	491b      	ldr	r1, [pc, #108]	; (8087e1c <_ZN8GXSpiffs13getOldestFileEPKcRmRt+0x84>)
 8087dae:	481c      	ldr	r0, [pc, #112]	; (8087e20 <_ZN8GXSpiffs13getOldestFileEPKcRmRt+0x88>)
 8087db0:	f7ff fb54 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>
    partitionMgr.openDirectory(&dir);
 8087db4:	a902      	add	r1, sp, #8
 8087db6:	a805      	add	r0, sp, #20
 8087db8:	f7ff ffe2 	bl	8087d80 <_ZN14GXPartitionOps13openDirectoryEP10spiffs_DIR>
 8087dbc:	2700      	movs	r7, #0
	inline struct spiffs_dirent *readdir(spiffs_DIR *d, struct spiffs_dirent *e) { return SPIFFS_readdir(d, e); };
 8087dbe:	a909      	add	r1, sp, #36	; 0x24
 8087dc0:	a802      	add	r0, sp, #8
 8087dc2:	f7f9 fed1 	bl	8081b68 <SPIFFS_readdir>
    while (filesys->readdir(&dir, &dirent))
 8087dc6:	b1c8      	cbz	r0, 8087dfc <_ZN8GXSpiffs13getOldestFileEPKcRmRt+0x64>
        if (sscanf((const char *)dirent.name, prt_key_format, &file_ts, &file_idx) == 2)
 8087dc8:	4631      	mov	r1, r6
 8087dca:	f10d 0302 	add.w	r3, sp, #2
 8087dce:	aa01      	add	r2, sp, #4
 8087dd0:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 8087dd4:	f005 fbc0 	bl	808d558 <sscanf>
 8087dd8:	2802      	cmp	r0, #2
 8087dda:	d1f0      	bne.n	8087dbe <_ZN8GXSpiffs13getOldestFileEPKcRmRt+0x26>
            if (count == 0){
 8087ddc:	b2ba      	uxth	r2, r7
 8087dde:	9b01      	ldr	r3, [sp, #4]
 8087de0:	b91a      	cbnz	r2, 8087dea <_ZN8GXSpiffs13getOldestFileEPKcRmRt+0x52>
                oldest_file_idx = file_idx;
 8087de2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
                oldest_file_ts = file_ts; // Hold the first file timestamp
 8087de6:	6023      	str	r3, [r4, #0]
                oldest_file_idx = file_idx;
 8087de8:	802a      	strh	r2, [r5, #0]
            if (file_ts < oldest_file_ts){
 8087dea:	6822      	ldr	r2, [r4, #0]
 8087dec:	429a      	cmp	r2, r3
 8087dee:	d903      	bls.n	8087df8 <_ZN8GXSpiffs13getOldestFileEPKcRmRt+0x60>
                oldest_file_ts = file_ts; // Update the oldest file timestamp
 8087df0:	6023      	str	r3, [r4, #0]
                oldest_file_idx = file_idx;
 8087df2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8087df6:	802b      	strh	r3, [r5, #0]
 8087df8:	3701      	adds	r7, #1
 8087dfa:	e7e0      	b.n	8087dbe <_ZN8GXSpiffs13getOldestFileEPKcRmRt+0x26>
    spiffslog.trace("The oldest file is:");
 8087dfc:	4909      	ldr	r1, [pc, #36]	; (8087e24 <_ZN8GXSpiffs13getOldestFileEPKcRmRt+0x8c>)
 8087dfe:	4808      	ldr	r0, [pc, #32]	; (8087e20 <_ZN8GXSpiffs13getOldestFileEPKcRmRt+0x88>)
 8087e00:	f7ff fb2c 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>
    spiffslog.trace(prt_key_format, oldest_file_ts, oldest_file_idx);
 8087e04:	4631      	mov	r1, r6
 8087e06:	882b      	ldrh	r3, [r5, #0]
 8087e08:	6822      	ldr	r2, [r4, #0]
 8087e0a:	4805      	ldr	r0, [pc, #20]	; (8087e20 <_ZN8GXSpiffs13getOldestFileEPKcRmRt+0x88>)
 8087e0c:	f7ff fb26 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>
    GXPartitionOps partitionMgr(spiFlash, filesys);
 8087e10:	a805      	add	r0, sp, #20
 8087e12:	f7ff fe18 	bl	8087a46 <_ZN14GXPartitionOpsD1Ev>
}
 8087e16:	b015      	add	sp, #84	; 0x54
 8087e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8087e1a:	bf00      	nop
 8087e1c:	08093ef5 	.word	0x08093ef5
 8087e20:	20000de0 	.word	0x20000de0
 8087e24:	08093f16 	.word	0x08093f16

08087e28 <_ZN8GXSpiffs16deleteOldestFileE6StringPKc>:
{
 8087e28:	b570      	push	{r4, r5, r6, lr}
 8087e2a:	4604      	mov	r4, r0
 8087e2c:	4616      	mov	r6, r2
 8087e2e:	b08e      	sub	sp, #56	; 0x38
 8087e30:	460d      	mov	r5, r1
    spiffslog.trace("Low storage threshold hit! Attempting to delete oldest data.");
 8087e32:	4820      	ldr	r0, [pc, #128]	; (8087eb4 <_ZN8GXSpiffs16deleteOldestFileE6StringPKc+0x8c>)
 8087e34:	4920      	ldr	r1, [pc, #128]	; (8087eb8 <_ZN8GXSpiffs16deleteOldestFileE6StringPKc+0x90>)
 8087e36:	f7ff fb11 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>
    getOldestFile(prt_key_format, file_ts, file_idx);
 8087e3a:	f10d 0302 	add.w	r3, sp, #2
 8087e3e:	4631      	mov	r1, r6
 8087e40:	4620      	mov	r0, r4
 8087e42:	aa01      	add	r2, sp, #4
 8087e44:	f7ff ffa8 	bl	8087d98 <_ZN8GXSpiffs13getOldestFileEPKcRmRt>
    file_name += String(file_ts) + "_" + String(file_idx);
 8087e48:	220a      	movs	r2, #10
 8087e4a:	9901      	ldr	r1, [sp, #4]
 8087e4c:	a802      	add	r0, sp, #8
 8087e4e:	f007 ffdc 	bl	808fe0a <_ZN6StringC1Emh>
	StringSumHelper(const String &s) : String(s) {}
 8087e52:	a902      	add	r1, sp, #8
 8087e54:	a806      	add	r0, sp, #24
 8087e56:	f007 ff69 	bl	808fd2c <_ZN6StringC1ERKS_>
 8087e5a:	4918      	ldr	r1, [pc, #96]	; (8087ebc <_ZN8GXSpiffs16deleteOldestFileE6StringPKc+0x94>)
 8087e5c:	a806      	add	r0, sp, #24
 8087e5e:	f008 f858 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 8087e62:	4606      	mov	r6, r0
 8087e64:	220a      	movs	r2, #10
 8087e66:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8087e6a:	a80a      	add	r0, sp, #40	; 0x28
 8087e6c:	f007 ff94 	bl	808fd98 <_ZN6StringC1Eih>
 8087e70:	a90a      	add	r1, sp, #40	; 0x28
 8087e72:	4630      	mov	r0, r6
 8087e74:	f008 f841 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 8087e78:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8087e7a:	4628      	mov	r0, r5
 8087e7c:	f008 f81d 	bl	808feba <_ZN6String6concatERKS_>
 8087e80:	a80a      	add	r0, sp, #40	; 0x28
 8087e82:	f007 febf 	bl	808fc04 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8087e86:	a806      	add	r0, sp, #24
 8087e88:	f007 febc 	bl	808fc04 <_ZN6StringD1Ev>
 8087e8c:	a802      	add	r0, sp, #8
 8087e8e:	f007 feb9 	bl	808fc04 <_ZN6StringD1Ev>
    GXPartitionOps partitionMgr(spiFlash, filesys);
 8087e92:	e9d4 1200 	ldrd	r1, r2, [r4]
 8087e96:	a80a      	add	r0, sp, #40	; 0x28
 8087e98:	f7ff fdc8 	bl	8087a2c <_ZN14GXPartitionOpsC1EP15SpiFlashWinbondP14SpiffsParticle>
    return partitionMgr.deleteFile(file_name.c_str());
 8087e9c:	6829      	ldr	r1, [r5, #0]
 8087e9e:	a80a      	add	r0, sp, #40	; 0x28
 8087ea0:	f7ff ff4c 	bl	8087d3c <_ZN14GXPartitionOps10deleteFileEPKc>
 8087ea4:	4604      	mov	r4, r0
    GXPartitionOps partitionMgr(spiFlash, filesys);
 8087ea6:	a80a      	add	r0, sp, #40	; 0x28
 8087ea8:	f7ff fdcd 	bl	8087a46 <_ZN14GXPartitionOpsD1Ev>
}
 8087eac:	b220      	sxth	r0, r4
 8087eae:	b00e      	add	sp, #56	; 0x38
 8087eb0:	bd70      	pop	{r4, r5, r6, pc}
 8087eb2:	bf00      	nop
 8087eb4:	20000de0 	.word	0x20000de0
 8087eb8:	08093f2a 	.word	0x08093f2a
 8087ebc:	08093e15 	.word	0x08093e15

08087ec0 <_ZN8GXSpiffs12cleanStorageER6StringPKc>:
{
 8087ec0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8087ec4:	460f      	mov	r7, r1
 8087ec6:	4605      	mov	r5, r0
 8087ec8:	4690      	mov	r8, r2
    float storage_left = checkFreeStoragePercent();
 8087eca:	f7ff fd63 	bl	8087994 <_ZN8GXSpiffs23checkFreeStoragePercentEv>
    if (storage_left > LOW_STORAGE_THRESHOLD) return;
 8087ece:	4914      	ldr	r1, [pc, #80]	; (8087f20 <_ZN8GXSpiffs12cleanStorageER6StringPKc+0x60>)
    float storage_left = checkFreeStoragePercent();
 8087ed0:	4604      	mov	r4, r0
    if (storage_left > LOW_STORAGE_THRESHOLD) return;
 8087ed2:	f009 fdc9 	bl	8091a68 <__aeabi_fcmpgt>
 8087ed6:	bb00      	cbnz	r0, 8087f1a <_ZN8GXSpiffs12cleanStorageER6StringPKc+0x5a>
    spiffslog.info("Cleaning storage...");
 8087ed8:	4912      	ldr	r1, [pc, #72]	; (8087f24 <_ZN8GXSpiffs12cleanStorageER6StringPKc+0x64>)
 8087eda:	4813      	ldr	r0, [pc, #76]	; (8087f28 <_ZN8GXSpiffs12cleanStorageER6StringPKc+0x68>)
 8087edc:	f7fd fd5a 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
    float desired_storage = storage_left + NEW_STORAGE_OFFSET;
 8087ee0:	4620      	mov	r0, r4
 8087ee2:	490f      	ldr	r1, [pc, #60]	; (8087f20 <_ZN8GXSpiffs12cleanStorageER6StringPKc+0x60>)
 8087ee4:	f009 fafc 	bl	80914e0 <__addsf3>
 8087ee8:	4606      	mov	r6, r0
    for (; storage_left < desired_storage; storage_left = checkFreeStoragePercent())
 8087eea:	4631      	mov	r1, r6
 8087eec:	4620      	mov	r0, r4
 8087eee:	f009 fd9d 	bl	8091a2c <__aeabi_fcmplt>
 8087ef2:	b190      	cbz	r0, 8087f1a <_ZN8GXSpiffs12cleanStorageER6StringPKc+0x5a>
        spiffs_err err = deleteOldestFile(file_key, prt_key_format);
 8087ef4:	4639      	mov	r1, r7
 8087ef6:	4668      	mov	r0, sp
 8087ef8:	f007 ff18 	bl	808fd2c <_ZN6StringC1ERKS_>
 8087efc:	4642      	mov	r2, r8
 8087efe:	4669      	mov	r1, sp
 8087f00:	4628      	mov	r0, r5
 8087f02:	f7ff ff91 	bl	8087e28 <_ZN8GXSpiffs16deleteOldestFileE6StringPKc>
 8087f06:	4604      	mov	r4, r0
 8087f08:	4668      	mov	r0, sp
 8087f0a:	f007 fe7b 	bl	808fc04 <_ZN6StringD1Ev>
        if (err != SPIFFS_OK) return;
 8087f0e:	b924      	cbnz	r4, 8087f1a <_ZN8GXSpiffs12cleanStorageER6StringPKc+0x5a>
    for (; storage_left < desired_storage; storage_left = checkFreeStoragePercent())
 8087f10:	4628      	mov	r0, r5
 8087f12:	f7ff fd3f 	bl	8087994 <_ZN8GXSpiffs23checkFreeStoragePercentEv>
 8087f16:	4604      	mov	r4, r0
 8087f18:	e7e7      	b.n	8087eea <_ZN8GXSpiffs12cleanStorageER6StringPKc+0x2a>
}
 8087f1a:	b004      	add	sp, #16
 8087f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087f20:	41200000 	.word	0x41200000
 8087f24:	08093f67 	.word	0x08093f67
 8087f28:	20000de0 	.word	0x20000de0

08087f2c <_ZN8GXSpiffs19publishSavedMetricsEPKcmt>:
{
 8087f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087f2e:	460c      	mov	r4, r1
 8087f30:	b08d      	sub	sp, #52	; 0x34
 8087f32:	4605      	mov	r5, r0
 8087f34:	4617      	mov	r7, r2
 8087f36:	461e      	mov	r6, r3
    if ((sscanf(metric_name, "met%lu_%hu", &metrics_ts, &metrics_idx) != 2) ||
 8087f38:	4620      	mov	r0, r4
 8087f3a:	4933      	ldr	r1, [pc, #204]	; (8088008 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xdc>)
 8087f3c:	f10d 030a 	add.w	r3, sp, #10
 8087f40:	aa03      	add	r2, sp, #12
 8087f42:	f005 fb09 	bl	808d558 <sscanf>
 8087f46:	2802      	cmp	r0, #2
 8087f48:	d15c      	bne.n	8088004 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xd8>
 8087f4a:	9b03      	ldr	r3, [sp, #12]
 8087f4c:	42bb      	cmp	r3, r7
 8087f4e:	d359      	bcc.n	8088004 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xd8>
        (metrics_ts < last_published_ts || metrics_idx == last_published_idx)) return false;
 8087f50:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8087f54:	42b3      	cmp	r3, r6
 8087f56:	d055      	beq.n	8088004 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xd8>
    spiffslog.trace("Getting information for %s", metric_name);
 8087f58:	4622      	mov	r2, r4
 8087f5a:	492c      	ldr	r1, [pc, #176]	; (808800c <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xe0>)
 8087f5c:	482c      	ldr	r0, [pc, #176]	; (8088010 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xe4>)
 8087f5e:	f7ff fa7d 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>
    String metric_to_publish = readGXMetrics(metric_name);
 8087f62:	4629      	mov	r1, r5
 8087f64:	4622      	mov	r2, r4
 8087f66:	a804      	add	r0, sp, #16
 8087f68:	f7ff feb0 	bl	8087ccc <_ZN8GXSpiffs13readGXMetricsEPKc>
    if (metric_to_publish == String(SPIFFS_FAIL))
 8087f6c:	220a      	movs	r2, #10
 8087f6e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8087f72:	a808      	add	r0, sp, #32
 8087f74:	f007 ff10 	bl	808fd98 <_ZN6StringC1Eih>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
 8087f78:	a908      	add	r1, sp, #32
 8087f7a:	a804      	add	r0, sp, #16
 8087f7c:	f007 fff2 	bl	808ff64 <_ZNK6String6equalsERKS_>
 8087f80:	4605      	mov	r5, r0
 8087f82:	a808      	add	r0, sp, #32
 8087f84:	f007 fe3e 	bl	808fc04 <_ZN6StringD1Ev>
 8087f88:	b155      	cbz	r5, 8087fa0 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0x74>
        spiffslog.error("Metric empty or corrupted");
 8087f8a:	4922      	ldr	r1, [pc, #136]	; (8088014 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xe8>)
 8087f8c:	4820      	ldr	r0, [pc, #128]	; (8088010 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xe4>)
 8087f8e:	f7ff fa74 	bl	808747a <_ZNK5spark6Logger5errorEPKcz>
        return false;
 8087f92:	2400      	movs	r4, #0
    String metric_to_publish = readGXMetrics(metric_name);
 8087f94:	a804      	add	r0, sp, #16
 8087f96:	f007 fe35 	bl	808fc04 <_ZN6StringD1Ev>
}
 8087f9a:	4620      	mov	r0, r4
 8087f9c:	b00d      	add	sp, #52	; 0x34
 8087f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    spiffslog.info("Publishing metric '%s' from flash..", metric_name);
 8087fa0:	4622      	mov	r2, r4
 8087fa2:	491d      	ldr	r1, [pc, #116]	; (8088018 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xec>)
 8087fa4:	481a      	ldr	r0, [pc, #104]	; (8088010 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xe4>)
 8087fa6:	f7fd fcf5 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
    return Flags<TagT, ValueT>(val_ | flags.val_);
 8087faa:	4b1c      	ldr	r3, [pc, #112]	; (808801c <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xf0>)
 8087fac:	4a1c      	ldr	r2, [pc, #112]	; (8088020 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xf4>)
 8087fae:	781b      	ldrb	r3, [r3, #0]
 8087fb0:	7812      	ldrb	r2, [r2, #0]
 8087fb2:	491c      	ldr	r1, [pc, #112]	; (8088024 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xf8>)
 8087fb4:	4313      	orrs	r3, r2
 8087fb6:	f88d 3000 	strb.w	r3, [sp]
 8087fba:	9a04      	ldr	r2, [sp, #16]
 8087fbc:	233c      	movs	r3, #60	; 0x3c
 8087fbe:	a808      	add	r0, sp, #32
 8087fc0:	f005 fd32 	bl	808da28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      ~__shared_ptr() = default;
 8087fc4:	a809      	add	r0, sp, #36	; 0x24
 8087fc6:	f7fe faed 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    memset(last_published_metric, '\0', sizeof(last_published_metric));
 8087fca:	2214      	movs	r2, #20
 8087fcc:	4629      	mov	r1, r5
 8087fce:	4816      	ldr	r0, [pc, #88]	; (8088028 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xfc>)
 8087fd0:	f009 ff78 	bl	8091ec4 <memset>
    strncpy(last_published_metric, metric_name, strlen(metric_name));
 8087fd4:	4620      	mov	r0, r4
 8087fd6:	f009 ffe6 	bl	8091fa6 <strlen>
 8087fda:	4621      	mov	r1, r4
 8087fdc:	4602      	mov	r2, r0
 8087fde:	4812      	ldr	r0, [pc, #72]	; (8088028 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xfc>)
 8087fe0:	f009 fffb 	bl	8091fda <strncpy>
    if(validateConfigurations() == false){ return false;}
 8087fe4:	f004 fec8 	bl	808cd78 <_Z22validateConfigurationsv>
 8087fe8:	4604      	mov	r4, r0
 8087fea:	2800      	cmp	r0, #0
 8087fec:	d0d2      	beq.n	8087f94 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0x68>
    strncpy(mainGXConfig.LAST_PUBL_METRIC, last_published_metric, strlen(last_published_metric));
 8087fee:	480e      	ldr	r0, [pc, #56]	; (8088028 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xfc>)
 8087ff0:	f009 ffd9 	bl	8091fa6 <strlen>
 8087ff4:	490c      	ldr	r1, [pc, #48]	; (8088028 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0xfc>)
 8087ff6:	4602      	mov	r2, r0
 8087ff8:	480c      	ldr	r0, [pc, #48]	; (808802c <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0x100>)
 8087ffa:	f009 ffee 	bl	8091fda <strncpy>
    storeConfigurations();
 8087ffe:	f004 fee7 	bl	808cdd0 <_Z19storeConfigurationsv>
    return true;
 8088002:	e7c7      	b.n	8087f94 <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0x68>
        (metrics_ts < last_published_ts || metrics_idx == last_published_idx)) return false;
 8088004:	2400      	movs	r4, #0
 8088006:	e7c8      	b.n	8087f9a <_ZN8GXSpiffs19publishSavedMetricsEPKcmt+0x6e>
 8088008:	08093c08 	.word	0x08093c08
 808800c:	08093f7b 	.word	0x08093f7b
 8088010:	20000de0 	.word	0x20000de0
 8088014:	08093f96 	.word	0x08093f96
 8088018:	08093fb0 	.word	0x08093fb0
 808801c:	20000ddc 	.word	0x20000ddc
 8088020:	20000ddd 	.word	0x20000ddd
 8088024:	080938d4 	.word	0x080938d4
 8088028:	2000124f 	.word	0x2000124f
 808802c:	2000126c 	.word	0x2000126c

08088030 <_ZN8GXSpiffs16sendSavedMetricsEPKc>:
{
 8088030:	b570      	push	{r4, r5, r6, lr}
 8088032:	4605      	mov	r5, r0
 8088034:	460c      	mov	r4, r1
 8088036:	b096      	sub	sp, #88	; 0x58
    spiffslog.info("In sendSavedMetrics...");
 8088038:	4930      	ldr	r1, [pc, #192]	; (80880fc <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xcc>)
 808803a:	4831      	ldr	r0, [pc, #196]	; (8088100 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xd0>)
 808803c:	f7fd fcaa 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
    GXPartitionOps partitionMgr(spiFlash, filesys);
 8088040:	e9d5 1200 	ldrd	r1, r2, [r5]
 8088044:	a807      	add	r0, sp, #28
 8088046:	f7ff fcf1 	bl	8087a2c <_ZN14GXPartitionOpsC1EP15SpiFlashWinbondP14SpiffsParticle>
    sscanf(last_published_metric, "met%lu_%hu", &last_published_ts, &last_published_idx);
 808804a:	492e      	ldr	r1, [pc, #184]	; (8088104 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xd4>)
 808804c:	ab01      	add	r3, sp, #4
 808804e:	aa02      	add	r2, sp, #8
 8088050:	482d      	ldr	r0, [pc, #180]	; (8088108 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xd8>)
 8088052:	f005 fa81 	bl	808d558 <sscanf>
    sscanf(last_saved_metric, "met%lu_%hu", &last_saved_ts, &last_saved_idx);
 8088056:	492b      	ldr	r1, [pc, #172]	; (8088104 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xd4>)
 8088058:	f10d 0306 	add.w	r3, sp, #6
 808805c:	aa03      	add	r2, sp, #12
 808805e:	4620      	mov	r0, r4
 8088060:	f005 fa7a 	bl	808d558 <sscanf>
    spiffslog.trace("Last published metric timestamp and index: %lu, %d", last_published_ts, last_published_idx);
 8088064:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8088068:	9a02      	ldr	r2, [sp, #8]
 808806a:	4928      	ldr	r1, [pc, #160]	; (808810c <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xdc>)
 808806c:	4824      	ldr	r0, [pc, #144]	; (8088100 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xd0>)
 808806e:	f7ff f9f5 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>
    spiffslog.trace("Last saved metric timestamp and index: %lu, %d", last_saved_ts, last_saved_idx);
 8088072:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8088076:	9a03      	ldr	r2, [sp, #12]
 8088078:	4925      	ldr	r1, [pc, #148]	; (8088110 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xe0>)
 808807a:	4821      	ldr	r0, [pc, #132]	; (8088100 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xd0>)
 808807c:	f7ff f9ee 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>
    if (last_published_ts >= last_saved_ts)
 8088080:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8088084:	429a      	cmp	r2, r3
 8088086:	d30a      	bcc.n	808809e <_ZN8GXSpiffs16sendSavedMetricsEPKc+0x6e>
        spiffslog.info("All saved Metrics have been published.");
 8088088:	4922      	ldr	r1, [pc, #136]	; (8088114 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xe4>)
 808808a:	481d      	ldr	r0, [pc, #116]	; (8088100 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xd0>)
 808808c:	f7fd fc82 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
        return SPIFFS_RET::SPIFFS_NO_SAVED_METRICS_TO_PUBLISH;
 8088090:	2401      	movs	r4, #1
    GXPartitionOps partitionMgr(spiFlash, filesys);
 8088092:	a807      	add	r0, sp, #28
 8088094:	f7ff fcd7 	bl	8087a46 <_ZN14GXPartitionOpsD1Ev>
}
 8088098:	4620      	mov	r0, r4
 808809a:	b016      	add	sp, #88	; 0x58
 808809c:	bd70      	pop	{r4, r5, r6, pc}
    partitionMgr.openDirectory(&dir);
 808809e:	a904      	add	r1, sp, #16
 80880a0:	a807      	add	r0, sp, #28
 80880a2:	f7ff fe6d 	bl	8087d80 <_ZN14GXPartitionOps13openDirectoryEP10spiffs_DIR>
    spiffs_dirent GXMetric; uint8_t num_metrics_published = 0;
 80880a6:	2600      	movs	r6, #0
 80880a8:	a90b      	add	r1, sp, #44	; 0x2c
 80880aa:	a804      	add	r0, sp, #16
 80880ac:	f7f9 fd5c 	bl	8081b68 <SPIFFS_readdir>
    while(partitionMgr.readDirectory(&dir, &GXMetric))
 80880b0:	4604      	mov	r4, r0
 80880b2:	2800      	cmp	r0, #0
 80880b4:	d0ed      	beq.n	8088092 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0x62>
        if (num_metrics_published >= MAX_METRICS_TO_PUBLISH_PER_LOOP)
 80880b6:	2e5f      	cmp	r6, #95	; 0x5f
 80880b8:	d906      	bls.n	80880c8 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0x98>
            spiffslog.warn("Maximum number (%u) of saved metrics have been published in this loop", num_metrics_published);
 80880ba:	4632      	mov	r2, r6
 80880bc:	4916      	ldr	r1, [pc, #88]	; (8088118 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xe8>)
 80880be:	4810      	ldr	r0, [pc, #64]	; (8088100 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xd0>)
 80880c0:	f7fe fe60 	bl	8086d84 <_ZNK5spark6Logger4warnEPKcz>
            return SPIFFS_RET::SPIFFS_MAX_SAVED_METRICS_PUBLISHED;
 80880c4:	2402      	movs	r4, #2
 80880c6:	e7e4      	b.n	8088092 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0x62>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80880c8:	f005 f99e 	bl	808d408 <spark_cloud_flag_connected>
        if (!Particle.connected()) return SPIFFS_INTERNET_CONN_LOST;
 80880cc:	b198      	cbz	r0, 80880f6 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xc6>
        if(publishSavedMetrics((const char*)GXMetric.name, last_published_ts, last_published_idx))
 80880ce:	4628      	mov	r0, r5
 80880d0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80880d4:	9a02      	ldr	r2, [sp, #8]
 80880d6:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 80880da:	f7ff ff27 	bl	8087f2c <_ZN8GXSpiffs19publishSavedMetricsEPKcmt>
 80880de:	b128      	cbz	r0, 80880ec <_ZN8GXSpiffs16sendSavedMetricsEPKc+0xbc>
            num_metrics_published++;
 80880e0:	3601      	adds	r6, #1
            delay(1010);
 80880e2:	f240 30f2 	movw	r0, #1010	; 0x3f2
            num_metrics_published++;
 80880e6:	b2f6      	uxtb	r6, r6
            delay(1010);
 80880e8:	f005 fab7 	bl	808d65a <delay>
        spiFlash->begin();
 80880ec:	6828      	ldr	r0, [r5, #0]
 80880ee:	6803      	ldr	r3, [r0, #0]
 80880f0:	689b      	ldr	r3, [r3, #8]
 80880f2:	4798      	blx	r3
    while(partitionMgr.readDirectory(&dir, &GXMetric))
 80880f4:	e7d8      	b.n	80880a8 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0x78>
        if (!Particle.connected()) return SPIFFS_INTERNET_CONN_LOST;
 80880f6:	2403      	movs	r4, #3
 80880f8:	e7cb      	b.n	8088092 <_ZN8GXSpiffs16sendSavedMetricsEPKc+0x62>
 80880fa:	bf00      	nop
 80880fc:	08093fd4 	.word	0x08093fd4
 8088100:	20000de0 	.word	0x20000de0
 8088104:	08093c08 	.word	0x08093c08
 8088108:	2000124f 	.word	0x2000124f
 808810c:	08093feb 	.word	0x08093feb
 8088110:	0809401e 	.word	0x0809401e
 8088114:	0809404d 	.word	0x0809404d
 8088118:	08094074 	.word	0x08094074

0808811c <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_>:
{
 808811c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808811e:	460c      	mov	r4, r1
 8088120:	b08d      	sub	sp, #52	; 0x34
 8088122:	4605      	mov	r5, r0
 8088124:	4616      	mov	r6, r2
 8088126:	461f      	mov	r7, r3
    if ((sscanf(metric_name, "met%lu_%hu", &metric_ts, &metric_idx) != 2)  ||
 8088128:	4620      	mov	r0, r4
 808812a:	4926      	ldr	r1, [pc, #152]	; (80881c4 <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0xa8>)
 808812c:	f10d 030a 	add.w	r3, sp, #10
 8088130:	aa03      	add	r2, sp, #12
 8088132:	f005 fa11 	bl	808d558 <sscanf>
 8088136:	2802      	cmp	r0, #2
 8088138:	d141      	bne.n	80881be <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0xa2>
        (metric_ts < start_time || metric_ts > end_time)) return false;
 808813a:	9b03      	ldr	r3, [sp, #12]
    if ((sscanf(metric_name, "met%lu_%hu", &metric_ts, &metric_idx) != 2)  ||
 808813c:	683a      	ldr	r2, [r7, #0]
 808813e:	429a      	cmp	r2, r3
 8088140:	d83d      	bhi.n	80881be <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0xa2>
        (metric_ts < start_time || metric_ts > end_time)) return false;
 8088142:	6832      	ldr	r2, [r6, #0]
 8088144:	4293      	cmp	r3, r2
 8088146:	d83a      	bhi.n	80881be <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0xa2>
    spiffslog.trace("Getting information for %s", metric_name);
 8088148:	4622      	mov	r2, r4
 808814a:	491f      	ldr	r1, [pc, #124]	; (80881c8 <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0xac>)
 808814c:	481f      	ldr	r0, [pc, #124]	; (80881cc <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0xb0>)
 808814e:	f7ff f985 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>
    String metric_to_publish = readGXMetrics(metric_name);
 8088152:	4629      	mov	r1, r5
 8088154:	4622      	mov	r2, r4
 8088156:	a804      	add	r0, sp, #16
 8088158:	f7ff fdb8 	bl	8087ccc <_ZN8GXSpiffs13readGXMetricsEPKc>
    if (metric_to_publish == String(SPIFFS_FAIL))
 808815c:	220a      	movs	r2, #10
 808815e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8088162:	a808      	add	r0, sp, #32
 8088164:	f007 fe18 	bl	808fd98 <_ZN6StringC1Eih>
 8088168:	a908      	add	r1, sp, #32
 808816a:	a804      	add	r0, sp, #16
 808816c:	f007 fefa 	bl	808ff64 <_ZNK6String6equalsERKS_>
 8088170:	4605      	mov	r5, r0
 8088172:	a808      	add	r0, sp, #32
 8088174:	f007 fd46 	bl	808fc04 <_ZN6StringD1Ev>
 8088178:	b155      	cbz	r5, 8088190 <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0x74>
        spiffslog.error("Metric empty or corrupted");
 808817a:	4915      	ldr	r1, [pc, #84]	; (80881d0 <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0xb4>)
 808817c:	4813      	ldr	r0, [pc, #76]	; (80881cc <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0xb0>)
 808817e:	f7ff f97c 	bl	808747a <_ZNK5spark6Logger5errorEPKcz>
        return false;
 8088182:	2400      	movs	r4, #0
    String metric_to_publish = readGXMetrics(metric_name);
 8088184:	a804      	add	r0, sp, #16
 8088186:	f007 fd3d 	bl	808fc04 <_ZN6StringD1Ev>
}
 808818a:	4620      	mov	r0, r4
 808818c:	b00d      	add	sp, #52	; 0x34
 808818e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    spiffslog.info("Publishing metric '%s' from flash..", metric_name);
 8088190:	4622      	mov	r2, r4
 8088192:	4910      	ldr	r1, [pc, #64]	; (80881d4 <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0xb8>)
 8088194:	480d      	ldr	r0, [pc, #52]	; (80881cc <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0xb0>)
 8088196:	f7fd fbfd 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
 808819a:	4b0f      	ldr	r3, [pc, #60]	; (80881d8 <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0xbc>)
 808819c:	4a0f      	ldr	r2, [pc, #60]	; (80881dc <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0xc0>)
 808819e:	781b      	ldrb	r3, [r3, #0]
 80881a0:	7812      	ldrb	r2, [r2, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80881a2:	490f      	ldr	r1, [pc, #60]	; (80881e0 <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0xc4>)
 80881a4:	4313      	orrs	r3, r2
 80881a6:	f88d 3000 	strb.w	r3, [sp]
 80881aa:	9a04      	ldr	r2, [sp, #16]
 80881ac:	233c      	movs	r3, #60	; 0x3c
 80881ae:	a808      	add	r0, sp, #32
 80881b0:	f005 fc3a 	bl	808da28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80881b4:	a809      	add	r0, sp, #36	; 0x24
 80881b6:	f7fe f9f5 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return true;
 80881ba:	2401      	movs	r4, #1
 80881bc:	e7e2      	b.n	8088184 <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0x68>
        (metric_ts < start_time || metric_ts > end_time)) return false;
 80881be:	2400      	movs	r4, #0
 80881c0:	e7e3      	b.n	808818a <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_+0x6e>
 80881c2:	bf00      	nop
 80881c4:	08093c08 	.word	0x08093c08
 80881c8:	08093f7b 	.word	0x08093f7b
 80881cc:	20000de0 	.word	0x20000de0
 80881d0:	08093f96 	.word	0x08093f96
 80881d4:	08093fb0 	.word	0x08093fb0
 80881d8:	20000ddc 	.word	0x20000ddc
 80881dc:	20000ddd 	.word	0x20000ddd
 80881e0:	080938d4 	.word	0x080938d4

080881e4 <_ZN8GXSpiffs15retrieveMetricsERmS0_>:
{
 80881e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80881e8:	4605      	mov	r5, r0
 80881ea:	b092      	sub	sp, #72	; 0x48
    spiffslog.info("Publishing metrics requested from the Cloud..");
 80881ec:	481d      	ldr	r0, [pc, #116]	; (8088264 <_ZN8GXSpiffs15retrieveMetricsERmS0_+0x80>)
{
 80881ee:	460f      	mov	r7, r1
    spiffslog.info("Publishing metrics requested from the Cloud..");
 80881f0:	491d      	ldr	r1, [pc, #116]	; (8088268 <_ZN8GXSpiffs15retrieveMetricsERmS0_+0x84>)
{
 80881f2:	4690      	mov	r8, r2
    spiffslog.info("Publishing metrics requested from the Cloud..");
 80881f4:	f7fd fbce 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
    GXPartitionOps partitionMgr(spiFlash, filesys);
 80881f8:	e9d5 1200 	ldrd	r1, r2, [r5]
 80881fc:	a803      	add	r0, sp, #12
 80881fe:	f7ff fc15 	bl	8087a2c <_ZN14GXPartitionOpsC1EP15SpiFlashWinbondP14SpiffsParticle>
    partitionMgr.openDirectory(&dir);
 8088202:	4669      	mov	r1, sp
 8088204:	a803      	add	r0, sp, #12
 8088206:	f7ff fdbb 	bl	8087d80 <_ZN14GXPartitionOps13openDirectoryEP10spiffs_DIR>
    int num_metrics_published = 0;
 808820a:	2600      	movs	r6, #0
 808820c:	4668      	mov	r0, sp
 808820e:	a907      	add	r1, sp, #28
 8088210:	f7f9 fcaa 	bl	8081b68 <SPIFFS_readdir>
    while(partitionMgr.readDirectory(&dir, &GXMetric))
 8088214:	4604      	mov	r4, r0
 8088216:	b138      	cbz	r0, 8088228 <_ZN8GXSpiffs15retrieveMetricsERmS0_+0x44>
        if (num_metrics_published >= MAX_METRICS_TO_PUBLISH_PER_LOOP)
 8088218:	2e5f      	cmp	r6, #95	; 0x5f
 808821a:	dd0c      	ble.n	8088236 <_ZN8GXSpiffs15retrieveMetricsERmS0_+0x52>
            spiffslog.warn("Maximum number (%u) of saved metrics have been published in this loop", num_metrics_published);
 808821c:	4632      	mov	r2, r6
 808821e:	4913      	ldr	r1, [pc, #76]	; (808826c <_ZN8GXSpiffs15retrieveMetricsERmS0_+0x88>)
 8088220:	4810      	ldr	r0, [pc, #64]	; (8088264 <_ZN8GXSpiffs15retrieveMetricsERmS0_+0x80>)
 8088222:	f7fe fdaf 	bl	8086d84 <_ZNK5spark6Logger4warnEPKcz>
            return SPIFFS_RET::SPIFFS_MAX_SAVED_METRICS_PUBLISHED;
 8088226:	2402      	movs	r4, #2
    GXPartitionOps partitionMgr(spiFlash, filesys);
 8088228:	a803      	add	r0, sp, #12
 808822a:	f7ff fc0c 	bl	8087a46 <_ZN14GXPartitionOpsD1Ev>
}
 808822e:	4620      	mov	r0, r4
 8088230:	b012      	add	sp, #72	; 0x48
 8088232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8088236:	f005 f8e7 	bl	808d408 <spark_cloud_flag_connected>
        if (!Particle.connected()) return SPIFFS_INTERNET_CONN_LOST;
 808823a:	b188      	cbz	r0, 8088260 <_ZN8GXSpiffs15retrieveMetricsERmS0_+0x7c>
        if(publishSavedMetrics((const char*)GXMetric.name, end_time, start_time))
 808823c:	4643      	mov	r3, r8
 808823e:	463a      	mov	r2, r7
 8088240:	4628      	mov	r0, r5
 8088242:	f10d 011e 	add.w	r1, sp, #30
 8088246:	f7ff ff69 	bl	808811c <_ZN8GXSpiffs19publishSavedMetricsEPKcRKmS3_>
 808824a:	b120      	cbz	r0, 8088256 <_ZN8GXSpiffs15retrieveMetricsERmS0_+0x72>
            delay(1010);
 808824c:	f240 30f2 	movw	r0, #1010	; 0x3f2
            num_metrics_published++;
 8088250:	3601      	adds	r6, #1
            delay(1010);
 8088252:	f005 fa02 	bl	808d65a <delay>
        spiFlash->begin();
 8088256:	6828      	ldr	r0, [r5, #0]
 8088258:	6803      	ldr	r3, [r0, #0]
 808825a:	689b      	ldr	r3, [r3, #8]
 808825c:	4798      	blx	r3
    while(partitionMgr.readDirectory(&dir, &GXMetric))
 808825e:	e7d5      	b.n	808820c <_ZN8GXSpiffs15retrieveMetricsERmS0_+0x28>
        if (!Particle.connected()) return SPIFFS_INTERNET_CONN_LOST;
 8088260:	2403      	movs	r4, #3
 8088262:	e7e1      	b.n	8088228 <_ZN8GXSpiffs15retrieveMetricsERmS0_+0x44>
 8088264:	20000de0 	.word	0x20000de0
 8088268:	080940ba 	.word	0x080940ba
 808826c:	08094074 	.word	0x08094074

08088270 <_GLOBAL__sub_I_spiffslog>:
        val_(val) {
 8088270:	2201      	movs	r2, #1
 8088272:	4b04      	ldr	r3, [pc, #16]	; (8088284 <_GLOBAL__sub_I_spiffslog+0x14>)
 8088274:	701a      	strb	r2, [r3, #0]
 8088276:	2208      	movs	r2, #8
 8088278:	4b03      	ldr	r3, [pc, #12]	; (8088288 <_GLOBAL__sub_I_spiffslog+0x18>)
 808827a:	701a      	strb	r2, [r3, #0]
        name_(name) {
 808827c:	4b03      	ldr	r3, [pc, #12]	; (808828c <_GLOBAL__sub_I_spiffslog+0x1c>)
 808827e:	4a04      	ldr	r2, [pc, #16]	; (8088290 <_GLOBAL__sub_I_spiffslog+0x20>)
 8088280:	601a      	str	r2, [r3, #0]

spiffs_dirent* GXPartitionOps::readDirectory(spiffs_DIR *dir, spiffs_dirent *dirent)
{
    return GXFileSys->readdir(dir, dirent);
}
 8088282:	4770      	bx	lr
 8088284:	20000ddc 	.word	0x20000ddc
 8088288:	20000ddd 	.word	0x20000ddd
 808828c:	20000de0 	.word	0x20000de0
 8088290:	080940e8 	.word	0x080940e8

08088294 <_Z14storeGenConfig13GeneratorSlot6Stringhhhth>:
}


int storeGenConfig(GeneratorSlot gen_slot, String genName, uint8_t gen_type, uint8_t gen_address,
                   uint8_t relay_assign, uint16_t kva_rating, uint8_t baudRrate)
{
 8088294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8088298:	b096      	sub	sp, #88	; 0x58
 808829a:	460d      	mov	r5, r1
 808829c:	4690      	mov	r8, r2

    uint8_t new_gen_slot = static_cast<int>(gen_slot) - ZERO_INDEX_CORRECTION;

    GeneratorConfig newGenConfig[MAXIMUM_GENSETS];
 808829e:	4925      	ldr	r1, [pc, #148]	; (8088334 <_Z14storeGenConfig13GeneratorSlot6Stringhhhth+0xa0>)
 80882a0:	2254      	movs	r2, #84	; 0x54
    uint8_t new_gen_slot = static_cast<int>(gen_slot) - ZERO_INDEX_CORRECTION;
 80882a2:	1e44      	subs	r4, r0, #1
{
 80882a4:	4607      	mov	r7, r0
    GeneratorConfig newGenConfig[MAXIMUM_GENSETS];
 80882a6:	a801      	add	r0, sp, #4
{
 80882a8:	461e      	mov	r6, r3
    GeneratorConfig newGenConfig[MAXIMUM_GENSETS];
 80882aa:	f009 fde3 	bl	8091e74 <memcpy>

    strcpy(newGenConfig[new_gen_slot].name, genName);
 80882ae:	230e      	movs	r3, #14
    uint8_t new_gen_slot = static_cast<int>(gen_slot) - ZERO_INDEX_CORRECTION;
 80882b0:	b2e4      	uxtb	r4, r4
    strcpy(newGenConfig[new_gen_slot].name, genName);
 80882b2:	435c      	muls	r4, r3
 80882b4:	ab01      	add	r3, sp, #4
 80882b6:	6829      	ldr	r1, [r5, #0]
 80882b8:	1918      	adds	r0, r3, r4
 80882ba:	f009 fe50 	bl	8091f5e <strcpy>
    newGenConfig[new_gen_slot].type = gen_type;
 80882be:	ab16      	add	r3, sp, #88	; 0x58
 80882c0:	191d      	adds	r5, r3, r4
    newGenConfig[new_gen_slot].slave_id = gen_address;
    newGenConfig[new_gen_slot].relay = relay_assign;
 80882c2:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
    newGenConfig[new_gen_slot].type = gen_type;
 80882c6:	f805 8c4e 	strb.w	r8, [r5, #-78]
    newGenConfig[new_gen_slot].relay = relay_assign;
 80882ca:	f805 3c4c 	strb.w	r3, [r5, #-76]
    newGenConfig[new_gen_slot].kva_rating = kva_rating;
 80882ce:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
    newGenConfig[new_gen_slot].slave_id = gen_address;
 80882d2:	f805 6c4d 	strb.w	r6, [r5, #-77]
    newGenConfig[new_gen_slot].kva_rating = kva_rating;
 80882d6:	f825 3c4a 	strh.w	r3, [r5, #-74]
    newGenConfig[new_gen_slot].baud_rate = baudRrate;
 80882da:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 80882de:	f805 3c48 	strb.w	r3, [r5, #-72]

    // Verify if configurations in the EEPROM are still valid
    if(validateConfigurations() == false)
 80882e2:	f004 fd49 	bl	808cd78 <_Z22validateConfigurationsv>
 80882e6:	b308      	cbz	r0, 808832c <_Z14storeGenConfig13GeneratorSlot6Stringhhhth+0x98>
    { return CONFIG_INVALID; }
    
    // Existing configurations in EEPROM are valid, hence, update the config struct with the new Genset config
    mainGXConfig.GENCONFIG[new_gen_slot] = newGenConfig[new_gen_slot];
 80882e8:	4e13      	ldr	r6, [pc, #76]	; (8088338 <_Z14storeGenConfig13GeneratorSlot6Stringhhhth+0xa4>)
 80882ea:	f1a5 0354 	sub.w	r3, r5, #84	; 0x54
 80882ee:	4434      	add	r4, r6
 80882f0:	3418      	adds	r4, #24
 80882f2:	3d48      	subs	r5, #72	; 0x48
 80882f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80882f8:	42ab      	cmp	r3, r5
 80882fa:	f844 2b04 	str.w	r2, [r4], #4
 80882fe:	d1f9      	bne.n	80882f4 <_Z14storeGenConfig13GeneratorSlot6Stringhhhth+0x60>
 8088300:	881b      	ldrh	r3, [r3, #0]
 8088302:	8023      	strh	r3, [r4, #0]
    mainGXConfig.GENCONFIGS_STATUS = new_gen_slot + ZERO_INDEX_CORRECTION;
 8088304:	f886 706c 	strb.w	r7, [r6, #108]	; 0x6c

    // Save the new set of Genset configuration to the EEPROM
    storeConfigurations();     
 8088308:	f004 fd62 	bl	808cdd0 <_Z19storeConfigurationsv>

    new_genconfig_flag = true;
 808830c:	2201      	movs	r2, #1
 808830e:	4b0b      	ldr	r3, [pc, #44]	; (808833c <_Z14storeGenConfig13GeneratorSlot6Stringhhhth+0xa8>)
 8088310:	701a      	strb	r2, [r3, #0]
 8088312:	f004 fe13 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
    new_genconfig_resetdelay = millis() + RESET_DELAY_90S;
 8088316:	4b0a      	ldr	r3, [pc, #40]	; (8088340 <_Z14storeGenConfig13GeneratorSlot6Stringhhhth+0xac>)
 8088318:	f500 30af 	add.w	r0, r0, #89600	; 0x15e00
 808831c:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 8088320:	6018      	str	r0, [r3, #0]

    return mainGXConfig.GENCONFIGS_STATUS;                                
 8088322:	f896 006c 	ldrb.w	r0, [r6, #108]	; 0x6c
}
 8088326:	b016      	add	sp, #88	; 0x58
 8088328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    { return CONFIG_INVALID; }
 808832c:	f06f 0015 	mvn.w	r0, #21
 8088330:	e7f9      	b.n	8088326 <_Z14storeGenConfig13GeneratorSlot6Stringhhhth+0x92>
 8088332:	bf00      	nop
 8088334:	0809411a 	.word	0x0809411a
 8088338:	20001268 	.word	0x20001268
 808833c:	200012ee 	.word	0x200012ee
 8088340:	200012f0 	.word	0x200012f0

08088344 <_Z14resetGenConfigv>:

bool resetGenConfig()
{
 8088344:	b530      	push	{r4, r5, lr}
 8088346:	b097      	sub	sp, #92	; 0x5c

    GeneratorConfig defaultGenConfig[MAXIMUM_GENSETS];
 8088348:	2254      	movs	r2, #84	; 0x54
 808834a:	4911      	ldr	r1, [pc, #68]	; (8088390 <_Z14resetGenConfigv+0x4c>)
 808834c:	a801      	add	r0, sp, #4
 808834e:	f009 fd91 	bl	8091e74 <memcpy>

    // Verify if configurations in the EEPROM are still valid
    if(validateConfigurations() == false)
 8088352:	f004 fd11 	bl	808cd78 <_Z22validateConfigurationsv>
 8088356:	4604      	mov	r4, r0
 8088358:	b1b0      	cbz	r0, 8088388 <_Z14resetGenConfigv+0x44>
    { return false; }

    memcpy(mainGXConfig.GENCONFIG, defaultGenConfig, sizeof(defaultGenConfig));
 808835a:	4d0e      	ldr	r5, [pc, #56]	; (8088394 <_Z14resetGenConfigv+0x50>)
 808835c:	2254      	movs	r2, #84	; 0x54
 808835e:	a901      	add	r1, sp, #4
 8088360:	f105 0018 	add.w	r0, r5, #24
 8088364:	f009 fd86 	bl	8091e74 <memcpy>

    mainGXConfig.GENCONFIGS_STATUS = GENS_REMOVED;
 8088368:	2307      	movs	r3, #7
 808836a:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c

    // Save the default Genset configuration to the EEPROM
    storeConfigurations();
 808836e:	f004 fd2f 	bl	808cdd0 <_Z19storeConfigurationsv>

    new_genconfig_flag = true;
 8088372:	2201      	movs	r2, #1
 8088374:	4b08      	ldr	r3, [pc, #32]	; (8088398 <_Z14resetGenConfigv+0x54>)
 8088376:	701a      	strb	r2, [r3, #0]
 8088378:	f004 fde0 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
    new_genconfig_resetdelay = millis() + RESET_DELAY_90S;
 808837c:	4a07      	ldr	r2, [pc, #28]	; (808839c <_Z14resetGenConfigv+0x58>)
 808837e:	f500 30af 	add.w	r0, r0, #89600	; 0x15e00
 8088382:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 8088386:	6010      	str	r0, [r2, #0]

    return true;   
}
 8088388:	4620      	mov	r0, r4
 808838a:	b017      	add	sp, #92	; 0x5c
 808838c:	bd30      	pop	{r4, r5, pc}
 808838e:	bf00      	nop
 8088390:	0809411a 	.word	0x0809411a
 8088394:	20001268 	.word	0x20001268
 8088398:	200012ee 	.word	0x200012ee
 808839c:	200012f0 	.word	0x200012f0

080883a0 <_Z18serialStorageCheck13GeneratorSlot>:
bool serialStorageCheck(GeneratorSlot gen_slot)
{
    uint8_t new_gen_slot = static_cast<uint8_t>(gen_slot);

    uint8_t last_saved_genslot = NO_GEN_SPECIFIED;
    last_saved_genslot = mainGXConfig.GENCONFIGS_STATUS;
 80883a0:	4b08      	ldr	r3, [pc, #32]	; (80883c4 <_Z18serialStorageCheck13GeneratorSlot+0x24>)
 80883a2:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
    if ((last_saved_genslot == GENS_REMOVED) && 
        (new_gen_slot == GEN1))
    { return true; }

    // We have filled genSlot_6 and now intend to fill genSlot_1
    if ((last_saved_genslot == GEN6) && 
 80883a6:	1f9a      	subs	r2, r3, #6
 80883a8:	2a01      	cmp	r2, #1
 80883aa:	d801      	bhi.n	80883b0 <_Z18serialStorageCheck13GeneratorSlot+0x10>
    if ((last_saved_genslot == GENS_REMOVED) && 
 80883ac:	2801      	cmp	r0, #1
 80883ae:	d007      	beq.n	80883c0 <_Z18serialStorageCheck13GeneratorSlot+0x20>
        (new_gen_slot == GEN1))
    { return true; }

    // We have filled genSlot_(N) and now intend to override it or fill genSlot_(N+1)
    if ((last_saved_genslot == new_gen_slot) || 
 80883b0:	4298      	cmp	r0, r3
 80883b2:	d004      	beq.n	80883be <_Z18serialStorageCheck13GeneratorSlot+0x1e>
        (new_gen_slot == (last_saved_genslot + ZERO_INDEX_CORRECTION)))
 80883b4:	3301      	adds	r3, #1
    if ((last_saved_genslot == new_gen_slot) || 
 80883b6:	1a1b      	subs	r3, r3, r0
 80883b8:	4258      	negs	r0, r3
 80883ba:	4158      	adcs	r0, r3
 80883bc:	4770      	bx	lr
    { return true; }
 80883be:	2001      	movs	r0, #1

    return false;
}
 80883c0:	4770      	bx	lr
 80883c2:	bf00      	nop
 80883c4:	20001268 	.word	0x20001268

080883c8 <_Z17genConfigurations6String>:
{
 80883c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80883cc:	b095      	sub	sp, #84	; 0x54
    String genPosition = getStringValueAtIndex(fullCommand, COMMA_CHAR, 0);
 80883ce:	4601      	mov	r1, r0
{
 80883d0:	4604      	mov	r4, r0
    String genPosition = getStringValueAtIndex(fullCommand, COMMA_CHAR, 0);
 80883d2:	a810      	add	r0, sp, #64	; 0x40
 80883d4:	f007 fcaa 	bl	808fd2c <_ZN6StringC1ERKS_>
 80883d8:	a910      	add	r1, sp, #64	; 0x40
 80883da:	2300      	movs	r3, #0
 80883dc:	222c      	movs	r2, #44	; 0x2c
 80883de:	a804      	add	r0, sp, #16
 80883e0:	f001 f8b2 	bl	8089548 <_Z21getStringValueAtIndex6Stringci>
 80883e4:	a810      	add	r0, sp, #64	; 0x40
 80883e6:	f007 fc0d 	bl	808fc04 <_ZN6StringD1Ev>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80883ea:	4985      	ldr	r1, [pc, #532]	; (8088600 <_Z17genConfigurations6String+0x238>)
 80883ec:	a804      	add	r0, sp, #16
 80883ee:	f007 fdc6 	bl	808ff7e <_ZNK6String6equalsEPKc>
    if (genPosition == "gen1") received_gen_slot = GEN1;
 80883f2:	2800      	cmp	r0, #0
 80883f4:	d13e      	bne.n	8088474 <_Z17genConfigurations6String+0xac>
 80883f6:	4983      	ldr	r1, [pc, #524]	; (8088604 <_Z17genConfigurations6String+0x23c>)
 80883f8:	a804      	add	r0, sp, #16
 80883fa:	f007 fdc0 	bl	808ff7e <_ZNK6String6equalsEPKc>
    else if (genPosition == "gen2") received_gen_slot = GEN2;
 80883fe:	2800      	cmp	r0, #0
 8088400:	f040 80df 	bne.w	80885c2 <_Z17genConfigurations6String+0x1fa>
 8088404:	4980      	ldr	r1, [pc, #512]	; (8088608 <_Z17genConfigurations6String+0x240>)
 8088406:	a804      	add	r0, sp, #16
 8088408:	f007 fdb9 	bl	808ff7e <_ZNK6String6equalsEPKc>
    else if (genPosition == "gen3") received_gen_slot = GEN3;
 808840c:	2800      	cmp	r0, #0
 808840e:	f040 80da 	bne.w	80885c6 <_Z17genConfigurations6String+0x1fe>
 8088412:	497e      	ldr	r1, [pc, #504]	; (808860c <_Z17genConfigurations6String+0x244>)
 8088414:	a804      	add	r0, sp, #16
 8088416:	f007 fdb2 	bl	808ff7e <_ZNK6String6equalsEPKc>
    else if (genPosition == "gen4") received_gen_slot = GEN4;
 808841a:	2800      	cmp	r0, #0
 808841c:	f040 80d5 	bne.w	80885ca <_Z17genConfigurations6String+0x202>
 8088420:	497b      	ldr	r1, [pc, #492]	; (8088610 <_Z17genConfigurations6String+0x248>)
 8088422:	a804      	add	r0, sp, #16
 8088424:	f007 fdab 	bl	808ff7e <_ZNK6String6equalsEPKc>
    else if (genPosition == "gen5") received_gen_slot = GEN5;
 8088428:	2800      	cmp	r0, #0
 808842a:	f040 80d0 	bne.w	80885ce <_Z17genConfigurations6String+0x206>
 808842e:	4979      	ldr	r1, [pc, #484]	; (8088614 <_Z17genConfigurations6String+0x24c>)
 8088430:	a804      	add	r0, sp, #16
 8088432:	f007 fda4 	bl	808ff7e <_ZNK6String6equalsEPKc>
    else if (genPosition == "gen6") received_gen_slot = GEN6;
 8088436:	2800      	cmp	r0, #0
 8088438:	f040 80cb 	bne.w	80885d2 <_Z17genConfigurations6String+0x20a>
 808843c:	4976      	ldr	r1, [pc, #472]	; (8088618 <_Z17genConfigurations6String+0x250>)
 808843e:	a804      	add	r0, sp, #16
 8088440:	f007 fd9d 	bl	808ff7e <_ZNK6String6equalsEPKc>
    else if (genPosition == "clear") received_gen_slot = GENS_REMOVED;
 8088444:	4604      	mov	r4, r0
 8088446:	b968      	cbnz	r0, 8088464 <_Z17genConfigurations6String+0x9c>
 8088448:	4974      	ldr	r1, [pc, #464]	; (808861c <_Z17genConfigurations6String+0x254>)
 808844a:	a804      	add	r0, sp, #16
 808844c:	f007 fd97 	bl	808ff7e <_ZNK6String6equalsEPKc>
    else if (genPosition == "") received_gen_slot = NO_GEN_SPECIFIED;
 8088450:	b960      	cbnz	r0, 808846c <_Z17genConfigurations6String+0xa4>
    else return GENCONFIG_SLOT_ERROR;
 8088452:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    String genPosition = getStringValueAtIndex(fullCommand, COMMA_CHAR, 0);
 8088456:	a804      	add	r0, sp, #16
 8088458:	f007 fbd4 	bl	808fc04 <_ZN6StringD1Ev>
}
 808845c:	4620      	mov	r0, r4
 808845e:	b015      	add	sp, #84	; 0x54
 8088460:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        resetGenConfig();
 8088464:	f7ff ff6e 	bl	8088344 <_Z14resetGenConfigv>
        return (static_cast<int>(received_gen_slot));
 8088468:	2407      	movs	r4, #7
 808846a:	e7f4      	b.n	8088456 <_Z17genConfigurations6String+0x8e>
        publish_genconfig_flag = true;
 808846c:	2201      	movs	r2, #1
 808846e:	4b6c      	ldr	r3, [pc, #432]	; (8088620 <_Z17genConfigurations6String+0x258>)
 8088470:	701a      	strb	r2, [r3, #0]
        return (static_cast<int>(received_gen_slot));
 8088472:	e7f0      	b.n	8088456 <_Z17genConfigurations6String+0x8e>
    if (genPosition == "gen1") received_gen_slot = GEN1;
 8088474:	2501      	movs	r5, #1
    if (serialStorageCheck(received_gen_slot) == false)
 8088476:	4628      	mov	r0, r5
 8088478:	f7ff ff92 	bl	80883a0 <_Z18serialStorageCheck13GeneratorSlot>
 808847c:	2800      	cmp	r0, #0
 808847e:	f000 80bc 	beq.w	80885fa <_Z17genConfigurations6String+0x232>
    String receivedGenName = getStringValueAtIndex(fullCommand, COMMA_CHAR, 1);
 8088482:	4621      	mov	r1, r4
 8088484:	a810      	add	r0, sp, #64	; 0x40
 8088486:	f007 fc51 	bl	808fd2c <_ZN6StringC1ERKS_>
 808848a:	2301      	movs	r3, #1
 808848c:	222c      	movs	r2, #44	; 0x2c
 808848e:	a910      	add	r1, sp, #64	; 0x40
 8088490:	a808      	add	r0, sp, #32
 8088492:	f001 f859 	bl	8089548 <_Z21getStringValueAtIndex6Stringci>
 8088496:	a810      	add	r0, sp, #64	; 0x40
 8088498:	f007 fbb4 	bl	808fc04 <_ZN6StringD1Ev>
    if (((receivedGenName.length() < MIN_GEN_NAME_LENGTH) || (receivedGenName.length() > MAX_GEN_NAME_LENGTH)))
 808849c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808849e:	3b03      	subs	r3, #3
 80884a0:	2b02      	cmp	r3, #2
 80884a2:	f200 8098 	bhi.w	80885d6 <_Z17genConfigurations6String+0x20e>
    uint8_t received_gen_type = atoi(getStringValueAtIndex(fullCommand, COMMA_CHAR, 2));
 80884a6:	4621      	mov	r1, r4
 80884a8:	a80c      	add	r0, sp, #48	; 0x30
 80884aa:	f007 fc3f 	bl	808fd2c <_ZN6StringC1ERKS_>
 80884ae:	2302      	movs	r3, #2
 80884b0:	222c      	movs	r2, #44	; 0x2c
 80884b2:	a90c      	add	r1, sp, #48	; 0x30
 80884b4:	a810      	add	r0, sp, #64	; 0x40
 80884b6:	f001 f847 	bl	8089548 <_Z21getStringValueAtIndex6Stringci>
 80884ba:	9810      	ldr	r0, [sp, #64]	; 0x40
 80884bc:	f009 fcb4 	bl	8091e28 <atoi>
 80884c0:	b2c6      	uxtb	r6, r0
 80884c2:	a810      	add	r0, sp, #64	; 0x40
 80884c4:	f007 fb9e 	bl	808fc04 <_ZN6StringD1Ev>
 80884c8:	a80c      	add	r0, sp, #48	; 0x30
 80884ca:	f007 fb9b 	bl	808fc04 <_ZN6StringD1Ev>
    if ((received_gen_type < DCP_10) || (received_gen_type > APM_303))
 80884ce:	1e73      	subs	r3, r6, #1
 80884d0:	2b03      	cmp	r3, #3
 80884d2:	f200 8083 	bhi.w	80885dc <_Z17genConfigurations6String+0x214>
    uint16_t received_gen_address = atoi(getStringValueAtIndex(fullCommand, COMMA_CHAR, 3));
 80884d6:	4621      	mov	r1, r4
 80884d8:	a80c      	add	r0, sp, #48	; 0x30
 80884da:	f007 fc27 	bl	808fd2c <_ZN6StringC1ERKS_>
 80884de:	2303      	movs	r3, #3
 80884e0:	222c      	movs	r2, #44	; 0x2c
 80884e2:	a90c      	add	r1, sp, #48	; 0x30
 80884e4:	a810      	add	r0, sp, #64	; 0x40
 80884e6:	f001 f82f 	bl	8089548 <_Z21getStringValueAtIndex6Stringci>
 80884ea:	9810      	ldr	r0, [sp, #64]	; 0x40
 80884ec:	f009 fc9c 	bl	8091e28 <atoi>
 80884f0:	4607      	mov	r7, r0
 80884f2:	a810      	add	r0, sp, #64	; 0x40
 80884f4:	f007 fb86 	bl	808fc04 <_ZN6StringD1Ev>
 80884f8:	a80c      	add	r0, sp, #48	; 0x30
 80884fa:	f007 fb83 	bl	808fc04 <_ZN6StringD1Ev>
    if ((received_gen_address < MIN_GEN_SLAVE_ID) || (received_gen_address > MAX_GEN_SLAVE_ID))
 80884fe:	1e7b      	subs	r3, r7, #1
 8088500:	b29b      	uxth	r3, r3
 8088502:	2bf6      	cmp	r3, #246	; 0xf6
 8088504:	d86d      	bhi.n	80885e2 <_Z17genConfigurations6String+0x21a>
    uint8_t received_relay_assign = atoi(getStringValueAtIndex(fullCommand, COMMA_CHAR, 4));
 8088506:	4621      	mov	r1, r4
 8088508:	a80c      	add	r0, sp, #48	; 0x30
 808850a:	f007 fc0f 	bl	808fd2c <_ZN6StringC1ERKS_>
 808850e:	2304      	movs	r3, #4
 8088510:	222c      	movs	r2, #44	; 0x2c
 8088512:	a90c      	add	r1, sp, #48	; 0x30
 8088514:	a810      	add	r0, sp, #64	; 0x40
 8088516:	f001 f817 	bl	8089548 <_Z21getStringValueAtIndex6Stringci>
 808851a:	9810      	ldr	r0, [sp, #64]	; 0x40
 808851c:	f009 fc84 	bl	8091e28 <atoi>
 8088520:	fa5f f880 	uxtb.w	r8, r0
 8088524:	a810      	add	r0, sp, #64	; 0x40
 8088526:	f007 fb6d 	bl	808fc04 <_ZN6StringD1Ev>
 808852a:	a80c      	add	r0, sp, #48	; 0x30
 808852c:	f007 fb6a 	bl	808fc04 <_ZN6StringD1Ev>
    if ((received_relay_assign < NO_GX_RELAYS) || (received_relay_assign > TOTAL_GX_RELAYS))
 8088530:	f1b8 0f02 	cmp.w	r8, #2
 8088534:	d858      	bhi.n	80885e8 <_Z17genConfigurations6String+0x220>
    uint16_t received_kva_rating = atoi(getStringValueAtIndex(fullCommand, COMMA_CHAR, 5));
 8088536:	4621      	mov	r1, r4
 8088538:	a80c      	add	r0, sp, #48	; 0x30
 808853a:	f007 fbf7 	bl	808fd2c <_ZN6StringC1ERKS_>
 808853e:	2305      	movs	r3, #5
 8088540:	222c      	movs	r2, #44	; 0x2c
 8088542:	a90c      	add	r1, sp, #48	; 0x30
 8088544:	a810      	add	r0, sp, #64	; 0x40
 8088546:	f000 ffff 	bl	8089548 <_Z21getStringValueAtIndex6Stringci>
 808854a:	9810      	ldr	r0, [sp, #64]	; 0x40
 808854c:	f009 fc6c 	bl	8091e28 <atoi>
 8088550:	fa1f f980 	uxth.w	r9, r0
 8088554:	a810      	add	r0, sp, #64	; 0x40
 8088556:	f007 fb55 	bl	808fc04 <_ZN6StringD1Ev>
 808855a:	a80c      	add	r0, sp, #48	; 0x30
 808855c:	f007 fb52 	bl	808fc04 <_ZN6StringD1Ev>
    if ((received_kva_rating < MIN_GEN_KVA) || (received_kva_rating > MAX_GEN_KVA))
 8088560:	f1a9 030f 	sub.w	r3, r9, #15
 8088564:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8088568:	d241      	bcs.n	80885ee <_Z17genConfigurations6String+0x226>
    uint8_t received_baudrate = atoi(getStringValueAtIndex(fullCommand, COMMA_CHAR, 6));
 808856a:	4621      	mov	r1, r4
 808856c:	a80c      	add	r0, sp, #48	; 0x30
 808856e:	f007 fbdd 	bl	808fd2c <_ZN6StringC1ERKS_>
 8088572:	2306      	movs	r3, #6
 8088574:	222c      	movs	r2, #44	; 0x2c
 8088576:	a90c      	add	r1, sp, #48	; 0x30
 8088578:	a810      	add	r0, sp, #64	; 0x40
 808857a:	f000 ffe5 	bl	8089548 <_Z21getStringValueAtIndex6Stringci>
 808857e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8088580:	f009 fc52 	bl	8091e28 <atoi>
 8088584:	b2c4      	uxtb	r4, r0
 8088586:	a810      	add	r0, sp, #64	; 0x40
 8088588:	f007 fb3c 	bl	808fc04 <_ZN6StringD1Ev>
 808858c:	a80c      	add	r0, sp, #48	; 0x30
 808858e:	f007 fb39 	bl	808fc04 <_ZN6StringD1Ev>
    if ((received_baudrate < BAUD_9K6) || (received_baudrate > BAUD_128K))
 8088592:	2c06      	cmp	r4, #6
 8088594:	d82e      	bhi.n	80885f4 <_Z17genConfigurations6String+0x22c>
    return (storeGenConfig(received_gen_slot, receivedGenName, received_gen_type, received_gen_address,
 8088596:	a908      	add	r1, sp, #32
 8088598:	a810      	add	r0, sp, #64	; 0x40
 808859a:	f007 fbc7 	bl	808fd2c <_ZN6StringC1ERKS_>
 808859e:	e9cd 9401 	strd	r9, r4, [sp, #4]
 80885a2:	4632      	mov	r2, r6
 80885a4:	4628      	mov	r0, r5
 80885a6:	f8cd 8000 	str.w	r8, [sp]
 80885aa:	b2fb      	uxtb	r3, r7
 80885ac:	a910      	add	r1, sp, #64	; 0x40
 80885ae:	f7ff fe71 	bl	8088294 <_Z14storeGenConfig13GeneratorSlot6Stringhhhth>
 80885b2:	4604      	mov	r4, r0
                   received_relay_assign, received_kva_rating, received_baudrate));
 80885b4:	a810      	add	r0, sp, #64	; 0x40
 80885b6:	f007 fb25 	bl	808fc04 <_ZN6StringD1Ev>
    String receivedGenName = getStringValueAtIndex(fullCommand, COMMA_CHAR, 1);
 80885ba:	a808      	add	r0, sp, #32
 80885bc:	f007 fb22 	bl	808fc04 <_ZN6StringD1Ev>
 80885c0:	e749      	b.n	8088456 <_Z17genConfigurations6String+0x8e>
    else if (genPosition == "gen2") received_gen_slot = GEN2;
 80885c2:	2502      	movs	r5, #2
 80885c4:	e757      	b.n	8088476 <_Z17genConfigurations6String+0xae>
    else if (genPosition == "gen3") received_gen_slot = GEN3;
 80885c6:	2503      	movs	r5, #3
 80885c8:	e755      	b.n	8088476 <_Z17genConfigurations6String+0xae>
    else if (genPosition == "gen4") received_gen_slot = GEN4;
 80885ca:	2504      	movs	r5, #4
 80885cc:	e753      	b.n	8088476 <_Z17genConfigurations6String+0xae>
    else if (genPosition == "gen5") received_gen_slot = GEN5;
 80885ce:	2505      	movs	r5, #5
 80885d0:	e751      	b.n	8088476 <_Z17genConfigurations6String+0xae>
    else if (genPosition == "gen6") received_gen_slot = GEN6;
 80885d2:	2506      	movs	r5, #6
 80885d4:	e74f      	b.n	8088476 <_Z17genConfigurations6String+0xae>
    { return GENCONFIG_NAME_ERROR; }
 80885d6:	f06f 0401 	mvn.w	r4, #1
 80885da:	e7ee      	b.n	80885ba <_Z17genConfigurations6String+0x1f2>
    { return GENCONFIG_TYPE_ERROR; }
 80885dc:	f06f 0402 	mvn.w	r4, #2
 80885e0:	e7eb      	b.n	80885ba <_Z17genConfigurations6String+0x1f2>
    { return GENCONFIG_ADDRESS_ERROR; }
 80885e2:	f06f 0403 	mvn.w	r4, #3
 80885e6:	e7e8      	b.n	80885ba <_Z17genConfigurations6String+0x1f2>
    { return GENCONFIG_RELAY_ERROR; }
 80885e8:	f06f 0404 	mvn.w	r4, #4
 80885ec:	e7e5      	b.n	80885ba <_Z17genConfigurations6String+0x1f2>
    { return GENCONFIG_KVA_ERROR; }
 80885ee:	f06f 0405 	mvn.w	r4, #5
 80885f2:	e7e2      	b.n	80885ba <_Z17genConfigurations6String+0x1f2>
    { return GENCONFIG_BAUD_ERROR; }
 80885f4:	f06f 0406 	mvn.w	r4, #6
 80885f8:	e7df      	b.n	80885ba <_Z17genConfigurations6String+0x1f2>
    { return GENCONFIG_SEQUENCE_ERROR; }
 80885fa:	f06f 0407 	mvn.w	r4, #7
 80885fe:	e72a      	b.n	8088456 <_Z17genConfigurations6String+0x8e>
 8088600:	080940f6 	.word	0x080940f6
 8088604:	080940fb 	.word	0x080940fb
 8088608:	08094100 	.word	0x08094100
 808860c:	08094105 	.word	0x08094105
 8088610:	0809410a 	.word	0x0809410a
 8088614:	0809410f 	.word	0x0809410f
 8088618:	08094114 	.word	0x08094114
 808861c:	08094ad5 	.word	0x08094ad5
 8088620:	20001305 	.word	0x20001305

08088624 <_ZN11GXGeneratorC1Ev>:


/********DEFINITION OF THE GXGENERATOR CLASS********/

GXGenerator::GXGenerator() : Modbus(GX_IS_MASTER, MODBUS_ON_SERIAL1, MODBUS_RTU_DE, MODBUS_RTU_RE)
 8088624:	230b      	movs	r3, #11
 8088626:	b513      	push	{r0, r1, r4, lr}
 8088628:	4604      	mov	r4, r0
 808862a:	2201      	movs	r2, #1
 808862c:	2100      	movs	r1, #0
 808862e:	9300      	str	r3, [sp, #0]
 8088630:	230c      	movs	r3, #12
 8088632:	f003 fa0d 	bl	808ba50 <_ZN6ModbusC1Ehhhh>
 8088636:	f104 006e 	add.w	r0, r4, #110	; 0x6e
 808863a:	f000 fe41 	bl	80892c0 <_ZN22Pcc1302GensetQueryBankC1Ev>
 808863e:	f104 0082 	add.w	r0, r4, #130	; 0x82
 8088642:	f7fc ff2f 	bl	80854a4 <_ZN18DseGensetQueryBankC1Ev>
 8088646:	f104 00b6 	add.w	r0, r4, #182	; 0xb6
 808864a:	f7fc fe5a 	bl	8085302 <_ZN20Dcp10GensetQueryBankC1Ev>
 808864e:	f104 00ca 	add.w	r0, r4, #202	; 0xca
 8088652:	f7fc fd12 	bl	808507a <_ZN21Apm303GensetQueryBankC1Ev>
{
    slave_id = NO_GENSET;
 8088656:	2300      	movs	r3, #0
    gen_controller_type = NO_TYPE;
 8088658:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    gen_engine_state = ENGINE_AT_REST;
    gen_data_group = GEN_NOT_READY;
    genQkey.start_addr = NO_GENSET;
    genQkey.num_of_regs = NO_GENSET;
}
 808865c:	4620      	mov	r0, r4
    slave_id = NO_GENSET;
 808865e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    gen_engine_state = ENGINE_AT_REST;
 8088662:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    gen_controller_type = NO_TYPE;
 8088666:	66a2      	str	r2, [r4, #104]	; 0x68
    genQkey.num_of_regs = NO_GENSET;
 8088668:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
}
 808866c:	b002      	add	sp, #8
 808866e:	bd10      	pop	{r4, pc}

08088670 <_ZN11GXGenerator15setCrendentialsEhhh13GeneratorType>:

void GXGenerator::setCrendentials(uint8_t slave_addr, uint8_t baud_indx, uint8_t gx_relay, GeneratorType gen_con_type)
{
    slave_id = slave_addr;
    baudrate_index = baud_indx;
    assigned_gx_relay = gx_relay;
 8088670:	f880 3067 	strb.w	r3, [r0, #103]	; 0x67
    gen_controller_type = gen_con_type;
 8088674:	f89d 3000 	ldrb.w	r3, [sp]
    slave_id = slave_addr;
 8088678:	f880 1064 	strb.w	r1, [r0, #100]	; 0x64
    baudrate_index = baud_indx;
 808867c:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
    gen_controller_type = gen_con_type;
 8088680:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
}
 8088684:	4770      	bx	lr

08088686 <_ZN11GXGenerator15getControllerIdEv>:

GeneratorType GXGenerator::getControllerId()
{
    return gen_controller_type;
}
 8088686:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
 808868a:	4770      	bx	lr

0808868c <_ZN11GXGenerator18getMainQueryPacketEhP8modbus_t>:

void GXGenerator::getMainQueryPacket(uint8_t query_unit, modbus_t *genQueryPacket)
{
 808868c:	b570      	push	{r4, r5, r6, lr}
 808868e:	460e      	mov	r6, r1
    gen_data_group = GEN_MAIN;
 8088690:	2100      	movs	r1, #0
    
    if (gen_controller_type == DSE_857)
 8088692:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
{
 8088696:	4604      	mov	r4, r0
    if (gen_controller_type == DSE_857)
 8088698:	2b02      	cmp	r3, #2
{
 808869a:	4615      	mov	r5, r2
    gen_data_group = GEN_MAIN;
 808869c:	f880 1069 	strb.w	r1, [r0, #105]	; 0x69
    if (gen_controller_type == DSE_857)
 80886a0:	d105      	bne.n	80886ae <_ZN11GXGenerator18getMainQueryPacketEhP8modbus_t+0x22>
        dseGenBank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
 80886a2:	f100 036a 	add.w	r3, r0, #106	; 0x6a
 80886a6:	4632      	mov	r2, r6
 80886a8:	3082      	adds	r0, #130	; 0x82
 80886aa:	f7fc ff3a 	bl	8085522 <_ZN18DseGensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>
    
    if (gen_controller_type == PCC_1302)
 80886ae:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 80886b2:	2b03      	cmp	r3, #3
 80886b4:	d108      	bne.n	80886c8 <_ZN11GXGenerator18getMainQueryPacketEhP8modbus_t+0x3c>
        pcc1302GenBank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
 80886b6:	4632      	mov	r2, r6
 80886b8:	f894 1069 	ldrb.w	r1, [r4, #105]	; 0x69
 80886bc:	f104 036a 	add.w	r3, r4, #106	; 0x6a
 80886c0:	f104 006e 	add.w	r0, r4, #110	; 0x6e
 80886c4:	f000 fe11 	bl	80892ea <_ZN22Pcc1302GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>
    
    if (gen_controller_type == DCP_10)
 80886c8:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 80886cc:	2b01      	cmp	r3, #1
 80886ce:	d108      	bne.n	80886e2 <_ZN11GXGenerator18getMainQueryPacketEhP8modbus_t+0x56>
        dcp10Genbank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
 80886d0:	4632      	mov	r2, r6
 80886d2:	f894 1069 	ldrb.w	r1, [r4, #105]	; 0x69
 80886d6:	f104 036a 	add.w	r3, r4, #106	; 0x6a
 80886da:	f104 00b6 	add.w	r0, r4, #182	; 0xb6
 80886de:	f7fc fe29 	bl	8085334 <_ZN20Dcp10GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>
    
    if (gen_controller_type == APM_303)
 80886e2:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 80886e6:	2b04      	cmp	r3, #4
 80886e8:	d108      	bne.n	80886fc <_ZN11GXGenerator18getMainQueryPacketEhP8modbus_t+0x70>
        apm303GenBank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
 80886ea:	4632      	mov	r2, r6
 80886ec:	f894 1069 	ldrb.w	r1, [r4, #105]	; 0x69
 80886f0:	f104 036a 	add.w	r3, r4, #106	; 0x6a
 80886f4:	f104 00ca 	add.w	r0, r4, #202	; 0xca
 80886f8:	f7fc fcdb 	bl	80850b2 <_ZN21Apm303GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>
    
    genQueryPacket->u8id = slave_id;
 80886fc:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8088700:	702b      	strb	r3, [r5, #0]
    genQueryPacket->u8fct = FUNC_CODE3;
 8088702:	2303      	movs	r3, #3
 8088704:	706b      	strb	r3, [r5, #1]
    genQueryPacket->u16RegAdd = genQkey.start_addr;
 8088706:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 808870a:	806b      	strh	r3, [r5, #2]
    genQueryPacket->u16CoilsNo = genQkey.num_of_regs;
 808870c:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
 8088710:	80ab      	strh	r3, [r5, #4]
    genQueryPacket->au16reg = modbus_data_buffer;
 8088712:	4b05      	ldr	r3, [pc, #20]	; (8088728 <_ZN11GXGenerator18getMainQueryPacketEhP8modbus_t+0x9c>)
 8088714:	60ab      	str	r3, [r5, #8]

    if (gen_controller_type == APM_303)
 8088716:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 808871a:	2b04      	cmp	r3, #4
 808871c:	d103      	bne.n	8088726 <_ZN11GXGenerator18getMainQueryPacketEhP8modbus_t+0x9a>
        genQueryPacket->u8fct = (query_unit == GEN_QUERY1) ? 
 808871e:	2e00      	cmp	r6, #0
 8088720:	bf18      	it	ne
 8088722:	2302      	movne	r3, #2
 8088724:	706b      	strb	r3, [r5, #1]
        FUNC_CODE4 : FUNC_CODE2;
}
 8088726:	bd70      	pop	{r4, r5, r6, pc}
 8088728:	20000de4 	.word	0x20000de4

0808872c <_ZN11GXGenerator21getBasInstQueryPacketEhP8modbus_t>:

void GXGenerator::getBasInstQueryPacket(uint8_t query_unit, modbus_t *genQueryPacket)
{
 808872c:	b570      	push	{r4, r5, r6, lr}
 808872e:	460e      	mov	r6, r1
    gen_data_group = GEN_BASINST;
 8088730:	2101      	movs	r1, #1
    
    if (gen_controller_type == DSE_857)
 8088732:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
{
 8088736:	4604      	mov	r4, r0
    if (gen_controller_type == DSE_857)
 8088738:	2b02      	cmp	r3, #2
{
 808873a:	4615      	mov	r5, r2
    gen_data_group = GEN_BASINST;
 808873c:	f880 1069 	strb.w	r1, [r0, #105]	; 0x69
    if (gen_controller_type == DSE_857)
 8088740:	d105      	bne.n	808874e <_ZN11GXGenerator21getBasInstQueryPacketEhP8modbus_t+0x22>
        dseGenBank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
 8088742:	f100 036a 	add.w	r3, r0, #106	; 0x6a
 8088746:	4632      	mov	r2, r6
 8088748:	3082      	adds	r0, #130	; 0x82
 808874a:	f7fc feea 	bl	8085522 <_ZN18DseGensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>
    
    if (gen_controller_type == PCC_1302)
 808874e:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8088752:	2b03      	cmp	r3, #3
 8088754:	d108      	bne.n	8088768 <_ZN11GXGenerator21getBasInstQueryPacketEhP8modbus_t+0x3c>
        pcc1302GenBank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
 8088756:	4632      	mov	r2, r6
 8088758:	f894 1069 	ldrb.w	r1, [r4, #105]	; 0x69
 808875c:	f104 036a 	add.w	r3, r4, #106	; 0x6a
 8088760:	f104 006e 	add.w	r0, r4, #110	; 0x6e
 8088764:	f000 fdc1 	bl	80892ea <_ZN22Pcc1302GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>
    
    if (gen_controller_type == DCP_10)
 8088768:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 808876c:	2b01      	cmp	r3, #1
 808876e:	d108      	bne.n	8088782 <_ZN11GXGenerator21getBasInstQueryPacketEhP8modbus_t+0x56>
        dcp10Genbank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
 8088770:	4632      	mov	r2, r6
 8088772:	f894 1069 	ldrb.w	r1, [r4, #105]	; 0x69
 8088776:	f104 036a 	add.w	r3, r4, #106	; 0x6a
 808877a:	f104 00b6 	add.w	r0, r4, #182	; 0xb6
 808877e:	f7fc fdd9 	bl	8085334 <_ZN20Dcp10GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>
    
    if (gen_controller_type == APM_303)
 8088782:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8088786:	2b04      	cmp	r3, #4
 8088788:	d108      	bne.n	808879c <_ZN11GXGenerator21getBasInstQueryPacketEhP8modbus_t+0x70>
        apm303GenBank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
 808878a:	4632      	mov	r2, r6
 808878c:	f894 1069 	ldrb.w	r1, [r4, #105]	; 0x69
 8088790:	f104 036a 	add.w	r3, r4, #106	; 0x6a
 8088794:	f104 00ca 	add.w	r0, r4, #202	; 0xca
 8088798:	f7fc fc8b 	bl	80850b2 <_ZN21Apm303GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>
    
    genQueryPacket->u8id = slave_id;
 808879c:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 80887a0:	702b      	strb	r3, [r5, #0]
    genQueryPacket->u8fct = FUNC_CODE3;
 80887a2:	2303      	movs	r3, #3
 80887a4:	706b      	strb	r3, [r5, #1]
    genQueryPacket->u16RegAdd = genQkey.start_addr;
 80887a6:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80887aa:	806a      	strh	r2, [r5, #2]
    genQueryPacket->u16CoilsNo = genQkey.num_of_regs;
 80887ac:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
 80887b0:	80aa      	strh	r2, [r5, #4]
    genQueryPacket->au16reg = modbus_data_buffer; 
 80887b2:	4a04      	ldr	r2, [pc, #16]	; (80887c4 <_ZN11GXGenerator21getBasInstQueryPacketEhP8modbus_t+0x98>)
 80887b4:	60aa      	str	r2, [r5, #8]

    if (gen_controller_type == APM_303)
 80887b6:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80887ba:	2a04      	cmp	r2, #4
        genQueryPacket->u8fct = FUNC_CODE4;  
 80887bc:	bf08      	it	eq
 80887be:	4613      	moveq	r3, r2
 80887c0:	706b      	strb	r3, [r5, #1]
}
 80887c2:	bd70      	pop	{r4, r5, r6, pc}
 80887c4:	20000de4 	.word	0x20000de4

080887c8 <_ZN11GXGenerator21getDerInstQueryPacketEhP8modbus_t>:

void GXGenerator::getDerInstQueryPacket(uint8_t query_unit, modbus_t *genQueryPacket)
{
    gen_data_group = GEN_DERINST;
 80887c8:	2302      	movs	r3, #2
{
 80887ca:	b570      	push	{r4, r5, r6, lr}
 80887cc:	460e      	mov	r6, r1
    
    if (gen_controller_type == DSE_857)
 80887ce:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
{
 80887d2:	4604      	mov	r4, r0
    if (gen_controller_type == DSE_857)
 80887d4:	4299      	cmp	r1, r3
{
 80887d6:	4615      	mov	r5, r2
    gen_data_group = GEN_DERINST;
 80887d8:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    if (gen_controller_type == DSE_857)
 80887dc:	d105      	bne.n	80887ea <_ZN11GXGenerator21getDerInstQueryPacketEhP8modbus_t+0x22>
        dseGenBank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
 80887de:	f100 036a 	add.w	r3, r0, #106	; 0x6a
 80887e2:	4632      	mov	r2, r6
 80887e4:	3082      	adds	r0, #130	; 0x82
 80887e6:	f7fc fe9c 	bl	8085522 <_ZN18DseGensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>
    
    if (gen_controller_type == APM_303)
 80887ea:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 80887ee:	2b04      	cmp	r3, #4
 80887f0:	d108      	bne.n	8088804 <_ZN11GXGenerator21getDerInstQueryPacketEhP8modbus_t+0x3c>
        apm303GenBank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
 80887f2:	4632      	mov	r2, r6
 80887f4:	f894 1069 	ldrb.w	r1, [r4, #105]	; 0x69
 80887f8:	f104 036a 	add.w	r3, r4, #106	; 0x6a
 80887fc:	f104 00ca 	add.w	r0, r4, #202	; 0xca
 8088800:	f7fc fc57 	bl	80850b2 <_ZN21Apm303GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>

    genQueryPacket->u8id = slave_id;
 8088804:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8088808:	702b      	strb	r3, [r5, #0]
    genQueryPacket->u8fct = FUNC_CODE3;
 808880a:	2303      	movs	r3, #3
 808880c:	706b      	strb	r3, [r5, #1]
    genQueryPacket->u16RegAdd = genQkey.start_addr;
 808880e:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8088812:	806a      	strh	r2, [r5, #2]
    genQueryPacket->u16CoilsNo = genQkey.num_of_regs;
 8088814:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
 8088818:	80aa      	strh	r2, [r5, #4]
    genQueryPacket->au16reg = modbus_data_buffer; 
 808881a:	4a04      	ldr	r2, [pc, #16]	; (808882c <_ZN11GXGenerator21getDerInstQueryPacketEhP8modbus_t+0x64>)
 808881c:	60aa      	str	r2, [r5, #8]

    if (gen_controller_type == APM_303)
 808881e:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8088822:	2a04      	cmp	r2, #4
        genQueryPacket->u8fct = FUNC_CODE4;
 8088824:	bf08      	it	eq
 8088826:	4613      	moveq	r3, r2
 8088828:	706b      	strb	r3, [r5, #1]
}
 808882a:	bd70      	pop	{r4, r5, r6, pc}
 808882c:	20000de4 	.word	0x20000de4

08088830 <_ZN11GXGenerator22getEngStateQueryPacketEhP8modbus_t>:

void GXGenerator::getEngStateQueryPacket(uint8_t query_unit, modbus_t *genQueryPacket)
{
 8088830:	b538      	push	{r3, r4, r5, lr}
    gen_data_group = GEN_ENG_STATUS;
 8088832:	2303      	movs	r3, #3
 8088834:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    switch (gen_controller_type)
 8088838:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
{
 808883c:	4604      	mov	r4, r0
 808883e:	3b01      	subs	r3, #1
 8088840:	4615      	mov	r5, r2
 8088842:	2b03      	cmp	r3, #3
 8088844:	d80a      	bhi.n	808885c <_ZN11GXGenerator22getEngStateQueryPacketEhP8modbus_t+0x2c>
 8088846:	e8df f003 	tbb	[pc, r3]
 808884a:	0225      	.short	0x0225
 808884c:	2d1d      	.short	0x2d1d
    {
        case DSE_857:
        {
            dseGenBank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
 808884e:	460a      	mov	r2, r1
 8088850:	f100 036a 	add.w	r3, r0, #106	; 0x6a
 8088854:	2103      	movs	r1, #3
 8088856:	3082      	adds	r0, #130	; 0x82
 8088858:	f7fc fe63 	bl	8085522 <_ZN18DseGensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>
            apm303GenBank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
            break;
        }
    }

    genQueryPacket->u8id = slave_id;
 808885c:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8088860:	702b      	strb	r3, [r5, #0]
    genQueryPacket->u8fct = FUNC_CODE3;
 8088862:	2303      	movs	r3, #3
 8088864:	706b      	strb	r3, [r5, #1]
    genQueryPacket->u16RegAdd = genQkey.start_addr;
 8088866:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 808886a:	806a      	strh	r2, [r5, #2]
    genQueryPacket->u16CoilsNo = genQkey.num_of_regs;
 808886c:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
 8088870:	80aa      	strh	r2, [r5, #4]
    genQueryPacket->au16reg = modbus_data_buffer; 
 8088872:	4a10      	ldr	r2, [pc, #64]	; (80888b4 <_ZN11GXGenerator22getEngStateQueryPacketEhP8modbus_t+0x84>)
 8088874:	60aa      	str	r2, [r5, #8]

    if (gen_controller_type == APM_303)
 8088876:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 808887a:	2a04      	cmp	r2, #4
        genQueryPacket->u8fct = FUNC_CODE4;
 808887c:	bf08      	it	eq
 808887e:	4613      	moveq	r3, r2
 8088880:	706b      	strb	r3, [r5, #1]
}
 8088882:	bd38      	pop	{r3, r4, r5, pc}
            pcc1302GenBank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
 8088884:	460a      	mov	r2, r1
 8088886:	f100 036a 	add.w	r3, r0, #106	; 0x6a
 808888a:	2103      	movs	r1, #3
 808888c:	306e      	adds	r0, #110	; 0x6e
 808888e:	f000 fd2c 	bl	80892ea <_ZN22Pcc1302GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>
            break;
 8088892:	e7e3      	b.n	808885c <_ZN11GXGenerator22getEngStateQueryPacketEhP8modbus_t+0x2c>
            dcp10Genbank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
 8088894:	460a      	mov	r2, r1
 8088896:	f100 036a 	add.w	r3, r0, #106	; 0x6a
 808889a:	2103      	movs	r1, #3
 808889c:	30b6      	adds	r0, #182	; 0xb6
 808889e:	f7fc fd49 	bl	8085334 <_ZN20Dcp10GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>
            break;
 80888a2:	e7db      	b.n	808885c <_ZN11GXGenerator22getEngStateQueryPacketEhP8modbus_t+0x2c>
            apm303GenBank.getGenQueryKey(gen_data_group, query_unit, &genQkey);
 80888a4:	460a      	mov	r2, r1
 80888a6:	f100 036a 	add.w	r3, r0, #106	; 0x6a
 80888aa:	2103      	movs	r1, #3
 80888ac:	30ca      	adds	r0, #202	; 0xca
 80888ae:	f7fc fc00 	bl	80850b2 <_ZN21Apm303GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>
            break;
 80888b2:	e7d3      	b.n	808885c <_ZN11GXGenerator22getEngStateQueryPacketEhP8modbus_t+0x2c>
 80888b4:	20000de4 	.word	0x20000de4

080888b8 <_ZN11GXGenerator25getGridBasInstQueryPacketEhP8modbus_t>:

void GXGenerator::getGridBasInstQueryPacket(uint8_t query_unit, modbus_t *genQueryPacket)
{
 80888b8:	b538      	push	{r3, r4, r5, lr}
    if (gen_controller_type == DSE_857)
 80888ba:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
{
 80888be:	4604      	mov	r4, r0
    if (gen_controller_type == DSE_857)
 80888c0:	2b02      	cmp	r3, #2
{
 80888c2:	4615      	mov	r5, r2
    if (gen_controller_type == DSE_857)
 80888c4:	d106      	bne.n	80888d4 <_ZN11GXGenerator25getGridBasInstQueryPacketEhP8modbus_t+0x1c>
        dseGenBank.getGridQueryKey(GRID_BAS_INST, query_unit, &genQkey); 
 80888c6:	460a      	mov	r2, r1
 80888c8:	f100 036a 	add.w	r3, r0, #106	; 0x6a
 80888cc:	2101      	movs	r1, #1
 80888ce:	3082      	adds	r0, #130	; 0x82
 80888d0:	f7fc fe44 	bl	808555c <_ZN18DseGensetQueryBank15getGridQueryKeyE11GridDataSethP17GeneratorQueryKey>

    genQueryPacket->u8id = slave_id;
 80888d4:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 80888d8:	702b      	strb	r3, [r5, #0]
    genQueryPacket->u8fct = FUNC_CODE3;
 80888da:	2303      	movs	r3, #3
 80888dc:	706b      	strb	r3, [r5, #1]
    genQueryPacket->u16RegAdd = genQkey.start_addr;
 80888de:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80888e2:	806b      	strh	r3, [r5, #2]
    genQueryPacket->u16CoilsNo = genQkey.num_of_regs;
 80888e4:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
 80888e8:	80ab      	strh	r3, [r5, #4]
    genQueryPacket->au16reg = modbus_data_buffer;
 80888ea:	4b01      	ldr	r3, [pc, #4]	; (80888f0 <_ZN11GXGenerator25getGridBasInstQueryPacketEhP8modbus_t+0x38>)
 80888ec:	60ab      	str	r3, [r5, #8]
}
 80888ee:	bd38      	pop	{r3, r4, r5, pc}
 80888f0:	20000de4 	.word	0x20000de4

080888f4 <_ZN11GXGenerator25getGridDerInstQueryPacketEhP8modbus_t>:

void GXGenerator::getGridDerInstQueryPacket(uint8_t query_unit, modbus_t *genQueryPacket)
{
 80888f4:	b538      	push	{r3, r4, r5, lr}
 80888f6:	4604      	mov	r4, r0
 80888f8:	4608      	mov	r0, r1
    if (gen_controller_type == DSE_857)
 80888fa:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
{
 80888fe:	4615      	mov	r5, r2
    if (gen_controller_type == DSE_857)
 8088900:	2902      	cmp	r1, #2
 8088902:	d106      	bne.n	8088912 <_ZN11GXGenerator25getGridDerInstQueryPacketEhP8modbus_t+0x1e>
        dseGenBank.getGridQueryKey(GRID_DER_INST, query_unit, &genQkey); 
 8088904:	4602      	mov	r2, r0
 8088906:	f104 036a 	add.w	r3, r4, #106	; 0x6a
 808890a:	f104 0082 	add.w	r0, r4, #130	; 0x82
 808890e:	f7fc fe25 	bl	808555c <_ZN18DseGensetQueryBank15getGridQueryKeyE11GridDataSethP17GeneratorQueryKey>

    genQueryPacket->u8id = slave_id;
 8088912:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8088916:	702b      	strb	r3, [r5, #0]
    genQueryPacket->u8fct = FUNC_CODE3;
 8088918:	2303      	movs	r3, #3
 808891a:	706b      	strb	r3, [r5, #1]
    genQueryPacket->u16RegAdd = genQkey.start_addr;
 808891c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8088920:	806b      	strh	r3, [r5, #2]
    genQueryPacket->u16CoilsNo = genQkey.num_of_regs;
 8088922:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
 8088926:	80ab      	strh	r3, [r5, #4]
    genQueryPacket->au16reg = modbus_data_buffer; 
 8088928:	4b01      	ldr	r3, [pc, #4]	; (8088930 <_ZN11GXGenerator25getGridDerInstQueryPacketEhP8modbus_t+0x3c>)
 808892a:	60ab      	str	r3, [r5, #8]
}
 808892c:	bd38      	pop	{r3, r4, r5, pc}
 808892e:	bf00      	nop
 8088930:	20000de4 	.word	0x20000de4

08088934 <_ZN11GXGenerator15getMainQueryNumEv>:

uint8_t GXGenerator::getMainQueryNum()
{
    if (gen_controller_type == DSE_857)
 8088934:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
 8088938:	2802      	cmp	r0, #2
 808893a:	d007      	beq.n	808894c <_ZN11GXGenerator15getMainQueryNumEv+0x18>
       return TOTAL_DSE_MAIN_QUERY;
    
    if (gen_controller_type == PCC_1302)
 808893c:	2803      	cmp	r0, #3
 808893e:	d007      	beq.n	8088950 <_ZN11GXGenerator15getMainQueryNumEv+0x1c>
       return TOTAL_PCC1302_MAIN_QUERY;
    
    if (gen_controller_type == DCP_10)
 8088940:	2801      	cmp	r0, #1
 8088942:	d007      	beq.n	8088954 <_ZN11GXGenerator15getMainQueryNumEv+0x20>
       return TOTAL_DCP10_MAIN_QUERY;
    
    if (gen_controller_type == APM_303)
 8088944:	2804      	cmp	r0, #4
       return TOTAL_APM303_MAIN_QUERY;
    
    return NO_GENSET;
 8088946:	bf18      	it	ne
 8088948:	2000      	movne	r0, #0
 808894a:	4770      	bx	lr
       return TOTAL_APM303_MAIN_QUERY;
 808894c:	2004      	movs	r0, #4
 808894e:	4770      	bx	lr
       return TOTAL_PCC1302_MAIN_QUERY;
 8088950:	2002      	movs	r0, #2
 8088952:	4770      	bx	lr
       return TOTAL_DCP10_MAIN_QUERY;
 8088954:	2003      	movs	r0, #3
}
 8088956:	4770      	bx	lr

08088958 <_ZN11GXGenerator18getBasInstQueryNumEv>:

uint8_t GXGenerator::getBasInstQueryNum()
{
    if (gen_controller_type == DSE_857)
 8088958:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 808895c:	1e9a      	subs	r2, r3, #2
 808895e:	2a01      	cmp	r2, #1
 8088960:	d906      	bls.n	8088970 <_ZN11GXGenerator18getBasInstQueryNumEv+0x18>
       return TOTAL_DSE_BASINST_QUERY;
    
    if (gen_controller_type == PCC_1302)
       return TOTAL_PCC1302_BASINST_QUERY;
    
    if (gen_controller_type == DCP_10)
 8088962:	2b01      	cmp	r3, #1
 8088964:	d006      	beq.n	8088974 <_ZN11GXGenerator18getBasInstQueryNumEv+0x1c>
       return TOTAL_DCP10_BASINST_QUERY;
    
    if (gen_controller_type == APM_303)
 8088966:	2b04      	cmp	r3, #4
       return TOTAL_APM303_BASINST_QUERY;

    return NO_GENSET;
 8088968:	bf0c      	ite	eq
 808896a:	2002      	moveq	r0, #2
 808896c:	2000      	movne	r0, #0
 808896e:	4770      	bx	lr
       return TOTAL_DSE_BASINST_QUERY;
 8088970:	2003      	movs	r0, #3
 8088972:	4770      	bx	lr
       return TOTAL_APM303_BASINST_QUERY;
 8088974:	2002      	movs	r0, #2
}
 8088976:	4770      	bx	lr

08088978 <_ZN11GXGenerator18getDerInstQueryNumEv>:

uint8_t GXGenerator::getDerInstQueryNum()
{
    if (gen_controller_type == DSE_857)
 8088978:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
 808897c:	2802      	cmp	r0, #2
 808897e:	d003      	beq.n	8088988 <_ZN11GXGenerator18getDerInstQueryNumEv+0x10>
       return TOTAL_DSE_DERINST_QUERY;
 8088980:	1f03      	subs	r3, r0, #4
 8088982:	4258      	negs	r0, r3
 8088984:	4158      	adcs	r0, r3
 8088986:	4770      	bx	lr
 8088988:	2001      	movs	r0, #1
    
    if (gen_controller_type == APM_303)
       return TOTAL_APM303_DERINST_QUERY;
    
    return NO_GENSET;
}
 808898a:	4770      	bx	lr

0808898c <_ZN11GXGenerator22getGridBasInstQueryNumEv>:

uint8_t GXGenerator::getGridBasInstQueryNum()
{
    if (gen_controller_type == DSE_857)
 808898c:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8088990:	2b02      	cmp	r3, #2
       return TOTAL_DSE_GRID_BASINST_QUERY;
    
    return NO_GENSET;
}
 8088992:	bf0c      	ite	eq
 8088994:	2003      	moveq	r0, #3
 8088996:	2000      	movne	r0, #0
 8088998:	4770      	bx	lr

0808899a <_ZN11GXGenerator22getGridDerInstQueryNumEv>:

uint8_t GXGenerator::getGridDerInstQueryNum()
{
    if (gen_controller_type == DSE_857)
 808899a:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
 808899e:	2802      	cmp	r0, #2
       return TOTAL_DSE_GRID_DERINST_QUERY;
    
    return NO_GENSET;
}
 80889a0:	bf18      	it	ne
 80889a2:	2000      	movne	r0, #0
 80889a4:	4770      	bx	lr
	...

080889a8 <_ZN11GXGenerator18extractMainMetricsEh>:

void GXGenerator::extractMainMetrics(uint8_t query_unit)
{
    if (gen_controller_type == DSE_857)
 80889a8:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80889ac:	2b02      	cmp	r3, #2
 80889ae:	d12c      	bne.n	8088a0a <_ZN11GXGenerator18extractMainMetricsEh+0x62>
    {
        switch (query_unit)
 80889b0:	2903      	cmp	r1, #3
 80889b2:	d80f      	bhi.n	80889d4 <_ZN11GXGenerator18extractMainMetricsEh+0x2c>
 80889b4:	e8df f001 	tbb	[pc, r1]
 80889b8:	1d181302 	.word	0x1d181302
        {
            case GEN_QUERY1:

                 {
                    extracted_modbus_databuff[RUN_HRS] = (modbus_data_buffer[DSE_RUN_HR_H] << MOVE_16_STEP) |
 80889bc:	4b47      	ldr	r3, [pc, #284]	; (8088adc <_ZN11GXGenerator18extractMainMetricsEh+0x134>)
 80889be:	4948      	ldr	r1, [pc, #288]	; (8088ae0 <_ZN11GXGenerator18extractMainMetricsEh+0x138>)
 80889c0:	8818      	ldrh	r0, [r3, #0]
                                                         (modbus_data_buffer[DSE_RUN_HR_L]);
 80889c2:	885a      	ldrh	r2, [r3, #2]
                    extracted_modbus_databuff[RUN_HRS] = (modbus_data_buffer[DSE_RUN_HR_H] << MOVE_16_STEP) |
 80889c4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80889c8:	600a      	str	r2, [r1, #0]
                 
                    extracted_modbus_databuff[NUM_OF_STARTS] = (modbus_data_buffer[DSE_NUM_OF_ST_H] << MOVE_16_STEP) |
 80889ca:	8a9a      	ldrh	r2, [r3, #20]
                                                               (modbus_data_buffer[DSE_NUM_OF_ST_L]);
 80889cc:	8adb      	ldrh	r3, [r3, #22]
                    extracted_modbus_databuff[NUM_OF_STARTS] = (modbus_data_buffer[DSE_NUM_OF_ST_H] << MOVE_16_STEP) |
 80889ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80889d2:	604b      	str	r3, [r1, #4]

                    break; 
                 }
        }
        
        memset(modbus_data_buffer, 0, sizeof(modbus_data_buffer));
 80889d4:	223c      	movs	r2, #60	; 0x3c
 80889d6:	2100      	movs	r1, #0
 80889d8:	4840      	ldr	r0, [pc, #256]	; (8088adc <_ZN11GXGenerator18extractMainMetricsEh+0x134>)
 80889da:	f009 ba73 	b.w	8091ec4 <memset>
                    extracted_modbus_databuff[CTRL_MODE] = modbus_data_buffer[DSE_CTRL_MD];
 80889de:	4b3f      	ldr	r3, [pc, #252]	; (8088adc <_ZN11GXGenerator18extractMainMetricsEh+0x134>)
 80889e0:	881a      	ldrh	r2, [r3, #0]
 80889e2:	4b3f      	ldr	r3, [pc, #252]	; (8088ae0 <_ZN11GXGenerator18extractMainMetricsEh+0x138>)
            
            case GEN_QUERY2:
                
                {
                    extracted_modbus_databuff[ENGINE_STATE] = modbus_data_buffer[APM303_ENG_STATE];
                    extracted_modbus_databuff[CTRL_MODE] = modbus_data_buffer[APM303_CTRL_MODE];
 80889e4:	609a      	str	r2, [r3, #8]

                    break;
 80889e6:	e7f5      	b.n	80889d4 <_ZN11GXGenerator18extractMainMetricsEh+0x2c>
                    extracted_modbus_databuff[ENGINE_STATE] = modbus_data_buffer[DSE_ENG_STATE];
 80889e8:	4b3c      	ldr	r3, [pc, #240]	; (8088adc <_ZN11GXGenerator18extractMainMetricsEh+0x134>)
 80889ea:	881a      	ldrh	r2, [r3, #0]
 80889ec:	4b3c      	ldr	r3, [pc, #240]	; (8088ae0 <_ZN11GXGenerator18extractMainMetricsEh+0x138>)
 80889ee:	60da      	str	r2, [r3, #12]
                    break;
 80889f0:	e7f0      	b.n	80889d4 <_ZN11GXGenerator18extractMainMetricsEh+0x2c>
    if (gen_controller_type == DSE_857)
 80889f2:	2306      	movs	r3, #6
 80889f4:	4939      	ldr	r1, [pc, #228]	; (8088adc <_ZN11GXGenerator18extractMainMetricsEh+0x134>)
 80889f6:	4a3b      	ldr	r2, [pc, #236]	; (8088ae4 <_ZN11GXGenerator18extractMainMetricsEh+0x13c>)
                        gen_alrm_regval[i] = modbus_data_buffer[i];
 80889f8:	f831 0b02 	ldrh.w	r0, [r1], #2
 80889fc:	3b01      	subs	r3, #1
                    for (uint8_t i = ALARM_REG1; i <= ALARM_REG6; i++)
 80889fe:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
                        gen_alrm_regval[i] = modbus_data_buffer[i];
 8088a02:	f822 0b02 	strh.w	r0, [r2], #2
                    for (uint8_t i = ALARM_REG1; i <= ALARM_REG6; i++)
 8088a06:	d1f7      	bne.n	80889f8 <_ZN11GXGenerator18extractMainMetricsEh+0x50>
 8088a08:	e7e4      	b.n	80889d4 <_ZN11GXGenerator18extractMainMetricsEh+0x2c>
    if (gen_controller_type == PCC_1302)
 8088a0a:	2b03      	cmp	r3, #3
 8088a0c:	d118      	bne.n	8088a40 <_ZN11GXGenerator18extractMainMetricsEh+0x98>
        switch (query_unit)
 8088a0e:	b159      	cbz	r1, 8088a28 <_ZN11GXGenerator18extractMainMetricsEh+0x80>
 8088a10:	2901      	cmp	r1, #1
 8088a12:	d1df      	bne.n	80889d4 <_ZN11GXGenerator18extractMainMetricsEh+0x2c>
                    extracted_modbus_databuff[NUM_OF_STARTS] = modbus_data_buffer[PCC1302_NUM_OF_STRT];
 8088a14:	4a31      	ldr	r2, [pc, #196]	; (8088adc <_ZN11GXGenerator18extractMainMetricsEh+0x134>)
 8088a16:	4932      	ldr	r1, [pc, #200]	; (8088ae0 <_ZN11GXGenerator18extractMainMetricsEh+0x138>)
 8088a18:	8813      	ldrh	r3, [r2, #0]
                    extracted_modbus_databuff[RUN_HRS] = (modbus_data_buffer[PCC1302_RUN_HR_H] * CUMMINS_32BIT_SCALER) +
 8088a1a:	8850      	ldrh	r0, [r2, #2]
                    extracted_modbus_databuff[NUM_OF_STARTS] = modbus_data_buffer[PCC1302_NUM_OF_STRT];
 8088a1c:	604b      	str	r3, [r1, #4]
                                                         (modbus_data_buffer[PCC1302_RUN_HR_L]);
 8088a1e:	8893      	ldrh	r3, [r2, #4]
                    extracted_modbus_databuff[RUN_HRS] = (modbus_data_buffer[PCC1302_RUN_HR_H] * CUMMINS_32BIT_SCALER) +
 8088a20:	eb03 4300 	add.w	r3, r3, r0, lsl #16
 8088a24:	600b      	str	r3, [r1, #0]
                    break;
 8088a26:	e7d5      	b.n	80889d4 <_ZN11GXGenerator18extractMainMetricsEh+0x2c>
                    extracted_modbus_databuff[CTRL_MODE] = modbus_data_buffer[PCC1302_CTRL_MD];
 8088a28:	4b2c      	ldr	r3, [pc, #176]	; (8088adc <_ZN11GXGenerator18extractMainMetricsEh+0x134>)
 8088a2a:	4a2d      	ldr	r2, [pc, #180]	; (8088ae0 <_ZN11GXGenerator18extractMainMetricsEh+0x138>)
 8088a2c:	8819      	ldrh	r1, [r3, #0]
 8088a2e:	6091      	str	r1, [r2, #8]
                    extracted_modbus_databuff[ENGINE_STATE] = modbus_data_buffer[PCC1302_ENG_ST];
 8088a30:	8859      	ldrh	r1, [r3, #2]
 8088a32:	60d1      	str	r1, [r2, #12]
                    gen_alrm_regval[ALARM_REG1] = modbus_data_buffer[PCC1302_ALRM_CD];
 8088a34:	4a2b      	ldr	r2, [pc, #172]	; (8088ae4 <_ZN11GXGenerator18extractMainMetricsEh+0x13c>)
 8088a36:	8899      	ldrh	r1, [r3, #4]
                    gen_alrm_regval[ALARM_REG2] = modbus_data_buffer[PCC1302_ALRM_ST];
 8088a38:	88db      	ldrh	r3, [r3, #6]
                    gen_alrm_regval[ALARM_REG1] = modbus_data_buffer[PCC1302_ALRM_CD];
 8088a3a:	8011      	strh	r1, [r2, #0]
                    gen_alrm_regval[ALARM_REG2] = modbus_data_buffer[PCC1302_ALRM_ST];
 8088a3c:	8053      	strh	r3, [r2, #2]
                    break;
 8088a3e:	e7c9      	b.n	80889d4 <_ZN11GXGenerator18extractMainMetricsEh+0x2c>
    if (gen_controller_type == DCP_10)
 8088a40:	2b01      	cmp	r3, #1
 8088a42:	d113      	bne.n	8088a6c <_ZN11GXGenerator18extractMainMetricsEh+0xc4>
        switch (query_unit)
 8088a44:	2901      	cmp	r1, #1
 8088a46:	d008      	beq.n	8088a5a <_ZN11GXGenerator18extractMainMetricsEh+0xb2>
 8088a48:	2902      	cmp	r1, #2
 8088a4a:	d0cd      	beq.n	80889e8 <_ZN11GXGenerator18extractMainMetricsEh+0x40>
 8088a4c:	2900      	cmp	r1, #0
 8088a4e:	d1c1      	bne.n	80889d4 <_ZN11GXGenerator18extractMainMetricsEh+0x2c>
                    extracted_modbus_databuff[RUN_HRS] = modbus_data_buffer[DCP10_RUN_HR];
 8088a50:	4b22      	ldr	r3, [pc, #136]	; (8088adc <_ZN11GXGenerator18extractMainMetricsEh+0x134>)
 8088a52:	881a      	ldrh	r2, [r3, #0]
 8088a54:	4b22      	ldr	r3, [pc, #136]	; (8088ae0 <_ZN11GXGenerator18extractMainMetricsEh+0x138>)
                    extracted_modbus_databuff[RUN_HRS] = modbus_data_buffer[APM303_RUN_HR];
 8088a56:	601a      	str	r2, [r3, #0]
                    break;
 8088a58:	e7bc      	b.n	80889d4 <_ZN11GXGenerator18extractMainMetricsEh+0x2c>
                    extracted_modbus_databuff[CTRL_MODE] = modbus_data_buffer[DCP10_CTRL_MODE];
 8088a5a:	4a20      	ldr	r2, [pc, #128]	; (8088adc <_ZN11GXGenerator18extractMainMetricsEh+0x134>)
 8088a5c:	4b20      	ldr	r3, [pc, #128]	; (8088ae0 <_ZN11GXGenerator18extractMainMetricsEh+0x138>)
 8088a5e:	8811      	ldrh	r1, [r2, #0]
                    gen_alrm_regval[ALARM_REG2] = modbus_data_buffer[DCP10_ALRM_FAULT];
 8088a60:	8892      	ldrh	r2, [r2, #4]
                    extracted_modbus_databuff[CTRL_MODE] = modbus_data_buffer[DCP10_CTRL_MODE];
 8088a62:	6099      	str	r1, [r3, #8]
                    gen_alrm_regval[ALARM_REG1] = modbus_data_buffer[DCP10_CTRL_MODE];
 8088a64:	4b1f      	ldr	r3, [pc, #124]	; (8088ae4 <_ZN11GXGenerator18extractMainMetricsEh+0x13c>)
 8088a66:	8019      	strh	r1, [r3, #0]
                    gen_alrm_regval[ALARM_REG2] = modbus_data_buffer[DCP10_ALRM_FAULT];
 8088a68:	805a      	strh	r2, [r3, #2]
                    break;
 8088a6a:	e7b3      	b.n	80889d4 <_ZN11GXGenerator18extractMainMetricsEh+0x2c>
    if (gen_controller_type == APM_303)
 8088a6c:	2b04      	cmp	r3, #4
 8088a6e:	d133      	bne.n	8088ad8 <_ZN11GXGenerator18extractMainMetricsEh+0x130>
        switch (query_unit)
 8088a70:	2903      	cmp	r1, #3
 8088a72:	d8af      	bhi.n	80889d4 <_ZN11GXGenerator18extractMainMetricsEh+0x2c>
 8088a74:	e8df f001 	tbb	[pc, r1]
 8088a78:	1b0e0802 	.word	0x1b0e0802
                    extracted_modbus_databuff[NUM_OF_STARTS] = modbus_data_buffer[APM303_NUM_OF_STRT];
 8088a7c:	4a17      	ldr	r2, [pc, #92]	; (8088adc <_ZN11GXGenerator18extractMainMetricsEh+0x134>)
 8088a7e:	4b18      	ldr	r3, [pc, #96]	; (8088ae0 <_ZN11GXGenerator18extractMainMetricsEh+0x138>)
 8088a80:	8811      	ldrh	r1, [r2, #0]
                    extracted_modbus_databuff[RUN_HRS] = modbus_data_buffer[APM303_RUN_HR];
 8088a82:	8992      	ldrh	r2, [r2, #12]
                    extracted_modbus_databuff[NUM_OF_STARTS] = modbus_data_buffer[APM303_NUM_OF_STRT];
 8088a84:	6059      	str	r1, [r3, #4]
                    extracted_modbus_databuff[RUN_HRS] = modbus_data_buffer[APM303_RUN_HR];
 8088a86:	e7e6      	b.n	8088a56 <_ZN11GXGenerator18extractMainMetricsEh+0xae>
                    extracted_modbus_databuff[ENGINE_STATE] = modbus_data_buffer[APM303_ENG_STATE];
 8088a88:	4a14      	ldr	r2, [pc, #80]	; (8088adc <_ZN11GXGenerator18extractMainMetricsEh+0x134>)
 8088a8a:	4b15      	ldr	r3, [pc, #84]	; (8088ae0 <_ZN11GXGenerator18extractMainMetricsEh+0x138>)
 8088a8c:	8811      	ldrh	r1, [r2, #0]
                    extracted_modbus_databuff[CTRL_MODE] = modbus_data_buffer[APM303_CTRL_MODE];
 8088a8e:	8852      	ldrh	r2, [r2, #2]
                    extracted_modbus_databuff[ENGINE_STATE] = modbus_data_buffer[APM303_ENG_STATE];
 8088a90:	60d9      	str	r1, [r3, #12]
                    extracted_modbus_databuff[CTRL_MODE] = modbus_data_buffer[APM303_CTRL_MODE];
 8088a92:	e7a7      	b.n	80889e4 <_ZN11GXGenerator18extractMainMetricsEh+0x3c>
                }
            
            case GEN_QUERY3:
                
                {
                    gen_alrm_regval[ALARM_REG11] = modbus_data_buffer[APM303_LOW_BATT];
 8088a94:	4a11      	ldr	r2, [pc, #68]	; (8088adc <_ZN11GXGenerator18extractMainMetricsEh+0x134>)
 8088a96:	4b13      	ldr	r3, [pc, #76]	; (8088ae4 <_ZN11GXGenerator18extractMainMetricsEh+0x13c>)
 8088a98:	8811      	ldrh	r1, [r2, #0]
 8088a9a:	8299      	strh	r1, [r3, #20]
                    gen_alrm_regval[ALARM_REG23] = modbus_data_buffer[APM303_LOW_FUEL];
 8088a9c:	8851      	ldrh	r1, [r2, #2]
 8088a9e:	8599      	strh	r1, [r3, #44]	; 0x2c
                    gen_alrm_regval[ALARM_REG1] = modbus_data_buffer[APM303_EMERGENCY_STP];
 8088aa0:	8a11      	ldrh	r1, [r2, #16]
 8088aa2:	8019      	strh	r1, [r3, #0]
                    gen_alrm_regval[ALARM_REG6] = modbus_data_buffer[APM303_OVERSPEED];
 8088aa4:	8a51      	ldrh	r1, [r2, #18]
                    gen_alrm_regval[ALARM_REG5] = modbus_data_buffer[APM303_UNDERSPEED];
 8088aa6:	8a92      	ldrh	r2, [r2, #20]
                    gen_alrm_regval[ALARM_REG6] = modbus_data_buffer[APM303_OVERSPEED];
 8088aa8:	8159      	strh	r1, [r3, #10]
                    gen_alrm_regval[ALARM_REG5] = modbus_data_buffer[APM303_UNDERSPEED];
 8088aaa:	811a      	strh	r2, [r3, #8]

                    break;
 8088aac:	e792      	b.n	80889d4 <_ZN11GXGenerator18extractMainMetricsEh+0x2c>
                }
            
            case GEN_QUERY4:
                
                {
                    gen_alrm_regval[ALARM_REG2] = modbus_data_buffer[APM303_LOW_OIL_PRSS];
 8088aae:	4a0b      	ldr	r2, [pc, #44]	; (8088adc <_ZN11GXGenerator18extractMainMetricsEh+0x134>)
 8088ab0:	4b0c      	ldr	r3, [pc, #48]	; (8088ae4 <_ZN11GXGenerator18extractMainMetricsEh+0x13c>)
 8088ab2:	8811      	ldrh	r1, [r2, #0]
 8088ab4:	8059      	strh	r1, [r3, #2]
                    gen_alrm_regval[ALARM_REG3] = modbus_data_buffer[APM303_HIGH_COOL_TEMP];
 8088ab6:	8851      	ldrh	r1, [r2, #2]
 8088ab8:	8099      	strh	r1, [r3, #4]
                    gen_alrm_regval[ALARM_REG16] = modbus_data_buffer[APM303_FAIL_TO_CLOSE];
 8088aba:	8951      	ldrh	r1, [r2, #10]
 8088abc:	83d9      	strh	r1, [r3, #30]
                    gen_alrm_regval[ALARM_REG10] = modbus_data_buffer[APM303_HIGH_VOLT];
 8088abe:	8991      	ldrh	r1, [r2, #12]
 8088ac0:	8259      	strh	r1, [r3, #18]
                    gen_alrm_regval[ALARM_REG9] = modbus_data_buffer[APM303_LOW_VOLT];
 8088ac2:	89d1      	ldrh	r1, [r2, #14]
 8088ac4:	8219      	strh	r1, [r3, #16]
                    gen_alrm_regval[ALARM_REG8] = modbus_data_buffer[APM303_HIGH_FREQ];
 8088ac6:	8a11      	ldrh	r1, [r2, #16]
 8088ac8:	81d9      	strh	r1, [r3, #14]
                    gen_alrm_regval[ALARM_REG7] = modbus_data_buffer[APM303_LOW_FREQ];
 8088aca:	8a51      	ldrh	r1, [r2, #18]
 8088acc:	8199      	strh	r1, [r3, #12]
                    gen_alrm_regval[ALARM_REG14] = modbus_data_buffer[APM303_FAIL_TO_STRT];
 8088ace:	8a91      	ldrh	r1, [r2, #20]
                    gen_alrm_regval[ALARM_REG15] = modbus_data_buffer[APM303_FAIL_TO_STP];
 8088ad0:	8ad2      	ldrh	r2, [r2, #22]
                    gen_alrm_regval[ALARM_REG14] = modbus_data_buffer[APM303_FAIL_TO_STRT];
 8088ad2:	8359      	strh	r1, [r3, #26]
                    gen_alrm_regval[ALARM_REG15] = modbus_data_buffer[APM303_FAIL_TO_STP];
 8088ad4:	839a      	strh	r2, [r3, #28]

                    break;
 8088ad6:	e77d      	b.n	80889d4 <_ZN11GXGenerator18extractMainMetricsEh+0x2c>

        memset(modbus_data_buffer, 0, sizeof(modbus_data_buffer));
        return;
    }   
        
}
 8088ad8:	4770      	bx	lr
 8088ada:	bf00      	nop
 8088adc:	20000de4 	.word	0x20000de4
 8088ae0:	200006d4 	.word	0x200006d4
 8088ae4:	20000738 	.word	0x20000738

08088ae8 <_ZN11GXGenerator21extractBasInstMetricsEh>:

void GXGenerator::extractBasInstMetrics(uint8_t query_unit)
{
 8088ae8:	b410      	push	{r4}
    if (gen_controller_type == DSE_857)
 8088aea:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8088aee:	2b02      	cmp	r3, #2
 8088af0:	d165      	bne.n	8088bbe <_ZN11GXGenerator21extractBasInstMetricsEh+0xd6>
    {
        switch (query_unit)
 8088af2:	2901      	cmp	r1, #1
 8088af4:	d00f      	beq.n	8088b16 <_ZN11GXGenerator21extractBasInstMetricsEh+0x2e>
 8088af6:	2902      	cmp	r1, #2
 8088af8:	d039      	beq.n	8088b6e <_ZN11GXGenerator21extractBasInstMetricsEh+0x86>
 8088afa:	b931      	cbnz	r1, 8088b0a <_ZN11GXGenerator21extractBasInstMetricsEh+0x22>
        {
            case GEN_QUERY1:

                 {
                    extracted_modbus_databuff[TOTAL_KWH] = (modbus_data_buffer[DSE_TOTAL_KWH_H] << MOVE_16_STEP) |
 8088afc:	4a6d      	ldr	r2, [pc, #436]	; (8088cb4 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1cc>)
 8088afe:	8811      	ldrh	r1, [r2, #0]
                                                           (modbus_data_buffer[DSE_TOTAL_KWH_L]);
 8088b00:	8853      	ldrh	r3, [r2, #2]
                    extracted_modbus_databuff[TOTAL_KWH] = (modbus_data_buffer[DSE_TOTAL_KWH_H] << MOVE_16_STEP) |
 8088b02:	4a6d      	ldr	r2, [pc, #436]	; (8088cb8 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d0>)
 8088b04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8088b08:	6013      	str	r3, [r2, #0]
                 
                    break;
                 }
        }

        memset(modbus_data_buffer, 0, sizeof(modbus_data_buffer));
 8088b0a:	223c      	movs	r2, #60	; 0x3c
 8088b0c:	2100      	movs	r1, #0
 8088b0e:	4869      	ldr	r0, [pc, #420]	; (8088cb4 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1cc>)
        memset(modbus_data_buffer, 0, sizeof(modbus_data_buffer));
        return;
    }
    
        
}
 8088b10:	bc10      	pop	{r4}
        memset(modbus_data_buffer, 0, sizeof(modbus_data_buffer));
 8088b12:	f009 b9d7 	b.w	8091ec4 <memset>
 8088b16:	4967      	ldr	r1, [pc, #412]	; (8088cb4 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1cc>)
        switch (query_unit)
 8088b18:	2208      	movs	r2, #8
 8088b1a:	460b      	mov	r3, r1
 8088b1c:	4867      	ldr	r0, [pc, #412]	; (8088cbc <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d4>)
                        extracted_modbus_databuff[i] = modbus_data_buffer[buff_indx];
 8088b1e:	f831 4b02 	ldrh.w	r4, [r1], #2
 8088b22:	3a01      	subs	r2, #1
                    for (uint8_t i = OIL_PRESSR; i <= GEN_FREQCY; i++)
 8088b24:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
                        extracted_modbus_databuff[i] = modbus_data_buffer[buff_indx];
 8088b28:	f840 4b04 	str.w	r4, [r0], #4
                    for (uint8_t i = OIL_PRESSR; i <= GEN_FREQCY; i++)
 8088b2c:	d1f7      	bne.n	8088b1e <_ZN11GXGenerator21extractBasInstMetricsEh+0x36>
                    extracted_modbus_databuff[L1_N_VOLT] = (modbus_data_buffer[DSE_L1_VOLT_H] << MOVE_16_STEP) |
 8088b2e:	8a18      	ldrh	r0, [r3, #16]
                                                           (modbus_data_buffer[DSE_L1_VOLT_L]);
 8088b30:	8a59      	ldrh	r1, [r3, #18]
                    extracted_modbus_databuff[L1_N_VOLT] = (modbus_data_buffer[DSE_L1_VOLT_H] << MOVE_16_STEP) |
 8088b32:	4a61      	ldr	r2, [pc, #388]	; (8088cb8 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d0>)
 8088b34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8088b38:	6251      	str	r1, [r2, #36]	; 0x24
                    extracted_modbus_databuff[L2_N_VOLT] = (modbus_data_buffer[DSE_L2_VOLT_H] << MOVE_16_STEP) |
 8088b3a:	8a98      	ldrh	r0, [r3, #20]
                                                           (modbus_data_buffer[DSE_L2_VOLT_L]);
 8088b3c:	8ad9      	ldrh	r1, [r3, #22]
                    extracted_modbus_databuff[L2_N_VOLT] = (modbus_data_buffer[DSE_L2_VOLT_H] << MOVE_16_STEP) |
 8088b3e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8088b42:	6291      	str	r1, [r2, #40]	; 0x28
                    extracted_modbus_databuff[L3_N_VOLT] = (modbus_data_buffer[DSE_L3_VOLT_H] << MOVE_16_STEP) |
 8088b44:	8b18      	ldrh	r0, [r3, #24]
                                                           (modbus_data_buffer[DSE_L3_VOLT_L]);
 8088b46:	8b59      	ldrh	r1, [r3, #26]
                    extracted_modbus_databuff[L3_N_VOLT] = (modbus_data_buffer[DSE_L3_VOLT_H] << MOVE_16_STEP) |
 8088b48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8088b4c:	62d1      	str	r1, [r2, #44]	; 0x2c
                    extracted_modbus_databuff[L1_L2_VOLT] = (modbus_data_buffer[DSE_L1L2_VOLT_H] << MOVE_16_STEP) |
 8088b4e:	8b98      	ldrh	r0, [r3, #28]
                                                            (modbus_data_buffer[DSE_L1L2_VOLT_L]);
 8088b50:	8bd9      	ldrh	r1, [r3, #30]
                    extracted_modbus_databuff[L1_L2_VOLT] = (modbus_data_buffer[DSE_L1L2_VOLT_H] << MOVE_16_STEP) |
 8088b52:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8088b56:	6311      	str	r1, [r2, #48]	; 0x30
                    extracted_modbus_databuff[L2_L3_VOLT] = (modbus_data_buffer[DSE_L2L3_VOLT_H] << MOVE_16_STEP) |
 8088b58:	8c18      	ldrh	r0, [r3, #32]
                                                            (modbus_data_buffer[DSE_L2L3_VOLT_L]);
 8088b5a:	8c59      	ldrh	r1, [r3, #34]	; 0x22
                    extracted_modbus_databuff[L2_L3_VOLT] = (modbus_data_buffer[DSE_L2L3_VOLT_H] << MOVE_16_STEP) |
 8088b5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8088b60:	6351      	str	r1, [r2, #52]	; 0x34
                    extracted_modbus_databuff[L3_L1_VOLT] = (modbus_data_buffer[DSE_L3L1_VOLT_H] << MOVE_16_STEP) |
 8088b62:	8c99      	ldrh	r1, [r3, #36]	; 0x24
                                                            (modbus_data_buffer[DSE_L3L1_VOLT_L]);
 8088b64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
                    extracted_modbus_databuff[L3_L1_VOLT] = (modbus_data_buffer[DSE_L3L1_VOLT_H] << MOVE_16_STEP) |
 8088b66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8088b6a:	6393      	str	r3, [r2, #56]	; 0x38
                    break;
 8088b6c:	e7cd      	b.n	8088b0a <_ZN11GXGenerator21extractBasInstMetricsEh+0x22>
                    extracted_modbus_databuff[L1_CURR] = (modbus_data_buffer[DSE_L1_CURR_H] << MOVE_16_STEP) |
 8088b6e:	4b51      	ldr	r3, [pc, #324]	; (8088cb4 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1cc>)
 8088b70:	4a51      	ldr	r2, [pc, #324]	; (8088cb8 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d0>)
 8088b72:	8818      	ldrh	r0, [r3, #0]
                                                         (modbus_data_buffer[DSE_L1_CURR_L]);
 8088b74:	8859      	ldrh	r1, [r3, #2]
                    extracted_modbus_databuff[L1_CURR] = (modbus_data_buffer[DSE_L1_CURR_H] << MOVE_16_STEP) |
 8088b76:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8088b7a:	63d1      	str	r1, [r2, #60]	; 0x3c
                    extracted_modbus_databuff[L2_CURR] = (modbus_data_buffer[DSE_L2_CURR_H] << MOVE_16_STEP) |
 8088b7c:	8898      	ldrh	r0, [r3, #4]
                                                         (modbus_data_buffer[DSE_L2_CURR_L]);
 8088b7e:	88d9      	ldrh	r1, [r3, #6]
                    extracted_modbus_databuff[L2_CURR] = (modbus_data_buffer[DSE_L2_CURR_H] << MOVE_16_STEP) |
 8088b80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8088b84:	6411      	str	r1, [r2, #64]	; 0x40
                    extracted_modbus_databuff[L3_CURR] = (modbus_data_buffer[DSE_L3_CURR_H] << MOVE_16_STEP) |
 8088b86:	8918      	ldrh	r0, [r3, #8]
                                                         (modbus_data_buffer[DSE_L3_CURR_L]);
 8088b88:	8959      	ldrh	r1, [r3, #10]
                    extracted_modbus_databuff[L3_CURR] = (modbus_data_buffer[DSE_L3_CURR_H] << MOVE_16_STEP) |
 8088b8a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8088b8e:	6451      	str	r1, [r2, #68]	; 0x44
                    extracted_modbus_databuff[EARTH_CURR] = (modbus_data_buffer[DSE_EARTH_CURR_H] << MOVE_16_STEP) |
 8088b90:	8998      	ldrh	r0, [r3, #12]
                                                            (modbus_data_buffer[DSE_EARTH_CURR_L]);
 8088b92:	89d9      	ldrh	r1, [r3, #14]
                    extracted_modbus_databuff[EARTH_CURR] = (modbus_data_buffer[DSE_EARTH_CURR_H] << MOVE_16_STEP) |
 8088b94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8088b98:	6491      	str	r1, [r2, #72]	; 0x48
                    extracted_modbus_databuff[L1_WATT] = (modbus_data_buffer[DSE_L1_WATT_H] << MOVE_16_STEP) |
 8088b9a:	8a18      	ldrh	r0, [r3, #16]
                                                         (modbus_data_buffer[DSE_L1_WATT_L]);
 8088b9c:	8a59      	ldrh	r1, [r3, #18]
                    extracted_modbus_databuff[L1_WATT] = (modbus_data_buffer[DSE_L1_WATT_H] << MOVE_16_STEP) |
 8088b9e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8088ba2:	64d1      	str	r1, [r2, #76]	; 0x4c
                    extracted_modbus_databuff[L2_WATT] = (modbus_data_buffer[DSE_L2_WATT_H] << MOVE_16_STEP) |
 8088ba4:	8a98      	ldrh	r0, [r3, #20]
                                                         (modbus_data_buffer[DSE_L2_WATT_L]);
 8088ba6:	8ad9      	ldrh	r1, [r3, #22]
                    extracted_modbus_databuff[L2_WATT] = (modbus_data_buffer[DSE_L2_WATT_H] << MOVE_16_STEP) |
 8088ba8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8088bac:	6511      	str	r1, [r2, #80]	; 0x50
                    extracted_modbus_databuff[L3_WATT] = (modbus_data_buffer[DSE_L3_WATT_H] << MOVE_16_STEP) |
 8088bae:	8b18      	ldrh	r0, [r3, #24]
                                                         (modbus_data_buffer[DSE_L3_WATT_L]);
 8088bb0:	8b59      	ldrh	r1, [r3, #26]
                    extracted_modbus_databuff[CURR_LAG_LEAD] = modbus_data_buffer[DSE_CURR_LAG_LEAD];
 8088bb2:	8b9b      	ldrh	r3, [r3, #28]
                    extracted_modbus_databuff[L3_WATT] = (modbus_data_buffer[DSE_L3_WATT_H] << MOVE_16_STEP) |
 8088bb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8088bb8:	6551      	str	r1, [r2, #84]	; 0x54
                    extracted_modbus_databuff[CURR_LAG_LEAD] = modbus_data_buffer[DSE_CURR_LAG_LEAD];
 8088bba:	6593      	str	r3, [r2, #88]	; 0x58
                    break;
 8088bbc:	e7a5      	b.n	8088b0a <_ZN11GXGenerator21extractBasInstMetricsEh+0x22>
    if (gen_controller_type == PCC_1302)
 8088bbe:	2b03      	cmp	r3, #3
 8088bc0:	d12a      	bne.n	8088c18 <_ZN11GXGenerator21extractBasInstMetricsEh+0x130>
        switch (query_unit)
 8088bc2:	2901      	cmp	r1, #1
 8088bc4:	d018      	beq.n	8088bf8 <_ZN11GXGenerator21extractBasInstMetricsEh+0x110>
 8088bc6:	2902      	cmp	r1, #2
 8088bc8:	d01b      	beq.n	8088c02 <_ZN11GXGenerator21extractBasInstMetricsEh+0x11a>
 8088bca:	2900      	cmp	r1, #0
 8088bcc:	d19d      	bne.n	8088b0a <_ZN11GXGenerator21extractBasInstMetricsEh+0x22>
                    extracted_modbus_databuff[L1_N_VOLT] = modbus_data_buffer[PCC1302_L1_VOLT];
 8088bce:	4a39      	ldr	r2, [pc, #228]	; (8088cb4 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1cc>)
 8088bd0:	4b39      	ldr	r3, [pc, #228]	; (8088cb8 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d0>)
 8088bd2:	8811      	ldrh	r1, [r2, #0]
 8088bd4:	6259      	str	r1, [r3, #36]	; 0x24
                    extracted_modbus_databuff[L2_N_VOLT] = modbus_data_buffer[PCC1302_L2_VOLT];
 8088bd6:	8851      	ldrh	r1, [r2, #2]
 8088bd8:	6299      	str	r1, [r3, #40]	; 0x28
                    extracted_modbus_databuff[L3_N_VOLT] = modbus_data_buffer[PCC1302_L3_VOLT];
 8088bda:	8891      	ldrh	r1, [r2, #4]
 8088bdc:	62d9      	str	r1, [r3, #44]	; 0x2c
                    extracted_modbus_databuff[L1_L2_VOLT] = modbus_data_buffer[PCC1302_L1L2_VOLT];
 8088bde:	8911      	ldrh	r1, [r2, #8]
 8088be0:	6319      	str	r1, [r3, #48]	; 0x30
                    extracted_modbus_databuff[L2_L3_VOLT] = modbus_data_buffer[PCC1302_L2L3_VOLT];
 8088be2:	8951      	ldrh	r1, [r2, #10]
 8088be4:	6359      	str	r1, [r3, #52]	; 0x34
                    extracted_modbus_databuff[L3_L1_VOLT] = modbus_data_buffer[PCC1302_L3L1_VOLT];
 8088be6:	8991      	ldrh	r1, [r2, #12]
 8088be8:	6399      	str	r1, [r3, #56]	; 0x38
                    extracted_modbus_databuff[L1_CURR] = modbus_data_buffer[PCC1302_L1_CURR];
 8088bea:	8a11      	ldrh	r1, [r2, #16]
 8088bec:	63d9      	str	r1, [r3, #60]	; 0x3c
                    extracted_modbus_databuff[L2_CURR] = modbus_data_buffer[PCC1302_L2_CURR];
 8088bee:	8a51      	ldrh	r1, [r2, #18]
                    extracted_modbus_databuff[L3_CURR] = modbus_data_buffer[PCC1302_L3_CURR];
 8088bf0:	8a92      	ldrh	r2, [r2, #20]
                    extracted_modbus_databuff[L2_CURR] = modbus_data_buffer[PCC1302_L2_CURR];
 8088bf2:	6419      	str	r1, [r3, #64]	; 0x40
                    extracted_modbus_databuff[L3_CURR] = modbus_data_buffer[PCC1302_L3_CURR];
 8088bf4:	645a      	str	r2, [r3, #68]	; 0x44
                    break;
 8088bf6:	e788      	b.n	8088b0a <_ZN11GXGenerator21extractBasInstMetricsEh+0x22>
                    extracted_modbus_databuff[GEN_FREQCY] = modbus_data_buffer[PCC1302_GEN_FREQ];
 8088bf8:	4b2e      	ldr	r3, [pc, #184]	; (8088cb4 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1cc>)
 8088bfa:	881a      	ldrh	r2, [r3, #0]
                    extracted_modbus_databuff[GEN_FREQCY] = modbus_data_buffer[DCP10_GEN_FREQ];
 8088bfc:	4b2e      	ldr	r3, [pc, #184]	; (8088cb8 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d0>)
 8088bfe:	621a      	str	r2, [r3, #32]
                    break;
 8088c00:	e783      	b.n	8088b0a <_ZN11GXGenerator21extractBasInstMetricsEh+0x22>
                    extracted_modbus_databuff[ENGINE_BATT_VOLT] = modbus_data_buffer[PCC1302_BATT_VOLT];
 8088c02:	4a2c      	ldr	r2, [pc, #176]	; (8088cb4 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1cc>)
 8088c04:	4b2c      	ldr	r3, [pc, #176]	; (8088cb8 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d0>)
 8088c06:	8811      	ldrh	r1, [r2, #0]
 8088c08:	6199      	str	r1, [r3, #24]
                    extracted_modbus_databuff[OIL_PRESSR] = modbus_data_buffer[PCC1302_OIL_PRESS];
 8088c0a:	8851      	ldrh	r1, [r2, #2]
 8088c0c:	6059      	str	r1, [r3, #4]
                    extracted_modbus_databuff[COOL_TEMP] = modbus_data_buffer[PCC1302_COOL_TEMP];
 8088c0e:	88d1      	ldrh	r1, [r2, #6]
                    extracted_modbus_databuff[ENGINE_SPEED] = modbus_data_buffer[PCC1302_ENG_SPEED];
 8088c10:	89d2      	ldrh	r2, [r2, #14]
                    extracted_modbus_databuff[COOL_TEMP] = modbus_data_buffer[PCC1302_COOL_TEMP];
 8088c12:	6099      	str	r1, [r3, #8]
                    extracted_modbus_databuff[ENGINE_SPEED] = modbus_data_buffer[PCC1302_ENG_SPEED];
 8088c14:	61da      	str	r2, [r3, #28]
                    break;
 8088c16:	e778      	b.n	8088b0a <_ZN11GXGenerator21extractBasInstMetricsEh+0x22>
    if (gen_controller_type == DCP_10)
 8088c18:	2b01      	cmp	r3, #1
 8088c1a:	d11e      	bne.n	8088c5a <_ZN11GXGenerator21extractBasInstMetricsEh+0x172>
        switch (query_unit)
 8088c1c:	b181      	cbz	r1, 8088c40 <_ZN11GXGenerator21extractBasInstMetricsEh+0x158>
 8088c1e:	2901      	cmp	r1, #1
 8088c20:	f47f af73 	bne.w	8088b0a <_ZN11GXGenerator21extractBasInstMetricsEh+0x22>
 8088c24:	4a23      	ldr	r2, [pc, #140]	; (8088cb4 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1cc>)
 8088c26:	2309      	movs	r3, #9
 8088c28:	4610      	mov	r0, r2
 8088c2a:	4925      	ldr	r1, [pc, #148]	; (8088cc0 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d8>)
                        extracted_modbus_databuff[metrc_indx] = modbus_data_buffer[data_indx++];
 8088c2c:	f832 4b02 	ldrh.w	r4, [r2], #2
 8088c30:	3b01      	subs	r3, #1
                    for (uint8_t metrc_indx = L1_N_VOLT; metrc_indx < EARTH_CURR; metrc_indx++)
 8088c32:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
                        extracted_modbus_databuff[metrc_indx] = modbus_data_buffer[data_indx++];
 8088c36:	f841 4b04 	str.w	r4, [r1], #4
                    for (uint8_t metrc_indx = L1_N_VOLT; metrc_indx < EARTH_CURR; metrc_indx++)
 8088c3a:	d1f7      	bne.n	8088c2c <_ZN11GXGenerator21extractBasInstMetricsEh+0x144>
                    extracted_modbus_databuff[GEN_FREQCY] = modbus_data_buffer[DCP10_GEN_FREQ];
 8088c3c:	8b02      	ldrh	r2, [r0, #24]
 8088c3e:	e7dd      	b.n	8088bfc <_ZN11GXGenerator21extractBasInstMetricsEh+0x114>
                    extracted_modbus_databuff[ENGINE_SPEED] = modbus_data_buffer[DCP10_ENG_SPEED];
 8088c40:	4a1c      	ldr	r2, [pc, #112]	; (8088cb4 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1cc>)
 8088c42:	4b1d      	ldr	r3, [pc, #116]	; (8088cb8 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d0>)
 8088c44:	8811      	ldrh	r1, [r2, #0]
 8088c46:	61d9      	str	r1, [r3, #28]
                    extracted_modbus_databuff[OIL_PRESSR] = modbus_data_buffer[DCP10_OIL_PRESSR];
 8088c48:	8851      	ldrh	r1, [r2, #2]
 8088c4a:	6059      	str	r1, [r3, #4]
                    extracted_modbus_databuff[COOL_TEMP] = modbus_data_buffer[DCP10_COOL_TEMP];
 8088c4c:	8891      	ldrh	r1, [r2, #4]
 8088c4e:	6099      	str	r1, [r3, #8]
                    extracted_modbus_databuff[ENGINE_BATT_VOLT] = modbus_data_buffer[DCP10_BATT_VOLT];
 8088c50:	88d1      	ldrh	r1, [r2, #6]
                    extracted_modbus_databuff[CHARGER_ALT_VOLT] = modbus_data_buffer[DCP10_CHARGE_VOLT];
 8088c52:	8912      	ldrh	r2, [r2, #8]
                    extracted_modbus_databuff[ENGINE_BATT_VOLT] = modbus_data_buffer[DCP10_BATT_VOLT];
 8088c54:	6199      	str	r1, [r3, #24]
                    extracted_modbus_databuff[CHARGER_ALT_VOLT] = modbus_data_buffer[APM303_CHARGER_VOLTAGE];
 8088c56:	615a      	str	r2, [r3, #20]
                    break;
 8088c58:	e757      	b.n	8088b0a <_ZN11GXGenerator21extractBasInstMetricsEh+0x22>
    if (gen_controller_type == APM_303)
 8088c5a:	2b04      	cmp	r3, #4
 8088c5c:	d127      	bne.n	8088cae <_ZN11GXGenerator21extractBasInstMetricsEh+0x1c6>
        switch (query_unit)
 8088c5e:	b191      	cbz	r1, 8088c86 <_ZN11GXGenerator21extractBasInstMetricsEh+0x19e>
 8088c60:	2901      	cmp	r1, #1
 8088c62:	f47f af52 	bne.w	8088b0a <_ZN11GXGenerator21extractBasInstMetricsEh+0x22>
                    extracted_modbus_databuff[CURR_LAG_LEAD] = modbus_data_buffer[APM303_CURR_LAG_LEAD];
 8088c66:	4a13      	ldr	r2, [pc, #76]	; (8088cb4 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1cc>)
 8088c68:	4b13      	ldr	r3, [pc, #76]	; (8088cb8 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d0>)
 8088c6a:	8811      	ldrh	r1, [r2, #0]
 8088c6c:	6599      	str	r1, [r3, #88]	; 0x58
                    extracted_modbus_databuff[ENGINE_SPEED] = modbus_data_buffer[APM303_ENGINE_SPEED];
 8088c6e:	8851      	ldrh	r1, [r2, #2]
 8088c70:	61d9      	str	r1, [r3, #28]
                    extracted_modbus_databuff[GEN_FREQCY] = modbus_data_buffer[APM303_GEN_FREQUENCY];
 8088c72:	8891      	ldrh	r1, [r2, #4]
 8088c74:	6219      	str	r1, [r3, #32]
                    extracted_modbus_databuff[ENGINE_BATT_VOLT] = modbus_data_buffer[APM303_BATT_VOLTAGE];
 8088c76:	8911      	ldrh	r1, [r2, #8]
 8088c78:	6199      	str	r1, [r3, #24]
                    extracted_modbus_databuff[OIL_PRESSR] = modbus_data_buffer[APM303_OIL_PRESSURE];
 8088c7a:	89d1      	ldrh	r1, [r2, #14]
 8088c7c:	6059      	str	r1, [r3, #4]
                    extracted_modbus_databuff[COOL_TEMP] = modbus_data_buffer[APM303_COOL_TEMP];
 8088c7e:	8a11      	ldrh	r1, [r2, #16]
                    extracted_modbus_databuff[CHARGER_ALT_VOLT] = modbus_data_buffer[APM303_CHARGER_VOLTAGE];
 8088c80:	8ad2      	ldrh	r2, [r2, #22]
                    extracted_modbus_databuff[COOL_TEMP] = modbus_data_buffer[APM303_COOL_TEMP];
 8088c82:	6099      	str	r1, [r3, #8]
                    extracted_modbus_databuff[CHARGER_ALT_VOLT] = modbus_data_buffer[APM303_CHARGER_VOLTAGE];
 8088c84:	e7e7      	b.n	8088c56 <_ZN11GXGenerator21extractBasInstMetricsEh+0x16e>
 8088c86:	490b      	ldr	r1, [pc, #44]	; (8088cb4 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1cc>)
        switch (query_unit)
 8088c88:	2309      	movs	r3, #9
 8088c8a:	460a      	mov	r2, r1
 8088c8c:	480c      	ldr	r0, [pc, #48]	; (8088cc0 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d8>)
                        extracted_modbus_databuff[metrc_indx] = modbus_data_buffer[data_indx++];
 8088c8e:	f831 4b02 	ldrh.w	r4, [r1], #2
 8088c92:	3b01      	subs	r3, #1
                    for (uint8_t metrc_indx = L1_N_VOLT; metrc_indx < EARTH_CURR; metrc_indx++)
 8088c94:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
                        extracted_modbus_databuff[metrc_indx] = modbus_data_buffer[data_indx++];
 8088c98:	f840 4b04 	str.w	r4, [r0], #4
                    for (uint8_t metrc_indx = L1_N_VOLT; metrc_indx < EARTH_CURR; metrc_indx++)
 8088c9c:	d1f7      	bne.n	8088c8e <_ZN11GXGenerator21extractBasInstMetricsEh+0x1a6>
                    extracted_modbus_databuff[L1_WATT] = modbus_data_buffer[APM303_L1_WATT];
 8088c9e:	4b06      	ldr	r3, [pc, #24]	; (8088cb8 <_ZN11GXGenerator21extractBasInstMetricsEh+0x1d0>)
 8088ca0:	8b11      	ldrh	r1, [r2, #24]
 8088ca2:	64d9      	str	r1, [r3, #76]	; 0x4c
                    extracted_modbus_databuff[L2_WATT] = modbus_data_buffer[APM303_L2_WATT];
 8088ca4:	8b51      	ldrh	r1, [r2, #26]
                    extracted_modbus_databuff[L3_WATT] = modbus_data_buffer[APM303_L3_WATT];
 8088ca6:	8b92      	ldrh	r2, [r2, #28]
                    extracted_modbus_databuff[L2_WATT] = modbus_data_buffer[APM303_L2_WATT];
 8088ca8:	6519      	str	r1, [r3, #80]	; 0x50
                    extracted_modbus_databuff[L3_WATT] = modbus_data_buffer[APM303_L3_WATT];
 8088caa:	655a      	str	r2, [r3, #84]	; 0x54
                    break;
 8088cac:	e72d      	b.n	8088b0a <_ZN11GXGenerator21extractBasInstMetricsEh+0x22>
}
 8088cae:	bc10      	pop	{r4}
 8088cb0:	4770      	bx	lr
 8088cb2:	bf00      	nop
 8088cb4:	20000de4 	.word	0x20000de4
 8088cb8:	200006d4 	.word	0x200006d4
 8088cbc:	200006d8 	.word	0x200006d8
 8088cc0:	200006f8 	.word	0x200006f8

08088cc4 <_ZN11GXGenerator21extractDerInstMetricsEh>:

void GXGenerator::extractDerInstMetrics(uint8_t query_unit) 
{
    if (gen_controller_type == DSE_857)
 8088cc4:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8088cc8:	2b02      	cmp	r3, #2
 8088cca:	d13c      	bne.n	8088d46 <_ZN11GXGenerator21extractDerInstMetricsEh+0x82>
    {
        extracted_modbus_databuff[TOTAL_WATT] = (modbus_data_buffer[DSE_TOTAL_WATT_H] << MOVE_16_STEP) | 
 8088ccc:	482a      	ldr	r0, [pc, #168]	; (8088d78 <_ZN11GXGenerator21extractDerInstMetricsEh+0xb4>)
 8088cce:	4b2b      	ldr	r3, [pc, #172]	; (8088d7c <_ZN11GXGenerator21extractDerInstMetricsEh+0xb8>)
 8088cd0:	8801      	ldrh	r1, [r0, #0]
                                                (modbus_data_buffer[DSE_TOTAL_WATT_L]);
 8088cd2:	8842      	ldrh	r2, [r0, #2]
        extracted_modbus_databuff[TOTAL_WATT] = (modbus_data_buffer[DSE_TOTAL_WATT_H] << MOVE_16_STEP) | 
 8088cd4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8088cd8:	601a      	str	r2, [r3, #0]
        
        extracted_modbus_databuff[L1_KVA] = (modbus_data_buffer[DSE_L1_KVA_H] << MOVE_16_STEP) | 
 8088cda:	8881      	ldrh	r1, [r0, #4]
                                            (modbus_data_buffer[DSE_L1_KVA_L]);
 8088cdc:	88c2      	ldrh	r2, [r0, #6]
        extracted_modbus_databuff[L1_KVA] = (modbus_data_buffer[DSE_L1_KVA_H] << MOVE_16_STEP) | 
 8088cde:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8088ce2:	605a      	str	r2, [r3, #4]
        
        extracted_modbus_databuff[L2_KVA] = (modbus_data_buffer[DSE_L2_KVA_H] << MOVE_16_STEP) | 
 8088ce4:	8901      	ldrh	r1, [r0, #8]
                                            (modbus_data_buffer[DSE_L2_KVA_L]);
 8088ce6:	8942      	ldrh	r2, [r0, #10]
        extracted_modbus_databuff[L2_KVA] = (modbus_data_buffer[DSE_L2_KVA_H] << MOVE_16_STEP) | 
 8088ce8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8088cec:	609a      	str	r2, [r3, #8]

        extracted_modbus_databuff[L3_KVA] = (modbus_data_buffer[DSE_L3_KVA_H] << MOVE_16_STEP) | 
 8088cee:	8981      	ldrh	r1, [r0, #12]
                                            (modbus_data_buffer[DSE_L3_KVA_L]);
 8088cf0:	89c2      	ldrh	r2, [r0, #14]
        extracted_modbus_databuff[L3_KVA] = (modbus_data_buffer[DSE_L3_KVA_H] << MOVE_16_STEP) | 
 8088cf2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8088cf6:	60da      	str	r2, [r3, #12]
        
        extracted_modbus_databuff[TOTAL_KVA] = (modbus_data_buffer[DSE_TOTAL_KVA_H] << MOVE_16_STEP) | 
 8088cf8:	8a01      	ldrh	r1, [r0, #16]
                                               (modbus_data_buffer[DSE_TOTAL_KVA_L]);
 8088cfa:	8a42      	ldrh	r2, [r0, #18]
        extracted_modbus_databuff[TOTAL_KVA] = (modbus_data_buffer[DSE_TOTAL_KVA_H] << MOVE_16_STEP) | 
 8088cfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8088d00:	611a      	str	r2, [r3, #16]
        
        extracted_modbus_databuff[L1_KVAR] = (modbus_data_buffer[DSE_L1_KVAR_H] << MOVE_16_STEP) | 
 8088d02:	8a81      	ldrh	r1, [r0, #20]
                                             (modbus_data_buffer[DSE_L1_KVAR_L]);
 8088d04:	8ac2      	ldrh	r2, [r0, #22]
        extracted_modbus_databuff[L1_KVAR] = (modbus_data_buffer[DSE_L1_KVAR_H] << MOVE_16_STEP) | 
 8088d06:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8088d0a:	615a      	str	r2, [r3, #20]
        
        extracted_modbus_databuff[L2_KVAR] = (modbus_data_buffer[DSE_L2_KVAR_H] << MOVE_16_STEP) | 
 8088d0c:	8b01      	ldrh	r1, [r0, #24]
                                             (modbus_data_buffer[DSE_L2_KVAR_L]);
 8088d0e:	8b42      	ldrh	r2, [r0, #26]
        extracted_modbus_databuff[L2_KVAR] = (modbus_data_buffer[DSE_L2_KVAR_H] << MOVE_16_STEP) | 
 8088d10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8088d14:	619a      	str	r2, [r3, #24]
        
        extracted_modbus_databuff[L3_KVAR] = (modbus_data_buffer[DSE_L3_KVAR_H] << MOVE_16_STEP) | 
 8088d16:	8b81      	ldrh	r1, [r0, #28]
                                             (modbus_data_buffer[DSE_L3_KVAR_L]);
 8088d18:	8bc2      	ldrh	r2, [r0, #30]
        extracted_modbus_databuff[L3_KVAR] = (modbus_data_buffer[DSE_L3_KVAR_H] << MOVE_16_STEP) | 
 8088d1a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8088d1e:	61da      	str	r2, [r3, #28]
        
        extracted_modbus_databuff[TOTAL_KVAR] = (modbus_data_buffer[DSE_TOTAL_KVAR_H] << MOVE_16_STEP) | 
 8088d20:	8c01      	ldrh	r1, [r0, #32]
                                                (modbus_data_buffer[DSE_TOTAL_KVAR_L]);
 8088d22:	8c42      	ldrh	r2, [r0, #34]	; 0x22
        extracted_modbus_databuff[TOTAL_KVAR] = (modbus_data_buffer[DSE_TOTAL_KVAR_H] << MOVE_16_STEP) | 
 8088d24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8088d28:	621a      	str	r2, [r3, #32]
        
        extracted_modbus_databuff[L1_PF] = modbus_data_buffer[DSE_L1_PF];
 8088d2a:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 8088d2c:	625a      	str	r2, [r3, #36]	; 0x24
        extracted_modbus_databuff[L2_PF] = modbus_data_buffer[DSE_L2_PF];
 8088d2e:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8088d30:	629a      	str	r2, [r3, #40]	; 0x28
        extracted_modbus_databuff[L3_PF] = modbus_data_buffer[DSE_L3_PF];
 8088d32:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 8088d34:	62da      	str	r2, [r3, #44]	; 0x2c
        extracted_modbus_databuff[AVER_PF] = modbus_data_buffer[DSE_AVE_PF];
 8088d36:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8088d38:	631a      	str	r2, [r3, #48]	; 0x30
        extracted_modbus_databuff[PERCENT_OF_FULL_POWER] = modbus_data_buffer[DSE_PERCENT_WATT];
 8088d3a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8088d3c:	635a      	str	r2, [r3, #52]	; 0x34
        extracted_modbus_databuff[L3_KVA] = modbus_data_buffer[APM303_L3_KVA];
        extracted_modbus_databuff[L1_PF] = modbus_data_buffer[APM303_L1_PF];
        extracted_modbus_databuff[L2_PF] = modbus_data_buffer[APM303_L2_PF];
        extracted_modbus_databuff[L3_PF] = modbus_data_buffer[APM303_L3_PF];

        memset(modbus_data_buffer, 0, sizeof(modbus_data_buffer));
 8088d3e:	223c      	movs	r2, #60	; 0x3c
 8088d40:	2100      	movs	r1, #0
 8088d42:	f009 b8bf 	b.w	8091ec4 <memset>
    if (gen_controller_type == APM_303)
 8088d46:	2b04      	cmp	r3, #4
 8088d48:	d114      	bne.n	8088d74 <_ZN11GXGenerator21extractDerInstMetricsEh+0xb0>
        extracted_modbus_databuff[TOTAL_WATT] = modbus_data_buffer[APM303_TOTAL_KW];
 8088d4a:	480b      	ldr	r0, [pc, #44]	; (8088d78 <_ZN11GXGenerator21extractDerInstMetricsEh+0xb4>)
 8088d4c:	4b0b      	ldr	r3, [pc, #44]	; (8088d7c <_ZN11GXGenerator21extractDerInstMetricsEh+0xb8>)
 8088d4e:	8802      	ldrh	r2, [r0, #0]
 8088d50:	601a      	str	r2, [r3, #0]
        extracted_modbus_databuff[TOTAL_KVA] = modbus_data_buffer[APM303_TOTAL_KVA];
 8088d52:	8842      	ldrh	r2, [r0, #2]
 8088d54:	611a      	str	r2, [r3, #16]
        extracted_modbus_databuff[AVER_PF] = modbus_data_buffer[APM303_AVE_PF];
 8088d56:	8882      	ldrh	r2, [r0, #4]
 8088d58:	631a      	str	r2, [r3, #48]	; 0x30
        extracted_modbus_databuff[L1_KVA] = modbus_data_buffer[APM303_L1_KVA];
 8088d5a:	8982      	ldrh	r2, [r0, #12]
 8088d5c:	605a      	str	r2, [r3, #4]
        extracted_modbus_databuff[L2_KVA] = modbus_data_buffer[APM303_L2_KVA];
 8088d5e:	89c2      	ldrh	r2, [r0, #14]
 8088d60:	609a      	str	r2, [r3, #8]
        extracted_modbus_databuff[L3_KVA] = modbus_data_buffer[APM303_L3_KVA];
 8088d62:	8a02      	ldrh	r2, [r0, #16]
 8088d64:	60da      	str	r2, [r3, #12]
        extracted_modbus_databuff[L1_PF] = modbus_data_buffer[APM303_L1_PF];
 8088d66:	8a42      	ldrh	r2, [r0, #18]
 8088d68:	625a      	str	r2, [r3, #36]	; 0x24
        extracted_modbus_databuff[L2_PF] = modbus_data_buffer[APM303_L2_PF];
 8088d6a:	8a82      	ldrh	r2, [r0, #20]
 8088d6c:	629a      	str	r2, [r3, #40]	; 0x28
        extracted_modbus_databuff[L3_PF] = modbus_data_buffer[APM303_L3_PF];
 8088d6e:	8ac2      	ldrh	r2, [r0, #22]
 8088d70:	62da      	str	r2, [r3, #44]	; 0x2c
 8088d72:	e7e4      	b.n	8088d3e <_ZN11GXGenerator21extractDerInstMetricsEh+0x7a>
        return;
    }   
    
}
 8088d74:	4770      	bx	lr
 8088d76:	bf00      	nop
 8088d78:	20000de4 	.word	0x20000de4
 8088d7c:	200006d4 	.word	0x200006d4

08088d80 <_ZN11GXGenerator25extractGridBasInstMetricsEh>:

void GXGenerator::extractGridBasInstMetrics(uint8_t query_unit)
{
 8088d80:	b430      	push	{r4, r5}
    if(gen_controller_type == DSE_857)
 8088d82:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8088d86:	2b02      	cmp	r3, #2
 8088d88:	d112      	bne.n	8088db0 <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x30>
    {
        switch (query_unit)
 8088d8a:	2901      	cmp	r1, #1
 8088d8c:	d016      	beq.n	8088dbc <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x3c>
 8088d8e:	2902      	cmp	r1, #2
 8088d90:	d034      	beq.n	8088dfc <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x7c>
 8088d92:	b969      	cbnz	r1, 8088db0 <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x30>
        {
            case GEN_QUERY1:
            {
                extracted_modbus_databuff[GRID_FREQ] = modbus_data_buffer[DSE_GRID_FREQUENCY];
 8088d94:	4a1d      	ldr	r2, [pc, #116]	; (8088e0c <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x8c>)
 8088d96:	491e      	ldr	r1, [pc, #120]	; (8088e10 <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x90>)
 8088d98:	8810      	ldrh	r0, [r2, #0]
 8088d9a:	6048      	str	r0, [r1, #4]
                uint8_t dt_ref1 = DSE_GRID_L1_VOLT_H;
                for (uint8_t itr = GRID_L1_N_VOLT; itr <= GRID_L3_L1_VOLT; itr++)
                {
                    extracted_modbus_databuff[itr] = ((modbus_data_buffer[dt_ref1] << MOVE_16_STEP) | 
 8088d9c:	8854      	ldrh	r4, [r2, #2]
                                                       modbus_data_buffer[++dt_ref1]);
 8088d9e:	f832 0f04 	ldrh.w	r0, [r2, #4]!
                    extracted_modbus_databuff[itr] = ((modbus_data_buffer[dt_ref1] << MOVE_16_STEP) | 
 8088da2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8088da6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
                for (uint8_t itr = GRID_L1_N_VOLT; itr <= GRID_L3_L1_VOLT; itr++)
 8088daa:	3301      	adds	r3, #1
 8088dac:	2b08      	cmp	r3, #8
 8088dae:	d1f5      	bne.n	8088d9c <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x1c>
            }
        }
    }

    memset(modbus_data_buffer, 0, sizeof(modbus_data_buffer));
}
 8088db0:	bc30      	pop	{r4, r5}
    memset(modbus_data_buffer, 0, sizeof(modbus_data_buffer));
 8088db2:	223c      	movs	r2, #60	; 0x3c
 8088db4:	2100      	movs	r1, #0
 8088db6:	4815      	ldr	r0, [pc, #84]	; (8088e0c <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x8c>)
 8088db8:	f009 b884 	b.w	8091ec4 <memset>
                extracted_modbus_databuff[GRID_AMP_LAG_LEAD] = modbus_data_buffer[DSE_GRID_CURR_LL];
 8088dbc:	4a13      	ldr	r2, [pc, #76]	; (8088e0c <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x8c>)
 8088dbe:	4b14      	ldr	r3, [pc, #80]	; (8088e10 <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x90>)
 8088dc0:	8811      	ldrh	r1, [r2, #0]
 8088dc2:	2009      	movs	r0, #9
 8088dc4:	6219      	str	r1, [r3, #32]
                for(uint8_t itr = GRID_L1_AMP; itr <= GRID_EARTH_AMP; itr++)
 8088dc6:	4611      	mov	r1, r2
                    extracted_modbus_databuff[itr] = ((modbus_data_buffer[dt_ref2] << MOVE_16_STEP) | 
 8088dc8:	8855      	ldrh	r5, [r2, #2]
                                                       modbus_data_buffer[++dt_ref2]);
 8088dca:	f832 4f04 	ldrh.w	r4, [r2, #4]!
                    extracted_modbus_databuff[itr] = ((modbus_data_buffer[dt_ref2] << MOVE_16_STEP) | 
 8088dce:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8088dd2:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
                for(uint8_t itr = GRID_L1_AMP; itr <= GRID_EARTH_AMP; itr++)
 8088dd6:	3001      	adds	r0, #1
 8088dd8:	280d      	cmp	r0, #13
 8088dda:	d1f5      	bne.n	8088dc8 <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x48>
                    extracted_modbus_databuff[itr] = ((modbus_data_buffer[dt_ref2] << MOVE_16_STEP) | 
 8088ddc:	8a48      	ldrh	r0, [r1, #18]
                                                       modbus_data_buffer[++dt_ref2]);
 8088dde:	8a8a      	ldrh	r2, [r1, #20]
                    extracted_modbus_databuff[itr] = ((modbus_data_buffer[dt_ref2] << MOVE_16_STEP) | 
 8088de0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8088de4:	635a      	str	r2, [r3, #52]	; 0x34
 8088de6:	8ac8      	ldrh	r0, [r1, #22]
                                                       modbus_data_buffer[++dt_ref2]);
 8088de8:	8b0a      	ldrh	r2, [r1, #24]
                    extracted_modbus_databuff[itr] = ((modbus_data_buffer[dt_ref2] << MOVE_16_STEP) | 
 8088dea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8088dee:	639a      	str	r2, [r3, #56]	; 0x38
 8088df0:	8b48      	ldrh	r0, [r1, #26]
                                                       modbus_data_buffer[++dt_ref2]);
 8088df2:	8b8a      	ldrh	r2, [r1, #28]
                    extracted_modbus_databuff[itr] = ((modbus_data_buffer[dt_ref2] << MOVE_16_STEP) | 
 8088df4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8088df8:	63da      	str	r2, [r3, #60]	; 0x3c
                for(uint8_t itr = GRID_L1_WATT; itr <= GRID_L3_WATT; itr++)
 8088dfa:	e7d9      	b.n	8088db0 <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x30>
                extracted_modbus_databuff[GRID_ACCUM_KWH] = ((modbus_data_buffer[DSE_GRID_ACCUM_KWH_H] << MOVE_16_STEP) | 
 8088dfc:	4a03      	ldr	r2, [pc, #12]	; (8088e0c <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x8c>)
 8088dfe:	8811      	ldrh	r1, [r2, #0]
                                                              modbus_data_buffer[DSE_GRID_ACCUM_KWH_L]);
 8088e00:	8853      	ldrh	r3, [r2, #2]
                extracted_modbus_databuff[GRID_ACCUM_KWH] = ((modbus_data_buffer[DSE_GRID_ACCUM_KWH_H] << MOVE_16_STEP) | 
 8088e02:	4a03      	ldr	r2, [pc, #12]	; (8088e10 <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x90>)
 8088e04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8088e08:	6013      	str	r3, [r2, #0]
                break;
 8088e0a:	e7d1      	b.n	8088db0 <_ZN11GXGenerator25extractGridBasInstMetricsEh+0x30>
 8088e0c:	20000de4 	.word	0x20000de4
 8088e10:	200006d4 	.word	0x200006d4

08088e14 <_ZN11GXGenerator25extractGridDerInstMetricsEh>:

void GXGenerator::extractGridDerInstMetrics(uint8_t query_unit)
{
 8088e14:	b430      	push	{r4, r5}
    if(gen_controller_type == DSE_857)
 8088e16:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8088e1a:	2b02      	cmp	r3, #2
 8088e1c:	d102      	bne.n	8088e24 <_ZN11GXGenerator25extractGridDerInstMetricsEh+0x10>
    {
        switch (query_unit)
 8088e1e:	b139      	cbz	r1, 8088e30 <_ZN11GXGenerator25extractGridDerInstMetricsEh+0x1c>
 8088e20:	2901      	cmp	r1, #1
 8088e22:	d013      	beq.n	8088e4c <_ZN11GXGenerator25extractGridDerInstMetricsEh+0x38>
            }
        }
    }

    memset(modbus_data_buffer, 0, sizeof(modbus_data_buffer));
}
 8088e24:	bc30      	pop	{r4, r5}
    memset(modbus_data_buffer, 0, sizeof(modbus_data_buffer));
 8088e26:	223c      	movs	r2, #60	; 0x3c
 8088e28:	2100      	movs	r1, #0
 8088e2a:	4815      	ldr	r0, [pc, #84]	; (8088e80 <_ZN11GXGenerator25extractGridDerInstMetricsEh+0x6c>)
 8088e2c:	f009 b84a 	b.w	8091ec4 <memset>
 8088e30:	4b13      	ldr	r3, [pc, #76]	; (8088e80 <_ZN11GXGenerator25extractGridDerInstMetricsEh+0x6c>)
 8088e32:	4814      	ldr	r0, [pc, #80]	; (8088e84 <_ZN11GXGenerator25extractGridDerInstMetricsEh+0x70>)
                    extracted_modbus_databuff[itr] = ((modbus_data_buffer[dt_ref3] << MOVE_16_STEP) | 
 8088e34:	881c      	ldrh	r4, [r3, #0]
                                                       modbus_data_buffer[++dt_ref3]);
 8088e36:	885a      	ldrh	r2, [r3, #2]
 8088e38:	3101      	adds	r1, #1
                    extracted_modbus_databuff[itr] = ((modbus_data_buffer[dt_ref3] << MOVE_16_STEP) | 
 8088e3a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
                for(uint8_t itr = TOTAL_GRID_KW; itr <= GRID_TOTAL_VA; itr++)
 8088e3e:	2905      	cmp	r1, #5
                    extracted_modbus_databuff[itr] = ((modbus_data_buffer[dt_ref3] << MOVE_16_STEP) | 
 8088e40:	f840 2b04 	str.w	r2, [r0], #4
                for(uint8_t itr = TOTAL_GRID_KW; itr <= GRID_TOTAL_VA; itr++)
 8088e44:	f103 0304 	add.w	r3, r3, #4
 8088e48:	d1f4      	bne.n	8088e34 <_ZN11GXGenerator25extractGridDerInstMetricsEh+0x20>
 8088e4a:	e7eb      	b.n	8088e24 <_ZN11GXGenerator25extractGridDerInstMetricsEh+0x10>
 8088e4c:	490c      	ldr	r1, [pc, #48]	; (8088e80 <_ZN11GXGenerator25extractGridDerInstMetricsEh+0x6c>)
        switch (query_unit)
 8088e4e:	2005      	movs	r0, #5
 8088e50:	460a      	mov	r2, r1
                    extracted_modbus_databuff[itr] = ((modbus_data_buffer[dt_ref4] << MOVE_16_STEP) | 
 8088e52:	4b0c      	ldr	r3, [pc, #48]	; (8088e84 <_ZN11GXGenerator25extractGridDerInstMetricsEh+0x70>)
 8088e54:	880d      	ldrh	r5, [r1, #0]
                                                       modbus_data_buffer[++dt_ref4]);
 8088e56:	884c      	ldrh	r4, [r1, #2]
 8088e58:	3104      	adds	r1, #4
                    extracted_modbus_databuff[itr] = ((modbus_data_buffer[dt_ref4] << MOVE_16_STEP) | 
 8088e5a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8088e5e:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
                for(uint8_t itr = GRID_L1_VAR; itr <= GRID_TOTAL_VAR; itr++)
 8088e62:	3001      	adds	r0, #1
 8088e64:	2809      	cmp	r0, #9
 8088e66:	d1f5      	bne.n	8088e54 <_ZN11GXGenerator25extractGridDerInstMetricsEh+0x40>
                    extracted_modbus_databuff[itr] = modbus_data_buffer[dt_ref4++];
 8088e68:	8a11      	ldrh	r1, [r2, #16]
 8088e6a:	6259      	str	r1, [r3, #36]	; 0x24
 8088e6c:	8a51      	ldrh	r1, [r2, #18]
 8088e6e:	6299      	str	r1, [r3, #40]	; 0x28
 8088e70:	8a91      	ldrh	r1, [r2, #20]
 8088e72:	62d9      	str	r1, [r3, #44]	; 0x2c
 8088e74:	8ad1      	ldrh	r1, [r2, #22]
                extracted_modbus_databuff[PERCENT_OF_GRID_POWER] = modbus_data_buffer[DSE_GRID_PERCENT_FULL_POWER];
 8088e76:	8b12      	ldrh	r2, [r2, #24]
                    extracted_modbus_databuff[itr] = modbus_data_buffer[dt_ref4++];
 8088e78:	6319      	str	r1, [r3, #48]	; 0x30
                extracted_modbus_databuff[PERCENT_OF_GRID_POWER] = modbus_data_buffer[DSE_GRID_PERCENT_FULL_POWER];
 8088e7a:	635a      	str	r2, [r3, #52]	; 0x34
                break;
 8088e7c:	e7d2      	b.n	8088e24 <_ZN11GXGenerator25extractGridDerInstMetricsEh+0x10>
 8088e7e:	bf00      	nop
 8088e80:	20000de4 	.word	0x20000de4
 8088e84:	200006d4 	.word	0x200006d4

08088e88 <_ZN11GXGenerator18updateEngineStatusEh>:

void GXGenerator::updateEngineStatus(uint8_t read_error)
{
    gen_engine_state = modbus_data_buffer[ENGSTATE_BUFF_INDX] > 497 ? ENGINE_RUNNING : ENGINE_AT_REST;
 8088e88:	4b08      	ldr	r3, [pc, #32]	; (8088eac <_ZN11GXGenerator18updateEngineStatusEh+0x24>)
 8088e8a:	881b      	ldrh	r3, [r3, #0]
 8088e8c:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8088e90:	bf2c      	ite	cs
 8088e92:	2303      	movcs	r3, #3
 8088e94:	2300      	movcc	r3, #0

    if(read_error > 0) gen_engine_state = ENGINE_STATE_UNKNOWN;
 8088e96:	b931      	cbnz	r1, 8088ea6 <_ZN11GXGenerator18updateEngineStatusEh+0x1e>
 8088e98:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66

    memset(modbus_data_buffer, 0, sizeof(modbus_data_buffer));
 8088e9c:	223c      	movs	r2, #60	; 0x3c
 8088e9e:	2100      	movs	r1, #0
 8088ea0:	4802      	ldr	r0, [pc, #8]	; (8088eac <_ZN11GXGenerator18updateEngineStatusEh+0x24>)
 8088ea2:	f009 b80f 	b.w	8091ec4 <memset>
    if(read_error > 0) gen_engine_state = ENGINE_STATE_UNKNOWN;
 8088ea6:	2305      	movs	r3, #5
 8088ea8:	e7f6      	b.n	8088e98 <_ZN11GXGenerator18updateEngineStatusEh+0x10>
 8088eaa:	bf00      	nop
 8088eac:	20000de4 	.word	0x20000de4

08088eb0 <_ZN11GXGenerator16derInstAvailableEv>:
}

bool GXGenerator::derInstAvailable()
{
    if (gen_controller_type == DSE_857)
 8088eb0:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
 8088eb4:	2802      	cmp	r0, #2
 8088eb6:	d003      	beq.n	8088ec0 <_ZN11GXGenerator16derInstAvailableEv+0x10>
        return true;
    
    if (gen_controller_type == APM_303)
 8088eb8:	1f03      	subs	r3, r0, #4
 8088eba:	4258      	negs	r0, r3
 8088ebc:	4158      	adcs	r0, r3
 8088ebe:	4770      	bx	lr
        return true;
 8088ec0:	2001      	movs	r0, #1
        return true;

    return false;  
}
 8088ec2:	4770      	bx	lr

08088ec4 <_ZN11GXGenerator12getBaudIndexEv>:

uint8_t GXGenerator::getBaudIndex()
{
    return baudrate_index;
}
 8088ec4:	f890 0065 	ldrb.w	r0, [r0, #101]	; 0x65
 8088ec8:	4770      	bx	lr

08088eca <_ZN11GXGenerator15getEngineStatusEv>:

uint8_t GXGenerator::getEngineStatus()
{
    return gen_engine_state;
}
 8088eca:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
 8088ece:	4770      	bx	lr

08088ed0 <_ZN11GXGenerator13setGenToStartEv>:

int8_t GXGenerator::setGenToStart()
{
 8088ed0:	b510      	push	{r4, lr}
    // Return immediately if the engine is already RUNING or it's state could not be determined.
    if((gen_engine_state == ENGINE_RUNNING) || 
 8088ed2:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
{
 8088ed6:	4604      	mov	r4, r0
    if((gen_engine_state == ENGINE_RUNNING) || 
 8088ed8:	2b03      	cmp	r3, #3
 8088eda:	d001      	beq.n	8088ee0 <_ZN11GXGenerator13setGenToStartEv+0x10>
 8088edc:	2b05      	cmp	r3, #5
 8088ede:	d101      	bne.n	8088ee4 <_ZN11GXGenerator13setGenToStartEv+0x14>
       (gen_engine_state == ENGINE_STATE_UNKNOWN)) return gen_engine_state;
 8088ee0:	b258      	sxtb	r0, r3
        }
    }

    // Return the ID of the specific relay that was SWITCHED ON
    return (static_cast<int8_t>(assigned_gx_relay));
}
 8088ee2:	bd10      	pop	{r4, pc}
    switch (assigned_gx_relay)
 8088ee4:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
 8088ee8:	2a01      	cmp	r2, #1
 8088eea:	d005      	beq.n	8088ef8 <_ZN11GXGenerator13setGenToStartEv+0x28>
 8088eec:	2a02      	cmp	r2, #2
 8088eee:	d00a      	beq.n	8088f06 <_ZN11GXGenerator13setGenToStartEv+0x36>
 8088ef0:	b932      	cbnz	r2, 8088f00 <_ZN11GXGenerator13setGenToStartEv+0x30>
 8088ef2:	f06f 000a 	mvn.w	r0, #10
 8088ef6:	e7f4      	b.n	8088ee2 <_ZN11GXGenerator13setGenToStartEv+0x12>
            RLY1(HIGH);
 8088ef8:	2107      	movs	r1, #7
            RLY2(HIGH);
 8088efa:	4804      	ldr	r0, [pc, #16]	; (8088f0c <_ZN11GXGenerator13setGenToStartEv+0x3c>)
 8088efc:	f003 feee 	bl	808ccdc <_ZN7TCA953512digitalWriteEtb>
    return (static_cast<int8_t>(assigned_gx_relay));
 8088f00:	f994 0067 	ldrsb.w	r0, [r4, #103]	; 0x67
 8088f04:	e7ed      	b.n	8088ee2 <_ZN11GXGenerator13setGenToStartEv+0x12>
            RLY2(HIGH);
 8088f06:	2201      	movs	r2, #1
 8088f08:	2106      	movs	r1, #6
 8088f0a:	e7f6      	b.n	8088efa <_ZN11GXGenerator13setGenToStartEv+0x2a>
 8088f0c:	200012f6 	.word	0x200012f6

08088f10 <_ZN11GXGenerator12setGenToStopEv>:

int8_t GXGenerator::setGenToStop()
{
 8088f10:	b510      	push	{r4, lr}
 8088f12:	4604      	mov	r4, r0
    // Return immediately if the engine is already AT-REST or it's state could not be determined.
    if((gen_engine_state == ENGINE_AT_REST) || 
 8088f14:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
 8088f18:	b108      	cbz	r0, 8088f1e <_ZN11GXGenerator12setGenToStopEv+0xe>
 8088f1a:	2805      	cmp	r0, #5
 8088f1c:	d101      	bne.n	8088f22 <_ZN11GXGenerator12setGenToStopEv+0x12>
       (gen_engine_state == ENGINE_STATE_UNKNOWN)) return gen_engine_state;
 8088f1e:	b240      	sxtb	r0, r0
        }
    }

    // Return the ID of the specific relay that was SWITCHED OFF
    return (static_cast<int8_t>(assigned_gx_relay));
}
 8088f20:	bd10      	pop	{r4, pc}
    switch (assigned_gx_relay)
 8088f22:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8088f26:	2b01      	cmp	r3, #1
 8088f28:	d005      	beq.n	8088f36 <_ZN11GXGenerator12setGenToStopEv+0x26>
 8088f2a:	2b02      	cmp	r3, #2
 8088f2c:	d00b      	beq.n	8088f46 <_ZN11GXGenerator12setGenToStopEv+0x36>
 8088f2e:	b93b      	cbnz	r3, 8088f40 <_ZN11GXGenerator12setGenToStopEv+0x30>
 8088f30:	f06f 000a 	mvn.w	r0, #10
 8088f34:	e7f4      	b.n	8088f20 <_ZN11GXGenerator12setGenToStopEv+0x10>
            RLY1(LOW);
 8088f36:	2200      	movs	r2, #0
 8088f38:	2107      	movs	r1, #7
            RLY2(LOW);
 8088f3a:	4804      	ldr	r0, [pc, #16]	; (8088f4c <_ZN11GXGenerator12setGenToStopEv+0x3c>)
 8088f3c:	f003 fece 	bl	808ccdc <_ZN7TCA953512digitalWriteEtb>
    return (static_cast<int8_t>(assigned_gx_relay));
 8088f40:	f994 0067 	ldrsb.w	r0, [r4, #103]	; 0x67
 8088f44:	e7ec      	b.n	8088f20 <_ZN11GXGenerator12setGenToStopEv+0x10>
            RLY2(LOW);
 8088f46:	2200      	movs	r2, #0
 8088f48:	2106      	movs	r1, #6
 8088f4a:	e7f6      	b.n	8088f3a <_ZN11GXGenerator12setGenToStopEv+0x2a>
 8088f4c:	200012f6 	.word	0x200012f6

08088f50 <_ZN11GXGeneratorD1Ev>:

GXGenerator::~GXGenerator(){}
 8088f50:	b510      	push	{r4, lr}
 8088f52:	4604      	mov	r4, r0
 8088f54:	30ca      	adds	r0, #202	; 0xca
 8088f56:	f7fc f8ca 	bl	80850ee <_ZN21Apm303GensetQueryBankD1Ev>
 8088f5a:	f104 00b6 	add.w	r0, r4, #182	; 0xb6
 8088f5e:	f7fc fa01 	bl	8085364 <_ZN20Dcp10GensetQueryBankD1Ev>
 8088f62:	f104 0082 	add.w	r0, r4, #130	; 0x82
 8088f66:	f7fc fb0b 	bl	8085580 <_ZN18DseGensetQueryBankD1Ev>
 8088f6a:	f104 006e 	add.w	r0, r4, #110	; 0x6e
 8088f6e:	f000 f9d3 	bl	8089318 <_ZN22Pcc1302GensetQueryBankD1Ev>
 8088f72:	4620      	mov	r0, r4
 8088f74:	bd10      	pop	{r4, pc}

08088f76 <_ZN3LEDC1Eh>:
#include "LED.h"

// Extern port expander
extern TCA9535 portExpander;

LED::LED(uint8_t led_pin_n)
 8088f76:	2200      	movs	r2, #0
{
    led_pin = led_pin_n;
 8088f78:	7001      	strb	r1, [r0, #0]
LED::LED(uint8_t led_pin_n)
 8088f7a:	6042      	str	r2, [r0, #4]
    led_mode = LED_OFF;
 8088f7c:	7202      	strb	r2, [r0, #8]
    led_state = LOW;
 8088f7e:	7042      	strb	r2, [r0, #1]
    counter = 0;
 8088f80:	7082      	strb	r2, [r0, #2]
}
 8088f82:	4770      	bx	lr

08088f84 <_Z9updateLEDhh>:
      counter++;
  }  
}

void updateLED(uint8_t led, uint8_t state){
    switch (led)
 8088f84:	2802      	cmp	r0, #2
void updateLED(uint8_t led, uint8_t state){
 8088f86:	460a      	mov	r2, r1
    switch (led)
 8088f88:	d009      	beq.n	8088f9e <_Z9updateLEDhh+0x1a>
 8088f8a:	2803      	cmp	r0, #3
 8088f8c:	d00b      	beq.n	8088fa6 <_Z9updateLEDhh+0x22>
 8088f8e:	2801      	cmp	r0, #1
 8088f90:	d10d      	bne.n	8088fae <_Z9updateLEDhh+0x2a>
    {
    case POWER_LED:
        LED1(state);
 8088f92:	b101      	cbz	r1, 8088f96 <_Z9updateLEDhh+0x12>
 8088f94:	4602      	mov	r2, r0
 8088f96:	210b      	movs	r1, #11
        break;
    case CLOUD_LED:
        LED2(state);
        break;
    case COMM_LED:
        LED3(state);
 8088f98:	4805      	ldr	r0, [pc, #20]	; (8088fb0 <_Z9updateLEDhh+0x2c>)
 8088f9a:	f003 be9f 	b.w	808ccdc <_ZN7TCA953512digitalWriteEtb>
        LED2(state);
 8088f9e:	b101      	cbz	r1, 8088fa2 <_Z9updateLEDhh+0x1e>
 8088fa0:	2201      	movs	r2, #1
 8088fa2:	210a      	movs	r1, #10
 8088fa4:	e7f8      	b.n	8088f98 <_Z9updateLEDhh+0x14>
        LED3(state);
 8088fa6:	b101      	cbz	r1, 8088faa <_Z9updateLEDhh+0x26>
 8088fa8:	2201      	movs	r2, #1
 8088faa:	2109      	movs	r1, #9
 8088fac:	e7f4      	b.n	8088f98 <_Z9updateLEDhh+0x14>
        break;
    default:
        break;
    }
 8088fae:	4770      	bx	lr
 8088fb0:	200012f6 	.word	0x200012f6

08088fb4 <_ZN3LED8ledBlinkEi>:
{
 8088fb4:	b538      	push	{r3, r4, r5, lr}
 8088fb6:	4604      	mov	r4, r0
 8088fb8:	460d      	mov	r5, r1
 8088fba:	f003 ffbf 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
  if (currentMillis - previousMillis >= blink_interval)
 8088fbe:	6863      	ldr	r3, [r4, #4]
 8088fc0:	1ac3      	subs	r3, r0, r3
 8088fc2:	42ab      	cmp	r3, r5
 8088fc4:	d310      	bcc.n	8088fe8 <_ZN3LED8ledBlinkEi+0x34>
    if (led_state == LOW) 
 8088fc6:	7863      	ldrb	r3, [r4, #1]
    previousMillis = currentMillis;
 8088fc8:	6060      	str	r0, [r4, #4]
    if (led_state == LOW) 
 8088fca:	b973      	cbnz	r3, 8088fea <_ZN3LED8ledBlinkEi+0x36>
      led_state = HIGH;
 8088fcc:	2301      	movs	r3, #1
      led_state = LOW;
 8088fce:	7063      	strb	r3, [r4, #1]
    updateLED(led_pin, led_state);
 8088fd0:	7861      	ldrb	r1, [r4, #1]
 8088fd2:	7820      	ldrb	r0, [r4, #0]
 8088fd4:	f7ff ffd6 	bl	8088f84 <_Z9updateLEDhh>
    if(counter > MAX_COUNTER_VAL && blink_interval == LED_ERROR_INTERVAL){
 8088fd8:	78a3      	ldrb	r3, [r4, #2]
 8088fda:	2b07      	cmp	r3, #7
 8088fdc:	d90e      	bls.n	8088ffc <_ZN3LED8ledBlinkEi+0x48>
 8088fde:	2dfa      	cmp	r5, #250	; 0xfa
 8088fe0:	d10c      	bne.n	8088ffc <_ZN3LED8ledBlinkEi+0x48>
      counter = 0;
 8088fe2:	2300      	movs	r3, #0
 8088fe4:	70a3      	strb	r3, [r4, #2]
      led_mode = LED_OFF;
 8088fe6:	7223      	strb	r3, [r4, #8]
}
 8088fe8:	bd38      	pop	{r3, r4, r5, pc}
    else if(led_state == HIGH)
 8088fea:	2b01      	cmp	r3, #1
 8088fec:	d101      	bne.n	8088ff2 <_ZN3LED8ledBlinkEi+0x3e>
      led_state = LOW;
 8088fee:	2300      	movs	r3, #0
 8088ff0:	e7ed      	b.n	8088fce <_ZN3LED8ledBlinkEi+0x1a>
      Log.info("Led state is invalid");
 8088ff2:	4904      	ldr	r1, [pc, #16]	; (8089004 <_ZN3LED8ledBlinkEi+0x50>)
 8088ff4:	4804      	ldr	r0, [pc, #16]	; (8089008 <_ZN3LED8ledBlinkEi+0x54>)
 8088ff6:	f7fc fccd 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
 8088ffa:	e7e9      	b.n	8088fd0 <_ZN3LED8ledBlinkEi+0x1c>
      counter++;
 8088ffc:	3301      	adds	r3, #1
 8088ffe:	70a3      	strb	r3, [r4, #2]
}
 8089000:	e7f2      	b.n	8088fe8 <_ZN3LED8ledBlinkEi+0x34>
 8089002:	bf00      	nop
 8089004:	0809416e 	.word	0x0809416e
 8089008:	200015a4 	.word	0x200015a4

0808900c <_ZN3LED10ledRoutineEv>:
{
 808900c:	b510      	push	{r4, lr}
 808900e:	7a03      	ldrb	r3, [r0, #8]
 8089010:	4604      	mov	r4, r0
 8089012:	2b03      	cmp	r3, #3
 8089014:	d809      	bhi.n	808902a <_ZN3LED10ledRoutineEv+0x1e>
 8089016:	e8df f003 	tbb	[pc, r3]
 808901a:	0209      	.short	0x0209
 808901c:	150f      	.short	0x150f
    updateLED(led_pin, 1);
 808901e:	2101      	movs	r1, #1
 8089020:	7800      	ldrb	r0, [r0, #0]
 8089022:	f7ff ffaf 	bl	8088f84 <_Z9updateLEDhh>
    led_state = HIGH;
 8089026:	2301      	movs	r3, #1
    led_state = LOW;
 8089028:	7063      	strb	r3, [r4, #1]
}
 808902a:	bd10      	pop	{r4, pc}
    updateLED(led_pin, 0);
 808902c:	2100      	movs	r1, #0
 808902e:	7800      	ldrb	r0, [r0, #0]
 8089030:	f7ff ffa8 	bl	8088f84 <_Z9updateLEDhh>
    led_state = LOW;
 8089034:	2300      	movs	r3, #0
 8089036:	e7f7      	b.n	8089028 <_ZN3LED10ledRoutineEv+0x1c>
    ledBlink(LED_INTERVAL);
 8089038:	2164      	movs	r1, #100	; 0x64
    ledBlink(LED_ERROR_INTERVAL);
 808903a:	4620      	mov	r0, r4
}
 808903c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ledBlink(LED_ERROR_INTERVAL);
 8089040:	f7ff bfb8 	b.w	8088fb4 <_ZN3LED8ledBlinkEi>
 8089044:	21fa      	movs	r1, #250	; 0xfa
 8089046:	e7f8      	b.n	808903a <_ZN3LED10ledRoutineEv+0x2e>

08089048 <_ZN5spark10LogHandler5writeEPKcj>:
}
 8089048:	4770      	bx	lr

0808904a <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
 808904a:	6a00      	ldr	r0, [r0, #32]
 808904c:	6803      	ldr	r3, [r0, #0]
 808904e:	68db      	ldr	r3, [r3, #12]
 8089050:	4718      	bx	r3
	...

08089054 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 8089054:	b510      	push	{r4, lr}
 8089056:	4604      	mov	r4, r0
 8089058:	4b09      	ldr	r3, [pc, #36]	; (8089080 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 808905a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 808905c:	f005 fc10 	bl	808e880 <_ZN5spark10LogManager8instanceEv>
 8089060:	4621      	mov	r1, r4
 8089062:	f005 fe21 	bl	808eca8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 8089066:	f007 f9c7 	bl	80903f8 <_Z16_fetch_usbserialv>
 808906a:	f007 f9ab 	bl	80903c4 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 808906e:	4620      	mov	r0, r4
 8089070:	4b04      	ldr	r3, [pc, #16]	; (8089084 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 8089072:	f840 3b04 	str.w	r3, [r0], #4
 8089076:	f005 fd05 	bl	808ea84 <_ZN5spark6detail9LogFilterD1Ev>
    }
 808907a:	4620      	mov	r0, r4
 808907c:	bd10      	pop	{r4, pc}
 808907e:	bf00      	nop
 8089080:	080941c4 	.word	0x080941c4
 8089084:	080941ac 	.word	0x080941ac

08089088 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 8089088:	b510      	push	{r4, lr}
 808908a:	4604      	mov	r4, r0
    }
 808908c:	f7ff ffe2 	bl	8089054 <_ZN5spark16SerialLogHandlerD1Ev>
 8089090:	4620      	mov	r0, r4
 8089092:	2124      	movs	r1, #36	; 0x24
 8089094:	f007 fca7 	bl	80909e6 <_ZdlPvj>
 8089098:	4620      	mov	r0, r4
 808909a:	bd10      	pop	{r4, pc}

0808909c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 808909c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 808909e:	2614      	movs	r6, #20
 80890a0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 80890a4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80890a6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80890aa:	42ae      	cmp	r6, r5
 80890ac:	d004      	beq.n	80890b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 80890ae:	4628      	mov	r0, r5
 80890b0:	f006 fda8 	bl	808fc04 <_ZN6StringD1Ev>
 80890b4:	3514      	adds	r5, #20
 80890b6:	e7f8      	b.n	80890aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 80890b8:	6820      	ldr	r0, [r4, #0]
 80890ba:	f004 fa35 	bl	808d528 <free>
    AllocatorT::free(data_);
}
 80890be:	4620      	mov	r0, r4
 80890c0:	bd70      	pop	{r4, r5, r6, pc}

080890c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 80890c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        if (n > 0) {
 80890c6:	f1b1 0800 	subs.w	r8, r1, #0
    bool realloc(int n) {
 80890ca:	4607      	mov	r7, r0
        if (n > 0) {
 80890cc:	dd35      	ble.n	808913a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x78>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 80890ce:	f04f 0914 	mov.w	r9, #20
    return ::malloc(size);
 80890d2:	fb09 f008 	mul.w	r0, r9, r8
 80890d6:	f004 fa1f 	bl	808d518 <malloc>
            if (!d) {
 80890da:	4605      	mov	r5, r0
 80890dc:	b3a8      	cbz	r0, 808914a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x88>
            move(d, data_, data_ + size_);
 80890de:	e9d7 4600 	ldrd	r4, r6, [r7]
        if (dest > p && dest < end) {
 80890e2:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
 80890e4:	fb09 4606 	mla	r6, r9, r6, r4
        if (dest > p && dest < end) {
 80890e8:	d215      	bcs.n	8089116 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x54>
 80890ea:	4286      	cmp	r6, r0
 80890ec:	d914      	bls.n	8089118 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x56>
            --end;
 80890ee:	3e14      	subs	r6, #20
            dest += end - p - 1;
 80890f0:	f1a4 0914 	sub.w	r9, r4, #20
 80890f4:	1b34      	subs	r4, r6, r4
 80890f6:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 80890f8:	45b1      	cmp	r9, r6
 80890fa:	d01f      	beq.n	808913c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x7a>
                new(dest) T(std::move(*end));
 80890fc:	b12c      	cbz	r4, 808910a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x48>
 80890fe:	4631      	mov	r1, r6
 8089100:	4620      	mov	r0, r4
 8089102:	f006 fdf9 	bl	808fcf8 <_ZN6StringC1EOS_>
 8089106:	7c33      	ldrb	r3, [r6, #16]
 8089108:	7423      	strb	r3, [r4, #16]
 808910a:	4630      	mov	r0, r6
 808910c:	f006 fd7a 	bl	808fc04 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 8089110:	3e14      	subs	r6, #20
 8089112:	3c14      	subs	r4, #20
 8089114:	e7f0      	b.n	80890f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x36>
        } else if (dest != p) {
 8089116:	d011      	beq.n	808913c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x7a>
 8089118:	46a9      	mov	r9, r5
            for (; p != end; ++p, ++dest) {
 808911a:	42a6      	cmp	r6, r4
 808911c:	d00e      	beq.n	808913c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x7a>
 808911e:	4621      	mov	r1, r4
 8089120:	4648      	mov	r0, r9
 8089122:	f006 fde9 	bl	808fcf8 <_ZN6StringC1EOS_>
 8089126:	7c23      	ldrb	r3, [r4, #16]
 8089128:	4620      	mov	r0, r4
 808912a:	f889 3010 	strb.w	r3, [r9, #16]
 808912e:	f006 fd69 	bl	808fc04 <_ZN6StringD1Ev>
 8089132:	3414      	adds	r4, #20
 8089134:	f109 0914 	add.w	r9, r9, #20
 8089138:	e7ef      	b.n	808911a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x58>
        T* d = nullptr;
 808913a:	2500      	movs	r5, #0
    ::free(ptr);
 808913c:	6838      	ldr	r0, [r7, #0]
 808913e:	f004 f9f3 	bl	808d528 <free>
        return true;
 8089142:	2001      	movs	r0, #1
        data_ = d;
 8089144:	603d      	str	r5, [r7, #0]
        capacity_ = n;
 8089146:	f8c7 8008 	str.w	r8, [r7, #8]
    }
 808914a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808914e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 808914e:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 8089150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 8089154:	e9c0 3300 	strd	r3, r3, [r0]
 8089158:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 808915a:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 808915c:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 808915e:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 8089160:	4299      	cmp	r1, r3
 8089162:	dd17      	ble.n	8089194 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x46>
 8089164:	f7ff ffad 	bl	80890c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 8089168:	b1a0      	cbz	r0, 8089194 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x46>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 808916a:	e9d5 6300 	ldrd	r6, r3, [r5]
 808916e:	f04f 0814 	mov.w	r8, #20
 8089172:	fb08 6803 	mla	r8, r8, r3, r6
 8089176:	6827      	ldr	r7, [r4, #0]
        for (; it != end; ++it, ++dest) {
 8089178:	45b0      	cmp	r8, r6
 808917a:	d009      	beq.n	8089190 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x42>
            new(dest) T(*it);
 808917c:	b12f      	cbz	r7, 808918a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x3c>
 808917e:	4631      	mov	r1, r6
 8089180:	4638      	mov	r0, r7
 8089182:	f006 fdd3 	bl	808fd2c <_ZN6StringC1ERKS_>
 8089186:	7c33      	ldrb	r3, [r6, #16]
 8089188:	743b      	strb	r3, [r7, #16]
        for (; it != end; ++it, ++dest) {
 808918a:	3614      	adds	r6, #20
 808918c:	3714      	adds	r7, #20
 808918e:	e7f3      	b.n	8089178 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x2a>
        size_ = vector.size_;
 8089190:	686b      	ldr	r3, [r5, #4]
 8089192:	6063      	str	r3, [r4, #4]
}
 8089194:	4620      	mov	r0, r4
 8089196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0808919c <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL>:
SerialLogHandler logHandler(LOG_LEVEL_INFO, { // Logging level for non-application messages
    { "app", DEFAULT_LOG_LEVEL }, // Default logging level for all application messages
    { SHYFT_STATE_LOGGER_NAME, LOG_LEVEL_INFO  }, // Logging level for SHYFTStateSync
    { SHYFT_SPIFFS_LOGGER_NAME, LOG_LEVEL_INFO}, // Logging level for GX SPIFFS operations
    { "app.spiffs", LOG_LEVEL_WARN } // To disable spiffs internal info and trace messages, set to WARN
});
 808919c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808919e:	4b3d      	ldr	r3, [pc, #244]	; (8089294 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0xf8>)
 80891a0:	b0a1      	sub	sp, #132	; 0x84
 80891a2:	781c      	ldrb	r4, [r3, #0]
        level_(level) {
 80891a4:	ae0c      	add	r6, sp, #48	; 0x30
 80891a6:	493c      	ldr	r1, [pc, #240]	; (8089298 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0xfc>)
 80891a8:	4630      	mov	r0, r6
 80891aa:	f006 fd75 	bl	808fc98 <_ZN6StringC1EPKc>
 80891ae:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
 80891b2:	241e      	movs	r4, #30
 80891b4:	4939      	ldr	r1, [pc, #228]	; (808929c <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x100>)
 80891b6:	a811      	add	r0, sp, #68	; 0x44
 80891b8:	f006 fd6e 	bl	808fc98 <_ZN6StringC1EPKc>
 80891bc:	4938      	ldr	r1, [pc, #224]	; (80892a0 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x104>)
 80891be:	a816      	add	r0, sp, #88	; 0x58
 80891c0:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
 80891c4:	f006 fd68 	bl	808fc98 <_ZN6StringC1EPKc>
 80891c8:	4936      	ldr	r1, [pc, #216]	; (80892a4 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x108>)
 80891ca:	a81b      	add	r0, sp, #108	; 0x6c
 80891cc:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
 80891d0:	f006 fd62 	bl	808fc98 <_ZN6StringC1EPKc>
 80891d4:	2328      	movs	r3, #40	; 0x28
 80891d6:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
        capacity_(0) {
 80891da:	2300      	movs	r3, #0
    if (n > 0 && realloc(n)) {
 80891dc:	2104      	movs	r1, #4
 80891de:	4668      	mov	r0, sp
        capacity_(0) {
 80891e0:	e9cd 3300 	strd	r3, r3, [sp]
 80891e4:	9302      	str	r3, [sp, #8]
    if (n > 0 && realloc(n)) {
 80891e6:	f7ff ff6c 	bl	80890c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80891ea:	b188      	cbz	r0, 8089210 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x74>
        copy(data_, values.begin(), values.end());
 80891ec:	4635      	mov	r5, r6
 80891ee:	9c00      	ldr	r4, [sp, #0]
        for (; p != end; ++p, ++dest) {
 80891f0:	f104 0750 	add.w	r7, r4, #80	; 0x50
            new(dest) T(*p);
 80891f4:	b12c      	cbz	r4, 8089202 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x66>
class LogCategoryFilter {
 80891f6:	4629      	mov	r1, r5
 80891f8:	4620      	mov	r0, r4
 80891fa:	f006 fd97 	bl	808fd2c <_ZN6StringC1ERKS_>
 80891fe:	7c2b      	ldrb	r3, [r5, #16]
 8089200:	7423      	strb	r3, [r4, #16]
        for (; p != end; ++p, ++dest) {
 8089202:	3414      	adds	r4, #20
 8089204:	42bc      	cmp	r4, r7
 8089206:	f105 0514 	add.w	r5, r5, #20
 808920a:	d1f3      	bne.n	80891f4 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x58>
        size_ = n;
 808920c:	2304      	movs	r3, #4
 808920e:	9301      	str	r3, [sp, #4]
            StreamLogHandler(Serial, level, filters) {
 8089210:	f007 f8f2 	bl	80903f8 <_Z16_fetch_usbserialv>
 8089214:	4605      	mov	r5, r0
 8089216:	4669      	mov	r1, sp
 8089218:	a803      	add	r0, sp, #12
 808921a:	f7ff ff98 	bl	808914e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 808921e:	a903      	add	r1, sp, #12
 8089220:	a806      	add	r0, sp, #24
        filter_(level, filters) {
 8089222:	4c21      	ldr	r4, [pc, #132]	; (80892a8 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x10c>)
        stream_(&stream) {
 8089224:	f7ff ff93 	bl	808914e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 8089228:	4b20      	ldr	r3, [pc, #128]	; (80892ac <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x110>)
 808922a:	a906      	add	r1, sp, #24
 808922c:	6023      	str	r3, [r4, #0]
 808922e:	a809      	add	r0, sp, #36	; 0x24
 8089230:	f7ff ff8d 	bl	808914e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 8089234:	aa09      	add	r2, sp, #36	; 0x24
 8089236:	211e      	movs	r1, #30
 8089238:	1d20      	adds	r0, r4, #4
 808923a:	f005 fe87 	bl	808ef4c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 808923e:	a809      	add	r0, sp, #36	; 0x24
 8089240:	f7ff ff2c 	bl	808909c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 8089244:	a806      	add	r0, sp, #24
 8089246:	f7ff ff29 	bl	808909c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 808924a:	4b19      	ldr	r3, [pc, #100]	; (80892b0 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x114>)
 808924c:	6225      	str	r5, [r4, #32]
 808924e:	6023      	str	r3, [r4, #0]
 8089250:	a803      	add	r0, sp, #12
 8089252:	f7ff ff23 	bl	808909c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8089256:	4b17      	ldr	r3, [pc, #92]	; (80892b4 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x118>)
 8089258:	6023      	str	r3, [r4, #0]
        Serial.begin();
 808925a:	f007 f8cd 	bl	80903f8 <_Z16_fetch_usbserialv>
 808925e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8089262:	f007 f8ab 	bl	80903bc <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 8089266:	f005 fb0b 	bl	808e880 <_ZN5spark10LogManager8instanceEv>
 808926a:	4621      	mov	r1, r4
 808926c:	f005 fe01 	bl	808ee72 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
 8089270:	4668      	mov	r0, sp
 8089272:	f7ff ff13 	bl	808909c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8089276:	ac20      	add	r4, sp, #128	; 0x80
 8089278:	3c14      	subs	r4, #20
class LogCategoryFilter {
 808927a:	4620      	mov	r0, r4
 808927c:	f006 fcc2 	bl	808fc04 <_ZN6StringD1Ev>
 8089280:	42b4      	cmp	r4, r6
 8089282:	d1f9      	bne.n	8089278 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0xdc>
SerialLogHandler logHandler(LOG_LEVEL_INFO, { // Logging level for non-application messages
 8089284:	4a0c      	ldr	r2, [pc, #48]	; (80892b8 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x11c>)
 8089286:	490d      	ldr	r1, [pc, #52]	; (80892bc <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x120>)
 8089288:	4807      	ldr	r0, [pc, #28]	; (80892a8 <_GLOBAL__sub_I_DEFAULT_LOG_LEVEL+0x10c>)
 808928a:	f007 fba7 	bl	80909dc <__aeabi_atexit>
});
 808928e:	b021      	add	sp, #132	; 0x84
 8089290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089292:	bf00      	nop
 8089294:	20000020 	.word	0x20000020
 8089298:	08094183 	.word	0x08094183
 808929c:	08094187 	.word	0x08094187
 80892a0:	080940e8 	.word	0x080940e8
 80892a4:	08094197 	.word	0x08094197
 80892a8:	20000e20 	.word	0x20000e20
 80892ac:	080941ac 	.word	0x080941ac
 80892b0:	080950d0 	.word	0x080950d0
 80892b4:	080941c4 	.word	0x080941c4
 80892b8:	200005b0 	.word	0x200005b0
 80892bc:	08089055 	.word	0x08089055

080892c0 <_ZN22Pcc1302GensetQueryBankC1Ev>:

Pcc1302GensetQueryBank::Pcc1302GensetQueryBank()
{
    //******** DSE MAIN_DATA QUERY GROUP ********//

    pcc1302MainDataKey[GEN_QUERY1].start_addr = PCC1302_START_ADDR1;
 80892c0:	2209      	movs	r2, #9
 80892c2:	8002      	strh	r2, [r0, #0]
    pcc1302MainDataKey[GEN_QUERY1].num_of_regs = PCC1302_NUM_OF_REGS1;
 80892c4:	2204      	movs	r2, #4
 80892c6:	8042      	strh	r2, [r0, #2]

    pcc1302MainDataKey[GEN_QUERY2].start_addr = PCC1302_START_ADDR2;
 80892c8:	2244      	movs	r2, #68	; 0x44
 80892ca:	8082      	strh	r2, [r0, #4]
    pcc1302MainDataKey[GEN_QUERY2].num_of_regs = PCC1302_NUM_OF_REGS2;
 80892cc:	2203      	movs	r2, #3
 80892ce:	80c2      	strh	r2, [r0, #6]

    //******** DSE BASIC_INSTRUMENTATION_DATA QUERY GROUP ********//

    pcc1302BasInstDataKey[GEN_QUERY1].start_addr = PCC1302_START_ADDR3;
 80892d0:	2211      	movs	r2, #17
 80892d2:	8102      	strh	r2, [r0, #8]
    pcc1302BasInstDataKey[GEN_QUERY1].num_of_regs = PCC1302_NUM_OF_REGS3;
 80892d4:	220b      	movs	r2, #11
 80892d6:	8142      	strh	r2, [r0, #10]

    pcc1302BasInstDataKey[GEN_QUERY2].start_addr = PCC1302_START_ADDR4;
 80892d8:	222b      	movs	r2, #43	; 0x2b
 80892da:	8182      	strh	r2, [r0, #12]
    pcc1302BasInstDataKey[GEN_QUERY2].num_of_regs = PCC1302_NUM_OF_REGS4;
 80892dc:	2201      	movs	r2, #1
 80892de:	81c2      	strh	r2, [r0, #14]

    pcc1302BasInstDataKey[GEN_QUERY3].start_addr = PCC1302_START_ADDR5;
 80892e0:	223c      	movs	r2, #60	; 0x3c
 80892e2:	8202      	strh	r2, [r0, #16]
    pcc1302BasInstDataKey[GEN_QUERY3].num_of_regs = PCC1302_NUM_OF_REGS5;
 80892e4:	2208      	movs	r2, #8
 80892e6:	8242      	strh	r2, [r0, #18]
}
 80892e8:	4770      	bx	lr

080892ea <_ZN22Pcc1302GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey>:

void Pcc1302GensetQueryBank::getGenQueryKey(GeneratorDataSet gen_data_set, uint8_t gen_query_unit, 
                            GeneratorQueryKey *pcc1302Key)
{
  switch (gen_data_set)
 80892ea:	2901      	cmp	r1, #1
 80892ec:	d00a      	beq.n	8089304 <_ZN22Pcc1302GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x1a>
 80892ee:	2903      	cmp	r1, #3
 80892f0:	d00e      	beq.n	8089310 <_ZN22Pcc1302GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x26>
 80892f2:	b931      	cbnz	r1, 8089302 <_ZN22Pcc1302GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x18>
  {
    case GEN_MAIN:
    {
      pcc1302Key->start_addr = pcc1302MainDataKey[gen_query_unit].start_addr;
 80892f4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80892f8:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
 80892fc:	801a      	strh	r2, [r3, #0]
      pcc1302Key->num_of_regs = pcc1302MainDataKey[gen_query_unit].num_of_regs;
 80892fe:	884a      	ldrh	r2, [r1, #2]
    }

    case GEN_ENG_STATUS:
    {
      pcc1302Key->start_addr = PCC1302_ENGINE_STATE_ADDR;
      pcc1302Key->num_of_regs = NUM_OF_ENGSTATE_REGS;
 8089300:	805a      	strh	r2, [r3, #2]

      break;
    }
  }
}
 8089302:	4770      	bx	lr
      pcc1302Key->start_addr = pcc1302BasInstDataKey[gen_query_unit].start_addr;
 8089304:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8089308:	8902      	ldrh	r2, [r0, #8]
 808930a:	801a      	strh	r2, [r3, #0]
      pcc1302Key->num_of_regs = pcc1302BasInstDataKey[gen_query_unit].num_of_regs;
 808930c:	8942      	ldrh	r2, [r0, #10]
 808930e:	e7f7      	b.n	8089300 <_ZN22Pcc1302GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x16>
      pcc1302Key->start_addr = PCC1302_ENGINE_STATE_ADDR;
 8089310:	222b      	movs	r2, #43	; 0x2b
 8089312:	801a      	strh	r2, [r3, #0]
      pcc1302Key->num_of_regs = NUM_OF_ENGSTATE_REGS;
 8089314:	2201      	movs	r2, #1
 8089316:	e7f3      	b.n	8089300 <_ZN22Pcc1302GensetQueryBank14getGenQueryKeyE16GeneratorDataSethP17GeneratorQueryKey+0x16>

08089318 <_ZN22Pcc1302GensetQueryBankD1Ev>:

Pcc1302GensetQueryBank::~Pcc1302GensetQueryBank(){}
 8089318:	4770      	bx	lr
 808931a:	0000      	movs	r0, r0
 808931c:	0000      	movs	r0, r0
	...

08089320 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt>:

void formatGenDataCummins1302(GeneratorDataSet data_group, uint32_t *modbus_buffer, uint16_t *alarm_buffer)
{
 8089320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8089324:	460d      	mov	r5, r1
 8089326:	4616      	mov	r6, r2

  switch (data_group)
 8089328:	b118      	cbz	r0, 8089332 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0x12>
 808932a:	2801      	cmp	r0, #1
 808932c:	d033      	beq.n	8089396 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0x76>

      break;
    }
  }

}
 808932e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      main_gen_data[data_idx] = modbus_buffer[data_idx] / 3600; // Run hours
 8089332:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8089336:	6808      	ldr	r0, [r1, #0]
 8089338:	4c3b      	ldr	r4, [pc, #236]	; (8089428 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0x108>)
 808933a:	fbb0 f0f3 	udiv	r0, r0, r3
 808933e:	f008 f97f 	bl	8091640 <__aeabi_ui2f>
 8089342:	6020      	str	r0, [r4, #0]
        main_gen_data[data_idx] = modbus_buffer[data_idx];
 8089344:	6868      	ldr	r0, [r5, #4]
 8089346:	f008 f97b 	bl	8091640 <__aeabi_ui2f>
 808934a:	6060      	str	r0, [r4, #4]
 808934c:	68a8      	ldr	r0, [r5, #8]
 808934e:	f008 f977 	bl	8091640 <__aeabi_ui2f>
 8089352:	60a0      	str	r0, [r4, #8]
 8089354:	68e8      	ldr	r0, [r5, #12]
 8089356:	f008 f973 	bl	8091640 <__aeabi_ui2f>
 808935a:	60e0      	str	r0, [r4, #12]
      for (int alarm_code_idx = ALARM_REG2; alarm_code_idx <= TOTAL_SUPPORTED_ALARMS; alarm_code_idx++)
 808935c:	2001      	movs	r0, #1
        if (alarm_buffer[buffer_idx] == pcc1302_alarm_code[alarm_code_idx])
 808935e:	8833      	ldrh	r3, [r6, #0]
 8089360:	4a32      	ldr	r2, [pc, #200]	; (808942c <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0x10c>)
 8089362:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
 8089366:	4299      	cmp	r1, r3
 8089368:	d10d      	bne.n	8089386 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0x66>
          main_gen_data[data_idx++] = alarm_code_idx;
 808936a:	f008 f96d 	bl	8091648 <__aeabi_i2f>
 808936e:	6120      	str	r0, [r4, #16]
        if ((alarm_buffer[buffer_idx]) == pcc1302_alarm_status[alarm_status_idx])
 8089370:	2000      	movs	r0, #0
 8089372:	8872      	ldrh	r2, [r6, #2]
 8089374:	4b2e      	ldr	r3, [pc, #184]	; (8089430 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0x110>)
 8089376:	f833 1b02 	ldrh.w	r1, [r3], #2
 808937a:	428a      	cmp	r2, r1
 808937c:	d107      	bne.n	808938e <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0x6e>
          main_gen_data[data_idx] = alarm_status_idx;
 808937e:	f008 f963 	bl	8091648 <__aeabi_i2f>
 8089382:	6160      	str	r0, [r4, #20]
          break;
 8089384:	e7d3      	b.n	808932e <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0xe>
      for (int alarm_code_idx = ALARM_REG2; alarm_code_idx <= TOTAL_SUPPORTED_ALARMS; alarm_code_idx++)
 8089386:	3001      	adds	r0, #1
 8089388:	2819      	cmp	r0, #25
 808938a:	d1ea      	bne.n	8089362 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0x42>
 808938c:	e7cf      	b.n	808932e <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0xe>
      for (int alarm_status_idx = ALARM_REG1; alarm_status_idx < MBDATA_ALRM_BUFF_SIZE; alarm_status_idx++)
 808938e:	3001      	adds	r0, #1
 8089390:	2818      	cmp	r0, #24
 8089392:	d1f0      	bne.n	8089376 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0x56>
 8089394:	e7cb      	b.n	808932e <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0xe>
      bas_inst_gen_data[TOTAL_KWH] = MB_UNAVAIL_VAL;
 8089396:	4c27      	ldr	r4, [pc, #156]	; (8089434 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0x114>)
 8089398:	4e27      	ldr	r6, [pc, #156]	; (8089438 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0x118>)
      bas_inst_gen_data[data_idx++] = modbus_buffer[data_idx] * 0.1;       // Gen Frequency
 808939a:	462f      	mov	r7, r5
      bas_inst_gen_data[TOTAL_KWH] = MB_UNAVAIL_VAL;
 808939c:	6026      	str	r6, [r4, #0]
      bas_inst_gen_data[data_idx++] = modbus_buffer[data_idx];             // Oil pressure
 808939e:	6848      	ldr	r0, [r1, #4]
 80893a0:	f008 f94e 	bl	8091640 <__aeabi_ui2f>
 80893a4:	6060      	str	r0, [r4, #4]
      bas_inst_gen_data[data_idx++] = modbus_buffer[data_idx] * 0.1;       // coolant temperature
 80893a6:	68a8      	ldr	r0, [r5, #8]
 80893a8:	f007 fd10 	bl	8090dcc <__aeabi_ui2d>
 80893ac:	a31c      	add	r3, pc, #112	; (adr r3, 8089420 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0x100>)
 80893ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80893b2:	f007 fd85 	bl	8090ec0 <__aeabi_dmul>
 80893b6:	f008 f83d 	bl	8091434 <__aeabi_d2f>
        bas_inst_gen_data[data_idx] = MB_UNAVAIL_VAL; 
 80893ba:	60e6      	str	r6, [r4, #12]
      bas_inst_gen_data[data_idx++] = modbus_buffer[data_idx] * 0.1;       // coolant temperature
 80893bc:	60a0      	str	r0, [r4, #8]
        bas_inst_gen_data[data_idx] = MB_UNAVAIL_VAL; 
 80893be:	6126      	str	r6, [r4, #16]
 80893c0:	6166      	str	r6, [r4, #20]
      bas_inst_gen_data[data_idx++] = modbus_buffer[data_idx] * 0.1;       // Engine battery voltage
 80893c2:	69a8      	ldr	r0, [r5, #24]
 80893c4:	f007 fd02 	bl	8090dcc <__aeabi_ui2d>
 80893c8:	a315      	add	r3, pc, #84	; (adr r3, 8089420 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0x100>)
 80893ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80893ce:	f007 fd77 	bl	8090ec0 <__aeabi_dmul>
 80893d2:	f008 f82f 	bl	8091434 <__aeabi_d2f>
 80893d6:	61a0      	str	r0, [r4, #24]
      bas_inst_gen_data[data_idx++] = modbus_buffer[data_idx];             // Engine speed
 80893d8:	69e8      	ldr	r0, [r5, #28]
 80893da:	f008 f931 	bl	8091640 <__aeabi_ui2f>
 80893de:	61e0      	str	r0, [r4, #28]
      bas_inst_gen_data[data_idx++] = modbus_buffer[data_idx] * 0.1;       // Gen Frequency
 80893e0:	f857 0f20 	ldr.w	r0, [r7, #32]!
 80893e4:	f007 fcf2 	bl	8090dcc <__aeabi_ui2d>
 80893e8:	a30d      	add	r3, pc, #52	; (adr r3, 8089420 <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0x100>)
 80893ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80893ee:	f007 fd67 	bl	8090ec0 <__aeabi_dmul>
 80893f2:	f008 f81f 	bl	8091434 <__aeabi_d2f>
 80893f6:	f104 0824 	add.w	r8, r4, #36	; 0x24
 80893fa:	6220      	str	r0, [r4, #32]
      for (; data_idx < EARTH_CURR; data_idx++)
 80893fc:	3544      	adds	r5, #68	; 0x44
        bas_inst_gen_data[data_idx] = modbus_buffer[data_idx];
 80893fe:	f857 0f04 	ldr.w	r0, [r7, #4]!
 8089402:	f008 f91d 	bl	8091640 <__aeabi_ui2f>
      for (; data_idx < EARTH_CURR; data_idx++)
 8089406:	42bd      	cmp	r5, r7
        bas_inst_gen_data[data_idx] = modbus_buffer[data_idx];
 8089408:	f848 0b04 	str.w	r0, [r8], #4
      for (; data_idx < EARTH_CURR; data_idx++)
 808940c:	d1f7      	bne.n	80893fe <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0xde>
        bas_inst_gen_data[data_idx] = MB_UNAVAIL_VAL;
 808940e:	64a6      	str	r6, [r4, #72]	; 0x48
 8089410:	64e6      	str	r6, [r4, #76]	; 0x4c
 8089412:	6526      	str	r6, [r4, #80]	; 0x50
 8089414:	6566      	str	r6, [r4, #84]	; 0x54
 8089416:	65a6      	str	r6, [r4, #88]	; 0x58
      for (; data_idx <= CURR_LAG_LEAD; data_idx++)
 8089418:	e789      	b.n	808932e <_Z24formatGenDataCummins130216GeneratorDataSetPmPt+0xe>
 808941a:	bf00      	nop
 808941c:	f3af 8000 	nop.w
 8089420:	9999999a 	.word	0x9999999a
 8089424:	3fb99999 	.word	0x3fb99999
 8089428:	20000cd8 	.word	0x20000cd8
 808942c:	20000024 	.word	0x20000024
 8089430:	2000009c 	.word	0x2000009c
 8089434:	200005c8 	.word	0x200005c8
 8089438:	ccc0a468 	.word	0xccc0a468

0808943c <_GLOBAL__sub_I_UN_ALARM>:
                                 };
 808943c:	4b1d      	ldr	r3, [pc, #116]	; (80894b4 <_GLOBAL__sub_I_UN_ALARM+0x78>)
 808943e:	881a      	ldrh	r2, [r3, #0]
 8089440:	4b1d      	ldr	r3, [pc, #116]	; (80894b8 <_GLOBAL__sub_I_UN_ALARM+0x7c>)
 8089442:	815a      	strh	r2, [r3, #10]
 8089444:	851a      	strh	r2, [r3, #40]	; 0x28
 8089446:	85da      	strh	r2, [r3, #46]	; 0x2e
 8089448:	861a      	strh	r2, [r3, #48]	; 0x30
 808944a:	879a      	strh	r2, [r3, #60]	; 0x3c
 808944c:	87da      	strh	r2, [r3, #62]	; 0x3e
 808944e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8089452:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8089456:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 808945a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 808945e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8089462:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8089466:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 808946a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 808946e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8089472:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8089476:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 808947a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 808947e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8089482:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8089486:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 808948a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 808948e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 8089492:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8089496:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 808949a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 808949e:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 80894a2:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 80894a6:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80894aa:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 80894ae:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
}
 80894b2:	4770      	bx	lr
 80894b4:	20000022 	.word	0x20000022
 80894b8:	20000024 	.word	0x20000024

080894bc <_ZN14SHYFTStateSyncC1Em>:

Logger ssLogger("SHYFT_STATE_LOGGER_NAME");

// PUBLIC
SHYFTStateSync::SHYFTStateSync(uint32_t _eepromAddress) {
  intervalPending = false;
 80894bc:	2200      	movs	r2, #0
 80894be:	7002      	strb	r2, [r0, #0]
  eepromAddress = _eepromAddress;
  structSize = sizeof(shyftState);
 80894c0:	2240      	movs	r2, #64	; 0x40
  eepromAddress = _eepromAddress;
 80894c2:	6041      	str	r1, [r0, #4]
  structSize = sizeof(shyftState);
 80894c4:	8102      	strh	r2, [r0, #8]
}
 80894c6:	4770      	bx	lr

080894c8 <_ZN14SHYFTStateSync4saveEv>:
  shyftState.lastFuelLevel = 0;

  if (shouldSave) { save(); }
}

void SHYFTStateSync::save() {
 80894c8:	b510      	push	{r4, lr}
 80894ca:	4604      	mov	r4, r0
  shyftState.lastUpdated = Time.now();
 80894cc:	f006 fe8c 	bl	80901e8 <_ZN9TimeClass3nowEv>
 80894d0:	6360      	str	r0, [r4, #52]	; 0x34
  EEPROM.put(eepromAddress, shyftState);
 80894d2:	f007 f9e1 	bl	8090898 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80894d6:	6860      	ldr	r0, [r4, #4]
 80894d8:	f104 010c 	add.w	r1, r4, #12
 80894dc:	2240      	movs	r2, #64	; 0x40
}
 80894de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80894e2:	f003 bd43 	b.w	808cf6c <HAL_EEPROM_Put>
	...

080894e8 <_ZN14SHYFTStateSync15syncResetReasonEN5Reset6ReasonEb>:
  if (shouldSave) {
    save();
  }
}

void SHYFTStateSync::syncResetReason(Reset::Reason resetReason, bool shouldSave) {
 80894e8:	b570      	push	{r4, r5, r6, lr}
 80894ea:	460d      	mov	r5, r1
 80894ec:	b088      	sub	sp, #32
 80894ee:	4604      	mov	r4, r0
	StringSumHelper(const char *p) : String(p) {}
 80894f0:	490f      	ldr	r1, [pc, #60]	; (8089530 <_ZN14SHYFTStateSync15syncResetReasonEN5Reset6ReasonEb+0x48>)
 80894f2:	a804      	add	r0, sp, #16
 80894f4:	4616      	mov	r6, r2
 80894f6:	f006 fbcf 	bl	808fc98 <_ZN6StringC1EPKc>
  ssLogger.trace("syncing Reset::Reason of type=" + String(resetReason));
 80894fa:	220a      	movs	r2, #10
 80894fc:	4629      	mov	r1, r5
 80894fe:	4668      	mov	r0, sp
 8089500:	f006 fc5d 	bl	808fdbe <_ZN6StringC1Ejh>
 8089504:	4669      	mov	r1, sp
 8089506:	a804      	add	r0, sp, #16
 8089508:	f006 fcf7 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 808950c:	6801      	ldr	r1, [r0, #0]
 808950e:	4809      	ldr	r0, [pc, #36]	; (8089534 <_ZN14SHYFTStateSync15syncResetReasonEN5Reset6ReasonEb+0x4c>)
 8089510:	f7fd ffa4 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>
 8089514:	4668      	mov	r0, sp
 8089516:	f006 fb75 	bl	808fc04 <_ZN6StringD1Ev>
class StringSumHelper : public String
 808951a:	a804      	add	r0, sp, #16
 808951c:	f006 fb72 	bl	808fc04 <_ZN6StringD1Ev>
  shyftState.lastResetReason = resetReason;
 8089520:	6425      	str	r5, [r4, #64]	; 0x40

  if (shouldSave) {
 8089522:	b116      	cbz	r6, 808952a <_ZN14SHYFTStateSync15syncResetReasonEN5Reset6ReasonEb+0x42>
    save();
 8089524:	4620      	mov	r0, r4
 8089526:	f7ff ffcf 	bl	80894c8 <_ZN14SHYFTStateSync4saveEv>
  }
}
 808952a:	b008      	add	sp, #32
 808952c:	bd70      	pop	{r4, r5, r6, pc}
 808952e:	bf00      	nop
 8089530:	080941d4 	.word	0x080941d4
 8089534:	20000e44 	.word	0x20000e44

08089538 <_GLOBAL__sub_I_ssLogger>:
        name_(name) {
 8089538:	4b01      	ldr	r3, [pc, #4]	; (8089540 <_GLOBAL__sub_I_ssLogger+0x8>)
 808953a:	4a02      	ldr	r2, [pc, #8]	; (8089544 <_GLOBAL__sub_I_ssLogger+0xc>)
 808953c:	601a      	str	r2, [r3, #0]

  resetInterval(intervalEnd, false);

  unsigned int intervalStart = intervalEnd - SEND_INTERVAL;
  shyftState.missedSeconds = now - intervalStart;
}
 808953e:	4770      	bx	lr
 8089540:	20000e44 	.word	0x20000e44
 8089544:	080941f3 	.word	0x080941f3

08089548 <_Z21getStringValueAtIndex6Stringci>:
#include "StringHelpers.h"

String getStringValueAtIndex(String data, char separator, int index) {
 8089548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int found = 0;
  int strIndex[] = { 0, -1 };
 808954c:	f04f 0800 	mov.w	r8, #0
String getStringValueAtIndex(String data, char separator, int index) {
 8089550:	4605      	mov	r5, r0
 8089552:	460e      	mov	r6, r1
 8089554:	4699      	mov	r9, r3
  int strIndex[] = { 0, -1 };
 8089556:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
  int maxIndex = data.length() - 1;

  for (int i = 0; i <= maxIndex && found <= index; i++) {
 808955a:	4644      	mov	r4, r8
  int found = 0;
 808955c:	46c2      	mov	sl, r8
  int maxIndex = data.length() - 1;
 808955e:	688f      	ldr	r7, [r1, #8]
 8089560:	3f01      	subs	r7, #1
  for (int i = 0; i <= maxIndex && found <= index; i++) {
 8089562:	42bc      	cmp	r4, r7
 8089564:	9201      	str	r2, [sp, #4]
 8089566:	dc15      	bgt.n	8089594 <_Z21getStringValueAtIndex6Stringci+0x4c>
 8089568:	45ca      	cmp	sl, r9
 808956a:	dc15      	bgt.n	8089598 <_Z21getStringValueAtIndex6Stringci+0x50>
    if (data.charAt(i) == separator || i == maxIndex) {
 808956c:	4621      	mov	r1, r4
 808956e:	4630      	mov	r0, r6
 8089570:	f006 fd20 	bl	808ffb4 <_ZNK6String6charAtEj>
 8089574:	9a01      	ldr	r2, [sp, #4]
 8089576:	1c63      	adds	r3, r4, #1
 8089578:	4290      	cmp	r0, r2
 808957a:	d001      	beq.n	8089580 <_Z21getStringValueAtIndex6Stringci+0x38>
 808957c:	42bc      	cmp	r4, r7
 808957e:	d107      	bne.n	8089590 <_Z21getStringValueAtIndex6Stringci+0x48>
      found++;
      strIndex[0] = strIndex[1] + 1;
 8089580:	f10b 0801 	add.w	r8, fp, #1
 8089584:	42bc      	cmp	r4, r7
 8089586:	bf14      	ite	ne
 8089588:	46a3      	movne	fp, r4
 808958a:	469b      	moveq	fp, r3
      found++;
 808958c:	f10a 0a01 	add.w	sl, sl, #1
  for (int i = 0; i <= maxIndex && found <= index; i++) {
 8089590:	461c      	mov	r4, r3
 8089592:	e7e6      	b.n	8089562 <_Z21getStringValueAtIndex6Stringci+0x1a>
      strIndex[1] = (i == maxIndex) ? i+1 : i;
    }
  }

  return found > index ? data.substring(strIndex[0], strIndex[1]) : "";
 8089594:	45ca      	cmp	sl, r9
 8089596:	dd09      	ble.n	80895ac <_Z21getStringValueAtIndex6Stringci+0x64>
 8089598:	465b      	mov	r3, fp
 808959a:	4642      	mov	r2, r8
 808959c:	4631      	mov	r1, r6
 808959e:	4628      	mov	r0, r5
 80895a0:	f006 fd0a 	bl	808ffb8 <_ZNK6String9substringEjj>
}
 80895a4:	4628      	mov	r0, r5
 80895a6:	b003      	add	sp, #12
 80895a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return found > index ? data.substring(strIndex[0], strIndex[1]) : "";
 80895ac:	4628      	mov	r0, r5
 80895ae:	4902      	ldr	r1, [pc, #8]	; (80895b8 <_Z21getStringValueAtIndex6Stringci+0x70>)
 80895b0:	f006 fb72 	bl	808fc98 <_ZN6StringC1EPKc>
 80895b4:	e7f6      	b.n	80895a4 <_Z21getStringValueAtIndex6Stringci+0x5c>
 80895b6:	bf00      	nop
 80895b8:	08094ad5 	.word	0x08094ad5

080895bc <__tcf_0>:

// Array of available GX baudrates for serial communication
uint32_t UFS_BAUD_RATE[TOTAL_BAUDRATES]  = {9600, 14400, 19200, 38400, 57600, 115200, 128000};

// Instantiate 4 objects of the UFS class
UFS gxUFS[MAXIMUM_UFS];
 80895bc:	4770      	bx	lr

080895be <_ZN3UFSC1Ev>:

// Instantiate an object of the fuel level data configuration
fuelLevelDataConfig flDataConfig;

/***Defination of UFS Class***/
UFS::UFS() : Modbus(GX_IS_MASTER, MODBUS_ON_SERIAL1, MODBUS_RTU_DE, MODBUS_RTU_RE)
 80895be:	230b      	movs	r3, #11
 80895c0:	b513      	push	{r0, r1, r4, lr}
 80895c2:	2201      	movs	r2, #1
 80895c4:	9300      	str	r3, [sp, #0]
 80895c6:	2100      	movs	r1, #0
 80895c8:	230c      	movs	r3, #12
 80895ca:	4604      	mov	r4, r0
 80895cc:	f002 fa40 	bl	808ba50 <_ZN6ModbusC1Ehhhh>
 80895d0:	2301      	movs	r3, #1
{
    slave_id = 1;
    baud_rate = 0;
}
 80895d2:	4620      	mov	r0, r4
UFS::UFS() : Modbus(GX_IS_MASTER, MODBUS_ON_SERIAL1, MODBUS_RTU_DE, MODBUS_RTU_RE)
 80895d4:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
    slave_id = 1;
 80895d8:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    baud_rate = 0;
 80895dc:	2300      	movs	r3, #0
 80895de:	6763      	str	r3, [r4, #116]	; 0x74
}
 80895e0:	b002      	add	sp, #8
 80895e2:	bd10      	pop	{r4, pc}

080895e4 <_ZN3UFS11getDistanceEv>:
    ufsQueryPacket->u16CoilsNo = UFS_DATA_SIZE;              
    ufsQueryPacket->au16reg = ufs_mbdata;               
}

float UFS::getDistance()
{
 80895e4:	b508      	push	{r3, lr}
    // Convert raw data to cm
    return (ufs_mbdata[0] * RAW_TO_INCHES) * INCHES_TO_CM;
 80895e6:	f8b0 0078 	ldrh.w	r0, [r0, #120]	; 0x78
 80895ea:	f008 f82d 	bl	8091648 <__aeabi_i2f>
 80895ee:	4903      	ldr	r1, [pc, #12]	; (80895fc <_ZN3UFS11getDistanceEv+0x18>)
 80895f0:	f008 f87e 	bl	80916f0 <__aeabi_fmul>
 80895f4:	4902      	ldr	r1, [pc, #8]	; (8089600 <_ZN3UFS11getDistanceEv+0x1c>)
 80895f6:	f008 f87b 	bl	80916f0 <__aeabi_fmul>
}
 80895fa:	bd08      	pop	{r3, pc}
 80895fc:	3b5dc619 	.word	0x3b5dc619
 8089600:	40228f5c 	.word	0x40228f5c

08089604 <_ZN3UFS10getVoltageEv>:
    // The register returned from Modbus is a 16 bit register and must be masked to the LSB to be valid.
    return ( 0x00FF & ufs_mbdata[1] );
}

float UFS::getVoltage()
{
 8089604:	b508      	push	{r3, lr}
    // Convert raw integer value of the DAC to a numeric value
    return (ufs_mbdata[2] / (float)4100) * 10.0;
 8089606:	f8b0 007c 	ldrh.w	r0, [r0, #124]	; 0x7c
 808960a:	f008 f81d 	bl	8091648 <__aeabi_i2f>
 808960e:	4903      	ldr	r1, [pc, #12]	; (808961c <_ZN3UFS10getVoltageEv+0x18>)
 8089610:	f008 f922 	bl	8091858 <__aeabi_fdiv>
 8089614:	4902      	ldr	r1, [pc, #8]	; (8089620 <_ZN3UFS10getVoltageEv+0x1c>)
 8089616:	f008 f86b 	bl	80916f0 <__aeabi_fmul>
}
 808961a:	bd08      	pop	{r3, pc}
 808961c:	45802000 	.word	0x45802000
 8089620:	41200000 	.word	0x41200000

08089624 <_ZN3UFS20getSensorTemperatureEv>:
    // Convert raw integer value of the DAC to a numeric value
    return (ufs_mbdata[3] / (float)4100) * 20.0;
} 

float UFS::getSensorTemperature()
{
 8089624:	b508      	push	{r3, lr}
    // Convert raw value to celsius value
    return ( ufs_mbdata[5] * RAW_TO_CELSIUS );
 8089626:	f8b0 0082 	ldrh.w	r0, [r0, #130]	; 0x82
 808962a:	f008 f80d 	bl	8091648 <__aeabi_i2f>
 808962e:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8089632:	f008 f85d 	bl	80916f0 <__aeabi_fmul>
}
 8089636:	bd08      	pop	{r3, pc}

08089638 <_ZN3UFSD1Ev>:
{
    // Convert raw data to inches
    return (ufs_mbdata[6] * RAW_TO_INCHES) * INCHES_TO_CM;
}

UFS::~UFS(){}
 8089638:	4770      	bx	lr
	...

0808963c <_Z18initialiseMultiUFSP15MultiUfsConfigs>:

bool initialiseMultiUFS(MultiUfsConfigs *newConfig)
{
 808963c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  flDataConfig.num_of_fls = newConfig->no_of_ufs;
 8089640:	4607      	mov	r7, r0
 8089642:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80896b0 <_Z18initialiseMultiUFSP15MultiUfsConfigs+0x74>
 8089646:	f817 2b02 	ldrb.w	r2, [r7], #2
{
 808964a:	4606      	mov	r6, r0
  Log.info("NUMBER OF UFS: %d", flDataConfig.num_of_fls);
 808964c:	4915      	ldr	r1, [pc, #84]	; (80896a4 <_Z18initialiseMultiUFSP15MultiUfsConfigs+0x68>)
 808964e:	4816      	ldr	r0, [pc, #88]	; (80896a8 <_Z18initialiseMultiUFSP15MultiUfsConfigs+0x6c>)
  flDataConfig.num_of_fls = newConfig->no_of_ufs;
 8089650:	f888 2002 	strb.w	r2, [r8, #2]
  for(int i = 0; i < flDataConfig.num_of_fls && i < MAXIMUM_UFS; i++)
 8089654:	2400      	movs	r4, #0
  Log.info("NUMBER OF UFS: %d", flDataConfig.num_of_fls);
 8089656:	f7fc f99d 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
  for(int i = 0; i < flDataConfig.num_of_fls && i < MAXIMUM_UFS; i++)
 808965a:	4d14      	ldr	r5, [pc, #80]	; (80896ac <_Z18initialiseMultiUFSP15MultiUfsConfigs+0x70>)
  {
    gxUFS[i].slave_id = newConfig->slave_id[i];
    gxUFS[i].baud_rate = UFS_BAUD_RATE[newConfig->baud_rate];
 808965c:	f8df a054 	ldr.w	sl, [pc, #84]	; 80896b4 <_Z18initialiseMultiUFSP15MultiUfsConfigs+0x78>
    
    Log.info("UFS:%d BAUDRATE:%d   %d   %d", gxUFS[i].slave_id, gxUFS[i].baud_rate, i, flDataConfig.num_of_fls);
 8089660:	f8df b054 	ldr.w	fp, [pc, #84]	; 80896b8 <_Z18initialiseMultiUFSP15MultiUfsConfigs+0x7c>
 8089664:	f8df 9040 	ldr.w	r9, [pc, #64]	; 80896a8 <_Z18initialiseMultiUFSP15MultiUfsConfigs+0x6c>
  for(int i = 0; i < flDataConfig.num_of_fls && i < MAXIMUM_UFS; i++)
 8089668:	f898 1002 	ldrb.w	r1, [r8, #2]
 808966c:	42a1      	cmp	r1, r4
 808966e:	dd14      	ble.n	808969a <_Z18initialiseMultiUFSP15MultiUfsConfigs+0x5e>
 8089670:	2c04      	cmp	r4, #4
 8089672:	f105 0588 	add.w	r5, r5, #136	; 0x88
 8089676:	d010      	beq.n	808969a <_Z18initialiseMultiUFSP15MultiUfsConfigs+0x5e>
    gxUFS[i].slave_id = newConfig->slave_id[i];
 8089678:	f817 2b01 	ldrb.w	r2, [r7], #1
    Log.info("UFS:%d BAUDRATE:%d   %d   %d", gxUFS[i].slave_id, gxUFS[i].baud_rate, i, flDataConfig.num_of_fls);
 808967c:	4648      	mov	r0, r9
    gxUFS[i].slave_id = newConfig->slave_id[i];
 808967e:	f805 2c18 	strb.w	r2, [r5, #-24]
    gxUFS[i].baud_rate = UFS_BAUD_RATE[newConfig->baud_rate];
 8089682:	7873      	ldrb	r3, [r6, #1]
    Log.info("UFS:%d BAUDRATE:%d   %d   %d", gxUFS[i].slave_id, gxUFS[i].baud_rate, i, flDataConfig.num_of_fls);
 8089684:	e9cd 4100 	strd	r4, r1, [sp]
    gxUFS[i].baud_rate = UFS_BAUD_RATE[newConfig->baud_rate];
 8089688:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
    Log.info("UFS:%d BAUDRATE:%d   %d   %d", gxUFS[i].slave_id, gxUFS[i].baud_rate, i, flDataConfig.num_of_fls);
 808968c:	4659      	mov	r1, fp
    gxUFS[i].baud_rate = UFS_BAUD_RATE[newConfig->baud_rate];
 808968e:	f845 3c14 	str.w	r3, [r5, #-20]
  for(int i = 0; i < flDataConfig.num_of_fls && i < MAXIMUM_UFS; i++)
 8089692:	3401      	adds	r4, #1
    Log.info("UFS:%d BAUDRATE:%d   %d   %d", gxUFS[i].slave_id, gxUFS[i].baud_rate, i, flDataConfig.num_of_fls);
 8089694:	f7fc f97e 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
  for(int i = 0; i < flDataConfig.num_of_fls && i < MAXIMUM_UFS; i++)
 8089698:	e7e6      	b.n	8089668 <_Z18initialiseMultiUFSP15MultiUfsConfigs+0x2c>
  }
  return true;
}
 808969a:	2001      	movs	r0, #1
 808969c:	b003      	add	sp, #12
 808969e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80896a2:	bf00      	nop
 80896a4:	0809420b 	.word	0x0809420b
 80896a8:	200015a4 	.word	0x200015a4
 80896ac:	20000e50 	.word	0x20000e50
 80896b0:	20000e4a 	.word	0x20000e4a
 80896b4:	200000cc 	.word	0x200000cc
 80896b8:	0809421d 	.word	0x0809421d

080896bc <_Z17ufsConfigurations6String>:

int ufsConfigurations(String fullCommand)
{
 80896bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80896be:	4606      	mov	r6, r0
{
    uint8_t slave_id = UINT8_MAX;                        // Modbus slave ID of UFS
    uint8_t baud_rate = UINT8_MAX;                       // Communication baudrate of the UFS
};

struct MultiUfsConfigs
 80896c0:	2400      	movs	r4, #0
 80896c2:	b08b      	sub	sp, #44	; 0x2c

  MultiUfsConfigs ufs_sensors;

  Log.info("STARTING UFS CONFIGURATION...");
 80896c4:	493a      	ldr	r1, [pc, #232]	; (80897b0 <_Z17ufsConfigurations6String+0xf4>)
 80896c6:	483b      	ldr	r0, [pc, #236]	; (80897b4 <_Z17ufsConfigurations6String+0xf8>)
 80896c8:	f8ad 4000 	strh.w	r4, [sp]
 80896cc:	f7fc f962 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
  uint8_t index_counter = 0;
  uint8_t received_baudrate = atoi(getStringValueAtIndex(fullCommand, COMMA_CHAR, index_counter++));
 80896d0:	4631      	mov	r1, r6
 80896d2:	a802      	add	r0, sp, #8
 80896d4:	f006 fb2a 	bl	808fd2c <_ZN6StringC1ERKS_>
 80896d8:	4623      	mov	r3, r4
 80896da:	222c      	movs	r2, #44	; 0x2c
 80896dc:	a902      	add	r1, sp, #8
 80896de:	a806      	add	r0, sp, #24
 80896e0:	f7ff ff32 	bl	8089548 <_Z21getStringValueAtIndex6Stringci>
 80896e4:	9806      	ldr	r0, [sp, #24]
 80896e6:	f008 fb9f 	bl	8091e28 <atoi>
 80896ea:	b2c4      	uxtb	r4, r0
 80896ec:	a806      	add	r0, sp, #24
 80896ee:	f006 fa89 	bl	808fc04 <_ZN6StringD1Ev>
 80896f2:	a802      	add	r0, sp, #8
 80896f4:	f006 fa86 	bl	808fc04 <_ZN6StringD1Ev>
  uint8_t no_of_ufs = atoi(getStringValueAtIndex(fullCommand, COMMA_CHAR, index_counter++));
 80896f8:	4631      	mov	r1, r6
 80896fa:	a802      	add	r0, sp, #8
 80896fc:	f006 fb16 	bl	808fd2c <_ZN6StringC1ERKS_>
 8089700:	2301      	movs	r3, #1
 8089702:	222c      	movs	r2, #44	; 0x2c
 8089704:	a902      	add	r1, sp, #8
 8089706:	a806      	add	r0, sp, #24
 8089708:	f7ff ff1e 	bl	8089548 <_Z21getStringValueAtIndex6Stringci>
 808970c:	9806      	ldr	r0, [sp, #24]
 808970e:	f008 fb8b 	bl	8091e28 <atoi>
 8089712:	b2c5      	uxtb	r5, r0
 8089714:	a806      	add	r0, sp, #24
 8089716:	f006 fa75 	bl	808fc04 <_ZN6StringD1Ev>
 808971a:	a802      	add	r0, sp, #8
 808971c:	f006 fa72 	bl	808fc04 <_ZN6StringD1Ev>
    
  // Check if received baudrate is valid
  if ((received_baudrate < BAUD_9K6) || (received_baudrate > BAUD_128K))
 8089720:	2c06      	cmp	r4, #6
 8089722:	d839      	bhi.n	8089798 <_Z17ufsConfigurations6String+0xdc>
      return INVALID_UFS_BAUD;
  // check if received number of ufs sensors is in range
  if ((no_of_ufs < MIN_NUM_OF_UFS) || (no_of_ufs > MAXIMUM_UFS))
 8089724:	1e6b      	subs	r3, r5, #1
 8089726:	2b03      	cmp	r3, #3
 8089728:	d839      	bhi.n	808979e <_Z17ufsConfigurations6String+0xe2>
      return INVALID_NUM_OF_UFS;

  ufs_sensors.baud_rate = received_baudrate; // save received baudrate in the ufs data packet struct
 808972a:	f88d 4001 	strb.w	r4, [sp, #1]
  ufs_sensors.no_of_ufs = no_of_ufs; //  save received number of ufs in the ufs data packet struct 
 808972e:	2402      	movs	r4, #2
 8089730:	f88d 5000 	strb.w	r5, [sp]

  for(int i = 0; i < no_of_ufs; i++)
 8089734:	1ea3      	subs	r3, r4, #2
 8089736:	429d      	cmp	r5, r3
 8089738:	dd1b      	ble.n	8089772 <_Z17ufsConfigurations6String+0xb6>
  {
    uint8_t new_id = atoi(getStringValueAtIndex(fullCommand, COMMA_CHAR, index_counter++));
 808973a:	4631      	mov	r1, r6
 808973c:	a802      	add	r0, sp, #8
 808973e:	f006 faf5 	bl	808fd2c <_ZN6StringC1ERKS_>
 8089742:	4623      	mov	r3, r4
 8089744:	222c      	movs	r2, #44	; 0x2c
 8089746:	a902      	add	r1, sp, #8
 8089748:	a806      	add	r0, sp, #24
 808974a:	f7ff fefd 	bl	8089548 <_Z21getStringValueAtIndex6Stringci>
 808974e:	9806      	ldr	r0, [sp, #24]
 8089750:	f008 fb6a 	bl	8091e28 <atoi>
 8089754:	b2c7      	uxtb	r7, r0
 8089756:	a806      	add	r0, sp, #24
 8089758:	f006 fa54 	bl	808fc04 <_ZN6StringD1Ev>
 808975c:	a802      	add	r0, sp, #8
 808975e:	f006 fa51 	bl	808fc04 <_ZN6StringD1Ev>
        
    // Check if received slave id is valid
    if ((new_id < MIN_UFS_SLAVE_ID) || (new_id > MAX_UFS_SLAVE_ID)) // change to range of ufs slave id
 8089762:	f1a7 0309 	sub.w	r3, r7, #9
 8089766:	2b0b      	cmp	r3, #11
 8089768:	d81c      	bhi.n	80897a4 <_Z17ufsConfigurations6String+0xe8>
       return INVALID_UFS_ID;
    ufs_sensors.slave_id[i]  = new_id; //save new id in ufs data struct
 808976a:	f80d 7004 	strb.w	r7, [sp, r4]
  for(int i = 0; i < no_of_ufs; i++)
 808976e:	3401      	adds	r4, #1
 8089770:	e7e0      	b.n	8089734 <_Z17ufsConfigurations6String+0x78>
  {
    Log.info("    SLAVE%d ID:%d", i, ufs_sensors.slave_id[i]);
  } */
  
  // Check if the configurations in EEPROM are still valid
  if(validateConfigurations() == false) { return CONFIG_INVALID;}
 8089772:	f003 fb01 	bl	808cd78 <_Z22validateConfigurationsv>
 8089776:	b1c0      	cbz	r0, 80897aa <_Z17ufsConfigurations6String+0xee>

  // Initialise the configured UFS Devices
  initialiseMultiUFS(&ufs_sensors);
 8089778:	4668      	mov	r0, sp
 808977a:	f7ff ff5f 	bl	808963c <_Z18initialiseMultiUFSP15MultiUfsConfigs>

  // Updated the multi-ufs configuration in the EEPROM
  mainGXConfig.MULTI_UFS_SENSORS = ufs_sensors;
 808977e:	4b0e      	ldr	r3, [pc, #56]	; (80897b8 <_Z17ufsConfigurations6String+0xfc>)
 8089780:	9800      	ldr	r0, [sp, #0]
 8089782:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8089786:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
 808978a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
  storeConfigurations();
 808978e:	f003 fb1f 	bl	808cdd0 <_Z19storeConfigurationsv>

  return 1;
 8089792:	2001      	movs	r0, #1
}
 8089794:	b00b      	add	sp, #44	; 0x2c
 8089796:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return INVALID_UFS_BAUD;
 8089798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 808979c:	e7fa      	b.n	8089794 <_Z17ufsConfigurations6String+0xd8>
      return INVALID_NUM_OF_UFS;
 808979e:	f06f 0001 	mvn.w	r0, #1
 80897a2:	e7f7      	b.n	8089794 <_Z17ufsConfigurations6String+0xd8>
       return INVALID_UFS_ID;
 80897a4:	f06f 0002 	mvn.w	r0, #2
 80897a8:	e7f4      	b.n	8089794 <_Z17ufsConfigurations6String+0xd8>
  if(validateConfigurations() == false) { return CONFIG_INVALID;}
 80897aa:	f06f 0015 	mvn.w	r0, #21
 80897ae:	e7f1      	b.n	8089794 <_Z17ufsConfigurations6String+0xd8>
 80897b0:	0809423a 	.word	0x0809423a
 80897b4:	200015a4 	.word	0x200015a4
 80897b8:	20001268 	.word	0x20001268

080897bc <_Z18getMultiUfsMetricsv>:

int8_t getMultiUfsMetrics()
{
 80897bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80897c0:	2600      	movs	r6, #0
  // The ufs_unit is used to track the specific UFS device that is being read
  uint8_t ufs_unit = 0;
  unsigned long ufs_read_interval = MULTI_UFS_READ_CYCLE;
  int8_t ufs_read_status = UFS_READ_ERROR;
 80897c2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  unsigned long ufs_read_interval = MULTI_UFS_READ_CYCLE;
 80897c6:	f44f 7496 	mov.w	r4, #300	; 0x12c

  // Loop through all configured UFS devices. Delay for 300ms before reading the next device
  while (ufs_unit < flDataConfig.num_of_fls)
 80897ca:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 808989c <_Z18getMultiUfsMetricsv+0xe0>
  {
    if (millis() > ufs_read_interval)
    {
      // Write the number of configured UFS devices and each device slave_id to the log
      Log.info("NUMBER_OF_UFS_DEVICES:%d, SLAVE_ID:%d\n", flDataConfig.num_of_fls, gxUFS[ufs_unit].slave_id);
 80897ce:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80898a0 <_Z18getMultiUfsMetricsv+0xe4>
{
 80897d2:	b085      	sub	sp, #20
 80897d4:	b2f7      	uxtb	r7, r6
  while (ufs_unit < flDataConfig.num_of_fls)
 80897d6:	f898 3002 	ldrb.w	r3, [r8, #2]
 80897da:	42bb      	cmp	r3, r7
 80897dc:	d956      	bls.n	808988c <_Z18getMultiUfsMetricsv+0xd0>
 80897de:	f003 fbad 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
    if (millis() > ufs_read_interval)
 80897e2:	4284      	cmp	r4, r0
 80897e4:	d2f7      	bcs.n	80897d6 <_Z18getMultiUfsMetricsv+0x1a>
      Log.info("NUMBER_OF_UFS_DEVICES:%d, SLAVE_ID:%d\n", flDataConfig.num_of_fls, gxUFS[ufs_unit].slave_id);
 80897e6:	2588      	movs	r5, #136	; 0x88
 80897e8:	437d      	muls	r5, r7
 80897ea:	eb09 0405 	add.w	r4, r9, r5
 80897ee:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 80897f2:	f898 2002 	ldrb.w	r2, [r8, #2]
 80897f6:	4927      	ldr	r1, [pc, #156]	; (8089894 <_Z18getMultiUfsMetricsv+0xd8>)
 80897f8:	4827      	ldr	r0, [pc, #156]	; (8089898 <_Z18getMultiUfsMetricsv+0xdc>)
 80897fa:	f7fc f8cb 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>

      // Initialise the Modbus communication port for a UFS device
      gxUFS[ufs_unit].begin(gxUFS[ufs_unit].baud_rate);
 80897fe:	4620      	mov	r0, r4
 8089800:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8089802:	f002 fa93 	bl	808bd2c <_ZN6Modbus5beginEl>
      gxUFS[ufs_unit].setTimeOut(MODBUS_ROLL_OVER_TIME);
 8089806:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 808980a:	4620      	mov	r0, r4
 808980c:	f002 f934 	bl	808ba78 <_ZN6Modbus10setTimeOutEt>
    ufsQueryPacket->u8id = slave_id;
 8089810:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
    ufsQueryPacket->au16reg = ufs_mbdata;               
 8089814:	3578      	adds	r5, #120	; 0x78
    ufsQueryPacket->u8id = slave_id;
 8089816:	f88d 3004 	strb.w	r3, [sp, #4]
    ufsQueryPacket->u8fct = FUNC_CODE3;          
 808981a:	2303      	movs	r3, #3
 808981c:	f88d 3005 	strb.w	r3, [sp, #5]
    ufsQueryPacket->u16RegAdd = UFS_DATA_START_ADDR;         
 8089820:	f44f 7302 	mov.w	r3, #520	; 0x208
 8089824:	f8ad 3006 	strh.w	r3, [sp, #6]
    ufsQueryPacket->u16CoilsNo = UFS_DATA_SIZE;              
 8089828:	2307      	movs	r3, #7
    ufsQueryPacket->au16reg = ufs_mbdata;               
 808982a:	444d      	add	r5, r9
    ufsQueryPacket->u16CoilsNo = UFS_DATA_SIZE;              
 808982c:	f8ad 3008 	strh.w	r3, [sp, #8]
      // Prepare the Modbus query packet to send to the UFS device
      modbus_t ufs_query;
      gxUFS[ufs_unit].getUfsQueryPacket(&ufs_query);

      // Run the Modbus Polling process to collect the required data. Ufs data are saved on the ufs class layer
      gxUFS[ufs_unit].validate_ans = false;
 8089830:	2300      	movs	r3, #0
    ufsQueryPacket->au16reg = ufs_mbdata;               
 8089832:	9503      	str	r5, [sp, #12]
        gxUFS[ufs_unit].poll();

        if(gxUFS[ufs_unit].getState() == COM_IDLE) 
           Log.info("Polling Metrics from UFS%d", (ufs_unit + 1));
        
        if (gxUFS[ufs_unit].validate_ans == true)
 8089834:	46a2      	mov	sl, r4
      gxUFS[ufs_unit].validate_ans = false;
 8089836:	250c      	movs	r5, #12
           Log.info("Polling Metrics from UFS%d", (ufs_unit + 1));
 8089838:	f8df b068 	ldr.w	fp, [pc, #104]	; 80898a4 <_Z18getMultiUfsMetricsv+0xe8>
      gxUFS[ufs_unit].validate_ans = false;
 808983c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
        gxUFS[ufs_unit].query(ufs_query);
 8089840:	ab04      	add	r3, sp, #16
 8089842:	e913 000e 	ldmdb	r3, {r1, r2, r3}
 8089846:	4620      	mov	r0, r4
 8089848:	f002 fccc 	bl	808c1e4 <_ZN6Modbus5queryE8modbus_t>
        delay(20);
 808984c:	2014      	movs	r0, #20
 808984e:	f003 ff04 	bl	808d65a <delay>
        gxUFS[ufs_unit].poll();
 8089852:	4620      	mov	r0, r4
 8089854:	f002 fb5a 	bl	808bf0c <_ZN6Modbus4pollEv>
        if(gxUFS[ufs_unit].getState() == COM_IDLE) 
 8089858:	4620      	mov	r0, r4
 808985a:	f002 f910 	bl	808ba7e <_ZN6Modbus8getStateEv>
 808985e:	b920      	cbnz	r0, 808986a <_Z18getMultiUfsMetricsv+0xae>
           Log.info("Polling Metrics from UFS%d", (ufs_unit + 1));
 8089860:	4659      	mov	r1, fp
 8089862:	480d      	ldr	r0, [pc, #52]	; (8089898 <_Z18getMultiUfsMetricsv+0xdc>)
 8089864:	1c7a      	adds	r2, r7, #1
 8089866:	f7fc f895 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
        if (gxUFS[ufs_unit].validate_ans == true)
 808986a:	f89a 3062 	ldrb.w	r3, [sl, #98]	; 0x62
 808986e:	b95b      	cbnz	r3, 8089888 <_Z18getMultiUfsMetricsv+0xcc>
      for (uint8_t i = MB_1_POLL; i <= MB_12_POLLS; i++)
 8089870:	3d01      	subs	r5, #1
 8089872:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8089876:	d1e3      	bne.n	8089840 <_Z18getMultiUfsMetricsv+0x84>
        {
          ufs_read_status = UFS_READ_SUCCESS;
          break;
        }
        else ufs_read_status = UFS_READ_ERROR; 
 8089878:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 808987c:	f003 fb5e 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
 8089880:	3601      	adds	r6, #1
      }
      
      // Increment our iterator (ufs_unit) to enable the next ufs device and set the timer for another 300ms
      ufs_unit++;
      ufs_read_interval = millis() + MULTI_UFS_READ_CYCLE;
 8089882:	f500 7496 	add.w	r4, r0, #300	; 0x12c
 8089886:	e7a5      	b.n	80897d4 <_Z18getMultiUfsMetricsv+0x18>
          ufs_read_status = UFS_READ_SUCCESS;
 8089888:	2501      	movs	r5, #1
 808988a:	e7f7      	b.n	808987c <_Z18getMultiUfsMetricsv+0xc0>
    } 
  }

  return ufs_read_status;
}
 808988c:	4628      	mov	r0, r5
 808988e:	b005      	add	sp, #20
 8089890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089894:	08094258 	.word	0x08094258
 8089898:	200015a4 	.word	0x200015a4
 808989c:	20000e4a 	.word	0x20000e4a
 80898a0:	20000e50 	.word	0x20000e50
 80898a4:	0809427f 	.word	0x0809427f

080898a8 <_Z19clearMultiUfsBufferv>:

void clearMultiUfsBuffer()
{
 80898a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80898aa:	2400      	movs	r4, #0
  for (uint8_t i = 0; i < flDataConfig.num_of_fls; i++)
  {
    // Reset the buffer values of each UFS to 0 before the next read operation.
    memset(gxUFS[i].ufs_mbdata, 0, sizeof(gxUFS[i].ufs_mbdata));
 80898ac:	2688      	movs	r6, #136	; 0x88
  for (uint8_t i = 0; i < flDataConfig.num_of_fls; i++)
 80898ae:	4f08      	ldr	r7, [pc, #32]	; (80898d0 <_Z19clearMultiUfsBufferv+0x28>)
    memset(gxUFS[i].ufs_mbdata, 0, sizeof(gxUFS[i].ufs_mbdata));
 80898b0:	4d08      	ldr	r5, [pc, #32]	; (80898d4 <_Z19clearMultiUfsBufferv+0x2c>)
  for (uint8_t i = 0; i < flDataConfig.num_of_fls; i++)
 80898b2:	78bb      	ldrb	r3, [r7, #2]
 80898b4:	b2e0      	uxtb	r0, r4
 80898b6:	4283      	cmp	r3, r0
 80898b8:	d908      	bls.n	80898cc <_Z19clearMultiUfsBufferv+0x24>
    memset(gxUFS[i].ufs_mbdata, 0, sizeof(gxUFS[i].ufs_mbdata));
 80898ba:	fb06 5000 	mla	r0, r6, r0, r5
 80898be:	220e      	movs	r2, #14
 80898c0:	2100      	movs	r1, #0
 80898c2:	3078      	adds	r0, #120	; 0x78
 80898c4:	f008 fafe 	bl	8091ec4 <memset>
  for (uint8_t i = 0; i < flDataConfig.num_of_fls; i++)
 80898c8:	3401      	adds	r4, #1
 80898ca:	e7f2      	b.n	80898b2 <_Z19clearMultiUfsBufferv+0xa>
  } 
}
 80898cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80898ce:	bf00      	nop
 80898d0:	20000e4a 	.word	0x20000e4a
 80898d4:	20000e50 	.word	0x20000e50

080898d8 <_Z18setFuelLevelMetricP6String>:

int setFuelLevelMetric(String *commandParameter)
{
 80898d8:	b538      	push	{r3, r4, r5, lr}
 80898da:	4604      	mov	r4, r0
  // Verify if configurations in the EEPROM are still valid
  if(validateConfigurations() == false)
 80898dc:	f003 fa4c 	bl	808cd78 <_Z22validateConfigurationsv>
 80898e0:	b300      	cbz	r0, 8089924 <_Z18setFuelLevelMetricP6String+0x4c>
  { return CONFIG_INVALID; }

  *commandParameter = commandParameter->toLowerCase();
 80898e2:	4620      	mov	r0, r4
 80898e4:	f006 fb8a 	bl	808fffc <_ZN6String11toLowerCaseEv>
 80898e8:	4601      	mov	r1, r0
 80898ea:	4620      	mov	r0, r4
 80898ec:	f006 fa0f 	bl	808fd0e <_ZN6StringaSERKS_>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80898f0:	4620      	mov	r0, r4
 80898f2:	490f      	ldr	r1, [pc, #60]	; (8089930 <_Z18setFuelLevelMetricP6String+0x58>)
 80898f4:	f006 fb43 	bl	808ff7e <_ZNK6String6equalsEPKc>

  if(*commandParameter == "voltage")
 80898f8:	4605      	mov	r5, r0
 80898fa:	b158      	cbz	r0, 8089914 <_Z18setFuelLevelMetricP6String+0x3c>
    flDataConfig.fl_data_type = UFS_VOLTAGE;
 80898fc:	2201      	movs	r2, #1
 80898fe:	4b0d      	ldr	r3, [pc, #52]	; (8089934 <_Z18setFuelLevelMetricP6String+0x5c>)
 8089900:	705a      	strb	r2, [r3, #1]
  else if (*commandParameter == "distance")
    flDataConfig.fl_data_type = UFS_DISTANCE;
  else return UFS_READ_ERROR;

  mainGXConfig.SELECTED_FUEL_LEVEL_METRIC = flDataConfig.fl_data_type;
 8089902:	4b0c      	ldr	r3, [pc, #48]	; (8089934 <_Z18setFuelLevelMetricP6String+0x5c>)
 8089904:	785a      	ldrb	r2, [r3, #1]
 8089906:	4b0c      	ldr	r3, [pc, #48]	; (8089938 <_Z18setFuelLevelMetricP6String+0x60>)
 8089908:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
  storeConfigurations();
 808990c:	f003 fa60 	bl	808cdd0 <_Z19storeConfigurationsv>
  return UFS_READ_SUCCESS;
 8089910:	2001      	movs	r0, #1
}
 8089912:	bd38      	pop	{r3, r4, r5, pc}
 8089914:	4620      	mov	r0, r4
 8089916:	4909      	ldr	r1, [pc, #36]	; (808993c <_Z18setFuelLevelMetricP6String+0x64>)
 8089918:	f006 fb31 	bl	808ff7e <_ZNK6String6equalsEPKc>
  else if (*commandParameter == "distance")
 808991c:	b128      	cbz	r0, 808992a <_Z18setFuelLevelMetricP6String+0x52>
    flDataConfig.fl_data_type = UFS_DISTANCE;
 808991e:	4b05      	ldr	r3, [pc, #20]	; (8089934 <_Z18setFuelLevelMetricP6String+0x5c>)
 8089920:	705d      	strb	r5, [r3, #1]
 8089922:	e7ee      	b.n	8089902 <_Z18setFuelLevelMetricP6String+0x2a>
  { return CONFIG_INVALID; }
 8089924:	f06f 0015 	mvn.w	r0, #21
 8089928:	e7f3      	b.n	8089912 <_Z18setFuelLevelMetricP6String+0x3a>
  else return UFS_READ_ERROR;
 808992a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 808992e:	e7f0      	b.n	8089912 <_Z18setFuelLevelMetricP6String+0x3a>
 8089930:	08093aa2 	.word	0x08093aa2
 8089934:	20000e4a 	.word	0x20000e4a
 8089938:	20001268 	.word	0x20001268
 808993c:	0809429a 	.word	0x0809429a

08089940 <_Z17setFuelLevelInputP6String>:

int setFuelLevelInput(String *commandParameter)
{
 8089940:	b538      	push	{r3, r4, r5, lr}
 8089942:	4604      	mov	r4, r0
  // Verify if configurations in the EEPROM are still valid
  if(validateConfigurations() == false)
 8089944:	f003 fa18 	bl	808cd78 <_Z22validateConfigurationsv>
 8089948:	b300      	cbz	r0, 808998c <_Z17setFuelLevelInputP6String+0x4c>
  { return CONFIG_INVALID; }
  
  *commandParameter = commandParameter->toLowerCase();
 808994a:	4620      	mov	r0, r4
 808994c:	f006 fb56 	bl	808fffc <_ZN6String11toLowerCaseEv>
 8089950:	4601      	mov	r1, r0
 8089952:	4620      	mov	r0, r4
 8089954:	f006 f9db 	bl	808fd0e <_ZN6StringaSERKS_>
 8089958:	4620      	mov	r0, r4
 808995a:	490f      	ldr	r1, [pc, #60]	; (8089998 <_Z17setFuelLevelInputP6String+0x58>)
 808995c:	f006 fb0f 	bl	808ff7e <_ZNK6String6equalsEPKc>

  if(*commandParameter == "digital")
 8089960:	4605      	mov	r5, r0
 8089962:	b158      	cbz	r0, 808997c <_Z17setFuelLevelInputP6String+0x3c>
    flDataConfig.fl_data_source = DIGITAL_INPUT;
 8089964:	2201      	movs	r2, #1
 8089966:	4b0d      	ldr	r3, [pc, #52]	; (808999c <_Z17setFuelLevelInputP6String+0x5c>)
 8089968:	701a      	strb	r2, [r3, #0]
  else if (*commandParameter == "analog")
    flDataConfig.fl_data_source = ANALOG_INPUT;
  else return UFS_READ_ERROR;

  mainGXConfig.SELECTED_FUEL_SENSOR = flDataConfig.fl_data_source;
 808996a:	4b0c      	ldr	r3, [pc, #48]	; (808999c <_Z17setFuelLevelInputP6String+0x5c>)
 808996c:	781a      	ldrb	r2, [r3, #0]
 808996e:	4b0c      	ldr	r3, [pc, #48]	; (80899a0 <_Z17setFuelLevelInputP6String+0x60>)
 8089970:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
  storeConfigurations();
 8089974:	f003 fa2c 	bl	808cdd0 <_Z19storeConfigurationsv>
  return UFS_READ_SUCCESS;
 8089978:	2001      	movs	r0, #1
}
 808997a:	bd38      	pop	{r3, r4, r5, pc}
 808997c:	4620      	mov	r0, r4
 808997e:	4909      	ldr	r1, [pc, #36]	; (80899a4 <_Z17setFuelLevelInputP6String+0x64>)
 8089980:	f006 fafd 	bl	808ff7e <_ZNK6String6equalsEPKc>
  else if (*commandParameter == "analog")
 8089984:	b128      	cbz	r0, 8089992 <_Z17setFuelLevelInputP6String+0x52>
    flDataConfig.fl_data_source = ANALOG_INPUT;
 8089986:	4b05      	ldr	r3, [pc, #20]	; (808999c <_Z17setFuelLevelInputP6String+0x5c>)
 8089988:	701d      	strb	r5, [r3, #0]
 808998a:	e7ee      	b.n	808996a <_Z17setFuelLevelInputP6String+0x2a>
  { return CONFIG_INVALID; }
 808998c:	f06f 0015 	mvn.w	r0, #21
 8089990:	e7f3      	b.n	808997a <_Z17setFuelLevelInputP6String+0x3a>
  else return UFS_READ_ERROR;
 8089992:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8089996:	e7f0      	b.n	808997a <_Z17setFuelLevelInputP6String+0x3a>
 8089998:	08093ad8 	.word	0x08093ad8
 808999c:	20000e4a 	.word	0x20000e4a
 80899a0:	20001268 	.word	0x20001268
 80899a4:	08093ae0 	.word	0x08093ae0

080899a8 <_Z21fetchUfsConfigurationv>:

void fetchUfsConfiguration()
{
 80899a8:	b507      	push	{r0, r1, r2, lr}
  // Read the Multi-ufs configuration from the EEPROM
  MultiUfsConfigs savedUfsConfig;
  savedUfsConfig = mainGXConfig.MULTI_UFS_SENSORS;
 80899aa:	4b13      	ldr	r3, [pc, #76]	; (80899f8 <_Z21fetchUfsConfigurationv+0x50>)
 80899ac:	6818      	ldr	r0, [r3, #0]
 80899ae:	889b      	ldrh	r3, [r3, #4]
 80899b0:	9000      	str	r0, [sp, #0]
  
  /* If the GX device is unconfigured, use the default UFS configuration. 
     Configure the GX to read from UFS-1 (i.e assume only UFS device is connected).
  */
  if ((savedUfsConfig.baud_rate < 0) || (savedUfsConfig.baud_rate >= TOTAL_BAUDRATES))
 80899b2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80899b6:	2806      	cmp	r0, #6
  savedUfsConfig = mainGXConfig.MULTI_UFS_SENSORS;
 80899b8:	f8ad 3004 	strh.w	r3, [sp, #4]
  if ((savedUfsConfig.baud_rate < 0) || (savedUfsConfig.baud_rate >= TOTAL_BAUDRATES))
 80899bc:	d908      	bls.n	80899d0 <_Z21fetchUfsConfigurationv+0x28>
  {
    Log.info("NEW DEVICE!! Use default UFS config");
 80899be:	490f      	ldr	r1, [pc, #60]	; (80899fc <_Z21fetchUfsConfigurationv+0x54>)
 80899c0:	480f      	ldr	r0, [pc, #60]	; (8089a00 <_Z21fetchUfsConfigurationv+0x58>)
 80899c2:	f7fb ffe7 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
    savedUfsConfig.baud_rate = 0;
    savedUfsConfig.slave_id[0] = 1;
    savedUfsConfig.no_of_ufs = 1;
 80899c6:	2301      	movs	r3, #1
 80899c8:	f8ad 3000 	strh.w	r3, [sp]
    savedUfsConfig.slave_id[0] = 1;
 80899cc:	f88d 3002 	strb.w	r3, [sp, #2]
  }
  
  // fetch previous selected metric
  flDataConfig.fl_data_type = mainGXConfig.SELECTED_FUEL_LEVEL_METRIC;
 80899d0:	4a0c      	ldr	r2, [pc, #48]	; (8089a04 <_Z21fetchUfsConfigurationv+0x5c>)
 80899d2:	4b0d      	ldr	r3, [pc, #52]	; (8089a08 <_Z21fetchUfsConfigurationv+0x60>)
 80899d4:	f892 1073 	ldrb.w	r1, [r2, #115]	; 0x73
  if ((flDataConfig.fl_data_type < 0) || (flDataConfig.fl_data_type > 1))
     flDataConfig.fl_data_type = UFS_VOLTAGE;

  // get selected fuel sensor input
  flDataConfig.fl_data_source = mainGXConfig.SELECTED_FUEL_SENSOR;
 80899d8:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
  if ((flDataConfig.fl_data_type < 0) || (flDataConfig.fl_data_type > 1))
 80899dc:	2901      	cmp	r1, #1
     flDataConfig.fl_data_type = UFS_VOLTAGE;
 80899de:	bf88      	it	hi
 80899e0:	2101      	movhi	r1, #1
  if ((flDataConfig.fl_data_source < 0) || (flDataConfig.fl_data_source > 1))
 80899e2:	2a01      	cmp	r2, #1
     flDataConfig.fl_data_source = ANALOG_INPUT;
 80899e4:	bf88      	it	hi
 80899e6:	2200      	movhi	r2, #0
 
  // Initialise the configured UFS devices
  initialiseMultiUFS(&savedUfsConfig);
 80899e8:	4668      	mov	r0, sp
     flDataConfig.fl_data_type = UFS_VOLTAGE;
 80899ea:	7059      	strb	r1, [r3, #1]
     flDataConfig.fl_data_source = ANALOG_INPUT;
 80899ec:	701a      	strb	r2, [r3, #0]
  initialiseMultiUFS(&savedUfsConfig);
 80899ee:	f7ff fe25 	bl	808963c <_Z18initialiseMultiUFSP15MultiUfsConfigs>
}
 80899f2:	b003      	add	sp, #12
 80899f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80899f8:	200012e8 	.word	0x200012e8
 80899fc:	080942a3 	.word	0x080942a3
 8089a00:	200015a4 	.word	0x200015a4
 8089a04:	20001268 	.word	0x20001268
 8089a08:	20000e4a 	.word	0x20000e4a

08089a0c <_Z17publishUfsConfigsv>:

int publishUfsConfigs()
{
 8089a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8089a10:	b092      	sub	sp, #72	; 0x48
  // Verify if configurations in the EEPROM are still valid
  if(validateConfigurations() == false)
 8089a12:	f003 f9b1 	bl	808cd78 <_Z22validateConfigurationsv>
 8089a16:	2800      	cmp	r0, #0
 8089a18:	f000 80b4 	beq.w	8089b84 <_Z17publishUfsConfigsv+0x178>
  { return CONFIG_INVALID; }

  String jsonString_ = String("{\"v\": \"2\",\n\"ufs_config\": {\n");
  if (flDataConfig.fl_data_source == ANALOG_INPUT)
 8089a1c:	4e5b      	ldr	r6, [pc, #364]	; (8089b8c <_Z17publishUfsConfigsv+0x180>)
  String jsonString_ = String("{\"v\": \"2\",\n\"ufs_config\": {\n");
 8089a1e:	495c      	ldr	r1, [pc, #368]	; (8089b90 <_Z17publishUfsConfigsv+0x184>)
 8089a20:	a802      	add	r0, sp, #8
 8089a22:	f006 f939 	bl	808fc98 <_ZN6StringC1EPKc>
  if (flDataConfig.fl_data_source == ANALOG_INPUT)
 8089a26:	7833      	ldrb	r3, [r6, #0]
 8089a28:	2b00      	cmp	r3, #0
 8089a2a:	d12d      	bne.n	8089a88 <_Z17publishUfsConfigsv+0x7c>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8089a2c:	4959      	ldr	r1, [pc, #356]	; (8089b94 <_Z17publishUfsConfigsv+0x188>)
 8089a2e:	a802      	add	r0, sp, #8
 8089a30:	f006 fa47 	bl	808fec2 <_ZN6String6concatEPKc>
 8089a34:	4958      	ldr	r1, [pc, #352]	; (8089b98 <_Z17publishUfsConfigsv+0x18c>)
 8089a36:	a802      	add	r0, sp, #8
 8089a38:	f006 fa43 	bl	808fec2 <_ZN6String6concatEPKc>
    return Flags<TagT, ValueT>(val_ | flags.val_);
 8089a3c:	4b57      	ldr	r3, [pc, #348]	; (8089b9c <_Z17publishUfsConfigsv+0x190>)
 8089a3e:	4a58      	ldr	r2, [pc, #352]	; (8089ba0 <_Z17publishUfsConfigsv+0x194>)
 8089a40:	781b      	ldrb	r3, [r3, #0]
 8089a42:	7812      	ldrb	r2, [r2, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8089a44:	4957      	ldr	r1, [pc, #348]	; (8089ba4 <_Z17publishUfsConfigsv+0x198>)
 8089a46:	4313      	orrs	r3, r2
 8089a48:	f88d 3000 	strb.w	r3, [sp]
 8089a4c:	9a02      	ldr	r2, [sp, #8]
 8089a4e:	233c      	movs	r3, #60	; 0x3c
 8089a50:	a80e      	add	r0, sp, #56	; 0x38
 8089a52:	f003 ffe9 	bl	808da28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
 8089a56:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8089a58:	b17c      	cbz	r4, 8089a7a <_Z17publishUfsConfigsv+0x6e>
      if (--_M_use_count == 0)
 8089a5a:	6863      	ldr	r3, [r4, #4]
 8089a5c:	3b01      	subs	r3, #1
 8089a5e:	6063      	str	r3, [r4, #4]
 8089a60:	b95b      	cbnz	r3, 8089a7a <_Z17publishUfsConfigsv+0x6e>
          _M_dispose();
 8089a62:	6823      	ldr	r3, [r4, #0]
 8089a64:	4620      	mov	r0, r4
 8089a66:	689b      	ldr	r3, [r3, #8]
 8089a68:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8089a6a:	68a3      	ldr	r3, [r4, #8]
 8089a6c:	3b01      	subs	r3, #1
 8089a6e:	60a3      	str	r3, [r4, #8]
 8089a70:	b91b      	cbnz	r3, 8089a7a <_Z17publishUfsConfigsv+0x6e>
            _M_destroy();
 8089a72:	6823      	ldr	r3, [r4, #0]
 8089a74:	4620      	mov	r0, r4
 8089a76:	68db      	ldr	r3, [r3, #12]
 8089a78:	4798      	blx	r3
  String jsonString_ = String("{\"v\": \"2\",\n\"ufs_config\": {\n");
 8089a7a:	a802      	add	r0, sp, #8
 8089a7c:	f006 f8c2 	bl	808fc04 <_ZN6StringD1Ev>
    }
  }

  jsonString_ += "}\n}";
  Particle.publish("gx_event", jsonString_, PRIVATE, WITH_ACK);
  return 1;
 8089a80:	2001      	movs	r0, #1
}
 8089a82:	b012      	add	sp, #72	; 0x48
 8089a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if(flDataConfig.fl_data_source == DIGITAL_INPUT)
 8089a88:	2b01      	cmp	r3, #1
 8089a8a:	d1d3      	bne.n	8089a34 <_Z17publishUfsConfigsv+0x28>
 8089a8c:	4946      	ldr	r1, [pc, #280]	; (8089ba8 <_Z17publishUfsConfigsv+0x19c>)
 8089a8e:	a802      	add	r0, sp, #8
 8089a90:	f006 fa17 	bl	808fec2 <_ZN6String6concatEPKc>
    if (flDataConfig.fl_data_type == UFS_VOLTAGE)
 8089a94:	7873      	ldrb	r3, [r6, #1]
 8089a96:	2b01      	cmp	r3, #1
 8089a98:	d170      	bne.n	8089b7c <_Z17publishUfsConfigsv+0x170>
 8089a9a:	4944      	ldr	r1, [pc, #272]	; (8089bac <_Z17publishUfsConfigsv+0x1a0>)
 8089a9c:	a802      	add	r0, sp, #8
 8089a9e:	f006 fa10 	bl	808fec2 <_ZN6String6concatEPKc>
    jsonString_ += ",\"Baud\": \"" + String(gxUFS[0].baud_rate) + "\""; // append baud rate
 8089aa2:	4c43      	ldr	r4, [pc, #268]	; (8089bb0 <_Z17publishUfsConfigsv+0x1a4>)
	StringSumHelper(const char *p) : String(p) {}
 8089aa4:	4943      	ldr	r1, [pc, #268]	; (8089bb4 <_Z17publishUfsConfigsv+0x1a8>)
 8089aa6:	a80e      	add	r0, sp, #56	; 0x38
 8089aa8:	f006 f8f6 	bl	808fc98 <_ZN6StringC1EPKc>
 8089aac:	220a      	movs	r2, #10
 8089aae:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8089ab0:	a80a      	add	r0, sp, #40	; 0x28
 8089ab2:	f006 f9aa 	bl	808fe0a <_ZN6StringC1Emh>
 8089ab6:	a90a      	add	r1, sp, #40	; 0x28
 8089ab8:	a80e      	add	r0, sp, #56	; 0x38
 8089aba:	f006 fa1e 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 8089abe:	493e      	ldr	r1, [pc, #248]	; (8089bb8 <_Z17publishUfsConfigsv+0x1ac>)
 8089ac0:	f006 fa27 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 8089ac4:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8089ac6:	a802      	add	r0, sp, #8
 8089ac8:	f006 f9f7 	bl	808feba <_ZN6String6concatERKS_>
 8089acc:	a80a      	add	r0, sp, #40	; 0x28
 8089ace:	f006 f899 	bl	808fc04 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8089ad2:	a80e      	add	r0, sp, #56	; 0x38
 8089ad4:	f006 f896 	bl	808fc04 <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
 8089ad8:	4938      	ldr	r1, [pc, #224]	; (8089bbc <_Z17publishUfsConfigsv+0x1b0>)
 8089ada:	a80e      	add	r0, sp, #56	; 0x38
 8089adc:	f006 f8dc 	bl	808fc98 <_ZN6StringC1EPKc>
    jsonString_ += ",\"ufs_no\": \"" + String(flDataConfig.num_of_fls) +"\"";        // append number of configured fuel sensors
 8089ae0:	220a      	movs	r2, #10
 8089ae2:	78b1      	ldrb	r1, [r6, #2]
 8089ae4:	a80a      	add	r0, sp, #40	; 0x28
 8089ae6:	f006 f945 	bl	808fd74 <_ZN6StringC1Ehh>
 8089aea:	a90a      	add	r1, sp, #40	; 0x28
 8089aec:	a80e      	add	r0, sp, #56	; 0x38
 8089aee:	f006 fa04 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 8089af2:	4931      	ldr	r1, [pc, #196]	; (8089bb8 <_Z17publishUfsConfigsv+0x1ac>)
 8089af4:	f006 fa0d 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 8089af8:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8089afa:	a802      	add	r0, sp, #8
 8089afc:	f006 f9dd 	bl	808feba <_ZN6String6concatERKS_>
 8089b00:	a80a      	add	r0, sp, #40	; 0x28
 8089b02:	f006 f87f 	bl	808fc04 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8089b06:	a80e      	add	r0, sp, #56	; 0x38
 8089b08:	f006 f87c 	bl	808fc04 <_ZN6StringD1Ev>
    for(int i =0; i < flDataConfig.num_of_fls; i++)
 8089b0c:	2700      	movs	r7, #0
	StringSumHelper(const char *p) : String(p) {}
 8089b0e:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 8089bc4 <_Z17publishUfsConfigsv+0x1b8>
      jsonString_ += ",\"ufs_id" + String(i+1) + "\": \"" + String(gxUFS[i].slave_id) +"\"";
 8089b12:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8089bc8 <_Z17publishUfsConfigsv+0x1bc>
 8089b16:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8089bb8 <_Z17publishUfsConfigsv+0x1ac>
    for(int i =0; i < flDataConfig.num_of_fls; i++)
 8089b1a:	78b3      	ldrb	r3, [r6, #2]
 8089b1c:	3488      	adds	r4, #136	; 0x88
 8089b1e:	42bb      	cmp	r3, r7
 8089b20:	dd88      	ble.n	8089a34 <_Z17publishUfsConfigsv+0x28>
 8089b22:	4651      	mov	r1, sl
 8089b24:	a80a      	add	r0, sp, #40	; 0x28
      jsonString_ += ",\"ufs_id" + String(i+1) + "\": \"" + String(gxUFS[i].slave_id) +"\"";
 8089b26:	3701      	adds	r7, #1
 8089b28:	f006 f8b6 	bl	808fc98 <_ZN6StringC1EPKc>
 8089b2c:	220a      	movs	r2, #10
 8089b2e:	4639      	mov	r1, r7
 8089b30:	a806      	add	r0, sp, #24
 8089b32:	f006 f931 	bl	808fd98 <_ZN6StringC1Eih>
 8089b36:	a906      	add	r1, sp, #24
 8089b38:	a80a      	add	r0, sp, #40	; 0x28
 8089b3a:	f006 f9de 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 8089b3e:	4649      	mov	r1, r9
 8089b40:	f006 f9e7 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 8089b44:	4605      	mov	r5, r0
 8089b46:	220a      	movs	r2, #10
 8089b48:	f814 1c18 	ldrb.w	r1, [r4, #-24]
 8089b4c:	a80e      	add	r0, sp, #56	; 0x38
 8089b4e:	f006 f911 	bl	808fd74 <_ZN6StringC1Ehh>
 8089b52:	a90e      	add	r1, sp, #56	; 0x38
 8089b54:	4628      	mov	r0, r5
 8089b56:	f006 f9d0 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 8089b5a:	4641      	mov	r1, r8
 8089b5c:	f006 f9d9 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 8089b60:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8089b62:	a802      	add	r0, sp, #8
 8089b64:	f006 f9a9 	bl	808feba <_ZN6String6concatERKS_>
 8089b68:	a80e      	add	r0, sp, #56	; 0x38
 8089b6a:	f006 f84b 	bl	808fc04 <_ZN6StringD1Ev>
 8089b6e:	a806      	add	r0, sp, #24
 8089b70:	f006 f848 	bl	808fc04 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8089b74:	a80a      	add	r0, sp, #40	; 0x28
 8089b76:	f006 f845 	bl	808fc04 <_ZN6StringD1Ev>
    for(int i =0; i < flDataConfig.num_of_fls; i++)
 8089b7a:	e7ce      	b.n	8089b1a <_Z17publishUfsConfigsv+0x10e>
    else if (flDataConfig.fl_data_type == UFS_DISTANCE)
 8089b7c:	2b00      	cmp	r3, #0
 8089b7e:	d190      	bne.n	8089aa2 <_Z17publishUfsConfigsv+0x96>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8089b80:	490f      	ldr	r1, [pc, #60]	; (8089bc0 <_Z17publishUfsConfigsv+0x1b4>)
 8089b82:	e78b      	b.n	8089a9c <_Z17publishUfsConfigsv+0x90>
  { return CONFIG_INVALID; }
 8089b84:	f06f 0015 	mvn.w	r0, #21
 8089b88:	e77b      	b.n	8089a82 <_Z17publishUfsConfigsv+0x76>
 8089b8a:	bf00      	nop
 8089b8c:	20000e4a 	.word	0x20000e4a
 8089b90:	080942c7 	.word	0x080942c7
 8089b94:	080942e3 	.word	0x080942e3
 8089b98:	0809437d 	.word	0x0809437d
 8089b9c:	20000e48 	.word	0x20000e48
 8089ba0:	20000e49 	.word	0x20000e49
 8089ba4:	0809386b 	.word	0x0809386b
 8089ba8:	080942ff 	.word	0x080942ff
 8089bac:	0809431c 	.word	0x0809431c
 8089bb0:	20000e50 	.word	0x20000e50
 8089bb4:	0809435c 	.word	0x0809435c
 8089bb8:	080938bf 	.word	0x080938bf
 8089bbc:	08094367 	.word	0x08094367
 8089bc0:	0809433b 	.word	0x0809433b
 8089bc4:	08094374 	.word	0x08094374
 8089bc8:	08094362 	.word	0x08094362

08089bcc <_GLOBAL__sub_I_ufs_mbdata>:
        val_(val) {
 8089bcc:	2201      	movs	r2, #1
}
 8089bce:	b538      	push	{r3, r4, r5, lr}
 8089bd0:	4b0a      	ldr	r3, [pc, #40]	; (8089bfc <_GLOBAL__sub_I_ufs_mbdata+0x30>)
 8089bd2:	2400      	movs	r4, #0
 8089bd4:	701a      	strb	r2, [r3, #0]
 8089bd6:	2208      	movs	r2, #8
 8089bd8:	4b09      	ldr	r3, [pc, #36]	; (8089c00 <_GLOBAL__sub_I_ufs_mbdata+0x34>)
UFS gxUFS[MAXIMUM_UFS];
 8089bda:	4d0a      	ldr	r5, [pc, #40]	; (8089c04 <_GLOBAL__sub_I_ufs_mbdata+0x38>)
 8089bdc:	701a      	strb	r2, [r3, #0]
 8089bde:	1928      	adds	r0, r5, r4
 8089be0:	3488      	adds	r4, #136	; 0x88
 8089be2:	f7ff fcec 	bl	80895be <_ZN3UFSC1Ev>
 8089be6:	f5b4 7f08 	cmp.w	r4, #544	; 0x220
 8089bea:	d1f8      	bne.n	8089bde <_GLOBAL__sub_I_ufs_mbdata+0x12>
}
 8089bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
UFS gxUFS[MAXIMUM_UFS];
 8089bf0:	2000      	movs	r0, #0
 8089bf2:	4a05      	ldr	r2, [pc, #20]	; (8089c08 <_GLOBAL__sub_I_ufs_mbdata+0x3c>)
 8089bf4:	4905      	ldr	r1, [pc, #20]	; (8089c0c <_GLOBAL__sub_I_ufs_mbdata+0x40>)
 8089bf6:	f006 bef1 	b.w	80909dc <__aeabi_atexit>
 8089bfa:	bf00      	nop
 8089bfc:	20000e48 	.word	0x20000e48
 8089c00:	20000e49 	.word	0x20000e49
 8089c04:	20000e50 	.word	0x20000e50
 8089c08:	200005b0 	.word	0x200005b0
 8089c0c:	080895bd 	.word	0x080895bd

08089c10 <_Z14binaryInputISRv>:

}

void binaryInputISR()
{
  check_binary_inputs = true;
 8089c10:	2201      	movs	r2, #1
 8089c12:	4b01      	ldr	r3, [pc, #4]	; (8089c18 <_Z14binaryInputISRv+0x8>)
 8089c14:	701a      	strb	r2, [r3, #0]
}
 8089c16:	4770      	bx	lr
 8089c18:	20001178 	.word	0x20001178

08089c1c <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 8089c1c:	6803      	ldr	r3, [r0, #0]
 8089c1e:	4718      	bx	r3

08089c20 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
 8089c20:	2a01      	cmp	r2, #1
 8089c22:	d003      	beq.n	8089c2c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
 8089c24:	2a02      	cmp	r2, #2
 8089c26:	d003      	beq.n	8089c30 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
 8089c28:	2000      	movs	r0, #0
 8089c2a:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8089c2c:	6001      	str	r1, [r0, #0]
	      break;
 8089c2e:	e7fb      	b.n	8089c28 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8089c30:	680b      	ldr	r3, [r1, #0]
 8089c32:	6003      	str	r3, [r0, #0]
	}
 8089c34:	e7f8      	b.n	8089c28 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

08089c36 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
 8089c36:	6943      	ldr	r3, [r0, #20]
 8089c38:	b113      	cbz	r3, 8089c40 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8089c3a:	6983      	ldr	r3, [r0, #24]
 8089c3c:	300c      	adds	r0, #12
 8089c3e:	4718      	bx	r3
            callback();
        }
    }
 8089c40:	4770      	bx	lr
	...

08089c44 <_ZN15SpiFlashWinbondD1Ev>:
};

/**
 * @brief Class for Winbond W25Qxx modules of various sizes
 */
class SpiFlashWinbond : public SpiFlash {
 8089c44:	b510      	push	{r4, lr}
 8089c46:	4604      	mov	r4, r0
 8089c48:	4b02      	ldr	r3, [pc, #8]	; (8089c54 <_ZN15SpiFlashWinbondD1Ev+0x10>)
 8089c4a:	6003      	str	r3, [r0, #0]
 8089c4c:	f002 fbec 	bl	808c428 <_ZN8SpiFlashD1Ev>
 8089c50:	4620      	mov	r0, r4
 8089c52:	bd10      	pop	{r4, pc}
 8089c54:	08094964 	.word	0x08094964

08089c58 <_ZN15SpiFlashWinbondD0Ev>:
 8089c58:	b510      	push	{r4, lr}
 8089c5a:	4604      	mov	r4, r0
 8089c5c:	f7ff fff2 	bl	8089c44 <_ZN15SpiFlashWinbondD1Ev>
 8089c60:	4620      	mov	r0, r4
 8089c62:	2130      	movs	r1, #48	; 0x30
 8089c64:	f006 febf 	bl	80909e6 <_ZdlPvj>
 8089c68:	4620      	mov	r0, r4
 8089c6a:	bd10      	pop	{r4, pc}

08089c6c <_ZN17Adafruit_MAX31865D1Ev>:
  MAX31865_3WIRE = 1,
  MAX31865_4WIRE = 0
} max31865_numwires_t;

/*! Interface class for the MAX31865 RTD Sensor reader */
class Adafruit_MAX31865 {
 8089c6c:	b510      	push	{r4, lr}
 8089c6e:	4604      	mov	r4, r0
 8089c70:	f7fb f8a4 	bl	8084dbc <_ZN18Adafruit_SPIDeviceD1Ev>
 8089c74:	4620      	mov	r0, r4
 8089c76:	bd10      	pop	{r4, pc}

08089c78 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
 8089c78:	b513      	push	{r0, r1, r4, lr}
        os_thread_scheduling(false, NULL);
 8089c7a:	2100      	movs	r1, #0
 8089c7c:	4604      	mov	r4, r0
 8089c7e:	4608      	mov	r0, r1
 8089c80:	f003 f8e4 	bl	808ce4c <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
 8089c84:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
 8089c86:	4620      	mov	r0, r4
 8089c88:	a901      	add	r1, sp, #4
            void* id = nullptr;
 8089c8a:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
 8089c8c:	f003 f8f6 	bl	808ce7c <os_timer_get_id>
            t = static_cast<Timer*>(id);
 8089c90:	9c01      	ldr	r4, [sp, #4]
            if (t) {
 8089c92:	b10c      	cbz	r4, 8089c98 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
 8089c94:	2301      	movs	r3, #1
 8089c96:	7123      	strb	r3, [r4, #4]
        os_thread_scheduling(true, NULL);
 8089c98:	2100      	movs	r1, #0
 8089c9a:	2001      	movs	r0, #1
 8089c9c:	f003 f8d6 	bl	808ce4c <os_thread_scheduling>
            }
        }
        if (t) {
 8089ca0:	b12c      	cbz	r4, 8089cae <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
 8089ca2:	6823      	ldr	r3, [r4, #0]
 8089ca4:	4620      	mov	r0, r4
 8089ca6:	689b      	ldr	r3, [r3, #8]
 8089ca8:	4798      	blx	r3
            t->running = false;
 8089caa:	2300      	movs	r3, #0
 8089cac:	7123      	strb	r3, [r4, #4]
        }
    }
 8089cae:	b002      	add	sp, #8
 8089cb0:	bd10      	pop	{r4, pc}

08089cb2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 8089cb2:	b510      	push	{r4, lr}
 8089cb4:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8089cb6:	6800      	ldr	r0, [r0, #0]
 8089cb8:	b108      	cbz	r0, 8089cbe <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 8089cba:	f003 fc35 	bl	808d528 <free>
class SystemClass {
 8089cbe:	4620      	mov	r0, r4
 8089cc0:	bd10      	pop	{r4, pc}

08089cc2 <_ZN10CloudClass8variableIA3_cJPbRK17CloudVariableTypeIbvEEEEbRKT_DpOT0_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 8089cc2:	2300      	movs	r3, #0
 8089cc4:	2201      	movs	r2, #1
 8089cc6:	f003 bb7f 	b.w	808d3c8 <spark_variable>

08089cca <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 8089cca:	b510      	push	{r4, lr}
      if (_M_manager)
 8089ccc:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 8089cce:	4604      	mov	r4, r0
      if (_M_manager)
 8089cd0:	b113      	cbz	r3, 8089cd8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8089cd2:	2203      	movs	r2, #3
 8089cd4:	4601      	mov	r1, r0
 8089cd6:	4798      	blx	r3
    }
 8089cd8:	4620      	mov	r0, r4
 8089cda:	bd10      	pop	{r4, pc}

08089cdc <_ZN10CloudClass9keepAliveEj>:
    inline static void keepAlive(unsigned sec)
 8089cdc:	b507      	push	{r0, r1, r2, lr}
        conn_prop.size = sizeof(conn_prop);
 8089cde:	2208      	movs	r2, #8
        particle::protocol::connection_properties_t conn_prop = {0};
 8089ce0:	2300      	movs	r3, #0
        conn_prop.size = sizeof(conn_prop);
 8089ce2:	f8ad 2000 	strh.w	r2, [sp]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
 8089ce6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
 8089cea:	2201      	movs	r2, #1
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
 8089cec:	4341      	muls	r1, r0
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
 8089cee:	9201      	str	r2, [sp, #4]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
 8089cf0:	4618      	mov	r0, r3
 8089cf2:	466a      	mov	r2, sp
        particle::protocol::connection_properties_t conn_prop = {0};
 8089cf4:	f8ad 3002 	strh.w	r3, [sp, #2]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
 8089cf8:	f003 fb9e 	bl	808d438 <spark_set_connection_property>
    }
 8089cfc:	b003      	add	sp, #12
 8089cfe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08089d04 <_Z15connectionStateyi>:
  return true;
}

void connectionState(system_event_t event, int param)
{
  if (param == cloud_status_connected)
 8089d04:	2a08      	cmp	r2, #8
{
 8089d06:	b508      	push	{r3, lr}
  if (param == cloud_status_connected)
 8089d08:	d106      	bne.n	8089d18 <_Z15connectionStateyi+0x14>
  {
    Particle.keepAlive(KEEP_ALIVE_PERIOD);
 8089d0a:	205a      	movs	r0, #90	; 0x5a
 8089d0c:	f7ff ffe6 	bl	8089cdc <_ZN10CloudClass9keepAliveEj>
    cloudLed.led_mode = LED_SOLID;
 8089d10:	2201      	movs	r2, #1
 8089d12:	4b04      	ldr	r3, [pc, #16]	; (8089d24 <_Z15connectionStateyi+0x20>)
  }

  if (param == cloud_status_disconnected)
    cloudLed.led_mode = LED_BLINK;
 8089d14:	721a      	strb	r2, [r3, #8]
}
 8089d16:	bd08      	pop	{r3, pc}
  if (param == cloud_status_disconnected)
 8089d18:	2a00      	cmp	r2, #0
 8089d1a:	d1fc      	bne.n	8089d16 <_Z15connectionStateyi+0x12>
    cloudLed.led_mode = LED_BLINK;
 8089d1c:	2202      	movs	r2, #2
 8089d1e:	4b01      	ldr	r3, [pc, #4]	; (8089d24 <_Z15connectionStateyi+0x20>)
 8089d20:	e7f8      	b.n	8089d14 <_Z15connectionStateyi+0x10>
 8089d22:	bf00      	nop
 8089d24:	2000117c 	.word	0x2000117c

08089d28 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 8089d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8089d2a:	2500      	movs	r5, #0
 8089d2c:	4604      	mov	r4, r0
 8089d2e:	468c      	mov	ip, r1
 8089d30:	b085      	sub	sp, #20
 8089d32:	4913      	ldr	r1, [pc, #76]	; (8089d80 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8089d34:	af02      	add	r7, sp, #8
 8089d36:	7105      	strb	r5, [r0, #4]
 8089d38:	6085      	str	r5, [r0, #8]
 8089d3a:	6001      	str	r1, [r0, #0]
 8089d3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8089d40:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8089d44:	f104 060c 	add.w	r6, r4, #12
 8089d48:	e896 0003 	ldmia.w	r6, {r0, r1}
 8089d4c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8089d50:	e897 0003 	ldmia.w	r7, {r0, r1}
 8089d54:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8089d58:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
 8089d5a:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
 8089d5c:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8089d5e:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
 8089d60:	6095      	str	r5, [r2, #8]
 8089d62:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8089d64:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 8089d66:	e9cd 3500 	strd	r3, r5, [sp]
 8089d6a:	4661      	mov	r1, ip
 8089d6c:	4623      	mov	r3, r4
 8089d6e:	4a05      	ldr	r2, [pc, #20]	; (8089d84 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
 8089d70:	f104 0008 	add.w	r0, r4, #8
 8089d74:	f003 f872 	bl	808ce5c <os_timer_create>
    }
 8089d78:	4620      	mov	r0, r4
 8089d7a:	b005      	add	sp, #20
 8089d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089d7e:	bf00      	nop
 8089d80:	08094950 	.word	0x08094950
 8089d84:	08089c79 	.word	0x08089c79

08089d88 <_ZN5Timer5_stopEjb>:
    bool _stop(unsigned block, bool fromISR=false)
 8089d88:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 8089d8a:	6880      	ldr	r0, [r0, #8]
 8089d8c:	2300      	movs	r3, #0
 8089d8e:	b138      	cbz	r0, 8089da0 <_ZN5Timer5_stopEjb+0x18>
 8089d90:	e9cd 1300 	strd	r1, r3, [sp]
 8089d94:	2102      	movs	r1, #2
 8089d96:	f003 f879 	bl	808ce8c <os_timer_change>
 8089d9a:	fab0 f080 	clz	r0, r0
 8089d9e:	0940      	lsrs	r0, r0, #5
    }
 8089da0:	b003      	add	sp, #12
 8089da2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08089da8 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
 8089da8:	b538      	push	{r3, r4, r5, lr}
 8089daa:	4b10      	ldr	r3, [pc, #64]	; (8089dec <_ZN5TimerD1Ev+0x44>)
 8089dac:	4604      	mov	r4, r0
 8089dae:	6003      	str	r3, [r0, #0]
        if (handle) {
 8089db0:	6883      	ldr	r3, [r0, #8]
 8089db2:	b1a3      	cbz	r3, 8089dde <_ZN5TimerD1Ev+0x36>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 8089db4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8089db8:	2200      	movs	r2, #0
 8089dba:	f7ff ffe5 	bl	8089d88 <_ZN5Timer5_stopEjb>
            os_timer_set_id(handle, nullptr);
 8089dbe:	2100      	movs	r1, #0
 8089dc0:	68a0      	ldr	r0, [r4, #8]
 8089dc2:	f003 f8a3 	bl	808cf0c <os_timer_set_id>
            while (running) {
 8089dc6:	7923      	ldrb	r3, [r4, #4]
 8089dc8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8089dcc:	b113      	cbz	r3, 8089dd4 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
 8089dce:	f003 f835 	bl	808ce3c <os_thread_yield>
            while (running) {
 8089dd2:	e7f8      	b.n	8089dc6 <_ZN5TimerD1Ev+0x1e>
            os_timer_destroy(handle, nullptr);
 8089dd4:	4629      	mov	r1, r5
 8089dd6:	68a0      	ldr	r0, [r4, #8]
 8089dd8:	f003 f848 	bl	808ce6c <os_timer_destroy>
            handle = nullptr;
 8089ddc:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
 8089dde:	f104 000c 	add.w	r0, r4, #12
 8089de2:	f7ff ff72 	bl	8089cca <_ZNSt14_Function_baseD1Ev>
    }
 8089de6:	4620      	mov	r0, r4
 8089de8:	bd38      	pop	{r3, r4, r5, pc}
 8089dea:	bf00      	nop
 8089dec:	08094950 	.word	0x08094950

08089df0 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
 8089df0:	b510      	push	{r4, lr}
 8089df2:	4604      	mov	r4, r0
    }
 8089df4:	f7ff ffd8 	bl	8089da8 <_ZN5TimerD1Ev>
 8089df8:	4620      	mov	r0, r4
 8089dfa:	211c      	movs	r1, #28
 8089dfc:	f006 fdf3 	bl	80909e6 <_ZdlPvj>
 8089e00:	4620      	mov	r0, r4
 8089e02:	bd10      	pop	{r4, pc}

08089e04 <_Z11runCellTestv>:
{
 8089e04:	b570      	push	{r4, r5, r6, lr}
 8089e06:	4604      	mov	r4, r0
  Log.info("Running Cellular Tests: ");
 8089e08:	4d2b      	ldr	r5, [pc, #172]	; (8089eb8 <_Z11runCellTestv+0xb4>)
  String cellOperator = CellularHelper.getOperatorName();
 8089e0a:	4e2c      	ldr	r6, [pc, #176]	; (8089ebc <_Z11runCellTestv+0xb8>)
{
 8089e0c:	b09c      	sub	sp, #112	; 0x70
  Log.info("Running Cellular Tests: ");
 8089e0e:	4628      	mov	r0, r5
 8089e10:	492b      	ldr	r1, [pc, #172]	; (8089ec0 <_Z11runCellTestv+0xbc>)
 8089e12:	f7fb fdbf 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
  String cellOperator = CellularHelper.getOperatorName();
 8089e16:	2209      	movs	r2, #9
 8089e18:	4631      	mov	r1, r6
 8089e1a:	4620      	mov	r0, r4
 8089e1c:	f001 fcd2 	bl	808b7c4 <_ZNK19CellularHelperClass15getOperatorNameEi>
	StringSumHelper(const char *p) : String(p) {}
 8089e20:	4928      	ldr	r1, [pc, #160]	; (8089ec4 <_Z11runCellTestv+0xc0>)
 8089e22:	a80b      	add	r0, sp, #44	; 0x2c
 8089e24:	f005 ff38 	bl	808fc98 <_ZN6StringC1EPKc>
  Log.info("Operator name=" + cellOperator);
 8089e28:	4621      	mov	r1, r4
 8089e2a:	a80b      	add	r0, sp, #44	; 0x2c
 8089e2c:	f006 f865 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 8089e30:	6801      	ldr	r1, [r0, #0]
 8089e32:	4628      	mov	r0, r5
 8089e34:	f7fb fdae 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
 8089e38:	a80b      	add	r0, sp, #44	; 0x2c
 8089e3a:	f005 fee3 	bl	808fc04 <_ZN6StringD1Ev>
  CellularHelperRSSIQualResponse rssiQual = CellularHelper.getRSSIQual();
 8089e3e:	4631      	mov	r1, r6
 8089e40:	a80b      	add	r0, sp, #44	; 0x2c
 8089e42:	f001 fcf1 	bl	808b828 <_ZNK19CellularHelperClass11getRSSIQualEv>
  int bars = CellularHelperClass::rssiToBars(rssiQual.rssi);
 8089e46:	981a      	ldr	r0, [sp, #104]	; 0x68
 8089e48:	f001 fd8e 	bl	808b968 <_ZN19CellularHelperClass10rssiToBarsEi>
  Log.info("rssi=%d, qual=%d, bars=%d", rssiQual.rssi, rssiQual.qual, bars);
 8089e4c:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8089e50:	9000      	str	r0, [sp, #0]
 8089e52:	4628      	mov	r0, r5
	StringSumHelper(const char *p) : String(p) {}
 8089e54:	4d1c      	ldr	r5, [pc, #112]	; (8089ec8 <_Z11runCellTestv+0xc4>)
 8089e56:	491d      	ldr	r1, [pc, #116]	; (8089ecc <_Z11runCellTestv+0xc8>)
 8089e58:	f7fb fd9c 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
 8089e5c:	4629      	mov	r1, r5
 8089e5e:	a803      	add	r0, sp, #12
  int cellRSSI = rssiQual.rssi;
 8089e60:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8089e62:	f005 ff19 	bl	808fc98 <_ZN6StringC1EPKc>
  cellOperator = ":" + cellOperator + ":" + String(cellRSSI);
 8089e66:	4621      	mov	r1, r4
 8089e68:	a803      	add	r0, sp, #12
 8089e6a:	f006 f846 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 8089e6e:	4629      	mov	r1, r5
 8089e70:	f006 f84f 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 8089e74:	4605      	mov	r5, r0
 8089e76:	220a      	movs	r2, #10
 8089e78:	4631      	mov	r1, r6
 8089e7a:	a807      	add	r0, sp, #28
 8089e7c:	f005 ff8c 	bl	808fd98 <_ZN6StringC1Eih>
 8089e80:	a907      	add	r1, sp, #28
 8089e82:	4628      	mov	r0, r5
 8089e84:	f006 f839 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 8089e88:	4601      	mov	r1, r0
 8089e8a:	4620      	mov	r0, r4
 8089e8c:	f005 ff3f 	bl	808fd0e <_ZN6StringaSERKS_>
 8089e90:	a807      	add	r0, sp, #28
 8089e92:	f005 feb7 	bl	808fc04 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8089e96:	a803      	add	r0, sp, #12
 8089e98:	f005 feb4 	bl	808fc04 <_ZN6StringD1Ev>
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8089e9c:	4b0c      	ldr	r3, [pc, #48]	; (8089ed0 <_Z11runCellTestv+0xcc>)
 8089e9e:	a816      	add	r0, sp, #88	; 0x58
 8089ea0:	930b      	str	r3, [sp, #44]	; 0x2c
 8089ea2:	f005 feaf 	bl	808fc04 <_ZN6StringD1Ev>
 8089ea6:	a812      	add	r0, sp, #72	; 0x48
 8089ea8:	f005 feac 	bl	808fc04 <_ZN6StringD1Ev>
 8089eac:	a80e      	add	r0, sp, #56	; 0x38
 8089eae:	f005 fea9 	bl	808fc04 <_ZN6StringD1Ev>
}
 8089eb2:	4620      	mov	r0, r4
 8089eb4:	b01c      	add	sp, #112	; 0x70
 8089eb6:	bd70      	pop	{r4, r5, r6, pc}
 8089eb8:	200015a4 	.word	0x200015a4
 8089ebc:	20001430 	.word	0x20001430
 8089ec0:	08094381 	.word	0x08094381
 8089ec4:	0809439a 	.word	0x0809439a
 8089ec8:	08093bfa 	.word	0x08093bfa
 8089ecc:	080943a9 	.word	0x080943a9
 8089ed0:	08094b08 	.word	0x08094b08

08089ed4 <_Z19readMultiUfsMetricsv>:
{
 8089ed4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (iterator > 8) iterator = 0;
 8089ed8:	4d25      	ldr	r5, [pc, #148]	; (8089f70 <_Z19readMultiUfsMetricsv+0x9c>)
  Log.trace("Reading MULTIPLE UFS...");
 8089eda:	4926      	ldr	r1, [pc, #152]	; (8089f74 <_Z19readMultiUfsMetricsv+0xa0>)
 8089edc:	4826      	ldr	r0, [pc, #152]	; (8089f78 <_Z19readMultiUfsMetricsv+0xa4>)
 8089ede:	f7fd fabd 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>
  if (iterator > 8) iterator = 0;
 8089ee2:	782b      	ldrb	r3, [r5, #0]
  commLed.led_mode = LED_SOLID;
 8089ee4:	4c25      	ldr	r4, [pc, #148]	; (8089f7c <_Z19readMultiUfsMetricsv+0xa8>)
  if (iterator > 8) iterator = 0;
 8089ee6:	2b08      	cmp	r3, #8
 8089ee8:	bf84      	itt	hi
 8089eea:	2300      	movhi	r3, #0
 8089eec:	702b      	strbhi	r3, [r5, #0]
  commLed.led_mode = LED_SOLID;
 8089eee:	2301      	movs	r3, #1
  commLed.ledRoutine();
 8089ef0:	4620      	mov	r0, r4
  commLed.led_mode = LED_SOLID;
 8089ef2:	7223      	strb	r3, [r4, #8]
  commLed.ledRoutine();
 8089ef4:	f7ff f88a 	bl	808900c <_ZN3LED10ledRoutineEv>
  int8_t error_code = getMultiUfsMetrics();
 8089ef8:	f7ff fc60 	bl	80897bc <_Z18getMultiUfsMetricsv>
    commLed.led_mode = LED_BLINK_ERROR;
 8089efc:	1c43      	adds	r3, r0, #1
 8089efe:	bf14      	ite	ne
 8089f00:	2300      	movne	r3, #0
 8089f02:	2303      	moveq	r3, #3
  int8_t error_code = getMultiUfsMetrics();
 8089f04:	4606      	mov	r6, r0
    commLed.led_mode = LED_BLINK_ERROR;
 8089f06:	2700      	movs	r7, #0
  for(uint8_t i = 0; i < flDataConfig.num_of_fls; i++)
 8089f08:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8089f80 <_Z19readMultiUfsMetricsv+0xac>
 8089f0c:	f8df a074 	ldr.w	sl, [pc, #116]	; 8089f84 <_Z19readMultiUfsMetricsv+0xb0>
    gx_interval.ufsData[iterator][i].fuel_level = (flDataConfig.fl_data_type == UFS_VOLTAGE) ? 
 8089f10:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8089f88 <_Z19readMultiUfsMetricsv+0xb4>
 8089f14:	7223      	strb	r3, [r4, #8]
  for(uint8_t i = 0; i < flDataConfig.num_of_fls; i++)
 8089f16:	f899 3002 	ldrb.w	r3, [r9, #2]
 8089f1a:	b2fc      	uxtb	r4, r7
 8089f1c:	42a3      	cmp	r3, r4
 8089f1e:	d91f      	bls.n	8089f60 <_Z19readMultiUfsMetricsv+0x8c>
    gx_interval.ufsData[iterator][i].fuel_level = (flDataConfig.fl_data_type == UFS_VOLTAGE) ? 
 8089f20:	f04f 0b88 	mov.w	fp, #136	; 0x88
 8089f24:	fb0b ab04 	mla	fp, fp, r4, sl
 8089f28:	f899 3001 	ldrb.w	r3, [r9, #1]
                                                  (double)gxUFS[i].getVoltage() : (double)gxUFS[i].getDistance();
 8089f2c:	4658      	mov	r0, fp
    gx_interval.ufsData[iterator][i].fuel_level = (flDataConfig.fl_data_type == UFS_VOLTAGE) ? 
 8089f2e:	2b01      	cmp	r3, #1
 8089f30:	d113      	bne.n	8089f5a <_Z19readMultiUfsMetricsv+0x86>
                                                  (double)gxUFS[i].getVoltage() : (double)gxUFS[i].getDistance();
 8089f32:	f7ff fb67 	bl	8089604 <_ZN3UFS10getVoltageEv>
    gx_interval.ufsData[iterator][i].fuel_level = (flDataConfig.fl_data_type == UFS_VOLTAGE) ? 
 8089f36:	f006 ff6b 	bl	8090e10 <__aeabi_f2d>
 8089f3a:	782b      	ldrb	r3, [r5, #0]
 8089f3c:	3701      	adds	r7, #1
 8089f3e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8089f42:	eb08 1304 	add.w	r3, r8, r4, lsl #4
 8089f46:	e9c3 016e 	strd	r0, r1, [r3, #440]	; 0x1b8
    gx_interval.ufsData[iterator][i].temperature = gxUFS[i].getSensorTemperature();
 8089f4a:	4658      	mov	r0, fp
 8089f4c:	f7ff fb6a 	bl	8089624 <_ZN3UFS20getSensorTemperatureEv>
 8089f50:	eb08 1304 	add.w	r3, r8, r4, lsl #4
 8089f54:	f8c3 01c0 	str.w	r0, [r3, #448]	; 0x1c0
  for(uint8_t i = 0; i < flDataConfig.num_of_fls; i++)
 8089f58:	e7dd      	b.n	8089f16 <_Z19readMultiUfsMetricsv+0x42>
                                                  (double)gxUFS[i].getVoltage() : (double)gxUFS[i].getDistance();
 8089f5a:	f7ff fb43 	bl	80895e4 <_ZN3UFS11getDistanceEv>
 8089f5e:	e7ea      	b.n	8089f36 <_Z19readMultiUfsMetricsv+0x62>
  clearMultiUfsBuffer();  
 8089f60:	f7ff fca2 	bl	80898a8 <_Z19clearMultiUfsBufferv>
  iterator++;
 8089f64:	782b      	ldrb	r3, [r5, #0]
}
 8089f66:	4630      	mov	r0, r6
  iterator++;
 8089f68:	3301      	adds	r3, #1
 8089f6a:	702b      	strb	r3, [r5, #0]
}
 8089f6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089f70:	2000115a 	.word	0x2000115a
 8089f74:	080943c3 	.word	0x080943c3
 8089f78:	200015a4 	.word	0x200015a4
 8089f7c:	20001188 	.word	0x20001188
 8089f80:	20000e4a 	.word	0x20000e4a
 8089f84:	20000e50 	.word	0x20000e50
 8089f88:	200000f8 	.word	0x200000f8

08089f8c <_Z17sampleADCReadingsv>:
{
 8089f8c:	b570      	push	{r4, r5, r6, lr}
  if (array_iterator > MAX_ITERATOR_VAL) array_iterator = 0;
 8089f8e:	4c1f      	ldr	r4, [pc, #124]	; (808a00c <_Z17sampleADCReadingsv+0x80>)
  Log.trace("Sampling ADC..");
 8089f90:	491f      	ldr	r1, [pc, #124]	; (808a010 <_Z17sampleADCReadingsv+0x84>)
 8089f92:	4820      	ldr	r0, [pc, #128]	; (808a014 <_Z17sampleADCReadingsv+0x88>)
 8089f94:	f7fd fa62 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>
  if (array_iterator > MAX_ITERATOR_VAL) array_iterator = 0;
 8089f98:	7823      	ldrb	r3, [r4, #0]
  gx_interval.fuelLevel[array_iterator] = (double)getFuelVoltage();
 8089f9a:	4d1f      	ldr	r5, [pc, #124]	; (808a018 <_Z17sampleADCReadingsv+0x8c>)
  if (array_iterator > MAX_ITERATOR_VAL) array_iterator = 0;
 8089f9c:	2b08      	cmp	r3, #8
 8089f9e:	bf84      	itt	hi
 8089fa0:	2300      	movhi	r3, #0
 8089fa2:	7023      	strbhi	r3, [r4, #0]
  gx_interval.fuelLevel[array_iterator] = (double)getFuelVoltage();
 8089fa4:	f7fd f86c 	bl	8087080 <_Z14getFuelVoltagev>
 8089fa8:	f006 ff32 	bl	8090e10 <__aeabi_f2d>
 8089fac:	7823      	ldrb	r3, [r4, #0]
 8089fae:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8089fb2:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
  fuel_val = gx_interval.fuelLevel[array_iterator];
 8089fb6:	4b19      	ldr	r3, [pc, #100]	; (808a01c <_Z17sampleADCReadingsv+0x90>)
 8089fb8:	e9c3 0100 	strd	r0, r1, [r3]
  gx_interval.voltage[array_iterator] = (double)getBattVoltage();
 8089fbc:	f7fd f83c 	bl	8087038 <_Z14getBattVoltagev>
 8089fc0:	f006 ff26 	bl	8090e10 <__aeabi_f2d>
 8089fc4:	7826      	ldrb	r6, [r4, #0]
 8089fc6:	eb05 03c6 	add.w	r3, r5, r6, lsl #3
 8089fca:	e9c3 013c 	strd	r0, r1, [r3, #240]	; 0xf0
  batt_val = gx_interval.voltage[array_iterator];
 8089fce:	4b14      	ldr	r3, [pc, #80]	; (808a020 <_Z17sampleADCReadingsv+0x94>)
  gx_interval.thermcpl_RTD[array_iterator] = checkTemperature();
 8089fd0:	365a      	adds	r6, #90	; 0x5a
  batt_val = gx_interval.voltage[array_iterator];
 8089fd2:	e9c3 0100 	strd	r0, r1, [r3]
  gx_interval.thermcpl_RTD[array_iterator] = checkTemperature();
 8089fd6:	f7fc ffc3 	bl	8086f60 <_Z16checkTemperaturev>
 8089fda:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
  gx_interval.pyr_value[array_iterator] = (double)getPyranomterReadings();
 8089fde:	7826      	ldrb	r6, [r4, #0]
 8089fe0:	f7fd f876 	bl	80870d0 <_Z21getPyranomterReadingsv>
  pyr_val = gx_interval.pyr_value[array_iterator];
 8089fe4:	7823      	ldrb	r3, [r4, #0]
  gx_interval.pyr_value[array_iterator] = (double)getPyranomterReadings();
 8089fe6:	3650      	adds	r6, #80	; 0x50
  pyr_val = gx_interval.pyr_value[array_iterator];
 8089fe8:	3350      	adds	r3, #80	; 0x50
  gx_interval.pyr_value[array_iterator] = (double)getPyranomterReadings();
 8089fea:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
  pyr_val = gx_interval.pyr_value[array_iterator];
 8089fee:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8089ff2:	f006 ff0d 	bl	8090e10 <__aeabi_f2d>
 8089ff6:	4b0b      	ldr	r3, [pc, #44]	; (808a024 <_Z17sampleADCReadingsv+0x98>)
 8089ff8:	e9c3 0100 	strd	r0, r1, [r3]
  gx_interval.ts[array_iterator] = Time.now(); // update the timeStamp counter
 8089ffc:	f006 f8f4 	bl	80901e8 <_ZN9TimeClass3nowEv>
 808a000:	7823      	ldrb	r3, [r4, #0]
 808a002:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
  array_iterator++;
 808a006:	3301      	adds	r3, #1
 808a008:	7023      	strb	r3, [r4, #0]
}
 808a00a:	bd70      	pop	{r4, r5, r6, pc}
 808a00c:	2000116f 	.word	0x2000116f
 808a010:	080943db 	.word	0x080943db
 808a014:	200015a4 	.word	0x200015a4
 808a018:	200000f8 	.word	0x200000f8
 808a01c:	20001230 	.word	0x20001230
 808a020:	20001170 	.word	0x20001170
 808a024:	20001310 	.word	0x20001310

0808a028 <_Z21saveAndPublishMetricsR6String>:
    config_error_flag = false;
  }
}

void saveAndPublishMetrics(String &metric_to_publish)
{
 808a028:	b530      	push	{r4, r5, lr}
  if (!use_flash){
 808a02a:	4b42      	ldr	r3, [pc, #264]	; (808a134 <_Z21saveAndPublishMetricsR6String+0x10c>)
{
 808a02c:	4604      	mov	r4, r0
  if (!use_flash){
 808a02e:	781b      	ldrb	r3, [r3, #0]
{
 808a030:	b089      	sub	sp, #36	; 0x24
  if (!use_flash){
 808a032:	b923      	cbnz	r3, 808a03e <_Z21saveAndPublishMetricsR6String+0x16>
    publishAndLogMetrics(metric_to_publish, "GX Metric published successfully, but not saved to flash.");
 808a034:	4940      	ldr	r1, [pc, #256]	; (808a138 <_Z21saveAndPublishMetricsR6String+0x110>)
 808a036:	f7fd fb7f 	bl	8087738 <_Z20publishAndLogMetricsR6StringPKc>
    else if(result == SPIFFS_INTERNET_CONN_LOST)
    {
      Log.error("Metric publishing stopped due to connection loss!");
    }
  }
}
 808a03a:	b009      	add	sp, #36	; 0x24
 808a03c:	bd30      	pop	{r4, r5, pc}
  String metric_name = GXMetrics.saveGXMetrics(metric_to_publish).c_str();
 808a03e:	4602      	mov	r2, r0
 808a040:	493e      	ldr	r1, [pc, #248]	; (808a13c <_Z21saveAndPublishMetricsR6String+0x114>)
 808a042:	a804      	add	r0, sp, #16
 808a044:	f7fd fd88 	bl	8087b58 <_ZN8GXSpiffs13saveGXMetricsER6String>
 808a048:	9904      	ldr	r1, [sp, #16]
 808a04a:	4668      	mov	r0, sp
 808a04c:	f005 fe24 	bl	808fc98 <_ZN6StringC1EPKc>
 808a050:	a804      	add	r0, sp, #16
 808a052:	f005 fdd7 	bl	808fc04 <_ZN6StringD1Ev>
  if (metric_name == String(SPIFFS_FAIL))
 808a056:	220a      	movs	r2, #10
 808a058:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 808a05c:	a804      	add	r0, sp, #16
 808a05e:	f005 fe9b 	bl	808fd98 <_ZN6StringC1Eih>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
 808a062:	4668      	mov	r0, sp
 808a064:	a904      	add	r1, sp, #16
 808a066:	f005 ff7d 	bl	808ff64 <_ZNK6String6equalsERKS_>
 808a06a:	4605      	mov	r5, r0
 808a06c:	a804      	add	r0, sp, #16
 808a06e:	f005 fdc9 	bl	808fc04 <_ZN6StringD1Ev>
 808a072:	b1ed      	cbz	r5, 808a0b0 <_Z21saveAndPublishMetricsR6String+0x88>
    Log.error("Failed to save GX Metric to flash");
 808a074:	4932      	ldr	r1, [pc, #200]	; (808a140 <_Z21saveAndPublishMetricsR6String+0x118>)
 808a076:	4833      	ldr	r0, [pc, #204]	; (808a144 <_Z21saveAndPublishMetricsR6String+0x11c>)
 808a078:	f7fd f9ff 	bl	808747a <_ZNK5spark6Logger5errorEPKcz>
    if(!publishAndLogMetrics(metric_to_publish, "GX Metric published successfully, but not saved to flash."))
 808a07c:	4620      	mov	r0, r4
 808a07e:	492e      	ldr	r1, [pc, #184]	; (808a138 <_Z21saveAndPublishMetricsR6String+0x110>)
 808a080:	f7fd fb5a 	bl	8087738 <_Z20publishAndLogMetricsR6StringPKc>
 808a084:	b918      	cbnz	r0, 808a08e <_Z21saveAndPublishMetricsR6String+0x66>
      Log.error("GX Metric was neither saved nor published!!");
 808a086:	4930      	ldr	r1, [pc, #192]	; (808a148 <_Z21saveAndPublishMetricsR6String+0x120>)
 808a088:	482e      	ldr	r0, [pc, #184]	; (808a144 <_Z21saveAndPublishMetricsR6String+0x11c>)
 808a08a:	f7fd f9f6 	bl	808747a <_ZNK5spark6Logger5errorEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 808a08e:	f003 f9bb 	bl	808d408 <spark_cloud_flag_connected>
  if (Particle.connected())
 808a092:	b148      	cbz	r0, 808a0a8 <_Z21saveAndPublishMetricsR6String+0x80>
    s16_t result = GXMetrics.sendSavedMetrics(last_saved_metric);
 808a094:	492d      	ldr	r1, [pc, #180]	; (808a14c <_Z21saveAndPublishMetricsR6String+0x124>)
 808a096:	4829      	ldr	r0, [pc, #164]	; (808a13c <_Z21saveAndPublishMetricsR6String+0x114>)
 808a098:	f7fd ffca 	bl	8088030 <_ZN8GXSpiffs16sendSavedMetricsEPKc>
    if (result == SPIFFS_OK)
 808a09c:	2800      	cmp	r0, #0
 808a09e:	d139      	bne.n	808a114 <_Z21saveAndPublishMetricsR6String+0xec>
      Log.trace("Saved GX Metrics Successfully Sent to Cloud.");
 808a0a0:	492b      	ldr	r1, [pc, #172]	; (808a150 <_Z21saveAndPublishMetricsR6String+0x128>)
      Log.trace("Nothing to do.");
 808a0a2:	4828      	ldr	r0, [pc, #160]	; (808a144 <_Z21saveAndPublishMetricsR6String+0x11c>)
 808a0a4:	f7fd f9da 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>
  String metric_name = GXMetrics.saveGXMetrics(metric_to_publish).c_str();
 808a0a8:	4668      	mov	r0, sp
 808a0aa:	f005 fdab 	bl	808fc04 <_ZN6StringD1Ev>
 808a0ae:	e7c4      	b.n	808a03a <_Z21saveAndPublishMetricsR6String+0x12>
    Log.info("GX Metric '%s' saved to flash successfully!", metric_name.c_str());
 808a0b0:	9a00      	ldr	r2, [sp, #0]
 808a0b2:	4928      	ldr	r1, [pc, #160]	; (808a154 <_Z21saveAndPublishMetricsR6String+0x12c>)
 808a0b4:	4823      	ldr	r0, [pc, #140]	; (808a144 <_Z21saveAndPublishMetricsR6String+0x11c>)
 808a0b6:	f7fb fc6d 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
    if(!strcmp(last_saved_metric, last_published_metric))
 808a0ba:	4927      	ldr	r1, [pc, #156]	; (808a158 <_Z21saveAndPublishMetricsR6String+0x130>)
 808a0bc:	4823      	ldr	r0, [pc, #140]	; (808a14c <_Z21saveAndPublishMetricsR6String+0x124>)
 808a0be:	f007 ff44 	bl	8091f4a <strcmp>
 808a0c2:	4605      	mov	r5, r0
 808a0c4:	b9a8      	cbnz	r0, 808a0f2 <_Z21saveAndPublishMetricsR6String+0xca>
      if (publishAndLogMetrics(metric_to_publish,"GX Metric published successfully."))
 808a0c6:	4620      	mov	r0, r4
 808a0c8:	4924      	ldr	r1, [pc, #144]	; (808a15c <_Z21saveAndPublishMetricsR6String+0x134>)
 808a0ca:	f7fd fb35 	bl	8087738 <_Z20publishAndLogMetricsR6StringPKc>
 808a0ce:	b1e0      	cbz	r0, 808a10a <_Z21saveAndPublishMetricsR6String+0xe2>
        memset(last_published_metric, '\0', sizeof(last_published_metric));
 808a0d0:	2214      	movs	r2, #20
 808a0d2:	4629      	mov	r1, r5
 808a0d4:	4820      	ldr	r0, [pc, #128]	; (808a158 <_Z21saveAndPublishMetricsR6String+0x130>)
 808a0d6:	f007 fef5 	bl	8091ec4 <memset>
        strncpy(last_published_metric, metric_name.c_str(), metric_name.length() + 1);
 808a0da:	9a02      	ldr	r2, [sp, #8]
 808a0dc:	9900      	ldr	r1, [sp, #0]
 808a0de:	3201      	adds	r2, #1
 808a0e0:	481d      	ldr	r0, [pc, #116]	; (808a158 <_Z21saveAndPublishMetricsR6String+0x130>)
 808a0e2:	f007 ff7a 	bl	8091fda <strncpy>
        strcpy(mainGXConfig.LAST_PUBL_METRIC, last_published_metric);
 808a0e6:	491c      	ldr	r1, [pc, #112]	; (808a158 <_Z21saveAndPublishMetricsR6String+0x130>)
 808a0e8:	481d      	ldr	r0, [pc, #116]	; (808a160 <_Z21saveAndPublishMetricsR6String+0x138>)
 808a0ea:	f007 ff38 	bl	8091f5e <strcpy>
        storeConfigurations();
 808a0ee:	f002 fe6f 	bl	808cdd0 <_Z19storeConfigurationsv>
    memset(last_saved_metric, '\0', sizeof(last_saved_metric));
 808a0f2:	2214      	movs	r2, #20
 808a0f4:	2100      	movs	r1, #0
 808a0f6:	4815      	ldr	r0, [pc, #84]	; (808a14c <_Z21saveAndPublishMetricsR6String+0x124>)
 808a0f8:	f007 fee4 	bl	8091ec4 <memset>
    strncpy(last_saved_metric, metric_name.c_str(), metric_name.length() + 1);
 808a0fc:	9a02      	ldr	r2, [sp, #8]
 808a0fe:	9900      	ldr	r1, [sp, #0]
 808a100:	3201      	adds	r2, #1
 808a102:	4812      	ldr	r0, [pc, #72]	; (808a14c <_Z21saveAndPublishMetricsR6String+0x124>)
 808a104:	f007 ff69 	bl	8091fda <strncpy>
 808a108:	e7c1      	b.n	808a08e <_Z21saveAndPublishMetricsR6String+0x66>
      else{ Log.error("Internet not available! GX Metric only saved not published!");}
 808a10a:	4916      	ldr	r1, [pc, #88]	; (808a164 <_Z21saveAndPublishMetricsR6String+0x13c>)
 808a10c:	480d      	ldr	r0, [pc, #52]	; (808a144 <_Z21saveAndPublishMetricsR6String+0x11c>)
 808a10e:	f7fd f9b4 	bl	808747a <_ZNK5spark6Logger5errorEPKcz>
 808a112:	e7ee      	b.n	808a0f2 <_Z21saveAndPublishMetricsR6String+0xca>
    else if (result == SPIFFS_NO_SAVED_METRICS_TO_PUBLISH)
 808a114:	2801      	cmp	r0, #1
 808a116:	d101      	bne.n	808a11c <_Z21saveAndPublishMetricsR6String+0xf4>
      Log.trace("Nothing to do.");
 808a118:	4913      	ldr	r1, [pc, #76]	; (808a168 <_Z21saveAndPublishMetricsR6String+0x140>)
 808a11a:	e7c2      	b.n	808a0a2 <_Z21saveAndPublishMetricsR6String+0x7a>
    else if(result == SPIFFS_MAX_SAVED_METRICS_PUBLISHED)
 808a11c:	2802      	cmp	r0, #2
 808a11e:	d101      	bne.n	808a124 <_Z21saveAndPublishMetricsR6String+0xfc>
      Log.trace("Will resume publishing in next loop!");
 808a120:	4912      	ldr	r1, [pc, #72]	; (808a16c <_Z21saveAndPublishMetricsR6String+0x144>)
 808a122:	e7be      	b.n	808a0a2 <_Z21saveAndPublishMetricsR6String+0x7a>
    else if(result == SPIFFS_INTERNET_CONN_LOST)
 808a124:	2803      	cmp	r0, #3
 808a126:	d1bf      	bne.n	808a0a8 <_Z21saveAndPublishMetricsR6String+0x80>
      Log.error("Metric publishing stopped due to connection loss!");
 808a128:	4911      	ldr	r1, [pc, #68]	; (808a170 <_Z21saveAndPublishMetricsR6String+0x148>)
 808a12a:	4806      	ldr	r0, [pc, #24]	; (808a144 <_Z21saveAndPublishMetricsR6String+0x11c>)
 808a12c:	f7fd f9a5 	bl	808747a <_ZNK5spark6Logger5errorEPKcz>
 808a130:	e7ba      	b.n	808a0a8 <_Z21saveAndPublishMetricsR6String+0x80>
 808a132:	bf00      	nop
 808a134:	20000538 	.word	0x20000538
 808a138:	080943ea 	.word	0x080943ea
 808a13c:	20001070 	.word	0x20001070
 808a140:	08094424 	.word	0x08094424
 808a144:	200015a4 	.word	0x200015a4
 808a148:	08094446 	.word	0x08094446
 808a14c:	2000115b 	.word	0x2000115b
 808a150:	080944fc 	.word	0x080944fc
 808a154:	08094472 	.word	0x08094472
 808a158:	2000124f 	.word	0x2000124f
 808a15c:	0809449e 	.word	0x0809449e
 808a160:	2000126c 	.word	0x2000126c
 808a164:	080944c0 	.word	0x080944c0
 808a168:	08094529 	.word	0x08094529
 808a16c:	08094538 	.word	0x08094538
 808a170:	0809455d 	.word	0x0809455d

0808a174 <_Z18publishDeviceState18HiResSensorReading>:
{
 808a174:	b084      	sub	sp, #16
 808a176:	b570      	push	{r4, r5, r6, lr}
 808a178:	b09c      	sub	sp, #112	; 0x70
 808a17a:	ac20      	add	r4, sp, #128	; 0x80
 808a17c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  String cellInfo = runCellTest();
 808a180:	4668      	mov	r0, sp
 808a182:	f7ff fe3f 	bl	8089e04 <_Z11runCellTestv>
  String jsonString = "{\"v\":\"1\",";
 808a186:	496b      	ldr	r1, [pc, #428]	; (808a334 <_Z18publishDeviceState18HiResSensorReading+0x1c0>)
 808a188:	a804      	add	r0, sp, #16
 808a18a:	f005 fd85 	bl	808fc98 <_ZN6StringC1EPKc>
	StringSumHelper(const char *p) : String(p) {}
 808a18e:	496a      	ldr	r1, [pc, #424]	; (808a338 <_Z18publishDeviceState18HiResSensorReading+0x1c4>)
 808a190:	a818      	add	r0, sp, #96	; 0x60
 808a192:	f005 fd81 	bl	808fc98 <_ZN6StringC1EPKc>
  jsonString += ("\"device\":\"" + String(Time.now()));
 808a196:	f006 f827 	bl	80901e8 <_ZN9TimeClass3nowEv>
 808a19a:	220a      	movs	r2, #10
 808a19c:	4601      	mov	r1, r0
 808a19e:	a814      	add	r0, sp, #80	; 0x50
 808a1a0:	f005 fe20 	bl	808fde4 <_ZN6StringC1Elh>
 808a1a4:	a914      	add	r1, sp, #80	; 0x50
 808a1a6:	a818      	add	r0, sp, #96	; 0x60
 808a1a8:	f005 fea7 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 808a1ac:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808a1ae:	a804      	add	r0, sp, #16
 808a1b0:	f005 fe83 	bl	808feba <_ZN6String6concatERKS_>
 808a1b4:	a814      	add	r0, sp, #80	; 0x50
 808a1b6:	f005 fd25 	bl	808fc04 <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
 808a1ba:	4d60      	ldr	r5, [pc, #384]	; (808a33c <_Z18publishDeviceState18HiResSensorReading+0x1c8>)
class StringSumHelper : public String
 808a1bc:	a818      	add	r0, sp, #96	; 0x60
 808a1be:	f005 fd21 	bl	808fc04 <_ZN6StringD1Ev>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808a1c2:	4669      	mov	r1, sp
 808a1c4:	a804      	add	r0, sp, #16
 808a1c6:	f005 fe78 	bl	808feba <_ZN6String6concatERKS_>
	StringSumHelper(const char *p) : String(p) {}
 808a1ca:	4629      	mov	r1, r5
 808a1cc:	a818      	add	r0, sp, #96	; 0x60
 808a1ce:	f005 fd63 	bl	808fc98 <_ZN6StringC1EPKc>
  jsonString += (":" + String(fuel.getNormalizedSoC(), 1));
 808a1d2:	485b      	ldr	r0, [pc, #364]	; (808a340 <_Z18publishDeviceState18HiResSensorReading+0x1cc>)
 808a1d4:	f003 fe30 	bl	808de38 <_ZN9FuelGauge16getNormalizedSoCEv>
 808a1d8:	2201      	movs	r2, #1
 808a1da:	4601      	mov	r1, r0
 808a1dc:	a814      	add	r0, sp, #80	; 0x50
 808a1de:	f005 fe28 	bl	808fe32 <_ZN6StringC1Efi>
 808a1e2:	a914      	add	r1, sp, #80	; 0x50
 808a1e4:	a818      	add	r0, sp, #96	; 0x60
 808a1e6:	f005 fe88 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 808a1ea:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808a1ec:	a804      	add	r0, sp, #16
 808a1ee:	f005 fe64 	bl	808feba <_ZN6String6concatERKS_>
 808a1f2:	a814      	add	r0, sp, #80	; 0x50
 808a1f4:	f005 fd06 	bl	808fc04 <_ZN6StringD1Ev>
class StringSumHelper : public String
 808a1f8:	a818      	add	r0, sp, #96	; 0x60
 808a1fa:	f005 fd03 	bl	808fc04 <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
 808a1fe:	4629      	mov	r1, r5
 808a200:	a80c      	add	r0, sp, #48	; 0x30
 808a202:	f005 fd49 	bl	808fc98 <_ZN6StringC1EPKc>
  jsonString += (":" + String(!data_interval.bin_input1) + "," + String(!data_interval.bin_input2) + "," + String(!data_interval.bin_input3) + "," + String(!data_interval.bin_input4));
 808a206:	f89d 14bb 	ldrb.w	r1, [sp, #1211]	; 0x4bb
 808a20a:	4c4e      	ldr	r4, [pc, #312]	; (808a344 <_Z18publishDeviceState18HiResSensorReading+0x1d0>)
 808a20c:	220a      	movs	r2, #10
 808a20e:	f081 0101 	eor.w	r1, r1, #1
 808a212:	a808      	add	r0, sp, #32
 808a214:	f005 fdc0 	bl	808fd98 <_ZN6StringC1Eih>
 808a218:	a908      	add	r1, sp, #32
 808a21a:	a80c      	add	r0, sp, #48	; 0x30
 808a21c:	f005 fe6d 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 808a220:	4621      	mov	r1, r4
 808a222:	f005 fe76 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 808a226:	4606      	mov	r6, r0
 808a228:	f89d 14ba 	ldrb.w	r1, [sp, #1210]	; 0x4ba
 808a22c:	220a      	movs	r2, #10
 808a22e:	f081 0101 	eor.w	r1, r1, #1
 808a232:	a810      	add	r0, sp, #64	; 0x40
 808a234:	f005 fdb0 	bl	808fd98 <_ZN6StringC1Eih>
 808a238:	a910      	add	r1, sp, #64	; 0x40
 808a23a:	4630      	mov	r0, r6
 808a23c:	f005 fe5d 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 808a240:	4621      	mov	r1, r4
 808a242:	f005 fe66 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 808a246:	4606      	mov	r6, r0
 808a248:	f89d 14b9 	ldrb.w	r1, [sp, #1209]	; 0x4b9
 808a24c:	220a      	movs	r2, #10
 808a24e:	f081 0101 	eor.w	r1, r1, #1
 808a252:	a814      	add	r0, sp, #80	; 0x50
 808a254:	f005 fda0 	bl	808fd98 <_ZN6StringC1Eih>
 808a258:	a914      	add	r1, sp, #80	; 0x50
 808a25a:	4630      	mov	r0, r6
 808a25c:	f005 fe4d 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 808a260:	4621      	mov	r1, r4
 808a262:	f005 fe56 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 808a266:	4606      	mov	r6, r0
 808a268:	f89d 14b8 	ldrb.w	r1, [sp, #1208]	; 0x4b8
 808a26c:	220a      	movs	r2, #10
 808a26e:	f081 0101 	eor.w	r1, r1, #1
 808a272:	a818      	add	r0, sp, #96	; 0x60
 808a274:	f005 fd90 	bl	808fd98 <_ZN6StringC1Eih>
 808a278:	a918      	add	r1, sp, #96	; 0x60
 808a27a:	4630      	mov	r0, r6
 808a27c:	f005 fe3d 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 808a280:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808a282:	a804      	add	r0, sp, #16
 808a284:	f005 fe19 	bl	808feba <_ZN6String6concatERKS_>
 808a288:	a818      	add	r0, sp, #96	; 0x60
 808a28a:	f005 fcbb 	bl	808fc04 <_ZN6StringD1Ev>
 808a28e:	a814      	add	r0, sp, #80	; 0x50
 808a290:	f005 fcb8 	bl	808fc04 <_ZN6StringD1Ev>
 808a294:	a810      	add	r0, sp, #64	; 0x40
 808a296:	f005 fcb5 	bl	808fc04 <_ZN6StringD1Ev>
  portExpander.digitalRead(RLY1_pin, &RLY1_stat);
 808a29a:	4e2b      	ldr	r6, [pc, #172]	; (808a348 <_Z18publishDeviceState18HiResSensorReading+0x1d4>)
  jsonString += (":" + String(!data_interval.bin_input1) + "," + String(!data_interval.bin_input2) + "," + String(!data_interval.bin_input3) + "," + String(!data_interval.bin_input4));
 808a29c:	a808      	add	r0, sp, #32
 808a29e:	f005 fcb1 	bl	808fc04 <_ZN6StringD1Ev>
class StringSumHelper : public String
 808a2a2:	a80c      	add	r0, sp, #48	; 0x30
 808a2a4:	f005 fcae 	bl	808fc04 <_ZN6StringD1Ev>
  portExpander.digitalRead(RLY1_pin, &RLY1_stat);
 808a2a8:	aa08      	add	r2, sp, #32
 808a2aa:	2107      	movs	r1, #7
 808a2ac:	4630      	mov	r0, r6
 808a2ae:	f002 fd2b 	bl	808cd08 <_ZN7TCA953511digitalReadEtPb>
  portExpander.digitalRead(RLY2_pin, &RLY2_stat);
 808a2b2:	aa0c      	add	r2, sp, #48	; 0x30
 808a2b4:	2106      	movs	r1, #6
 808a2b6:	4630      	mov	r0, r6
 808a2b8:	f002 fd26 	bl	808cd08 <_ZN7TCA953511digitalReadEtPb>
	StringSumHelper(const char *p) : String(p) {}
 808a2bc:	4629      	mov	r1, r5
 808a2be:	a814      	add	r0, sp, #80	; 0x50
 808a2c0:	f005 fcea 	bl	808fc98 <_ZN6StringC1EPKc>
  jsonString += (":" + String(RLY1_stat) + "," + String(RLY2_stat));
 808a2c4:	220a      	movs	r2, #10
 808a2c6:	f89d 1020 	ldrb.w	r1, [sp, #32]
 808a2ca:	a810      	add	r0, sp, #64	; 0x40
 808a2cc:	f005 fd64 	bl	808fd98 <_ZN6StringC1Eih>
 808a2d0:	a910      	add	r1, sp, #64	; 0x40
 808a2d2:	a814      	add	r0, sp, #80	; 0x50
 808a2d4:	f005 fe11 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 808a2d8:	4621      	mov	r1, r4
 808a2da:	f005 fe1a 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 808a2de:	4604      	mov	r4, r0
 808a2e0:	220a      	movs	r2, #10
 808a2e2:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
 808a2e6:	a818      	add	r0, sp, #96	; 0x60
 808a2e8:	f005 fd56 	bl	808fd98 <_ZN6StringC1Eih>
 808a2ec:	a918      	add	r1, sp, #96	; 0x60
 808a2ee:	4620      	mov	r0, r4
 808a2f0:	f005 fe03 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 808a2f4:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808a2f6:	a804      	add	r0, sp, #16
 808a2f8:	f005 fddf 	bl	808feba <_ZN6String6concatERKS_>
 808a2fc:	a818      	add	r0, sp, #96	; 0x60
 808a2fe:	f005 fc81 	bl	808fc04 <_ZN6StringD1Ev>
 808a302:	a810      	add	r0, sp, #64	; 0x40
 808a304:	f005 fc7e 	bl	808fc04 <_ZN6StringD1Ev>
class StringSumHelper : public String
 808a308:	a814      	add	r0, sp, #80	; 0x50
 808a30a:	f005 fc7b 	bl	808fc04 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 808a30e:	490f      	ldr	r1, [pc, #60]	; (808a34c <_Z18publishDeviceState18HiResSensorReading+0x1d8>)
 808a310:	a804      	add	r0, sp, #16
 808a312:	f005 fdd6 	bl	808fec2 <_ZN6String6concatEPKc>
  saveAndPublishMetrics(jsonString);
 808a316:	a804      	add	r0, sp, #16
 808a318:	f7ff fe86 	bl	808a028 <_Z21saveAndPublishMetricsR6String>
  String jsonString = "{\"v\":\"1\",";
 808a31c:	a804      	add	r0, sp, #16
 808a31e:	f005 fc71 	bl	808fc04 <_ZN6StringD1Ev>
  String cellInfo = runCellTest();
 808a322:	4668      	mov	r0, sp
 808a324:	f005 fc6e 	bl	808fc04 <_ZN6StringD1Ev>
}
 808a328:	b01c      	add	sp, #112	; 0x70
 808a32a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808a32e:	b004      	add	sp, #16
 808a330:	4770      	bx	lr
 808a332:	bf00      	nop
 808a334:	0809458f 	.word	0x0809458f
 808a338:	08094599 	.word	0x08094599
 808a33c:	08093bfa 	.word	0x08093bfa
 808a340:	200011a0 	.word	0x200011a0
 808a344:	08094597 	.word	0x08094597
 808a348:	200012f6 	.word	0x200012f6
 808a34c:	080939b2 	.word	0x080939b2

0808a350 <_Z20publishSensorMetrics18HiResSensorReading>:
{
 808a350:	b084      	sub	sp, #16
 808a352:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808a356:	b0c3      	sub	sp, #268	; 0x10c
 808a358:	ac4c      	add	r4, sp, #304	; 0x130
 808a35a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 808a35e:	2400      	movs	r4, #0
  String dataString[ADC_counter], dataString_sum;
 808a360:	4dac      	ldr	r5, [pc, #688]	; (808a614 <_Z20publishSensorMetrics18HiResSensorReading+0x2c4>)
 808a362:	ab1a      	add	r3, sp, #104	; 0x68
 808a364:	1918      	adds	r0, r3, r4
 808a366:	4629      	mov	r1, r5
 808a368:	3410      	adds	r4, #16
 808a36a:	f005 fc95 	bl	808fc98 <_ZN6StringC1EPKc>
 808a36e:	2ca0      	cmp	r4, #160	; 0xa0
 808a370:	d1f7      	bne.n	808a362 <_Z20publishSensorMetrics18HiResSensorReading+0x12>
 808a372:	49a8      	ldr	r1, [pc, #672]	; (808a614 <_Z20publishSensorMetrics18HiResSensorReading+0x2c4>)
 808a374:	a806      	add	r0, sp, #24
 808a376:	f005 fc8f 	bl	808fc98 <_ZN6StringC1EPKc>
  dataString_sum += String("{\"v\":\"1\",\"sensor\":\"");
 808a37a:	49a7      	ldr	r1, [pc, #668]	; (808a618 <_Z20publishSensorMetrics18HiResSensorReading+0x2c8>)
 808a37c:	a816      	add	r0, sp, #88	; 0x58
 808a37e:	f005 fc8b 	bl	808fc98 <_ZN6StringC1EPKc>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808a382:	a916      	add	r1, sp, #88	; 0x58
 808a384:	a806      	add	r0, sp, #24
 808a386:	f005 fd98 	bl	808feba <_ZN6String6concatERKS_>
 808a38a:	af4c      	add	r7, sp, #304	; 0x130
 808a38c:	a816      	add	r0, sp, #88	; 0x58
 808a38e:	f005 fc39 	bl	808fc04 <_ZN6StringD1Ev>
 808a392:	46b8      	mov	r8, r7
  int i = 0;
 808a394:	2500      	movs	r5, #0
 808a396:	f8df 928c 	ldr.w	r9, [pc, #652]	; 808a624 <_Z20publishSensorMetrics18HiResSensorReading+0x2d4>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 808a39a:	4ea0      	ldr	r6, [pc, #640]	; (808a61c <_Z20publishSensorMetrics18HiResSensorReading+0x2cc>)
  dataString_sum += String("{\"v\":\"1\",\"sensor\":\"");
 808a39c:	ac1a      	add	r4, sp, #104	; 0x68
    dataString[i] = String(data_interval.ts[i]) + ":";
 808a39e:	220a      	movs	r2, #10
 808a3a0:	f857 1b04 	ldr.w	r1, [r7], #4
 808a3a4:	a812      	add	r0, sp, #72	; 0x48
 808a3a6:	f005 fd0a 	bl	808fdbe <_ZN6StringC1Ejh>
	StringSumHelper(const String &s) : String(s) {}
 808a3aa:	a912      	add	r1, sp, #72	; 0x48
 808a3ac:	a816      	add	r0, sp, #88	; 0x58
 808a3ae:	f005 fcbd 	bl	808fd2c <_ZN6StringC1ERKS_>
 808a3b2:	499b      	ldr	r1, [pc, #620]	; (808a620 <_Z20publishSensorMetrics18HiResSensorReading+0x2d0>)
 808a3b4:	a816      	add	r0, sp, #88	; 0x58
 808a3b6:	f005 fdac 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
 808a3ba:	4601      	mov	r1, r0
 808a3bc:	4620      	mov	r0, r4
 808a3be:	f005 fca6 	bl	808fd0e <_ZN6StringaSERKS_>
class StringSumHelper : public String
 808a3c2:	a816      	add	r0, sp, #88	; 0x58
 808a3c4:	f005 fc1e 	bl	808fc04 <_ZN6StringD1Ev>
 808a3c8:	a812      	add	r0, sp, #72	; 0x48
 808a3ca:	f005 fc1b 	bl	808fc04 <_ZN6StringD1Ev>
    if ( sensor_reading_status & VOLT_READINGS )
 808a3ce:	4b95      	ldr	r3, [pc, #596]	; (808a624 <_Z20publishSensorMetrics18HiResSensorReading+0x2d4>)
 808a3d0:	881b      	ldrh	r3, [r3, #0]
 808a3d2:	07db      	lsls	r3, r3, #31
 808a3d4:	f140 80ac 	bpl.w	808a530 <_Z20publishSensorMetrics18HiResSensorReading+0x1e0>
      dataString[i] += String(data_interval.voltage[i], 2);
 808a3d8:	2302      	movs	r3, #2
 808a3da:	9300      	str	r3, [sp, #0]
 808a3dc:	e9d8 233c 	ldrd	r2, r3, [r8, #240]	; 0xf0
 808a3e0:	a816      	add	r0, sp, #88	; 0x58
 808a3e2:	f005 fd3d 	bl	808fe60 <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808a3e6:	4620      	mov	r0, r4
 808a3e8:	a916      	add	r1, sp, #88	; 0x58
 808a3ea:	f005 fd66 	bl	808feba <_ZN6String6concatERKS_>
 808a3ee:	a816      	add	r0, sp, #88	; 0x58
 808a3f0:	f005 fc08 	bl	808fc04 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 808a3f4:	4631      	mov	r1, r6
 808a3f6:	4620      	mov	r0, r4
 808a3f8:	f005 fd63 	bl	808fec2 <_ZN6String6concatEPKc>
    if ( sensor_reading_status & FUEL_LEVEL_READINGS )
 808a3fc:	f8b9 3000 	ldrh.w	r3, [r9]
 808a400:	0798      	lsls	r0, r3, #30
 808a402:	f140 80f5 	bpl.w	808a5f0 <_Z20publishSensorMetrics18HiResSensorReading+0x2a0>
      if (flDataConfig.fl_data_source == ANALOG_INPUT)
 808a406:	4b88      	ldr	r3, [pc, #544]	; (808a628 <_Z20publishSensorMetrics18HiResSensorReading+0x2d8>)
 808a408:	781a      	ldrb	r2, [r3, #0]
 808a40a:	2a00      	cmp	r2, #0
 808a40c:	f040 8095 	bne.w	808a53a <_Z20publishSensorMetrics18HiResSensorReading+0x1ea>
         dataString[i] += String(data_interval.fuelLevel[i], 2);
 808a410:	2302      	movs	r3, #2
 808a412:	9300      	str	r3, [sp, #0]
 808a414:	e9d8 230a 	ldrd	r2, r3, [r8, #40]	; 0x28
 808a418:	a816      	add	r0, sp, #88	; 0x58
 808a41a:	f005 fd21 	bl	808fe60 <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808a41e:	4620      	mov	r0, r4
 808a420:	a916      	add	r1, sp, #88	; 0x58
 808a422:	f005 fd4a 	bl	808feba <_ZN6String6concatERKS_>
 808a426:	a816      	add	r0, sp, #88	; 0x58
 808a428:	f005 fbec 	bl	808fc04 <_ZN6StringD1Ev>
    if ( sensor_reading_status & PYRANOMETER_READINGS )
 808a42c:	4b7d      	ldr	r3, [pc, #500]	; (808a624 <_Z20publishSensorMetrics18HiResSensorReading+0x2d4>)
 808a42e:	881b      	ldrh	r3, [r3, #0]
 808a430:	0759      	lsls	r1, r3, #29
 808a432:	f140 80df 	bpl.w	808a5f4 <_Z20publishSensorMetrics18HiResSensorReading+0x2a4>
      dataString[i] += String(data_interval.pyr_value[i], 2);
 808a436:	2202      	movs	r2, #2
 808a438:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 808a43c:	a816      	add	r0, sp, #88	; 0x58
 808a43e:	f005 fcf8 	bl	808fe32 <_ZN6StringC1Efi>
 808a442:	4620      	mov	r0, r4
 808a444:	a916      	add	r1, sp, #88	; 0x58
 808a446:	f005 fd38 	bl	808feba <_ZN6String6concatERKS_>
 808a44a:	a816      	add	r0, sp, #88	; 0x58
 808a44c:	f005 fbda 	bl	808fc04 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 808a450:	4631      	mov	r1, r6
 808a452:	4620      	mov	r0, r4
 808a454:	f005 fd35 	bl	808fec2 <_ZN6String6concatEPKc>
    if( sensor_reading_status & TEMPERATURE_READINGS )
 808a458:	f8b9 3000 	ldrh.w	r3, [r9]
 808a45c:	071a      	lsls	r2, r3, #28
 808a45e:	f140 80ce 	bpl.w	808a5fe <_Z20publishSensorMetrics18HiResSensorReading+0x2ae>
      if (data_interval.thermcpl_RTD[i] != TEMP_SENSOR_SENTINEL_VALUE)
 808a462:	f8d7 a164 	ldr.w	sl, [r7, #356]	; 0x164
 808a466:	4971      	ldr	r1, [pc, #452]	; (808a62c <_Z20publishSensorMetrics18HiResSensorReading+0x2dc>)
 808a468:	4650      	mov	r0, sl
 808a46a:	f007 fad5 	bl	8091a18 <__aeabi_fcmpeq>
 808a46e:	2800      	cmp	r0, #0
 808a470:	f040 80c5 	bne.w	808a5fe <_Z20publishSensorMetrics18HiResSensorReading+0x2ae>
         dataString[i] += String(data_interval.thermcpl_RTD[i], 2);
 808a474:	2202      	movs	r2, #2
 808a476:	4651      	mov	r1, sl
 808a478:	a816      	add	r0, sp, #88	; 0x58
 808a47a:	f005 fcda 	bl	808fe32 <_ZN6StringC1Efi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808a47e:	4620      	mov	r0, r4
 808a480:	a916      	add	r1, sp, #88	; 0x58
 808a482:	f005 fd1a 	bl	808feba <_ZN6String6concatERKS_>
 808a486:	a816      	add	r0, sp, #88	; 0x58
 808a488:	f005 fbbc 	bl	808fc04 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 808a48c:	4631      	mov	r1, r6
 808a48e:	4620      	mov	r0, r4
 808a490:	f005 fd17 	bl	808fec2 <_ZN6String6concatEPKc>
    if ( sensor_reading_status & RES_SENSOR_READINGS )
 808a494:	f8b9 3000 	ldrh.w	r3, [r9]
 808a498:	06db      	lsls	r3, r3, #27
 808a49a:	f140 80b5 	bpl.w	808a608 <_Z20publishSensorMetrics18HiResSensorReading+0x2b8>
      dataString[i] += String(data_interval.res_sensor[i], 2);
 808a49e:	2202      	movs	r2, #2
 808a4a0:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 808a4a4:	a816      	add	r0, sp, #88	; 0x58
 808a4a6:	f005 fcc4 	bl	808fe32 <_ZN6StringC1Efi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808a4aa:	4620      	mov	r0, r4
 808a4ac:	a916      	add	r1, sp, #88	; 0x58
 808a4ae:	f005 fd04 	bl	808feba <_ZN6String6concatERKS_>
 808a4b2:	a816      	add	r0, sp, #88	; 0x58
 808a4b4:	f005 fba6 	bl	808fc04 <_ZN6StringD1Ev>
    if (i != (ADC_counter - 2))
 808a4b8:	2d08      	cmp	r5, #8
 808a4ba:	d003      	beq.n	808a4c4 <_Z20publishSensorMetrics18HiResSensorReading+0x174>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 808a4bc:	4620      	mov	r0, r4
 808a4be:	495c      	ldr	r1, [pc, #368]	; (808a630 <_Z20publishSensorMetrics18HiResSensorReading+0x2e0>)
 808a4c0:	f005 fcff 	bl	808fec2 <_ZN6String6concatEPKc>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808a4c4:	4621      	mov	r1, r4
 808a4c6:	a806      	add	r0, sp, #24
    i++;
 808a4c8:	3501      	adds	r5, #1
 808a4ca:	f005 fcf6 	bl	808feba <_ZN6String6concatERKS_>
  while (i < (ADC_counter - 1))
 808a4ce:	2d09      	cmp	r5, #9
 808a4d0:	f104 0410 	add.w	r4, r4, #16
 808a4d4:	f108 0808 	add.w	r8, r8, #8
 808a4d8:	f47f af61 	bne.w	808a39e <_Z20publishSensorMetrics18HiResSensorReading+0x4e>
  dataString_sum += String("\"}");
 808a4dc:	4955      	ldr	r1, [pc, #340]	; (808a634 <_Z20publishSensorMetrics18HiResSensorReading+0x2e4>)
 808a4de:	a816      	add	r0, sp, #88	; 0x58
 808a4e0:	f005 fbda 	bl	808fc98 <_ZN6StringC1EPKc>
 808a4e4:	a916      	add	r1, sp, #88	; 0x58
 808a4e6:	a806      	add	r0, sp, #24
 808a4e8:	f005 fce7 	bl	808feba <_ZN6String6concatERKS_>
 808a4ec:	a816      	add	r0, sp, #88	; 0x58
 808a4ee:	f005 fb89 	bl	808fc04 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 808a4f2:	4951      	ldr	r1, [pc, #324]	; (808a638 <_Z20publishSensorMetrics18HiResSensorReading+0x2e8>)
 808a4f4:	a806      	add	r0, sp, #24
 808a4f6:	f005 fce4 	bl	808fec2 <_ZN6String6concatEPKc>
  Serial.println(dataString_sum);
 808a4fa:	f005 ff7d 	bl	80903f8 <_Z16_fetch_usbserialv>
 808a4fe:	9906      	ldr	r1, [sp, #24]
 808a500:	f005 f9e6 	bl	808f8d0 <_ZN5Print7printlnEPKc>
  array_iterator = 0;
 808a504:	2200      	movs	r2, #0
 808a506:	4b4d      	ldr	r3, [pc, #308]	; (808a63c <_Z20publishSensorMetrics18HiResSensorReading+0x2ec>)
  saveAndPublishMetrics(dataString_sum);
 808a508:	a806      	add	r0, sp, #24
  array_iterator = 0;
 808a50a:	701a      	strb	r2, [r3, #0]
  saveAndPublishMetrics(dataString_sum);
 808a50c:	f7ff fd8c 	bl	808a028 <_Z21saveAndPublishMetricsR6String>
  String dataString[ADC_counter], dataString_sum;
 808a510:	a806      	add	r0, sp, #24
 808a512:	f005 fb77 	bl	808fc04 <_ZN6StringD1Ev>
 808a516:	ab1a      	add	r3, sp, #104	; 0x68
 808a518:	eb03 1005 	add.w	r0, r3, r5, lsl #4
 808a51c:	f005 fb72 	bl	808fc04 <_ZN6StringD1Ev>
 808a520:	3d01      	subs	r5, #1
 808a522:	d2f8      	bcs.n	808a516 <_Z20publishSensorMetrics18HiResSensorReading+0x1c6>
}
 808a524:	2001      	movs	r0, #1
 808a526:	b043      	add	sp, #268	; 0x10c
 808a528:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808a52c:	b004      	add	sp, #16
 808a52e:	4770      	bx	lr
 808a530:	4620      	mov	r0, r4
 808a532:	4938      	ldr	r1, [pc, #224]	; (808a614 <_Z20publishSensorMetrics18HiResSensorReading+0x2c4>)
 808a534:	f005 fcc5 	bl	808fec2 <_ZN6String6concatEPKc>
 808a538:	e75c      	b.n	808a3f4 <_Z20publishSensorMetrics18HiResSensorReading+0xa4>
      else if (flDataConfig.fl_data_source == DIGITAL_INPUT)
 808a53a:	2a01      	cmp	r2, #1
 808a53c:	d153      	bne.n	808a5e6 <_Z20publishSensorMetrics18HiResSensorReading+0x296>
 808a53e:	f04f 0a00 	mov.w	sl, #0
        for (uint8_t k = 0; k < flDataConfig.num_of_fls; k++)
 808a542:	9304      	str	r3, [sp, #16]
 808a544:	9b04      	ldr	r3, [sp, #16]
 808a546:	fa5f fb8a 	uxtb.w	fp, sl
 808a54a:	789b      	ldrb	r3, [r3, #2]
 808a54c:	455b      	cmp	r3, fp
 808a54e:	f67f af6d 	bls.w	808a42c <_Z20publishSensorMetrics18HiResSensorReading+0xdc>
 808a552:	493b      	ldr	r1, [pc, #236]	; (808a640 <_Z20publishSensorMetrics18HiResSensorReading+0x2f0>)
 808a554:	4620      	mov	r0, r4
 808a556:	f005 fcb4 	bl	808fec2 <_ZN6String6concatEPKc>
          String fuelLeveldata = String(data_interval.ufsData[i][k].fuel_level, 2) + "," +
 808a55a:	eb0b 0385 	add.w	r3, fp, r5, lsl #2
 808a55e:	f04f 0b02 	mov.w	fp, #2
 808a562:	aa4c      	add	r2, sp, #304	; 0x130
 808a564:	9303      	str	r3, [sp, #12]
 808a566:	f8cd b000 	str.w	fp, [sp]
 808a56a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 808a56e:	e9d3 236e 	ldrd	r2, r3, [r3, #440]	; 0x1b8
 808a572:	a80e      	add	r0, sp, #56	; 0x38
 808a574:	f005 fc74 	bl	808fe60 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 808a578:	a90e      	add	r1, sp, #56	; 0x38
 808a57a:	a812      	add	r0, sp, #72	; 0x48
 808a57c:	f005 fbd6 	bl	808fd2c <_ZN6StringC1ERKS_>
 808a580:	4631      	mov	r1, r6
 808a582:	a812      	add	r0, sp, #72	; 0x48
 808a584:	f005 fcc5 	bl	808ff12 <_ZplRK15StringSumHelperPKc>
                                 String(data_interval.ufsData[i][k].temperature, 2);
 808a588:	9b03      	ldr	r3, [sp, #12]
 808a58a:	aa4c      	add	r2, sp, #304	; 0x130
 808a58c:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 808a590:	f8d1 11c0 	ldr.w	r1, [r1, #448]	; 0x1c0
 808a594:	465a      	mov	r2, fp
          String fuelLeveldata = String(data_interval.ufsData[i][k].fuel_level, 2) + "," +
 808a596:	9005      	str	r0, [sp, #20]
                                 String(data_interval.ufsData[i][k].temperature, 2);
 808a598:	a816      	add	r0, sp, #88	; 0x58
 808a59a:	f005 fc4a 	bl	808fe32 <_ZN6StringC1Efi>
 808a59e:	9b05      	ldr	r3, [sp, #20]
 808a5a0:	a916      	add	r1, sp, #88	; 0x58
 808a5a2:	4618      	mov	r0, r3
 808a5a4:	f005 fca9 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 808a5a8:	4601      	mov	r1, r0
 808a5aa:	a80a      	add	r0, sp, #40	; 0x28
 808a5ac:	f005 fbbe 	bl	808fd2c <_ZN6StringC1ERKS_>
 808a5b0:	a816      	add	r0, sp, #88	; 0x58
 808a5b2:	f005 fb27 	bl	808fc04 <_ZN6StringD1Ev>
class StringSumHelper : public String
 808a5b6:	a812      	add	r0, sp, #72	; 0x48
 808a5b8:	f005 fb24 	bl	808fc04 <_ZN6StringD1Ev>
          String fuelLeveldata = String(data_interval.ufsData[i][k].fuel_level, 2) + "," +
 808a5bc:	a80e      	add	r0, sp, #56	; 0x38
 808a5be:	f005 fb21 	bl	808fc04 <_ZN6StringD1Ev>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808a5c2:	a90a      	add	r1, sp, #40	; 0x28
 808a5c4:	4620      	mov	r0, r4
 808a5c6:	f005 fc78 	bl	808feba <_ZN6String6concatERKS_>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 808a5ca:	491e      	ldr	r1, [pc, #120]	; (808a644 <_Z20publishSensorMetrics18HiResSensorReading+0x2f4>)
 808a5cc:	4620      	mov	r0, r4
 808a5ce:	f005 fc78 	bl	808fec2 <_ZN6String6concatEPKc>
 808a5d2:	4631      	mov	r1, r6
 808a5d4:	4620      	mov	r0, r4
 808a5d6:	f005 fc74 	bl	808fec2 <_ZN6String6concatEPKc>
                                 String(data_interval.ufsData[i][k].temperature, 2);
 808a5da:	a80a      	add	r0, sp, #40	; 0x28
 808a5dc:	f005 fb12 	bl	808fc04 <_ZN6StringD1Ev>
        for (uint8_t k = 0; k < flDataConfig.num_of_fls; k++)
 808a5e0:	f10a 0a01 	add.w	sl, sl, #1
 808a5e4:	e7ae      	b.n	808a544 <_Z20publishSensorMetrics18HiResSensorReading+0x1f4>
 808a5e6:	490b      	ldr	r1, [pc, #44]	; (808a614 <_Z20publishSensorMetrics18HiResSensorReading+0x2c4>)
 808a5e8:	4620      	mov	r0, r4
 808a5ea:	f005 fc6a 	bl	808fec2 <_ZN6String6concatEPKc>
 808a5ee:	e71d      	b.n	808a42c <_Z20publishSensorMetrics18HiResSensorReading+0xdc>
 808a5f0:	4631      	mov	r1, r6
 808a5f2:	e7f9      	b.n	808a5e8 <_Z20publishSensorMetrics18HiResSensorReading+0x298>
 808a5f4:	4620      	mov	r0, r4
 808a5f6:	4907      	ldr	r1, [pc, #28]	; (808a614 <_Z20publishSensorMetrics18HiResSensorReading+0x2c4>)
 808a5f8:	f005 fc63 	bl	808fec2 <_ZN6String6concatEPKc>
 808a5fc:	e728      	b.n	808a450 <_Z20publishSensorMetrics18HiResSensorReading+0x100>
 808a5fe:	4620      	mov	r0, r4
 808a600:	4904      	ldr	r1, [pc, #16]	; (808a614 <_Z20publishSensorMetrics18HiResSensorReading+0x2c4>)
 808a602:	f005 fc5e 	bl	808fec2 <_ZN6String6concatEPKc>
 808a606:	e741      	b.n	808a48c <_Z20publishSensorMetrics18HiResSensorReading+0x13c>
 808a608:	4620      	mov	r0, r4
 808a60a:	4902      	ldr	r1, [pc, #8]	; (808a614 <_Z20publishSensorMetrics18HiResSensorReading+0x2c4>)
 808a60c:	f005 fc59 	bl	808fec2 <_ZN6String6concatEPKc>
 808a610:	e752      	b.n	808a4b8 <_Z20publishSensorMetrics18HiResSensorReading+0x168>
 808a612:	bf00      	nop
 808a614:	08094ad5 	.word	0x08094ad5
 808a618:	080945a4 	.word	0x080945a4
 808a61c:	08094597 	.word	0x08094597
 808a620:	08093bfa 	.word	0x08093bfa
 808a624:	20000dc0 	.word	0x20000dc0
 808a628:	20000e4a 	.word	0x20000e4a
 808a62c:	448ae38d 	.word	0x448ae38d
 808a630:	080945ba 	.word	0x080945ba
 808a634:	080939b2 	.word	0x080939b2
 808a638:	08094ad4 	.word	0x08094ad4
 808a63c:	2000116f 	.word	0x2000116f
 808a640:	08095084 	.word	0x08095084
 808a644:	080945b8 	.word	0x080945b8

0808a648 <_Z21handleTimedOperationsv>:
{
 808a648:	b530      	push	{r4, r5, lr}
 808a64a:	f2ad 4d34 	subw	sp, sp, #1076	; 0x434
 808a64e:	f002 fc75 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
  if (millis() > gx_10secs_cnt)
 808a652:	4c49      	ldr	r4, [pc, #292]	; (808a778 <_Z21handleTimedOperationsv+0x130>)
 808a654:	6822      	ldr	r2, [r4, #0]
 808a656:	4282      	cmp	r2, r0
 808a658:	d212      	bcs.n	808a680 <_Z21handleTimedOperationsv+0x38>
    sample_adc = true;
 808a65a:	2301      	movs	r3, #1
 808a65c:	4a47      	ldr	r2, [pc, #284]	; (808a77c <_Z21handleTimedOperationsv+0x134>)
 808a65e:	7013      	strb	r3, [r2, #0]
    run_system_checks = true;
 808a660:	4a47      	ldr	r2, [pc, #284]	; (808a780 <_Z21handleTimedOperationsv+0x138>)
 808a662:	7013      	strb	r3, [r2, #0]
    check_binary_inputs = true;
 808a664:	4a47      	ldr	r2, [pc, #284]	; (808a784 <_Z21handleTimedOperationsv+0x13c>)
 808a666:	7013      	strb	r3, [r2, #0]
    if (sensor_reading_status & FUEL_LEVEL_READINGS)
 808a668:	4a47      	ldr	r2, [pc, #284]	; (808a788 <_Z21handleTimedOperationsv+0x140>)
 808a66a:	8812      	ldrh	r2, [r2, #0]
 808a66c:	0792      	lsls	r2, r2, #30
       read_ufs_data = true;
 808a66e:	bf44      	itt	mi
 808a670:	4a46      	ldrmi	r2, [pc, #280]	; (808a78c <_Z21handleTimedOperationsv+0x144>)
 808a672:	7013      	strbmi	r3, [r2, #0]
 808a674:	f002 fc62 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
    gx_10secs_cnt = millis() + GX_10_SECONDS;
 808a678:	f500 501c 	add.w	r0, r0, #9984	; 0x2700
 808a67c:	3010      	adds	r0, #16
 808a67e:	6020      	str	r0, [r4, #0]
 808a680:	f002 fc5c 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
  if (millis() > MILLIS_RESET_THRESHOLD)
 808a684:	4b42      	ldr	r3, [pc, #264]	; (808a790 <_Z21handleTimedOperationsv+0x148>)
 808a686:	4298      	cmp	r0, r3
 808a688:	d901      	bls.n	808a68e <_Z21handleTimedOperationsv+0x46>
    setPerformSHYFTReset();
 808a68a:	f7fc ff25 	bl	80874d8 <_Z20setPerformSHYFTResetv>
 808a68e:	f002 fc55 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
  if (millis() > clean_file_system_at)
 808a692:	4c40      	ldr	r4, [pc, #256]	; (808a794 <_Z21handleTimedOperationsv+0x14c>)
 808a694:	6823      	ldr	r3, [r4, #0]
 808a696:	4283      	cmp	r3, r0
 808a698:	d20a      	bcs.n	808a6b0 <_Z21handleTimedOperationsv+0x68>
    checkAndCleanFileSystem(GXMetrics);
 808a69a:	4b3f      	ldr	r3, [pc, #252]	; (808a798 <_Z21handleTimedOperationsv+0x150>)
 808a69c:	493f      	ldr	r1, [pc, #252]	; (808a79c <_Z21handleTimedOperationsv+0x154>)
 808a69e:	681a      	ldr	r2, [r3, #0]
 808a6a0:	483f      	ldr	r0, [pc, #252]	; (808a7a0 <_Z21handleTimedOperationsv+0x158>)
 808a6a2:	f7fc ffbd 	bl	8087620 <_Z23checkAndCleanFileSystemR8GXSpiffsR6StringPKc>
 808a6a6:	f002 fc49 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
    clean_file_system_at = millis() + MILLIS_6HRS;
 808a6aa:	4b3e      	ldr	r3, [pc, #248]	; (808a7a4 <_Z21handleTimedOperationsv+0x15c>)
 808a6ac:	4403      	add	r3, r0
 808a6ae:	6023      	str	r3, [r4, #0]
 808a6b0:	f002 fc44 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
  if (millis() > publish_sensor_metrics_at)
 808a6b4:	4d3c      	ldr	r5, [pc, #240]	; (808a7a8 <_Z21handleTimedOperationsv+0x160>)
 808a6b6:	682b      	ldr	r3, [r5, #0]
 808a6b8:	4283      	cmp	r3, r0
 808a6ba:	d214      	bcs.n	808a6e6 <_Z21handleTimedOperationsv+0x9e>
    publishSensorMetrics(gx_interval);
 808a6bc:	4c3b      	ldr	r4, [pc, #236]	; (808a7ac <_Z21handleTimedOperationsv+0x164>)
 808a6be:	f44f 6286 	mov.w	r2, #1072	; 0x430
 808a6c2:	f104 0110 	add.w	r1, r4, #16
 808a6c6:	4668      	mov	r0, sp
 808a6c8:	f007 fbd4 	bl	8091e74 <memcpy>
 808a6cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 808a6d0:	f7ff fe3e 	bl	808a350 <_Z20publishSensorMetrics18HiResSensorReading>
 808a6d4:	f002 fc32 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
    publish_sensor_metrics_at = millis() + (gx_mtrc_intervl[SENSOR_MTRC] * ONETHOUSAND_MILLIS);
 808a6d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808a6dc:	4b34      	ldr	r3, [pc, #208]	; (808a7b0 <_Z21handleTimedOperationsv+0x168>)
 808a6de:	885b      	ldrh	r3, [r3, #2]
 808a6e0:	fb02 0303 	mla	r3, r2, r3, r0
 808a6e4:	602b      	str	r3, [r5, #0]
 808a6e6:	f002 fc29 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
  if ((millis() > gendata_poll_interval) && (genmetrics_active == 1))
 808a6ea:	4c32      	ldr	r4, [pc, #200]	; (808a7b4 <_Z21handleTimedOperationsv+0x16c>)
 808a6ec:	6823      	ldr	r3, [r4, #0]
 808a6ee:	4283      	cmp	r3, r0
 808a6f0:	d20e      	bcs.n	808a710 <_Z21handleTimedOperationsv+0xc8>
 808a6f2:	4b31      	ldr	r3, [pc, #196]	; (808a7b8 <_Z21handleTimedOperationsv+0x170>)
 808a6f4:	781b      	ldrb	r3, [r3, #0]
 808a6f6:	2b01      	cmp	r3, #1
 808a6f8:	d10a      	bne.n	808a710 <_Z21handleTimedOperationsv+0xc8>
    poll_gendata_flag = true;
 808a6fa:	4a30      	ldr	r2, [pc, #192]	; (808a7bc <_Z21handleTimedOperationsv+0x174>)
 808a6fc:	7013      	strb	r3, [r2, #0]
 808a6fe:	f002 fc1d 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
    gendata_poll_interval = millis() + (gx_mtrc_intervl[GEN_MTRC] * ONETHOUSAND_MILLIS);
 808a702:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808a706:	4b2a      	ldr	r3, [pc, #168]	; (808a7b0 <_Z21handleTimedOperationsv+0x168>)
 808a708:	889b      	ldrh	r3, [r3, #4]
 808a70a:	fb02 0303 	mla	r3, r2, r3, r0
 808a70e:	6023      	str	r3, [r4, #0]
 808a710:	f002 fc14 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
  if ((millis() > griddata_poll_interval) && (gridmetrics_active > GRID_MTRCS_OFF))
 808a714:	4c2a      	ldr	r4, [pc, #168]	; (808a7c0 <_Z21handleTimedOperationsv+0x178>)
 808a716:	6823      	ldr	r3, [r4, #0]
 808a718:	4283      	cmp	r3, r0
 808a71a:	d20e      	bcs.n	808a73a <_Z21handleTimedOperationsv+0xf2>
 808a71c:	4b29      	ldr	r3, [pc, #164]	; (808a7c4 <_Z21handleTimedOperationsv+0x17c>)
 808a71e:	781b      	ldrb	r3, [r3, #0]
 808a720:	b15b      	cbz	r3, 808a73a <_Z21handleTimedOperationsv+0xf2>
    poll_griddata_flag = true;
 808a722:	2201      	movs	r2, #1
 808a724:	4b28      	ldr	r3, [pc, #160]	; (808a7c8 <_Z21handleTimedOperationsv+0x180>)
 808a726:	701a      	strb	r2, [r3, #0]
 808a728:	f002 fc08 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
    griddata_poll_interval = millis() + (gx_mtrc_intervl[GRID_MTRC] * ONETHOUSAND_MILLIS);
 808a72c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808a730:	4b1f      	ldr	r3, [pc, #124]	; (808a7b0 <_Z21handleTimedOperationsv+0x168>)
 808a732:	88db      	ldrh	r3, [r3, #6]
 808a734:	fb02 0303 	mla	r3, r2, r3, r0
 808a738:	6023      	str	r3, [r4, #0]
 808a73a:	f002 fbff 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
  if (millis() > device_metrics_interval)
 808a73e:	4d23      	ldr	r5, [pc, #140]	; (808a7cc <_Z21handleTimedOperationsv+0x184>)
 808a740:	682b      	ldr	r3, [r5, #0]
 808a742:	4283      	cmp	r3, r0
 808a744:	d214      	bcs.n	808a770 <_Z21handleTimedOperationsv+0x128>
    publishDeviceState(gx_interval);
 808a746:	4c19      	ldr	r4, [pc, #100]	; (808a7ac <_Z21handleTimedOperationsv+0x164>)
 808a748:	f44f 6286 	mov.w	r2, #1072	; 0x430
 808a74c:	f104 0110 	add.w	r1, r4, #16
 808a750:	4668      	mov	r0, sp
 808a752:	f007 fb8f 	bl	8091e74 <memcpy>
 808a756:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 808a75a:	f7ff fd0b 	bl	808a174 <_Z18publishDeviceState18HiResSensorReading>
 808a75e:	f002 fbed 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
    device_metrics_interval = millis() + (gx_mtrc_intervl[DEVICE_MTRC] * ONETHOUSAND_MILLIS);
 808a762:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808a766:	4b12      	ldr	r3, [pc, #72]	; (808a7b0 <_Z21handleTimedOperationsv+0x168>)
 808a768:	881b      	ldrh	r3, [r3, #0]
 808a76a:	fb02 0303 	mla	r3, r2, r3, r0
 808a76e:	602b      	str	r3, [r5, #0]
}
 808a770:	f20d 4d34 	addw	sp, sp, #1076	; 0x434
 808a774:	bd30      	pop	{r4, r5, pc}
 808a776:	bf00      	nop
 808a778:	200000f0 	.word	0x200000f0
 808a77c:	20001339 	.word	0x20001339
 808a780:	20001338 	.word	0x20001338
 808a784:	20001178 	.word	0x20001178
 808a788:	20000dc0 	.word	0x20000dc0
 808a78c:	20001318 	.word	0x20001318
 808a790:	0a4cb800 	.word	0x0a4cb800
 808a794:	200000e8 	.word	0x200000e8
 808a798:	2000001c 	.word	0x2000001c
 808a79c:	20000dc4 	.word	0x20000dc4
 808a7a0:	20001070 	.word	0x20001070
 808a7a4:	01499700 	.word	0x01499700
 808a7a8:	20001308 	.word	0x20001308
 808a7ac:	200000f8 	.word	0x200000f8
 808a7b0:	20001246 	.word	0x20001246
 808a7b4:	20001238 	.word	0x20001238
 808a7b8:	2000123c 	.word	0x2000123c
 808a7bc:	200012f4 	.word	0x200012f4
 808a7c0:	20001240 	.word	0x20001240
 808a7c4:	20001244 	.word	0x20001244
 808a7c8:	200012f5 	.word	0x200012f5
 808a7cc:	20001198 	.word	0x20001198

0808a7d0 <_Z17updateLEDRoutinesv>:

void updateLEDRoutines()
{
 808a7d0:	b510      	push	{r4, lr}
  // check if supply is above 9V
  if(getBattVoltage() > MIN_INPUT_POWER)
 808a7d2:	f7fc fc31 	bl	8087038 <_Z14getBattVoltagev>
 808a7d6:	4909      	ldr	r1, [pc, #36]	; (808a7fc <_Z17updateLEDRoutinesv+0x2c>)
 808a7d8:	f007 f946 	bl	8091a68 <__aeabi_fcmpgt>
 808a7dc:	3800      	subs	r0, #0
 808a7de:	bf18      	it	ne
 808a7e0:	2001      	movne	r0, #1
 808a7e2:	4c07      	ldr	r4, [pc, #28]	; (808a800 <_Z17updateLEDRoutinesv+0x30>)
 808a7e4:	7220      	strb	r0, [r4, #8]
    powerLed.led_mode = LED_SOLID;
  else
    powerLed.led_mode = LED_OFF;
  
  powerLed.ledRoutine();
 808a7e6:	4620      	mov	r0, r4
 808a7e8:	f7fe fc10 	bl	808900c <_ZN3LED10ledRoutineEv>
  cloudLed.ledRoutine();
 808a7ec:	4805      	ldr	r0, [pc, #20]	; (808a804 <_Z17updateLEDRoutinesv+0x34>)
 808a7ee:	f7fe fc0d 	bl	808900c <_ZN3LED10ledRoutineEv>
  commLed.ledRoutine();
}
 808a7f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  commLed.ledRoutine();
 808a7f6:	4804      	ldr	r0, [pc, #16]	; (808a808 <_Z17updateLEDRoutinesv+0x38>)
 808a7f8:	f7fe bc08 	b.w	808900c <_ZN3LED10ledRoutineEv>
 808a7fc:	41100000 	.word	0x41100000
 808a800:	200012f8 	.word	0x200012f8
 808a804:	2000117c 	.word	0x2000117c
 808a808:	20001188 	.word	0x20001188

0808a80c <_Z10getMetrics6String>:

int getMetrics(String command)
{
 808a80c:	b530      	push	{r4, r5, lr}
 808a80e:	b089      	sub	sp, #36	; 0x24
 808a810:	4604      	mov	r4, r0
  const uint16_t THREE_HOURS = 3*60*60;

  start_time = atoi(getStringValueAtIndex(command, ',', 0));
 808a812:	4601      	mov	r1, r0
 808a814:	4668      	mov	r0, sp
 808a816:	f005 fa89 	bl	808fd2c <_ZN6StringC1ERKS_>
 808a81a:	2300      	movs	r3, #0
 808a81c:	222c      	movs	r2, #44	; 0x2c
 808a81e:	4669      	mov	r1, sp
 808a820:	a804      	add	r0, sp, #16
 808a822:	f7fe fe91 	bl	8089548 <_Z21getStringValueAtIndex6Stringci>
 808a826:	9804      	ldr	r0, [sp, #16]
 808a828:	f007 fafe 	bl	8091e28 <atoi>
 808a82c:	4d20      	ldr	r5, [pc, #128]	; (808a8b0 <_Z10getMetrics6String+0xa4>)
 808a82e:	6028      	str	r0, [r5, #0]
 808a830:	a804      	add	r0, sp, #16
 808a832:	f005 f9e7 	bl	808fc04 <_ZN6StringD1Ev>
 808a836:	4668      	mov	r0, sp
 808a838:	f005 f9e4 	bl	808fc04 <_ZN6StringD1Ev>
  end_time = atoi(getStringValueAtIndex(command, ',', 1));
 808a83c:	4621      	mov	r1, r4
 808a83e:	4668      	mov	r0, sp
 808a840:	f005 fa74 	bl	808fd2c <_ZN6StringC1ERKS_>
 808a844:	2301      	movs	r3, #1
 808a846:	222c      	movs	r2, #44	; 0x2c
 808a848:	4669      	mov	r1, sp
 808a84a:	a804      	add	r0, sp, #16
 808a84c:	f7fe fe7c 	bl	8089548 <_Z21getStringValueAtIndex6Stringci>
 808a850:	9804      	ldr	r0, [sp, #16]
 808a852:	f007 fae9 	bl	8091e28 <atoi>
 808a856:	4c17      	ldr	r4, [pc, #92]	; (808a8b4 <_Z10getMetrics6String+0xa8>)
 808a858:	6020      	str	r0, [r4, #0]
 808a85a:	a804      	add	r0, sp, #16
 808a85c:	f005 f9d2 	bl	808fc04 <_ZN6StringD1Ev>
 808a860:	4668      	mov	r0, sp
 808a862:	f005 f9cf 	bl	808fc04 <_ZN6StringD1Ev>

  Log.info("Start time: %lu", start_time);
 808a866:	682a      	ldr	r2, [r5, #0]
 808a868:	4913      	ldr	r1, [pc, #76]	; (808a8b8 <_Z10getMetrics6String+0xac>)
 808a86a:	4814      	ldr	r0, [pc, #80]	; (808a8bc <_Z10getMetrics6String+0xb0>)
 808a86c:	f7fb f892 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
  Log.info("End time: %lu", end_time);
 808a870:	6822      	ldr	r2, [r4, #0]
 808a872:	4913      	ldr	r1, [pc, #76]	; (808a8c0 <_Z10getMetrics6String+0xb4>)
 808a874:	4811      	ldr	r0, [pc, #68]	; (808a8bc <_Z10getMetrics6String+0xb0>)
 808a876:	f7fb f88d 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>

  // Validate arguments
  if ((end_time > Time.now() || start_time > Time.now()) ||
 808a87a:	f005 fcb5 	bl	80901e8 <_ZN9TimeClass3nowEv>
      (end_time < start_time) ||
 808a87e:	6823      	ldr	r3, [r4, #0]
 808a880:	4298      	cmp	r0, r3
 808a882:	d203      	bcs.n	808a88c <_Z10getMetrics6String+0x80>
      ((end_time - start_time) > THREE_HOURS)) return -1;
 808a884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff


  should_retrieve_metrics = true;
  return 1;
}
 808a888:	b009      	add	sp, #36	; 0x24
 808a88a:	bd30      	pop	{r4, r5, pc}
  if ((end_time > Time.now() || start_time > Time.now()) ||
 808a88c:	f005 fcac 	bl	80901e8 <_ZN9TimeClass3nowEv>
 808a890:	682a      	ldr	r2, [r5, #0]
 808a892:	4290      	cmp	r0, r2
 808a894:	d3f6      	bcc.n	808a884 <_Z10getMetrics6String+0x78>
      (end_time < start_time) ||
 808a896:	6823      	ldr	r3, [r4, #0]
  if ((end_time > Time.now() || start_time > Time.now()) ||
 808a898:	429a      	cmp	r2, r3
 808a89a:	d8f3      	bhi.n	808a884 <_Z10getMetrics6String+0x78>
      ((end_time - start_time) > THREE_HOURS)) return -1;
 808a89c:	1a9b      	subs	r3, r3, r2
      (end_time < start_time) ||
 808a89e:	f642 2230 	movw	r2, #10800	; 0x2a30
 808a8a2:	4293      	cmp	r3, r2
 808a8a4:	d8ee      	bhi.n	808a884 <_Z10getMetrics6String+0x78>
  should_retrieve_metrics = true;
 808a8a6:	2001      	movs	r0, #1
 808a8a8:	4b06      	ldr	r3, [pc, #24]	; (808a8c4 <_Z10getMetrics6String+0xb8>)
 808a8aa:	7018      	strb	r0, [r3, #0]
  return 1;
 808a8ac:	e7ec      	b.n	808a888 <_Z10getMetrics6String+0x7c>
 808a8ae:	bf00      	nop
 808a8b0:	200013d8 	.word	0x200013d8
 808a8b4:	2000119c 	.word	0x2000119c
 808a8b8:	080945bc 	.word	0x080945bc
 808a8bc:	200015a4 	.word	0x200015a4
 808a8c0:	080945cc 	.word	0x080945cc
 808a8c4:	2000133a 	.word	0x2000133a

0808a8c8 <_Z19getFreeFlashStoragev>:

float getFreeFlashStorage()
{
  return GXMetrics.checkFreeStoragePercent();
 808a8c8:	4801      	ldr	r0, [pc, #4]	; (808a8d0 <_Z19getFreeFlashStoragev+0x8>)
 808a8ca:	f7fd b863 	b.w	8087994 <_ZN8GXSpiffs23checkFreeStoragePercentEv>
 808a8ce:	bf00      	nop
 808a8d0:	20001070 	.word	0x20001070

0808a8d4 <_Z18callConfigFunction6String>:
{
 808a8d4:	b510      	push	{r4, lr}
 808a8d6:	b090      	sub	sp, #64	; 0x40
  String functionName = getStringValueAtIndex(fullCommand, separator, 0);
 808a8d8:	4601      	mov	r1, r0
{
 808a8da:	4604      	mov	r4, r0
  String functionName = getStringValueAtIndex(fullCommand, separator, 0);
 808a8dc:	a80c      	add	r0, sp, #48	; 0x30
 808a8de:	f005 fa25 	bl	808fd2c <_ZN6StringC1ERKS_>
 808a8e2:	2300      	movs	r3, #0
 808a8e4:	223a      	movs	r2, #58	; 0x3a
 808a8e6:	a90c      	add	r1, sp, #48	; 0x30
 808a8e8:	4668      	mov	r0, sp
 808a8ea:	f7fe fe2d 	bl	8089548 <_Z21getStringValueAtIndex6Stringci>
 808a8ee:	a80c      	add	r0, sp, #48	; 0x30
 808a8f0:	f005 f988 	bl	808fc04 <_ZN6StringD1Ev>
  String commandParameter;
 808a8f4:	4972      	ldr	r1, [pc, #456]	; (808aac0 <_Z18callConfigFunction6String+0x1ec>)
 808a8f6:	a804      	add	r0, sp, #16
 808a8f8:	f005 f9ce 	bl	808fc98 <_ZN6StringC1EPKc>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 808a8fc:	4970      	ldr	r1, [pc, #448]	; (808aac0 <_Z18callConfigFunction6String+0x1ec>)
 808a8fe:	4668      	mov	r0, sp
 808a900:	f005 fb3d 	bl	808ff7e <_ZNK6String6equalsEPKc>
    functionName = fullCommand;
 808a904:	4621      	mov	r1, r4
  if (functionName == "")
 808a906:	b1f8      	cbz	r0, 808a948 <_Z18callConfigFunction6String+0x74>
    functionName = fullCommand;
 808a908:	4668      	mov	r0, sp
 808a90a:	f005 fa00 	bl	808fd0e <_ZN6StringaSERKS_>
    commandParameter = "";
 808a90e:	496c      	ldr	r1, [pc, #432]	; (808aac0 <_Z18callConfigFunction6String+0x1ec>)
 808a910:	a804      	add	r0, sp, #16
 808a912:	f005 fa1e 	bl	808fd52 <_ZN6StringaSEPKc>
 808a916:	4668      	mov	r0, sp
 808a918:	496a      	ldr	r1, [pc, #424]	; (808aac4 <_Z18callConfigFunction6String+0x1f0>)
 808a91a:	f005 fb30 	bl	808ff7e <_ZNK6String6equalsEPKc>
  if (functionName == "binaryRead") return binaryRead(commandParameter);
 808a91e:	b338      	cbz	r0, 808a970 <_Z18callConfigFunction6String+0x9c>
 808a920:	a904      	add	r1, sp, #16
 808a922:	a80c      	add	r0, sp, #48	; 0x30
 808a924:	f005 fa02 	bl	808fd2c <_ZN6StringC1ERKS_>
 808a928:	a80c      	add	r0, sp, #48	; 0x30
 808a92a:	f7fc fcb7 	bl	808729c <_Z10binaryRead6String>
  if (functionName == "genmetricsSW") return genMetricsSW(commandParameter);
 808a92e:	4604      	mov	r4, r0
 808a930:	a80c      	add	r0, sp, #48	; 0x30
 808a932:	f005 f967 	bl	808fc04 <_ZN6StringD1Ev>
  String commandParameter;
 808a936:	a804      	add	r0, sp, #16
 808a938:	f005 f964 	bl	808fc04 <_ZN6StringD1Ev>
  String functionName = getStringValueAtIndex(fullCommand, separator, 0);
 808a93c:	4668      	mov	r0, sp
 808a93e:	f005 f961 	bl	808fc04 <_ZN6StringD1Ev>
}
 808a942:	4620      	mov	r0, r4
 808a944:	b010      	add	sp, #64	; 0x40
 808a946:	bd10      	pop	{r4, pc}
    commandParameter = getStringValueAtIndex(fullCommand, separator, 1);
 808a948:	a808      	add	r0, sp, #32
 808a94a:	f005 f9ef 	bl	808fd2c <_ZN6StringC1ERKS_>
 808a94e:	2301      	movs	r3, #1
 808a950:	223a      	movs	r2, #58	; 0x3a
 808a952:	a908      	add	r1, sp, #32
 808a954:	a80c      	add	r0, sp, #48	; 0x30
 808a956:	f7fe fdf7 	bl	8089548 <_Z21getStringValueAtIndex6Stringci>
 808a95a:	a90c      	add	r1, sp, #48	; 0x30
 808a95c:	a804      	add	r0, sp, #16
 808a95e:	f005 f9f0 	bl	808fd42 <_ZN6StringaSEOS_>
 808a962:	a80c      	add	r0, sp, #48	; 0x30
 808a964:	f005 f94e 	bl	808fc04 <_ZN6StringD1Ev>
 808a968:	a808      	add	r0, sp, #32
 808a96a:	f005 f94b 	bl	808fc04 <_ZN6StringD1Ev>
 808a96e:	e7d2      	b.n	808a916 <_Z18callConfigFunction6String+0x42>
 808a970:	4668      	mov	r0, sp
 808a972:	4955      	ldr	r1, [pc, #340]	; (808aac8 <_Z18callConfigFunction6String+0x1f4>)
 808a974:	f005 fb03 	bl	808ff7e <_ZNK6String6equalsEPKc>
  if (functionName == "genmetricsSW") return genMetricsSW(commandParameter);
 808a978:	b138      	cbz	r0, 808a98a <_Z18callConfigFunction6String+0xb6>
 808a97a:	a904      	add	r1, sp, #16
 808a97c:	a80c      	add	r0, sp, #48	; 0x30
 808a97e:	f005 f9d5 	bl	808fd2c <_ZN6StringC1ERKS_>
 808a982:	a80c      	add	r0, sp, #48	; 0x30
 808a984:	f7fc f8fe 	bl	8086b84 <_Z12genMetricsSW6String>
 808a988:	e7d1      	b.n	808a92e <_Z18callConfigFunction6String+0x5a>
 808a98a:	4668      	mov	r0, sp
 808a98c:	494f      	ldr	r1, [pc, #316]	; (808aacc <_Z18callConfigFunction6String+0x1f8>)
 808a98e:	f005 faf6 	bl	808ff7e <_ZNK6String6equalsEPKc>
  if (functionName == "gridmetricsSW") return gridMetricsSW(commandParameter);
 808a992:	b138      	cbz	r0, 808a9a4 <_Z18callConfigFunction6String+0xd0>
 808a994:	a904      	add	r1, sp, #16
 808a996:	a80c      	add	r0, sp, #48	; 0x30
 808a998:	f005 f9c8 	bl	808fd2c <_ZN6StringC1ERKS_>
 808a99c:	a80c      	add	r0, sp, #48	; 0x30
 808a99e:	f7fc f949 	bl	8086c34 <_Z13gridMetricsSW6String>
 808a9a2:	e7c4      	b.n	808a92e <_Z18callConfigFunction6String+0x5a>
 808a9a4:	4668      	mov	r0, sp
 808a9a6:	494a      	ldr	r1, [pc, #296]	; (808aad0 <_Z18callConfigFunction6String+0x1fc>)
 808a9a8:	f005 fae9 	bl	808ff7e <_ZNK6String6equalsEPKc>
  if (functionName == "getMetrics") {return getMetrics(commandParameter); }
 808a9ac:	b138      	cbz	r0, 808a9be <_Z18callConfigFunction6String+0xea>
 808a9ae:	a904      	add	r1, sp, #16
 808a9b0:	a80c      	add	r0, sp, #48	; 0x30
 808a9b2:	f005 f9bb 	bl	808fd2c <_ZN6StringC1ERKS_>
 808a9b6:	a80c      	add	r0, sp, #48	; 0x30
 808a9b8:	f7ff ff28 	bl	808a80c <_Z10getMetrics6String>
 808a9bc:	e7b7      	b.n	808a92e <_Z18callConfigFunction6String+0x5a>
 808a9be:	4668      	mov	r0, sp
 808a9c0:	4944      	ldr	r1, [pc, #272]	; (808aad4 <_Z18callConfigFunction6String+0x200>)
 808a9c2:	f005 fadc 	bl	808ff7e <_ZNK6String6equalsEPKc>
  if (functionName == "getFreeFlashStorage") {return getFreeFlashStorage(); }
 808a9c6:	b128      	cbz	r0, 808a9d4 <_Z18callConfigFunction6String+0x100>
 808a9c8:	f7ff ff7e 	bl	808a8c8 <_Z19getFreeFlashStoragev>
 808a9cc:	f007 f86c 	bl	8091aa8 <__aeabi_f2iz>
  if (functionName == "disableMetricsExceptFuelLevel") return disableMetricsExceptFuelLevel();
 808a9d0:	4604      	mov	r4, r0
 808a9d2:	e7b0      	b.n	808a936 <_Z18callConfigFunction6String+0x62>
 808a9d4:	4668      	mov	r0, sp
 808a9d6:	4940      	ldr	r1, [pc, #256]	; (808aad8 <_Z18callConfigFunction6String+0x204>)
 808a9d8:	f005 fad1 	bl	808ff7e <_ZNK6String6equalsEPKc>
  if (functionName == "genmetricsSTAT") return genMetricsSTAT();
 808a9dc:	b110      	cbz	r0, 808a9e4 <_Z18callConfigFunction6String+0x110>
 808a9de:	f7fc f8b1 	bl	8086b44 <_Z14genMetricsSTATv>
 808a9e2:	e7f5      	b.n	808a9d0 <_Z18callConfigFunction6String+0xfc>
 808a9e4:	4668      	mov	r0, sp
 808a9e6:	493d      	ldr	r1, [pc, #244]	; (808aadc <_Z18callConfigFunction6String+0x208>)
 808a9e8:	f005 fac9 	bl	808ff7e <_ZNK6String6equalsEPKc>
  if (functionName == "gridmetricsSTAT") return gridMetricsSTAT();
 808a9ec:	b110      	cbz	r0, 808a9f4 <_Z18callConfigFunction6String+0x120>
 808a9ee:	f7fc f97b 	bl	8086ce8 <_Z15gridMetricsSTATv>
 808a9f2:	e7ed      	b.n	808a9d0 <_Z18callConfigFunction6String+0xfc>
 808a9f4:	4668      	mov	r0, sp
 808a9f6:	493a      	ldr	r1, [pc, #232]	; (808aae0 <_Z18callConfigFunction6String+0x20c>)
 808a9f8:	f005 fac1 	bl	808ff7e <_ZNK6String6equalsEPKc>
  if (functionName == "setSensorReadingStatus") return setSensorReadingStatus(commandParameter);
 808a9fc:	b138      	cbz	r0, 808aa0e <_Z18callConfigFunction6String+0x13a>
 808a9fe:	a904      	add	r1, sp, #16
 808aa00:	a80c      	add	r0, sp, #48	; 0x30
 808aa02:	f005 f993 	bl	808fd2c <_ZN6StringC1ERKS_>
 808aa06:	a80c      	add	r0, sp, #48	; 0x30
 808aa08:	f7fc fbee 	bl	80871e8 <_Z22setSensorReadingStatus6String>
 808aa0c:	e78f      	b.n	808a92e <_Z18callConfigFunction6String+0x5a>
 808aa0e:	4668      	mov	r0, sp
 808aa10:	4934      	ldr	r1, [pc, #208]	; (808aae4 <_Z18callConfigFunction6String+0x210>)
 808aa12:	f005 fab4 	bl	808ff7e <_ZNK6String6equalsEPKc>
  if (functionName == "selectFuelSensorInput") return setFuelLevelInput(&commandParameter);
 808aa16:	b118      	cbz	r0, 808aa20 <_Z18callConfigFunction6String+0x14c>
 808aa18:	a804      	add	r0, sp, #16
 808aa1a:	f7fe ff91 	bl	8089940 <_Z17setFuelLevelInputP6String>
 808aa1e:	e7d7      	b.n	808a9d0 <_Z18callConfigFunction6String+0xfc>
 808aa20:	4668      	mov	r0, sp
 808aa22:	4931      	ldr	r1, [pc, #196]	; (808aae8 <_Z18callConfigFunction6String+0x214>)
 808aa24:	f005 faab 	bl	808ff7e <_ZNK6String6equalsEPKc>
  if (functionName == "ufsConfigurations") return ufsConfigurations(commandParameter);
 808aa28:	b138      	cbz	r0, 808aa3a <_Z18callConfigFunction6String+0x166>
 808aa2a:	a904      	add	r1, sp, #16
 808aa2c:	a80c      	add	r0, sp, #48	; 0x30
 808aa2e:	f005 f97d 	bl	808fd2c <_ZN6StringC1ERKS_>
 808aa32:	a80c      	add	r0, sp, #48	; 0x30
 808aa34:	f7fe fe42 	bl	80896bc <_Z17ufsConfigurations6String>
 808aa38:	e779      	b.n	808a92e <_Z18callConfigFunction6String+0x5a>
 808aa3a:	4668      	mov	r0, sp
 808aa3c:	492b      	ldr	r1, [pc, #172]	; (808aaec <_Z18callConfigFunction6String+0x218>)
 808aa3e:	f005 fa9e 	bl	808ff7e <_ZNK6String6equalsEPKc>
  if (functionName == "selectFuelLevelMetric") return setFuelLevelMetric(&commandParameter); 
 808aa42:	b118      	cbz	r0, 808aa4c <_Z18callConfigFunction6String+0x178>
 808aa44:	a804      	add	r0, sp, #16
 808aa46:	f7fe ff47 	bl	80898d8 <_Z18setFuelLevelMetricP6String>
 808aa4a:	e7c1      	b.n	808a9d0 <_Z18callConfigFunction6String+0xfc>
 808aa4c:	4668      	mov	r0, sp
 808aa4e:	4928      	ldr	r1, [pc, #160]	; (808aaf0 <_Z18callConfigFunction6String+0x21c>)
 808aa50:	f005 fa95 	bl	808ff7e <_ZNK6String6equalsEPKc>
  if (functionName == "ufsSelectedConfigs") return publishUfsConfigs(); 
 808aa54:	b110      	cbz	r0, 808aa5c <_Z18callConfigFunction6String+0x188>
 808aa56:	f7fe ffd9 	bl	8089a0c <_Z17publishUfsConfigsv>
 808aa5a:	e7b9      	b.n	808a9d0 <_Z18callConfigFunction6String+0xfc>
 808aa5c:	4668      	mov	r0, sp
 808aa5e:	4925      	ldr	r1, [pc, #148]	; (808aaf4 <_Z18callConfigFunction6String+0x220>)
 808aa60:	f005 fa8d 	bl	808ff7e <_ZNK6String6equalsEPKc>
  if (functionName == "selectTemperatureSensor") return selectTemperatureSensor(commandParameter);
 808aa64:	b138      	cbz	r0, 808aa76 <_Z18callConfigFunction6String+0x1a2>
 808aa66:	a904      	add	r1, sp, #16
 808aa68:	a80c      	add	r0, sp, #48	; 0x30
 808aa6a:	f005 f95f 	bl	808fd2c <_ZN6StringC1ERKS_>
 808aa6e:	a80c      	add	r0, sp, #48	; 0x30
 808aa70:	f7fc fc28 	bl	80872c4 <_Z23selectTemperatureSensor6String>
 808aa74:	e75b      	b.n	808a92e <_Z18callConfigFunction6String+0x5a>
 808aa76:	4668      	mov	r0, sp
 808aa78:	491f      	ldr	r1, [pc, #124]	; (808aaf8 <_Z18callConfigFunction6String+0x224>)
 808aa7a:	f005 fa80 	bl	808ff7e <_ZNK6String6equalsEPKc>
  if (functionName == "selectedTemperatureSensor") return selectedTemperatureSensor();
 808aa7e:	b110      	cbz	r0, 808aa86 <_Z18callConfigFunction6String+0x1b2>
 808aa80:	f7fc fc54 	bl	808732c <_Z25selectedTemperatureSensorv>
 808aa84:	e7a4      	b.n	808a9d0 <_Z18callConfigFunction6String+0xfc>
 808aa86:	4668      	mov	r0, sp
 808aa88:	491c      	ldr	r1, [pc, #112]	; (808aafc <_Z18callConfigFunction6String+0x228>)
 808aa8a:	f005 fa78 	bl	808ff7e <_ZNK6String6equalsEPKc>
  if (functionName == "enableFlash") return enableFlash(commandParameter);
 808aa8e:	b118      	cbz	r0, 808aa98 <_Z18callConfigFunction6String+0x1c4>
 808aa90:	a804      	add	r0, sp, #16
 808aa92:	f7fc fe7d 	bl	8087790 <_Z11enableFlashR6String>
 808aa96:	e79b      	b.n	808a9d0 <_Z18callConfigFunction6String+0xfc>
 808aa98:	4668      	mov	r0, sp
 808aa9a:	4919      	ldr	r1, [pc, #100]	; (808ab00 <_Z18callConfigFunction6String+0x22c>)
 808aa9c:	f005 fa6f 	bl	808ff7e <_ZNK6String6equalsEPKc>
  if (functionName == "setMetricIntervals") return saveGXPublishIntervals(commandParameter);
 808aaa0:	b118      	cbz	r0, 808aaaa <_Z18callConfigFunction6String+0x1d6>
 808aaa2:	a804      	add	r0, sp, #16
 808aaa4:	f7fc feae 	bl	8087804 <_Z22saveGXPublishIntervalsR6String>
 808aaa8:	e792      	b.n	808a9d0 <_Z18callConfigFunction6String+0xfc>
 808aaaa:	4668      	mov	r0, sp
 808aaac:	4915      	ldr	r1, [pc, #84]	; (808ab04 <_Z18callConfigFunction6String+0x230>)
 808aaae:	f005 fa66 	bl	808ff7e <_ZNK6String6equalsEPKc>
  if (functionName == "disableMetricsExceptFuelLevel") return disableMetricsExceptFuelLevel();
 808aab2:	b110      	cbz	r0, 808aaba <_Z18callConfigFunction6String+0x1e6>
 808aab4:	f7fc fc8e 	bl	80873d4 <_Z29disableMetricsExceptFuelLevelv>
 808aab8:	e78a      	b.n	808a9d0 <_Z18callConfigFunction6String+0xfc>
  return -99;
 808aaba:	f06f 0462 	mvn.w	r4, #98	; 0x62
 808aabe:	e73a      	b.n	808a936 <_Z18callConfigFunction6String+0x62>
 808aac0:	08094ad5 	.word	0x08094ad5
 808aac4:	080945da 	.word	0x080945da
 808aac8:	080945e5 	.word	0x080945e5
 808aacc:	080945f2 	.word	0x080945f2
 808aad0:	08094600 	.word	0x08094600
 808aad4:	0809460b 	.word	0x0809460b
 808aad8:	0809461f 	.word	0x0809461f
 808aadc:	0809462e 	.word	0x0809462e
 808aae0:	0809463e 	.word	0x0809463e
 808aae4:	08094655 	.word	0x08094655
 808aae8:	0809466b 	.word	0x0809466b
 808aaec:	0809467d 	.word	0x0809467d
 808aaf0:	08094693 	.word	0x08094693
 808aaf4:	080946a6 	.word	0x080946a6
 808aaf8:	080946be 	.word	0x080946be
 808aafc:	080946d8 	.word	0x080946d8
 808ab00:	080946e4 	.word	0x080946e4
 808ab04:	080946f7 	.word	0x080946f7

0808ab08 <_Z13triggerRelaysh>:
}

void triggerRelays(uint8_t saved_relay_states)
{
  if (saved_relay_states > RELAY_1_2_ON) return;
 808ab08:	2803      	cmp	r0, #3
{
 808ab0a:	b510      	push	{r4, lr}
  if (saved_relay_states > RELAY_1_2_ON) return;
 808ab0c:	d813      	bhi.n	808ab36 <_Z13triggerRelaysh+0x2e>

  uint8_t rly1_state = saved_relay_states & 1;          // The state of relay1 is the value of the 0th bit; 0000000x
  uint8_t rly2_state = saved_relay_states & 2;          // The state of relay2 is the value of the 1th bit; 000000x0

  // Trigger the relays to remain in thier previous states, prior to the system reset
  RLY1(rly1_state);
 808ab0e:	f010 0201 	ands.w	r2, r0, #1
  uint8_t rly2_state = saved_relay_states & 2;          // The state of relay2 is the value of the 1th bit; 000000x0
 808ab12:	f000 0402 	and.w	r4, r0, #2
  RLY1(rly1_state);
 808ab16:	bf18      	it	ne
 808ab18:	2201      	movne	r2, #1
 808ab1a:	2107      	movs	r1, #7
 808ab1c:	4806      	ldr	r0, [pc, #24]	; (808ab38 <_Z13triggerRelaysh+0x30>)
 808ab1e:	f002 f8dd 	bl	808ccdc <_ZN7TCA953512digitalWriteEtb>
  RLY2(rly2_state);
 808ab22:	b134      	cbz	r4, 808ab32 <_Z13triggerRelaysh+0x2a>
 808ab24:	2201      	movs	r2, #1
}
 808ab26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  RLY2(rly2_state);
 808ab2a:	2106      	movs	r1, #6
 808ab2c:	4802      	ldr	r0, [pc, #8]	; (808ab38 <_Z13triggerRelaysh+0x30>)
 808ab2e:	f002 b8d5 	b.w	808ccdc <_ZN7TCA953512digitalWriteEtb>
 808ab32:	4622      	mov	r2, r4
 808ab34:	e7f7      	b.n	808ab26 <_Z13triggerRelaysh+0x1e>
}
 808ab36:	bd10      	pop	{r4, pc}
 808ab38:	200012f6 	.word	0x200012f6

0808ab3c <_Z7sysInitv>:
{
 808ab3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 808ab3e:	2300      	movs	r3, #0
 808ab40:	2209      	movs	r2, #9
 808ab42:	4979      	ldr	r1, [pc, #484]	; (808ad28 <_Z7sysInitv+0x1ec>)
 808ab44:	4879      	ldr	r0, [pc, #484]	; (808ad2c <_Z7sysInitv+0x1f0>)
 808ab46:	f002 fc3f 	bl	808d3c8 <spark_variable>
 808ab4a:	2300      	movs	r3, #0
 808ab4c:	2209      	movs	r2, #9
 808ab4e:	4978      	ldr	r1, [pc, #480]	; (808ad30 <_Z7sysInitv+0x1f4>)
 808ab50:	4878      	ldr	r0, [pc, #480]	; (808ad34 <_Z7sysInitv+0x1f8>)
 808ab52:	f002 fc39 	bl	808d3c8 <spark_variable>
 808ab56:	2300      	movs	r3, #0
 808ab58:	2209      	movs	r2, #9
 808ab5a:	4977      	ldr	r1, [pc, #476]	; (808ad38 <_Z7sysInitv+0x1fc>)
 808ab5c:	4877      	ldr	r0, [pc, #476]	; (808ad3c <_Z7sysInitv+0x200>)
 808ab5e:	f002 fc33 	bl	808d3c8 <spark_variable>
 808ab62:	2300      	movs	r3, #0
 808ab64:	2204      	movs	r2, #4
 808ab66:	4976      	ldr	r1, [pc, #472]	; (808ad40 <_Z7sysInitv+0x204>)
 808ab68:	4876      	ldr	r0, [pc, #472]	; (808ad44 <_Z7sysInitv+0x208>)
 808ab6a:	f002 fc2d 	bl	808d3c8 <spark_variable>
  Particle.variable("D1", (&gx_interval.bin_input1), BOOLEAN);
 808ab6e:	4976      	ldr	r1, [pc, #472]	; (808ad48 <_Z7sysInitv+0x20c>)
 808ab70:	4876      	ldr	r0, [pc, #472]	; (808ad4c <_Z7sysInitv+0x210>)
 808ab72:	f7ff f8a6 	bl	8089cc2 <_ZN10CloudClass8variableIA3_cJPbRK17CloudVariableTypeIbvEEEEbRKT_DpOT0_.isra.0>
  Particle.variable("D2", (&gx_interval.bin_input2), BOOLEAN);
 808ab76:	4976      	ldr	r1, [pc, #472]	; (808ad50 <_Z7sysInitv+0x214>)
 808ab78:	4876      	ldr	r0, [pc, #472]	; (808ad54 <_Z7sysInitv+0x218>)
 808ab7a:	f7ff f8a2 	bl	8089cc2 <_ZN10CloudClass8variableIA3_cJPbRK17CloudVariableTypeIbvEEEEbRKT_DpOT0_.isra.0>
  Particle.variable("D3", (&gx_interval.bin_input3), BOOLEAN);
 808ab7e:	4976      	ldr	r1, [pc, #472]	; (808ad58 <_Z7sysInitv+0x21c>)
 808ab80:	4876      	ldr	r0, [pc, #472]	; (808ad5c <_Z7sysInitv+0x220>)
 808ab82:	f7ff f89e 	bl	8089cc2 <_ZN10CloudClass8variableIA3_cJPbRK17CloudVariableTypeIbvEEEEbRKT_DpOT0_.isra.0>
  Particle.variable("D4", (&gx_interval.bin_input4), BOOLEAN);
 808ab86:	4976      	ldr	r1, [pc, #472]	; (808ad60 <_Z7sysInitv+0x224>)
 808ab88:	4876      	ldr	r0, [pc, #472]	; (808ad64 <_Z7sysInitv+0x228>)
 808ab8a:	f7ff f89a 	bl	8089cc2 <_ZN10CloudClass8variableIA3_cJPbRK17CloudVariableTypeIbvEEEEbRKT_DpOT0_.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 808ab8e:	4a76      	ldr	r2, [pc, #472]	; (808ad68 <_Z7sysInitv+0x22c>)
 808ab90:	4976      	ldr	r1, [pc, #472]	; (808ad6c <_Z7sysInitv+0x230>)
 808ab92:	4877      	ldr	r0, [pc, #476]	; (808ad70 <_Z7sysInitv+0x234>)
 808ab94:	f002 fe3d 	bl	808d812 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 808ab98:	4a76      	ldr	r2, [pc, #472]	; (808ad74 <_Z7sysInitv+0x238>)
 808ab9a:	4977      	ldr	r1, [pc, #476]	; (808ad78 <_Z7sysInitv+0x23c>)
 808ab9c:	4874      	ldr	r0, [pc, #464]	; (808ad70 <_Z7sysInitv+0x234>)
 808ab9e:	f002 fe38 	bl	808d812 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 808aba2:	4a76      	ldr	r2, [pc, #472]	; (808ad7c <_Z7sysInitv+0x240>)
 808aba4:	4976      	ldr	r1, [pc, #472]	; (808ad80 <_Z7sysInitv+0x244>)
 808aba6:	4872      	ldr	r0, [pc, #456]	; (808ad70 <_Z7sysInitv+0x234>)
 808aba8:	f002 fe33 	bl	808d812 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 808abac:	4a75      	ldr	r2, [pc, #468]	; (808ad84 <_Z7sysInitv+0x248>)
 808abae:	4976      	ldr	r1, [pc, #472]	; (808ad88 <_Z7sysInitv+0x24c>)
 808abb0:	486f      	ldr	r0, [pc, #444]	; (808ad70 <_Z7sysInitv+0x234>)
 808abb2:	f002 fe2e 	bl	808d812 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  EEPROM.get(EEPROM_CONFIG_STARTADDR, mainGXConfig);
 808abb6:	f005 fe6f 	bl	8090898 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 808abba:	f240 200a 	movw	r0, #522	; 0x20a
 808abbe:	2286      	movs	r2, #134	; 0x86
 808abc0:	4972      	ldr	r1, [pc, #456]	; (808ad8c <_Z7sysInitv+0x250>)
 808abc2:	f002 f9cb 	bl	808cf5c <HAL_EEPROM_Get>
  if (!portExpander.begin())
 808abc6:	4872      	ldr	r0, [pc, #456]	; (808ad90 <_Z7sysInitv+0x254>)
 808abc8:	f001 fffa 	bl	808cbc0 <_ZN7TCA95355beginEv>
 808abcc:	2800      	cmp	r0, #0
 808abce:	f000 809a 	beq.w	808ad06 <_Z7sysInitv+0x1ca>
 808abd2:	2406      	movs	r4, #6
      portExpander.pinMode(i, OUTPUT);
 808abd4:	4d6e      	ldr	r5, [pc, #440]	; (808ad90 <_Z7sysInitv+0x254>)
 808abd6:	4621      	mov	r1, r4
 808abd8:	2201      	movs	r2, #1
 808abda:	4628      	mov	r0, r5
 808abdc:	f002 f864 	bl	808cca8 <_ZN7TCA95357pinModeEt7PinMode>
      portExpander.digitalWrite(i, LOW);
 808abe0:	4621      	mov	r1, r4
 808abe2:	3401      	adds	r4, #1
 808abe4:	2200      	movs	r2, #0
 808abe6:	4628      	mov	r0, r5
 808abe8:	b2a4      	uxth	r4, r4
 808abea:	f002 f877 	bl	808ccdc <_ZN7TCA953512digitalWriteEtb>
    for (uint8_t i = 6; i < 12; i++)
 808abee:	2c0c      	cmp	r4, #12
 808abf0:	d1f1      	bne.n	808abd6 <_Z7sysInitv+0x9a>
      portExpander.pinMode(i, INPUT);
 808abf2:	4d67      	ldr	r5, [pc, #412]	; (808ad90 <_Z7sysInitv+0x254>)
 808abf4:	4621      	mov	r1, r4
 808abf6:	3401      	adds	r4, #1
 808abf8:	2200      	movs	r2, #0
 808abfa:	4628      	mov	r0, r5
 808abfc:	b2a4      	uxth	r4, r4
 808abfe:	f002 f853 	bl	808cca8 <_ZN7TCA95357pinModeEt7PinMode>
    for (uint8_t i = 12; i < 16; i++)
 808ac02:	2c10      	cmp	r4, #16
 808ac04:	d1f6      	bne.n	808abf4 <_Z7sysInitv+0xb8>
  attachInterrupt(pe_int, binaryInputISR, CHANGE);
 808ac06:	2500      	movs	r5, #0
    relay_states = mainGXConfig.RELAYS_STATE;
 808ac08:	4c60      	ldr	r4, [pc, #384]	; (808ad8c <_Z7sysInitv+0x250>)
 808ac0a:	4b62      	ldr	r3, [pc, #392]	; (808ad94 <_Z7sysInitv+0x258>)
 808ac0c:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
 808ac10:	4e61      	ldr	r6, [pc, #388]	; (808ad98 <_Z7sysInitv+0x25c>)
 808ac12:	7018      	strb	r0, [r3, #0]
    triggerRelays(relay_states);
 808ac14:	f7ff ff78 	bl	808ab08 <_Z13triggerRelaysh>
    static bool on(system_event_t events, void(*handler)(system_event_t, int,void*)) {
        return !system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), nullptr);
    }

    static bool on(system_event_t events, void(*handler)(system_event_t, int)) {
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
 808ac18:	2300      	movs	r3, #0
 808ac1a:	4a60      	ldr	r2, [pc, #384]	; (808ad9c <_Z7sysInitv+0x260>)
 808ac1c:	2100      	movs	r1, #0
 808ac1e:	2040      	movs	r0, #64	; 0x40
 808ac20:	f002 fb8c 	bl	808d33c <system_subscribe_event>
  Serial.begin(9600); // Init. Serial debugging @ 9600 bps
 808ac24:	f005 fbe8 	bl	80903f8 <_Z16_fetch_usbserialv>
 808ac28:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 808ac2c:	f005 fbc6 	bl	80903bc <_ZN9USBSerial5beginEl>
  pinMode(timer_pin, OUTPUT); // WDT pulse pin init..
 808ac30:	2101      	movs	r1, #1
 808ac32:	2007      	movs	r0, #7
 808ac34:	f005 fdee 	bl	8090814 <pinMode>
  pinMode(ANALOG_INPUT_1, INPUT);
 808ac38:	2100      	movs	r1, #0
 808ac3a:	200e      	movs	r0, #14
 808ac3c:	f005 fdea 	bl	8090814 <pinMode>
  pinMode(pe_int, INPUT);
 808ac40:	2100      	movs	r1, #0
 808ac42:	2005      	movs	r0, #5
 808ac44:	f005 fde6 	bl	8090814 <pinMode>
  attachInterrupt(pe_int, binaryInputISR, CHANGE);
 808ac48:	462a      	mov	r2, r5
 808ac4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 808ac4e:	4954      	ldr	r1, [pc, #336]	; (808ada0 <_Z7sysInitv+0x264>)
 808ac50:	9500      	str	r5, [sp, #0]
 808ac52:	2005      	movs	r0, #5
 808ac54:	f003 fa60 	bl	808e118 <_Z15attachInterrupttPFvvE13InterruptModeah>
  Log.info("INPUT VOLTAGE: %f",getBattVoltage());
 808ac58:	f7fc f9ee 	bl	8087038 <_Z14getBattVoltagev>
 808ac5c:	f006 f8d8 	bl	8090e10 <__aeabi_f2d>
 808ac60:	4602      	mov	r2, r0
 808ac62:	460b      	mov	r3, r1
 808ac64:	484f      	ldr	r0, [pc, #316]	; (808ada4 <_Z7sysInitv+0x268>)
 808ac66:	4950      	ldr	r1, [pc, #320]	; (808ada8 <_Z7sysInitv+0x26c>)
 808ac68:	f7fa fe94 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
  if(getBattVoltage() > MIN_INPUT_POWER)
 808ac6c:	f7fc f9e4 	bl	8087038 <_Z14getBattVoltagev>
 808ac70:	494e      	ldr	r1, [pc, #312]	; (808adac <_Z7sysInitv+0x270>)
 808ac72:	f006 fef9 	bl	8091a68 <__aeabi_fcmpgt>
 808ac76:	1b40      	subs	r0, r0, r5
 808ac78:	bf18      	it	ne
 808ac7a:	2001      	movne	r0, #1
 808ac7c:	7230      	strb	r0, [r6, #8]
  powerLed.ledRoutine();
 808ac7e:	4630      	mov	r0, r6
 808ac80:	f7fe f9c4 	bl	808900c <_ZN3LED10ledRoutineEv>
  setElectronChrgOff(false);
 808ac84:	4628      	mov	r0, r5
 808ac86:	f7fc fc7d 	bl	8087584 <_Z18setElectronChrgOffb>
  genmetrics_active = mainGXConfig.GENMETRICS_ACTIVE;
 808ac8a:	7822      	ldrb	r2, [r4, #0]
  if (genmetrics_active > MINIMUM_GENSETS)
 808ac8c:	4b48      	ldr	r3, [pc, #288]	; (808adb0 <_Z7sysInitv+0x274>)
 808ac8e:	2a01      	cmp	r2, #1
  genmetrics_active = mainGXConfig.GENMETRICS_ACTIVE;
 808ac90:	bf94      	ite	ls
 808ac92:	701a      	strbls	r2, [r3, #0]
    genmetrics_active = 0;
 808ac94:	701d      	strbhi	r5, [r3, #0]
  gridmetrics_active = mainGXConfig.GRIDMETRICS_ACTIVE;
 808ac96:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
    mainGXConfig.GENMETRICS_ACTIVE = genmetrics_active;
 808ac9a:	bf88      	it	hi
 808ac9c:	7025      	strbhi	r5, [r4, #0]
  if (gridmetrics_active > static_cast<uint8_t>(GRID_MTRCS_METER))
 808ac9e:	2b02      	cmp	r3, #2
    gridmetrics_active = GRID_MTRCS_OFF;
 808aca0:	bf88      	it	hi
 808aca2:	2300      	movhi	r3, #0
 808aca4:	4a43      	ldr	r2, [pc, #268]	; (808adb4 <_Z7sysInitv+0x278>)
    mainGXConfig.GRIDMETRICS_ACTIVE = gridmetrics_active;
 808aca6:	bf8a      	itet	hi
 808aca8:	f884 3077 	strbhi.w	r3, [r4, #119]	; 0x77
  gridmetrics_active = mainGXConfig.GRIDMETRICS_ACTIVE;
 808acac:	7013      	strbls	r3, [r2, #0]
    gridmetrics_active = GRID_MTRCS_OFF;
 808acae:	7013      	strbhi	r3, [r2, #0]
  initSensorReadings(); // initialize sensor readings
 808acb0:	f7fc fa4e 	bl	8087150 <_Z18initSensorReadingsv>
  spiFlash.begin();
 808acb4:	4840      	ldr	r0, [pc, #256]	; (808adb8 <_Z7sysInitv+0x27c>)
 808acb6:	f001 fd26 	bl	808c706 <_ZN8SpiFlash5beginEv>
  if (!spiFlash.isValid()) {
 808acba:	483f      	ldr	r0, [pc, #252]	; (808adb8 <_Z7sysInitv+0x27c>)
 808acbc:	f001 fbb5 	bl	808c42a <_ZN8SpiFlash7isValidEv>
 808acc0:	4605      	mov	r5, r0
 808acc2:	bb10      	cbnz	r0, 808ad0a <_Z7sysInitv+0x1ce>
    Log.error("No valid flash chip");
 808acc4:	493d      	ldr	r1, [pc, #244]	; (808adbc <_Z7sysInitv+0x280>)
 808acc6:	4837      	ldr	r0, [pc, #220]	; (808ada4 <_Z7sysInitv+0x268>)
 808acc8:	f7fc fbd7 	bl	808747a <_ZNK5spark6Logger5errorEPKcz>
    mainGXConfig.USE_FLASH = use_flash;
 808accc:	f884 5075 	strb.w	r5, [r4, #117]	; 0x75
  use_flash = mainGXConfig.USE_FLASH;
 808acd0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 808acd4:	4a3a      	ldr	r2, [pc, #232]	; (808adc0 <_Z7sysInitv+0x284>)
  if (use_flash == 0xFF)
 808acd6:	2bff      	cmp	r3, #255	; 0xff
  use_flash = mainGXConfig.USE_FLASH;
 808acd8:	7013      	strb	r3, [r2, #0]
  if (use_flash == 0xFF)
 808acda:	d11f      	bne.n	808ad1c <_Z7sysInitv+0x1e0>
    use_flash = true;
 808acdc:	2301      	movs	r3, #1
 808acde:	7013      	strb	r3, [r2, #0]
  Log.info("FLASH STATUS: %s", use_flash ? "IN USE" : "NOT USED");
 808ace0:	4a38      	ldr	r2, [pc, #224]	; (808adc4 <_Z7sysInitv+0x288>)
    mainGXConfig.USE_FLASH = use_flash;
 808ace2:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
  Log.info("FLASH STATUS: %s", use_flash ? "IN USE" : "NOT USED");
 808ace6:	4938      	ldr	r1, [pc, #224]	; (808adc8 <_Z7sysInitv+0x28c>)
 808ace8:	482e      	ldr	r0, [pc, #184]	; (808ada4 <_Z7sysInitv+0x268>)
 808acea:	f7fa fe53 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
  strcpy(last_published_metric, mainGXConfig.LAST_PUBL_METRIC);
 808acee:	4937      	ldr	r1, [pc, #220]	; (808adcc <_Z7sysInitv+0x290>)
 808acf0:	4813      	ldr	r0, [pc, #76]	; (808ad40 <_Z7sysInitv+0x204>)
 808acf2:	f007 f934 	bl	8091f5e <strcpy>
  Log.info("Last published metric as read from EEPROM: %s", last_published_metric);
 808acf6:	482b      	ldr	r0, [pc, #172]	; (808ada4 <_Z7sysInitv+0x268>)
 808acf8:	4a11      	ldr	r2, [pc, #68]	; (808ad40 <_Z7sysInitv+0x204>)
 808acfa:	4935      	ldr	r1, [pc, #212]	; (808add0 <_Z7sysInitv+0x294>)
 808acfc:	f7fa fe4a 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
  storeConfigurations();
 808ad00:	f002 f866 	bl	808cdd0 <_Z19storeConfigurationsv>
  return INIT_SUCCESS;
 808ad04:	2003      	movs	r0, #3
}
 808ad06:	b002      	add	sp, #8
 808ad08:	bd70      	pop	{r4, r5, r6, pc}
    Log.info("jedecId=%06lx", spiFlash.jedecIdRead());
 808ad0a:	482b      	ldr	r0, [pc, #172]	; (808adb8 <_Z7sysInitv+0x27c>)
 808ad0c:	f001 fc48 	bl	808c5a0 <_ZN8SpiFlash11jedecIdReadEv>
 808ad10:	4930      	ldr	r1, [pc, #192]	; (808add4 <_Z7sysInitv+0x298>)
 808ad12:	4602      	mov	r2, r0
 808ad14:	4823      	ldr	r0, [pc, #140]	; (808ada4 <_Z7sysInitv+0x268>)
 808ad16:	f7fa fe3d 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
 808ad1a:	e7d9      	b.n	808acd0 <_Z7sysInitv+0x194>
  Log.info("FLASH STATUS: %s", use_flash ? "IN USE" : "NOT USED");
 808ad1c:	4a29      	ldr	r2, [pc, #164]	; (808adc4 <_Z7sysInitv+0x288>)
 808ad1e:	492e      	ldr	r1, [pc, #184]	; (808add8 <_Z7sysInitv+0x29c>)
 808ad20:	2b00      	cmp	r3, #0
 808ad22:	bf08      	it	eq
 808ad24:	460a      	moveq	r2, r1
 808ad26:	e7de      	b.n	808ace6 <_Z7sysInitv+0x1aa>
 808ad28:	20001230 	.word	0x20001230
 808ad2c:	08094725 	.word	0x08094725
 808ad30:	20001170 	.word	0x20001170
 808ad34:	08094730 	.word	0x08094730
 808ad38:	20001310 	.word	0x20001310
 808ad3c:	0809473a 	.word	0x0809473a
 808ad40:	2000124f 	.word	0x2000124f
 808ad44:	0809474d 	.word	0x0809474d
 808ad48:	20000533 	.word	0x20000533
 808ad4c:	08094763 	.word	0x08094763
 808ad50:	20000532 	.word	0x20000532
 808ad54:	08094766 	.word	0x08094766
 808ad58:	20000531 	.word	0x20000531
 808ad5c:	08094769 	.word	0x08094769
 808ad60:	20000530 	.word	0x20000530
 808ad64:	0809476c 	.word	0x0809476c
 808ad68:	0809476f 	.word	0x0809476f
 808ad6c:	0808a8d5 	.word	0x0808a8d5
 808ad70:	0808d7e7 	.word	0x0808d7e7
 808ad74:	0809477e 	.word	0x0809477e
 808ad78:	080883c9 	.word	0x080883c9
 808ad7c:	0809478f 	.word	0x0809478f
 808ad80:	08086a55 	.word	0x08086a55
 808ad84:	0809479e 	.word	0x0809479e
 808ad88:	080874f5 	.word	0x080874f5
 808ad8c:	20001268 	.word	0x20001268
 808ad90:	200012f6 	.word	0x200012f6
 808ad94:	20000da9 	.word	0x20000da9
 808ad98:	200012f8 	.word	0x200012f8
 808ad9c:	08089d05 	.word	0x08089d05
 808ada0:	08089c11 	.word	0x08089c11
 808ada4:	200015a4 	.word	0x200015a4
 808ada8:	080947a4 	.word	0x080947a4
 808adac:	41100000 	.word	0x41100000
 808adb0:	2000123c 	.word	0x2000123c
 808adb4:	20001244 	.word	0x20001244
 808adb8:	200013a8 	.word	0x200013a8
 808adbc:	080947b6 	.word	0x080947b6
 808adc0:	20000538 	.word	0x20000538
 808adc4:	08094715 	.word	0x08094715
 808adc8:	080947d8 	.word	0x080947d8
 808adcc:	2000126c 	.word	0x2000126c
 808add0:	080947e9 	.word	0x080947e9
 808add4:	080947ca 	.word	0x080947ca
 808add8:	0809471c 	.word	0x0809471c

0808addc <_Z15fetchGenConfigsv>:
{
 808addc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  last_saved_config = mainGXConfig.GENCONFIGS_STATUS;
 808ade0:	4931      	ldr	r1, [pc, #196]	; (808aea8 <_Z15fetchGenConfigsv+0xcc>)
{
 808ade2:	b0b1      	sub	sp, #196	; 0xc4
  if ((last_saved_config < MINIMUM_GENSETS) ||
 808ade4:	f891 306c 	ldrb.w	r3, [r1, #108]	; 0x6c
 808ade8:	3b01      	subs	r3, #1
 808adea:	2b05      	cmp	r3, #5
 808adec:	d854      	bhi.n	808ae98 <_Z15fetchGenConfigsv+0xbc>
  memcpy(genConfigs, mainGXConfig.GENCONFIG, sizeof(mainGXConfig.GENCONFIG));
 808adee:	2254      	movs	r2, #84	; 0x54
 808adf0:	3118      	adds	r1, #24
 808adf2:	a81b      	add	r0, sp, #108	; 0x6c
 808adf4:	f007 f83e 	bl	8091e74 <memcpy>
  if (publish_genconfig_flag)          
 808adf8:	4b2c      	ldr	r3, [pc, #176]	; (808aeac <_Z15fetchGenConfigsv+0xd0>)
 808adfa:	781b      	ldrb	r3, [r3, #0]
 808adfc:	2b00      	cmp	r3, #0
 808adfe:	d04e      	beq.n	808ae9e <_Z15fetchGenConfigsv+0xc2>
    if(validateConfigurations() == false)
 808ae00:	f001 ffba 	bl	808cd78 <_Z22validateConfigurationsv>
 808ae04:	2800      	cmp	r0, #0
 808ae06:	d047      	beq.n	808ae98 <_Z15fetchGenConfigsv+0xbc>
    String GXGenConfigString = "{\"v\":\"1\",\"gen_configs\":{";
 808ae08:	2500      	movs	r5, #0
 808ae0a:	4929      	ldr	r1, [pc, #164]	; (808aeb0 <_Z15fetchGenConfigsv+0xd4>)
 808ae0c:	a806      	add	r0, sp, #24
 808ae0e:	f004 ff43 	bl	808fc98 <_ZN6StringC1EPKc>
      char genConfigValBuffer[MAX_GENCONFIG_CHARS] = NULL_STRING;
 808ae12:	462e      	mov	r6, r5
      sprintf(genConfigValBuffer, "\"Gen%d\":\"%s,%d,%d,%d,%d,%u\"", j+ZERO_INDEX_CORRECTION,
 808ae14:	4f27      	ldr	r7, [pc, #156]	; (808aeb4 <_Z15fetchGenConfigsv+0xd8>)
         GXGenConfigString.concat(",");  
 808ae16:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 808aec8 <_Z15fetchGenConfigsv+0xec>
 808ae1a:	ac1b      	add	r4, sp, #108	; 0x6c
      char genConfigValBuffer[MAX_GENCONFIG_CHARS] = NULL_STRING;
 808ae1c:	46a9      	mov	r9, r5
 808ae1e:	223d      	movs	r2, #61	; 0x3d
 808ae20:	2100      	movs	r1, #0
 808ae22:	a80b      	add	r0, sp, #44	; 0x2c
 808ae24:	960a      	str	r6, [sp, #40]	; 0x28
 808ae26:	f007 f84d 	bl	8091ec4 <memset>
      sprintf(genConfigValBuffer, "\"Gen%d\":\"%s,%d,%d,%d,%d,%u\"", j+ZERO_INDEX_CORRECTION,
 808ae2a:	7b23      	ldrb	r3, [r4, #12]
 808ae2c:	3501      	adds	r5, #1
 808ae2e:	9304      	str	r3, [sp, #16]
 808ae30:	8963      	ldrh	r3, [r4, #10]
 808ae32:	462a      	mov	r2, r5
 808ae34:	9303      	str	r3, [sp, #12]
 808ae36:	7a23      	ldrb	r3, [r4, #8]
 808ae38:	4639      	mov	r1, r7
 808ae3a:	9302      	str	r3, [sp, #8]
 808ae3c:	79e3      	ldrb	r3, [r4, #7]
 808ae3e:	a80a      	add	r0, sp, #40	; 0x28
 808ae40:	9301      	str	r3, [sp, #4]
 808ae42:	79a3      	ldrb	r3, [r4, #6]
 808ae44:	9300      	str	r3, [sp, #0]
 808ae46:	4623      	mov	r3, r4
 808ae48:	f002 fb7e 	bl	808d548 <sprintf>
      GXGenConfigString.concat(genConfigValBuffer);
 808ae4c:	a90a      	add	r1, sp, #40	; 0x28
 808ae4e:	a806      	add	r0, sp, #24
 808ae50:	f005 f837 	bl	808fec2 <_ZN6String6concatEPKc>
      if (j < (MAXIMUM_GENSETS - ZERO_INDEX_CORRECTION))
 808ae54:	f1b9 0f05 	cmp.w	r9, #5
 808ae58:	d003      	beq.n	808ae62 <_Z15fetchGenConfigsv+0x86>
         GXGenConfigString.concat(",");  
 808ae5a:	4641      	mov	r1, r8
 808ae5c:	a806      	add	r0, sp, #24
 808ae5e:	f005 f830 	bl	808fec2 <_ZN6String6concatEPKc>
    for (uint8_t j = NO_GENSET; j < MAXIMUM_GENSETS; j++)
 808ae62:	2d06      	cmp	r5, #6
 808ae64:	f104 040e 	add.w	r4, r4, #14
 808ae68:	d1d8      	bne.n	808ae1c <_Z15fetchGenConfigsv+0x40>
    GXGenConfigString.concat("}}");
 808ae6a:	4913      	ldr	r1, [pc, #76]	; (808aeb8 <_Z15fetchGenConfigsv+0xdc>)
 808ae6c:	a806      	add	r0, sp, #24
 808ae6e:	f005 f828 	bl	808fec2 <_ZN6String6concatEPKc>
    return Flags<TagT, ValueT>(val_ | flags.val_);
 808ae72:	4b12      	ldr	r3, [pc, #72]	; (808aebc <_Z15fetchGenConfigsv+0xe0>)
 808ae74:	4a12      	ldr	r2, [pc, #72]	; (808aec0 <_Z15fetchGenConfigsv+0xe4>)
 808ae76:	781b      	ldrb	r3, [r3, #0]
 808ae78:	7812      	ldrb	r2, [r2, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808ae7a:	4912      	ldr	r1, [pc, #72]	; (808aec4 <_Z15fetchGenConfigsv+0xe8>)
 808ae7c:	4313      	orrs	r3, r2
 808ae7e:	f88d 3000 	strb.w	r3, [sp]
 808ae82:	9a06      	ldr	r2, [sp, #24]
 808ae84:	233c      	movs	r3, #60	; 0x3c
 808ae86:	a80a      	add	r0, sp, #40	; 0x28
 808ae88:	f002 fdce 	bl	808da28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      ~__shared_ptr() = default;
 808ae8c:	a80b      	add	r0, sp, #44	; 0x2c
 808ae8e:	f7fb fb89 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    String GXGenConfigString = "{\"v\":\"1\",\"gen_configs\":{";
 808ae92:	a806      	add	r0, sp, #24
 808ae94:	f004 feb6 	bl	808fc04 <_ZN6StringD1Ev>
}
 808ae98:	b031      	add	sp, #196	; 0xc4
 808ae9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
initialiseGenDevices(genConfigs);
 808ae9e:	a81b      	add	r0, sp, #108	; 0x6c
 808aea0:	f7fa fdb4 	bl	8085a0c <_Z20initialiseGenDevicesP15GeneratorConfig>
 808aea4:	e7f8      	b.n	808ae98 <_Z15fetchGenConfigsv+0xbc>
 808aea6:	bf00      	nop
 808aea8:	20001268 	.word	0x20001268
 808aeac:	20001305 	.word	0x20001305
 808aeb0:	08094817 	.word	0x08094817
 808aeb4:	08094830 	.word	0x08094830
 808aeb8:	0809484c 	.word	0x0809484c
 808aebc:	20001159 	.word	0x20001159
 808aec0:	20001158 	.word	0x20001158
 808aec4:	0809386b 	.word	0x0809386b
 808aec8:	08094597 	.word	0x08094597

0808aecc <_Z20fetchGXMtrcIntervalsv>:

  // Minimum device Interval Value: 60s
  constexpr uint16_t MIN_DEVICE_INTRVL = 60;

  // Read the metric intervals from the EEPROM and save them to the array of GX metric intervals.
  memcpy(gx_mtrc_intervl, mainGXConfig.GXMETRICS_INTRVLS, sizeof(mainGXConfig.GXMETRICS_INTRVLS));
 808aecc:	4937      	ldr	r1, [pc, #220]	; (808afac <_Z20fetchGXMtrcIntervalsv+0xe0>)

  // If the metric intervals are uninitialized, assign the default intervals
  if ((gx_mtrc_intervl[DEVICE_MTRC] == UINT16_MAX) || (gx_mtrc_intervl[DEVICE_MTRC] < MIN_DEVICE_INTRVL))
 808aece:	f64f 70c2 	movw	r0, #65474	; 0xffc2
  memcpy(gx_mtrc_intervl, mainGXConfig.GXMETRICS_INTRVLS, sizeof(mainGXConfig.GXMETRICS_INTRVLS));
 808aed2:	460a      	mov	r2, r1
{
 808aed4:	b510      	push	{r4, lr}
  memcpy(gx_mtrc_intervl, mainGXConfig.GXMETRICS_INTRVLS, sizeof(mainGXConfig.GXMETRICS_INTRVLS));
 808aed6:	4c36      	ldr	r4, [pc, #216]	; (808afb0 <_Z20fetchGXMtrcIntervalsv+0xe4>)
 808aed8:	f852 3f78 	ldr.w	r3, [r2, #120]!
{
 808aedc:	b0a2      	sub	sp, #136	; 0x88
  memcpy(gx_mtrc_intervl, mainGXConfig.GXMETRICS_INTRVLS, sizeof(mainGXConfig.GXMETRICS_INTRVLS));
 808aede:	6023      	str	r3, [r4, #0]
 808aee0:	6853      	ldr	r3, [r2, #4]
 808aee2:	6063      	str	r3, [r4, #4]
  if ((gx_mtrc_intervl[DEVICE_MTRC] == UINT16_MAX) || (gx_mtrc_intervl[DEVICE_MTRC] < MIN_DEVICE_INTRVL))
 808aee4:	8823      	ldrh	r3, [r4, #0]
 808aee6:	3b3c      	subs	r3, #60	; 0x3c
 808aee8:	b29b      	uxth	r3, r3
 808aeea:	4283      	cmp	r3, r0
 808aeec:	d90f      	bls.n	808af0e <_Z20fetchGXMtrcIntervalsv+0x42>
  {
    memcpy(gx_mtrc_intervl, DEFAULT_GX_MTRC_INTERVLS, sizeof(DEFAULT_GX_MTRC_INTERVLS));
 808aeee:	f44f 7361 	mov.w	r3, #900	; 0x384
 808aef2:	8023      	strh	r3, [r4, #0]
 808aef4:	235a      	movs	r3, #90	; 0x5a
 808aef6:	8063      	strh	r3, [r4, #2]
 808aef8:	f44f 73b4 	mov.w	r3, #360	; 0x168
 808aefc:	80a3      	strh	r3, [r4, #4]
 808aefe:	23b4      	movs	r3, #180	; 0xb4
 808af00:	80e3      	strh	r3, [r4, #6]
    memcpy(mainGXConfig.GXMETRICS_INTRVLS, gx_mtrc_intervl, sizeof(gx_mtrc_intervl));
 808af02:	6823      	ldr	r3, [r4, #0]
 808af04:	678b      	str	r3, [r1, #120]	; 0x78
 808af06:	6863      	ldr	r3, [r4, #4]
 808af08:	6053      	str	r3, [r2, #4]
    storeConfigurations();
 808af0a:	f001 ff61 	bl	808cdd0 <_Z19storeConfigurationsv>
  }

  // Publish the saved metric intervals to the cloud if the publish flag is set
  if (pub_gx_intervls_flag)
 808af0e:	4b29      	ldr	r3, [pc, #164]	; (808afb4 <_Z20fetchGXMtrcIntervalsv+0xe8>)
 808af10:	781b      	ldrb	r3, [r3, #0]
 808af12:	2b00      	cmp	r3, #0
 808af14:	d032      	beq.n	808af7c <_Z20fetchGXMtrcIntervalsv+0xb0>
  {
    // Verify if configurations in the EEPROM are still valid
    if(validateConfigurations() == false)
 808af16:	f001 ff2f 	bl	808cd78 <_Z22validateConfigurationsv>
 808af1a:	2800      	cmp	r0, #0
 808af1c:	d043      	beq.n	808afa6 <_Z20fetchGXMtrcIntervalsv+0xda>
    { return; }

    String GXMetricIntervlString = "{\"v\":\"1\",\"metric_intervals\":{";
 808af1e:	4926      	ldr	r1, [pc, #152]	; (808afb8 <_Z20fetchGXMtrcIntervalsv+0xec>)
 808af20:	a805      	add	r0, sp, #20
 808af22:	f004 feb9 	bl	808fc98 <_ZN6StringC1EPKc>
    char gx_mtrc_intervl_buff[100] = NULL_STRING;
 808af26:	2100      	movs	r1, #0
 808af28:	2260      	movs	r2, #96	; 0x60
 808af2a:	a80a      	add	r0, sp, #40	; 0x28
 808af2c:	9109      	str	r1, [sp, #36]	; 0x24
 808af2e:	f006 ffc9 	bl	8091ec4 <memset>

    sprintf(gx_mtrc_intervl_buff, "\"Device\":%d,\"Sensor\":%d,\"Gen\":%d,\"Grid\":%d",
 808af32:	88e3      	ldrh	r3, [r4, #6]
 808af34:	8822      	ldrh	r2, [r4, #0]
 808af36:	9301      	str	r3, [sp, #4]
 808af38:	88a3      	ldrh	r3, [r4, #4]
 808af3a:	4920      	ldr	r1, [pc, #128]	; (808afbc <_Z20fetchGXMtrcIntervalsv+0xf0>)
 808af3c:	9300      	str	r3, [sp, #0]
 808af3e:	a809      	add	r0, sp, #36	; 0x24
 808af40:	8863      	ldrh	r3, [r4, #2]
 808af42:	f002 fb01 	bl	808d548 <sprintf>
            gx_mtrc_intervl[DEVICE_MTRC], gx_mtrc_intervl[SENSOR_MTRC], 
            gx_mtrc_intervl[GEN_MTRC], gx_mtrc_intervl[GRID_MTRC]);

    GXMetricIntervlString.concat(gx_mtrc_intervl_buff);
 808af46:	a909      	add	r1, sp, #36	; 0x24
 808af48:	a805      	add	r0, sp, #20
 808af4a:	f004 ffba 	bl	808fec2 <_ZN6String6concatEPKc>
    GXMetricIntervlString.concat("}}");
 808af4e:	491c      	ldr	r1, [pc, #112]	; (808afc0 <_Z20fetchGXMtrcIntervalsv+0xf4>)
 808af50:	a805      	add	r0, sp, #20
 808af52:	f004 ffb6 	bl	808fec2 <_ZN6String6concatEPKc>
 808af56:	4b1b      	ldr	r3, [pc, #108]	; (808afc4 <_Z20fetchGXMtrcIntervalsv+0xf8>)
 808af58:	4a1b      	ldr	r2, [pc, #108]	; (808afc8 <_Z20fetchGXMtrcIntervalsv+0xfc>)
 808af5a:	781b      	ldrb	r3, [r3, #0]
 808af5c:	7812      	ldrb	r2, [r2, #0]
 808af5e:	491b      	ldr	r1, [pc, #108]	; (808afcc <_Z20fetchGXMtrcIntervalsv+0x100>)
 808af60:	4313      	orrs	r3, r2
 808af62:	f88d 3000 	strb.w	r3, [sp]
 808af66:	9a05      	ldr	r2, [sp, #20]
 808af68:	233c      	movs	r3, #60	; 0x3c
 808af6a:	a803      	add	r0, sp, #12
 808af6c:	f002 fd5c 	bl	808da28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 808af70:	a804      	add	r0, sp, #16
 808af72:	f7fb fb17 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    String GXMetricIntervlString = "{\"v\":\"1\",\"metric_intervals\":{";
 808af76:	a805      	add	r0, sp, #20
 808af78:	f004 fe44 	bl	808fc04 <_ZN6StringD1Ev>

    Particle.publish("gx_event", GXMetricIntervlString, PRIVATE, WITH_ACK);
  } 

  if (fresh_boot)
 808af7c:	4b14      	ldr	r3, [pc, #80]	; (808afd0 <_Z20fetchGXMtrcIntervalsv+0x104>)
 808af7e:	781b      	ldrb	r3, [r3, #0]
 808af80:	b18b      	cbz	r3, 808afa6 <_Z20fetchGXMtrcIntervalsv+0xda>
  {
    device_metrics_interval = gx_mtrc_intervl[DEVICE_MTRC] * ONETHOUSAND_MILLIS;
 808af82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808af86:	8822      	ldrh	r2, [r4, #0]
 808af88:	4912      	ldr	r1, [pc, #72]	; (808afd4 <_Z20fetchGXMtrcIntervalsv+0x108>)
 808af8a:	435a      	muls	r2, r3
 808af8c:	600a      	str	r2, [r1, #0]
    publish_sensor_metrics_at = gx_mtrc_intervl[SENSOR_MTRC] * ONETHOUSAND_MILLIS;
 808af8e:	8862      	ldrh	r2, [r4, #2]
 808af90:	4911      	ldr	r1, [pc, #68]	; (808afd8 <_Z20fetchGXMtrcIntervalsv+0x10c>)
 808af92:	435a      	muls	r2, r3
 808af94:	600a      	str	r2, [r1, #0]
    gendata_poll_interval = gx_mtrc_intervl[GEN_MTRC] * ONETHOUSAND_MILLIS;
 808af96:	88a2      	ldrh	r2, [r4, #4]
 808af98:	4910      	ldr	r1, [pc, #64]	; (808afdc <_Z20fetchGXMtrcIntervalsv+0x110>)
 808af9a:	435a      	muls	r2, r3
 808af9c:	600a      	str	r2, [r1, #0]
    griddata_poll_interval = gx_mtrc_intervl[GRID_MTRC] * ONETHOUSAND_MILLIS;
 808af9e:	88e2      	ldrh	r2, [r4, #6]
 808afa0:	4353      	muls	r3, r2
 808afa2:	4a0f      	ldr	r2, [pc, #60]	; (808afe0 <_Z20fetchGXMtrcIntervalsv+0x114>)
 808afa4:	6013      	str	r3, [r2, #0]
  }  
}
 808afa6:	b022      	add	sp, #136	; 0x88
 808afa8:	bd10      	pop	{r4, pc}
 808afaa:	bf00      	nop
 808afac:	20001268 	.word	0x20001268
 808afb0:	20001246 	.word	0x20001246
 808afb4:	20001304 	.word	0x20001304
 808afb8:	0809484f 	.word	0x0809484f
 808afbc:	0809486d 	.word	0x0809486d
 808afc0:	0809484c 	.word	0x0809484c
 808afc4:	20001158 	.word	0x20001158
 808afc8:	20001159 	.word	0x20001159
 808afcc:	0809386b 	.word	0x0809386b
 808afd0:	200000ec 	.word	0x200000ec
 808afd4:	20001198 	.word	0x20001198
 808afd8:	20001308 	.word	0x20001308
 808afdc:	20001238 	.word	0x20001238
 808afe0:	20001240 	.word	0x20001240

0808afe4 <_Z16handleInterruptsv>:
{
 808afe4:	b510      	push	{r4, lr}
 808afe6:	b086      	sub	sp, #24
    static bool connected(void) { return spark_cloud_flag_connected(); }
 808afe8:	f002 fa0e 	bl	808d408 <spark_cloud_flag_connected>
  if (Particle.connected() && fresh_boot)
 808afec:	b1a0      	cbz	r0, 808b018 <_Z16handleInterruptsv+0x34>
 808afee:	4c3f      	ldr	r4, [pc, #252]	; (808b0ec <_Z16handleInterruptsv+0x108>)
 808aff0:	7823      	ldrb	r3, [r4, #0]
 808aff2:	b18b      	cbz	r3, 808b018 <_Z16handleInterruptsv+0x34>
 808aff4:	4b3e      	ldr	r3, [pc, #248]	; (808b0f0 <_Z16handleInterruptsv+0x10c>)
 808aff6:	4a3f      	ldr	r2, [pc, #252]	; (808b0f4 <_Z16handleInterruptsv+0x110>)
 808aff8:	781b      	ldrb	r3, [r3, #0]
 808affa:	7812      	ldrb	r2, [r2, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808affc:	493e      	ldr	r1, [pc, #248]	; (808b0f8 <_Z16handleInterruptsv+0x114>)
 808affe:	4313      	orrs	r3, r2
 808b000:	f88d 3000 	strb.w	r3, [sp]
 808b004:	4a3d      	ldr	r2, [pc, #244]	; (808b0fc <_Z16handleInterruptsv+0x118>)
 808b006:	233c      	movs	r3, #60	; 0x3c
 808b008:	a802      	add	r0, sp, #8
 808b00a:	f002 fd0d 	bl	808da28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 808b00e:	a803      	add	r0, sp, #12
 808b010:	f7fb fac8 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    fresh_boot = false;
 808b014:	2300      	movs	r3, #0
 808b016:	7023      	strb	r3, [r4, #0]
  if (sample_adc)
 808b018:	4c39      	ldr	r4, [pc, #228]	; (808b100 <_Z16handleInterruptsv+0x11c>)
 808b01a:	7823      	ldrb	r3, [r4, #0]
 808b01c:	b11b      	cbz	r3, 808b026 <_Z16handleInterruptsv+0x42>
    sampleADCReadings();
 808b01e:	f7fe ffb5 	bl	8089f8c <_Z17sampleADCReadingsv>
    sample_adc = false;
 808b022:	2300      	movs	r3, #0
 808b024:	7023      	strb	r3, [r4, #0]
  if (run_system_checks)
 808b026:	4b37      	ldr	r3, [pc, #220]	; (808b104 <_Z16handleInterruptsv+0x120>)
 808b028:	781a      	ldrb	r2, [r3, #0]
 808b02a:	b10a      	cbz	r2, 808b030 <_Z16handleInterruptsv+0x4c>
    run_system_checks = false;
 808b02c:	2200      	movs	r2, #0
 808b02e:	701a      	strb	r2, [r3, #0]
  if (check_binary_inputs)
 808b030:	4b35      	ldr	r3, [pc, #212]	; (808b108 <_Z16handleInterruptsv+0x124>)
 808b032:	781a      	ldrb	r2, [r3, #0]
 808b034:	b11a      	cbz	r2, 808b03e <_Z16handleInterruptsv+0x5a>
    check_binary_inputs = false;
 808b036:	2200      	movs	r2, #0
 808b038:	701a      	strb	r2, [r3, #0]
    readBinaryInputs();
 808b03a:	f7fb fed9 	bl	8086df0 <_Z16readBinaryInputsv>
  if(should_retrieve_metrics)
 808b03e:	4c33      	ldr	r4, [pc, #204]	; (808b10c <_Z16handleInterruptsv+0x128>)
 808b040:	7823      	ldrb	r3, [r4, #0]
 808b042:	b133      	cbz	r3, 808b052 <_Z16handleInterruptsv+0x6e>
    GXMetrics.retrieveMetrics(end_time, start_time);
 808b044:	4a32      	ldr	r2, [pc, #200]	; (808b110 <_Z16handleInterruptsv+0x12c>)
 808b046:	4933      	ldr	r1, [pc, #204]	; (808b114 <_Z16handleInterruptsv+0x130>)
 808b048:	4833      	ldr	r0, [pc, #204]	; (808b118 <_Z16handleInterruptsv+0x134>)
 808b04a:	f7fd f8cb 	bl	80881e4 <_ZN8GXSpiffs15retrieveMetricsERmS0_>
    should_retrieve_metrics = false;
 808b04e:	2300      	movs	r3, #0
 808b050:	7023      	strb	r3, [r4, #0]
  if (poll_gendata_flag && gxgen_config_state)
 808b052:	4b32      	ldr	r3, [pc, #200]	; (808b11c <_Z16handleInterruptsv+0x138>)
 808b054:	781b      	ldrb	r3, [r3, #0]
 808b056:	b123      	cbz	r3, 808b062 <_Z16handleInterruptsv+0x7e>
 808b058:	4b31      	ldr	r3, [pc, #196]	; (808b120 <_Z16handleInterruptsv+0x13c>)
 808b05a:	781b      	ldrb	r3, [r3, #0]
 808b05c:	b10b      	cbz	r3, 808b062 <_Z16handleInterruptsv+0x7e>
    runGenDataPolls();
 808b05e:	f7fb fc3b 	bl	80868d8 <_Z15runGenDataPollsv>
  if (poll_griddata_flag)
 808b062:	4b30      	ldr	r3, [pc, #192]	; (808b124 <_Z16handleInterruptsv+0x140>)
 808b064:	781b      	ldrb	r3, [r3, #0]
 808b066:	b10b      	cbz	r3, 808b06c <_Z16handleInterruptsv+0x88>
    runGridDataPolls();
 808b068:	f7fb fab2 	bl	80865d0 <_Z16runGridDataPollsv>
  if ((new_genconfig_flag) && (millis() > new_genconfig_resetdelay))
 808b06c:	4c2e      	ldr	r4, [pc, #184]	; (808b128 <_Z16handleInterruptsv+0x144>)
 808b06e:	7823      	ldrb	r3, [r4, #0]
 808b070:	b14b      	cbz	r3, 808b086 <_Z16handleInterruptsv+0xa2>
 808b072:	f001 ff63 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
 808b076:	4b2d      	ldr	r3, [pc, #180]	; (808b12c <_Z16handleInterruptsv+0x148>)
 808b078:	681b      	ldr	r3, [r3, #0]
 808b07a:	4283      	cmp	r3, r0
 808b07c:	d203      	bcs.n	808b086 <_Z16handleInterruptsv+0xa2>
    new_genconfig_flag = false;
 808b07e:	2300      	movs	r3, #0
 808b080:	7023      	strb	r3, [r4, #0]
    performSHYFTReset();
 808b082:	f7fc fa09 	bl	8087498 <_Z17performSHYFTResetv>
  if (publish_genconfig_flag)
 808b086:	4c2a      	ldr	r4, [pc, #168]	; (808b130 <_Z16handleInterruptsv+0x14c>)
 808b088:	7823      	ldrb	r3, [r4, #0]
 808b08a:	b11b      	cbz	r3, 808b094 <_Z16handleInterruptsv+0xb0>
    fetchGenConfigs();
 808b08c:	f7ff fea6 	bl	808addc <_Z15fetchGenConfigsv>
    publish_genconfig_flag = false;
 808b090:	2300      	movs	r3, #0
 808b092:	7023      	strb	r3, [r4, #0]
  if (read_ufs_data && flDataConfig.num_of_fls > 0)
 808b094:	4b27      	ldr	r3, [pc, #156]	; (808b134 <_Z16handleInterruptsv+0x150>)
 808b096:	781a      	ldrb	r2, [r3, #0]
 808b098:	b132      	cbz	r2, 808b0a8 <_Z16handleInterruptsv+0xc4>
 808b09a:	4a27      	ldr	r2, [pc, #156]	; (808b138 <_Z16handleInterruptsv+0x154>)
 808b09c:	7892      	ldrb	r2, [r2, #2]
 808b09e:	b11a      	cbz	r2, 808b0a8 <_Z16handleInterruptsv+0xc4>
    read_ufs_data = false;
 808b0a0:	2200      	movs	r2, #0
 808b0a2:	701a      	strb	r2, [r3, #0]
    readMultiUfsMetrics();
 808b0a4:	f7fe ff16 	bl	8089ed4 <_Z19readMultiUfsMetricsv>
  if (shouldPerformSHYFTReset)
 808b0a8:	4b24      	ldr	r3, [pc, #144]	; (808b13c <_Z16handleInterruptsv+0x158>)
 808b0aa:	781a      	ldrb	r2, [r3, #0]
 808b0ac:	b15a      	cbz	r2, 808b0c6 <_Z16handleInterruptsv+0xe2>
    shouldPerformSHYFTReset = false;
 808b0ae:	2200      	movs	r2, #0
    triggerCloudReset("");
 808b0b0:	4923      	ldr	r1, [pc, #140]	; (808b140 <_Z16handleInterruptsv+0x15c>)
 808b0b2:	a802      	add	r0, sp, #8
    shouldPerformSHYFTReset = false;
 808b0b4:	701a      	strb	r2, [r3, #0]
    triggerCloudReset("");
 808b0b6:	f004 fdef 	bl	808fc98 <_ZN6StringC1EPKc>
 808b0ba:	a802      	add	r0, sp, #8
 808b0bc:	f7fc fa1a 	bl	80874f4 <_Z17triggerCloudReset6String>
 808b0c0:	a802      	add	r0, sp, #8
 808b0c2:	f004 fd9f 	bl	808fc04 <_ZN6StringD1Ev>
  if (pub_gx_intervls_flag)
 808b0c6:	4c1f      	ldr	r4, [pc, #124]	; (808b144 <_Z16handleInterruptsv+0x160>)
 808b0c8:	7823      	ldrb	r3, [r4, #0]
 808b0ca:	b11b      	cbz	r3, 808b0d4 <_Z16handleInterruptsv+0xf0>
    fetchGXMtrcIntervals();
 808b0cc:	f7ff fefe 	bl	808aecc <_Z20fetchGXMtrcIntervalsv>
    pub_gx_intervls_flag = false;
 808b0d0:	2300      	movs	r3, #0
 808b0d2:	7023      	strb	r3, [r4, #0]
  if (config_error_flag)
 808b0d4:	4c1c      	ldr	r4, [pc, #112]	; (808b148 <_Z16handleInterruptsv+0x164>)
 808b0d6:	7823      	ldrb	r3, [r4, #0]
 808b0d8:	b133      	cbz	r3, 808b0e8 <_Z16handleInterruptsv+0x104>
    publishError("eeprom_config", CONFIG_INVALID);
 808b0da:	f06f 0115 	mvn.w	r1, #21
 808b0de:	481b      	ldr	r0, [pc, #108]	; (808b14c <_Z16handleInterruptsv+0x168>)
 808b0e0:	f7fc faa0 	bl	8087624 <_Z12publishErrorPKcs>
    config_error_flag = false;
 808b0e4:	2300      	movs	r3, #0
 808b0e6:	7023      	strb	r3, [r4, #0]
}
 808b0e8:	b006      	add	sp, #24
 808b0ea:	bd10      	pop	{r4, pc}
 808b0ec:	200000ec 	.word	0x200000ec
 808b0f0:	20001159 	.word	0x20001159
 808b0f4:	20001158 	.word	0x20001158
 808b0f8:	0809386b 	.word	0x0809386b
 808b0fc:	08094898 	.word	0x08094898
 808b100:	20001339 	.word	0x20001339
 808b104:	20001338 	.word	0x20001338
 808b108:	20001178 	.word	0x20001178
 808b10c:	2000133a 	.word	0x2000133a
 808b110:	200013d8 	.word	0x200013d8
 808b114:	2000119c 	.word	0x2000119c
 808b118:	20001070 	.word	0x20001070
 808b11c:	200012f4 	.word	0x200012f4
 808b120:	2000124e 	.word	0x2000124e
 808b124:	200012f5 	.word	0x200012f5
 808b128:	200012ee 	.word	0x200012ee
 808b12c:	200012f0 	.word	0x200012f0
 808b130:	20001305 	.word	0x20001305
 808b134:	20001318 	.word	0x20001318
 808b138:	20000e4a 	.word	0x20000e4a
 808b13c:	20000ddb 	.word	0x20000ddb
 808b140:	08094ad5 	.word	0x08094ad5
 808b144:	20001304 	.word	0x20001304
 808b148:	20001194 	.word	0x20001194
 808b14c:	080948a4 	.word	0x080948a4

0808b150 <loop>:
{
 808b150:	b508      	push	{r3, lr}
  checkLastLoopTime();
 808b152:	f7fc fa4f 	bl	80875f4 <_Z17checkLastLoopTimev>
  handleTimedOperations();
 808b156:	f7ff fa77 	bl	808a648 <_Z21handleTimedOperationsv>
  handleInterrupts();
 808b15a:	f7ff ff43 	bl	808afe4 <_Z16handleInterruptsv>
  updateLEDRoutines();
 808b15e:	f7ff fb37 	bl	808a7d0 <_Z17updateLEDRoutinesv>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 808b162:	f002 f951 	bl	808d408 <spark_cloud_flag_connected>
  if (Particle.connected()) {
 808b166:	b138      	cbz	r0, 808b178 <loop+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808b168:	f001 fee8 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808b16c:	4b03      	ldr	r3, [pc, #12]	; (808b17c <loop+0x2c>)
 808b16e:	6018      	str	r0, [r3, #0]
}
 808b170:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
 808b174:	f002 b938 	b.w	808d3e8 <spark_process>
 808b178:	bd08      	pop	{r3, pc}
 808b17a:	bf00      	nop
 808b17c:	20001a58 	.word	0x20001a58

0808b180 <setup>:
{
 808b180:	b510      	push	{r4, lr}
 808b182:	b086      	sub	sp, #24
  checkHwdWatchdog();
 808b184:	f7fc f9f0 	bl	8087568 <_Z16checkHwdWatchdogv>
  delay(2000);
 808b188:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 808b18c:	f002 fa65 	bl	808d65a <delay>
  Log.info("Setup start..");
 808b190:	493a      	ldr	r1, [pc, #232]	; (808b27c <setup+0xfc>)
 808b192:	483b      	ldr	r0, [pc, #236]	; (808b280 <setup+0x100>)
 808b194:	f7fa fbfe 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 808b198:	2200      	movs	r2, #0
 808b19a:	4c3a      	ldr	r4, [pc, #232]	; (808b284 <setup+0x104>)
 808b19c:	4611      	mov	r1, r2
 808b19e:	4620      	mov	r0, r4
 808b1a0:	f7fe fdf2 	bl	8089d88 <_ZN5Timer5_stopEjb>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
 808b1a4:	68a0      	ldr	r0, [r4, #8]
 808b1a6:	b140      	cbz	r0, 808b1ba <setup+0x3a>
 808b1a8:	2300      	movs	r3, #0
 808b1aa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 808b1ae:	4619      	mov	r1, r3
 808b1b0:	e9cd 2300 	strd	r2, r3, [sp]
 808b1b4:	461a      	mov	r2, r3
 808b1b6:	f001 fe69 	bl	808ce8c <os_timer_change>
  ret_error_code ret = sysInit();
 808b1ba:	f7ff fcbf 	bl	808ab3c <_Z7sysInitv>
  switch (ret)
 808b1be:	2801      	cmp	r0, #1
 808b1c0:	d038      	beq.n	808b234 <setup+0xb4>
 808b1c2:	2802      	cmp	r0, #2
 808b1c4:	d034      	beq.n	808b230 <setup+0xb0>
 808b1c6:	2800      	cmp	r0, #0
 808b1c8:	d136      	bne.n	808b238 <setup+0xb8>
    Log.trace("PE failed \n");
 808b1ca:	492f      	ldr	r1, [pc, #188]	; (808b288 <setup+0x108>)
    Log.trace("Thermocouple failed");
 808b1cc:	482c      	ldr	r0, [pc, #176]	; (808b280 <setup+0x100>)
 808b1ce:	f7fc f945 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>
  fetchGenConfigs();
 808b1d2:	f7ff fe03 	bl	808addc <_Z15fetchGenConfigsv>
  fetchUfsConfiguration();
 808b1d6:	f7fe fbe7 	bl	80899a8 <_Z21fetchUfsConfigurationv>
  fetchGXMtrcIntervals();
 808b1da:	f7ff fe77 	bl	808aecc <_Z20fetchGXMtrcIntervalsv>

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 808b1de:	2300      	movs	r3, #0
 808b1e0:	4c2a      	ldr	r4, [pc, #168]	; (808b28c <setup+0x10c>)
 808b1e2:	461a      	mov	r2, r3
 808b1e4:	4619      	mov	r1, r3
 808b1e6:	6860      	ldr	r0, [r4, #4]
 808b1e8:	f002 f956 	bl	808d498 <network_on>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 808b1ec:	2300      	movs	r3, #0
 808b1ee:	6860      	ldr	r0, [r4, #4]
 808b1f0:	461a      	mov	r2, r3
 808b1f2:	4619      	mov	r1, r3
 808b1f4:	f002 f930 	bl	808d458 <network_connect>
  delay(1500);
 808b1f8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 808b1fc:	f002 fa2d 	bl	808d65a <delay>
        spark_cloud_flag_connect();
 808b200:	f002 f8fa 	bl	808d3f8 <spark_cloud_flag_connect>
  Particle.keepAlive(KEEP_ALIVE_PERIOD);
 808b204:	205a      	movs	r0, #90	; 0x5a
 808b206:	f7fe fd69 	bl	8089cdc <_ZN10CloudClass9keepAliveEj>
  if (use_flash){
 808b20a:	4b21      	ldr	r3, [pc, #132]	; (808b290 <setup+0x110>)
 808b20c:	781b      	ldrb	r3, [r3, #0]
 808b20e:	b14b      	cbz	r3, 808b224 <setup+0xa4>
    GXMetrics.initialiazeSPIFFS(METRICS_PRT);
 808b210:	2100      	movs	r1, #0
 808b212:	4820      	ldr	r0, [pc, #128]	; (808b294 <setup+0x114>)
 808b214:	f7fc fc2c 	bl	8087a70 <_ZN8GXSpiffs17initialiazeSPIFFSE21SPIFFS_PARTITION_TYPE>
    checkAndCleanFileSystem(GXMetrics);
 808b218:	4b1f      	ldr	r3, [pc, #124]	; (808b298 <setup+0x118>)
 808b21a:	4920      	ldr	r1, [pc, #128]	; (808b29c <setup+0x11c>)
 808b21c:	681a      	ldr	r2, [r3, #0]
 808b21e:	481d      	ldr	r0, [pc, #116]	; (808b294 <setup+0x114>)
 808b220:	f7fc f9fe 	bl	8087620 <_Z23checkAndCleanFileSystemR8GXSpiffsR6StringPKc>
  Log.info("End of setup!");
 808b224:	491e      	ldr	r1, [pc, #120]	; (808b2a0 <setup+0x120>)
 808b226:	4816      	ldr	r0, [pc, #88]	; (808b280 <setup+0x100>)
 808b228:	f7fa fbb4 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
}
 808b22c:	b006      	add	sp, #24
 808b22e:	bd10      	pop	{r4, pc}
    Log.trace("Thermocouple failed");
 808b230:	491c      	ldr	r1, [pc, #112]	; (808b2a4 <setup+0x124>)
 808b232:	e7cb      	b.n	808b1cc <setup+0x4c>
    Log.trace("Flash failed");
 808b234:	491c      	ldr	r1, [pc, #112]	; (808b2a8 <setup+0x128>)
 808b236:	e7c9      	b.n	808b1cc <setup+0x4c>
    Log.trace("Successfully configured device");
 808b238:	491c      	ldr	r1, [pc, #112]	; (808b2ac <setup+0x12c>)
 808b23a:	4811      	ldr	r0, [pc, #68]	; (808b280 <setup+0x100>)
 808b23c:	f7fc f90e 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>
    setADCSampleTime(ADC_SampleTime_144Cycles);
 808b240:	2006      	movs	r0, #6
 808b242:	f002 f9c1 	bl	808d5c8 <setADCSampleTime>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 808b246:	f002 f8df 	bl	808d408 <spark_cloud_flag_connected>
    if (Particle.connected())
 808b24a:	b178      	cbz	r0, 808b26c <setup+0xec>
 808b24c:	4b18      	ldr	r3, [pc, #96]	; (808b2b0 <setup+0x130>)
 808b24e:	4a19      	ldr	r2, [pc, #100]	; (808b2b4 <setup+0x134>)
 808b250:	781b      	ldrb	r3, [r3, #0]
 808b252:	7812      	ldrb	r2, [r2, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808b254:	a802      	add	r0, sp, #8
 808b256:	4313      	orrs	r3, r2
 808b258:	f88d 3000 	strb.w	r3, [sp]
 808b25c:	4a16      	ldr	r2, [pc, #88]	; (808b2b8 <setup+0x138>)
 808b25e:	233c      	movs	r3, #60	; 0x3c
 808b260:	4916      	ldr	r1, [pc, #88]	; (808b2bc <setup+0x13c>)
 808b262:	f002 fbe1 	bl	808da28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 808b266:	a803      	add	r0, sp, #12
 808b268:	f7fb f99c 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    runCellTest();
 808b26c:	a802      	add	r0, sp, #8
 808b26e:	f7fe fdc9 	bl	8089e04 <_Z11runCellTestv>
 808b272:	a802      	add	r0, sp, #8
 808b274:	f004 fcc6 	bl	808fc04 <_ZN6StringD1Ev>
    break;
 808b278:	e7ab      	b.n	808b1d2 <setup+0x52>
 808b27a:	bf00      	nop
 808b27c:	080948b2 	.word	0x080948b2
 808b280:	200015a4 	.word	0x200015a4
 808b284:	20001414 	.word	0x20001414
 808b288:	080948c0 	.word	0x080948c0
 808b28c:	20001568 	.word	0x20001568
 808b290:	20000538 	.word	0x20000538
 808b294:	20001070 	.word	0x20001070
 808b298:	2000001c 	.word	0x2000001c
 808b29c:	20000dc4 	.word	0x20000dc4
 808b2a0:	08094923 	.word	0x08094923
 808b2a4:	080948cc 	.word	0x080948cc
 808b2a8:	080948e0 	.word	0x080948e0
 808b2ac:	080948ed 	.word	0x080948ed
 808b2b0:	20001158 	.word	0x20001158
 808b2b4:	20001159 	.word	0x20001159
 808b2b8:	0809490c 	.word	0x0809490c
 808b2bc:	08094914 	.word	0x08094914

0808b2c0 <_GLOBAL__sub_I___appProductID>:
}
 808b2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        val_(val) {
 808b2c4:	2601      	movs	r6, #1
 808b2c6:	2708      	movs	r7, #8
 808b2c8:	4b73      	ldr	r3, [pc, #460]	; (808b498 <_GLOBAL__sub_I___appProductID+0x1d8>)
 808b2ca:	b086      	sub	sp, #24
 808b2cc:	701e      	strb	r6, [r3, #0]
 808b2ce:	4b73      	ldr	r3, [pc, #460]	; (808b49c <_GLOBAL__sub_I___appProductID+0x1dc>)
              error_(SYSTEM_ERROR_NONE) {
 808b2d0:	2400      	movs	r4, #0
 808b2d2:	701f      	strb	r7, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
 808b2d4:	f005 fa40 	bl	8090758 <spark_protocol_instance>
 808b2d8:	2300      	movs	r3, #0
 808b2da:	f243 1148 	movw	r1, #12616	; 0x3148
 808b2de:	461a      	mov	r2, r3
 808b2e0:	f005 fa42 	bl	8090768 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
 808b2e4:	f005 fa38 	bl	8090758 <spark_protocol_instance>
 808b2e8:	2300      	movs	r3, #0
 808b2ea:	2111      	movs	r1, #17
 808b2ec:	461a      	mov	r2, r3
 808b2ee:	f005 fa43 	bl	8090778 <spark_protocol_set_product_firmware_version>
 808b2f2:	4d6b      	ldr	r5, [pc, #428]	; (808b4a0 <_GLOBAL__sub_I___appProductID+0x1e0>)
    SleepResult() {}
 808b2f4:	4b6b      	ldr	r3, [pc, #428]	; (808b4a4 <_GLOBAL__sub_I___appProductID+0x1e4>)
        set_system_mode(mode);
 808b2f6:	2003      	movs	r0, #3
    SleepResult() {}
 808b2f8:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
 808b2fa:	602c      	str	r4, [r5, #0]
 808b2fc:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
 808b2fe:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
 808b300:	f002 f804 	bl	808d30c <set_system_mode>
SYSTEM_MODE(MANUAL);    // setting system mode to manual turns of cellular at startup
 808b304:	4a68      	ldr	r2, [pc, #416]	; (808b4a8 <_GLOBAL__sub_I___appProductID+0x1e8>)
 808b306:	4969      	ldr	r1, [pc, #420]	; (808b4ac <_GLOBAL__sub_I___appProductID+0x1ec>)
 808b308:	4628      	mov	r0, r5
 808b30a:	f005 fb67 	bl	80909dc <__aeabi_atexit>
SYSTEM_THREAD(ENABLED); // Enables system threading
 808b30e:	4621      	mov	r1, r4
 808b310:	4630      	mov	r0, r6
 808b312:	f002 f81b 	bl	808d34c <system_thread_set_state>
STARTUP(cellular_credentials_set("eseye.com", "user", "pass", NULL)); // sets connection credentials for the cellular network(Eseye sim)
 808b316:	4623      	mov	r3, r4
 808b318:	4a65      	ldr	r2, [pc, #404]	; (808b4b0 <_GLOBAL__sub_I___appProductID+0x1f0>)
 808b31a:	4966      	ldr	r1, [pc, #408]	; (808b4b4 <_GLOBAL__sub_I___appProductID+0x1f4>)
 808b31c:	4866      	ldr	r0, [pc, #408]	; (808b4b8 <_GLOBAL__sub_I___appProductID+0x1f8>)
 808b31e:	f001 fd75 	bl	808ce0c <cellular_credentials_set>
Adafruit_MAX31865 thermo = Adafruit_MAX31865(thermCPL_pin, D2, D3, D4);
 808b322:	2304      	movs	r3, #4
 808b324:	2202      	movs	r2, #2
 808b326:	211d      	movs	r1, #29
 808b328:	9300      	str	r3, [sp, #0]
 808b32a:	4864      	ldr	r0, [pc, #400]	; (808b4bc <_GLOBAL__sub_I___appProductID+0x1fc>)
 808b32c:	2303      	movs	r3, #3
 808b32e:	f7f9 faeb 	bl	8084908 <_ZN17Adafruit_MAX31865C1Eaaaa>
 808b332:	4a5d      	ldr	r2, [pc, #372]	; (808b4a8 <_GLOBAL__sub_I___appProductID+0x1e8>)
 808b334:	4962      	ldr	r1, [pc, #392]	; (808b4c0 <_GLOBAL__sub_I___appProductID+0x200>)
 808b336:	4861      	ldr	r0, [pc, #388]	; (808b4bc <_GLOBAL__sub_I___appProductID+0x1fc>)
 808b338:	f005 fb50 	bl	80909dc <__aeabi_atexit>
UFS fuelSensor;
 808b33c:	4861      	ldr	r0, [pc, #388]	; (808b4c4 <_GLOBAL__sub_I___appProductID+0x204>)
 808b33e:	f7fe f93e 	bl	80895be <_ZN3UFSC1Ev>
 808b342:	4a59      	ldr	r2, [pc, #356]	; (808b4a8 <_GLOBAL__sub_I___appProductID+0x1e8>)
 808b344:	4960      	ldr	r1, [pc, #384]	; (808b4c8 <_GLOBAL__sub_I___appProductID+0x208>)
 808b346:	485f      	ldr	r0, [pc, #380]	; (808b4c4 <_GLOBAL__sub_I___appProductID+0x204>)
 808b348:	f005 fb48 	bl	80909dc <__aeabi_atexit>
LED powerLed(1), cloudLed(2), commLed(3);
 808b34c:	4631      	mov	r1, r6
 808b34e:	485f      	ldr	r0, [pc, #380]	; (808b4cc <_GLOBAL__sub_I___appProductID+0x20c>)
 808b350:	f7fd fe11 	bl	8088f76 <_ZN3LEDC1Eh>
 808b354:	2102      	movs	r1, #2
 808b356:	485e      	ldr	r0, [pc, #376]	; (808b4d0 <_GLOBAL__sub_I___appProductID+0x210>)
 808b358:	f7fd fe0d 	bl	8088f76 <_ZN3LEDC1Eh>
 808b35c:	2103      	movs	r1, #3
 808b35e:	485d      	ldr	r0, [pc, #372]	; (808b4d4 <_GLOBAL__sub_I___appProductID+0x214>)
 808b360:	f7fd fe09 	bl	8088f76 <_ZN3LEDC1Eh>
FuelGauge fuel;
 808b364:	4621      	mov	r1, r4
 808b366:	485c      	ldr	r0, [pc, #368]	; (808b4d8 <_GLOBAL__sub_I___appProductID+0x218>)
 808b368:	f002 fce0 	bl	808dd2c <_ZN9FuelGaugeC1Eb>
        static SPIClass instance(Interface);
 808b36c:	4c5b      	ldr	r4, [pc, #364]	; (808b4dc <_GLOBAL__sub_I___appProductID+0x21c>)
 808b36e:	4a4e      	ldr	r2, [pc, #312]	; (808b4a8 <_GLOBAL__sub_I___appProductID+0x1e8>)
 808b370:	495b      	ldr	r1, [pc, #364]	; (808b4e0 <_GLOBAL__sub_I___appProductID+0x220>)
 808b372:	4859      	ldr	r0, [pc, #356]	; (808b4d8 <_GLOBAL__sub_I___appProductID+0x218>)
 808b374:	f005 fb32 	bl	80909dc <__aeabi_atexit>
SHYFTStateSync shyftStateMan;
 808b378:	4639      	mov	r1, r7
 808b37a:	485a      	ldr	r0, [pc, #360]	; (808b4e4 <_GLOBAL__sub_I___appProductID+0x224>)
 808b37c:	f7fe f89e 	bl	80894bc <_ZN14SHYFTStateSyncC1Em>
 808b380:	7823      	ldrb	r3, [r4, #0]
 808b382:	f3bf 8f5b 	dmb	ish
 808b386:	07d9      	lsls	r1, r3, #31
 808b388:	d40f      	bmi.n	808b3aa <_GLOBAL__sub_I___appProductID+0xea>
 808b38a:	4620      	mov	r0, r4
 808b38c:	f7f4 fe98 	bl	80800c0 <__cxa_guard_acquire>
 808b390:	b158      	cbz	r0, 808b3aa <_GLOBAL__sub_I___appProductID+0xea>
 808b392:	4631      	mov	r1, r6
 808b394:	4854      	ldr	r0, [pc, #336]	; (808b4e8 <_GLOBAL__sub_I___appProductID+0x228>)
 808b396:	f004 fb0a 	bl	808f9ae <_ZN8SPIClassC1E19hal_spi_interface_t>
 808b39a:	4620      	mov	r0, r4
 808b39c:	f7f4 fe95 	bl	80800ca <__cxa_guard_release>
 808b3a0:	4a41      	ldr	r2, [pc, #260]	; (808b4a8 <_GLOBAL__sub_I___appProductID+0x1e8>)
 808b3a2:	4952      	ldr	r1, [pc, #328]	; (808b4ec <_GLOBAL__sub_I___appProductID+0x22c>)
 808b3a4:	4850      	ldr	r0, [pc, #320]	; (808b4e8 <_GLOBAL__sub_I___appProductID+0x228>)
 808b3a6:	f005 fb19 	bl	80909dc <__aeabi_atexit>
public:
	inline SpiFlashWinbond(SPIClass &spi, int cs) : SpiFlash(spi, cs) {
 808b3aa:	4c51      	ldr	r4, [pc, #324]	; (808b4f0 <_GLOBAL__sub_I___appProductID+0x230>)
 808b3ac:	2206      	movs	r2, #6
 808b3ae:	4620      	mov	r0, r4
 808b3b0:	494d      	ldr	r1, [pc, #308]	; (808b4e8 <_GLOBAL__sub_I___appProductID+0x228>)
 808b3b2:	f001 f84d 	bl	808c450 <_ZN8SpiFlashC1ER8SPIClassi>
 808b3b6:	4b4f      	ldr	r3, [pc, #316]	; (808b4f4 <_GLOBAL__sub_I___appProductID+0x234>)
		sectorEraseTimeoutMs = 500;
		pageProgramTimeoutMs = 10; // 3 ms actually
 808b3b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
	inline SpiFlashWinbond(SPIClass &spi, int cs) : SpiFlash(spi, cs) {
 808b3bc:	6023      	str	r3, [r4, #0]
		pageProgramTimeoutMs = 10; // 3 ms actually
 808b3be:	230a      	movs	r3, #10
 808b3c0:	e9c4 2305 	strd	r2, r3, [r4, #20]
		chipEraseTimeoutMs = 50000;
 808b3c4:	f24c 3350 	movw	r3, #50000	; 0xc350
		manufacturerId = 0xef;
		writeEnableDelayUs = 0;
 808b3c8:	2600      	movs	r6, #0
		chipEraseTimeoutMs = 50000;
 808b3ca:	61e3      	str	r3, [r4, #28]
		manufacturerId = 0xef;
 808b3cc:	23ef      	movs	r3, #239	; 0xef
SpiFlashWinbond spiFlash(SPI1, NOR_CS);
 808b3ce:	4a36      	ldr	r2, [pc, #216]	; (808b4a8 <_GLOBAL__sub_I___appProductID+0x1e8>)
 808b3d0:	7323      	strb	r3, [r4, #12]
		writeEnableDelayUs = 0;
 808b3d2:	6226      	str	r6, [r4, #32]
 808b3d4:	4620      	mov	r0, r4
 808b3d6:	4948      	ldr	r1, [pc, #288]	; (808b4f8 <_GLOBAL__sub_I___appProductID+0x238>)
 808b3d8:	f005 fb00 	bl	80909dc <__aeabi_atexit>
SpiffsParticle GXMetricsFS(spiFlash);
 808b3dc:	4621      	mov	r1, r4
 808b3de:	4847      	ldr	r0, [pc, #284]	; (808b4fc <_GLOBAL__sub_I___appProductID+0x23c>)
 808b3e0:	f001 fa4a 	bl	808c878 <_ZN14SpiffsParticleC1ER12SpiFlashBase>
 808b3e4:	4a30      	ldr	r2, [pc, #192]	; (808b4a8 <_GLOBAL__sub_I___appProductID+0x1e8>)
 808b3e6:	4946      	ldr	r1, [pc, #280]	; (808b500 <_GLOBAL__sub_I___appProductID+0x240>)
 808b3e8:	4844      	ldr	r0, [pc, #272]	; (808b4fc <_GLOBAL__sub_I___appProductID+0x23c>)
 808b3ea:	f005 faf7 	bl	80909dc <__aeabi_atexit>
GXSpiffs GXMetrics(&spiFlash, &GXMetricsFS);
 808b3ee:	4621      	mov	r1, r4
 808b3f0:	4a42      	ldr	r2, [pc, #264]	; (808b4fc <_GLOBAL__sub_I___appProductID+0x23c>)
 808b3f2:	4844      	ldr	r0, [pc, #272]	; (808b504 <_GLOBAL__sub_I___appProductID+0x244>)
 808b3f4:	f7fc fa92 	bl	808791c <_ZN8GXSpiffsC1EP15SpiFlashWinbondP14SpiffsParticle>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 808b3f8:	4b43      	ldr	r3, [pc, #268]	; (808b508 <_GLOBAL__sub_I___appProductID+0x248>)
	    _M_invoker = &_My_handler::_M_invoke;
 808b3fa:	4d44      	ldr	r5, [pc, #272]	; (808b50c <_GLOBAL__sub_I___appProductID+0x24c>)
	    _M_manager = &_My_handler::_M_manager;
 808b3fc:	4c44      	ldr	r4, [pc, #272]	; (808b510 <_GLOBAL__sub_I___appProductID+0x250>)
Timer resetDelay(RESET_DELAY, setPerformSHYFTReset);
 808b3fe:	aa02      	add	r2, sp, #8
 808b400:	f640 31b8 	movw	r1, #3000	; 0xbb8
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 808b404:	9302      	str	r3, [sp, #8]
 808b406:	4843      	ldr	r0, [pc, #268]	; (808b514 <_GLOBAL__sub_I___appProductID+0x254>)
 808b408:	4633      	mov	r3, r6
	    _M_invoker = &_My_handler::_M_invoke;
 808b40a:	9505      	str	r5, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 808b40c:	9404      	str	r4, [sp, #16]
 808b40e:	f7fe fc8b 	bl	8089d28 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
 808b412:	a802      	add	r0, sp, #8
 808b414:	f7fe fc59 	bl	8089cca <_ZNSt14_Function_baseD1Ev>
 808b418:	4a23      	ldr	r2, [pc, #140]	; (808b4a8 <_GLOBAL__sub_I___appProductID+0x1e8>)
 808b41a:	493f      	ldr	r1, [pc, #252]	; (808b518 <_GLOBAL__sub_I___appProductID+0x258>)
 808b41c:	483d      	ldr	r0, [pc, #244]	; (808b514 <_GLOBAL__sub_I___appProductID+0x254>)
 808b41e:	f005 fadd 	bl	80909dc <__aeabi_atexit>
constexpr int8_t CONFIG_INVALID = -22;


//******** DEFINITION OF GX DEVICE CONFIGURATIONS SAVED IN THE EEPROM ********//

struct GXConfiguration 
 808b422:	27ff      	movs	r7, #255	; 0xff
	    _M_manager = &_My_handler::_M_manager;
 808b424:	e9cd 4504 	strd	r4, r5, [sp, #16]
 808b428:	f64f 75ff 	movw	r5, #65535	; 0xffff
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 808b42c:	4b3b      	ldr	r3, [pc, #236]	; (808b51c <_GLOBAL__sub_I___appProductID+0x25c>)
Timer watchdog(WATCHDOG_INTERVAL, checkHwdWatchdog);
 808b42e:	aa02      	add	r2, sp, #8
 808b430:	f640 31b8 	movw	r1, #3000	; 0xbb8
 808b434:	9302      	str	r3, [sp, #8]
 808b436:	483a      	ldr	r0, [pc, #232]	; (808b520 <_GLOBAL__sub_I___appProductID+0x260>)
 808b438:	4633      	mov	r3, r6
 808b43a:	f7fe fc75 	bl	8089d28 <_ZN5TimerC1EjSt8functionIFvvEEb>
 808b43e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 808b528 <_GLOBAL__sub_I___appProductID+0x268>
    class function<_Res(_ArgTypes...)>
 808b442:	a802      	add	r0, sp, #8
 808b444:	f7fe fc41 	bl	8089cca <_ZNSt14_Function_baseD1Ev>
 808b448:	4a17      	ldr	r2, [pc, #92]	; (808b4a8 <_GLOBAL__sub_I___appProductID+0x1e8>)
 808b44a:	4933      	ldr	r1, [pc, #204]	; (808b518 <_GLOBAL__sub_I___appProductID+0x258>)
 808b44c:	4834      	ldr	r0, [pc, #208]	; (808b520 <_GLOBAL__sub_I___appProductID+0x260>)
 808b44e:	4c35      	ldr	r4, [pc, #212]	; (808b524 <_GLOBAL__sub_I___appProductID+0x264>)
 808b450:	f005 fac4 	bl	80909dc <__aeabi_atexit>
 808b454:	f8b8 3000 	ldrh.w	r3, [r8]
 808b458:	4631      	mov	r1, r6
 808b45a:	80a3      	strh	r3, [r4, #4]
 808b45c:	2212      	movs	r2, #18
 808b45e:	7027      	strb	r7, [r4, #0]
 808b460:	8065      	strh	r5, [r4, #2]
 808b462:	1da0      	adds	r0, r4, #6
 808b464:	f006 fd2e 	bl	8091ec4 <memset>
 808b468:	2254      	movs	r2, #84	; 0x54
 808b46a:	f108 0114 	add.w	r1, r8, #20
 808b46e:	f104 0018 	add.w	r0, r4, #24
 808b472:	f006 fcff 	bl	8091e74 <memcpy>
 808b476:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
 808b47a:	f8a4 506e 	strh.w	r5, [r4, #110]	; 0x6e
 808b47e:	f8a4 5070 	strh.w	r5, [r4, #112]	; 0x70
struct UfsConfig
 808b482:	f8a4 5072 	strh.w	r5, [r4, #114]	; 0x72
 808b486:	f8a4 5074 	strh.w	r5, [r4, #116]	; 0x74
 808b48a:	f8a4 5076 	strh.w	r5, [r4, #118]	; 0x76
struct MultiUfsConfigs
 808b48e:	f8a4 6080 	strh.w	r6, [r4, #128]	; 0x80
}
 808b492:	b006      	add	sp, #24
 808b494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808b498:	20001158 	.word	0x20001158
 808b49c:	20001159 	.word	0x20001159
 808b4a0:	2000114c 	.word	0x2000114c
 808b4a4:	ffff0000 	.word	0xffff0000
 808b4a8:	200005b0 	.word	0x200005b0
 808b4ac:	08089cb3 	.word	0x08089cb3
 808b4b0:	08094931 	.word	0x08094931
 808b4b4:	08094936 	.word	0x08094936
 808b4b8:	0809493b 	.word	0x0809493b
 808b4bc:	200013dc 	.word	0x200013dc
 808b4c0:	08089c6d 	.word	0x08089c6d
 808b4c4:	200011a8 	.word	0x200011a8
 808b4c8:	08089639 	.word	0x08089639
 808b4cc:	200012f8 	.word	0x200012f8
 808b4d0:	2000117c 	.word	0x2000117c
 808b4d4:	20001188 	.word	0x20001188
 808b4d8:	200011a0 	.word	0x200011a0
 808b4dc:	20000dac 	.word	0x20000dac
 808b4e0:	0808dd4b 	.word	0x0808dd4b
 808b4e4:	2000133c 	.word	0x2000133c
 808b4e8:	20000db0 	.word	0x20000db0
 808b4ec:	080848f9 	.word	0x080848f9
 808b4f0:	200013a8 	.word	0x200013a8
 808b4f4:	08094964 	.word	0x08094964
 808b4f8:	08089c45 	.word	0x08089c45
 808b4fc:	20001080 	.word	0x20001080
 808b500:	0808c869 	.word	0x0808c869
 808b504:	20001070 	.word	0x20001070
 808b508:	080874d9 	.word	0x080874d9
 808b50c:	08089c1d 	.word	0x08089c1d
 808b510:	08089c21 	.word	0x08089c21
 808b514:	2000131c 	.word	0x2000131c
 808b518:	08089da9 	.word	0x08089da9
 808b51c:	08087569 	.word	0x08087569
 808b520:	20001414 	.word	0x20001414
 808b524:	20001268 	.word	0x20001268
 808b528:	08094988 	.word	0x08094988

0808b52c <_ZN19CellularHelperClass16responseCallbackEiPKciPv>:
	}
	return bars;
}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
 808b52c:	b430      	push	{r4, r5}
 808b52e:	4605      	mov	r5, r0
 808b530:	4618      	mov	r0, r3
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 808b532:	681b      	ldr	r3, [r3, #0]
 808b534:	681c      	ldr	r4, [r3, #0]
 808b536:	4613      	mov	r3, r2
 808b538:	46a4      	mov	ip, r4
 808b53a:	460a      	mov	r2, r1
 808b53c:	4629      	mov	r1, r5
}
 808b53e:	bc30      	pop	{r4, r5}
	return presp->parse(type, buf, len);
 808b540:	4760      	bx	ip
	...

0808b544 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>:
void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 808b544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808b548:	460c      	mov	r4, r1
 808b54a:	b08d      	sub	sp, #52	; 0x34
	String typeStr;
 808b54c:	494d      	ldr	r1, [pc, #308]	; (808b684 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 808b54e:	a804      	add	r0, sp, #16
void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 808b550:	4616      	mov	r6, r2
 808b552:	461d      	mov	r5, r3
	String typeStr;
 808b554:	f004 fba0 	bl	808fc98 <_ZN6StringC1EPKc>
	switch(type) {
 808b558:	f5b4 1f10 	cmp.w	r4, #2359296	; 0x240000
 808b55c:	d064      	beq.n	808b628 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe4>
 808b55e:	dc1f      	bgt.n	808b5a0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x5c>
 808b560:	f5b4 1f04 	cmp.w	r4, #2162688	; 0x210000
 808b564:	d05c      	beq.n	808b620 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xdc>
 808b566:	dc13      	bgt.n	808b590 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x4c>
 808b568:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
 808b56c:	d056      	beq.n	808b61c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd8>
 808b56e:	f5b4 1f90 	cmp.w	r4, #1179648	; 0x120000
 808b572:	d055      	beq.n	808b620 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xdc>
 808b574:	b35c      	cbz	r4, 808b5ce <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8a>
		typeStr = String::format("type=0x%x", type);
 808b576:	4622      	mov	r2, r4
 808b578:	a808      	add	r0, sp, #32
 808b57a:	4943      	ldr	r1, [pc, #268]	; (808b688 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x144>)
 808b57c:	f004 fd4c 	bl	8090018 <_ZN6String6formatEPKcz>
 808b580:	a908      	add	r1, sp, #32
 808b582:	a804      	add	r0, sp, #16
 808b584:	f004 fbdd 	bl	808fd42 <_ZN6StringaSEOS_>
 808b588:	a808      	add	r0, sp, #32
 808b58a:	f004 fb3b 	bl	808fc04 <_ZN6StringD1Ev>
		break;
 808b58e:	e022      	b.n	808b5d6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x92>
	switch(type) {
 808b590:	f5b4 1f08 	cmp.w	r4, #2228224	; 0x220000
 808b594:	d046      	beq.n	808b624 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe0>
 808b596:	f5b4 1f0c 	cmp.w	r4, #2293760	; 0x230000
 808b59a:	d1ec      	bne.n	808b576 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_NOCARRIER";
 808b59c:	493b      	ldr	r1, [pc, #236]	; (808b68c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x148>)
 808b59e:	e017      	b.n	808b5d0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
	switch(type) {
 808b5a0:	f5b4 0f80 	cmp.w	r4, #4194304	; 0x400000
 808b5a4:	d046      	beq.n	808b634 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf0>
 808b5a6:	dc0a      	bgt.n	808b5be <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x7a>
 808b5a8:	f5b4 1f18 	cmp.w	r4, #2490368	; 0x260000
 808b5ac:	d03e      	beq.n	808b62c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe8>
 808b5ae:	f5b4 1f40 	cmp.w	r4, #3145728	; 0x300000
 808b5b2:	d03d      	beq.n	808b630 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xec>
 808b5b4:	f5b4 1f14 	cmp.w	r4, #2424832	; 0x250000
 808b5b8:	d1dd      	bne.n	808b576 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_BUSY";
 808b5ba:	4935      	ldr	r1, [pc, #212]	; (808b690 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x14c>)
 808b5bc:	e008      	b.n	808b5d0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
	switch(type) {
 808b5be:	f5b4 0fa0 	cmp.w	r4, #5242880	; 0x500000
 808b5c2:	d037      	beq.n	808b634 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf0>
 808b5c4:	f5b4 0fc0 	cmp.w	r4, #6291456	; 0x600000
 808b5c8:	d1d5      	bne.n	808b576 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_ABORTED";
 808b5ca:	4932      	ldr	r1, [pc, #200]	; (808b694 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x150>)
 808b5cc:	e000      	b.n	808b5d0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_UNKNOWN";
 808b5ce:	4932      	ldr	r1, [pc, #200]	; (808b698 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x154>)
		typeStr = "TYPE_OK";
 808b5d0:	a804      	add	r0, sp, #16
 808b5d2:	f004 fbbe 	bl	808fd52 <_ZN6StringaSEPKc>
	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
 808b5d6:	462b      	mov	r3, r5
 808b5d8:	9a04      	ldr	r2, [sp, #16]
 808b5da:	4930      	ldr	r1, [pc, #192]	; (808b69c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x158>)
 808b5dc:	4830      	ldr	r0, [pc, #192]	; (808b6a0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 808b5de:	f7fa f9d9 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
	String out;
 808b5e2:	4928      	ldr	r1, [pc, #160]	; (808b684 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 808b5e4:	a808      	add	r0, sp, #32
 808b5e6:	f004 fb57 	bl	808fc98 <_ZN6StringC1EPKc>
	for(int ii = 0; ii < len; ii++) {
 808b5ea:	2400      	movs	r4, #0
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 808b5ec:	4f2d      	ldr	r7, [pc, #180]	; (808b6a4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x160>)
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 808b5ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 808b6c4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x180>
 808b5f2:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 808b6c8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x184>
	for(int ii = 0; ii < len; ii++) {
 808b5f6:	42ac      	cmp	r4, r5
 808b5f8:	da35      	bge.n	808b666 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x122>
		if (buf[ii] == '\n') {
 808b5fa:	5d31      	ldrb	r1, [r6, r4]
 808b5fc:	290a      	cmp	r1, #10
 808b5fe:	d11b      	bne.n	808b638 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf4>
 808b600:	4649      	mov	r1, r9
 808b602:	a808      	add	r0, sp, #32
 808b604:	f004 fc5d 	bl	808fec2 <_ZN6String6concatEPKc>
			Log.info(out);
 808b608:	9908      	ldr	r1, [sp, #32]
 808b60a:	4825      	ldr	r0, [pc, #148]	; (808b6a0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 808b60c:	f7fa f9c2 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
			out = "";
 808b610:	491c      	ldr	r1, [pc, #112]	; (808b684 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 808b612:	a808      	add	r0, sp, #32
 808b614:	f004 fb9d 	bl	808fd52 <_ZN6StringaSEPKc>
	for(int ii = 0; ii < len; ii++) {
 808b618:	3401      	adds	r4, #1
 808b61a:	e7ec      	b.n	808b5f6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xb2>
		typeStr = "TYPE_OK";
 808b61c:	4922      	ldr	r1, [pc, #136]	; (808b6a8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x164>)
 808b61e:	e7d7      	b.n	808b5d0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_ERROR";
 808b620:	4922      	ldr	r1, [pc, #136]	; (808b6ac <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x168>)
 808b622:	e7d5      	b.n	808b5d0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_CONNECT";
 808b624:	4922      	ldr	r1, [pc, #136]	; (808b6b0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x16c>)
 808b626:	e7d3      	b.n	808b5d0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_NODIALTONE";
 808b628:	4922      	ldr	r1, [pc, #136]	; (808b6b4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 808b62a:	e7d1      	b.n	808b5d0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_NOANSWER";
 808b62c:	4922      	ldr	r1, [pc, #136]	; (808b6b8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x174>)
 808b62e:	e7cf      	b.n	808b5d0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_PROMPT";
 808b630:	4922      	ldr	r1, [pc, #136]	; (808b6bc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x178>)
 808b632:	e7cd      	b.n	808b5d0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_PLUS";
 808b634:	4922      	ldr	r1, [pc, #136]	; (808b6c0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x17c>)
 808b636:	e7cb      	b.n	808b5d0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		if (buf[ii] == '\r') {
 808b638:	290d      	cmp	r1, #13
 808b63a:	d104      	bne.n	808b646 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x102>
 808b63c:	4641      	mov	r1, r8
			out.concat(hex);
 808b63e:	a808      	add	r0, sp, #32
 808b640:	f004 fc3f 	bl	808fec2 <_ZN6String6concatEPKc>
 808b644:	e7e8      	b.n	808b618 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd4>
		if (buf[ii] < ' ' || buf[ii] >= 127) {
 808b646:	f1a1 0320 	sub.w	r3, r1, #32
 808b64a:	2b5e      	cmp	r3, #94	; 0x5e
 808b64c:	d907      	bls.n	808b65e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x11a>
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 808b64e:	460b      	mov	r3, r1
 808b650:	463a      	mov	r2, r7
 808b652:	210a      	movs	r1, #10
 808b654:	a801      	add	r0, sp, #4
 808b656:	f001 ff87 	bl	808d568 <snprintf>
			out.concat(hex);
 808b65a:	a901      	add	r1, sp, #4
 808b65c:	e7ef      	b.n	808b63e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xfa>
			out.concat(buf[ii]);
 808b65e:	a808      	add	r0, sp, #32
 808b660:	f004 fc3e 	bl	808fee0 <_ZN6String6concatEc>
 808b664:	e7d8      	b.n	808b618 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd4>
	if (out.length() > 0) {
 808b666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808b668:	b11b      	cbz	r3, 808b672 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x12e>
		Log.info(out);
 808b66a:	9908      	ldr	r1, [sp, #32]
 808b66c:	480c      	ldr	r0, [pc, #48]	; (808b6a0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 808b66e:	f7fa f991 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
	String out;
 808b672:	a808      	add	r0, sp, #32
 808b674:	f004 fac6 	bl	808fc04 <_ZN6StringD1Ev>
	String typeStr;
 808b678:	a804      	add	r0, sp, #16
 808b67a:	f004 fac3 	bl	808fc04 <_ZN6StringD1Ev>
}
 808b67e:	b00d      	add	sp, #52	; 0x34
 808b680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808b684:	08094ad5 	.word	0x08094ad5
 808b688:	08094a77 	.word	0x08094a77
 808b68c:	08094a1d 	.word	0x08094a1d
 808b690:	08094a3c 	.word	0x08094a3c
 808b694:	08094a6a 	.word	0x08094a6a
 808b698:	080949f0 	.word	0x080949f0
 808b69c:	08094a81 	.word	0x08094a81
 808b6a0:	200015a4 	.word	0x200015a4
 808b6a4:	08094aa8 	.word	0x08094aa8
 808b6a8:	080949fd 	.word	0x080949fd
 808b6ac:	08094a05 	.word	0x08094a05
 808b6b0:	08094a10 	.word	0x08094a10
 808b6b4:	08094a2c 	.word	0x08094a2c
 808b6b8:	08094a46 	.word	0x08094a46
 808b6bc:	08094a54 	.word	0x08094a54
 808b6c0:	08094a60 	.word	0x08094a60
 808b6c4:	08094aa5 	.word	0x08094aa5
 808b6c8:	08094aa2 	.word	0x08094aa2

0808b6cc <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb>:
String CellularHelperPlusStringResponse::getDoubleQuotedPart(bool onlyFirst) const {
 808b6cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808b6d0:	460e      	mov	r6, r1
 808b6d2:	4604      	mov	r4, r0
	for(size_t ii = 0; ii < string.length(); ii++) {
 808b6d4:	2500      	movs	r5, #0
	String result;
 808b6d6:	4913      	ldr	r1, [pc, #76]	; (808b724 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x58>)
String CellularHelperPlusStringResponse::getDoubleQuotedPart(bool onlyFirst) const {
 808b6d8:	4690      	mov	r8, r2
	String result;
 808b6da:	f004 fadd 	bl	808fc98 <_ZN6StringC1EPKc>
	result.reserve(string.length());
 808b6de:	4620      	mov	r0, r4
 808b6e0:	6a71      	ldr	r1, [r6, #36]	; 0x24
 808b6e2:	f004 faad 	bl	808fc40 <_ZN6String7reserveEj>
	bool inQuoted = false;
 808b6e6:	462f      	mov	r7, r5
		char ch = string.charAt(ii);
 808b6e8:	f106 091c 	add.w	r9, r6, #28
	for(size_t ii = 0; ii < string.length(); ii++) {
 808b6ec:	6a73      	ldr	r3, [r6, #36]	; 0x24
 808b6ee:	429d      	cmp	r5, r3
 808b6f0:	d215      	bcs.n	808b71e <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x52>
		char ch = string.charAt(ii);
 808b6f2:	4629      	mov	r1, r5
 808b6f4:	4648      	mov	r0, r9
 808b6f6:	f004 fc5d 	bl	808ffb4 <_ZNK6String6charAtEj>
		if (ch == '"') {
 808b6fa:	2822      	cmp	r0, #34	; 0x22
		char ch = string.charAt(ii);
 808b6fc:	4601      	mov	r1, r0
		if (ch == '"') {
 808b6fe:	d106      	bne.n	808b70e <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x42>
			if (!inQuoted && onlyFirst) {
 808b700:	b15f      	cbz	r7, 808b71a <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x4e>
 808b702:	f1b8 0f00 	cmp.w	r8, #0
 808b706:	d10a      	bne.n	808b71e <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x52>
			inQuoted = !inQuoted;
 808b708:	4647      	mov	r7, r8
	for(size_t ii = 0; ii < string.length(); ii++) {
 808b70a:	3501      	adds	r5, #1
 808b70c:	e7ee      	b.n	808b6ec <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x20>
			if (inQuoted) {
 808b70e:	2f00      	cmp	r7, #0
 808b710:	d0fb      	beq.n	808b70a <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x3e>
				result.concat(ch);
 808b712:	4620      	mov	r0, r4
 808b714:	f004 fbe4 	bl	808fee0 <_ZN6String6concatEc>
 808b718:	e7f7      	b.n	808b70a <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x3e>
			inQuoted = !inQuoted;
 808b71a:	2701      	movs	r7, #1
 808b71c:	e7f5      	b.n	808b70a <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x3e>
}
 808b71e:	4620      	mov	r0, r4
 808b720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808b724:	08094ad5 	.word	0x08094ad5

0808b728 <_ZN30CellularHelperRSSIQualResponse11postProcessEv>:
void CellularHelperRSSIQualResponse::postProcess() {
 808b728:	b510      	push	{r4, lr}
	if (sscanf(string.c_str(), "%d,%d", &rssi, &qual) == 2) {
 808b72a:	f100 0340 	add.w	r3, r0, #64	; 0x40
 808b72e:	f100 023c 	add.w	r2, r0, #60	; 0x3c
void CellularHelperRSSIQualResponse::postProcess() {
 808b732:	4604      	mov	r4, r0
	if (sscanf(string.c_str(), "%d,%d", &rssi, &qual) == 2) {
 808b734:	4909      	ldr	r1, [pc, #36]	; (808b75c <_ZN30CellularHelperRSSIQualResponse11postProcessEv+0x34>)
 808b736:	69c0      	ldr	r0, [r0, #28]
 808b738:	f001 ff0e 	bl	808d558 <sscanf>
 808b73c:	2802      	cmp	r0, #2
 808b73e:	d10a      	bne.n	808b756 <_ZN30CellularHelperRSSIQualResponse11postProcessEv+0x2e>
		if (rssi < 99) {
 808b740:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808b742:	2b62      	cmp	r3, #98	; 0x62
			rssi = 0;
 808b744:	bfce      	itee	gt
 808b746:	2300      	movgt	r3, #0
			rssi = -113 + (rssi * 2);
 808b748:	005b      	lslle	r3, r3, #1
 808b74a:	3b71      	suble	r3, #113	; 0x71
 808b74c:	63e3      	str	r3, [r4, #60]	; 0x3c
		resp = RESP_OK;
 808b74e:	f06f 0301 	mvn.w	r3, #1
		resp = RESP_ERROR;
 808b752:	6063      	str	r3, [r4, #4]
}
 808b754:	bd10      	pop	{r4, pc}
		resp = RESP_ERROR;
 808b756:	f06f 0302 	mvn.w	r3, #2
 808b75a:	e7fa      	b.n	808b752 <_ZN30CellularHelperRSSIQualResponse11postProcessEv+0x2a>
 808b75c:	08094aaf 	.word	0x08094aaf

0808b760 <_ZN32CellularHelperPlusStringResponseC1Ev>:
 808b760:	b538      	push	{r3, r4, r5, lr}
class CellularHelperCommonResponse {
 808b762:	f06f 0302 	mvn.w	r3, #2
 808b766:	6043      	str	r3, [r0, #4]
 808b768:	2300      	movs	r3, #0
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 808b76a:	4604      	mov	r4, r0
 808b76c:	4d09      	ldr	r5, [pc, #36]	; (808b794 <_ZN32CellularHelperPlusStringResponseC1Ev+0x34>)
class CellularHelperCommonResponse {
 808b76e:	7203      	strb	r3, [r0, #8]
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 808b770:	4b09      	ldr	r3, [pc, #36]	; (808b798 <_ZN32CellularHelperPlusStringResponseC1Ev+0x38>)
 808b772:	4629      	mov	r1, r5
 808b774:	f840 3b0c 	str.w	r3, [r0], #12
 808b778:	f004 fa8e 	bl	808fc98 <_ZN6StringC1EPKc>
 808b77c:	4629      	mov	r1, r5
 808b77e:	f104 001c 	add.w	r0, r4, #28
 808b782:	f004 fa89 	bl	808fc98 <_ZN6StringC1EPKc>
 808b786:	4629      	mov	r1, r5
 808b788:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 808b78c:	f004 fa84 	bl	808fc98 <_ZN6StringC1EPKc>
 808b790:	4620      	mov	r0, r4
 808b792:	bd38      	pop	{r3, r4, r5, pc}
 808b794:	08094ad5 	.word	0x08094ad5
 808b798:	08094b08 	.word	0x08094b08

0808b79c <_ZN32CellularHelperPlusStringResponseD1Ev>:
 808b79c:	b510      	push	{r4, lr}
 808b79e:	4604      	mov	r4, r0
 808b7a0:	4b07      	ldr	r3, [pc, #28]	; (808b7c0 <_ZN32CellularHelperPlusStringResponseD1Ev+0x24>)
 808b7a2:	f840 3b2c 	str.w	r3, [r0], #44
 808b7a6:	f004 fa2d 	bl	808fc04 <_ZN6StringD1Ev>
 808b7aa:	f104 001c 	add.w	r0, r4, #28
 808b7ae:	f004 fa29 	bl	808fc04 <_ZN6StringD1Ev>
 808b7b2:	f104 000c 	add.w	r0, r4, #12
 808b7b6:	f004 fa25 	bl	808fc04 <_ZN6StringD1Ev>
 808b7ba:	4620      	mov	r0, r4
 808b7bc:	bd10      	pop	{r4, pc}
 808b7be:	bf00      	nop
 808b7c0:	08094b08 	.word	0x08094b08

0808b7c4 <_ZNK19CellularHelperClass15getOperatorNameEi>:
String CellularHelperClass::getOperatorName(int operatorNameType) const {
 808b7c4:	b530      	push	{r4, r5, lr}
 808b7c6:	4615      	mov	r5, r2
 808b7c8:	b097      	sub	sp, #92	; 0x5c
	String result;
 808b7ca:	4913      	ldr	r1, [pc, #76]	; (808b818 <_ZNK19CellularHelperClass15getOperatorNameEi+0x54>)
String CellularHelperClass::getOperatorName(int operatorNameType) const {
 808b7cc:	4604      	mov	r4, r0
	String result;
 808b7ce:	f004 fa63 	bl	808fc98 <_ZN6StringC1EPKc>
	CellularHelperPlusStringResponse resp;
 808b7d2:	a807      	add	r0, sp, #28
 808b7d4:	f7ff ffc4 	bl	808b760 <_ZN32CellularHelperPlusStringResponseC1Ev>
	resp.command = "UDOPN";
 808b7d8:	4910      	ldr	r1, [pc, #64]	; (808b81c <_ZNK19CellularHelperClass15getOperatorNameEi+0x58>)
 808b7da:	a80a      	add	r0, sp, #40	; 0x28
 808b7dc:	f004 fab9 	bl	808fd52 <_ZN6StringaSEPKc>

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 808b7e0:	f242 7210 	movw	r2, #10000	; 0x2710
 808b7e4:	4b0e      	ldr	r3, [pc, #56]	; (808b820 <_ZNK19CellularHelperClass15getOperatorNameEi+0x5c>)
 808b7e6:	480f      	ldr	r0, [pc, #60]	; (808b824 <_ZNK19CellularHelperClass15getOperatorNameEi+0x60>)
 808b7e8:	9500      	str	r5, [sp, #0]
 808b7ea:	a907      	add	r1, sp, #28
 808b7ec:	f001 fb1e 	bl	808ce2c <cellular_command>
	if (respCode == RESP_OK) {
 808b7f0:	3002      	adds	r0, #2
 808b7f2:	d10b      	bne.n	808b80c <_ZNK19CellularHelperClass15getOperatorNameEi+0x48>
		result = resp.getDoubleQuotedPart();
 808b7f4:	2201      	movs	r2, #1
 808b7f6:	a907      	add	r1, sp, #28
 808b7f8:	a803      	add	r0, sp, #12
 808b7fa:	f7ff ff67 	bl	808b6cc <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb>
 808b7fe:	4620      	mov	r0, r4
 808b800:	a903      	add	r1, sp, #12
 808b802:	f004 fa9e 	bl	808fd42 <_ZN6StringaSEOS_>
 808b806:	a803      	add	r0, sp, #12
 808b808:	f004 f9fc 	bl	808fc04 <_ZN6StringD1Ev>
	CellularHelperPlusStringResponse resp;
 808b80c:	a807      	add	r0, sp, #28
 808b80e:	f7ff ffc5 	bl	808b79c <_ZN32CellularHelperPlusStringResponseD1Ev>
}
 808b812:	4620      	mov	r0, r4
 808b814:	b017      	add	sp, #92	; 0x5c
 808b816:	bd30      	pop	{r4, r5, pc}
 808b818:	08094ad5 	.word	0x08094ad5
 808b81c:	08094ab5 	.word	0x08094ab5
 808b820:	08094abb 	.word	0x08094abb
 808b824:	0808b52d 	.word	0x0808b52d

0808b828 <_ZNK19CellularHelperClass11getRSSIQualEv>:
CellularHelperRSSIQualResponse CellularHelperClass::getRSSIQual() const {
 808b828:	b510      	push	{r4, lr}
 808b82a:	4604      	mov	r4, r0
 * Note that for 2G, qual is not available and 99 is always returned.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperRSSIQualResponse : public CellularHelperPlusStringResponse {
 808b82c:	f7ff ff98 	bl	808b760 <_ZN32CellularHelperPlusStringResponseC1Ev>
 808b830:	4b0c      	ldr	r3, [pc, #48]	; (808b864 <_ZNK19CellularHelperClass11getRSSIQualEv+0x3c>)
	resp.command = "CSQ";
 808b832:	490d      	ldr	r1, [pc, #52]	; (808b868 <_ZNK19CellularHelperClass11getRSSIQualEv+0x40>)
 808b834:	6023      	str	r3, [r4, #0]
 808b836:	2300      	movs	r3, #0
 808b838:	f104 000c 	add.w	r0, r4, #12
 808b83c:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 808b840:	f004 fa87 	bl	808fd52 <_ZN6StringaSEPKc>
 808b844:	f242 7210 	movw	r2, #10000	; 0x2710
 808b848:	4621      	mov	r1, r4
 808b84a:	4b08      	ldr	r3, [pc, #32]	; (808b86c <_ZNK19CellularHelperClass11getRSSIQualEv+0x44>)
 808b84c:	4808      	ldr	r0, [pc, #32]	; (808b870 <_ZNK19CellularHelperClass11getRSSIQualEv+0x48>)
 808b84e:	f001 faed 	bl	808ce2c <cellular_command>
	resp.resp = Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CSQ\r\n");
 808b852:	6060      	str	r0, [r4, #4]
	if (resp.resp == RESP_OK) {
 808b854:	3002      	adds	r0, #2
 808b856:	d102      	bne.n	808b85e <_ZNK19CellularHelperClass11getRSSIQualEv+0x36>
		resp.postProcess();
 808b858:	4620      	mov	r0, r4
 808b85a:	f7ff ff65 	bl	808b728 <_ZN30CellularHelperRSSIQualResponse11postProcessEv>
}
 808b85e:	4620      	mov	r0, r4
 808b860:	bd10      	pop	{r4, pc}
 808b862:	bf00      	nop
 808b864:	08094afc 	.word	0x08094afc
 808b868:	08094ac9 	.word	0x08094ac9
 808b86c:	08094acd 	.word	0x08094acd
 808b870:	0808b52d 	.word	0x0808b52d

0808b874 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>:
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 808b874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808b878:	460c      	mov	r4, r1
 808b87a:	461e      	mov	r6, r3
	str.reserve(str.length() + (size_t)len + 1);
 808b87c:	1c59      	adds	r1, r3, #1
 808b87e:	68a3      	ldr	r3, [r4, #8]
 808b880:	4620      	mov	r0, r4
 808b882:	4419      	add	r1, r3
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 808b884:	4617      	mov	r7, r2
 808b886:	f89d 8018 	ldrb.w	r8, [sp, #24]
	for(int ii = 0; ii < len; ii++) {
 808b88a:	2500      	movs	r5, #0
	str.reserve(str.length() + (size_t)len + 1);
 808b88c:	f004 f9d8 	bl	808fc40 <_ZN6String7reserveEj>
	for(int ii = 0; ii < len; ii++) {
 808b890:	42b5      	cmp	r5, r6
 808b892:	da0c      	bge.n	808b8ae <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
		if (!noEOL || (buf[ii] != '\r' && buf[ii] != '\n')) {
 808b894:	5d79      	ldrb	r1, [r7, r5]
 808b896:	f1b8 0f00 	cmp.w	r8, #0
 808b89a:	d003      	beq.n	808b8a4 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x30>
 808b89c:	290d      	cmp	r1, #13
 808b89e:	d004      	beq.n	808b8aa <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x36>
 808b8a0:	290a      	cmp	r1, #10
 808b8a2:	d002      	beq.n	808b8aa <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x36>
			str.concat(buf[ii]);
 808b8a4:	4620      	mov	r0, r4
 808b8a6:	f004 fb1b 	bl	808fee0 <_ZN6String6concatEc>
	for(int ii = 0; ii < len; ii++) {
 808b8aa:	3501      	adds	r5, #1
 808b8ac:	e7f0      	b.n	808b890 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x1c>
}
 808b8ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0808b8b4 <_ZN32CellularHelperPlusStringResponse5parseEiPKci>:
int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 808b8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (enableDebug) {
 808b8b6:	f890 c008 	ldrb.w	ip, [r0, #8]
int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 808b8ba:	4604      	mov	r4, r0
 808b8bc:	460e      	mov	r6, r1
 808b8be:	4617      	mov	r7, r2
 808b8c0:	461d      	mov	r5, r3
 808b8c2:	b08b      	sub	sp, #44	; 0x2c
	if (enableDebug) {
 808b8c4:	f1bc 0f00 	cmp.w	ip, #0
 808b8c8:	d001      	beq.n	808b8ce <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x1a>
		logCellularDebug(type, buf, len);
 808b8ca:	f7ff fe3b 	bl	808b544 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	if (type == TYPE_PLUS) {
 808b8ce:	f5b6 0f80 	cmp.w	r6, #4194304	; 0x400000
 808b8d2:	d13d      	bne.n	808b950 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x9c>
		char *copy = (char *) malloc(len + 1);
 808b8d4:	1c68      	adds	r0, r5, #1
 808b8d6:	f001 fe1f 	bl	808d518 <malloc>
		if (copy) {
 808b8da:	4606      	mov	r6, r0
 808b8dc:	2800      	cmp	r0, #0
 808b8de:	d037      	beq.n	808b950 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x9c>
			strncpy(copy, buf, len);
 808b8e0:	462a      	mov	r2, r5
 808b8e2:	4639      	mov	r1, r7
 808b8e4:	f006 fb79 	bl	8091fda <strncpy>
			copy[len] = 0;
 808b8e8:	2300      	movs	r3, #0
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 808b8ea:	2120      	movs	r1, #32
			copy[len] = 0;
 808b8ec:	5573      	strb	r3, [r6, r5]
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 808b8ee:	4a1a      	ldr	r2, [pc, #104]	; (808b958 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0xa4>)
 808b8f0:	68e3      	ldr	r3, [r4, #12]
 808b8f2:	a802      	add	r0, sp, #8
 808b8f4:	f001 fe38 	bl	808d568 <snprintf>
			char *start = strstr(copy, searchFor);
 808b8f8:	4630      	mov	r0, r6
 808b8fa:	a902      	add	r1, sp, #8
 808b8fc:	f006 fb94 	bl	8092028 <strstr>
			if (start) {
 808b900:	4605      	mov	r5, r0
 808b902:	b310      	cbz	r0, 808b94a <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x96>
				start += strlen(searchFor);
 808b904:	a802      	add	r0, sp, #8
 808b906:	f006 fb4e 	bl	8091fa6 <strlen>
				if (delim.length() > 0 && string.length() > 0) {
 808b90a:	6b63      	ldr	r3, [r4, #52]	; 0x34
				start += strlen(searchFor);
 808b90c:	4405      	add	r5, r0
	inline unsigned int length(void) const {return len;}
 808b90e:	f104 071c 	add.w	r7, r4, #28
				if (delim.length() > 0 && string.length() > 0) {
 808b912:	b173      	cbz	r3, 808b932 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x7e>
 808b914:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808b916:	b163      	cbz	r3, 808b932 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x7e>
					Log.info("adding delimiter '%s'", delim.c_str());
 808b918:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808b91a:	4910      	ldr	r1, [pc, #64]	; (808b95c <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0xa8>)
 808b91c:	4810      	ldr	r0, [pc, #64]	; (808b960 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0xac>)
 808b91e:	f7fa f839 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
					CellularHelper.appendBufferToString(string, delim, delim.length());
 808b922:	2301      	movs	r3, #1
 808b924:	4639      	mov	r1, r7
 808b926:	9300      	str	r3, [sp, #0]
 808b928:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808b92a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 808b92c:	480d      	ldr	r0, [pc, #52]	; (808b964 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0xb0>)
 808b92e:	f7ff ffa1 	bl	808b874 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
				char *end = strchr(start, '\r');
 808b932:	210d      	movs	r1, #13
 808b934:	4628      	mov	r0, r5
 808b936:	f006 faf1 	bl	8091f1c <strchr>
				CellularHelper.appendBufferToString(string, start, end - start);
 808b93a:	2301      	movs	r3, #1
 808b93c:	462a      	mov	r2, r5
 808b93e:	9300      	str	r3, [sp, #0]
 808b940:	4639      	mov	r1, r7
 808b942:	1b43      	subs	r3, r0, r5
 808b944:	4807      	ldr	r0, [pc, #28]	; (808b964 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0xb0>)
 808b946:	f7ff ff95 	bl	808b874 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
			free(copy);
 808b94a:	4630      	mov	r0, r6
 808b94c:	f001 fdec 	bl	808d528 <free>
}
 808b950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 808b954:	b00b      	add	sp, #44	; 0x2c
 808b956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808b958:	08094ad6 	.word	0x08094ad6
 808b95c:	08094add 	.word	0x08094add
 808b960:	200015a4 	.word	0x200015a4
 808b964:	20001430 	.word	0x20001430

0808b968 <_ZN19CellularHelperClass10rssiToBarsEi>:
	if (rssi < 0) {
 808b968:	2800      	cmp	r0, #0
 808b96a:	da11      	bge.n	808b990 <_ZN19CellularHelperClass10rssiToBarsEi+0x28>
		if (rssi >= -57)      bars = 5;
 808b96c:	f110 0f39 	cmn.w	r0, #57	; 0x39
 808b970:	da10      	bge.n	808b994 <_ZN19CellularHelperClass10rssiToBarsEi+0x2c>
		else if (rssi > -68)  bars = 4;
 808b972:	f110 0f43 	cmn.w	r0, #67	; 0x43
 808b976:	da0f      	bge.n	808b998 <_ZN19CellularHelperClass10rssiToBarsEi+0x30>
		else if (rssi > -80)  bars = 3;
 808b978:	f110 0f4f 	cmn.w	r0, #79	; 0x4f
 808b97c:	da0e      	bge.n	808b99c <_ZN19CellularHelperClass10rssiToBarsEi+0x34>
		else if (rssi > -92)  bars = 2;
 808b97e:	f110 0f5b 	cmn.w	r0, #91	; 0x5b
 808b982:	da0d      	bge.n	808b9a0 <_ZN19CellularHelperClass10rssiToBarsEi+0x38>
		else if (rssi > -104) bars = 1;
 808b984:	f110 0f67 	cmn.w	r0, #103	; 0x67
 808b988:	bfb4      	ite	lt
 808b98a:	2000      	movlt	r0, #0
 808b98c:	2001      	movge	r0, #1
 808b98e:	4770      	bx	lr
	int bars = 0;
 808b990:	2000      	movs	r0, #0
 808b992:	4770      	bx	lr
		if (rssi >= -57)      bars = 5;
 808b994:	2005      	movs	r0, #5
 808b996:	4770      	bx	lr
		else if (rssi > -68)  bars = 4;
 808b998:	2004      	movs	r0, #4
 808b99a:	4770      	bx	lr
		else if (rssi > -80)  bars = 3;
 808b99c:	2003      	movs	r0, #3
 808b99e:	4770      	bx	lr
		else if (rssi > -92)  bars = 2;
 808b9a0:	2002      	movs	r0, #2
}
 808b9a2:	4770      	bx	lr

0808b9a4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 808b9a4:	4770      	bx	lr
	...

0808b9a8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>:
    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 808b9a8:	b513      	push	{r0, r1, r4, lr}
 808b9aa:	4604      	mov	r4, r0
    return Flags<TagT, ValueT>(val_ | flags.val_);
 808b9ac:	431a      	orrs	r2, r3
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808b9ae:	f88d 2000 	strb.w	r2, [sp]
 808b9b2:	233c      	movs	r3, #60	; 0x3c
 808b9b4:	460a      	mov	r2, r1
 808b9b6:	4903      	ldr	r1, [pc, #12]	; (808b9c4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0+0x1c>)
 808b9b8:	f002 f836 	bl	808da28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }
 808b9bc:	4620      	mov	r0, r4
 808b9be:	b002      	add	sp, #8
 808b9c0:	bd10      	pop	{r4, pc}
 808b9c2:	bf00      	nop
 808b9c4:	080938d4 	.word	0x080938d4

0808b9c8 <_ZN11USARTSerialD0Ev>:
 808b9c8:	b510      	push	{r4, lr}
 808b9ca:	4604      	mov	r4, r0
 808b9cc:	2114      	movs	r1, #20
 808b9ce:	f005 f80a 	bl	80909e6 <_ZdlPvj>
 808b9d2:	4620      	mov	r0, r4
 808b9d4:	bd10      	pop	{r4, pc}
	...

0808b9d8 <_Z22__fetch_global_Serial2v>:
// instantiate Serial2
static hal_usart_ring_buffer_t serial2_rx_buffer;
static hal_usart_ring_buffer_t serial2_tx_buffer;

USARTSerial& __fetch_global_Serial2()
{
 808b9d8:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, &serial2_rx_buffer, &serial2_tx_buffer);
 808b9da:	4c0d      	ldr	r4, [pc, #52]	; (808ba10 <_Z22__fetch_global_Serial2v+0x38>)
 808b9dc:	7823      	ldrb	r3, [r4, #0]
 808b9de:	f3bf 8f5b 	dmb	ish
 808b9e2:	07db      	lsls	r3, r3, #31
 808b9e4:	d411      	bmi.n	808ba0a <_Z22__fetch_global_Serial2v+0x32>
 808b9e6:	4620      	mov	r0, r4
 808b9e8:	f7f4 fb6a 	bl	80800c0 <__cxa_guard_acquire>
 808b9ec:	b168      	cbz	r0, 808ba0a <_Z22__fetch_global_Serial2v+0x32>
 808b9ee:	2101      	movs	r1, #1
 808b9f0:	4a08      	ldr	r2, [pc, #32]	; (808ba14 <_Z22__fetch_global_Serial2v+0x3c>)
 808b9f2:	4b09      	ldr	r3, [pc, #36]	; (808ba18 <_Z22__fetch_global_Serial2v+0x40>)
 808b9f4:	4809      	ldr	r0, [pc, #36]	; (808ba1c <_Z22__fetch_global_Serial2v+0x44>)
 808b9f6:	f004 fc45 	bl	8090284 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 808b9fa:	4620      	mov	r0, r4
 808b9fc:	f7f4 fb65 	bl	80800ca <__cxa_guard_release>
 808ba00:	4a07      	ldr	r2, [pc, #28]	; (808ba20 <_Z22__fetch_global_Serial2v+0x48>)
 808ba02:	4908      	ldr	r1, [pc, #32]	; (808ba24 <_Z22__fetch_global_Serial2v+0x4c>)
 808ba04:	4805      	ldr	r0, [pc, #20]	; (808ba1c <_Z22__fetch_global_Serial2v+0x44>)
 808ba06:	f004 ffe9 	bl	80909dc <__aeabi_atexit>
	return serial2;
}
 808ba0a:	4804      	ldr	r0, [pc, #16]	; (808ba1c <_Z22__fetch_global_Serial2v+0x44>)
 808ba0c:	bd10      	pop	{r4, pc}
 808ba0e:	bf00      	nop
 808ba10:	20001434 	.word	0x20001434
 808ba14:	20001438 	.word	0x20001438
 808ba18:	200014bc 	.word	0x200014bc
 808ba1c:	20001544 	.word	0x20001544
 808ba20:	200005b0 	.word	0x200005b0
 808ba24:	0808b9a5 	.word	0x0808b9a5

0808ba28 <_Z15serialEventRun2v>:


void serialEventRun2()
{
 808ba28:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 808ba2a:	f7ff ffd5 	bl	808b9d8 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 808ba2e:	4b07      	ldr	r3, [pc, #28]	; (808ba4c <_Z15serialEventRun2v+0x24>)
 808ba30:	4604      	mov	r4, r0
 808ba32:	b153      	cbz	r3, 808ba4a <_Z15serialEventRun2v+0x22>
 808ba34:	f004 fc46 	bl	80902c4 <_ZN11USARTSerial9isEnabledEv>
 808ba38:	b138      	cbz	r0, 808ba4a <_Z15serialEventRun2v+0x22>
 808ba3a:	6823      	ldr	r3, [r4, #0]
 808ba3c:	4620      	mov	r0, r4
 808ba3e:	691b      	ldr	r3, [r3, #16]
 808ba40:	4798      	blx	r3
 808ba42:	2800      	cmp	r0, #0
 808ba44:	dd01      	ble.n	808ba4a <_Z15serialEventRun2v+0x22>
        handler();
 808ba46:	f3af 8000 	nop.w
}
 808ba4a:	bd10      	pop	{r4, pc}
 808ba4c:	00000000 	.word	0x00000000

0808ba50 <_ZN6ModbusC1Ehhhh>:
 * @param u8rxenpin pin for rxen RS-485 (=0 means USB/RS232C mode)
 * @ingroup setup
 * @overload Modbus::Modbus(uint8_t u8id, uint8_t u8serno, uint8_t u8txenpin, uint8_t u8rxenpin)
 * @overload Modbus::Modbus()
 */
Modbus::Modbus(uint8_t u8id, uint8_t u8serno, uint8_t u8txenpin, uint8_t u8rxenpin) {
 808ba50:	b530      	push	{r4, r5, lr}
 808ba52:	2500      	movs	r5, #0
/* _____PRIVATE FUNCTIONS_____________________________________________________ */

void Modbus::init(uint8_t u8id, uint8_t u8serno, uint8_t u8txenpin, uint8_t u8rxenpin) {
  this->u8id = u8id;
  this->u8serno = (u8serno > 3) ? 0 : u8serno;
  this->u8txenpin = u8txenpin;
 808ba54:	7183      	strb	r3, [r0, #6]
  this->u8rxenpin = u8rxenpin;
 808ba56:	f89d 300c 	ldrb.w	r3, [sp, #12]
  this->u8serno = (u8serno > 3) ? 0 : u8serno;
 808ba5a:	2a03      	cmp	r2, #3
 808ba5c:	bf88      	it	hi
 808ba5e:	462a      	movhi	r2, r5
  this->u8rxenpin = u8rxenpin;
 808ba60:	71c3      	strb	r3, [r0, #7]
  this->u16timeOut = 1000;
 808ba62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
Modbus::Modbus(uint8_t u8id, uint8_t u8serno, uint8_t u8txenpin, uint8_t u8rxenpin) {
 808ba66:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
 808ba6a:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
  this->u8id = u8id;
 808ba6e:	7101      	strb	r1, [r0, #4]
  this->u8serno = (u8serno > 3) ? 0 : u8serno;
 808ba70:	7142      	strb	r2, [r0, #5]
  this->u16timeOut = 1000;
 808ba72:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
}
 808ba76:	bd30      	pop	{r4, r5, pc}

0808ba78 <_ZN6Modbus10setTimeOutEt>:
  this->u16timeOut = u16timeOut;
 808ba78:	f8a0 1056 	strh.w	r1, [r0, #86]	; 0x56
}
 808ba7c:	4770      	bx	lr

0808ba7e <_ZN6Modbus8getStateEv>:
}
 808ba7e:	7a00      	ldrb	r0, [r0, #8]
 808ba80:	4770      	bx	lr

0808ba82 <_ZN6Modbus7calcCRCEh>:
 * This method calculates CRC
 *
 * @return uint16_t calculated CRC value for the message
 * @ingroup buffer
 */
uint16_t Modbus::calcCRC(uint8_t u8length) {
 808ba82:	b570      	push	{r4, r5, r6, lr}
  unsigned int temp, temp2, flag;
  temp = 0xFFFF;
 808ba84:	f64f 73ff 	movw	r3, #65535	; 0xffff
uint16_t Modbus::calcCRC(uint8_t u8length) {
 808ba88:	2400      	movs	r4, #0
    temp = temp ^ au8Buffer[i];
    for (unsigned char j = 1; j <= 8; j++) {
      flag = temp & 0x0001;
      temp >>=1;
      if (flag)
        temp ^= 0xA001;
 808ba8a:	f24a 0501 	movw	r5, #40961	; 0xa001
 808ba8e:	300a      	adds	r0, #10
  for (unsigned char i = 0; i < u8length; i++) {
 808ba90:	b2e2      	uxtb	r2, r4
 808ba92:	4291      	cmp	r1, r2
 808ba94:	d90e      	bls.n	808bab4 <_ZN6Modbus7calcCRCEh+0x32>
    temp = temp ^ au8Buffer[i];
 808ba96:	f810 2b01 	ldrb.w	r2, [r0], #1
 808ba9a:	4053      	eors	r3, r2
 808ba9c:	2208      	movs	r2, #8
      flag = temp & 0x0001;
 808ba9e:	f003 0601 	and.w	r6, r3, #1
      temp >>=1;
 808baa2:	085b      	lsrs	r3, r3, #1
      if (flag)
 808baa4:	b106      	cbz	r6, 808baa8 <_ZN6Modbus7calcCRCEh+0x26>
        temp ^= 0xA001;
 808baa6:	406b      	eors	r3, r5
    for (unsigned char j = 1; j <= 8; j++) {
 808baa8:	3a01      	subs	r2, #1
 808baaa:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 808baae:	d1f6      	bne.n	808ba9e <_ZN6Modbus7calcCRCEh+0x1c>
  for (unsigned char i = 0; i < u8length; i++) {
 808bab0:	3401      	adds	r4, #1
 808bab2:	e7ed      	b.n	808ba90 <_ZN6Modbus7calcCRCEh+0xe>
    }
  }
  // Reverse byte order.
  temp2 = temp >> 8;
  temp = (temp << 8) | temp2;
 808bab4:	0218      	lsls	r0, r3, #8
 808bab6:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
  temp &= 0xFFFF;
  // the returned value is already swapped
  // crcLo byte is first & crcHi byte is last
  return temp;
}
 808baba:	b280      	uxth	r0, r0
 808babc:	bd70      	pop	{r4, r5, r6, pc}

0808babe <_ZN6Modbus7get_FC1Ev>:
 * 
 * @ingroup register
 * Edit: Emmanuel E. Ajari(10/17/2022)
 */
void Modbus::get_FC1() 
{
 808babe:	b5f0      	push	{r4, r5, r6, r7, lr}
 808bac0:	2400      	movs	r4, #0
  const uint8_t BYTE_MASK = 1;
  buff_indx = 3;
  array_indx = 0;
   
   // Cycle through the received bytes
   for (i=0; i < au8Buffer[2]; i++) 
 808bac2:	7b02      	ldrb	r2, [r0, #12]
 808bac4:	b2e3      	uxtb	r3, r4
 808bac6:	1cd9      	adds	r1, r3, #3
 808bac8:	00df      	lsls	r7, r3, #3
 808baca:	429a      	cmp	r2, r3
 808bacc:	b2c9      	uxtb	r1, r1
 808bace:	b2ff      	uxtb	r7, r7
 808bad0:	d90f      	bls.n	808baf2 <_ZN6Modbus7get_FC1Ev+0x34>
 808bad2:	2300      	movs	r3, #0
   {
     // Extract the state of each bit of a byte into the ouput array
     for (byte_itr = 0; byte_itr < 8; byte_itr++)
     {
       au16regs[array_indx++] = (au8Buffer[buff_indx] >> (BYTE_MASK * byte_itr)) & BYTE_MASK;
 808bad4:	4401      	add	r1, r0
 808bad6:	7a8a      	ldrb	r2, [r1, #10]
 808bad8:	18fe      	adds	r6, r7, r3
 808bada:	411a      	asrs	r2, r3
 808badc:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 808bade:	3301      	adds	r3, #1
 808bae0:	b2f6      	uxtb	r6, r6
 808bae2:	f002 0201 	and.w	r2, r2, #1
     for (byte_itr = 0; byte_itr < 8; byte_itr++)
 808bae6:	2b08      	cmp	r3, #8
       au16regs[array_indx++] = (au8Buffer[buff_indx] >> (BYTE_MASK * byte_itr)) & BYTE_MASK;
 808bae8:	f825 2016 	strh.w	r2, [r5, r6, lsl #1]
     for (byte_itr = 0; byte_itr < 8; byte_itr++)
 808baec:	d1f3      	bne.n	808bad6 <_ZN6Modbus7get_FC1Ev+0x18>
   for (i=0; i < au8Buffer[2]; i++) 
 808baee:	3401      	adds	r4, #1
 808baf0:	e7e7      	b.n	808bac2 <_ZN6Modbus7get_FC1Ev+0x4>
     }
     buff_indx++;  
   }
}
 808baf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808baf4 <_ZN6Modbus7get_FC3Ev>:
 * This method processes functions 3 & 4 (for master)
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void Modbus::get_FC3() {
 808baf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t u8byte, i;
  u8byte = 3;

  #ifdef LOGGING
    Log.info("MODBUS> FC3: ");
 808baf6:	4913      	ldr	r1, [pc, #76]	; (808bb44 <_ZN6Modbus7get_FC3Ev+0x50>)
void Modbus::get_FC3() {
 808baf8:	4604      	mov	r4, r0
    Log.info("MODBUS> FC3: ");
 808bafa:	4813      	ldr	r0, [pc, #76]	; (808bb48 <_ZN6Modbus7get_FC3Ev+0x54>)
 808bafc:	f7f9 ff4a 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
 808bb00:	2500      	movs	r5, #0
      au8Buffer[ u8byte + 1 ]
    );

    #ifdef LOGGING
      Serial.print(au16regs[ i ], HEX);
      Log.info(" ");
 808bb02:	4f12      	ldr	r7, [pc, #72]	; (808bb4c <_ZN6Modbus7get_FC3Ev+0x58>)
 808bb04:	4e10      	ldr	r6, [pc, #64]	; (808bb48 <_ZN6Modbus7get_FC3Ev+0x54>)
 808bb06:	b2ea      	uxtb	r2, r5
  for (i=0; i < au8Buffer[ 2 ] /2; i++) {
 808bb08:	7b21      	ldrb	r1, [r4, #12]
 808bb0a:	0053      	lsls	r3, r2, #1
 808bb0c:	3303      	adds	r3, #3
 808bb0e:	ebb2 0f51 	cmp.w	r2, r1, lsr #1
 808bb12:	b2db      	uxtb	r3, r3
 808bb14:	d215      	bcs.n	808bb42 <_ZN6Modbus7get_FC3Ev+0x4e>
    au16regs[ i ] = word(
 808bb16:	4423      	add	r3, r4
 808bb18:	7a99      	ldrb	r1, [r3, #10]
 808bb1a:	7adb      	ldrb	r3, [r3, #11]
 808bb1c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 808bb1e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 808bb22:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
      Serial.print(au16regs[ i ], HEX);
 808bb26:	f004 fc67 	bl	80903f8 <_Z16_fetch_usbserialv>
 808bb2a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 808bb2c:	2210      	movs	r2, #16
 808bb2e:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 808bb32:	f003 fed7 	bl	808f8e4 <_ZN5Print11printNumberEmh>
      Log.info(" ");
 808bb36:	4639      	mov	r1, r7
 808bb38:	4630      	mov	r0, r6
 808bb3a:	f7f9 ff2b 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
  for (i=0; i < au8Buffer[ 2 ] /2; i++) {
 808bb3e:	3501      	adds	r5, #1
 808bb40:	e7e1      	b.n	808bb06 <_ZN6Modbus7get_FC3Ev+0x12>
    u8byte += 2;

  }
  #ifdef LOGGING
  #endif
}
 808bb42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808bb44:	08094b0c 	.word	0x08094b0c
 808bb48:	200015a4 	.word	0x200015a4
 808bb4c:	0809507c 	.word	0x0809507c

0808bb50 <_ZN6Modbus14validateAnswerEv>:
uint8_t Modbus::validateAnswer() {
 808bb50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808bb52:	4604      	mov	r4, r0
    ((au8Buffer[u8BufferSize - 2] << 8)
 808bb54:	f890 504a 	ldrb.w	r5, [r0, #74]	; 0x4a
  if ( calcCRC( u8BufferSize-2 ) != u16MsgCRC ) {
 808bb58:	1ea9      	subs	r1, r5, #2
 808bb5a:	b2c9      	uxtb	r1, r1
 808bb5c:	f7ff ff91 	bl	808ba82 <_ZN6Modbus7calcCRCEh>
    ((au8Buffer[u8BufferSize - 2] << 8)
 808bb60:	4425      	add	r5, r4
 808bb62:	7a2a      	ldrb	r2, [r5, #8]
    | au8Buffer[u8BufferSize - 1]); // combine the crc Low & High bytes
 808bb64:	7a6b      	ldrb	r3, [r5, #9]
  if ( calcCRC( u8BufferSize-2 ) != u16MsgCRC ) {
 808bb66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808bb6a:	4298      	cmp	r0, r3
 808bb6c:	d01f      	beq.n	808bbae <_ZN6Modbus14validateAnswerEv+0x5e>
    u16errCnt ++;
 808bb6e:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
      Log.info("MODBUS> ");
 808bb72:	494e      	ldr	r1, [pc, #312]	; (808bcac <_ZN6Modbus14validateAnswerEv+0x15c>)
    u16errCnt ++;
 808bb74:	3301      	adds	r3, #1
 808bb76:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
      Log.info("MODBUS> ");
 808bb7a:	484d      	ldr	r0, [pc, #308]	; (808bcb0 <_ZN6Modbus14validateAnswerEv+0x160>)
 808bb7c:	f7f9 ff0a 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("validateAnswer: NO_REPLY");
 808bb80:	494c      	ldr	r1, [pc, #304]	; (808bcb4 <_ZN6Modbus14validateAnswerEv+0x164>)
 808bb82:	484b      	ldr	r0, [pc, #300]	; (808bcb0 <_ZN6Modbus14validateAnswerEv+0x160>)
 808bb84:	f7f9 ff06 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
      validate_ans = false;
 808bb88:	2300      	movs	r3, #0
 808bb8a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      if(MODBUS_DEBUG_ON)
 808bb8e:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 808bb92:	b153      	cbz	r3, 808bbaa <_ZN6Modbus14validateAnswerEv+0x5a>
        Particle.publish("gx_metrics", "validateAnswer: NO_REPLY", PRIVATE, WITH_ACK);
 808bb94:	4b48      	ldr	r3, [pc, #288]	; (808bcb8 <_ZN6Modbus14validateAnswerEv+0x168>)
 808bb96:	4a49      	ldr	r2, [pc, #292]	; (808bcbc <_ZN6Modbus14validateAnswerEv+0x16c>)
 808bb98:	4668      	mov	r0, sp
 808bb9a:	781b      	ldrb	r3, [r3, #0]
 808bb9c:	7812      	ldrb	r2, [r2, #0]
 808bb9e:	4945      	ldr	r1, [pc, #276]	; (808bcb4 <_ZN6Modbus14validateAnswerEv+0x164>)
 808bba0:	f7ff ff02 	bl	808b9a8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 808bba4:	a801      	add	r0, sp, #4
 808bba6:	f7fa fcfd 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return NO_REPLY;
 808bbaa:	20ff      	movs	r0, #255	; 0xff
 808bbac:	e05a      	b.n	808bc64 <_ZN6Modbus14validateAnswerEv+0x114>
  if ((au8Buffer[ FUNC ] & 0x80) != 0) {
 808bbae:	f994 300b 	ldrsb.w	r3, [r4, #11]
 808bbb2:	7ae1      	ldrb	r1, [r4, #11]
 808bbb4:	2b00      	cmp	r3, #0
 808bbb6:	da1f      	bge.n	808bbf8 <_ZN6Modbus14validateAnswerEv+0xa8>
    u16errCnt ++;
 808bbb8:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
      Log.info("MODBUS> ");
 808bbbc:	493b      	ldr	r1, [pc, #236]	; (808bcac <_ZN6Modbus14validateAnswerEv+0x15c>)
    u16errCnt ++;
 808bbbe:	3301      	adds	r3, #1
 808bbc0:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
      Log.info("MODBUS> ");
 808bbc4:	483a      	ldr	r0, [pc, #232]	; (808bcb0 <_ZN6Modbus14validateAnswerEv+0x160>)
 808bbc6:	f7f9 fee5 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("validateAnswer: ERR_EXCEPTION");
 808bbca:	493d      	ldr	r1, [pc, #244]	; (808bcc0 <_ZN6Modbus14validateAnswerEv+0x170>)
 808bbcc:	4838      	ldr	r0, [pc, #224]	; (808bcb0 <_ZN6Modbus14validateAnswerEv+0x160>)
 808bbce:	f7f9 fee1 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
      validate_ans = false;
 808bbd2:	2300      	movs	r3, #0
 808bbd4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      if(MODBUS_DEBUG_ON)
 808bbd8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 808bbdc:	b153      	cbz	r3, 808bbf4 <_ZN6Modbus14validateAnswerEv+0xa4>
        Particle.publish("gx_metrics", "validateAnswer: ERR_EXCEPTION", PRIVATE, WITH_ACK);
 808bbde:	4b36      	ldr	r3, [pc, #216]	; (808bcb8 <_ZN6Modbus14validateAnswerEv+0x168>)
 808bbe0:	4a36      	ldr	r2, [pc, #216]	; (808bcbc <_ZN6Modbus14validateAnswerEv+0x16c>)
 808bbe2:	4668      	mov	r0, sp
 808bbe4:	781b      	ldrb	r3, [r3, #0]
 808bbe6:	7812      	ldrb	r2, [r2, #0]
 808bbe8:	4935      	ldr	r1, [pc, #212]	; (808bcc0 <_ZN6Modbus14validateAnswerEv+0x170>)
 808bbea:	f7ff fedd 	bl	808b9a8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 808bbee:	a801      	add	r0, sp, #4
 808bbf0:	f7fa fcd8 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return ERR_EXCEPTION;
 808bbf4:	20fb      	movs	r0, #251	; 0xfb
 808bbf6:	e035      	b.n	808bc64 <_ZN6Modbus14validateAnswerEv+0x114>
  if ((au8Buffer[ FUNC ] & 0x80) != 0) {
 808bbf8:	2308      	movs	r3, #8
 808bbfa:	4a32      	ldr	r2, [pc, #200]	; (808bcc4 <_ZN6Modbus14validateAnswerEv+0x174>)
    if (fctsupported[i] == au8Buffer[FUNC]) {
 808bbfc:	f812 0b01 	ldrb.w	r0, [r2], #1
 808bc00:	4281      	cmp	r1, r0
 808bc02:	d131      	bne.n	808bc68 <_ZN6Modbus14validateAnswerEv+0x118>
        Log.info("MODBUS> ");
 808bc04:	4929      	ldr	r1, [pc, #164]	; (808bcac <_ZN6Modbus14validateAnswerEv+0x15c>)
 808bc06:	482a      	ldr	r0, [pc, #168]	; (808bcb0 <_ZN6Modbus14validateAnswerEv+0x160>)
 808bc08:	f7f9 fec4 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
        Log.info("validateAnswer: fctsupported");
 808bc0c:	492e      	ldr	r1, [pc, #184]	; (808bcc8 <_ZN6Modbus14validateAnswerEv+0x178>)
 808bc0e:	4828      	ldr	r0, [pc, #160]	; (808bcb0 <_ZN6Modbus14validateAnswerEv+0x160>)
 808bc10:	f7f9 fec0 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
        if(MODBUS_DEBUG_ON)
 808bc14:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 808bc18:	b153      	cbz	r3, 808bc30 <_ZN6Modbus14validateAnswerEv+0xe0>
          Particle.publish("gx_metrics", "validateAnswer: fctsupported", PRIVATE, WITH_ACK);
 808bc1a:	4b27      	ldr	r3, [pc, #156]	; (808bcb8 <_ZN6Modbus14validateAnswerEv+0x168>)
 808bc1c:	4a27      	ldr	r2, [pc, #156]	; (808bcbc <_ZN6Modbus14validateAnswerEv+0x16c>)
 808bc1e:	4668      	mov	r0, sp
 808bc20:	781b      	ldrb	r3, [r3, #0]
 808bc22:	7812      	ldrb	r2, [r2, #0]
 808bc24:	4928      	ldr	r1, [pc, #160]	; (808bcc8 <_ZN6Modbus14validateAnswerEv+0x178>)
 808bc26:	f7ff febf 	bl	808b9a8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 808bc2a:	a801      	add	r0, sp, #4
 808bc2c:	f7fa fcba 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Log.info("MODBUS> ");
 808bc30:	491e      	ldr	r1, [pc, #120]	; (808bcac <_ZN6Modbus14validateAnswerEv+0x15c>)
 808bc32:	481f      	ldr	r0, [pc, #124]	; (808bcb0 <_ZN6Modbus14validateAnswerEv+0x160>)
 808bc34:	f7f9 feae 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
    Log.info("validateAnswer: no issues");
 808bc38:	481d      	ldr	r0, [pc, #116]	; (808bcb0 <_ZN6Modbus14validateAnswerEv+0x160>)
 808bc3a:	4924      	ldr	r1, [pc, #144]	; (808bccc <_ZN6Modbus14validateAnswerEv+0x17c>)
 808bc3c:	f7f9 feaa 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
    validate_ans = true;
 808bc40:	2301      	movs	r3, #1
    if(MODBUS_DEBUG_ON)
 808bc42:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    validate_ans = true;
 808bc46:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    if(MODBUS_DEBUG_ON)
 808bc4a:	b158      	cbz	r0, 808bc64 <_ZN6Modbus14validateAnswerEv+0x114>
      Particle.publish("gx_metrics", "validateAnswer: no issues", PRIVATE, WITH_ACK);
 808bc4c:	4b1a      	ldr	r3, [pc, #104]	; (808bcb8 <_ZN6Modbus14validateAnswerEv+0x168>)
 808bc4e:	4a1b      	ldr	r2, [pc, #108]	; (808bcbc <_ZN6Modbus14validateAnswerEv+0x16c>)
 808bc50:	4668      	mov	r0, sp
 808bc52:	781b      	ldrb	r3, [r3, #0]
 808bc54:	7812      	ldrb	r2, [r2, #0]
 808bc56:	491d      	ldr	r1, [pc, #116]	; (808bccc <_ZN6Modbus14validateAnswerEv+0x17c>)
 808bc58:	f7ff fea6 	bl	808b9a8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 808bc5c:	a801      	add	r0, sp, #4
 808bc5e:	f7fa fca1 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 0; // OK, no exception code thrown
 808bc62:	2000      	movs	r0, #0
}
 808bc64:	b003      	add	sp, #12
 808bc66:	bd30      	pop	{r4, r5, pc}
  for (uint8_t i = 0; i< sizeof( fctsupported ); i++) {
 808bc68:	3b01      	subs	r3, #1
 808bc6a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 808bc6e:	d1c5      	bne.n	808bbfc <_ZN6Modbus14validateAnswerEv+0xac>
    u16errCnt ++;
 808bc70:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
      Log.info("MODBUS> ");
 808bc74:	490d      	ldr	r1, [pc, #52]	; (808bcac <_ZN6Modbus14validateAnswerEv+0x15c>)
    u16errCnt ++;
 808bc76:	3301      	adds	r3, #1
 808bc78:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
      Log.info("MODBUS> ");
 808bc7c:	480c      	ldr	r0, [pc, #48]	; (808bcb0 <_ZN6Modbus14validateAnswerEv+0x160>)
 808bc7e:	f7f9 fe89 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("validateAnswer: EXC_FUNC_CODE");
 808bc82:	4913      	ldr	r1, [pc, #76]	; (808bcd0 <_ZN6Modbus14validateAnswerEv+0x180>)
 808bc84:	480a      	ldr	r0, [pc, #40]	; (808bcb0 <_ZN6Modbus14validateAnswerEv+0x160>)
 808bc86:	f7f9 fe85 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
      if(MODBUS_DEBUG_ON)
 808bc8a:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 808bc8e:	b153      	cbz	r3, 808bca6 <_ZN6Modbus14validateAnswerEv+0x156>
        Particle.publish("gx_metrics", "validateAnswer: EXC_FUNC_CODE", PRIVATE, WITH_ACK);
 808bc90:	4b09      	ldr	r3, [pc, #36]	; (808bcb8 <_ZN6Modbus14validateAnswerEv+0x168>)
 808bc92:	4a0a      	ldr	r2, [pc, #40]	; (808bcbc <_ZN6Modbus14validateAnswerEv+0x16c>)
 808bc94:	4668      	mov	r0, sp
 808bc96:	781b      	ldrb	r3, [r3, #0]
 808bc98:	7812      	ldrb	r2, [r2, #0]
 808bc9a:	490d      	ldr	r1, [pc, #52]	; (808bcd0 <_ZN6Modbus14validateAnswerEv+0x180>)
 808bc9c:	f7ff fe84 	bl	808b9a8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 808bca0:	a801      	add	r0, sp, #4
 808bca2:	f7fa fc7f 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return EXC_FUNC_CODE;
 808bca6:	2001      	movs	r0, #1
 808bca8:	e7dc      	b.n	808bc64 <_ZN6Modbus14validateAnswerEv+0x114>
 808bcaa:	bf00      	nop
 808bcac:	08094b1a 	.word	0x08094b1a
 808bcb0:	200015a4 	.word	0x200015a4
 808bcb4:	08094b23 	.word	0x08094b23
 808bcb8:	20001541 	.word	0x20001541
 808bcbc:	20001540 	.word	0x20001540
 808bcc0:	08094b3c 	.word	0x08094b3c
 808bcc4:	08094e96 	.word	0x08094e96
 808bcc8:	08094b5a 	.word	0x08094b5a
 808bccc:	08094b95 	.word	0x08094b95
 808bcd0:	08094b77 	.word	0x08094b77

0808bcd4 <_ZN6Modbus8rxTxModeEh.part.0>:

  return u8CopyBufferSize;
}

// this switches between RXEN (0) and TXEN (1) modes
void Modbus::rxTxMode( uint8_t mode ) {
 808bcd4:	b513      	push	{r0, r1, r4, lr}
 808bcd6:	4604      	mov	r4, r0
  if (mode == RXEN) {
    if (u8txenpin > 1) digitalWrite( u8txenpin, LOW );
 808bcd8:	7980      	ldrb	r0, [r0, #6]
 808bcda:	2801      	cmp	r0, #1
 808bcdc:	d909      	bls.n	808bcf2 <_ZN6Modbus8rxTxModeEh.part.0+0x1e>
 808bcde:	2100      	movs	r1, #0
 808bce0:	f004 fda9 	bl	8090836 <digitalWrite>
    if (u8txenpin > 1) digitalWrite( u8rxenpin, LOW );
 808bce4:	79a3      	ldrb	r3, [r4, #6]
 808bce6:	2b01      	cmp	r3, #1
 808bce8:	d903      	bls.n	808bcf2 <_ZN6Modbus8rxTxModeEh.part.0+0x1e>
 808bcea:	2100      	movs	r1, #0
 808bcec:	79e0      	ldrb	r0, [r4, #7]
 808bcee:	f004 fda2 	bl	8090836 <digitalWrite>
    #ifdef LOGGING
      Log.info("MODBUS> Changing to RX mode.");
 808bcf2:	490a      	ldr	r1, [pc, #40]	; (808bd1c <_ZN6Modbus8rxTxModeEh.part.0+0x48>)
 808bcf4:	480a      	ldr	r0, [pc, #40]	; (808bd20 <_ZN6Modbus8rxTxModeEh.part.0+0x4c>)
 808bcf6:	f7f9 fe4d 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>


      if(MODBUS_DEBUG_ON)
 808bcfa:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 808bcfe:	b153      	cbz	r3, 808bd16 <_ZN6Modbus8rxTxModeEh.part.0+0x42>
        Particle.publish("gx_metrics", "MODBUS> Changing to RX mode.", PRIVATE, WITH_ACK);
 808bd00:	4b08      	ldr	r3, [pc, #32]	; (808bd24 <_ZN6Modbus8rxTxModeEh.part.0+0x50>)
 808bd02:	4a09      	ldr	r2, [pc, #36]	; (808bd28 <_ZN6Modbus8rxTxModeEh.part.0+0x54>)
 808bd04:	4668      	mov	r0, sp
 808bd06:	781b      	ldrb	r3, [r3, #0]
 808bd08:	7812      	ldrb	r2, [r2, #0]
 808bd0a:	4904      	ldr	r1, [pc, #16]	; (808bd1c <_ZN6Modbus8rxTxModeEh.part.0+0x48>)
 808bd0c:	f7ff fe4c 	bl	808b9a8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 808bd10:	a801      	add	r0, sp, #4
 808bd12:	f7fa fc47 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      if(MODBUS_DEBUG_ON)
        Particle.publish("gx_metrics", "MODBUS> Changing to TX mode.", PRIVATE, WITH_ACK);
    #endif
  }
  return;
};
 808bd16:	b002      	add	sp, #8
 808bd18:	bd10      	pop	{r4, pc}
 808bd1a:	bf00      	nop
 808bd1c:	08094baf 	.word	0x08094baf
 808bd20:	200015a4 	.word	0x200015a4
 808bd24:	20001541 	.word	0x20001541
 808bd28:	20001540 	.word	0x20001540

0808bd2c <_ZN6Modbus5beginEl>:
void Modbus::begin(long u32speed) {
 808bd2c:	b538      	push	{r3, r4, r5, lr}
  switch( u8serno ) {
 808bd2e:	7943      	ldrb	r3, [r0, #5]
void Modbus::begin(long u32speed) {
 808bd30:	4604      	mov	r4, r0
  switch( u8serno ) {
 808bd32:	2b02      	cmp	r3, #2
void Modbus::begin(long u32speed) {
 808bd34:	460d      	mov	r5, r1
  switch( u8serno ) {
 808bd36:	d021      	beq.n	808bd7c <_ZN6Modbus5beginEl+0x50>
    port = &Serial1;
 808bd38:	f004 fac8 	bl	80902cc <_Z22__fetch_global_Serial1v>
      port = &Serial2;
 808bd3c:	6020      	str	r0, [r4, #0]
  port->begin(u32speed);
 808bd3e:	6820      	ldr	r0, [r4, #0]
 808bd40:	4629      	mov	r1, r5
 808bd42:	f004 fab9 	bl	80902b8 <_ZN11USARTSerial5beginEm>
  if (u8txenpin > 1 && u8rxenpin > 1) { // pin 0 & pin 1 are reserved for RX/TX
 808bd46:	79a0      	ldrb	r0, [r4, #6]
 808bd48:	2801      	cmp	r0, #1
 808bd4a:	d90c      	bls.n	808bd66 <_ZN6Modbus5beginEl+0x3a>
 808bd4c:	79e3      	ldrb	r3, [r4, #7]
 808bd4e:	2b01      	cmp	r3, #1
 808bd50:	d909      	bls.n	808bd66 <_ZN6Modbus5beginEl+0x3a>
    pinMode(u8txenpin, OUTPUT);
 808bd52:	2101      	movs	r1, #1
 808bd54:	f004 fd5e 	bl	8090814 <pinMode>
    pinMode(u8rxenpin, OUTPUT);
 808bd58:	79e0      	ldrb	r0, [r4, #7]
 808bd5a:	2101      	movs	r1, #1
 808bd5c:	f004 fd5a 	bl	8090814 <pinMode>
  if (mode == RXEN) {
 808bd60:	4620      	mov	r0, r4
 808bd62:	f7ff ffb7 	bl	808bcd4 <_ZN6Modbus8rxTxModeEh.part.0>
  port->flush();
 808bd66:	6820      	ldr	r0, [r4, #0]
 808bd68:	6803      	ldr	r3, [r0, #0]
 808bd6a:	69db      	ldr	r3, [r3, #28]
 808bd6c:	4798      	blx	r3
  u8lastRec = u8BufferSize = 0;
 808bd6e:	2300      	movs	r3, #0
 808bd70:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
  u16InCnt = u16OutCnt = u16errCnt = 0;
 808bd74:	6523      	str	r3, [r4, #80]	; 0x50
 808bd76:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
}
 808bd7a:	bd38      	pop	{r3, r4, r5, pc}
      port = &Serial2;
 808bd7c:	f7ff fe2c 	bl	808b9d8 <_Z22__fetch_global_Serial2v>
 808bd80:	e7dc      	b.n	808bd3c <_ZN6Modbus5beginEl+0x10>
	...

0808bd84 <_ZN6Modbus8rxTxModeEh>:
void Modbus::rxTxMode( uint8_t mode ) {
 808bd84:	b513      	push	{r0, r1, r4, lr}
 808bd86:	4604      	mov	r4, r0
  if (mode == RXEN) {
 808bd88:	b919      	cbnz	r1, 808bd92 <_ZN6Modbus8rxTxModeEh+0xe>
 808bd8a:	f7ff ffa3 	bl	808bcd4 <_ZN6Modbus8rxTxModeEh.part.0>
};
 808bd8e:	b002      	add	sp, #8
 808bd90:	bd10      	pop	{r4, pc}
    if (u8txenpin > 1) digitalWrite( u8txenpin, HIGH );
 808bd92:	7980      	ldrb	r0, [r0, #6]
 808bd94:	2801      	cmp	r0, #1
 808bd96:	d909      	bls.n	808bdac <_ZN6Modbus8rxTxModeEh+0x28>
 808bd98:	2101      	movs	r1, #1
 808bd9a:	f004 fd4c 	bl	8090836 <digitalWrite>
    if (u8txenpin > 1) digitalWrite( u8rxenpin, HIGH ); // always leave this pin low so its always receiving
 808bd9e:	79a3      	ldrb	r3, [r4, #6]
 808bda0:	2b01      	cmp	r3, #1
 808bda2:	d903      	bls.n	808bdac <_ZN6Modbus8rxTxModeEh+0x28>
 808bda4:	2101      	movs	r1, #1
 808bda6:	79e0      	ldrb	r0, [r4, #7]
 808bda8:	f004 fd45 	bl	8090836 <digitalWrite>
      Log.info("MODBUS> Changing to TX mode.");
 808bdac:	4909      	ldr	r1, [pc, #36]	; (808bdd4 <_ZN6Modbus8rxTxModeEh+0x50>)
 808bdae:	480a      	ldr	r0, [pc, #40]	; (808bdd8 <_ZN6Modbus8rxTxModeEh+0x54>)
 808bdb0:	f7f9 fdf0 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
      if(MODBUS_DEBUG_ON)
 808bdb4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 808bdb8:	2b00      	cmp	r3, #0
 808bdba:	d0e8      	beq.n	808bd8e <_ZN6Modbus8rxTxModeEh+0xa>
        Particle.publish("gx_metrics", "MODBUS> Changing to TX mode.", PRIVATE, WITH_ACK);
 808bdbc:	4b07      	ldr	r3, [pc, #28]	; (808bddc <_ZN6Modbus8rxTxModeEh+0x58>)
 808bdbe:	4a08      	ldr	r2, [pc, #32]	; (808bde0 <_ZN6Modbus8rxTxModeEh+0x5c>)
 808bdc0:	4668      	mov	r0, sp
 808bdc2:	781b      	ldrb	r3, [r3, #0]
 808bdc4:	7812      	ldrb	r2, [r2, #0]
 808bdc6:	4903      	ldr	r1, [pc, #12]	; (808bdd4 <_ZN6Modbus8rxTxModeEh+0x50>)
 808bdc8:	f7ff fdee 	bl	808b9a8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 808bdcc:	a801      	add	r0, sp, #4
 808bdce:	f7fa fbe9 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return;
 808bdd2:	e7dc      	b.n	808bd8e <_ZN6Modbus8rxTxModeEh+0xa>
 808bdd4:	08094bcc 	.word	0x08094bcc
 808bdd8:	200015a4 	.word	0x200015a4
 808bddc:	20001541 	.word	0x20001541
 808bde0:	20001540 	.word	0x20001540

0808bde4 <_ZN6Modbus11getRxBufferEv>:
int8_t Modbus::getRxBuffer() {
 808bde4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (u8txenpin > 1 && u8rxenpin > 1) rxTxMode(RXEN);
 808bde6:	7983      	ldrb	r3, [r0, #6]
int8_t Modbus::getRxBuffer() {
 808bde8:	4604      	mov	r4, r0
  if (u8txenpin > 1 && u8rxenpin > 1) rxTxMode(RXEN);
 808bdea:	2b01      	cmp	r3, #1
int8_t Modbus::getRxBuffer() {
 808bdec:	b08b      	sub	sp, #44	; 0x2c
  if (u8txenpin > 1 && u8rxenpin > 1) rxTxMode(RXEN);
 808bdee:	d904      	bls.n	808bdfa <_ZN6Modbus11getRxBufferEv+0x16>
 808bdf0:	79c3      	ldrb	r3, [r0, #7]
 808bdf2:	2b01      	cmp	r3, #1
 808bdf4:	d901      	bls.n	808bdfa <_ZN6Modbus11getRxBufferEv+0x16>
  if (mode == RXEN) {
 808bdf6:	f7ff ff6d 	bl	808bcd4 <_ZN6Modbus8rxTxModeEh.part.0>
  u8BufferSize = 0;
 808bdfa:	2500      	movs	r5, #0
    Log.info("MODBUS> getRxbuffer output: ");
 808bdfc:	493b      	ldr	r1, [pc, #236]	; (808beec <_ZN6Modbus11getRxBufferEv+0x108>)
 808bdfe:	483c      	ldr	r0, [pc, #240]	; (808bef0 <_ZN6Modbus11getRxBufferEv+0x10c>)
  u8BufferSize = 0;
 808be00:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
    Log.info("MODBUS> getRxbuffer output: ");
 808be04:	f7f9 fdc6 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
      Log.info(" ");
 808be08:	4f3a      	ldr	r7, [pc, #232]	; (808bef4 <_ZN6Modbus11getRxBufferEv+0x110>)
 808be0a:	4e39      	ldr	r6, [pc, #228]	; (808bef0 <_ZN6Modbus11getRxBufferEv+0x10c>)
  while ( port->available() ) {
 808be0c:	6820      	ldr	r0, [r4, #0]
 808be0e:	6803      	ldr	r3, [r0, #0]
 808be10:	691b      	ldr	r3, [r3, #16]
 808be12:	4798      	blx	r3
 808be14:	b1f0      	cbz	r0, 808be54 <_ZN6Modbus11getRxBufferEv+0x70>
    au8Buffer[ u8BufferSize ] = port->read();
 808be16:	6820      	ldr	r0, [r4, #0]
 808be18:	6803      	ldr	r3, [r0, #0]
 808be1a:	695b      	ldr	r3, [r3, #20]
 808be1c:	4798      	blx	r3
 808be1e:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 808be22:	4423      	add	r3, r4
 808be24:	7298      	strb	r0, [r3, #10]
      Serial.print(au8Buffer[ u8BufferSize ], HEX);
 808be26:	f004 fae7 	bl	80903f8 <_Z16_fetch_usbserialv>
 808be2a:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 808be2e:	2210      	movs	r2, #16
 808be30:	4423      	add	r3, r4
 808be32:	7a99      	ldrb	r1, [r3, #10]
 808be34:	f003 fd56 	bl	808f8e4 <_ZN5Print11printNumberEmh>
      Log.info(" ");
 808be38:	4639      	mov	r1, r7
 808be3a:	4630      	mov	r0, r6
 808be3c:	f7f9 fdaa 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
    u8BufferSize ++;
 808be40:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 808be44:	3301      	adds	r3, #1
 808be46:	b2db      	uxtb	r3, r3
    if (u8BufferSize >= MAX_BUFFER) bBuffOverflow = true;
 808be48:	2b40      	cmp	r3, #64	; 0x40
 808be4a:	bf28      	it	cs
 808be4c:	2501      	movcs	r5, #1
    u8BufferSize ++;
 808be4e:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
    if (u8BufferSize >= MAX_BUFFER) bBuffOverflow = true;
 808be52:	e7db      	b.n	808be0c <_ZN6Modbus11getRxBufferEv+0x28>
  u16InCnt++;
 808be54:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 808be58:	3301      	adds	r3, #1
 808be5a:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
  if (bBuffOverflow) {
 808be5e:	b1cd      	cbz	r5, 808be94 <_ZN6Modbus11getRxBufferEv+0xb0>
    u16errCnt++;
 808be60:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
      Log.info("MODBUS> ERR_BUFF_OVERFLOW");
 808be64:	4924      	ldr	r1, [pc, #144]	; (808bef8 <_ZN6Modbus11getRxBufferEv+0x114>)
    u16errCnt++;
 808be66:	3301      	adds	r3, #1
 808be68:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
      Log.info("MODBUS> ERR_BUFF_OVERFLOW");
 808be6c:	4820      	ldr	r0, [pc, #128]	; (808bef0 <_ZN6Modbus11getRxBufferEv+0x10c>)
 808be6e:	f7f9 fd91 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
      if(MODBUS_DEBUG_ON)
 808be72:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 808be76:	b153      	cbz	r3, 808be8e <_ZN6Modbus11getRxBufferEv+0xaa>
        Particle.publish("gx_metrics", "MODBUS> ERR_BUFF_OVERFLOW", PRIVATE, WITH_ACK);
 808be78:	4b20      	ldr	r3, [pc, #128]	; (808befc <_ZN6Modbus11getRxBufferEv+0x118>)
 808be7a:	4a21      	ldr	r2, [pc, #132]	; (808bf00 <_ZN6Modbus11getRxBufferEv+0x11c>)
 808be7c:	a806      	add	r0, sp, #24
 808be7e:	781b      	ldrb	r3, [r3, #0]
 808be80:	7812      	ldrb	r2, [r2, #0]
 808be82:	491d      	ldr	r1, [pc, #116]	; (808bef8 <_ZN6Modbus11getRxBufferEv+0x114>)
 808be84:	f7ff fd90 	bl	808b9a8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 808be88:	a807      	add	r0, sp, #28
 808be8a:	f7fa fb8b 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return ERR_BUFF_OVERFLOW;
 808be8e:	f06f 0002 	mvn.w	r0, #2
 808be92:	e029      	b.n	808bee8 <_ZN6Modbus11getRxBufferEv+0x104>
    Log.info("MODBUS> Buffer size: %d", u8BufferSize);
 808be94:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
 808be98:	491a      	ldr	r1, [pc, #104]	; (808bf04 <_ZN6Modbus11getRxBufferEv+0x120>)
 808be9a:	4815      	ldr	r0, [pc, #84]	; (808bef0 <_ZN6Modbus11getRxBufferEv+0x10c>)
 808be9c:	f7f9 fd7a 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
    if(MODBUS_DEBUG_ON)
 808bea0:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 808bea4:	b1f3      	cbz	r3, 808bee4 <_ZN6Modbus11getRxBufferEv+0x100>
	StringSumHelper(const char *p) : String(p) {}
 808bea6:	4918      	ldr	r1, [pc, #96]	; (808bf08 <_ZN6Modbus11getRxBufferEv+0x124>)
 808bea8:	a806      	add	r0, sp, #24
 808beaa:	f003 fef5 	bl	808fc98 <_ZN6StringC1EPKc>
      Particle.publish("gx_metrics", "MODBUS> Buffer size: " + String(u8BufferSize), PRIVATE, WITH_ACK);
 808beae:	220a      	movs	r2, #10
 808beb0:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
 808beb4:	a802      	add	r0, sp, #8
 808beb6:	f003 ff5d 	bl	808fd74 <_ZN6StringC1Ehh>
 808beba:	a902      	add	r1, sp, #8
 808bebc:	a806      	add	r0, sp, #24
 808bebe:	f004 f81c 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 808bec2:	4b0e      	ldr	r3, [pc, #56]	; (808befc <_ZN6Modbus11getRxBufferEv+0x118>)
 808bec4:	4a0e      	ldr	r2, [pc, #56]	; (808bf00 <_ZN6Modbus11getRxBufferEv+0x11c>)
 808bec6:	6801      	ldr	r1, [r0, #0]
 808bec8:	781b      	ldrb	r3, [r3, #0]
 808beca:	7812      	ldrb	r2, [r2, #0]
 808becc:	4668      	mov	r0, sp
 808bece:	f7ff fd6b 	bl	808b9a8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 808bed2:	a801      	add	r0, sp, #4
 808bed4:	f7fa fb66 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808bed8:	a802      	add	r0, sp, #8
 808beda:	f003 fe93 	bl	808fc04 <_ZN6StringD1Ev>
class StringSumHelper : public String
 808bede:	a806      	add	r0, sp, #24
 808bee0:	f003 fe90 	bl	808fc04 <_ZN6StringD1Ev>
  return u8BufferSize;
 808bee4:	f994 004a 	ldrsb.w	r0, [r4, #74]	; 0x4a
}
 808bee8:	b00b      	add	sp, #44	; 0x2c
 808beea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808beec:	08094be9 	.word	0x08094be9
 808bef0:	200015a4 	.word	0x200015a4
 808bef4:	0809507c 	.word	0x0809507c
 808bef8:	08094c06 	.word	0x08094c06
 808befc:	20001541 	.word	0x20001541
 808bf00:	20001540 	.word	0x20001540
 808bf04:	08094c20 	.word	0x08094c20
 808bf08:	08094c38 	.word	0x08094c38

0808bf0c <_ZN6Modbus4pollEv>:
int8_t Modbus::poll() {
 808bf0c:	b570      	push	{r4, r5, r6, lr}
 808bf0e:	4604      	mov	r4, r0
  uint8_t u8current = port->available();
 808bf10:	6800      	ldr	r0, [r0, #0]
 808bf12:	6803      	ldr	r3, [r0, #0]
 808bf14:	691b      	ldr	r3, [r3, #16]
 808bf16:	4798      	blx	r3
 808bf18:	4605      	mov	r5, r0
 808bf1a:	f001 f80f 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
  if (millis() > u32timeOut) {
 808bf1e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 808bf20:	4283      	cmp	r3, r0
 808bf22:	d209      	bcs.n	808bf38 <_ZN6Modbus4pollEv+0x2c>
    u8state = COM_IDLE;
 808bf24:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 808bf28:	8123      	strh	r3, [r4, #8]
    u16errCnt++;
 808bf2a:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
 808bf2e:	3301      	adds	r3, #1
 808bf30:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    return 0;
 808bf34:	2000      	movs	r0, #0
}
 808bf36:	bd70      	pop	{r4, r5, r6, pc}
  if (u8current == 0) return 0;
 808bf38:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 808bf3c:	d0fa      	beq.n	808bf34 <_ZN6Modbus4pollEv+0x28>
  if (u8current != u8lastRec) {
 808bf3e:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 808bf42:	42ab      	cmp	r3, r5
 808bf44:	d006      	beq.n	808bf54 <_ZN6Modbus4pollEv+0x48>
    u8lastRec = u8current;
 808bf46:	f884 504b 	strb.w	r5, [r4, #75]	; 0x4b
 808bf4a:	f000 fff7 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
    u32time = millis() + T35;
 808bf4e:	3005      	adds	r0, #5
 808bf50:	65a0      	str	r0, [r4, #88]	; 0x58
 808bf52:	e7ef      	b.n	808bf34 <_ZN6Modbus4pollEv+0x28>
 808bf54:	f000 fff2 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
  if (millis() < u32time) return 0;
 808bf58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 808bf5a:	4283      	cmp	r3, r0
 808bf5c:	d8ea      	bhi.n	808bf34 <_ZN6Modbus4pollEv+0x28>
  u8lastRec = 0;
 808bf5e:	2600      	movs	r6, #0
  int8_t i8state = getRxBuffer();
 808bf60:	4620      	mov	r0, r4
  u8lastRec = 0;
 808bf62:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
  int8_t i8state = getRxBuffer();
 808bf66:	f7ff ff3d 	bl	808bde4 <_ZN6Modbus11getRxBufferEv>
  if (i8state < 7) {
 808bf6a:	2806      	cmp	r0, #6
 808bf6c:	dc06      	bgt.n	808bf7c <_ZN6Modbus4pollEv+0x70>
    u16errCnt++;
 808bf6e:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
    u8state = COM_IDLE;
 808bf72:	7226      	strb	r6, [r4, #8]
    u16errCnt++;
 808bf74:	3301      	adds	r3, #1
 808bf76:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    return i8state;
 808bf7a:	e7dc      	b.n	808bf36 <_ZN6Modbus4pollEv+0x2a>
  uint8_t u8exception = validateAnswer();
 808bf7c:	4620      	mov	r0, r4
 808bf7e:	f7ff fde7 	bl	808bb50 <_ZN6Modbus14validateAnswerEv>
  if (u8exception != 0) {
 808bf82:	4605      	mov	r5, r0
 808bf84:	b158      	cbz	r0, 808bf9e <_ZN6Modbus4pollEv+0x92>
      Log.info("MODBUS> ");
 808bf86:	4936      	ldr	r1, [pc, #216]	; (808c060 <_ZN6Modbus4pollEv+0x154>)
 808bf88:	4836      	ldr	r0, [pc, #216]	; (808c064 <_ZN6Modbus4pollEv+0x158>)
    u8state = COM_IDLE;
 808bf8a:	7226      	strb	r6, [r4, #8]
      Log.info("MODBUS> ");
 808bf8c:	f7f9 fd02 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("u8exception: %d", u8exception);
 808bf90:	4834      	ldr	r0, [pc, #208]	; (808c064 <_ZN6Modbus4pollEv+0x158>)
 808bf92:	462a      	mov	r2, r5
 808bf94:	4934      	ldr	r1, [pc, #208]	; (808c068 <_ZN6Modbus4pollEv+0x15c>)
 808bf96:	f7f9 fcfd 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
    return u8exception;
 808bf9a:	b268      	sxtb	r0, r5
 808bf9c:	e7cb      	b.n	808bf36 <_ZN6Modbus4pollEv+0x2a>
  switch( au8Buffer[ FUNC ] ) {
 808bf9e:	7ae3      	ldrb	r3, [r4, #11]
 808bfa0:	3b01      	subs	r3, #1
 808bfa2:	2b0f      	cmp	r3, #15
 808bfa4:	d856      	bhi.n	808c054 <_ZN6Modbus4pollEv+0x148>
 808bfa6:	e8df f003 	tbb	[pc, r3]
 808bfaa:	2208      	.short	0x2208
 808bfac:	433d2b34 	.word	0x433d2b34
 808bfb0:	55555555 	.word	0x55555555
 808bfb4:	55555555 	.word	0x55555555
 808bfb8:	4f49      	.short	0x4f49
        Log.info("MODBUS> ");
 808bfba:	4929      	ldr	r1, [pc, #164]	; (808c060 <_ZN6Modbus4pollEv+0x154>)
 808bfbc:	4829      	ldr	r0, [pc, #164]	; (808c064 <_ZN6Modbus4pollEv+0x158>)
 808bfbe:	f7f9 fce9 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
        Log.info("MB_FC_READ_COILS");
 808bfc2:	492a      	ldr	r1, [pc, #168]	; (808c06c <_ZN6Modbus4pollEv+0x160>)
        Log.info("nothing to do in the au8 func");
 808bfc4:	4827      	ldr	r0, [pc, #156]	; (808c064 <_ZN6Modbus4pollEv+0x158>)
 808bfc6:	f7f9 fce5 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
  u8state = COM_IDLE;
 808bfca:	2300      	movs	r3, #0
    Log.info("MODBUS> ");
 808bfcc:	4924      	ldr	r1, [pc, #144]	; (808c060 <_ZN6Modbus4pollEv+0x154>)
  u8state = COM_IDLE;
 808bfce:	7223      	strb	r3, [r4, #8]
    Log.info("MODBUS> ");
 808bfd0:	4824      	ldr	r0, [pc, #144]	; (808c064 <_ZN6Modbus4pollEv+0x158>)
 808bfd2:	f7f9 fcdf 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
    Log.info("poll OK! Buffer size: %d", u8BufferSize);
 808bfd6:	4823      	ldr	r0, [pc, #140]	; (808c064 <_ZN6Modbus4pollEv+0x158>)
 808bfd8:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
 808bfdc:	4924      	ldr	r1, [pc, #144]	; (808c070 <_ZN6Modbus4pollEv+0x164>)
 808bfde:	f7f9 fcd9 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
  pollOK = true;
 808bfe2:	2301      	movs	r3, #1
  return u8BufferSize;
 808bfe4:	f994 004a 	ldrsb.w	r0, [r4, #74]	; 0x4a
  pollOK = true;
 808bfe8:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
  return u8BufferSize;
 808bfec:	e7a3      	b.n	808bf36 <_ZN6Modbus4pollEv+0x2a>
      get_FC1( );
 808bfee:	4620      	mov	r0, r4
 808bff0:	f7ff fd65 	bl	808babe <_ZN6Modbus7get_FC1Ev>
        Log.info("MODBUS> ");
 808bff4:	491a      	ldr	r1, [pc, #104]	; (808c060 <_ZN6Modbus4pollEv+0x154>)
 808bff6:	481b      	ldr	r0, [pc, #108]	; (808c064 <_ZN6Modbus4pollEv+0x158>)
 808bff8:	f7f9 fccc 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
        Log.info("MB_FC_READ_DISCRETE_INPUT");
 808bffc:	491d      	ldr	r1, [pc, #116]	; (808c074 <_ZN6Modbus4pollEv+0x168>)
 808bffe:	e7e1      	b.n	808bfc4 <_ZN6Modbus4pollEv+0xb8>
      get_FC3( );
 808c000:	4620      	mov	r0, r4
 808c002:	f7ff fd77 	bl	808baf4 <_ZN6Modbus7get_FC3Ev>
        Log.info("MODBUS> ");
 808c006:	4916      	ldr	r1, [pc, #88]	; (808c060 <_ZN6Modbus4pollEv+0x154>)
 808c008:	4816      	ldr	r0, [pc, #88]	; (808c064 <_ZN6Modbus4pollEv+0x158>)
 808c00a:	f7f9 fcc3 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
        Log.info("MB_FC_READ_INPUT_REGISTER");
 808c00e:	491a      	ldr	r1, [pc, #104]	; (808c078 <_ZN6Modbus4pollEv+0x16c>)
 808c010:	e7d8      	b.n	808bfc4 <_ZN6Modbus4pollEv+0xb8>
      get_FC3( );
 808c012:	4620      	mov	r0, r4
 808c014:	f7ff fd6e 	bl	808baf4 <_ZN6Modbus7get_FC3Ev>
        Log.info("MODBUS> ");
 808c018:	4911      	ldr	r1, [pc, #68]	; (808c060 <_ZN6Modbus4pollEv+0x154>)
 808c01a:	4812      	ldr	r0, [pc, #72]	; (808c064 <_ZN6Modbus4pollEv+0x158>)
 808c01c:	f7f9 fcba 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
        Log.info("MB_FC_READ_REGISTERS");
 808c020:	4916      	ldr	r1, [pc, #88]	; (808c07c <_ZN6Modbus4pollEv+0x170>)
 808c022:	e7cf      	b.n	808bfc4 <_ZN6Modbus4pollEv+0xb8>
        Log.info("MODBUS> ");
 808c024:	490e      	ldr	r1, [pc, #56]	; (808c060 <_ZN6Modbus4pollEv+0x154>)
 808c026:	480f      	ldr	r0, [pc, #60]	; (808c064 <_ZN6Modbus4pollEv+0x158>)
 808c028:	f7f9 fcb4 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
        Log.info("MB_FC_WRITE_COIL");
 808c02c:	4914      	ldr	r1, [pc, #80]	; (808c080 <_ZN6Modbus4pollEv+0x174>)
 808c02e:	e7c9      	b.n	808bfc4 <_ZN6Modbus4pollEv+0xb8>
        Log.info("MODBUS> ");
 808c030:	490b      	ldr	r1, [pc, #44]	; (808c060 <_ZN6Modbus4pollEv+0x154>)
 808c032:	480c      	ldr	r0, [pc, #48]	; (808c064 <_ZN6Modbus4pollEv+0x158>)
 808c034:	f7f9 fcae 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
        Log.info("MB_FC_WRITE_REGISTER");
 808c038:	4912      	ldr	r1, [pc, #72]	; (808c084 <_ZN6Modbus4pollEv+0x178>)
 808c03a:	e7c3      	b.n	808bfc4 <_ZN6Modbus4pollEv+0xb8>
        Log.info("MODBUS> ");
 808c03c:	4908      	ldr	r1, [pc, #32]	; (808c060 <_ZN6Modbus4pollEv+0x154>)
 808c03e:	4809      	ldr	r0, [pc, #36]	; (808c064 <_ZN6Modbus4pollEv+0x158>)
 808c040:	f7f9 fca8 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
        Log.info("MB_FC_WRITE_MULTIPLE_COILS");
 808c044:	4910      	ldr	r1, [pc, #64]	; (808c088 <_ZN6Modbus4pollEv+0x17c>)
 808c046:	e7bd      	b.n	808bfc4 <_ZN6Modbus4pollEv+0xb8>
        Log.info("MODBUS> ");
 808c048:	4905      	ldr	r1, [pc, #20]	; (808c060 <_ZN6Modbus4pollEv+0x154>)
 808c04a:	4806      	ldr	r0, [pc, #24]	; (808c064 <_ZN6Modbus4pollEv+0x158>)
 808c04c:	f7f9 fca2 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
        Log.info("MB_FC_WRITE_MULTIPLE_REGISTERS");
 808c050:	490e      	ldr	r1, [pc, #56]	; (808c08c <_ZN6Modbus4pollEv+0x180>)
 808c052:	e7b7      	b.n	808bfc4 <_ZN6Modbus4pollEv+0xb8>
        Log.info("MODBUS> ");
 808c054:	4902      	ldr	r1, [pc, #8]	; (808c060 <_ZN6Modbus4pollEv+0x154>)
 808c056:	4803      	ldr	r0, [pc, #12]	; (808c064 <_ZN6Modbus4pollEv+0x158>)
 808c058:	f7f9 fc9c 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
        Log.info("nothing to do in the au8 func");
 808c05c:	490c      	ldr	r1, [pc, #48]	; (808c090 <_ZN6Modbus4pollEv+0x184>)
 808c05e:	e7b1      	b.n	808bfc4 <_ZN6Modbus4pollEv+0xb8>
 808c060:	08094b1a 	.word	0x08094b1a
 808c064:	200015a4 	.word	0x200015a4
 808c068:	08094c4e 	.word	0x08094c4e
 808c06c:	08094c5e 	.word	0x08094c5e
 808c070:	08094d36 	.word	0x08094d36
 808c074:	08094c6f 	.word	0x08094c6f
 808c078:	08094c89 	.word	0x08094c89
 808c07c:	08094ca3 	.word	0x08094ca3
 808c080:	08094cb8 	.word	0x08094cb8
 808c084:	08094cc9 	.word	0x08094cc9
 808c088:	08094cde 	.word	0x08094cde
 808c08c:	08094cf9 	.word	0x08094cf9
 808c090:	08094d18 	.word	0x08094d18

0808c094 <_ZN6Modbus12sendTxBufferEv>:
void Modbus::sendTxBuffer() {
 808c094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808c096:	4604      	mov	r4, r0
    Log.info("MODBUS> Sending tx buffer");
 808c098:	494a      	ldr	r1, [pc, #296]	; (808c1c4 <_ZN6Modbus12sendTxBufferEv+0x130>)
 808c09a:	484b      	ldr	r0, [pc, #300]	; (808c1c8 <_ZN6Modbus12sendTxBufferEv+0x134>)
 808c09c:	f7f9 fc7a 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
    if(MODBUS_DEBUG_ON)
 808c0a0:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 808c0a4:	b153      	cbz	r3, 808c0bc <_ZN6Modbus12sendTxBufferEv+0x28>
      Particle.publish("gx_metrics", "MODBUS> Sending tx buffer", PRIVATE, WITH_ACK);
 808c0a6:	4b49      	ldr	r3, [pc, #292]	; (808c1cc <_ZN6Modbus12sendTxBufferEv+0x138>)
 808c0a8:	4a49      	ldr	r2, [pc, #292]	; (808c1d0 <_ZN6Modbus12sendTxBufferEv+0x13c>)
 808c0aa:	4668      	mov	r0, sp
 808c0ac:	781b      	ldrb	r3, [r3, #0]
 808c0ae:	7812      	ldrb	r2, [r2, #0]
 808c0b0:	4944      	ldr	r1, [pc, #272]	; (808c1c4 <_ZN6Modbus12sendTxBufferEv+0x130>)
 808c0b2:	f7ff fc79 	bl	808b9a8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 808c0b6:	a801      	add	r0, sp, #4
 808c0b8:	f7fa fa74 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  uint16_t u16crc = calcCRC( u8BufferSize );
 808c0bc:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
 808c0c0:	4620      	mov	r0, r4
 808c0c2:	f7ff fcde 	bl	808ba82 <_ZN6Modbus7calcCRCEh>
  au8Buffer[ u8BufferSize ] = u16crc >> 8;
 808c0c6:	1863      	adds	r3, r4, r1
 808c0c8:	1202      	asrs	r2, r0, #8
 808c0ca:	729a      	strb	r2, [r3, #10]
  u8BufferSize++;
 808c0cc:	1c4b      	adds	r3, r1, #1
  au8Buffer[ u8BufferSize ] = u16crc & 0x00ff;
 808c0ce:	b2db      	uxtb	r3, r3
 808c0d0:	4423      	add	r3, r4
  u8BufferSize++;
 808c0d2:	3102      	adds	r1, #2
  au8Buffer[ u8BufferSize ] = u16crc & 0x00ff;
 808c0d4:	7298      	strb	r0, [r3, #10]
  u8BufferSize++;
 808c0d6:	f884 104a 	strb.w	r1, [r4, #74]	; 0x4a
    Log.info("MODBUS> sendTxBuffer -- ");
 808c0da:	483b      	ldr	r0, [pc, #236]	; (808c1c8 <_ZN6Modbus12sendTxBufferEv+0x134>)
 808c0dc:	493d      	ldr	r1, [pc, #244]	; (808c1d4 <_ZN6Modbus12sendTxBufferEv+0x140>)
 808c0de:	f7f9 fc59 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
    if (MODBUS_DEBUG_ON)
 808c0e2:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 808c0e6:	b1d3      	cbz	r3, 808c11e <_ZN6Modbus12sendTxBufferEv+0x8a>
      Particle.publish("gx_metrics", "MODBUS> sendTxBuffer -- ", PRIVATE, WITH_ACK);
 808c0e8:	4b38      	ldr	r3, [pc, #224]	; (808c1cc <_ZN6Modbus12sendTxBufferEv+0x138>)
 808c0ea:	4a39      	ldr	r2, [pc, #228]	; (808c1d0 <_ZN6Modbus12sendTxBufferEv+0x13c>)
 808c0ec:	4668      	mov	r0, sp
 808c0ee:	781b      	ldrb	r3, [r3, #0]
 808c0f0:	7812      	ldrb	r2, [r2, #0]
 808c0f2:	4938      	ldr	r1, [pc, #224]	; (808c1d4 <_ZN6Modbus12sendTxBufferEv+0x140>)
 808c0f4:	f7ff fc58 	bl	808b9a8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 808c0f8:	a801      	add	r0, sp, #4
 808c0fa:	f7fa fa53 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808c0fe:	2500      	movs	r5, #0
        Log.info("%d", au8Buffer[i]);
 808c100:	4f35      	ldr	r7, [pc, #212]	; (808c1d8 <_ZN6Modbus12sendTxBufferEv+0x144>)
 808c102:	4e31      	ldr	r6, [pc, #196]	; (808c1c8 <_ZN6Modbus12sendTxBufferEv+0x134>)
      for (uint8_t i = 0; i < u8BufferSize; i++)
 808c104:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
 808c108:	b2eb      	uxtb	r3, r5
 808c10a:	429a      	cmp	r2, r3
 808c10c:	d907      	bls.n	808c11e <_ZN6Modbus12sendTxBufferEv+0x8a>
        Log.info("%d", au8Buffer[i]);
 808c10e:	4423      	add	r3, r4
 808c110:	4639      	mov	r1, r7
 808c112:	4630      	mov	r0, r6
 808c114:	7a9a      	ldrb	r2, [r3, #10]
 808c116:	f7f9 fc3d 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
      for (uint8_t i = 0; i < u8BufferSize; i++)
 808c11a:	3501      	adds	r5, #1
 808c11c:	e7f2      	b.n	808c104 <_ZN6Modbus12sendTxBufferEv+0x70>
  if (u8txenpin > 1 && u8rxenpin > 1) {
 808c11e:	79a3      	ldrb	r3, [r4, #6]
 808c120:	2b01      	cmp	r3, #1
 808c122:	d918      	bls.n	808c156 <_ZN6Modbus12sendTxBufferEv+0xc2>
 808c124:	79e3      	ldrb	r3, [r4, #7]
 808c126:	2b01      	cmp	r3, #1
 808c128:	d915      	bls.n	808c156 <_ZN6Modbus12sendTxBufferEv+0xc2>
      Log.info("MODBUS> tx buffer set to transmit");
 808c12a:	492c      	ldr	r1, [pc, #176]	; (808c1dc <_ZN6Modbus12sendTxBufferEv+0x148>)
 808c12c:	4826      	ldr	r0, [pc, #152]	; (808c1c8 <_ZN6Modbus12sendTxBufferEv+0x134>)
 808c12e:	f7f9 fc31 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
      if(MODBUS_DEBUG_ON)
 808c132:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 808c136:	b153      	cbz	r3, 808c14e <_ZN6Modbus12sendTxBufferEv+0xba>
        Particle.publish("gx_metrics", "MODBUS> tx buffer set to transmit", PRIVATE, WITH_ACK);
 808c138:	4b24      	ldr	r3, [pc, #144]	; (808c1cc <_ZN6Modbus12sendTxBufferEv+0x138>)
 808c13a:	4a25      	ldr	r2, [pc, #148]	; (808c1d0 <_ZN6Modbus12sendTxBufferEv+0x13c>)
 808c13c:	4668      	mov	r0, sp
 808c13e:	781b      	ldrb	r3, [r3, #0]
 808c140:	7812      	ldrb	r2, [r2, #0]
 808c142:	4926      	ldr	r1, [pc, #152]	; (808c1dc <_ZN6Modbus12sendTxBufferEv+0x148>)
 808c144:	f7ff fc30 	bl	808b9a8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 808c148:	a801      	add	r0, sp, #4
 808c14a:	f7fa fa2b 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    rxTxMode(TXEN);
 808c14e:	2101      	movs	r1, #1
 808c150:	4620      	mov	r0, r4
 808c152:	f7ff fe17 	bl	808bd84 <_ZN6Modbus8rxTxModeEh>
  port->write( au8Buffer, u8BufferSize );
 808c156:	6820      	ldr	r0, [r4, #0]
 808c158:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
 808c15c:	6803      	ldr	r3, [r0, #0]
 808c15e:	f104 010a 	add.w	r1, r4, #10
 808c162:	68db      	ldr	r3, [r3, #12]
 808c164:	4798      	blx	r3
  port->flush();	//waits for transmittion to complete before returning
 808c166:	6820      	ldr	r0, [r4, #0]
 808c168:	6803      	ldr	r3, [r0, #0]
 808c16a:	69db      	ldr	r3, [r3, #28]
 808c16c:	4798      	blx	r3
  if (u8txenpin > 1 && u8rxenpin > 1) {
 808c16e:	79a3      	ldrb	r3, [r4, #6]
 808c170:	2b01      	cmp	r3, #1
 808c172:	d917      	bls.n	808c1a4 <_ZN6Modbus12sendTxBufferEv+0x110>
 808c174:	79e3      	ldrb	r3, [r4, #7]
 808c176:	2b01      	cmp	r3, #1
 808c178:	d914      	bls.n	808c1a4 <_ZN6Modbus12sendTxBufferEv+0x110>
  if (mode == RXEN) {
 808c17a:	4620      	mov	r0, r4
 808c17c:	f7ff fdaa 	bl	808bcd4 <_ZN6Modbus8rxTxModeEh.part.0>
      Log.info("MODBUS> tx buffer switch back to rx mode");
 808c180:	4917      	ldr	r1, [pc, #92]	; (808c1e0 <_ZN6Modbus12sendTxBufferEv+0x14c>)
 808c182:	4811      	ldr	r0, [pc, #68]	; (808c1c8 <_ZN6Modbus12sendTxBufferEv+0x134>)
 808c184:	f7f9 fc06 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
      if(MODBUS_DEBUG_ON)
 808c188:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 808c18c:	b153      	cbz	r3, 808c1a4 <_ZN6Modbus12sendTxBufferEv+0x110>
        Particle.publish("gx_metrics", "MODBUS> tx buffer switch back to rx mode", PRIVATE, WITH_ACK);
 808c18e:	4b0f      	ldr	r3, [pc, #60]	; (808c1cc <_ZN6Modbus12sendTxBufferEv+0x138>)
 808c190:	4a0f      	ldr	r2, [pc, #60]	; (808c1d0 <_ZN6Modbus12sendTxBufferEv+0x13c>)
 808c192:	4668      	mov	r0, sp
 808c194:	781b      	ldrb	r3, [r3, #0]
 808c196:	7812      	ldrb	r2, [r2, #0]
 808c198:	4911      	ldr	r1, [pc, #68]	; (808c1e0 <_ZN6Modbus12sendTxBufferEv+0x14c>)
 808c19a:	f7ff fc05 	bl	808b9a8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 808c19e:	a801      	add	r0, sp, #4
 808c1a0:	f7fa fa00 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  u8BufferSize = 0;
 808c1a4:	2300      	movs	r3, #0
 808c1a6:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 808c1aa:	f000 fec7 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
  u32timeOut = millis() + (unsigned long) u16timeOut;
 808c1ae:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 808c1b2:	4403      	add	r3, r0
 808c1b4:	65e3      	str	r3, [r4, #92]	; 0x5c
  u16OutCnt++;
 808c1b6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 808c1ba:	3301      	adds	r3, #1
 808c1bc:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
}
 808c1c0:	b003      	add	sp, #12
 808c1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808c1c4:	08094d4f 	.word	0x08094d4f
 808c1c8:	200015a4 	.word	0x200015a4
 808c1cc:	20001541 	.word	0x20001541
 808c1d0:	20001540 	.word	0x20001540
 808c1d4:	08094d69 	.word	0x08094d69
 808c1d8:	08094237 	.word	0x08094237
 808c1dc:	08094d82 	.word	0x08094d82
 808c1e0:	08094da4 	.word	0x08094da4

0808c1e4 <_ZN6Modbus5queryE8modbus_t>:
int8_t Modbus::query( modbus_t telegram ) {
 808c1e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808c1e8:	4604      	mov	r4, r0
 808c1ea:	b08f      	sub	sp, #60	; 0x3c
 808c1ec:	a801      	add	r0, sp, #4
 808c1ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    Log.info("MODBUS> Query");
 808c1f2:	497e      	ldr	r1, [pc, #504]	; (808c3ec <_ZN6Modbus5queryE8modbus_t+0x208>)
 808c1f4:	487e      	ldr	r0, [pc, #504]	; (808c3f0 <_ZN6Modbus5queryE8modbus_t+0x20c>)
 808c1f6:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 808c1fa:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 808c1fe:	f89d 8004 	ldrb.w	r8, [sp, #4]
 808c202:	f89d 7005 	ldrb.w	r7, [sp, #5]
 808c206:	f8bd 5008 	ldrh.w	r5, [sp, #8]
 808c20a:	f7f9 fbc3 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
    if(MODBUS_DEBUG_ON)
 808c20e:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 808c212:	fa99 f999 	rev16.w	r9, r9
 808c216:	ba76      	rev16	r6, r6
 808c218:	b153      	cbz	r3, 808c230 <_ZN6Modbus5queryE8modbus_t+0x4c>
      Particle.publish("gx_metrics", "MODBUS> Query", PRIVATE, WITH_ACK);
 808c21a:	4b76      	ldr	r3, [pc, #472]	; (808c3f4 <_ZN6Modbus5queryE8modbus_t+0x210>)
 808c21c:	4a76      	ldr	r2, [pc, #472]	; (808c3f8 <_ZN6Modbus5queryE8modbus_t+0x214>)
 808c21e:	a80a      	add	r0, sp, #40	; 0x28
 808c220:	781b      	ldrb	r3, [r3, #0]
 808c222:	7812      	ldrb	r2, [r2, #0]
 808c224:	4971      	ldr	r1, [pc, #452]	; (808c3ec <_ZN6Modbus5queryE8modbus_t+0x208>)
 808c226:	f7ff fbbf 	bl	808b9a8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 808c22a:	a80b      	add	r0, sp, #44	; 0x2c
 808c22c:	f7fa f9ba 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  if (u8id!=0) {
 808c230:	7923      	ldrb	r3, [r4, #4]
 808c232:	b1a3      	cbz	r3, 808c25e <_ZN6Modbus5queryE8modbus_t+0x7a>
      Log.info("MODBUS> Query Error: No address");
 808c234:	4971      	ldr	r1, [pc, #452]	; (808c3fc <_ZN6Modbus5queryE8modbus_t+0x218>)
 808c236:	486e      	ldr	r0, [pc, #440]	; (808c3f0 <_ZN6Modbus5queryE8modbus_t+0x20c>)
 808c238:	f7f9 fbac 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
      if(MODBUS_DEBUG_ON)
 808c23c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 808c240:	b153      	cbz	r3, 808c258 <_ZN6Modbus5queryE8modbus_t+0x74>
        Particle.publish("gx_metrics", "MODBUS> Query Error: No address", PRIVATE, WITH_ACK);
 808c242:	4b6c      	ldr	r3, [pc, #432]	; (808c3f4 <_ZN6Modbus5queryE8modbus_t+0x210>)
 808c244:	4a6c      	ldr	r2, [pc, #432]	; (808c3f8 <_ZN6Modbus5queryE8modbus_t+0x214>)
 808c246:	a80a      	add	r0, sp, #40	; 0x28
 808c248:	781b      	ldrb	r3, [r3, #0]
 808c24a:	7812      	ldrb	r2, [r2, #0]
 808c24c:	496b      	ldr	r1, [pc, #428]	; (808c3fc <_ZN6Modbus5queryE8modbus_t+0x218>)
 808c24e:	f7ff fbab 	bl	808b9a8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 808c252:	a80b      	add	r0, sp, #44	; 0x2c
 808c254:	f7fa f9a6 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return -2;
 808c258:	f06f 0001 	mvn.w	r0, #1
 808c25c:	e08f      	b.n	808c37e <_ZN6Modbus5queryE8modbus_t+0x19a>
  if (u8state != COM_IDLE) {
 808c25e:	7a23      	ldrb	r3, [r4, #8]
 808c260:	b1a3      	cbz	r3, 808c28c <_ZN6Modbus5queryE8modbus_t+0xa8>
      Log.info("MODBUS> Query Error: Somebody else transmitting");
 808c262:	4967      	ldr	r1, [pc, #412]	; (808c400 <_ZN6Modbus5queryE8modbus_t+0x21c>)
 808c264:	4862      	ldr	r0, [pc, #392]	; (808c3f0 <_ZN6Modbus5queryE8modbus_t+0x20c>)
 808c266:	f7f9 fb95 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
      if(MODBUS_DEBUG_ON)
 808c26a:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 808c26e:	b153      	cbz	r3, 808c286 <_ZN6Modbus5queryE8modbus_t+0xa2>
        Particle.publish("gx_metrics", "MODBUS> Query Error: Somebody else transmitting", PRIVATE, WITH_ACK);
 808c270:	4b60      	ldr	r3, [pc, #384]	; (808c3f4 <_ZN6Modbus5queryE8modbus_t+0x210>)
 808c272:	4a61      	ldr	r2, [pc, #388]	; (808c3f8 <_ZN6Modbus5queryE8modbus_t+0x214>)
 808c274:	a80a      	add	r0, sp, #40	; 0x28
 808c276:	781b      	ldrb	r3, [r3, #0]
 808c278:	7812      	ldrb	r2, [r2, #0]
 808c27a:	4961      	ldr	r1, [pc, #388]	; (808c400 <_ZN6Modbus5queryE8modbus_t+0x21c>)
 808c27c:	f7ff fb94 	bl	808b9a8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 808c280:	a80b      	add	r0, sp, #44	; 0x2c
 808c282:	f7fa f98f 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return -1;
 808c286:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 808c28a:	e078      	b.n	808c37e <_ZN6Modbus5queryE8modbus_t+0x19a>
  if ((telegram.u8id==0) || (telegram.u8id>247)) {
 808c28c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 808c290:	b2db      	uxtb	r3, r3
 808c292:	2bf6      	cmp	r3, #246	; 0xf6
 808c294:	d931      	bls.n	808c2fa <_ZN6Modbus5queryE8modbus_t+0x116>
      Log.info("MODBUS> Query Error: Address out of range: ");
 808c296:	495b      	ldr	r1, [pc, #364]	; (808c404 <_ZN6Modbus5queryE8modbus_t+0x220>)
 808c298:	4855      	ldr	r0, [pc, #340]	; (808c3f0 <_ZN6Modbus5queryE8modbus_t+0x20c>)
 808c29a:	f7f9 fb7b 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
      Serial.println(telegram.u8id);
 808c29e:	f004 f8ab 	bl	80903f8 <_Z16_fetch_usbserialv>
 808c2a2:	4605      	mov	r5, r0
 808c2a4:	220a      	movs	r2, #10
 808c2a6:	4641      	mov	r1, r8
 808c2a8:	f003 fb1c 	bl	808f8e4 <_ZN5Print11printNumberEmh>
        n += println();
 808c2ac:	4628      	mov	r0, r5
 808c2ae:	f003 fb03 	bl	808f8b8 <_ZN5Print7printlnEv>
      if(MODBUS_DEBUG_ON)
 808c2b2:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 808c2b6:	b1eb      	cbz	r3, 808c2f4 <_ZN6Modbus5queryE8modbus_t+0x110>
	StringSumHelper(const char *p) : String(p) {}
 808c2b8:	4952      	ldr	r1, [pc, #328]	; (808c404 <_ZN6Modbus5queryE8modbus_t+0x220>)
 808c2ba:	a80a      	add	r0, sp, #40	; 0x28
 808c2bc:	f003 fcec 	bl	808fc98 <_ZN6StringC1EPKc>
        Particle.publish("gx_metrics", "MODBUS> Query Error: Address out of range: " + String(telegram.u8id), PRIVATE, WITH_ACK);
 808c2c0:	220a      	movs	r2, #10
 808c2c2:	4641      	mov	r1, r8
 808c2c4:	a806      	add	r0, sp, #24
 808c2c6:	f003 fd55 	bl	808fd74 <_ZN6StringC1Ehh>
 808c2ca:	a906      	add	r1, sp, #24
 808c2cc:	a80a      	add	r0, sp, #40	; 0x28
 808c2ce:	f003 fe14 	bl	808fefa <_ZplRK15StringSumHelperRK6String>
 808c2d2:	4b48      	ldr	r3, [pc, #288]	; (808c3f4 <_ZN6Modbus5queryE8modbus_t+0x210>)
 808c2d4:	4a48      	ldr	r2, [pc, #288]	; (808c3f8 <_ZN6Modbus5queryE8modbus_t+0x214>)
 808c2d6:	6801      	ldr	r1, [r0, #0]
 808c2d8:	781b      	ldrb	r3, [r3, #0]
 808c2da:	7812      	ldrb	r2, [r2, #0]
 808c2dc:	a804      	add	r0, sp, #16
 808c2de:	f7ff fb63 	bl	808b9a8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 808c2e2:	a805      	add	r0, sp, #20
 808c2e4:	f7fa f95e 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808c2e8:	a806      	add	r0, sp, #24
 808c2ea:	f003 fc8b 	bl	808fc04 <_ZN6StringD1Ev>
class StringSumHelper : public String
 808c2ee:	a80a      	add	r0, sp, #40	; 0x28
 808c2f0:	f003 fc88 	bl	808fc04 <_ZN6StringD1Ev>
    return -3;
 808c2f4:	f06f 0002 	mvn.w	r0, #2
 808c2f8:	e041      	b.n	808c37e <_ZN6Modbus5queryE8modbus_t+0x19a>
  au16regs = telegram.au16reg;
 808c2fa:	9b03      	ldr	r3, [sp, #12]
  au8Buffer[ FUNC ]       = telegram.u8fct;
 808c2fc:	72e7      	strb	r7, [r4, #11]
 808c2fe:	3f01      	subs	r7, #1
  au16regs = telegram.au16reg;
 808c300:	64e3      	str	r3, [r4, #76]	; 0x4c
  au8Buffer[ ID_ ]         = telegram.u8id;
 808c302:	f884 800a 	strb.w	r8, [r4, #10]
  au8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 808c306:	f8a4 900c 	strh.w	r9, [r4, #12]
  switch( telegram.u8fct ) {
 808c30a:	2f0f      	cmp	r7, #15
 808c30c:	d80d      	bhi.n	808c32a <_ZN6Modbus5queryE8modbus_t+0x146>
 808c30e:	e8df f007 	tbb	[pc, r7]
 808c312:	0808      	.short	0x0808
 808c314:	42390808 	.word	0x42390808
 808c318:	0c0c0c0c 	.word	0x0c0c0c0c
 808c31c:	0c0c0c0c 	.word	0x0c0c0c0c
 808c320:	5247      	.short	0x5247
      au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 808c322:	81e6      	strh	r6, [r4, #14]
      u8BufferSize = 6;
 808c324:	2306      	movs	r3, #6
 808c326:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
    Log.info("MODBUS> Query: tx buffer created");
 808c32a:	4937      	ldr	r1, [pc, #220]	; (808c408 <_ZN6Modbus5queryE8modbus_t+0x224>)
 808c32c:	4830      	ldr	r0, [pc, #192]	; (808c3f0 <_ZN6Modbus5queryE8modbus_t+0x20c>)
 808c32e:	f7f9 fb31 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
    if(MODBUS_DEBUG_ON)
 808c332:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 808c336:	b153      	cbz	r3, 808c34e <_ZN6Modbus5queryE8modbus_t+0x16a>
      Particle.publish("gx_metrics", "MODBUS> Query: tx buffer created", PRIVATE, WITH_ACK);
 808c338:	4b2e      	ldr	r3, [pc, #184]	; (808c3f4 <_ZN6Modbus5queryE8modbus_t+0x210>)
 808c33a:	4a2f      	ldr	r2, [pc, #188]	; (808c3f8 <_ZN6Modbus5queryE8modbus_t+0x214>)
 808c33c:	a80a      	add	r0, sp, #40	; 0x28
 808c33e:	781b      	ldrb	r3, [r3, #0]
 808c340:	7812      	ldrb	r2, [r2, #0]
 808c342:	4931      	ldr	r1, [pc, #196]	; (808c408 <_ZN6Modbus5queryE8modbus_t+0x224>)
 808c344:	f7ff fb30 	bl	808b9a8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 808c348:	a80b      	add	r0, sp, #44	; 0x2c
 808c34a:	f7fa f92b 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  sendTxBuffer();
 808c34e:	4620      	mov	r0, r4
 808c350:	f7ff fea0 	bl	808c094 <_ZN6Modbus12sendTxBufferEv>
    Log.info("MODBUS> Query: tx buffer sent");
 808c354:	492d      	ldr	r1, [pc, #180]	; (808c40c <_ZN6Modbus5queryE8modbus_t+0x228>)
 808c356:	4826      	ldr	r0, [pc, #152]	; (808c3f0 <_ZN6Modbus5queryE8modbus_t+0x20c>)
 808c358:	f7f9 fb1c 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
    if(MODBUS_DEBUG_ON)
 808c35c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 808c360:	b153      	cbz	r3, 808c378 <_ZN6Modbus5queryE8modbus_t+0x194>
      Particle.publish("gx_metrics", "MODBUS> Query: tx buffer sent", PRIVATE, WITH_ACK);
 808c362:	4b24      	ldr	r3, [pc, #144]	; (808c3f4 <_ZN6Modbus5queryE8modbus_t+0x210>)
 808c364:	4a24      	ldr	r2, [pc, #144]	; (808c3f8 <_ZN6Modbus5queryE8modbus_t+0x214>)
 808c366:	a80a      	add	r0, sp, #40	; 0x28
 808c368:	781b      	ldrb	r3, [r3, #0]
 808c36a:	7812      	ldrb	r2, [r2, #0]
 808c36c:	4927      	ldr	r1, [pc, #156]	; (808c40c <_ZN6Modbus5queryE8modbus_t+0x228>)
 808c36e:	f7ff fb1b 	bl	808b9a8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 808c372:	a80b      	add	r0, sp, #44	; 0x2c
 808c374:	f7fa f916 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  u8state = COM_WAITING;
 808c378:	2301      	movs	r3, #1
  return 0;
 808c37a:	2000      	movs	r0, #0
  u8state = COM_WAITING;
 808c37c:	7223      	strb	r3, [r4, #8]
}
 808c37e:	b00f      	add	sp, #60	; 0x3c
 808c380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      au8Buffer[ NB_HI ]      = ((au16regs[0] > 0) ? 0xff : 0);
 808c384:	881b      	ldrh	r3, [r3, #0]
 808c386:	3b00      	subs	r3, #0
 808c388:	bf18      	it	ne
 808c38a:	2301      	movne	r3, #1
 808c38c:	425b      	negs	r3, r3
 808c38e:	73a3      	strb	r3, [r4, #14]
      au8Buffer[ NB_LO ]      = 0;
 808c390:	2300      	movs	r3, #0
 808c392:	73e3      	strb	r3, [r4, #15]
 808c394:	e7c6      	b.n	808c324 <_ZN6Modbus5queryE8modbus_t+0x140>
      au8Buffer[ NB_HI ]      = highByte(au16regs[0]);
 808c396:	881a      	ldrh	r2, [r3, #0]
 808c398:	0a12      	lsrs	r2, r2, #8
 808c39a:	73a2      	strb	r2, [r4, #14]
      au8Buffer[ NB_LO ]      = lowByte(au16regs[0]);
 808c39c:	881b      	ldrh	r3, [r3, #0]
 808c39e:	e7f8      	b.n	808c392 <_ZN6Modbus5queryE8modbus_t+0x1ae>
      u8bytesno = u8regsno * 2;
 808c3a0:	08eb      	lsrs	r3, r5, #3
 808c3a2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
      if ((telegram.u16CoilsNo % 16) != 0) {
 808c3a6:	072a      	lsls	r2, r5, #28
        u8bytesno++;
 808c3a8:	bf1c      	itt	ne
 808c3aa:	3301      	addne	r3, #1
 808c3ac:	b2db      	uxtbne	r3, r3
      au8Buffer[ NB_LO+1 ]    = u8bytesno;
 808c3ae:	7423      	strb	r3, [r4, #16]
      au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 808c3b0:	81e6      	strh	r6, [r4, #14]
      u8BufferSize = 7;
 808c3b2:	2307      	movs	r3, #7
 808c3b4:	e7b7      	b.n	808c326 <_ZN6Modbus5queryE8modbus_t+0x142>
      u8BufferSize = 7;
 808c3b6:	2207      	movs	r2, #7
      au8Buffer[ NB_LO+1 ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 808c3b8:	006d      	lsls	r5, r5, #1
 808c3ba:	7425      	strb	r5, [r4, #16]
      au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 808c3bc:	81e6      	strh	r6, [r4, #14]
      u8BufferSize = 7;
 808c3be:	f884 204a 	strb.w	r2, [r4, #74]	; 0x4a
      for (uint16_t i=0; i< telegram.u16CoilsNo; i++) {
 808c3c2:	441d      	add	r5, r3
 808c3c4:	42ab      	cmp	r3, r5
 808c3c6:	d0b0      	beq.n	808c32a <_ZN6Modbus5queryE8modbus_t+0x146>
        au8Buffer[ u8BufferSize ] = highByte( au16regs[ i ] );
 808c3c8:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
 808c3cc:	881a      	ldrh	r2, [r3, #0]
 808c3ce:	1860      	adds	r0, r4, r1
 808c3d0:	0a12      	lsrs	r2, r2, #8
 808c3d2:	7282      	strb	r2, [r0, #10]
        u8BufferSize++;
 808c3d4:	1c4a      	adds	r2, r1, #1
 808c3d6:	b2d2      	uxtb	r2, r2
 808c3d8:	f884 204a 	strb.w	r2, [r4, #74]	; 0x4a
        au8Buffer[ u8BufferSize ] = lowByte( au16regs[ i ] );
 808c3dc:	f833 0b02 	ldrh.w	r0, [r3], #2
 808c3e0:	4422      	add	r2, r4
        u8BufferSize++;
 808c3e2:	3102      	adds	r1, #2
        au8Buffer[ u8BufferSize ] = lowByte( au16regs[ i ] );
 808c3e4:	7290      	strb	r0, [r2, #10]
        u8BufferSize++;
 808c3e6:	f884 104a 	strb.w	r1, [r4, #74]	; 0x4a
      for (uint16_t i=0; i< telegram.u16CoilsNo; i++) {
 808c3ea:	e7eb      	b.n	808c3c4 <_ZN6Modbus5queryE8modbus_t+0x1e0>
 808c3ec:	08094dcd 	.word	0x08094dcd
 808c3f0:	200015a4 	.word	0x200015a4
 808c3f4:	20001541 	.word	0x20001541
 808c3f8:	20001540 	.word	0x20001540
 808c3fc:	08094ddb 	.word	0x08094ddb
 808c400:	08094dfb 	.word	0x08094dfb
 808c404:	08094e2b 	.word	0x08094e2b
 808c408:	08094e57 	.word	0x08094e57
 808c40c:	08094e78 	.word	0x08094e78

0808c410 <_GLOBAL__sub_I__Z22__fetch_global_Serial2v>:
        val_(val) {
 808c410:	2201      	movs	r2, #1
 808c412:	4b03      	ldr	r3, [pc, #12]	; (808c420 <_GLOBAL__sub_I__Z22__fetch_global_Serial2v+0x10>)
 808c414:	701a      	strb	r2, [r3, #0]
 808c416:	2208      	movs	r2, #8
 808c418:	4b02      	ldr	r3, [pc, #8]	; (808c424 <_GLOBAL__sub_I__Z22__fetch_global_Serial2v+0x14>)
 808c41a:	701a      	strb	r2, [r3, #0]
};
 808c41c:	4770      	bx	lr
 808c41e:	bf00      	nop
 808c420:	20001540 	.word	0x20001540
 808c424:	20001541 	.word	0x20001541

0808c428 <_ZN8SpiFlashD1Ev>:
SpiFlash::SpiFlash(SPIClass &spi, int cs) : spi(spi), cs(cs) {
	}

SpiFlash::~SpiFlash() {

}
 808c428:	4770      	bx	lr

0808c42a <_ZN8SpiFlash7isValidEv>:

	// Send release from powerdown 0xab
	wakeFromSleep();
}

bool SpiFlash::isValid() {
 808c42a:	b510      	push	{r4, lr}
	uint8_t foundManufacturerId = (jedecIdRead() >> 16) & 0xff;
 808c42c:	6803      	ldr	r3, [r0, #0]
bool SpiFlash::isValid() {
 808c42e:	4604      	mov	r4, r0
	uint8_t foundManufacturerId = (jedecIdRead() >> 16) & 0xff;
 808c430:	691b      	ldr	r3, [r3, #16]
 808c432:	4798      	blx	r3

	return manufacturerId == foundManufacturerId;
 808c434:	7b23      	ldrb	r3, [r4, #12]
 808c436:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
 808c43a:	1a1b      	subs	r3, r3, r0
 808c43c:	4258      	negs	r0, r3
 808c43e:	4158      	adcs	r0, r3
 808c440:	bd10      	pop	{r4, pc}

0808c442 <_ZN8SpiFlashD0Ev>:
SpiFlash::~SpiFlash() {
 808c442:	b510      	push	{r4, lr}
 808c444:	4604      	mov	r4, r0
}
 808c446:	2130      	movs	r1, #48	; 0x30
 808c448:	f004 facd 	bl	80909e6 <_ZdlPvj>
 808c44c:	4620      	mov	r0, r4
 808c44e:	bd10      	pop	{r4, pc}

0808c450 <_ZN8SpiFlashC1ER8SPIClassi>:
SpiFlash::SpiFlash(SPIClass &spi, int cs) : spi(spi), cs(cs) {
 808c450:	b530      	push	{r4, r5, lr}
 808c452:	4c0e      	ldr	r4, [pc, #56]	; (808c48c <_ZN8SpiFlashC1ER8SPIClassi+0x3c>)
	SpiFlashBase() {};
 808c454:	f44f 7580 	mov.w	r5, #256	; 0x100
 808c458:	6004      	str	r4, [r0, #0]
 808c45a:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 808c45e:	e9c0 5401 	strd	r5, r4, [r0, #4]
 808c462:	240a      	movs	r4, #10
 808c464:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 808c468:	f8df c024 	ldr.w	ip, [pc, #36]	; 808c490 <_ZN8SpiFlashC1ER8SPIClassi+0x40>
 808c46c:	e9c0 5405 	strd	r5, r4, [r0, #20]
 808c470:	e9c0 c403 	strd	ip, r4, [r0, #12]
 808c474:	f24c 3550 	movw	r5, #50000	; 0xc350
 808c478:	2403      	movs	r4, #3
 808c47a:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
 808c47e:	2200      	movs	r2, #0
 808c480:	e9c0 5407 	strd	r5, r4, [r0, #28]
 808c484:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
	}
 808c488:	bd30      	pop	{r4, r5, pc}
 808c48a:	bf00      	nop
 808c48c:	08094ea8 	.word	0x08094ea8
 808c490:	031e019d 	.word	0x031e019d

0808c494 <_ZN8SpiFlash16beginTransactionEv>:


void SpiFlash::beginTransaction() {
 808c494:	b5f0      	push	{r4, r5, r6, r7, lr}
	
	__SPISettings settings(spiClockSpeedMHz * MHZ, spiBitOrder, spiDataMode);
 808c496:	4b21      	ldr	r3, [pc, #132]	; (808c51c <_ZN8SpiFlash16beginTransactionEv+0x88>)
 808c498:	7b82      	ldrb	r2, [r0, #14]
void SpiFlash::beginTransaction() {
 808c49a:	4604      	mov	r4, r0
	__SPISettings settings(spiClockSpeedMHz * MHZ, spiBitOrder, spiDataMode);
 808c49c:	4353      	muls	r3, r2
 808c49e:	7b41      	ldrb	r1, [r0, #13]
 808c4a0:	7bc2      	ldrb	r2, [r0, #15]
 808c4a2:	481f      	ldr	r0, [pc, #124]	; (808c520 <_ZN8SpiFlash16beginTransactionEv+0x8c>)
void SpiFlash::beginTransaction() {
 808c4a4:	b085      	sub	sp, #20
 808c4a6:	9000      	str	r0, [sp, #0]
 808c4a8:	2000      	movs	r0, #0
 808c4aa:	f88d 100c 	strb.w	r1, [sp, #12]
 808c4ae:	f88d 0004 	strb.w	r0, [sp, #4]

	spi.beginTransaction(settings);
 808c4b2:	4669      	mov	r1, sp
 808c4b4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 808c4b6:	9302      	str	r3, [sp, #8]
 808c4b8:	f88d 200d 	strb.w	r2, [sp, #13]
 808c4bc:	f003 fac8 	bl	808fa50 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	pinResetFast(cs);
 808c4c0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 808c4c2:	4c18      	ldr	r4, [pc, #96]	; (808c524 <_ZN8SpiFlash16beginTransactionEv+0x90>)
 808c4c4:	4e18      	ldr	r6, [pc, #96]	; (808c528 <_ZN8SpiFlash16beginTransactionEv+0x94>)
 808c4c6:	7823      	ldrb	r3, [r4, #0]
 808c4c8:	f3bf 8f5b 	dmb	ish
 808c4cc:	f013 0f01 	tst.w	r3, #1
 808c4d0:	d109      	bne.n	808c4e6 <_ZN8SpiFlash16beginTransactionEv+0x52>
 808c4d2:	4620      	mov	r0, r4
 808c4d4:	f7f3 fdf4 	bl	80800c0 <__cxa_guard_acquire>
 808c4d8:	b128      	cbz	r0, 808c4e6 <_ZN8SpiFlash16beginTransactionEv+0x52>
 808c4da:	f000 fd5f 	bl	808cf9c <HAL_Pin_Map>
 808c4de:	6030      	str	r0, [r6, #0]
 808c4e0:	4620      	mov	r0, r4
 808c4e2:	f7f3 fdf2 	bl	80800ca <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
}

inline void pinResetFast(pin_t _pin)
{
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
 808c4e6:	231c      	movs	r3, #28
 808c4e8:	b2ad      	uxth	r5, r5
 808c4ea:	435d      	muls	r5, r3
 808c4ec:	6837      	ldr	r7, [r6, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 808c4ee:	7823      	ldrb	r3, [r4, #0]
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
 808c4f0:	442f      	add	r7, r5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 808c4f2:	07db      	lsls	r3, r3, #31
 808c4f4:	f3bf 8f5b 	dmb	ish
 808c4f8:	d409      	bmi.n	808c50e <_ZN8SpiFlash16beginTransactionEv+0x7a>
 808c4fa:	480a      	ldr	r0, [pc, #40]	; (808c524 <_ZN8SpiFlash16beginTransactionEv+0x90>)
 808c4fc:	f7f3 fde0 	bl	80800c0 <__cxa_guard_acquire>
 808c500:	b128      	cbz	r0, 808c50e <_ZN8SpiFlash16beginTransactionEv+0x7a>
 808c502:	f000 fd4b 	bl	808cf9c <HAL_Pin_Map>
 808c506:	6030      	str	r0, [r6, #0]
 808c508:	4806      	ldr	r0, [pc, #24]	; (808c524 <_ZN8SpiFlash16beginTransactionEv+0x90>)
 808c50a:	f7f3 fdde 	bl	80800ca <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
 808c50e:	6833      	ldr	r3, [r6, #0]
 808c510:	88ba      	ldrh	r2, [r7, #4]
 808c512:	595b      	ldr	r3, [r3, r5]
 808c514:	835a      	strh	r2, [r3, #26]

	// There is some code to do this in the STM32F2xx HAL, but I don't think it's necessary to put
	// a really tiny delay before doing the SPI transfer
	// asm("mov r2, r2");
}
 808c516:	b005      	add	sp, #20
 808c518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808c51a:	bf00      	nop
 808c51c:	000f4240 	.word	0x000f4240
 808c520:	0809362c 	.word	0x0809362c
 808c524:	20001558 	.word	0x20001558
 808c528:	2000155c 	.word	0x2000155c

0808c52c <_ZN8SpiFlash14endTransactionEv>:

void SpiFlash::endTransaction() {
 808c52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 808c530:	4c19      	ldr	r4, [pc, #100]	; (808c598 <_ZN8SpiFlash14endTransactionEv+0x6c>)
	pinSetFast(cs);
 808c532:	6a85      	ldr	r5, [r0, #40]	; 0x28
 808c534:	7823      	ldrb	r3, [r4, #0]
void SpiFlash::endTransaction() {
 808c536:	4606      	mov	r6, r0
 808c538:	f013 0f01 	tst.w	r3, #1
 808c53c:	f3bf 8f5b 	dmb	ish
 808c540:	4f16      	ldr	r7, [pc, #88]	; (808c59c <_ZN8SpiFlash14endTransactionEv+0x70>)
 808c542:	d109      	bne.n	808c558 <_ZN8SpiFlash14endTransactionEv+0x2c>
 808c544:	4620      	mov	r0, r4
 808c546:	f7f3 fdbb 	bl	80800c0 <__cxa_guard_acquire>
 808c54a:	b128      	cbz	r0, 808c558 <_ZN8SpiFlash14endTransactionEv+0x2c>
 808c54c:	f000 fd26 	bl	808cf9c <HAL_Pin_Map>
 808c550:	6038      	str	r0, [r7, #0]
 808c552:	4620      	mov	r0, r4
 808c554:	f7f3 fdb9 	bl	80800ca <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 808c558:	231c      	movs	r3, #28
 808c55a:	b2ad      	uxth	r5, r5
 808c55c:	435d      	muls	r5, r3
 808c55e:	683b      	ldr	r3, [r7, #0]
 808c560:	eb03 0805 	add.w	r8, r3, r5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 808c564:	7823      	ldrb	r3, [r4, #0]
 808c566:	f3bf 8f5b 	dmb	ish
 808c56a:	07db      	lsls	r3, r3, #31
 808c56c:	d409      	bmi.n	808c582 <_ZN8SpiFlash14endTransactionEv+0x56>
 808c56e:	480a      	ldr	r0, [pc, #40]	; (808c598 <_ZN8SpiFlash14endTransactionEv+0x6c>)
 808c570:	f7f3 fda6 	bl	80800c0 <__cxa_guard_acquire>
 808c574:	b128      	cbz	r0, 808c582 <_ZN8SpiFlash14endTransactionEv+0x56>
 808c576:	f000 fd11 	bl	808cf9c <HAL_Pin_Map>
 808c57a:	6038      	str	r0, [r7, #0]
 808c57c:	4806      	ldr	r0, [pc, #24]	; (808c598 <_ZN8SpiFlash14endTransactionEv+0x6c>)
 808c57e:	f7f3 fda4 	bl	80800ca <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 808c582:	683b      	ldr	r3, [r7, #0]
 808c584:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 808c588:	595b      	ldr	r3, [r3, r5]
 808c58a:	831a      	strh	r2, [r3, #24]
	spi.endTransaction();
 808c58c:	6a70      	ldr	r0, [r6, #36]	; 0x24
}
 808c58e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	spi.endTransaction();
 808c592:	f003 ba43 	b.w	808fa1c <_ZN8SPIClass14endTransactionEv>
 808c596:	bf00      	nop
 808c598:	20001558 	.word	0x20001558
 808c59c:	2000155c 	.word	0x2000155c

0808c5a0 <_ZN8SpiFlash11jedecIdReadEv>:

uint32_t SpiFlash::jedecIdRead() {
 808c5a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	uint8_t txBuf[4], rxBuf[4];
	txBuf[0] = 0x9f;
 808c5a2:	239f      	movs	r3, #159	; 0x9f
uint32_t SpiFlash::jedecIdRead() {
 808c5a4:	4604      	mov	r4, r0
	txBuf[0] = 0x9f;
 808c5a6:	f88d 3008 	strb.w	r3, [sp, #8]

	beginTransaction();
 808c5aa:	f7ff ff73 	bl	808c494 <_ZN8SpiFlash16beginTransactionEv>
	spi.transfer(txBuf, rxBuf, sizeof(txBuf), NULL);
 808c5ae:	2300      	movs	r3, #0
 808c5b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 808c5b2:	9300      	str	r3, [sp, #0]
 808c5b4:	aa03      	add	r2, sp, #12
 808c5b6:	2304      	movs	r3, #4
 808c5b8:	a902      	add	r1, sp, #8
 808c5ba:	f003 fab5 	bl	808fb28 <_ZN8SPIClass8transferEPvS0_jPFvvE>
	endTransaction();
 808c5be:	4620      	mov	r0, r4
 808c5c0:	f7ff ffb4 	bl	808c52c <_ZN8SpiFlash14endTransactionEv>

	return (rxBuf[1] << 16) | (rxBuf[2] << 8) | (rxBuf[3]);
 808c5c4:	f89d 300e 	ldrb.w	r3, [sp, #14]
 808c5c8:	f89d 000d 	ldrb.w	r0, [sp, #13]
 808c5cc:	021b      	lsls	r3, r3, #8
 808c5ce:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 808c5d2:	f89d 000f 	ldrb.w	r0, [sp, #15]
}
 808c5d6:	4318      	orrs	r0, r3
 808c5d8:	b004      	add	sp, #16
 808c5da:	bd10      	pop	{r4, pc}

0808c5dc <_ZN8SpiFlash10readStatusEv>:

uint8_t SpiFlash::readStatus() {
 808c5dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t txBuf[2], rxBuf[2];
	txBuf[0] = 0x05; // RDSR
 808c5de:	2305      	movs	r3, #5
uint8_t SpiFlash::readStatus() {
 808c5e0:	4604      	mov	r4, r0
	txBuf[0] = 0x05; // RDSR
 808c5e2:	f8ad 3008 	strh.w	r3, [sp, #8]
	txBuf[1] = 0;

	beginTransaction();
 808c5e6:	f7ff ff55 	bl	808c494 <_ZN8SpiFlash16beginTransactionEv>
	spi.transfer(txBuf, rxBuf, sizeof(txBuf), NULL);
 808c5ea:	2300      	movs	r3, #0
 808c5ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
 808c5ee:	9300      	str	r3, [sp, #0]
 808c5f0:	aa03      	add	r2, sp, #12
 808c5f2:	2302      	movs	r3, #2
 808c5f4:	a902      	add	r1, sp, #8
 808c5f6:	f003 fa97 	bl	808fb28 <_ZN8SPIClass8transferEPvS0_jPFvvE>
	endTransaction();
 808c5fa:	4620      	mov	r0, r4
 808c5fc:	f7ff ff96 	bl	808c52c <_ZN8SpiFlash14endTransactionEv>

	return rxBuf[1];
}
 808c600:	f89d 000d 	ldrb.w	r0, [sp, #13]
 808c604:	b004      	add	sp, #16
 808c606:	bd10      	pop	{r4, pc}

0808c608 <_ZN8SpiFlash17isWriteInProgressEv>:

	return rxBuf[1];
}


bool SpiFlash::isWriteInProgress() {
 808c608:	b508      	push	{r3, lr}
	return (readStatus() & STATUS_WIP) != 0;
 808c60a:	f7ff ffe7 	bl	808c5dc <_ZN8SpiFlash10readStatusEv>
}
 808c60e:	f000 0001 	and.w	r0, r0, #1
 808c612:	bd08      	pop	{r3, pc}

0808c614 <_ZN8SpiFlash20waitForWriteCompleteEm>:

void SpiFlash::waitForWriteComplete(unsigned long timeout) {
 808c614:	b570      	push	{r4, r5, r6, lr}
 808c616:	4605      	mov	r5, r0
 808c618:	460c      	mov	r4, r1
 808c61a:	f000 fc8f 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
 808c61e:	4606      	mov	r6, r0
	unsigned long startTime = millis();

	if (timeout == 0) {
 808c620:	b904      	cbnz	r4, 808c624 <_ZN8SpiFlash20waitForWriteCompleteEm+0x10>
		timeout = waitWriteCompletionTimeoutMs;
 808c622:	692c      	ldr	r4, [r5, #16]
	}

	// Wait for up to 500 ms. Most operations should take much less than that.
	while(isWriteInProgress() && millis() - startTime < timeout) {
 808c624:	4628      	mov	r0, r5
 808c626:	f7ff ffef 	bl	808c608 <_ZN8SpiFlash17isWriteInProgressEv>
 808c62a:	b158      	cbz	r0, 808c644 <_ZN8SpiFlash20waitForWriteCompleteEm+0x30>
 808c62c:	f000 fc86 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
 808c630:	1b80      	subs	r0, r0, r6
 808c632:	42a0      	cmp	r0, r4
 808c634:	d206      	bcs.n	808c644 <_ZN8SpiFlash20waitForWriteCompleteEm+0x30>
		// For long timeouts, yield the CPU
		if (timeout > 500) {
 808c636:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 808c63a:	d9f3      	bls.n	808c624 <_ZN8SpiFlash20waitForWriteCompleteEm+0x10>
			delay(1);
 808c63c:	2001      	movs	r0, #1
 808c63e:	f001 f80c 	bl	808d65a <delay>
 808c642:	e7ef      	b.n	808c624 <_ZN8SpiFlash20waitForWriteCompleteEm+0x10>
		}
	}

	// Log.trace("isWriteInProgress=%d time=%u", isWriteInProgress(), millis() - startTime);
}
 808c644:	bd70      	pop	{r4, r5, r6, pc}

0808c646 <_ZN8SpiFlash15setInstWithAddrEhjPh>:
}


void SpiFlash::setInstWithAddr(uint8_t inst, size_t addr, uint8_t *buf) {
	uint8_t *p = buf;
	*p++ = inst;
 808c646:	7019      	strb	r1, [r3, #0]
	if (addr4byte) {
 808c648:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
 808c64c:	b931      	cbnz	r1, 808c65c <_ZN8SpiFlash15setInstWithAddrEhjPh+0x16>
	*p++ = inst;
 808c64e:	1c59      	adds	r1, r3, #1
		*p++ = (uint8_t) (addr >> 24);
	}
	*p++ = (uint8_t) (addr >> 16);
 808c650:	0c13      	lsrs	r3, r2, #16
 808c652:	700b      	strb	r3, [r1, #0]
	*p++ = (uint8_t) (addr >> 8);
 808c654:	0a13      	lsrs	r3, r2, #8
 808c656:	704b      	strb	r3, [r1, #1]
	*p++ = (uint8_t) addr;
 808c658:	708a      	strb	r2, [r1, #2]
}
 808c65a:	4770      	bx	lr
		*p++ = (uint8_t) (addr >> 24);
 808c65c:	0e10      	lsrs	r0, r2, #24
 808c65e:	1c99      	adds	r1, r3, #2
 808c660:	7058      	strb	r0, [r3, #1]
 808c662:	e7f5      	b.n	808c650 <_ZN8SpiFlash15setInstWithAddrEhjPh+0xa>

0808c664 <_ZN8SpiFlash8readDataEjPvj>:
void SpiFlash::readData(size_t addr, void *buf, size_t bufLen) {
 808c664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808c668:	4605      	mov	r5, r0
 808c66a:	460f      	mov	r7, r1
 808c66c:	4690      	mov	r8, r2
 808c66e:	461e      	mov	r6, r3
		spi.transfer(txBuf, NULL, getInstWithAddrSize(), NULL);
 808c670:	f04f 0900 	mov.w	r9, #0
void SpiFlash::readData(size_t addr, void *buf, size_t bufLen) {
 808c674:	b085      	sub	sp, #20
	while(bufLen > 0) {
 808c676:	b36e      	cbz	r6, 808c6d4 <_ZN8SpiFlash8readDataEjPvj+0x70>
		size_t pageOffset = addr % pageSize;
 808c678:	686c      	ldr	r4, [r5, #4]
		setInstWithAddr(0x03, addr, txBuf); // READ
 808c67a:	463a      	mov	r2, r7
		size_t pageOffset = addr % pageSize;
 808c67c:	fbb7 f3f4 	udiv	r3, r7, r4
 808c680:	fb04 7313 	mls	r3, r4, r3, r7
		size_t count = (pageStart + pageSize) - addr;
 808c684:	1ae4      	subs	r4, r4, r3
		if (count > bufLen) {
 808c686:	42b4      	cmp	r4, r6
 808c688:	bf28      	it	cs
 808c68a:	4634      	movcs	r4, r6
		setInstWithAddr(0x03, addr, txBuf); // READ
 808c68c:	2103      	movs	r1, #3
 808c68e:	ab02      	add	r3, sp, #8
 808c690:	4628      	mov	r0, r5
 808c692:	f7ff ffd8 	bl	808c646 <_ZN8SpiFlash15setInstWithAddrEhjPh>
		beginTransaction();
 808c696:	4628      	mov	r0, r5
 808c698:	f7ff fefc 	bl	808c494 <_ZN8SpiFlash16beginTransactionEv>

size_t SpiFlash::getInstWithAddrSize() const {
	return addr4byte ? 5 : 4;	
 808c69c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
		spi.transfer(txBuf, NULL, getInstWithAddrSize(), NULL);
 808c6a0:	2200      	movs	r2, #0
	return addr4byte ? 5 : 4;	
 808c6a2:	2b00      	cmp	r3, #0
		spi.transfer(txBuf, NULL, getInstWithAddrSize(), NULL);
 808c6a4:	bf14      	ite	ne
 808c6a6:	2305      	movne	r3, #5
 808c6a8:	2304      	moveq	r3, #4
 808c6aa:	6a68      	ldr	r0, [r5, #36]	; 0x24
 808c6ac:	a902      	add	r1, sp, #8
 808c6ae:	f8cd 9000 	str.w	r9, [sp]
 808c6b2:	f003 fa39 	bl	808fb28 <_ZN8SPIClass8transferEPvS0_jPFvvE>
		spi.transfer(NULL, curBuf, bufLen, NULL);
 808c6b6:	4633      	mov	r3, r6
 808c6b8:	4642      	mov	r2, r8
 808c6ba:	2100      	movs	r1, #0
 808c6bc:	6a68      	ldr	r0, [r5, #36]	; 0x24
 808c6be:	f8cd 9000 	str.w	r9, [sp]
 808c6c2:	f003 fa31 	bl	808fb28 <_ZN8SPIClass8transferEPvS0_jPFvvE>
		endTransaction();
 808c6c6:	4628      	mov	r0, r5
 808c6c8:	f7ff ff30 	bl	808c52c <_ZN8SpiFlash14endTransactionEv>
		addr += count;
 808c6cc:	4427      	add	r7, r4
		curBuf += count;
 808c6ce:	44a0      	add	r8, r4
		bufLen -= count;
 808c6d0:	1b36      	subs	r6, r6, r4
	while(bufLen > 0) {
 808c6d2:	e7d0      	b.n	808c676 <_ZN8SpiFlash8readDataEjPvj+0x12>
}
 808c6d4:	b005      	add	sp, #20
 808c6d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0808c6da <_ZN8SpiFlash13wakeFromSleepEv>:
	endTransaction();

	delayMicroseconds(1);
}

void SpiFlash::wakeFromSleep() {
 808c6da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	// Send release from powerdown 0xab
	uint8_t txBuf[1];
	txBuf[0] = 0xab;
 808c6dc:	23ab      	movs	r3, #171	; 0xab
void SpiFlash::wakeFromSleep() {
 808c6de:	4604      	mov	r4, r0
	txBuf[0] = 0xab;
 808c6e0:	f88d 300c 	strb.w	r3, [sp, #12]

	beginTransaction();
 808c6e4:	f7ff fed6 	bl	808c494 <_ZN8SpiFlash16beginTransactionEv>
	spi.transfer(txBuf, NULL, sizeof(txBuf), NULL);
 808c6e8:	2200      	movs	r2, #0
 808c6ea:	2301      	movs	r3, #1
 808c6ec:	9200      	str	r2, [sp, #0]
 808c6ee:	a903      	add	r1, sp, #12
 808c6f0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 808c6f2:	f003 fa19 	bl	808fb28 <_ZN8SPIClass8transferEPvS0_jPFvvE>
	endTransaction();
 808c6f6:	4620      	mov	r0, r4
 808c6f8:	f7ff ff18 	bl	808c52c <_ZN8SpiFlash14endTransactionEv>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 808c6fc:	2003      	movs	r0, #3
 808c6fe:	f000 fc15 	bl	808cf2c <HAL_Delay_Microseconds>

	// Need to wait tres (3 microseconds) before issuing the next command
	delayMicroseconds(3);
}
 808c702:	b004      	add	sp, #16
 808c704:	bd10      	pop	{r4, pc}

0808c706 <_ZN8SpiFlash5beginEv>:
void SpiFlash::begin() {
 808c706:	b510      	push	{r4, lr}
 808c708:	4604      	mov	r4, r0
	spi.begin(cs);
 808c70a:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 808c70c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 808c70e:	f003 f96b 	bl	808f9e8 <_ZN8SPIClass5beginEt>
	digitalWrite(cs, HIGH);
 808c712:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 808c714:	2101      	movs	r1, #1
 808c716:	f004 f88e 	bl	8090836 <digitalWrite>
	wakeFromSleep();
 808c71a:	4620      	mov	r0, r4
}
 808c71c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	wakeFromSleep();
 808c720:	f7ff bfdb 	b.w	808c6da <_ZN8SpiFlash13wakeFromSleepEv>

0808c724 <_ZN8SpiFlash11writeEnableEv>:
	// Need to wait tdp (10 microseconds) before issuing the next command, but since we're probably doing
	// this before sleep, it's not necessary
}


void SpiFlash::writeEnable() {
 808c724:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 808c726:	4604      	mov	r4, r0
	uint8_t txBuf[1];

	beginTransaction();
 808c728:	f7ff feb4 	bl	808c494 <_ZN8SpiFlash16beginTransactionEv>
	txBuf[0] = 0x06; // WREN
	spi.transfer(txBuf, NULL, sizeof(txBuf), NULL);
 808c72c:	2200      	movs	r2, #0
	txBuf[0] = 0x06; // WREN
 808c72e:	2306      	movs	r3, #6
	spi.transfer(txBuf, NULL, sizeof(txBuf), NULL);
 808c730:	6a60      	ldr	r0, [r4, #36]	; 0x24
	txBuf[0] = 0x06; // WREN
 808c732:	f88d 300c 	strb.w	r3, [sp, #12]
	spi.transfer(txBuf, NULL, sizeof(txBuf), NULL);
 808c736:	9200      	str	r2, [sp, #0]
 808c738:	2301      	movs	r3, #1
 808c73a:	a903      	add	r1, sp, #12
 808c73c:	f003 f9f4 	bl	808fb28 <_ZN8SPIClass8transferEPvS0_jPFvvE>
	endTransaction();
 808c740:	4620      	mov	r0, r4
 808c742:	f7ff fef3 	bl	808c52c <_ZN8SpiFlash14endTransactionEv>

	// ISSI devices require a 3us delay here, but Winbond devices do not
	if (writeEnableDelayUs > 0) {
 808c746:	6a20      	ldr	r0, [r4, #32]
 808c748:	b108      	cbz	r0, 808c74e <_ZN8SpiFlash11writeEnableEv+0x2a>
 808c74a:	f000 fbef 	bl	808cf2c <HAL_Delay_Microseconds>
		delayMicroseconds(writeEnableDelayUs);
	}
}
 808c74e:	b004      	add	sp, #16
 808c750:	bd10      	pop	{r4, pc}

0808c752 <_ZN8SpiFlash9writeDataEjPKvj>:
void SpiFlash::writeData(size_t addr, const void *buf, size_t bufLen) {
 808c752:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808c756:	460e      	mov	r6, r1
 808c758:	b085      	sub	sp, #20
	waitForWriteComplete();
 808c75a:	2100      	movs	r1, #0
void SpiFlash::writeData(size_t addr, const void *buf, size_t bufLen) {
 808c75c:	4604      	mov	r4, r0
 808c75e:	4690      	mov	r8, r2
 808c760:	461f      	mov	r7, r3
		spi.transfer(txBuf, NULL, getInstWithAddrSize(), NULL);
 808c762:	f04f 0900 	mov.w	r9, #0
	waitForWriteComplete();
 808c766:	f7ff ff55 	bl	808c614 <_ZN8SpiFlash20waitForWriteCompleteEm>
	while(bufLen > 0) {
 808c76a:	b3a7      	cbz	r7, 808c7d6 <_ZN8SpiFlash9writeDataEjPKvj+0x84>
		size_t pageOffset = addr % pageSize;
 808c76c:	6865      	ldr	r5, [r4, #4]
		setInstWithAddr(0x02, addr, txBuf); // PAGE_PROG
 808c76e:	4632      	mov	r2, r6
		size_t pageOffset = addr % pageSize;
 808c770:	fbb6 f3f5 	udiv	r3, r6, r5
 808c774:	fb05 6313 	mls	r3, r5, r3, r6
		size_t count = (pageStart + pageSize) - addr;
 808c778:	1aed      	subs	r5, r5, r3
		if (count > bufLen) {
 808c77a:	42bd      	cmp	r5, r7
 808c77c:	bf28      	it	cs
 808c77e:	463d      	movcs	r5, r7
		setInstWithAddr(0x02, addr, txBuf); // PAGE_PROG
 808c780:	2102      	movs	r1, #2
 808c782:	ab02      	add	r3, sp, #8
 808c784:	4620      	mov	r0, r4
 808c786:	f7ff ff5e 	bl	808c646 <_ZN8SpiFlash15setInstWithAddrEhjPh>
		writeEnable();
 808c78a:	4620      	mov	r0, r4
 808c78c:	f7ff ffca 	bl	808c724 <_ZN8SpiFlash11writeEnableEv>
		beginTransaction();
 808c790:	4620      	mov	r0, r4
 808c792:	f7ff fe7f 	bl	808c494 <_ZN8SpiFlash16beginTransactionEv>
	return addr4byte ? 5 : 4;	
 808c796:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
		spi.transfer(txBuf, NULL, getInstWithAddrSize(), NULL);
 808c79a:	2200      	movs	r2, #0
	return addr4byte ? 5 : 4;	
 808c79c:	2b00      	cmp	r3, #0
		spi.transfer(txBuf, NULL, getInstWithAddrSize(), NULL);
 808c79e:	bf14      	ite	ne
 808c7a0:	2305      	movne	r3, #5
 808c7a2:	2304      	moveq	r3, #4
 808c7a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 808c7a6:	a902      	add	r1, sp, #8
 808c7a8:	f8cd 9000 	str.w	r9, [sp]
 808c7ac:	f003 f9bc 	bl	808fb28 <_ZN8SPIClass8transferEPvS0_jPFvvE>
		spi.transfer(curBuf, NULL, count, NULL);
 808c7b0:	4641      	mov	r1, r8
 808c7b2:	462b      	mov	r3, r5
 808c7b4:	2200      	movs	r2, #0
 808c7b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 808c7b8:	f8cd 9000 	str.w	r9, [sp]
 808c7bc:	f003 f9b4 	bl	808fb28 <_ZN8SPIClass8transferEPvS0_jPFvvE>
		endTransaction();
 808c7c0:	4620      	mov	r0, r4
 808c7c2:	f7ff feb3 	bl	808c52c <_ZN8SpiFlash14endTransactionEv>
		waitForWriteComplete(pageProgramTimeoutMs);
 808c7c6:	4620      	mov	r0, r4
 808c7c8:	69a1      	ldr	r1, [r4, #24]
 808c7ca:	f7ff ff23 	bl	808c614 <_ZN8SpiFlash20waitForWriteCompleteEm>
		addr += count;
 808c7ce:	442e      	add	r6, r5
		curBuf += count;
 808c7d0:	44a8      	add	r8, r5
		bufLen -= count;
 808c7d2:	1b7f      	subs	r7, r7, r5
	while(bufLen > 0) {
 808c7d4:	e7c9      	b.n	808c76a <_ZN8SpiFlash9writeDataEjPKvj+0x18>
}
 808c7d6:	b005      	add	sp, #20
 808c7d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0808c7dc <_ZN8SpiFlash11sectorEraseEj>:
void SpiFlash::sectorErase(size_t addr) {
 808c7dc:	b530      	push	{r4, r5, lr}
 808c7de:	4604      	mov	r4, r0
 808c7e0:	460d      	mov	r5, r1
 808c7e2:	b085      	sub	sp, #20
	waitForWriteComplete();
 808c7e4:	2100      	movs	r1, #0
 808c7e6:	f7ff ff15 	bl	808c614 <_ZN8SpiFlash20waitForWriteCompleteEm>
	setInstWithAddr(0x20, addr, txBuf); // SECTOR_ER
 808c7ea:	462a      	mov	r2, r5
 808c7ec:	ab02      	add	r3, sp, #8
 808c7ee:	2120      	movs	r1, #32
 808c7f0:	4620      	mov	r0, r4
 808c7f2:	f7ff ff28 	bl	808c646 <_ZN8SpiFlash15setInstWithAddrEhjPh>
	writeEnable();
 808c7f6:	4620      	mov	r0, r4
 808c7f8:	f7ff ff94 	bl	808c724 <_ZN8SpiFlash11writeEnableEv>
	beginTransaction();
 808c7fc:	4620      	mov	r0, r4
 808c7fe:	f7ff fe49 	bl	808c494 <_ZN8SpiFlash16beginTransactionEv>
	spi.transfer(txBuf, NULL, getInstWithAddrSize(), NULL);
 808c802:	2200      	movs	r2, #0
	return addr4byte ? 5 : 4;	
 808c804:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
	spi.transfer(txBuf, NULL, getInstWithAddrSize(), NULL);
 808c808:	9200      	str	r2, [sp, #0]
	return addr4byte ? 5 : 4;	
 808c80a:	2b00      	cmp	r3, #0
	spi.transfer(txBuf, NULL, getInstWithAddrSize(), NULL);
 808c80c:	bf14      	ite	ne
 808c80e:	2305      	movne	r3, #5
 808c810:	2304      	moveq	r3, #4
 808c812:	a902      	add	r1, sp, #8
 808c814:	6a60      	ldr	r0, [r4, #36]	; 0x24
 808c816:	f003 f987 	bl	808fb28 <_ZN8SPIClass8transferEPvS0_jPFvvE>
	endTransaction();
 808c81a:	4620      	mov	r0, r4
 808c81c:	f7ff fe86 	bl	808c52c <_ZN8SpiFlash14endTransactionEv>
	waitForWriteComplete(sectorEraseTimeoutMs);
 808c820:	4620      	mov	r0, r4
 808c822:	6961      	ldr	r1, [r4, #20]
 808c824:	f7ff fef6 	bl	808c614 <_ZN8SpiFlash20waitForWriteCompleteEm>
}
 808c828:	b005      	add	sp, #20
 808c82a:	bd30      	pop	{r4, r5, pc}

0808c82c <_ZN8SpiFlash9chipEraseEv>:
void SpiFlash::chipErase() {
 808c82c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 808c82e:	4604      	mov	r4, r0
	waitForWriteComplete();
 808c830:	2100      	movs	r1, #0
 808c832:	f7ff feef 	bl	808c614 <_ZN8SpiFlash20waitForWriteCompleteEm>
	txBuf[0] = 0xC7; // CHIP_ER
 808c836:	23c7      	movs	r3, #199	; 0xc7
	writeEnable();
 808c838:	4620      	mov	r0, r4
	txBuf[0] = 0xC7; // CHIP_ER
 808c83a:	f88d 300c 	strb.w	r3, [sp, #12]
	writeEnable();
 808c83e:	f7ff ff71 	bl	808c724 <_ZN8SpiFlash11writeEnableEv>
	beginTransaction();
 808c842:	4620      	mov	r0, r4
 808c844:	f7ff fe26 	bl	808c494 <_ZN8SpiFlash16beginTransactionEv>
	spi.transfer(txBuf, NULL, sizeof(txBuf), NULL);
 808c848:	2200      	movs	r2, #0
 808c84a:	2301      	movs	r3, #1
 808c84c:	9200      	str	r2, [sp, #0]
 808c84e:	a903      	add	r1, sp, #12
 808c850:	6a60      	ldr	r0, [r4, #36]	; 0x24
 808c852:	f003 f969 	bl	808fb28 <_ZN8SPIClass8transferEPvS0_jPFvvE>
	endTransaction();
 808c856:	4620      	mov	r0, r4
 808c858:	f7ff fe68 	bl	808c52c <_ZN8SpiFlash14endTransactionEv>
	waitForWriteComplete(chipEraseTimeoutMs);
 808c85c:	4620      	mov	r0, r4
 808c85e:	69e1      	ldr	r1, [r4, #28]
 808c860:	f7ff fed8 	bl	808c614 <_ZN8SpiFlash20waitForWriteCompleteEm>
}
 808c864:	b004      	add	sp, #16
 808c866:	bd10      	pop	{r4, pc}

0808c868 <_ZN14SpiffsParticleD1Ev>:

}

SpiffsParticle::~SpiffsParticle() {

}
 808c868:	4770      	bx	lr

0808c86a <_ZN14SpiffsParticleD0Ev>:
SpiffsParticle::~SpiffsParticle() {
 808c86a:	b510      	push	{r4, lr}
 808c86c:	4604      	mov	r4, r0
}
 808c86e:	21cc      	movs	r1, #204	; 0xcc
 808c870:	f004 f8b9 	bl	80909e6 <_ZdlPvj>
 808c874:	4620      	mov	r0, r4
 808c876:	bd10      	pop	{r4, pc}

0808c878 <_ZN14SpiffsParticleC1ER12SpiFlashBase>:
SpiffsParticle::SpiffsParticle(SpiFlashBase &flash) : flash(flash) {
 808c878:	4a11      	ldr	r2, [pc, #68]	; (808c8c0 <_ZN14SpiffsParticleC1ER12SpiFlashBase+0x48>)
 808c87a:	b510      	push	{r4, lr}
 808c87c:	e9c0 2100 	strd	r2, r1, [r0]
 808c880:	2204      	movs	r2, #4
	config.hal_read_f = readCallbackStatic;
 808c882:	4c10      	ldr	r4, [pc, #64]	; (808c8c4 <_ZN14SpiffsParticleC1ER12SpiFlashBase+0x4c>)
SpiffsParticle::SpiffsParticle(SpiFlashBase &flash) : flash(flash) {
 808c884:	e9c0 222a 	strd	r2, r2, [r0, #168]	; 0xa8
	config.hal_read_f = readCallbackStatic;
 808c888:	6084      	str	r4, [r0, #8]
	config.hal_write_f = writeCallbackStatic;
 808c88a:	4c0f      	ldr	r4, [pc, #60]	; (808c8c8 <_ZN14SpiffsParticleC1ER12SpiFlashBase+0x50>)
SpiffsParticle::SpiffsParticle(SpiFlashBase &flash) : flash(flash) {
 808c88c:	2200      	movs	r2, #0
	config.hal_write_f = writeCallbackStatic;
 808c88e:	60c4      	str	r4, [r0, #12]
	config.hal_erase_f = eraseCallbackStatic;
 808c890:	4c0e      	ldr	r4, [pc, #56]	; (808c8cc <_ZN14SpiffsParticleC1ER12SpiFlashBase+0x54>)
SpiffsParticle::SpiffsParticle(SpiFlashBase &flash) : flash(flash) {
 808c892:	e9c0 222c 	strd	r2, r2, [r0, #176]	; 0xb0
	config.hal_erase_f = eraseCallbackStatic;
 808c896:	6104      	str	r4, [r0, #16]
	config.phys_erase_block = flash.getSectorSize();
 808c898:	688c      	ldr	r4, [r1, #8]
	config.log_page_size = flash.getPageSize();
 808c89a:	6849      	ldr	r1, [r1, #4]
SpiffsParticle::SpiffsParticle(SpiFlashBase &flash) : flash(flash) {
 808c89c:	e9c0 222e 	strd	r2, r2, [r0, #184]	; 0xb8
	config.log_page_size = flash.getPageSize();
 808c8a0:	6241      	str	r1, [r0, #36]	; 0x24
	config.phys_size = 1024 * 1024; // Just a guess, override for other chips
 808c8a2:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
SpiffsParticle::SpiffsParticle(SpiFlashBase &flash) : flash(flash) {
 808c8a6:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
	config.phys_addr = 0;
 808c8aa:	e9c0 1205 	strd	r1, r2, [r0, #20]
SpiffsParticle::SpiffsParticle(SpiFlashBase &flash) : flash(flash) {
 808c8ae:	f880 20c4 	strb.w	r2, [r0, #196]	; 0xc4
 808c8b2:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
	config.phys_erase_block = flash.getSectorSize();
 808c8b6:	61c4      	str	r4, [r0, #28]
	config.log_block_size = flash.getSectorSize();
 808c8b8:	6204      	str	r4, [r0, #32]
	fs.user_data = this;
 808c8ba:	f8c0 00a0 	str.w	r0, [r0, #160]	; 0xa0
}
 808c8be:	bd10      	pop	{r4, pc}
 808c8c0:	08094fa0 	.word	0x08094fa0
 808c8c4:	0808ca21 	.word	0x0808ca21
 808c8c8:	0808ca85 	.word	0x0808ca85
 808c8cc:	0808cad9 	.word	0x0808cad9

0808c8d0 <_ZN14SpiffsParticle5mountEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE>:

s32_t SpiffsParticle::mount(spiffs_check_callback callback) {
 808c8d0:	b530      	push	{r4, r5, lr}
	if (workBuffer == 0) {
 808c8d2:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
s32_t SpiffsParticle::mount(spiffs_check_callback callback) {
 808c8d6:	4604      	mov	r4, r0
 808c8d8:	460d      	mov	r5, r1
 808c8da:	b085      	sub	sp, #20
	if (workBuffer == 0) {
 808c8dc:	b39b      	cbz	r3, 808c946 <_ZN14SpiffsParticle5mountEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x76>
		workBuffer = static_cast<u8_t *>(malloc(2 * config.log_page_size));
		if (workBuffer == 0) {
			return SPIFFS_ERR_OUT_OF_MEMORY;
		}
	}
	if (fdBuffer == 0) {
 808c8de:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 808c8e2:	b94b      	cbnz	r3, 808c8f8 <_ZN14SpiffsParticle5mountEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x28>
		fdBufferSize = 32 * maxOpenFiles;
 808c8e4:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 808c8e8:	0140      	lsls	r0, r0, #5
 808c8ea:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		fdBuffer = static_cast<u8_t *>(malloc(fdBufferSize));
 808c8ee:	f000 fe13 	bl	808d518 <malloc>
 808c8f2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (fdBuffer == 0) {
 808c8f6:	b370      	cbz	r0, 808c956 <_ZN14SpiffsParticle5mountEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x86>
			return SPIFFS_ERR_OUT_OF_MEMORY;
		}
	}
	if (cacheBuffer == 0) {
 808c8f8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 808c8fc:	b96b      	cbnz	r3, 808c91a <_ZN14SpiffsParticle5mountEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x4a>
		cacheBufferSize = (config.log_page_size + 32) * cachePages + 40;
 808c8fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 808c900:	f100 0320 	add.w	r3, r0, #32
 808c904:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 808c908:	4358      	muls	r0, r3
 808c90a:	3028      	adds	r0, #40	; 0x28
 808c90c:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		cacheBuffer = static_cast<u8_t *>(malloc(cacheBufferSize));
 808c910:	f000 fe02 	bl	808d518 <malloc>
 808c914:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (cacheBuffer == 0) {
 808c918:	b1e8      	cbz	r0, 808c956 <_ZN14SpiffsParticle5mountEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x86>
			return SPIFFS_ERR_OUT_OF_MEMORY;
		}
	}
	userCheckCallback = callback; // may be null

	return SPIFFS_mount(&fs, &config, workBuffer, fdBuffer, fdBufferSize, cacheBuffer, cacheBufferSize, checkCallbackStatic);
 808c91a:	4b10      	ldr	r3, [pc, #64]	; (808c95c <_ZN14SpiffsParticle5mountEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x8c>)
	userCheckCallback = callback; // may be null
 808c91c:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
	return SPIFFS_mount(&fs, &config, workBuffer, fdBuffer, fdBufferSize, cacheBuffer, cacheBufferSize, checkCallbackStatic);
 808c920:	9303      	str	r3, [sp, #12]
 808c922:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 808c926:	f104 0108 	add.w	r1, r4, #8
 808c92a:	9302      	str	r3, [sp, #8]
 808c92c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 808c930:	f104 0028 	add.w	r0, r4, #40	; 0x28
 808c934:	9301      	str	r3, [sp, #4]
 808c936:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 808c93a:	9300      	str	r3, [sp, #0]
 808c93c:	e9d4 232c 	ldrd	r2, r3, [r4, #176]	; 0xb0
 808c940:	f7f4 fd3c 	bl	80813bc <SPIFFS_mount>
 808c944:	e008      	b.n	808c958 <_ZN14SpiffsParticle5mountEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x88>
		workBuffer = static_cast<u8_t *>(malloc(2 * config.log_page_size));
 808c946:	6a40      	ldr	r0, [r0, #36]	; 0x24
 808c948:	0040      	lsls	r0, r0, #1
 808c94a:	f000 fde5 	bl	808d518 <malloc>
 808c94e:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
		if (workBuffer == 0) {
 808c952:	2800      	cmp	r0, #0
 808c954:	d1c3      	bne.n	808c8de <_ZN14SpiffsParticle5mountEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0xe>
			return SPIFFS_ERR_OUT_OF_MEMORY;
 808c956:	4802      	ldr	r0, [pc, #8]	; (808c960 <_ZN14SpiffsParticle5mountEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x90>)
}
 808c958:	b005      	add	sp, #20
 808c95a:	bd30      	pop	{r4, r5, pc}
 808c95c:	0808cb09 	.word	0x0808cb09
 808c960:	ffffd8b4 	.word	0xffffd8b4

0808c964 <_ZN14SpiffsParticle25mountAndFormatIfNecessaryEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE>:

	free(cacheBuffer);
	cacheBuffer = 0;
}

s32_t SpiffsParticle::mountAndFormatIfNecessary(spiffs_check_callback callback) {
 808c964:	b538      	push	{r3, r4, r5, lr}
	s32_t res = mount(NULL);
 808c966:	2100      	movs	r1, #0
s32_t SpiffsParticle::mountAndFormatIfNecessary(spiffs_check_callback callback) {
 808c968:	4605      	mov	r5, r0
	s32_t res = mount(NULL);
 808c96a:	f7ff ffb1 	bl	808c8d0 <_ZN14SpiffsParticle5mountEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE>
 808c96e:	4604      	mov	r4, r0
	log.info("mount res=%ld", res);
 808c970:	4602      	mov	r2, r0
 808c972:	490f      	ldr	r1, [pc, #60]	; (808c9b0 <_ZN14SpiffsParticle25mountAndFormatIfNecessaryEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x4c>)
 808c974:	480f      	ldr	r0, [pc, #60]	; (808c9b4 <_ZN14SpiffsParticle25mountAndFormatIfNecessaryEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x50>)
 808c976:	f7f9 f80d 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>

	if (res == SPIFFS_ERR_NOT_A_FS) {
 808c97a:	4b0f      	ldr	r3, [pc, #60]	; (808c9b8 <_ZN14SpiffsParticle25mountAndFormatIfNecessaryEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x54>)
 808c97c:	429c      	cmp	r4, r3
 808c97e:	d114      	bne.n	808c9aa <_ZN14SpiffsParticle25mountAndFormatIfNecessaryEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x46>
	inline s32_t format() { return SPIFFS_format(&fs); };
 808c980:	f105 0028 	add.w	r0, r5, #40	; 0x28
 808c984:	f7f4 fce8 	bl	8081358 <SPIFFS_format>
 808c988:	4604      	mov	r4, r0
		res = format();
		log.info("format res=%ld", res);
 808c98a:	4602      	mov	r2, r0
 808c98c:	490b      	ldr	r1, [pc, #44]	; (808c9bc <_ZN14SpiffsParticle25mountAndFormatIfNecessaryEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x58>)
 808c98e:	4809      	ldr	r0, [pc, #36]	; (808c9b4 <_ZN14SpiffsParticle25mountAndFormatIfNecessaryEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x50>)
 808c990:	f7f9 f800 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>

		if (res == SPIFFS_OK) {
 808c994:	b94c      	cbnz	r4, 808c9aa <_ZN14SpiffsParticle25mountAndFormatIfNecessaryEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x46>
			res = mount(NULL);
 808c996:	4621      	mov	r1, r4
 808c998:	4628      	mov	r0, r5
 808c99a:	f7ff ff99 	bl	808c8d0 <_ZN14SpiffsParticle5mountEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE>
			log.info("mount after format res=%ld", res);
 808c99e:	4908      	ldr	r1, [pc, #32]	; (808c9c0 <_ZN14SpiffsParticle25mountAndFormatIfNecessaryEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x5c>)
			res = mount(NULL);
 808c9a0:	4604      	mov	r4, r0
			log.info("mount after format res=%ld", res);
 808c9a2:	4602      	mov	r2, r0
 808c9a4:	4803      	ldr	r0, [pc, #12]	; (808c9b4 <_ZN14SpiffsParticle25mountAndFormatIfNecessaryEPFvP8spiffs_t17spiffs_check_type19spiffs_check_reportmmE+0x50>)
 808c9a6:	f7f8 fff5 	bl	8085994 <_ZNK5spark6Logger4infoEPKcz>
		}
	}
	return res;
}
 808c9aa:	4620      	mov	r0, r4
 808c9ac:	bd38      	pop	{r3, r4, r5, pc}
 808c9ae:	bf00      	nop
 808c9b0:	08094ecc 	.word	0x08094ecc
 808c9b4:	20001564 	.word	0x20001564
 808c9b8:	ffffd8d7 	.word	0xffffd8d7
 808c9bc:	08094ee6 	.word	0x08094ee6
 808c9c0:	08094eda 	.word	0x08094eda

0808c9c4 <_ZN14SpiffsParticle12readCallbackEmmPh>:

	return SPIFFS_OK;
}


s32_t SpiffsParticle::readCallback(u32_t addr, u32_t size, u8_t *dst) {
 808c9c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808c9c8:	461d      	mov	r5, r3
 808c9ca:	4607      	mov	r7, r0
	flash.readData(addr, dst, size);
 808c9cc:	6840      	ldr	r0, [r0, #4]
s32_t SpiffsParticle::readCallback(u32_t addr, u32_t size, u8_t *dst) {
 808c9ce:	4614      	mov	r4, r2
	flash.readData(addr, dst, size);
 808c9d0:	6803      	ldr	r3, [r0, #0]
s32_t SpiffsParticle::readCallback(u32_t addr, u32_t size, u8_t *dst) {
 808c9d2:	460e      	mov	r6, r1
	flash.readData(addr, dst, size);
 808c9d4:	f8d3 8014 	ldr.w	r8, [r3, #20]
 808c9d8:	4613      	mov	r3, r2
 808c9da:	462a      	mov	r2, r5
 808c9dc:	47c0      	blx	r8

	if (lowLevelDebug) {
 808c9de:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 808c9e2:	b15b      	cbz	r3, 808c9fc <_ZN14SpiffsParticle12readCallbackEmmPh+0x38>
		if (size == 2) {
 808c9e4:	2c02      	cmp	r4, #2
 808c9e6:	d10d      	bne.n	808ca04 <_ZN14SpiffsParticle12readCallbackEmmPh+0x40>
			log.trace("read addr=0x%lx size=%lu data=%02x%02x", addr, size, dst[0], dst[1]);
 808c9e8:	786b      	ldrb	r3, [r5, #1]
 808c9ea:	4632      	mov	r2, r6
 808c9ec:	9301      	str	r3, [sp, #4]
 808c9ee:	782b      	ldrb	r3, [r5, #0]
 808c9f0:	4908      	ldr	r1, [pc, #32]	; (808ca14 <_ZN14SpiffsParticle12readCallbackEmmPh+0x50>)
 808c9f2:	9300      	str	r3, [sp, #0]
 808c9f4:	4808      	ldr	r0, [pc, #32]	; (808ca18 <_ZN14SpiffsParticle12readCallbackEmmPh+0x54>)
 808c9f6:	4623      	mov	r3, r4
 808c9f8:	f7fa fd30 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>
			log.trace("read addr=0x%lx size=%lu", addr, size);
		}
	}

	return SPIFFS_OK;
}
 808c9fc:	2000      	movs	r0, #0
 808c9fe:	b002      	add	sp, #8
 808ca00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			log.trace("read addr=0x%lx size=%lu", addr, size);
 808ca04:	4623      	mov	r3, r4
 808ca06:	4632      	mov	r2, r6
 808ca08:	4904      	ldr	r1, [pc, #16]	; (808ca1c <_ZN14SpiffsParticle12readCallbackEmmPh+0x58>)
 808ca0a:	4803      	ldr	r0, [pc, #12]	; (808ca18 <_ZN14SpiffsParticle12readCallbackEmmPh+0x54>)
 808ca0c:	f7fa fd26 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>
 808ca10:	e7f4      	b.n	808c9fc <_ZN14SpiffsParticle12readCallbackEmmPh+0x38>
 808ca12:	bf00      	nop
 808ca14:	08094ef5 	.word	0x08094ef5
 808ca18:	20001564 	.word	0x20001564
 808ca1c:	08094f1c 	.word	0x08094f1c

0808ca20 <_ZN14SpiffsParticle18readCallbackStaticEP8spiffs_tmmPh>:


// [static]
s32_t SpiffsParticle::readCallbackStatic(struct spiffs_t *fs, u32_t addr, u32_t size, u8_t *dst) {
	SpiffsParticle *This = static_cast<SpiffsParticle *>(fs->user_data);
	return This->readCallback(addr, size, dst);
 808ca20:	6f80      	ldr	r0, [r0, #120]	; 0x78
 808ca22:	f7ff bfcf 	b.w	808c9c4 <_ZN14SpiffsParticle12readCallbackEmmPh>
	...

0808ca28 <_ZN14SpiffsParticle13writeCallbackEmmPh>:
s32_t SpiffsParticle::writeCallback(u32_t addr, u32_t size, u8_t *src) {
 808ca28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808ca2c:	461d      	mov	r5, r3
 808ca2e:	4607      	mov	r7, r0
	flash.writeData(addr, src, size);
 808ca30:	6840      	ldr	r0, [r0, #4]
s32_t SpiffsParticle::writeCallback(u32_t addr, u32_t size, u8_t *src) {
 808ca32:	4614      	mov	r4, r2
	flash.writeData(addr, src, size);
 808ca34:	6803      	ldr	r3, [r0, #0]
s32_t SpiffsParticle::writeCallback(u32_t addr, u32_t size, u8_t *src) {
 808ca36:	460e      	mov	r6, r1
	flash.writeData(addr, src, size);
 808ca38:	f8d3 8018 	ldr.w	r8, [r3, #24]
 808ca3c:	4613      	mov	r3, r2
 808ca3e:	462a      	mov	r2, r5
 808ca40:	47c0      	blx	r8
	if (lowLevelDebug) {
 808ca42:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 808ca46:	b15b      	cbz	r3, 808ca60 <_ZN14SpiffsParticle13writeCallbackEmmPh+0x38>
		if (size == 2) {
 808ca48:	2c02      	cmp	r4, #2
 808ca4a:	d10d      	bne.n	808ca68 <_ZN14SpiffsParticle13writeCallbackEmmPh+0x40>
			log.trace("write addr=0x%lx size=%lu data=%02x%02x", addr, size, src[0], src[1]);
 808ca4c:	786b      	ldrb	r3, [r5, #1]
 808ca4e:	4632      	mov	r2, r6
 808ca50:	9301      	str	r3, [sp, #4]
 808ca52:	782b      	ldrb	r3, [r5, #0]
 808ca54:	4908      	ldr	r1, [pc, #32]	; (808ca78 <_ZN14SpiffsParticle13writeCallbackEmmPh+0x50>)
 808ca56:	9300      	str	r3, [sp, #0]
 808ca58:	4808      	ldr	r0, [pc, #32]	; (808ca7c <_ZN14SpiffsParticle13writeCallbackEmmPh+0x54>)
 808ca5a:	4623      	mov	r3, r4
 808ca5c:	f7fa fcfe 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>
}
 808ca60:	2000      	movs	r0, #0
 808ca62:	b002      	add	sp, #8
 808ca64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			log.trace("write addr=0x%lx size=%lu", addr, size);
 808ca68:	4623      	mov	r3, r4
 808ca6a:	4632      	mov	r2, r6
 808ca6c:	4904      	ldr	r1, [pc, #16]	; (808ca80 <_ZN14SpiffsParticle13writeCallbackEmmPh+0x58>)
 808ca6e:	4803      	ldr	r0, [pc, #12]	; (808ca7c <_ZN14SpiffsParticle13writeCallbackEmmPh+0x54>)
 808ca70:	f7fa fcf4 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>
 808ca74:	e7f4      	b.n	808ca60 <_ZN14SpiffsParticle13writeCallbackEmmPh+0x38>
 808ca76:	bf00      	nop
 808ca78:	08094f35 	.word	0x08094f35
 808ca7c:	20001564 	.word	0x20001564
 808ca80:	08094f5d 	.word	0x08094f5d

0808ca84 <_ZN14SpiffsParticle19writeCallbackStaticEP8spiffs_tmmPh>:
}

// [static]
s32_t SpiffsParticle::writeCallbackStatic(struct spiffs_t *fs, u32_t addr, u32_t size, u8_t *src) {
	SpiffsParticle *This = static_cast<SpiffsParticle *>(fs->user_data);
	return This->writeCallback(addr, size, src);
 808ca84:	6f80      	ldr	r0, [r0, #120]	; 0x78
 808ca86:	f7ff bfcf 	b.w	808ca28 <_ZN14SpiffsParticle13writeCallbackEmmPh>
	...

0808ca8c <_ZN14SpiffsParticle13eraseCallbackEmm>:
s32_t SpiffsParticle::eraseCallback(u32_t addr, u32_t size) {
 808ca8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808ca90:	4606      	mov	r6, r0
 808ca92:	460c      	mov	r4, r1
 808ca94:	4615      	mov	r5, r2
	size_t sectorSize = flash.getSectorSize();
 808ca96:	6843      	ldr	r3, [r0, #4]
			log.trace("erase sector addr=0x%lx size=%lu", addr, sectorSize);
 808ca98:	f8df 8034 	ldr.w	r8, [pc, #52]	; 808cad0 <_ZN14SpiffsParticle13eraseCallbackEmm+0x44>
	size_t sectorSize = flash.getSectorSize();
 808ca9c:	689f      	ldr	r7, [r3, #8]
			log.trace("erase sector addr=0x%lx size=%lu", addr, sectorSize);
 808ca9e:	f8df 9034 	ldr.w	r9, [pc, #52]	; 808cad4 <_ZN14SpiffsParticle13eraseCallbackEmm+0x48>
	while(size >= sectorSize) {
 808caa2:	42bd      	cmp	r5, r7
 808caa4:	d310      	bcc.n	808cac8 <_ZN14SpiffsParticle13eraseCallbackEmm+0x3c>
		if (lowLevelDebug) {
 808caa6:	f896 30c4 	ldrb.w	r3, [r6, #196]	; 0xc4
 808caaa:	b12b      	cbz	r3, 808cab8 <_ZN14SpiffsParticle13eraseCallbackEmm+0x2c>
			log.trace("erase sector addr=0x%lx size=%lu", addr, sectorSize);
 808caac:	463b      	mov	r3, r7
 808caae:	4622      	mov	r2, r4
 808cab0:	4641      	mov	r1, r8
 808cab2:	4648      	mov	r0, r9
 808cab4:	f7fa fcd2 	bl	808745c <_ZNK5spark6Logger5traceEPKcz>
		flash.sectorErase(addr);
 808cab8:	6870      	ldr	r0, [r6, #4]
 808caba:	4621      	mov	r1, r4
 808cabc:	6803      	ldr	r3, [r0, #0]
		addr += sectorSize;
 808cabe:	443c      	add	r4, r7
		flash.sectorErase(addr);
 808cac0:	69db      	ldr	r3, [r3, #28]
 808cac2:	4798      	blx	r3
		size -= sectorSize;
 808cac4:	1bed      	subs	r5, r5, r7
	while(size >= sectorSize) {
 808cac6:	e7ec      	b.n	808caa2 <_ZN14SpiffsParticle13eraseCallbackEmm+0x16>
}
 808cac8:	2000      	movs	r0, #0
 808caca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808cace:	bf00      	nop
 808cad0:	08094f77 	.word	0x08094f77
 808cad4:	20001564 	.word	0x20001564

0808cad8 <_ZN14SpiffsParticle19eraseCallbackStaticEP8spiffs_tmm>:
}

// [static]
s32_t SpiffsParticle::eraseCallbackStatic(struct spiffs_t *fs, u32_t addr, u32_t size) {
	SpiffsParticle *This = static_cast<SpiffsParticle *>(fs->user_data);
	return This->eraseCallback(addr, size);
 808cad8:	6f80      	ldr	r0, [r0, #120]	; 0x78
 808cada:	f7ff bfd7 	b.w	808ca8c <_ZN14SpiffsParticle13eraseCallbackEmm>
	...

0808cae0 <_ZN14SpiffsParticle13checkCallbackE17spiffs_check_type19spiffs_check_reportmm>:
void SpiffsParticle::checkCallback(spiffs_check_type type, spiffs_check_report report, u32_t arg1, u32_t arg2) {
 808cae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (userCheckCallback) {
 808cae2:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
void SpiffsParticle::checkCallback(spiffs_check_type type, spiffs_check_report report, u32_t arg1, u32_t arg2) {
 808cae6:	9d06      	ldr	r5, [sp, #24]
	if (userCheckCallback) {
 808cae8:	b114      	cbz	r4, 808caf0 <_ZN14SpiffsParticle13checkCallbackE17spiffs_check_type19spiffs_check_reportmm+0x10>
		userCheckCallback(&fs, type, report, arg1, arg2);
 808caea:	9500      	str	r5, [sp, #0]
 808caec:	3028      	adds	r0, #40	; 0x28
 808caee:	47a0      	blx	r4
		return HAL_Timer_Get_Milli_Seconds();
 808caf0:	f000 fa24 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
 808caf4:	4b03      	ldr	r3, [pc, #12]	; (808cb04 <_ZN14SpiffsParticle13checkCallbackE17spiffs_check_type19spiffs_check_reportmm+0x24>)
 808caf6:	6018      	str	r0, [r3, #0]
}
 808caf8:	b003      	add	sp, #12
 808cafa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    		spark_process();
 808cafe:	f000 bc73 	b.w	808d3e8 <spark_process>
 808cb02:	bf00      	nop
 808cb04:	20001a58 	.word	0x20001a58

0808cb08 <_ZN14SpiffsParticle19checkCallbackStaticEP8spiffs_t17spiffs_check_type19spiffs_check_reportmm>:
}

// [static]
void SpiffsParticle::checkCallbackStatic(struct spiffs_t *fs, spiffs_check_type type, spiffs_check_report report, u32_t arg1, u32_t arg2) {
	SpiffsParticle *This = static_cast<SpiffsParticle *>(fs->user_data);
	This->checkCallback(type, report, arg1, arg2);
 808cb08:	6f80      	ldr	r0, [r0, #120]	; 0x78
 808cb0a:	f7ff bfe9 	b.w	808cae0 <_ZN14SpiffsParticle13checkCallbackE17spiffs_check_type19spiffs_check_reportmm>
	...

0808cb10 <spiffsParticleInfoLog>:
}


extern "C"
void spiffsParticleInfoLog(const char *fmt, ...) {
 808cb10:	b40f      	push	{r0, r1, r2, r3}
 808cb12:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return log_enabled(level, name_, nullptr);
 808cb14:	4b0a      	ldr	r3, [pc, #40]	; (808cb40 <spiffsParticleInfoLog+0x30>)
 808cb16:	2200      	movs	r2, #0
 808cb18:	201e      	movs	r0, #30
 808cb1a:	6819      	ldr	r1, [r3, #0]
 808cb1c:	f000 fbd6 	bl	808d2cc <log_enabled>
	if (log.isInfoEnabled()) {
 808cb20:	b140      	cbz	r0, 808cb34 <spiffsParticleInfoLog+0x24>
		va_list args;
		va_start(args, fmt);
 808cb22:	ab07      	add	r3, sp, #28
 808cb24:	9303      	str	r3, [sp, #12]
		log_printf_v(LOG_LEVEL_INFO, "app.spiffs", nullptr, fmt, args);
 808cb26:	9300      	str	r3, [sp, #0]
 808cb28:	2200      	movs	r2, #0
 808cb2a:	201e      	movs	r0, #30
 808cb2c:	9b06      	ldr	r3, [sp, #24]
 808cb2e:	4905      	ldr	r1, [pc, #20]	; (808cb44 <spiffsParticleInfoLog+0x34>)
 808cb30:	f000 fbc4 	bl	808d2bc <log_printf_v>
		va_end(args);
	}
}
 808cb34:	b005      	add	sp, #20
 808cb36:	f85d eb04 	ldr.w	lr, [sp], #4
 808cb3a:	b004      	add	sp, #16
 808cb3c:	4770      	bx	lr
 808cb3e:	bf00      	nop
 808cb40:	20001564 	.word	0x20001564
 808cb44:	08094197 	.word	0x08094197

0808cb48 <spiffsParticleTraceLog>:

extern "C"
void spiffsParticleTraceLog(const char *fmt, ...) {
 808cb48:	b40f      	push	{r0, r1, r2, r3}
 808cb4a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 808cb4c:	4b0a      	ldr	r3, [pc, #40]	; (808cb78 <spiffsParticleTraceLog+0x30>)
 808cb4e:	2200      	movs	r2, #0
 808cb50:	2001      	movs	r0, #1
 808cb52:	6819      	ldr	r1, [r3, #0]
 808cb54:	f000 fbba 	bl	808d2cc <log_enabled>
	if (log.isTraceEnabled()) {
 808cb58:	b140      	cbz	r0, 808cb6c <spiffsParticleTraceLog+0x24>
		va_list args;
		va_start(args, fmt);
 808cb5a:	ab07      	add	r3, sp, #28
 808cb5c:	9303      	str	r3, [sp, #12]
		log_printf_v(LOG_LEVEL_TRACE, "app.spiffs", nullptr, fmt, args);
 808cb5e:	9300      	str	r3, [sp, #0]
 808cb60:	2200      	movs	r2, #0
 808cb62:	2001      	movs	r0, #1
 808cb64:	9b06      	ldr	r3, [sp, #24]
 808cb66:	4905      	ldr	r1, [pc, #20]	; (808cb7c <spiffsParticleTraceLog+0x34>)
 808cb68:	f000 fba8 	bl	808d2bc <log_printf_v>
		va_end(args);
	}
}
 808cb6c:	b005      	add	sp, #20
 808cb6e:	f85d eb04 	ldr.w	lr, [sp], #4
 808cb72:	b004      	add	sp, #16
 808cb74:	4770      	bx	lr
 808cb76:	bf00      	nop
 808cb78:	20001564 	.word	0x20001564
 808cb7c:	08094197 	.word	0x08094197

0808cb80 <spiffsParticleLock>:

extern "C"
void spiffsParticleLock() {
	os_mutex_lock(_spiffsMutex);
 808cb80:	4b01      	ldr	r3, [pc, #4]	; (808cb88 <spiffsParticleLock+0x8>)
 808cb82:	6818      	ldr	r0, [r3, #0]
 808cb84:	f000 b992 	b.w	808ceac <os_mutex_lock>
 808cb88:	20001560 	.word	0x20001560

0808cb8c <spiffsParticleUnlock>:
}

extern "C"
void spiffsParticleUnlock() {
	os_mutex_unlock(_spiffsMutex);
 808cb8c:	4b01      	ldr	r3, [pc, #4]	; (808cb94 <spiffsParticleUnlock+0x8>)
 808cb8e:	6818      	ldr	r0, [r3, #0]
 808cb90:	f000 b994 	b.w	808cebc <os_mutex_unlock>
 808cb94:	20001560 	.word	0x20001560

0808cb98 <_GLOBAL__sub_I__ZN14SpiffsParticleC2ER12SpiFlashBase>:
	s32_t res = SPIFFS_fstat(fs, fh, &stat);
	if (res == SPIFFS_OK) {
		res = (s32_t) stat.size;
	}
	return res;
}
 808cb98:	b507      	push	{r0, r1, r2, lr}
        name_(name) {
 808cb9a:	4b06      	ldr	r3, [pc, #24]	; (808cbb4 <_GLOBAL__sub_I__ZN14SpiffsParticleC2ER12SpiFlashBase+0x1c>)
 808cb9c:	4a06      	ldr	r2, [pc, #24]	; (808cbb8 <_GLOBAL__sub_I__ZN14SpiffsParticleC2ER12SpiFlashBase+0x20>)
	os_mutex_create(&m);
 808cb9e:	a801      	add	r0, sp, #4
 808cba0:	601a      	str	r2, [r3, #0]
 808cba2:	f000 f97b 	bl	808ce9c <os_mutex_create>
static os_mutex_t _spiffsMutex = []() {
 808cba6:	9a01      	ldr	r2, [sp, #4]
 808cba8:	4b04      	ldr	r3, [pc, #16]	; (808cbbc <_GLOBAL__sub_I__ZN14SpiffsParticleC2ER12SpiFlashBase+0x24>)
 808cbaa:	601a      	str	r2, [r3, #0]
}
 808cbac:	b003      	add	sp, #12
 808cbae:	f85d fb04 	ldr.w	pc, [sp], #4
 808cbb2:	bf00      	nop
 808cbb4:	20001564 	.word	0x20001564
 808cbb8:	08094197 	.word	0x08094197
 808cbbc:	20001560 	.word	0x20001560

0808cbc0 <_ZN7TCA95355beginEv>:
#define REG_OUTPUT(pin_)            ((pin_) < 8) ? TCA9535_REG_OUTPUT_PORT1 : TCA9535_REG_OUTPUT_PORT2
#define REG_POLARITY(pin_)          ((pin_) < 8) ? TCA9535_REG_POLARITY_PORT1 : TCA9535_REG_POLARITY_PORT2
#define REG_CONFIG(pin_)            ((pin_) < 8) ? TCA9535_REG_CONFIG_PORT1 : TCA9535_REG_CONFIG_PORT2


bool TCA9535::begin(void) {
 808cbc0:	b508      	push	{r3, lr}
    // Attempt a read of the chip to verify comms

    if (!Wire.isEnabled()) {
 808cbc2:	f003 fea3 	bl	809090c <_Z19__fetch_global_Wirev>
 808cbc6:	f001 fa8f 	bl	808e0e8 <_ZN7TwoWire9isEnabledEv>
 808cbca:	b918      	cbnz	r0, 808cbd4 <_ZN7TCA95355beginEv+0x14>
      Wire.begin();
 808cbcc:	f003 fe9e 	bl	809090c <_Z19__fetch_global_Wirev>
 808cbd0:	f001 fa32 	bl	808e038 <_ZN7TwoWire5beginEv>
    }

    Wire.beginTransmission(I2C_ADDRESS);
 808cbd4:	f003 fe9a 	bl	809090c <_Z19__fetch_global_Wirev>
 808cbd8:	2120      	movs	r1, #32
 808cbda:	f001 fa63 	bl	808e0a4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(TCA9535_REG_INPUT_PORT1);
 808cbde:	f003 fe95 	bl	809090c <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 808cbe2:	6803      	ldr	r3, [r0, #0]
 808cbe4:	2100      	movs	r1, #0
 808cbe6:	689b      	ldr	r3, [r3, #8]
 808cbe8:	4798      	blx	r3
    byte result = Wire.endTransmission(true);
 808cbea:	f003 fe8f 	bl	809090c <_Z19__fetch_global_Wirev>
 808cbee:	2101      	movs	r1, #1
 808cbf0:	f001 fa73 	bl	808e0da <_ZN7TwoWire15endTransmissionEh>
    if (0 != result) {
        // Failed to talk to TCA chip
        return false;
    }
    return true;
}
 808cbf4:	fab0 f080 	clz	r0, r0
 808cbf8:	0940      	lsrs	r0, r0, #5
 808cbfa:	bd08      	pop	{r3, pc}

0808cbfc <_ZN7TCA95354readEhPh>:

bool TCA9535::read(byte reg, byte * value) {
 808cbfc:	b538      	push	{r3, r4, r5, lr}
 808cbfe:	4614      	mov	r4, r2
 808cc00:	460d      	mov	r5, r1
    Wire.beginTransmission(I2C_ADDRESS);
 808cc02:	f003 fe83 	bl	809090c <_Z19__fetch_global_Wirev>
 808cc06:	2120      	movs	r1, #32
 808cc08:	f001 fa4c 	bl	808e0a4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(reg);
 808cc0c:	f003 fe7e 	bl	809090c <_Z19__fetch_global_Wirev>
 808cc10:	6803      	ldr	r3, [r0, #0]
 808cc12:	4629      	mov	r1, r5
 808cc14:	689b      	ldr	r3, [r3, #8]
 808cc16:	4798      	blx	r3
    if (0 != Wire.endTransmission())
 808cc18:	f003 fe78 	bl	809090c <_Z19__fetch_global_Wirev>
 808cc1c:	f001 fa61 	bl	808e0e2 <_ZN7TwoWire15endTransmissionEv>
 808cc20:	b968      	cbnz	r0, 808cc3e <_ZN7TCA95354readEhPh+0x42>
        return false;

    Wire.requestFrom(I2C_ADDRESS, 1);
 808cc22:	f003 fe73 	bl	809090c <_Z19__fetch_global_Wirev>
 808cc26:	2201      	movs	r2, #1
 808cc28:	2120      	movs	r1, #32
 808cc2a:	f001 fa34 	bl	808e096 <_ZN7TwoWire11requestFromEhj>
    *value = Wire.read();
 808cc2e:	f003 fe6d 	bl	809090c <_Z19__fetch_global_Wirev>
 808cc32:	6803      	ldr	r3, [r0, #0]
 808cc34:	695b      	ldr	r3, [r3, #20]
 808cc36:	4798      	blx	r3
 808cc38:	7020      	strb	r0, [r4, #0]
 808cc3a:	2001      	movs	r0, #1
    return true;
}
 808cc3c:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 808cc3e:	2000      	movs	r0, #0
 808cc40:	e7fc      	b.n	808cc3c <_ZN7TCA95354readEhPh+0x40>

0808cc42 <_ZN7TCA95355writeEhh>:

bool TCA9535::write(byte reg, byte value) {
 808cc42:	b538      	push	{r3, r4, r5, lr}
 808cc44:	4614      	mov	r4, r2
 808cc46:	460d      	mov	r5, r1
    Wire.beginTransmission(I2C_ADDRESS);
 808cc48:	f003 fe60 	bl	809090c <_Z19__fetch_global_Wirev>
 808cc4c:	2120      	movs	r1, #32
 808cc4e:	f001 fa29 	bl	808e0a4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(reg);
 808cc52:	f003 fe5b 	bl	809090c <_Z19__fetch_global_Wirev>
 808cc56:	6803      	ldr	r3, [r0, #0]
 808cc58:	4629      	mov	r1, r5
 808cc5a:	689b      	ldr	r3, [r3, #8]
 808cc5c:	4798      	blx	r3
    Wire.write(value);
 808cc5e:	f003 fe55 	bl	809090c <_Z19__fetch_global_Wirev>
 808cc62:	6803      	ldr	r3, [r0, #0]
 808cc64:	4621      	mov	r1, r4
 808cc66:	689b      	ldr	r3, [r3, #8]
 808cc68:	4798      	blx	r3
    if (0 != Wire.endTransmission())
 808cc6a:	f003 fe4f 	bl	809090c <_Z19__fetch_global_Wirev>
 808cc6e:	f001 fa38 	bl	808e0e2 <_ZN7TwoWire15endTransmissionEv>
        return false;
    return true;
}
 808cc72:	fab0 f080 	clz	r0, r0
 808cc76:	0940      	lsrs	r0, r0, #5
 808cc78:	bd38      	pop	{r3, r4, r5, pc}

0808cc7a <_ZN7TCA953515readModifyWriteEhhh>:

bool TCA9535::readModifyWrite(byte reg, byte dataMask, byte pinMask) {
 808cc7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808cc7c:	4614      	mov	r4, r2
    byte value;

    if (false == this->read(reg, &value))
 808cc7e:	f10d 0207 	add.w	r2, sp, #7
bool TCA9535::readModifyWrite(byte reg, byte dataMask, byte pinMask) {
 808cc82:	4605      	mov	r5, r0
 808cc84:	460e      	mov	r6, r1
 808cc86:	461f      	mov	r7, r3
    if (false == this->read(reg, &value))
 808cc88:	f7ff ffb8 	bl	808cbfc <_ZN7TCA95354readEhPh>
 808cc8c:	b150      	cbz	r0, 808cca4 <_ZN7TCA953515readModifyWriteEhhh+0x2a>
        return false;

    value &= ~pinMask;  //clear bit
 808cc8e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    value |= dataMask;

    if (false == this->write(reg, value))
 808cc92:	4631      	mov	r1, r6
    value &= ~pinMask;  //clear bit
 808cc94:	ea22 0207 	bic.w	r2, r2, r7
    value |= dataMask;
 808cc98:	4322      	orrs	r2, r4
    if (false == this->write(reg, value))
 808cc9a:	4628      	mov	r0, r5
    value |= dataMask;
 808cc9c:	f88d 2007 	strb.w	r2, [sp, #7]
    if (false == this->write(reg, value))
 808cca0:	f7ff ffcf 	bl	808cc42 <_ZN7TCA95355writeEhh>
        return false;

    return true;
}
 808cca4:	b003      	add	sp, #12
 808cca6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808cca8 <_ZN7TCA95357pinModeEt7PinMode>:

bool TCA9535::pinMode(uint16_t pin, PinMode setMode) {
    bool dir = false;
    byte reg, mask, data;

    if (pin > TCA9535_MAX_PIN) {
 808cca8:	290f      	cmp	r1, #15
 808ccaa:	d815      	bhi.n	808ccd8 <_ZN7TCA95357pinModeEt7PinMode+0x30>
        // ASSERT
        return false;
    }

    if (INPUT == setMode) {
 808ccac:	fab2 f282 	clz	r2, r2
        dir = true;
    }

    reg = REG_CONFIG(pin);
 808ccb0:	2907      	cmp	r1, #7
 808ccb2:	f04f 0301 	mov.w	r3, #1
    if (INPUT == setMode) {
 808ccb6:	ea4f 1252 	mov.w	r2, r2, lsr #5
    reg = REG_CONFIG(pin);
 808ccba:	d907      	bls.n	808cccc <_ZN7TCA95357pinModeEt7PinMode+0x24>
    mask = BITMASK_PIN(pin);
 808ccbc:	3908      	subs	r1, #8
 808ccbe:	408b      	lsls	r3, r1
    data = BITMASK_DATA(pin, dir);
 808ccc0:	408a      	lsls	r2, r1
    reg = REG_CONFIG(pin);
 808ccc2:	2107      	movs	r1, #7
    mask = BITMASK_PIN(pin);
 808ccc4:	b2db      	uxtb	r3, r3
    data = BITMASK_DATA(pin, dir);
 808ccc6:	b2d2      	uxtb	r2, r2

    return this->readModifyWrite(reg, data, mask);
 808ccc8:	f7ff bfd7 	b.w	808cc7a <_ZN7TCA953515readModifyWriteEhhh>
    mask = BITMASK_PIN(pin);
 808cccc:	408b      	lsls	r3, r1
    data = BITMASK_DATA(pin, dir);
 808ccce:	408a      	lsls	r2, r1
    mask = BITMASK_PIN(pin);
 808ccd0:	b2db      	uxtb	r3, r3
    reg = REG_CONFIG(pin);
 808ccd2:	2106      	movs	r1, #6
    data = BITMASK_DATA(pin, dir);
 808ccd4:	b2d2      	uxtb	r2, r2
 808ccd6:	e7f7      	b.n	808ccc8 <_ZN7TCA95357pinModeEt7PinMode+0x20>
}
 808ccd8:	2000      	movs	r0, #0
 808ccda:	4770      	bx	lr

0808ccdc <_ZN7TCA953512digitalWriteEtb>:

bool TCA9535::digitalWrite(uint16_t pin, bool value) {
    byte reg, mask, data;

    if (pin > TCA9535_MAX_PIN) {
 808ccdc:	290f      	cmp	r1, #15
 808ccde:	d811      	bhi.n	808cd04 <_ZN7TCA953512digitalWriteEtb+0x28>
        // ASSERT
        return false;
    }

    reg = REG_OUTPUT(pin);
 808cce0:	2907      	cmp	r1, #7
 808cce2:	f04f 0301 	mov.w	r3, #1
 808cce6:	d907      	bls.n	808ccf8 <_ZN7TCA953512digitalWriteEtb+0x1c>
    mask = BITMASK_PIN(pin);
 808cce8:	3908      	subs	r1, #8
 808ccea:	408b      	lsls	r3, r1
    data = BITMASK_DATA(pin, value);
 808ccec:	408a      	lsls	r2, r1
    reg = REG_OUTPUT(pin);
 808ccee:	2103      	movs	r1, #3
    mask = BITMASK_PIN(pin);
 808ccf0:	b2db      	uxtb	r3, r3
    data = BITMASK_DATA(pin, value);
 808ccf2:	b2d2      	uxtb	r2, r2

    return this->readModifyWrite(reg, data, mask);
 808ccf4:	f7ff bfc1 	b.w	808cc7a <_ZN7TCA953515readModifyWriteEhhh>
    mask = BITMASK_PIN(pin);
 808ccf8:	408b      	lsls	r3, r1
    data = BITMASK_DATA(pin, value);
 808ccfa:	408a      	lsls	r2, r1
    mask = BITMASK_PIN(pin);
 808ccfc:	b2db      	uxtb	r3, r3
    reg = REG_OUTPUT(pin);
 808ccfe:	2102      	movs	r1, #2
    data = BITMASK_DATA(pin, value);
 808cd00:	b2d2      	uxtb	r2, r2
 808cd02:	e7f7      	b.n	808ccf4 <_ZN7TCA953512digitalWriteEtb+0x18>
}
 808cd04:	2000      	movs	r0, #0
 808cd06:	4770      	bx	lr

0808cd08 <_ZN7TCA953511digitalReadEtPb>:

bool TCA9535::digitalRead(uint16_t pin, bool * value) {
    byte reg, mask, regValue;

    if (pin > TCA9535_MAX_PIN) {
 808cd08:	290f      	cmp	r1, #15
bool TCA9535::digitalRead(uint16_t pin, bool * value) {
 808cd0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808cd0c:	460b      	mov	r3, r1
 808cd0e:	4615      	mov	r5, r2
    if (pin > TCA9535_MAX_PIN) {
 808cd10:	d815      	bhi.n	808cd3e <_ZN7TCA953511digitalReadEtPb+0x36>
        // ASSERT
        return false;
    }

    reg = REG_INPUT(pin);
 808cd12:	2401      	movs	r4, #1
 808cd14:	2907      	cmp	r1, #7
    mask = BITMASK_PIN(pin);
 808cd16:	bf86      	itte	hi
 808cd18:	3b08      	subhi	r3, #8
    reg = REG_INPUT(pin);
 808cd1a:	2101      	movhi	r1, #1
 808cd1c:	2100      	movls	r1, #0
    mask = BITMASK_PIN(pin);
 808cd1e:	409c      	lsls	r4, r3

    if (false == this->read(reg, &regValue))
 808cd20:	f10d 0207 	add.w	r2, sp, #7
    mask = BITMASK_PIN(pin);
 808cd24:	b2e4      	uxtb	r4, r4
    if (false == this->read(reg, &regValue))
 808cd26:	f7ff ff69 	bl	808cbfc <_ZN7TCA95354readEhPh>
 808cd2a:	b130      	cbz	r0, 808cd3a <_ZN7TCA953511digitalReadEtPb+0x32>
        return false;

    if (mask & regValue) {
 808cd2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 808cd30:	401c      	ands	r4, r3
        *value = true;
 808cd32:	bf16      	itet	ne
 808cd34:	2301      	movne	r3, #1
    }
    else {
        *value = false;
 808cd36:	702c      	strbeq	r4, [r5, #0]
        *value = true;
 808cd38:	702b      	strbne	r3, [r5, #0]
    }
    return true;
}
 808cd3a:	b003      	add	sp, #12
 808cd3c:	bd30      	pop	{r4, r5, pc}
        return false;
 808cd3e:	2000      	movs	r0, #0
 808cd40:	e7fb      	b.n	808cd3a <_ZN7TCA953511digitalReadEtPb+0x32>

0808cd42 <_Z19calculateCRC16ErrorPKvj>:
uint16_t calculateCRC16Error(const void* data, size_t length)
{
    const uint16_t polynomial = CRC16_POLYNML;
    uint16_t crc_value = 0;

    for (size_t i = 0; i < length; ++i)
 808cd42:	4603      	mov	r3, r0
{
 808cd44:	b510      	push	{r4, lr}
 808cd46:	4401      	add	r1, r0
        crc_value ^= ((const uint8_t*)data)[i] << SHIFT_8_STP;
        for (uint8_t j = 0; j < SHIFT_8_STP; ++j)
        {
            if (crc_value & CRC16_CHECKER)
            {
                crc_value = (crc_value << SHIFT_1_STP) ^ polynomial;
 808cd48:	f248 0405 	movw	r4, #32773	; 0x8005
    uint16_t crc_value = 0;
 808cd4c:	2000      	movs	r0, #0
    for (size_t i = 0; i < length; ++i)
 808cd4e:	4299      	cmp	r1, r3
 808cd50:	d011      	beq.n	808cd76 <_Z19calculateCRC16ErrorPKvj+0x34>
        crc_value ^= ((const uint8_t*)data)[i] << SHIFT_8_STP;
 808cd52:	f813 2b01 	ldrb.w	r2, [r3], #1
 808cd56:	ea80 2002 	eor.w	r0, r0, r2, lsl #8
 808cd5a:	2208      	movs	r2, #8
            if (crc_value & CRC16_CHECKER)
 808cd5c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 808cd60:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 808cd64:	ea4f 0040 	mov.w	r0, r0, lsl #1
                crc_value = (crc_value << SHIFT_1_STP) ^ polynomial;
 808cd68:	bf18      	it	ne
 808cd6a:	4060      	eorne	r0, r4
        for (uint8_t j = 0; j < SHIFT_8_STP; ++j)
 808cd6c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
            }
            else
            {
                crc_value <<= SHIFT_1_STP;
 808cd70:	b280      	uxth	r0, r0
        for (uint8_t j = 0; j < SHIFT_8_STP; ++j)
 808cd72:	d1f3      	bne.n	808cd5c <_Z19calculateCRC16ErrorPKvj+0x1a>
 808cd74:	e7eb      	b.n	808cd4e <_Z19calculateCRC16ErrorPKvj+0xc>
            }
        }
    }

    return crc_value;
}
 808cd76:	bd10      	pop	{r4, pc}

0808cd78 <_Z22validateConfigurationsv>:

bool validateConfigurations()
{
    // Read the existing configurations and the crc value from the EEPROM
    uint16_t saved_crc_value = UINT16_MAX;
 808cd78:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 808cd7c:	b513      	push	{r0, r1, r4, lr}
 808cd7e:	4c12      	ldr	r4, [pc, #72]	; (808cdc8 <_Z22validateConfigurationsv+0x50>)
    uint16_t saved_crc_value = UINT16_MAX;
 808cd80:	f8ad 3006 	strh.w	r3, [sp, #6]
    EEPROM.get(EEPROM_ADDR_CRC_VALUE, saved_crc_value);
 808cd84:	f003 fd88 	bl	8090898 <_Z21__fetch_global_EEPROMv>
 808cd88:	f10d 0106 	add.w	r1, sp, #6
 808cd8c:	2202      	movs	r2, #2
 808cd8e:	f44f 7002 	mov.w	r0, #520	; 0x208
 808cd92:	f000 f8e3 	bl	808cf5c <HAL_EEPROM_Get>
    EEPROM.get(EEPROM_CONFIG_STARTADDR, mainGXConfig);
 808cd96:	f003 fd7f 	bl	8090898 <_Z21__fetch_global_EEPROMv>
 808cd9a:	2286      	movs	r2, #134	; 0x86
 808cd9c:	4621      	mov	r1, r4
 808cd9e:	f240 200a 	movw	r0, #522	; 0x20a
 808cda2:	f000 f8db 	bl	808cf5c <HAL_EEPROM_Get>

    // Compute crc value from existing configurations
    uint16_t computed_crc_value = calculateCRC16Error(&mainGXConfig, sizeof(mainGXConfig));
 808cda6:	2186      	movs	r1, #134	; 0x86
 808cda8:	4620      	mov	r0, r4
 808cdaa:	f7ff ffca 	bl	808cd42 <_Z19calculateCRC16ErrorPKvj>

    // Compare the crc values and update the configurations error flag
    config_error_flag = (computed_crc_value == saved_crc_value) ? false : true;
 808cdae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 808cdb2:	4283      	cmp	r3, r0
 808cdb4:	bf13      	iteet	ne
 808cdb6:	2201      	movne	r2, #1
 808cdb8:	2200      	moveq	r2, #0

    return (!config_error_flag);
}
 808cdba:	2001      	moveq	r0, #1
 808cdbc:	2000      	movne	r0, #0
    config_error_flag = (computed_crc_value == saved_crc_value) ? false : true;
 808cdbe:	4b03      	ldr	r3, [pc, #12]	; (808cdcc <_Z22validateConfigurationsv+0x54>)
 808cdc0:	701a      	strb	r2, [r3, #0]
}
 808cdc2:	b002      	add	sp, #8
 808cdc4:	bd10      	pop	{r4, pc}
 808cdc6:	bf00      	nop
 808cdc8:	20001268 	.word	0x20001268
 808cdcc:	20001194 	.word	0x20001194

0808cdd0 <_Z19storeConfigurationsv>:

void storeConfigurations()
{
 808cdd0:	b513      	push	{r0, r1, r4, lr}
    // Compute the updated crc value for the configurations
    uint16_t computed_crc_value = calculateCRC16Error(&mainGXConfig, sizeof(mainGXConfig));
 808cdd2:	4c0d      	ldr	r4, [pc, #52]	; (808ce08 <_Z19storeConfigurationsv+0x38>)
 808cdd4:	2186      	movs	r1, #134	; 0x86
 808cdd6:	4620      	mov	r0, r4
 808cdd8:	f7ff ffb3 	bl	808cd42 <_Z19calculateCRC16ErrorPKvj>
 808cddc:	f8ad 0006 	strh.w	r0, [sp, #6]

    // Write updated crc value and configurations to EEPROM
    EEPROM.put(EEPROM_ADDR_CRC_VALUE, computed_crc_value);
 808cde0:	f003 fd5a 	bl	8090898 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 808cde4:	f10d 0106 	add.w	r1, sp, #6
 808cde8:	2202      	movs	r2, #2
 808cdea:	f44f 7002 	mov.w	r0, #520	; 0x208
 808cdee:	f000 f8bd 	bl	808cf6c <HAL_EEPROM_Put>
    EEPROM.put(EEPROM_CONFIG_STARTADDR, mainGXConfig);
 808cdf2:	f003 fd51 	bl	8090898 <_Z21__fetch_global_EEPROMv>
 808cdf6:	2286      	movs	r2, #134	; 0x86
 808cdf8:	4621      	mov	r1, r4
 808cdfa:	f240 200a 	movw	r0, #522	; 0x20a
 808cdfe:	f000 f8b5 	bl	808cf6c <HAL_EEPROM_Put>
 808ce02:	b002      	add	sp, #8
 808ce04:	bd10      	pop	{r4, pc}
 808ce06:	bf00      	nop
 808ce08:	20001268 	.word	0x20001268

0808ce0c <cellular_credentials_set>:
DYNALIB_FN(5, hal_cellular, cellular_pdp_deactivate, cellular_result_t(void*))
DYNALIB_FN(6, hal_cellular, cellular_gprs_attach, cellular_result_t(CellularCredentials*, void*))
DYNALIB_FN(7, hal_cellular, cellular_gprs_detach, cellular_result_t(void*))
DYNALIB_FN(8, hal_cellular, cellular_fetch_ipconfig, cellular_result_t(CellularConfig*, void*))
DYNALIB_FN(9, hal_cellular, cellular_device_info, cellular_result_t(CellularDevice*, void*))
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
 808ce0c:	b508      	push	{r3, lr}
 808ce0e:	4b02      	ldr	r3, [pc, #8]	; (808ce18 <cellular_credentials_set+0xc>)
 808ce10:	681b      	ldr	r3, [r3, #0]
 808ce12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808ce14:	9301      	str	r3, [sp, #4]
 808ce16:	bd08      	pop	{r3, pc}
 808ce18:	08060020 	.word	0x08060020

0808ce1c <inet_gethostbyname>:
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 808ce1c:	b508      	push	{r3, lr}
 808ce1e:	4b02      	ldr	r3, [pc, #8]	; (808ce28 <inet_gethostbyname+0xc>)
 808ce20:	681b      	ldr	r3, [r3, #0]
 808ce22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808ce24:	9301      	str	r3, [sp, #4]
 808ce26:	bd08      	pop	{r3, pc}
 808ce28:	08060020 	.word	0x08060020

0808ce2c <cellular_command>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 808ce2c:	b508      	push	{r3, lr}
 808ce2e:	4b02      	ldr	r3, [pc, #8]	; (808ce38 <cellular_command+0xc>)
 808ce30:	681b      	ldr	r3, [r3, #0]
 808ce32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808ce34:	9301      	str	r3, [sp, #4]
 808ce36:	bd08      	pop	{r3, pc}
 808ce38:	08060020 	.word	0x08060020

0808ce3c <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 808ce3c:	b508      	push	{r3, lr}
 808ce3e:	4b02      	ldr	r3, [pc, #8]	; (808ce48 <os_thread_yield+0xc>)
 808ce40:	681b      	ldr	r3, [r3, #0]
 808ce42:	68db      	ldr	r3, [r3, #12]
 808ce44:	9301      	str	r3, [sp, #4]
 808ce46:	bd08      	pop	{r3, pc}
 808ce48:	080401d0 	.word	0x080401d0

0808ce4c <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
 808ce4c:	b508      	push	{r3, lr}
 808ce4e:	4b02      	ldr	r3, [pc, #8]	; (808ce58 <os_thread_scheduling+0xc>)
 808ce50:	681b      	ldr	r3, [r3, #0]
 808ce52:	69db      	ldr	r3, [r3, #28]
 808ce54:	9301      	str	r3, [sp, #4]
 808ce56:	bd08      	pop	{r3, pc}
 808ce58:	080401d0 	.word	0x080401d0

0808ce5c <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
 808ce5c:	b508      	push	{r3, lr}
 808ce5e:	4b02      	ldr	r3, [pc, #8]	; (808ce68 <os_timer_create+0xc>)
 808ce60:	681b      	ldr	r3, [r3, #0]
 808ce62:	6a1b      	ldr	r3, [r3, #32]
 808ce64:	9301      	str	r3, [sp, #4]
 808ce66:	bd08      	pop	{r3, pc}
 808ce68:	080401d0 	.word	0x080401d0

0808ce6c <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
 808ce6c:	b508      	push	{r3, lr}
 808ce6e:	4b02      	ldr	r3, [pc, #8]	; (808ce78 <os_timer_destroy+0xc>)
 808ce70:	681b      	ldr	r3, [r3, #0]
 808ce72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808ce74:	9301      	str	r3, [sp, #4]
 808ce76:	bd08      	pop	{r3, pc}
 808ce78:	080401d0 	.word	0x080401d0

0808ce7c <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
 808ce7c:	b508      	push	{r3, lr}
 808ce7e:	4b02      	ldr	r3, [pc, #8]	; (808ce88 <os_timer_get_id+0xc>)
 808ce80:	681b      	ldr	r3, [r3, #0]
 808ce82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808ce84:	9301      	str	r3, [sp, #4]
 808ce86:	bd08      	pop	{r3, pc}
 808ce88:	080401d0 	.word	0x080401d0

0808ce8c <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
 808ce8c:	b508      	push	{r3, lr}
 808ce8e:	4b02      	ldr	r3, [pc, #8]	; (808ce98 <os_timer_change+0xc>)
 808ce90:	681b      	ldr	r3, [r3, #0]
 808ce92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808ce94:	9301      	str	r3, [sp, #4]
 808ce96:	bd08      	pop	{r3, pc}
 808ce98:	080401d0 	.word	0x080401d0

0808ce9c <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 808ce9c:	b508      	push	{r3, lr}
 808ce9e:	4b02      	ldr	r3, [pc, #8]	; (808cea8 <os_mutex_create+0xc>)
 808cea0:	681b      	ldr	r3, [r3, #0]
 808cea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808cea4:	9301      	str	r3, [sp, #4]
 808cea6:	bd08      	pop	{r3, pc}
 808cea8:	080401d0 	.word	0x080401d0

0808ceac <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 808ceac:	b508      	push	{r3, lr}
 808ceae:	4b02      	ldr	r3, [pc, #8]	; (808ceb8 <os_mutex_lock+0xc>)
 808ceb0:	681b      	ldr	r3, [r3, #0]
 808ceb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808ceb4:	9301      	str	r3, [sp, #4]
 808ceb6:	bd08      	pop	{r3, pc}
 808ceb8:	080401d0 	.word	0x080401d0

0808cebc <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 808cebc:	b508      	push	{r3, lr}
 808cebe:	4b02      	ldr	r3, [pc, #8]	; (808cec8 <os_mutex_unlock+0xc>)
 808cec0:	681b      	ldr	r3, [r3, #0]
 808cec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808cec4:	9301      	str	r3, [sp, #4]
 808cec6:	bd08      	pop	{r3, pc}
 808cec8:	080401d0 	.word	0x080401d0

0808cecc <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 808cecc:	b508      	push	{r3, lr}
 808cece:	4b02      	ldr	r3, [pc, #8]	; (808ced8 <os_mutex_recursive_create+0xc>)
 808ced0:	681b      	ldr	r3, [r3, #0]
 808ced2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808ced4:	9301      	str	r3, [sp, #4]
 808ced6:	bd08      	pop	{r3, pc}
 808ced8:	080401d0 	.word	0x080401d0

0808cedc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 808cedc:	b508      	push	{r3, lr}
 808cede:	4b02      	ldr	r3, [pc, #8]	; (808cee8 <os_mutex_recursive_destroy+0xc>)
 808cee0:	681b      	ldr	r3, [r3, #0]
 808cee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808cee4:	9301      	str	r3, [sp, #4]
 808cee6:	bd08      	pop	{r3, pc}
 808cee8:	080401d0 	.word	0x080401d0

0808ceec <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 808ceec:	b508      	push	{r3, lr}
 808ceee:	4b02      	ldr	r3, [pc, #8]	; (808cef8 <os_mutex_recursive_lock+0xc>)
 808cef0:	681b      	ldr	r3, [r3, #0]
 808cef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808cef4:	9301      	str	r3, [sp, #4]
 808cef6:	bd08      	pop	{r3, pc}
 808cef8:	080401d0 	.word	0x080401d0

0808cefc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 808cefc:	b508      	push	{r3, lr}
 808cefe:	4b02      	ldr	r3, [pc, #8]	; (808cf08 <os_mutex_recursive_unlock+0xc>)
 808cf00:	681b      	ldr	r3, [r3, #0]
 808cf02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808cf04:	9301      	str	r3, [sp, #4]
 808cf06:	bd08      	pop	{r3, pc}
 808cf08:	080401d0 	.word	0x080401d0

0808cf0c <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
 808cf0c:	b508      	push	{r3, lr}
 808cf0e:	4b02      	ldr	r3, [pc, #8]	; (808cf18 <os_timer_set_id+0xc>)
 808cf10:	681b      	ldr	r3, [r3, #0]
 808cf12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808cf14:	9301      	str	r3, [sp, #4]
 808cf16:	bd08      	pop	{r3, pc}
 808cf18:	080401d0 	.word	0x080401d0

0808cf1c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 808cf1c:	b508      	push	{r3, lr}
 808cf1e:	4b02      	ldr	r3, [pc, #8]	; (808cf28 <HAL_RNG_GetRandomNumber+0xc>)
 808cf20:	681b      	ldr	r3, [r3, #0]
 808cf22:	685b      	ldr	r3, [r3, #4]
 808cf24:	9301      	str	r3, [sp, #4]
 808cf26:	bd08      	pop	{r3, pc}
 808cf28:	0804019c 	.word	0x0804019c

0808cf2c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 808cf2c:	b508      	push	{r3, lr}
 808cf2e:	4b02      	ldr	r3, [pc, #8]	; (808cf38 <HAL_Delay_Microseconds+0xc>)
 808cf30:	681b      	ldr	r3, [r3, #0]
 808cf32:	68db      	ldr	r3, [r3, #12]
 808cf34:	9301      	str	r3, [sp, #4]
 808cf36:	bd08      	pop	{r3, pc}
 808cf38:	0804019c 	.word	0x0804019c

0808cf3c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 808cf3c:	b508      	push	{r3, lr}
 808cf3e:	4b02      	ldr	r3, [pc, #8]	; (808cf48 <HAL_Timer_Get_Milli_Seconds+0xc>)
 808cf40:	681b      	ldr	r3, [r3, #0]
 808cf42:	695b      	ldr	r3, [r3, #20]
 808cf44:	9301      	str	r3, [sp, #4]
 808cf46:	bd08      	pop	{r3, pc}
 808cf48:	0804019c 	.word	0x0804019c

0808cf4c <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 808cf4c:	b508      	push	{r3, lr}
 808cf4e:	4b02      	ldr	r3, [pc, #8]	; (808cf58 <HAL_EEPROM_Init+0xc>)
 808cf50:	681b      	ldr	r3, [r3, #0]
 808cf52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808cf54:	9301      	str	r3, [sp, #4]
 808cf56:	bd08      	pop	{r3, pc}
 808cf58:	0804019c 	.word	0x0804019c

0808cf5c <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 808cf5c:	b508      	push	{r3, lr}
 808cf5e:	4b02      	ldr	r3, [pc, #8]	; (808cf68 <HAL_EEPROM_Get+0xc>)
 808cf60:	681b      	ldr	r3, [r3, #0]
 808cf62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808cf64:	9301      	str	r3, [sp, #4]
 808cf66:	bd08      	pop	{r3, pc}
 808cf68:	0804019c 	.word	0x0804019c

0808cf6c <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 808cf6c:	b508      	push	{r3, lr}
 808cf6e:	4b02      	ldr	r3, [pc, #8]	; (808cf78 <HAL_EEPROM_Put+0xc>)
 808cf70:	681b      	ldr	r3, [r3, #0]
 808cf72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808cf74:	9301      	str	r3, [sp, #4]
 808cf76:	bd08      	pop	{r3, pc}
 808cf78:	0804019c 	.word	0x0804019c

0808cf7c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 808cf7c:	b508      	push	{r3, lr}
 808cf7e:	4b02      	ldr	r3, [pc, #8]	; (808cf88 <hal_rtc_time_is_valid+0xc>)
 808cf80:	681b      	ldr	r3, [r3, #0]
 808cf82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808cf84:	9301      	str	r3, [sp, #4]
 808cf86:	bd08      	pop	{r3, pc}
 808cf88:	0804019c 	.word	0x0804019c

0808cf8c <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 808cf8c:	b508      	push	{r3, lr}
 808cf8e:	4b02      	ldr	r3, [pc, #8]	; (808cf98 <hal_rtc_get_time+0xc>)
 808cf90:	681b      	ldr	r3, [r3, #0]
 808cf92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 808cf94:	9301      	str	r3, [sp, #4]
 808cf96:	bd08      	pop	{r3, pc}
 808cf98:	0804019c 	.word	0x0804019c

0808cf9c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 808cf9c:	b508      	push	{r3, lr}
 808cf9e:	4b02      	ldr	r3, [pc, #8]	; (808cfa8 <HAL_Pin_Map+0xc>)
 808cfa0:	681b      	ldr	r3, [r3, #0]
 808cfa2:	681b      	ldr	r3, [r3, #0]
 808cfa4:	9301      	str	r3, [sp, #4]
 808cfa6:	bd08      	pop	{r3, pc}
 808cfa8:	080401b0 	.word	0x080401b0

0808cfac <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 808cfac:	b508      	push	{r3, lr}
 808cfae:	4b02      	ldr	r3, [pc, #8]	; (808cfb8 <HAL_Validate_Pin_Function+0xc>)
 808cfb0:	681b      	ldr	r3, [r3, #0]
 808cfb2:	685b      	ldr	r3, [r3, #4]
 808cfb4:	9301      	str	r3, [sp, #4]
 808cfb6:	bd08      	pop	{r3, pc}
 808cfb8:	080401b0 	.word	0x080401b0

0808cfbc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 808cfbc:	b508      	push	{r3, lr}
 808cfbe:	4b02      	ldr	r3, [pc, #8]	; (808cfc8 <HAL_Pin_Mode+0xc>)
 808cfc0:	681b      	ldr	r3, [r3, #0]
 808cfc2:	689b      	ldr	r3, [r3, #8]
 808cfc4:	9301      	str	r3, [sp, #4]
 808cfc6:	bd08      	pop	{r3, pc}
 808cfc8:	080401b0 	.word	0x080401b0

0808cfcc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 808cfcc:	b508      	push	{r3, lr}
 808cfce:	4b02      	ldr	r3, [pc, #8]	; (808cfd8 <HAL_Get_Pin_Mode+0xc>)
 808cfd0:	681b      	ldr	r3, [r3, #0]
 808cfd2:	68db      	ldr	r3, [r3, #12]
 808cfd4:	9301      	str	r3, [sp, #4]
 808cfd6:	bd08      	pop	{r3, pc}
 808cfd8:	080401b0 	.word	0x080401b0

0808cfdc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 808cfdc:	b508      	push	{r3, lr}
 808cfde:	4b02      	ldr	r3, [pc, #8]	; (808cfe8 <HAL_GPIO_Write+0xc>)
 808cfe0:	681b      	ldr	r3, [r3, #0]
 808cfe2:	691b      	ldr	r3, [r3, #16]
 808cfe4:	9301      	str	r3, [sp, #4]
 808cfe6:	bd08      	pop	{r3, pc}
 808cfe8:	080401b0 	.word	0x080401b0

0808cfec <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 808cfec:	b508      	push	{r3, lr}
 808cfee:	4b02      	ldr	r3, [pc, #8]	; (808cff8 <HAL_Interrupts_Attach+0xc>)
 808cff0:	681b      	ldr	r3, [r3, #0]
 808cff2:	699b      	ldr	r3, [r3, #24]
 808cff4:	9301      	str	r3, [sp, #4]
 808cff6:	bd08      	pop	{r3, pc}
 808cff8:	080401b0 	.word	0x080401b0

0808cffc <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 808cffc:	b508      	push	{r3, lr}
 808cffe:	4b02      	ldr	r3, [pc, #8]	; (808d008 <HAL_Interrupts_Detach+0xc>)
 808d000:	681b      	ldr	r3, [r3, #0]
 808d002:	69db      	ldr	r3, [r3, #28]
 808d004:	9301      	str	r3, [sp, #4]
 808d006:	bd08      	pop	{r3, pc}
 808d008:	080401b0 	.word	0x080401b0

0808d00c <hal_adc_set_sample_time>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
 808d00c:	b508      	push	{r3, lr}
 808d00e:	4b02      	ldr	r3, [pc, #8]	; (808d018 <hal_adc_set_sample_time+0xc>)
 808d010:	681b      	ldr	r3, [r3, #0]
 808d012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808d014:	9301      	str	r3, [sp, #4]
 808d016:	bd08      	pop	{r3, pc}
 808d018:	080401b0 	.word	0x080401b0

0808d01c <hal_adc_read>:
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 808d01c:	b508      	push	{r3, lr}
 808d01e:	4b02      	ldr	r3, [pc, #8]	; (808d028 <hal_adc_read+0xc>)
 808d020:	681b      	ldr	r3, [r3, #0]
 808d022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808d024:	9301      	str	r3, [sp, #4]
 808d026:	bd08      	pop	{r3, pc}
 808d028:	080401b0 	.word	0x080401b0

0808d02c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 808d02c:	b508      	push	{r3, lr}
 808d02e:	4b02      	ldr	r3, [pc, #8]	; (808d038 <hal_i2c_begin+0xc>)
 808d030:	681b      	ldr	r3, [r3, #0]
 808d032:	68db      	ldr	r3, [r3, #12]
 808d034:	9301      	str	r3, [sp, #4]
 808d036:	bd08      	pop	{r3, pc}
 808d038:	080401ac 	.word	0x080401ac

0808d03c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 808d03c:	b508      	push	{r3, lr}
 808d03e:	4b02      	ldr	r3, [pc, #8]	; (808d048 <hal_i2c_begin_transmission+0xc>)
 808d040:	681b      	ldr	r3, [r3, #0]
 808d042:	699b      	ldr	r3, [r3, #24]
 808d044:	9301      	str	r3, [sp, #4]
 808d046:	bd08      	pop	{r3, pc}
 808d048:	080401ac 	.word	0x080401ac

0808d04c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 808d04c:	b508      	push	{r3, lr}
 808d04e:	4b02      	ldr	r3, [pc, #8]	; (808d058 <hal_i2c_end_transmission+0xc>)
 808d050:	681b      	ldr	r3, [r3, #0]
 808d052:	69db      	ldr	r3, [r3, #28]
 808d054:	9301      	str	r3, [sp, #4]
 808d056:	bd08      	pop	{r3, pc}
 808d058:	080401ac 	.word	0x080401ac

0808d05c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 808d05c:	b508      	push	{r3, lr}
 808d05e:	4b02      	ldr	r3, [pc, #8]	; (808d068 <hal_i2c_write+0xc>)
 808d060:	681b      	ldr	r3, [r3, #0]
 808d062:	6a1b      	ldr	r3, [r3, #32]
 808d064:	9301      	str	r3, [sp, #4]
 808d066:	bd08      	pop	{r3, pc}
 808d068:	080401ac 	.word	0x080401ac

0808d06c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 808d06c:	b508      	push	{r3, lr}
 808d06e:	4b02      	ldr	r3, [pc, #8]	; (808d078 <hal_i2c_available+0xc>)
 808d070:	681b      	ldr	r3, [r3, #0]
 808d072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808d074:	9301      	str	r3, [sp, #4]
 808d076:	bd08      	pop	{r3, pc}
 808d078:	080401ac 	.word	0x080401ac

0808d07c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 808d07c:	b508      	push	{r3, lr}
 808d07e:	4b02      	ldr	r3, [pc, #8]	; (808d088 <hal_i2c_read+0xc>)
 808d080:	681b      	ldr	r3, [r3, #0]
 808d082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808d084:	9301      	str	r3, [sp, #4]
 808d086:	bd08      	pop	{r3, pc}
 808d088:	080401ac 	.word	0x080401ac

0808d08c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 808d08c:	b508      	push	{r3, lr}
 808d08e:	4b02      	ldr	r3, [pc, #8]	; (808d098 <hal_i2c_peek+0xc>)
 808d090:	681b      	ldr	r3, [r3, #0]
 808d092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808d094:	9301      	str	r3, [sp, #4]
 808d096:	bd08      	pop	{r3, pc}
 808d098:	080401ac 	.word	0x080401ac

0808d09c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 808d09c:	b508      	push	{r3, lr}
 808d09e:	4b02      	ldr	r3, [pc, #8]	; (808d0a8 <hal_i2c_flush+0xc>)
 808d0a0:	681b      	ldr	r3, [r3, #0]
 808d0a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808d0a4:	9301      	str	r3, [sp, #4]
 808d0a6:	bd08      	pop	{r3, pc}
 808d0a8:	080401ac 	.word	0x080401ac

0808d0ac <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 808d0ac:	b508      	push	{r3, lr}
 808d0ae:	4b02      	ldr	r3, [pc, #8]	; (808d0b8 <hal_i2c_is_enabled+0xc>)
 808d0b0:	681b      	ldr	r3, [r3, #0]
 808d0b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808d0b4:	9301      	str	r3, [sp, #4]
 808d0b6:	bd08      	pop	{r3, pc}
 808d0b8:	080401ac 	.word	0x080401ac

0808d0bc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 808d0bc:	b508      	push	{r3, lr}
 808d0be:	4b02      	ldr	r3, [pc, #8]	; (808d0c8 <hal_i2c_init+0xc>)
 808d0c0:	681b      	ldr	r3, [r3, #0]
 808d0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808d0c4:	9301      	str	r3, [sp, #4]
 808d0c6:	bd08      	pop	{r3, pc}
 808d0c8:	080401ac 	.word	0x080401ac

0808d0cc <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
 808d0cc:	b508      	push	{r3, lr}
 808d0ce:	4b02      	ldr	r3, [pc, #8]	; (808d0d8 <hal_i2c_lock+0xc>)
 808d0d0:	681b      	ldr	r3, [r3, #0]
 808d0d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808d0d4:	9301      	str	r3, [sp, #4]
 808d0d6:	bd08      	pop	{r3, pc}
 808d0d8:	080401ac 	.word	0x080401ac

0808d0dc <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
 808d0dc:	b508      	push	{r3, lr}
 808d0de:	4b02      	ldr	r3, [pc, #8]	; (808d0e8 <hal_i2c_unlock+0xc>)
 808d0e0:	681b      	ldr	r3, [r3, #0]
 808d0e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808d0e4:	9301      	str	r3, [sp, #4]
 808d0e6:	bd08      	pop	{r3, pc}
 808d0e8:	080401ac 	.word	0x080401ac

0808d0ec <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 808d0ec:	b508      	push	{r3, lr}
 808d0ee:	4b02      	ldr	r3, [pc, #8]	; (808d0f8 <hal_i2c_request_ex+0xc>)
 808d0f0:	681b      	ldr	r3, [r3, #0]
 808d0f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 808d0f4:	9301      	str	r3, [sp, #4]
 808d0f6:	bd08      	pop	{r3, pc}
 808d0f8:	080401ac 	.word	0x080401ac

0808d0fc <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 808d0fc:	b508      	push	{r3, lr}
 808d0fe:	4b02      	ldr	r3, [pc, #8]	; (808d108 <hal_spi_begin+0xc>)
 808d100:	681b      	ldr	r3, [r3, #0]
 808d102:	681b      	ldr	r3, [r3, #0]
 808d104:	9301      	str	r3, [sp, #4]
 808d106:	bd08      	pop	{r3, pc}
 808d108:	080401b4 	.word	0x080401b4

0808d10c <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
 808d10c:	b508      	push	{r3, lr}
 808d10e:	4b02      	ldr	r3, [pc, #8]	; (808d118 <hal_spi_end+0xc>)
 808d110:	681b      	ldr	r3, [r3, #0]
 808d112:	685b      	ldr	r3, [r3, #4]
 808d114:	9301      	str	r3, [sp, #4]
 808d116:	bd08      	pop	{r3, pc}
 808d118:	080401b4 	.word	0x080401b4

0808d11c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 808d11c:	b508      	push	{r3, lr}
 808d11e:	4b02      	ldr	r3, [pc, #8]	; (808d128 <hal_spi_init+0xc>)
 808d120:	681b      	ldr	r3, [r3, #0]
 808d122:	69db      	ldr	r3, [r3, #28]
 808d124:	9301      	str	r3, [sp, #4]
 808d126:	bd08      	pop	{r3, pc}
 808d128:	080401b4 	.word	0x080401b4

0808d12c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 808d12c:	b508      	push	{r3, lr}
 808d12e:	4b02      	ldr	r3, [pc, #8]	; (808d138 <hal_spi_is_enabled+0xc>)
 808d130:	681b      	ldr	r3, [r3, #0]
 808d132:	6a1b      	ldr	r3, [r3, #32]
 808d134:	9301      	str	r3, [sp, #4]
 808d136:	bd08      	pop	{r3, pc}
 808d138:	080401b4 	.word	0x080401b4

0808d13c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 808d13c:	b508      	push	{r3, lr}
 808d13e:	4b02      	ldr	r3, [pc, #8]	; (808d148 <hal_spi_info+0xc>)
 808d140:	681b      	ldr	r3, [r3, #0]
 808d142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808d144:	9301      	str	r3, [sp, #4]
 808d146:	bd08      	pop	{r3, pc}
 808d148:	080401b4 	.word	0x080401b4

0808d14c <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
 808d14c:	b508      	push	{r3, lr}
 808d14e:	4b02      	ldr	r3, [pc, #8]	; (808d158 <hal_spi_transfer_dma+0xc>)
 808d150:	681b      	ldr	r3, [r3, #0]
 808d152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808d154:	9301      	str	r3, [sp, #4]
 808d156:	bd08      	pop	{r3, pc}
 808d158:	080401b4 	.word	0x080401b4

0808d15c <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 808d15c:	b508      	push	{r3, lr}
 808d15e:	4b02      	ldr	r3, [pc, #8]	; (808d168 <hal_spi_transfer_dma_status+0xc>)
 808d160:	681b      	ldr	r3, [r3, #0]
 808d162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808d164:	9301      	str	r3, [sp, #4]
 808d166:	bd08      	pop	{r3, pc}
 808d168:	080401b4 	.word	0x080401b4

0808d16c <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 808d16c:	b508      	push	{r3, lr}
 808d16e:	4b02      	ldr	r3, [pc, #8]	; (808d178 <hal_spi_set_settings+0xc>)
 808d170:	681b      	ldr	r3, [r3, #0]
 808d172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808d174:	9301      	str	r3, [sp, #4]
 808d176:	bd08      	pop	{r3, pc}
 808d178:	080401b4 	.word	0x080401b4

0808d17c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 808d17c:	b508      	push	{r3, lr}
 808d17e:	4b02      	ldr	r3, [pc, #8]	; (808d188 <hal_usart_init+0xc>)
 808d180:	681b      	ldr	r3, [r3, #0]
 808d182:	699b      	ldr	r3, [r3, #24]
 808d184:	9301      	str	r3, [sp, #4]
 808d186:	bd08      	pop	{r3, pc}
 808d188:	080401c4 	.word	0x080401c4

0808d18c <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 808d18c:	b508      	push	{r3, lr}
 808d18e:	4b02      	ldr	r3, [pc, #8]	; (808d198 <hal_usart_end+0xc>)
 808d190:	681b      	ldr	r3, [r3, #0]
 808d192:	6a1b      	ldr	r3, [r3, #32]
 808d194:	9301      	str	r3, [sp, #4]
 808d196:	bd08      	pop	{r3, pc}
 808d198:	080401c4 	.word	0x080401c4

0808d19c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 808d19c:	b508      	push	{r3, lr}
 808d19e:	4b02      	ldr	r3, [pc, #8]	; (808d1a8 <hal_usart_write+0xc>)
 808d1a0:	681b      	ldr	r3, [r3, #0]
 808d1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808d1a4:	9301      	str	r3, [sp, #4]
 808d1a6:	bd08      	pop	{r3, pc}
 808d1a8:	080401c4 	.word	0x080401c4

0808d1ac <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 808d1ac:	b508      	push	{r3, lr}
 808d1ae:	4b02      	ldr	r3, [pc, #8]	; (808d1b8 <hal_usart_available+0xc>)
 808d1b0:	681b      	ldr	r3, [r3, #0]
 808d1b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808d1b4:	9301      	str	r3, [sp, #4]
 808d1b6:	bd08      	pop	{r3, pc}
 808d1b8:	080401c4 	.word	0x080401c4

0808d1bc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 808d1bc:	b508      	push	{r3, lr}
 808d1be:	4b02      	ldr	r3, [pc, #8]	; (808d1c8 <hal_usart_read+0xc>)
 808d1c0:	681b      	ldr	r3, [r3, #0]
 808d1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808d1c4:	9301      	str	r3, [sp, #4]
 808d1c6:	bd08      	pop	{r3, pc}
 808d1c8:	080401c4 	.word	0x080401c4

0808d1cc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 808d1cc:	b508      	push	{r3, lr}
 808d1ce:	4b02      	ldr	r3, [pc, #8]	; (808d1d8 <hal_usart_peek+0xc>)
 808d1d0:	681b      	ldr	r3, [r3, #0]
 808d1d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808d1d4:	9301      	str	r3, [sp, #4]
 808d1d6:	bd08      	pop	{r3, pc}
 808d1d8:	080401c4 	.word	0x080401c4

0808d1dc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 808d1dc:	b508      	push	{r3, lr}
 808d1de:	4b02      	ldr	r3, [pc, #8]	; (808d1e8 <hal_usart_flush+0xc>)
 808d1e0:	681b      	ldr	r3, [r3, #0]
 808d1e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808d1e4:	9301      	str	r3, [sp, #4]
 808d1e6:	bd08      	pop	{r3, pc}
 808d1e8:	080401c4 	.word	0x080401c4

0808d1ec <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 808d1ec:	b508      	push	{r3, lr}
 808d1ee:	4b02      	ldr	r3, [pc, #8]	; (808d1f8 <hal_usart_is_enabled+0xc>)
 808d1f0:	681b      	ldr	r3, [r3, #0]
 808d1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808d1f4:	9301      	str	r3, [sp, #4]
 808d1f6:	bd08      	pop	{r3, pc}
 808d1f8:	080401c4 	.word	0x080401c4

0808d1fc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 808d1fc:	b508      	push	{r3, lr}
 808d1fe:	4b02      	ldr	r3, [pc, #8]	; (808d208 <hal_usart_available_data_for_write+0xc>)
 808d200:	681b      	ldr	r3, [r3, #0]
 808d202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808d204:	9301      	str	r3, [sp, #4]
 808d206:	bd08      	pop	{r3, pc}
 808d208:	080401c4 	.word	0x080401c4

0808d20c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 808d20c:	b508      	push	{r3, lr}
 808d20e:	4b02      	ldr	r3, [pc, #8]	; (808d218 <hal_usart_begin_config+0xc>)
 808d210:	681b      	ldr	r3, [r3, #0]
 808d212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808d214:	9301      	str	r3, [sp, #4]
 808d216:	bd08      	pop	{r3, pc}
 808d218:	080401c4 	.word	0x080401c4

0808d21c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 808d21c:	b508      	push	{r3, lr}
 808d21e:	4b02      	ldr	r3, [pc, #8]	; (808d228 <HAL_USB_USART_Init+0xc>)
 808d220:	681b      	ldr	r3, [r3, #0]
 808d222:	681b      	ldr	r3, [r3, #0]
 808d224:	9301      	str	r3, [sp, #4]
 808d226:	bd08      	pop	{r3, pc}
 808d228:	0806001c 	.word	0x0806001c

0808d22c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 808d22c:	b508      	push	{r3, lr}
 808d22e:	4b02      	ldr	r3, [pc, #8]	; (808d238 <HAL_USB_USART_Begin+0xc>)
 808d230:	681b      	ldr	r3, [r3, #0]
 808d232:	685b      	ldr	r3, [r3, #4]
 808d234:	9301      	str	r3, [sp, #4]
 808d236:	bd08      	pop	{r3, pc}
 808d238:	0806001c 	.word	0x0806001c

0808d23c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 808d23c:	b508      	push	{r3, lr}
 808d23e:	4b02      	ldr	r3, [pc, #8]	; (808d248 <HAL_USB_USART_End+0xc>)
 808d240:	681b      	ldr	r3, [r3, #0]
 808d242:	689b      	ldr	r3, [r3, #8]
 808d244:	9301      	str	r3, [sp, #4]
 808d246:	bd08      	pop	{r3, pc}
 808d248:	0806001c 	.word	0x0806001c

0808d24c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 808d24c:	b508      	push	{r3, lr}
 808d24e:	4b02      	ldr	r3, [pc, #8]	; (808d258 <HAL_USB_USART_Available_Data+0xc>)
 808d250:	681b      	ldr	r3, [r3, #0]
 808d252:	691b      	ldr	r3, [r3, #16]
 808d254:	9301      	str	r3, [sp, #4]
 808d256:	bd08      	pop	{r3, pc}
 808d258:	0806001c 	.word	0x0806001c

0808d25c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 808d25c:	b508      	push	{r3, lr}
 808d25e:	4b02      	ldr	r3, [pc, #8]	; (808d268 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 808d260:	681b      	ldr	r3, [r3, #0]
 808d262:	695b      	ldr	r3, [r3, #20]
 808d264:	9301      	str	r3, [sp, #4]
 808d266:	bd08      	pop	{r3, pc}
 808d268:	0806001c 	.word	0x0806001c

0808d26c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808d26c:	b508      	push	{r3, lr}
 808d26e:	4b02      	ldr	r3, [pc, #8]	; (808d278 <HAL_USB_USART_Receive_Data+0xc>)
 808d270:	681b      	ldr	r3, [r3, #0]
 808d272:	699b      	ldr	r3, [r3, #24]
 808d274:	9301      	str	r3, [sp, #4]
 808d276:	bd08      	pop	{r3, pc}
 808d278:	0806001c 	.word	0x0806001c

0808d27c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808d27c:	b508      	push	{r3, lr}
 808d27e:	4b02      	ldr	r3, [pc, #8]	; (808d288 <HAL_USB_USART_Send_Data+0xc>)
 808d280:	681b      	ldr	r3, [r3, #0]
 808d282:	69db      	ldr	r3, [r3, #28]
 808d284:	9301      	str	r3, [sp, #4]
 808d286:	bd08      	pop	{r3, pc}
 808d288:	0806001c 	.word	0x0806001c

0808d28c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 808d28c:	b508      	push	{r3, lr}
 808d28e:	4b02      	ldr	r3, [pc, #8]	; (808d298 <HAL_USB_USART_Flush_Data+0xc>)
 808d290:	681b      	ldr	r3, [r3, #0]
 808d292:	6a1b      	ldr	r3, [r3, #32]
 808d294:	9301      	str	r3, [sp, #4]
 808d296:	bd08      	pop	{r3, pc}
 808d298:	0806001c 	.word	0x0806001c

0808d29c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 808d29c:	b508      	push	{r3, lr}
 808d29e:	4b02      	ldr	r3, [pc, #8]	; (808d2a8 <panic_+0xc>)
 808d2a0:	681b      	ldr	r3, [r3, #0]
 808d2a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808d2a4:	9301      	str	r3, [sp, #4]
 808d2a6:	bd08      	pop	{r3, pc}
 808d2a8:	080201a0 	.word	0x080201a0

0808d2ac <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 808d2ac:	b508      	push	{r3, lr}
 808d2ae:	4b02      	ldr	r3, [pc, #8]	; (808d2b8 <log_message_v+0xc>)
 808d2b0:	681b      	ldr	r3, [r3, #0]
 808d2b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808d2b4:	9301      	str	r3, [sp, #4]
 808d2b6:	bd08      	pop	{r3, pc}
 808d2b8:	080201a0 	.word	0x080201a0

0808d2bc <log_printf_v>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
 808d2bc:	b508      	push	{r3, lr}
 808d2be:	4b02      	ldr	r3, [pc, #8]	; (808d2c8 <log_printf_v+0xc>)
 808d2c0:	681b      	ldr	r3, [r3, #0]
 808d2c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 808d2c4:	9301      	str	r3, [sp, #4]
 808d2c6:	bd08      	pop	{r3, pc}
 808d2c8:	080201a0 	.word	0x080201a0

0808d2cc <log_enabled>:
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
 808d2cc:	b508      	push	{r3, lr}
 808d2ce:	4b02      	ldr	r3, [pc, #8]	; (808d2d8 <log_enabled+0xc>)
 808d2d0:	681b      	ldr	r3, [r3, #0]
 808d2d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 808d2d4:	9301      	str	r3, [sp, #4]
 808d2d6:	bd08      	pop	{r3, pc}
 808d2d8:	080201a0 	.word	0x080201a0

0808d2dc <log_level_name>:
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 808d2dc:	b508      	push	{r3, lr}
 808d2de:	4b02      	ldr	r3, [pc, #8]	; (808d2e8 <log_level_name+0xc>)
 808d2e0:	681b      	ldr	r3, [r3, #0]
 808d2e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 808d2e4:	9301      	str	r3, [sp, #4]
 808d2e6:	bd08      	pop	{r3, pc}
 808d2e8:	080201a0 	.word	0x080201a0

0808d2ec <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 808d2ec:	b508      	push	{r3, lr}
 808d2ee:	4b02      	ldr	r3, [pc, #8]	; (808d2f8 <log_set_callbacks+0xc>)
 808d2f0:	681b      	ldr	r3, [r3, #0]
 808d2f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808d2f4:	9301      	str	r3, [sp, #4]
 808d2f6:	bd08      	pop	{r3, pc}
 808d2f8:	080201a0 	.word	0x080201a0

0808d2fc <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 808d2fc:	b508      	push	{r3, lr}
 808d2fe:	4b02      	ldr	r3, [pc, #8]	; (808d308 <system_mode+0xc>)
 808d300:	681b      	ldr	r3, [r3, #0]
 808d302:	681b      	ldr	r3, [r3, #0]
 808d304:	9301      	str	r3, [sp, #4]
 808d306:	bd08      	pop	{r3, pc}
 808d308:	080401a4 	.word	0x080401a4

0808d30c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 808d30c:	b508      	push	{r3, lr}
 808d30e:	4b02      	ldr	r3, [pc, #8]	; (808d318 <set_system_mode+0xc>)
 808d310:	681b      	ldr	r3, [r3, #0]
 808d312:	685b      	ldr	r3, [r3, #4]
 808d314:	9301      	str	r3, [sp, #4]
 808d316:	bd08      	pop	{r3, pc}
 808d318:	080401a4 	.word	0x080401a4

0808d31c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 808d31c:	b508      	push	{r3, lr}
 808d31e:	4b02      	ldr	r3, [pc, #8]	; (808d328 <system_delay_ms+0xc>)
 808d320:	681b      	ldr	r3, [r3, #0]
 808d322:	695b      	ldr	r3, [r3, #20]
 808d324:	9301      	str	r3, [sp, #4]
 808d326:	bd08      	pop	{r3, pc}
 808d328:	080401a4 	.word	0x080401a4

0808d32c <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 808d32c:	b508      	push	{r3, lr}
 808d32e:	4b02      	ldr	r3, [pc, #8]	; (808d338 <system_sleep+0xc>)
 808d330:	681b      	ldr	r3, [r3, #0]
 808d332:	699b      	ldr	r3, [r3, #24]
 808d334:	9301      	str	r3, [sp, #4]
 808d336:	bd08      	pop	{r3, pc}
 808d338:	080401a4 	.word	0x080401a4

0808d33c <system_subscribe_event>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
 808d33c:	b508      	push	{r3, lr}
 808d33e:	4b02      	ldr	r3, [pc, #8]	; (808d348 <system_subscribe_event+0xc>)
 808d340:	681b      	ldr	r3, [r3, #0]
 808d342:	6a1b      	ldr	r3, [r3, #32]
 808d344:	9301      	str	r3, [sp, #4]
 808d346:	bd08      	pop	{r3, pc}
 808d348:	080401a4 	.word	0x080401a4

0808d34c <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 808d34c:	b508      	push	{r3, lr}
 808d34e:	4b02      	ldr	r3, [pc, #8]	; (808d358 <system_thread_set_state+0xc>)
 808d350:	681b      	ldr	r3, [r3, #0]
 808d352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808d354:	9301      	str	r3, [sp, #4]
 808d356:	bd08      	pop	{r3, pc}
 808d358:	080401a4 	.word	0x080401a4

0808d35c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 808d35c:	b508      	push	{r3, lr}
 808d35e:	4b02      	ldr	r3, [pc, #8]	; (808d368 <application_thread_current+0xc>)
 808d360:	681b      	ldr	r3, [r3, #0]
 808d362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808d364:	9301      	str	r3, [sp, #4]
 808d366:	bd08      	pop	{r3, pc}
 808d368:	080401a4 	.word	0x080401a4

0808d36c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 808d36c:	b508      	push	{r3, lr}
 808d36e:	4b02      	ldr	r3, [pc, #8]	; (808d378 <application_thread_invoke+0xc>)
 808d370:	681b      	ldr	r3, [r3, #0]
 808d372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808d374:	9301      	str	r3, [sp, #4]
 808d376:	bd08      	pop	{r3, pc}
 808d378:	080401a4 	.word	0x080401a4

0808d37c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 808d37c:	b508      	push	{r3, lr}
 808d37e:	4b02      	ldr	r3, [pc, #8]	; (808d388 <system_thread_get_state+0xc>)
 808d380:	681b      	ldr	r3, [r3, #0]
 808d382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808d384:	9301      	str	r3, [sp, #4]
 808d386:	bd08      	pop	{r3, pc}
 808d388:	080401a4 	.word	0x080401a4

0808d38c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 808d38c:	b508      	push	{r3, lr}
 808d38e:	4b03      	ldr	r3, [pc, #12]	; (808d39c <system_ctrl_set_app_request_handler+0x10>)
 808d390:	681b      	ldr	r3, [r3, #0]
 808d392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d396:	9301      	str	r3, [sp, #4]
 808d398:	bd08      	pop	{r3, pc}
 808d39a:	0000      	.short	0x0000
 808d39c:	080401a4 	.word	0x080401a4

0808d3a0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 808d3a0:	b508      	push	{r3, lr}
 808d3a2:	4b03      	ldr	r3, [pc, #12]	; (808d3b0 <system_ctrl_set_result+0x10>)
 808d3a4:	681b      	ldr	r3, [r3, #0]
 808d3a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 808d3aa:	9301      	str	r3, [sp, #4]
 808d3ac:	bd08      	pop	{r3, pc}
 808d3ae:	0000      	.short	0x0000
 808d3b0:	080401a4 	.word	0x080401a4

0808d3b4 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 808d3b4:	b508      	push	{r3, lr}
 808d3b6:	4b03      	ldr	r3, [pc, #12]	; (808d3c4 <system_reset+0x10>)
 808d3b8:	681b      	ldr	r3, [r3, #0]
 808d3ba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 808d3be:	9301      	str	r3, [sp, #4]
 808d3c0:	bd08      	pop	{r3, pc}
 808d3c2:	0000      	.short	0x0000
 808d3c4:	080401a4 	.word	0x080401a4

0808d3c8 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 808d3c8:	b508      	push	{r3, lr}
 808d3ca:	4b02      	ldr	r3, [pc, #8]	; (808d3d4 <spark_variable+0xc>)
 808d3cc:	681b      	ldr	r3, [r3, #0]
 808d3ce:	681b      	ldr	r3, [r3, #0]
 808d3d0:	9301      	str	r3, [sp, #4]
 808d3d2:	bd08      	pop	{r3, pc}
 808d3d4:	080401cc 	.word	0x080401cc

0808d3d8 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 808d3d8:	b508      	push	{r3, lr}
 808d3da:	4b02      	ldr	r3, [pc, #8]	; (808d3e4 <spark_function+0xc>)
 808d3dc:	681b      	ldr	r3, [r3, #0]
 808d3de:	685b      	ldr	r3, [r3, #4]
 808d3e0:	9301      	str	r3, [sp, #4]
 808d3e2:	bd08      	pop	{r3, pc}
 808d3e4:	080401cc 	.word	0x080401cc

0808d3e8 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 808d3e8:	b508      	push	{r3, lr}
 808d3ea:	4b02      	ldr	r3, [pc, #8]	; (808d3f4 <spark_process+0xc>)
 808d3ec:	681b      	ldr	r3, [r3, #0]
 808d3ee:	689b      	ldr	r3, [r3, #8]
 808d3f0:	9301      	str	r3, [sp, #4]
 808d3f2:	bd08      	pop	{r3, pc}
 808d3f4:	080401cc 	.word	0x080401cc

0808d3f8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 808d3f8:	b508      	push	{r3, lr}
 808d3fa:	4b02      	ldr	r3, [pc, #8]	; (808d404 <spark_cloud_flag_connect+0xc>)
 808d3fc:	681b      	ldr	r3, [r3, #0]
 808d3fe:	68db      	ldr	r3, [r3, #12]
 808d400:	9301      	str	r3, [sp, #4]
 808d402:	bd08      	pop	{r3, pc}
 808d404:	080401cc 	.word	0x080401cc

0808d408 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 808d408:	b508      	push	{r3, lr}
 808d40a:	4b02      	ldr	r3, [pc, #8]	; (808d414 <spark_cloud_flag_connected+0xc>)
 808d40c:	681b      	ldr	r3, [r3, #0]
 808d40e:	695b      	ldr	r3, [r3, #20]
 808d410:	9301      	str	r3, [sp, #4]
 808d412:	bd08      	pop	{r3, pc}
 808d414:	080401cc 	.word	0x080401cc

0808d418 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 808d418:	b508      	push	{r3, lr}
 808d41a:	4b02      	ldr	r3, [pc, #8]	; (808d424 <spark_send_event+0xc>)
 808d41c:	681b      	ldr	r3, [r3, #0]
 808d41e:	6a1b      	ldr	r3, [r3, #32]
 808d420:	9301      	str	r3, [sp, #4]
 808d422:	bd08      	pop	{r3, pc}
 808d424:	080401cc 	.word	0x080401cc

0808d428 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 808d428:	b508      	push	{r3, lr}
 808d42a:	4b02      	ldr	r3, [pc, #8]	; (808d434 <spark_sync_time_pending+0xc>)
 808d42c:	681b      	ldr	r3, [r3, #0]
 808d42e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808d430:	9301      	str	r3, [sp, #4]
 808d432:	bd08      	pop	{r3, pc}
 808d434:	080401cc 	.word	0x080401cc

0808d438 <spark_set_connection_property>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
 808d438:	b508      	push	{r3, lr}
 808d43a:	4b02      	ldr	r3, [pc, #8]	; (808d444 <spark_set_connection_property+0xc>)
 808d43c:	681b      	ldr	r3, [r3, #0]
 808d43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808d440:	9301      	str	r3, [sp, #4]
 808d442:	bd08      	pop	{r3, pc}
 808d444:	080401cc 	.word	0x080401cc

0808d448 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 808d448:	b508      	push	{r3, lr}
 808d44a:	4b02      	ldr	r3, [pc, #8]	; (808d454 <spark_set_random_seed_from_cloud_handler+0xc>)
 808d44c:	681b      	ldr	r3, [r3, #0]
 808d44e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808d450:	9301      	str	r3, [sp, #4]
 808d452:	bd08      	pop	{r3, pc}
 808d454:	080401cc 	.word	0x080401cc

0808d458 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 808d458:	b508      	push	{r3, lr}
 808d45a:	4b02      	ldr	r3, [pc, #8]	; (808d464 <network_connect+0xc>)
 808d45c:	681b      	ldr	r3, [r3, #0]
 808d45e:	685b      	ldr	r3, [r3, #4]
 808d460:	9301      	str	r3, [sp, #4]
 808d462:	bd08      	pop	{r3, pc}
 808d464:	080401c8 	.word	0x080401c8

0808d468 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 808d468:	b508      	push	{r3, lr}
 808d46a:	4b02      	ldr	r3, [pc, #8]	; (808d474 <network_connecting+0xc>)
 808d46c:	681b      	ldr	r3, [r3, #0]
 808d46e:	689b      	ldr	r3, [r3, #8]
 808d470:	9301      	str	r3, [sp, #4]
 808d472:	bd08      	pop	{r3, pc}
 808d474:	080401c8 	.word	0x080401c8

0808d478 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 808d478:	b508      	push	{r3, lr}
 808d47a:	4b02      	ldr	r3, [pc, #8]	; (808d484 <network_disconnect+0xc>)
 808d47c:	681b      	ldr	r3, [r3, #0]
 808d47e:	68db      	ldr	r3, [r3, #12]
 808d480:	9301      	str	r3, [sp, #4]
 808d482:	bd08      	pop	{r3, pc}
 808d484:	080401c8 	.word	0x080401c8

0808d488 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 808d488:	b508      	push	{r3, lr}
 808d48a:	4b02      	ldr	r3, [pc, #8]	; (808d494 <network_ready+0xc>)
 808d48c:	681b      	ldr	r3, [r3, #0]
 808d48e:	691b      	ldr	r3, [r3, #16]
 808d490:	9301      	str	r3, [sp, #4]
 808d492:	bd08      	pop	{r3, pc}
 808d494:	080401c8 	.word	0x080401c8

0808d498 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 808d498:	b508      	push	{r3, lr}
 808d49a:	4b02      	ldr	r3, [pc, #8]	; (808d4a4 <network_on+0xc>)
 808d49c:	681b      	ldr	r3, [r3, #0]
 808d49e:	695b      	ldr	r3, [r3, #20]
 808d4a0:	9301      	str	r3, [sp, #4]
 808d4a2:	bd08      	pop	{r3, pc}
 808d4a4:	080401c8 	.word	0x080401c8

0808d4a8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 808d4a8:	b508      	push	{r3, lr}
 808d4aa:	4b02      	ldr	r3, [pc, #8]	; (808d4b4 <network_off+0xc>)
 808d4ac:	681b      	ldr	r3, [r3, #0]
 808d4ae:	699b      	ldr	r3, [r3, #24]
 808d4b0:	9301      	str	r3, [sp, #4]
 808d4b2:	bd08      	pop	{r3, pc}
 808d4b4:	080401c8 	.word	0x080401c8

0808d4b8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 808d4b8:	b508      	push	{r3, lr}
 808d4ba:	4b02      	ldr	r3, [pc, #8]	; (808d4c4 <network_listen+0xc>)
 808d4bc:	681b      	ldr	r3, [r3, #0]
 808d4be:	69db      	ldr	r3, [r3, #28]
 808d4c0:	9301      	str	r3, [sp, #4]
 808d4c2:	bd08      	pop	{r3, pc}
 808d4c4:	080401c8 	.word	0x080401c8

0808d4c8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 808d4c8:	b508      	push	{r3, lr}
 808d4ca:	4b02      	ldr	r3, [pc, #8]	; (808d4d4 <network_listening+0xc>)
 808d4cc:	681b      	ldr	r3, [r3, #0]
 808d4ce:	6a1b      	ldr	r3, [r3, #32]
 808d4d0:	9301      	str	r3, [sp, #4]
 808d4d2:	bd08      	pop	{r3, pc}
 808d4d4:	080401c8 	.word	0x080401c8

0808d4d8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 808d4d8:	b508      	push	{r3, lr}
 808d4da:	4b02      	ldr	r3, [pc, #8]	; (808d4e4 <network_set_listen_timeout+0xc>)
 808d4dc:	681b      	ldr	r3, [r3, #0]
 808d4de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808d4e0:	9301      	str	r3, [sp, #4]
 808d4e2:	bd08      	pop	{r3, pc}
 808d4e4:	080401c8 	.word	0x080401c8

0808d4e8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 808d4e8:	b508      	push	{r3, lr}
 808d4ea:	4b02      	ldr	r3, [pc, #8]	; (808d4f4 <network_get_listen_timeout+0xc>)
 808d4ec:	681b      	ldr	r3, [r3, #0]
 808d4ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808d4f0:	9301      	str	r3, [sp, #4]
 808d4f2:	bd08      	pop	{r3, pc}
 808d4f4:	080401c8 	.word	0x080401c8

0808d4f8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 808d4f8:	b508      	push	{r3, lr}
 808d4fa:	4b02      	ldr	r3, [pc, #8]	; (808d504 <network_is_on+0xc>)
 808d4fc:	681b      	ldr	r3, [r3, #0]
 808d4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808d500:	9301      	str	r3, [sp, #4]
 808d502:	bd08      	pop	{r3, pc}
 808d504:	080401c8 	.word	0x080401c8

0808d508 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 808d508:	b508      	push	{r3, lr}
 808d50a:	4b02      	ldr	r3, [pc, #8]	; (808d514 <network_is_off+0xc>)
 808d50c:	681b      	ldr	r3, [r3, #0]
 808d50e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808d510:	9301      	str	r3, [sp, #4]
 808d512:	bd08      	pop	{r3, pc}
 808d514:	080401c8 	.word	0x080401c8

0808d518 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 808d518:	b508      	push	{r3, lr}
 808d51a:	4b02      	ldr	r3, [pc, #8]	; (808d524 <malloc+0xc>)
 808d51c:	681b      	ldr	r3, [r3, #0]
 808d51e:	681b      	ldr	r3, [r3, #0]
 808d520:	9301      	str	r3, [sp, #4]
 808d522:	bd08      	pop	{r3, pc}
 808d524:	080401a0 	.word	0x080401a0

0808d528 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 808d528:	b508      	push	{r3, lr}
 808d52a:	4b02      	ldr	r3, [pc, #8]	; (808d534 <free+0xc>)
 808d52c:	681b      	ldr	r3, [r3, #0]
 808d52e:	685b      	ldr	r3, [r3, #4]
 808d530:	9301      	str	r3, [sp, #4]
 808d532:	bd08      	pop	{r3, pc}
 808d534:	080401a0 	.word	0x080401a0

0808d538 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 808d538:	b508      	push	{r3, lr}
 808d53a:	4b02      	ldr	r3, [pc, #8]	; (808d544 <realloc+0xc>)
 808d53c:	681b      	ldr	r3, [r3, #0]
 808d53e:	689b      	ldr	r3, [r3, #8]
 808d540:	9301      	str	r3, [sp, #4]
 808d542:	bd08      	pop	{r3, pc}
 808d544:	080401a0 	.word	0x080401a0

0808d548 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 808d548:	b508      	push	{r3, lr}
 808d54a:	4b02      	ldr	r3, [pc, #8]	; (808d554 <sprintf+0xc>)
 808d54c:	681b      	ldr	r3, [r3, #0]
 808d54e:	68db      	ldr	r3, [r3, #12]
 808d550:	9301      	str	r3, [sp, #4]
 808d552:	bd08      	pop	{r3, pc}
 808d554:	080401a0 	.word	0x080401a0

0808d558 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
 808d558:	b508      	push	{r3, lr}
 808d55a:	4b02      	ldr	r3, [pc, #8]	; (808d564 <sscanf+0xc>)
 808d55c:	681b      	ldr	r3, [r3, #0]
 808d55e:	695b      	ldr	r3, [r3, #20]
 808d560:	9301      	str	r3, [sp, #4]
 808d562:	bd08      	pop	{r3, pc}
 808d564:	080401a0 	.word	0x080401a0

0808d568 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 808d568:	b508      	push	{r3, lr}
 808d56a:	4b02      	ldr	r3, [pc, #8]	; (808d574 <snprintf+0xc>)
 808d56c:	681b      	ldr	r3, [r3, #0]
 808d56e:	69db      	ldr	r3, [r3, #28]
 808d570:	9301      	str	r3, [sp, #4]
 808d572:	bd08      	pop	{r3, pc}
 808d574:	080401a0 	.word	0x080401a0

0808d578 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 808d578:	b508      	push	{r3, lr}
 808d57a:	4b02      	ldr	r3, [pc, #8]	; (808d584 <vsnprintf+0xc>)
 808d57c:	681b      	ldr	r3, [r3, #0]
 808d57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808d580:	9301      	str	r3, [sp, #4]
 808d582:	bd08      	pop	{r3, pc}
 808d584:	080401a0 	.word	0x080401a0

0808d588 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 808d588:	b508      	push	{r3, lr}
 808d58a:	4b02      	ldr	r3, [pc, #8]	; (808d594 <abort+0xc>)
 808d58c:	681b      	ldr	r3, [r3, #0]
 808d58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808d590:	9301      	str	r3, [sp, #4]
 808d592:	bd08      	pop	{r3, pc}
 808d594:	080401a0 	.word	0x080401a0

0808d598 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 808d598:	b508      	push	{r3, lr}
 808d59a:	4b02      	ldr	r3, [pc, #8]	; (808d5a4 <_malloc_r+0xc>)
 808d59c:	681b      	ldr	r3, [r3, #0]
 808d59e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808d5a0:	9301      	str	r3, [sp, #4]
 808d5a2:	bd08      	pop	{r3, pc}
 808d5a4:	080401a0 	.word	0x080401a0

0808d5a8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 808d5a8:	b508      	push	{r3, lr}
 808d5aa:	4b02      	ldr	r3, [pc, #8]	; (808d5b4 <__errno+0xc>)
 808d5ac:	681b      	ldr	r3, [r3, #0]
 808d5ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808d5b0:	9301      	str	r3, [sp, #4]
 808d5b2:	bd08      	pop	{r3, pc}
 808d5b4:	080401a0 	.word	0x080401a0

0808d5b8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 808d5b8:	b508      	push	{r3, lr}
 808d5ba:	4b02      	ldr	r3, [pc, #8]	; (808d5c4 <newlib_impure_ptr_callback+0xc>)
 808d5bc:	681b      	ldr	r3, [r3, #0]
 808d5be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808d5c0:	9301      	str	r3, [sp, #4]
 808d5c2:	bd08      	pop	{r3, pc}
 808d5c4:	080401a0 	.word	0x080401a0

0808d5c8 <setADCSampleTime>:
 *
 * @retval None
 */
void setADCSampleTime(uint8_t ADC_SampleTime)
{
    hal_adc_set_sample_time(ADC_SampleTime);
 808d5c8:	f7ff bd20 	b.w	808d00c <hal_adc_set_sample_time>

0808d5cc <_Z3mapiiiii>:
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
 808d5cc:	428a      	cmp	r2, r1
{
 808d5ce:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
 808d5d0:	d007      	beq.n	808d5e2 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
 808d5d2:	9c02      	ldr	r4, [sp, #8]
 808d5d4:	1a40      	subs	r0, r0, r1
 808d5d6:	1ae4      	subs	r4, r4, r3
 808d5d8:	4360      	muls	r0, r4
 808d5da:	1a52      	subs	r2, r2, r1
 808d5dc:	fb90 f0f2 	sdiv	r0, r0, r2
 808d5e0:	4418      	add	r0, r3
}
 808d5e2:	bd10      	pop	{r4, pc}

0808d5e4 <_Z3mapddddd>:

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
 808d5e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d5e8:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 808d5ec:	e9dd ab0c 	ldrd	sl, fp, [sp, #48]	; 0x30
 808d5f0:	4604      	mov	r4, r0
 808d5f2:	460d      	mov	r5, r1
    if (fromEnd == fromStart) {
 808d5f4:	4640      	mov	r0, r8
 808d5f6:	4649      	mov	r1, r9
{
 808d5f8:	4616      	mov	r6, r2
 808d5fa:	461f      	mov	r7, r3
    if (fromEnd == fromStart) {
 808d5fc:	f003 fec8 	bl	8091390 <__aeabi_dcmpeq>
 808d600:	bb38      	cbnz	r0, 808d652 <_Z3mapddddd+0x6e>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
 808d602:	4632      	mov	r2, r6
 808d604:	463b      	mov	r3, r7
 808d606:	4620      	mov	r0, r4
 808d608:	4629      	mov	r1, r5
 808d60a:	f003 faa1 	bl	8090b50 <__aeabi_dsub>
 808d60e:	4652      	mov	r2, sl
 808d610:	4604      	mov	r4, r0
 808d612:	460d      	mov	r5, r1
 808d614:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 808d618:	465b      	mov	r3, fp
 808d61a:	f003 fa99 	bl	8090b50 <__aeabi_dsub>
 808d61e:	4602      	mov	r2, r0
 808d620:	460b      	mov	r3, r1
 808d622:	4620      	mov	r0, r4
 808d624:	4629      	mov	r1, r5
 808d626:	f003 fc4b 	bl	8090ec0 <__aeabi_dmul>
 808d62a:	4632      	mov	r2, r6
 808d62c:	4604      	mov	r4, r0
 808d62e:	460d      	mov	r5, r1
 808d630:	463b      	mov	r3, r7
 808d632:	4640      	mov	r0, r8
 808d634:	4649      	mov	r1, r9
 808d636:	f003 fa8b 	bl	8090b50 <__aeabi_dsub>
 808d63a:	4602      	mov	r2, r0
 808d63c:	460b      	mov	r3, r1
 808d63e:	4620      	mov	r0, r4
 808d640:	4629      	mov	r1, r5
 808d642:	f003 fd67 	bl	8091114 <__aeabi_ddiv>
 808d646:	4652      	mov	r2, sl
 808d648:	465b      	mov	r3, fp
 808d64a:	f003 fa83 	bl	8090b54 <__adddf3>
 808d64e:	4604      	mov	r4, r0
 808d650:	460d      	mov	r5, r1
}
 808d652:	4620      	mov	r0, r4
 808d654:	4629      	mov	r1, r5
 808d656:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808d65a <delay>:

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 808d65a:	2100      	movs	r1, #0
 808d65c:	f7ff be5e 	b.w	808d31c <system_delay_ms>

0808d660 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 808d660:	b510      	push	{r4, lr}
      if (_M_empty())
 808d662:	6883      	ldr	r3, [r0, #8]
 808d664:	4604      	mov	r4, r0
 808d666:	b90b      	cbnz	r3, 808d66c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 808d668:	f003 f9c3 	bl	80909f2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808d66c:	68c3      	ldr	r3, [r0, #12]
 808d66e:	4798      	blx	r3
      if (_M_manager)
 808d670:	68a3      	ldr	r3, [r4, #8]
 808d672:	b11b      	cbz	r3, 808d67c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808d674:	2203      	movs	r2, #3
 808d676:	4621      	mov	r1, r4
 808d678:	4620      	mov	r0, r4
 808d67a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808d67c:	4620      	mov	r0, r4
}
 808d67e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 808d682:	2110      	movs	r1, #16
 808d684:	f003 b9af 	b.w	80909e6 <_ZdlPvj>

0808d688 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808d688:	2200      	movs	r2, #0
 808d68a:	6840      	ldr	r0, [r0, #4]
 808d68c:	4611      	mov	r1, r2
 808d68e:	f7ff befb 	b.w	808d488 <network_ready>

0808d692 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808d692:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 808d694:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 808d696:	b085      	sub	sp, #20
 808d698:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808d69a:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 808d69c:	460f      	mov	r7, r1
 808d69e:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 808d6a0:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808d6a2:	f004 fc80 	bl	8091fa6 <strlen>
 808d6a6:	687b      	ldr	r3, [r7, #4]
 808d6a8:	b281      	uxth	r1, r0
 808d6aa:	9600      	str	r6, [sp, #0]
 808d6ac:	4628      	mov	r0, r5
 808d6ae:	aa03      	add	r2, sp, #12
 808d6b0:	f7ff fbb4 	bl	808ce1c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808d6b4:	b130      	cbz	r0, 808d6c4 <_ZN5spark13CellularClass7resolveEPKc+0x32>
 808d6b6:	4631      	mov	r1, r6
 808d6b8:	4620      	mov	r0, r4
 808d6ba:	f000 fd89 	bl	808e1d0 <_ZN9IPAddressC1Em>
    }
 808d6be:	4620      	mov	r0, r4
 808d6c0:	b005      	add	sp, #20
 808d6c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808d6c4:	4620      	mov	r0, r4
 808d6c6:	a903      	add	r1, sp, #12
 808d6c8:	f000 fd7a 	bl	808e1c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 808d6cc:	e7f7      	b.n	808d6be <_ZN5spark13CellularClass7resolveEPKc+0x2c>

0808d6ce <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 808d6ce:	2200      	movs	r2, #0
 808d6d0:	6840      	ldr	r0, [r0, #4]
 808d6d2:	4611      	mov	r1, r2
 808d6d4:	f7ff bef8 	b.w	808d4c8 <network_listening>

0808d6d8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 808d6d8:	2200      	movs	r2, #0
 808d6da:	6840      	ldr	r0, [r0, #4]
 808d6dc:	4611      	mov	r1, r2
 808d6de:	f7ff bf03 	b.w	808d4e8 <network_get_listen_timeout>

0808d6e2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 808d6e2:	2200      	movs	r2, #0
 808d6e4:	6840      	ldr	r0, [r0, #4]
 808d6e6:	f7ff bef7 	b.w	808d4d8 <network_set_listen_timeout>

0808d6ea <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 808d6ea:	2200      	movs	r2, #0
 808d6ec:	6840      	ldr	r0, [r0, #4]
 808d6ee:	f081 0101 	eor.w	r1, r1, #1
 808d6f2:	f7ff bee1 	b.w	808d4b8 <network_listen>

0808d6f6 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
 808d6f6:	2300      	movs	r3, #0
 808d6f8:	6840      	ldr	r0, [r0, #4]
 808d6fa:	461a      	mov	r2, r3
 808d6fc:	4619      	mov	r1, r3
 808d6fe:	f7ff bed3 	b.w	808d4a8 <network_off>

0808d702 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 808d702:	2300      	movs	r3, #0
 808d704:	6840      	ldr	r0, [r0, #4]
 808d706:	461a      	mov	r2, r3
 808d708:	4619      	mov	r1, r3
 808d70a:	f7ff bec5 	b.w	808d498 <network_on>

0808d70e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 808d70e:	2200      	movs	r2, #0
 808d710:	6840      	ldr	r0, [r0, #4]
 808d712:	4611      	mov	r1, r2
 808d714:	f7ff bea8 	b.w	808d468 <network_connecting>

0808d718 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808d718:	2200      	movs	r2, #0
 808d71a:	2102      	movs	r1, #2
 808d71c:	6840      	ldr	r0, [r0, #4]
 808d71e:	f7ff beab 	b.w	808d478 <network_disconnect>

0808d722 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 808d722:	2300      	movs	r3, #0
 808d724:	6840      	ldr	r0, [r0, #4]
 808d726:	461a      	mov	r2, r3
 808d728:	f7ff be96 	b.w	808d458 <network_connect>

0808d72c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 808d72c:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 808d72e:	2428      	movs	r4, #40	; 0x28
 808d730:	4b07      	ldr	r3, [pc, #28]	; (808d750 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 808d732:	4622      	mov	r2, r4
 808d734:	4618      	mov	r0, r3
 808d736:	2100      	movs	r1, #0
 808d738:	f004 fbc4 	bl	8091ec4 <memset>
        cid = -1;
 808d73c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 808d740:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 808d742:	2204      	movs	r2, #4
 808d744:	4b03      	ldr	r3, [pc, #12]	; (808d754 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 808d746:	8004      	strh	r4, [r0, #0]
 808d748:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 808d74a:	4a03      	ldr	r2, [pc, #12]	; (808d758 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 808d74c:	601a      	str	r2, [r3, #0]
 808d74e:	bd10      	pop	{r4, pc}
 808d750:	20001570 	.word	0x20001570
 808d754:	20001568 	.word	0x20001568
 808d758:	08094fb0 	.word	0x08094fb0

0808d75c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808d75c:	4770      	bx	lr

0808d75e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 808d75e:	2000      	movs	r0, #0
 808d760:	4770      	bx	lr

0808d762 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808d762:	b510      	push	{r4, lr}
 808d764:	4604      	mov	r4, r0
 808d766:	2110      	movs	r1, #16
 808d768:	f003 f93d 	bl	80909e6 <_ZdlPvj>
 808d76c:	4620      	mov	r0, r4
 808d76e:	bd10      	pop	{r4, pc}

0808d770 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 808d770:	b508      	push	{r3, lr}
      { delete this; }
 808d772:	f7ff fff6 	bl	808d762 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 808d776:	bd08      	pop	{r3, pc}

0808d778 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 808d778:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 808d77a:	b530      	push	{r4, r5, lr}
        type_(type) {
 808d77c:	f64f 749c 	movw	r4, #65436	; 0xff9c
 808d780:	6002      	str	r2, [r0, #0]
 808d782:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 808d784:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 808d786:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 808d788:	680c      	ldr	r4, [r1, #0]
 808d78a:	8085      	strh	r5, [r0, #4]
 808d78c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 808d78e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 808d790:	bd30      	pop	{r4, r5, pc}

0808d792 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 808d792:	b510      	push	{r4, lr}
 808d794:	4604      	mov	r4, r0
    free((void*)msg_);
 808d796:	6800      	ldr	r0, [r0, #0]
 808d798:	f7ff fec6 	bl	808d528 <free>
}
 808d79c:	4620      	mov	r0, r4
 808d79e:	bd10      	pop	{r4, pc}

0808d7a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 808d7a0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 808d7a2:	68c4      	ldr	r4, [r0, #12]
 808d7a4:	b1f4      	cbz	r4, 808d7e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 808d7a6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 808d7a8:	2b02      	cmp	r3, #2
 808d7aa:	d103      	bne.n	808d7b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 808d7ac:	f104 000c 	add.w	r0, r4, #12
 808d7b0:	f7ff ffef 	bl	808d792 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 808d7b4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 808d7b6:	b135      	cbz	r5, 808d7c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 808d7b8:	4628      	mov	r0, r5
 808d7ba:	f7fc fa86 	bl	8089cca <_ZNSt14_Function_baseD1Ev>
 808d7be:	2110      	movs	r1, #16
 808d7c0:	4628      	mov	r0, r5
 808d7c2:	f003 f910 	bl	80909e6 <_ZdlPvj>
 808d7c6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 808d7c8:	b135      	cbz	r5, 808d7d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 808d7ca:	4628      	mov	r0, r5
 808d7cc:	f7fc fa7d 	bl	8089cca <_ZNSt14_Function_baseD1Ev>
 808d7d0:	2110      	movs	r1, #16
 808d7d2:	4628      	mov	r0, r5
 808d7d4:	f003 f907 	bl	80909e6 <_ZdlPvj>
 808d7d8:	4620      	mov	r0, r4
 808d7da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808d7de:	2114      	movs	r1, #20
 808d7e0:	f003 b901 	b.w	80909e6 <_ZdlPvj>
 808d7e4:	bd38      	pop	{r3, r4, r5, pc}

0808d7e6 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 808d7e6:	b510      	push	{r4, lr}
 808d7e8:	b088      	sub	sp, #32
 808d7ea:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 808d7ec:	4668      	mov	r0, sp
 808d7ee:	f002 fa53 	bl	808fc98 <_ZN6StringC1EPKc>
    return (*fn)(p);
 808d7f2:	4669      	mov	r1, sp
 808d7f4:	a804      	add	r0, sp, #16
 808d7f6:	f002 fa99 	bl	808fd2c <_ZN6StringC1ERKS_>
 808d7fa:	a804      	add	r0, sp, #16
 808d7fc:	47a0      	blx	r4
 808d7fe:	4604      	mov	r4, r0
 808d800:	a804      	add	r0, sp, #16
 808d802:	f002 f9ff 	bl	808fc04 <_ZN6StringD1Ev>
    String p(param);
 808d806:	4668      	mov	r0, sp
 808d808:	f002 f9fc 	bl	808fc04 <_ZN6StringD1Ev>
}
 808d80c:	4620      	mov	r0, r4
 808d80e:	b008      	add	sp, #32
 808d810:	bd10      	pop	{r4, pc}

0808d812 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 808d812:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 808d814:	2300      	movs	r3, #0
         size = sizeof(*this);
 808d816:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 808d818:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 808d81c:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 808d81e:	4669      	mov	r1, sp
 808d820:	461a      	mov	r2, r3
 808d822:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 808d824:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 808d828:	f8ad 4000 	strh.w	r4, [sp]
 808d82c:	f7ff fdd4 	bl	808d3d8 <spark_function>
}
 808d830:	b004      	add	sp, #16
 808d832:	bd10      	pop	{r4, pc}

0808d834 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 808d834:	680b      	ldr	r3, [r1, #0]
 808d836:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 808d838:	b113      	cbz	r3, 808d840 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 808d83a:	685a      	ldr	r2, [r3, #4]
 808d83c:	3201      	adds	r2, #1
 808d83e:	605a      	str	r2, [r3, #4]
      }
 808d840:	4770      	bx	lr

0808d842 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 808d842:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 808d844:	460e      	mov	r6, r1
 808d846:	4604      	mov	r4, r0
 808d848:	f856 3b04 	ldr.w	r3, [r6], #4
 808d84c:	460d      	mov	r5, r1
 808d84e:	a801      	add	r0, sp, #4
 808d850:	4631      	mov	r1, r6
 808d852:	9300      	str	r3, [sp, #0]
 808d854:	f7ff ffee 	bl	808d834 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 808d858:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 808d85a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 808d85c:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 808d85e:	2300      	movs	r3, #0
	_M_pi = __tmp;
 808d860:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 808d862:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 808d864:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 808d866:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 808d868:	f7f8 fe9c 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808d86c:	4630      	mov	r0, r6
 808d86e:	f7f8 fe99 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 808d872:	4628      	mov	r0, r5
 808d874:	2108      	movs	r1, #8
 808d876:	f003 f8b6 	bl	80909e6 <_ZdlPvj>
        return p;
    }
 808d87a:	4620      	mov	r0, r4
 808d87c:	b002      	add	sp, #8
 808d87e:	bd70      	pop	{r4, r5, r6, pc}

0808d880 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 808d880:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808d882:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 808d884:	460b      	mov	r3, r1
 808d886:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808d888:	c803      	ldmia	r0, {r0, r1}
 808d88a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 808d88e:	e893 0003 	ldmia.w	r3, {r0, r1}
 808d892:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 808d896:	e894 0003 	ldmia.w	r4, {r0, r1}
 808d89a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 808d89e:	b002      	add	sp, #8
 808d8a0:	bd10      	pop	{r4, pc}

0808d8a2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 808d8a2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 808d8a4:	b510      	push	{r4, lr}
      if (_M_empty())
 808d8a6:	b90a      	cbnz	r2, 808d8ac <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 808d8a8:	f003 f8a3 	bl	80909f2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808d8ac:	68c3      	ldr	r3, [r0, #12]
    }
 808d8ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808d8b2:	4718      	bx	r3

0808d8b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808d8b4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 808d8b6:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 808d8b8:	f100 0110 	add.w	r1, r0, #16
 808d8bc:	f7ff fff1 	bl	808d8a2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 808d8c0:	bd08      	pop	{r3, pc}

0808d8c2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 808d8c2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 808d8c4:	b510      	push	{r4, lr}
      if (_M_empty())
 808d8c6:	b90a      	cbnz	r2, 808d8cc <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 808d8c8:	f003 f893 	bl	80909f2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808d8cc:	68c3      	ldr	r3, [r0, #12]
    }
 808d8ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808d8d2:	4718      	bx	r3

0808d8d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808d8d4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 808d8d6:	6800      	ldr	r0, [r0, #0]
 808d8d8:	f100 0110 	add.w	r1, r0, #16
 808d8dc:	f7ff fff1 	bl	808d8c2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 808d8e0:	bd08      	pop	{r3, pc}
	...

0808d8e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 808d8e4:	b538      	push	{r3, r4, r5, lr}
 808d8e6:	2300      	movs	r3, #0
 808d8e8:	4604      	mov	r4, r0
 808d8ea:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808d8ec:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 808d8ee:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808d8f0:	f7f2 fbd3 	bl	808009a <_Znwj>
 808d8f4:	b128      	cbz	r0, 808d902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 808d8f6:	2301      	movs	r3, #1
 808d8f8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 808d8fc:	4b02      	ldr	r3, [pc, #8]	; (808d908 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 808d8fe:	60c5      	str	r5, [r0, #12]
 808d900:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808d902:	6020      	str	r0, [r4, #0]
	}
 808d904:	4620      	mov	r0, r4
 808d906:	bd38      	pop	{r3, r4, r5, pc}
 808d908:	08094fec 	.word	0x08094fec

0808d90c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 808d90c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 808d90e:	2300      	movs	r3, #0
 808d910:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 808d912:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 808d914:	4604      	mov	r4, r0
 808d916:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 808d918:	b12b      	cbz	r3, 808d926 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808d91a:	2202      	movs	r2, #2
 808d91c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808d91e:	68eb      	ldr	r3, [r5, #12]
 808d920:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808d922:	68ab      	ldr	r3, [r5, #8]
 808d924:	60a3      	str	r3, [r4, #8]
    }
 808d926:	4620      	mov	r0, r4
 808d928:	bd38      	pop	{r3, r4, r5, pc}
	...

0808d92c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 808d92c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808d92e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 808d930:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 808d932:	4668      	mov	r0, sp
 808d934:	f7ff ff20 	bl	808d778 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 808d938:	f04f 0302 	mov.w	r3, #2
 808d93c:	e8d4 2f4f 	ldrexb	r2, [r4]
 808d940:	2a00      	cmp	r2, #0
 808d942:	d103      	bne.n	808d94c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 808d944:	e8c4 3f41 	strexb	r1, r3, [r4]
 808d948:	2900      	cmp	r1, #0
 808d94a:	d1f7      	bne.n	808d93c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 808d94c:	d125      	bne.n	808d99a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 808d94e:	f104 050c 	add.w	r5, r4, #12
 808d952:	4669      	mov	r1, sp
 808d954:	4628      	mov	r0, r5
 808d956:	f7ff ff0f 	bl	808d778 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 808d95a:	2301      	movs	r3, #1
 808d95c:	f3bf 8f5b 	dmb	ish
 808d960:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 808d962:	2000      	movs	r0, #0
 808d964:	f3bf 8f5b 	dmb	ish
 808d968:	f104 0308 	add.w	r3, r4, #8
 808d96c:	e853 6f00 	ldrex	r6, [r3]
 808d970:	e843 0200 	strex	r2, r0, [r3]
 808d974:	2a00      	cmp	r2, #0
 808d976:	d1f9      	bne.n	808d96c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 808d978:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 808d97c:	b16e      	cbz	r6, 808d99a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 808d97e:	f7ff fced 	bl	808d35c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 808d982:	b178      	cbz	r0, 808d9a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808d984:	4629      	mov	r1, r5
 808d986:	4630      	mov	r0, r6
 808d988:	f7ff ff8b 	bl	808d8a2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 808d98c:	4630      	mov	r0, r6
 808d98e:	f7fc f99c 	bl	8089cca <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 808d992:	2110      	movs	r1, #16
 808d994:	4630      	mov	r0, r6
 808d996:	f003 f826 	bl	80909e6 <_ZdlPvj>
        p_->setError(std::move(error));
 808d99a:	4668      	mov	r0, sp
 808d99c:	f7ff fef9 	bl	808d792 <_ZN8particle5ErrorD1Ev>
    }
 808d9a0:	b009      	add	sp, #36	; 0x24
 808d9a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808d9a4:	4631      	mov	r1, r6
 808d9a6:	a802      	add	r0, sp, #8
 808d9a8:	f7ff ffb0 	bl	808d90c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 808d9ac:	68e0      	ldr	r0, [r4, #12]
 808d9ae:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 808d9b2:	b108      	cbz	r0, 808d9b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 808d9b4:	f004 fadc 	bl	8091f70 <strdup>
        type_(type) {
 808d9b8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808d9ba:	2010      	movs	r0, #16
 808d9bc:	f8ad 501c 	strh.w	r5, [sp, #28]
 808d9c0:	f7f2 fb6b 	bl	808009a <_Znwj>
 808d9c4:	4605      	mov	r5, r0
 808d9c6:	b1e8      	cbz	r0, 808da04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 808d9c8:	2700      	movs	r7, #0
 808d9ca:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808d9cc:	2018      	movs	r0, #24
 808d9ce:	f7f2 fb64 	bl	808009a <_Znwj>
 808d9d2:	4604      	mov	r4, r0
 808d9d4:	b188      	cbz	r0, 808d9fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 808d9d6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 808d9d8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 808d9da:	a802      	add	r0, sp, #8
 808d9dc:	f7ff ff50 	bl	808d880 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808d9e0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808d9e2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808d9e4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808d9e6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 808d9e8:	9204      	str	r2, [sp, #16]
 808d9ea:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 808d9ec:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 808d9ee:	60e3      	str	r3, [r4, #12]
 808d9f0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 808d9f4:	9205      	str	r2, [sp, #20]
 808d9f6:	f7ff febf 	bl	808d778 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 808d9fa:	4b08      	ldr	r3, [pc, #32]	; (808da1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808d9fc:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 808d9fe:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808da00:	4b07      	ldr	r3, [pc, #28]	; (808da20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 808da02:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 808da04:	a806      	add	r0, sp, #24
 808da06:	f7ff fec4 	bl	808d792 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 808da0a:	a802      	add	r0, sp, #8
 808da0c:	f7fc f95d 	bl	8089cca <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808da10:	2200      	movs	r2, #0
 808da12:	4629      	mov	r1, r5
 808da14:	4803      	ldr	r0, [pc, #12]	; (808da24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 808da16:	f7ff fca9 	bl	808d36c <application_thread_invoke>
 808da1a:	e7b7      	b.n	808d98c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 808da1c:	0808d8b5 	.word	0x0808d8b5
 808da20:	0808db4d 	.word	0x0808db4d
 808da24:	0808d661 	.word	0x0808d661

0808da28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 808da28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808da2c:	b08a      	sub	sp, #40	; 0x28
 808da2e:	4605      	mov	r5, r0
 808da30:	460c      	mov	r4, r1
 808da32:	4617      	mov	r7, r2
 808da34:	4698      	mov	r8, r3
 808da36:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808da3a:	f7ff fce5 	bl	808d408 <spark_cloud_flag_connected>
 808da3e:	ae07      	add	r6, sp, #28
    if (!connected()) {
 808da40:	4682      	mov	sl, r0
 808da42:	bb38      	cbnz	r0, 808da94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 808da44:	f64f 732e 	movw	r3, #65326	; 0xff2e
 808da48:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808da4a:	a905      	add	r1, sp, #20
 808da4c:	4630      	mov	r0, r6
 808da4e:	f8ad 3018 	strh.w	r3, [sp, #24]
 808da52:	f7ff fe91 	bl	808d778 <_ZN8particle5ErrorC1EOS0_>
 808da56:	2014      	movs	r0, #20
 808da58:	f7f2 fb1f 	bl	808009a <_Znwj>
 808da5c:	4604      	mov	r4, r0
 808da5e:	b148      	cbz	r0, 808da74 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 808da60:	2302      	movs	r3, #2
 808da62:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808da64:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808da66:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808da6a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 808da6c:	4631      	mov	r1, r6
 808da6e:	300c      	adds	r0, #12
 808da70:	f7ff fe82 	bl	808d778 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 808da74:	4628      	mov	r0, r5
	: __shared_count(__p)
 808da76:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 808da78:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 808da7c:	f7ff ff32 	bl	808d8e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808da80:	4630      	mov	r0, r6
 808da82:	f7ff fe86 	bl	808d792 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 808da86:	a805      	add	r0, sp, #20
 808da88:	f7ff fe83 	bl	808d792 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 808da8c:	4628      	mov	r0, r5
 808da8e:	b00a      	add	sp, #40	; 0x28
 808da90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 808da94:	230c      	movs	r3, #12
 808da96:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 808da9a:	2014      	movs	r0, #20
 808da9c:	e9cd aa08 	strd	sl, sl, [sp, #32]
 808daa0:	9307      	str	r3, [sp, #28]
 808daa2:	f7f2 fafa 	bl	808009a <_Znwj>
 808daa6:	4601      	mov	r1, r0
 808daa8:	b128      	cbz	r0, 808dab6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808daaa:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 808daae:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808dab2:	f880 a001 	strb.w	sl, [r0, #1]
 808dab6:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 808dab8:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 808daba:	f7ff ff13 	bl	808d8e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 808dabe:	4b22      	ldr	r3, [pc, #136]	; (808db48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 808dac0:	2008      	movs	r0, #8
 808dac2:	9308      	str	r3, [sp, #32]
 808dac4:	f7f2 fae9 	bl	808009a <_Znwj>
 808dac8:	4682      	mov	sl, r0
 808daca:	b128      	cbz	r0, 808dad8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 808dacc:	9b03      	ldr	r3, [sp, #12]
 808dace:	a904      	add	r1, sp, #16
 808dad0:	f840 3b04 	str.w	r3, [r0], #4
 808dad4:	f7ff feae 	bl	808d834 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808dad8:	4642      	mov	r2, r8
 808dada:	4639      	mov	r1, r7
 808dadc:	4620      	mov	r0, r4
 808dade:	9600      	str	r6, [sp, #0]
 808dae0:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 808dae4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808dae8:	f7ff fc96 	bl	808d418 <spark_send_event>
 808daec:	b9b8      	cbnz	r0, 808db1e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 808daee:	9b03      	ldr	r3, [sp, #12]
 808daf0:	785b      	ldrb	r3, [r3, #1]
 808daf2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 808daf6:	b993      	cbnz	r3, 808db1e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 808daf8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 808dafc:	a905      	add	r1, sp, #20
 808dafe:	a803      	add	r0, sp, #12
 808db00:	9205      	str	r2, [sp, #20]
 808db02:	f8ad 3018 	strh.w	r3, [sp, #24]
 808db06:	f7ff ff11 	bl	808d92c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808db0a:	a805      	add	r0, sp, #20
 808db0c:	f7ff fe41 	bl	808d792 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 808db10:	a805      	add	r0, sp, #20
 808db12:	9909      	ldr	r1, [sp, #36]	; 0x24
 808db14:	f7ff fe95 	bl	808d842 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 808db18:	a806      	add	r0, sp, #24
 808db1a:	f7f8 fd43 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 808db1e:	9b03      	ldr	r3, [sp, #12]
 808db20:	a904      	add	r1, sp, #16
 808db22:	a806      	add	r0, sp, #24
 808db24:	9305      	str	r3, [sp, #20]
 808db26:	f7ff fe85 	bl	808d834 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 808db2a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 808db2c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 808db2e:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 808db30:	2300      	movs	r3, #0
	_M_pi = __tmp;
 808db32:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 808db34:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 808db36:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 808db38:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 808db3a:	f7f8 fd33 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808db3e:	a804      	add	r0, sp, #16
 808db40:	f7f8 fd30 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 808db44:	e7a2      	b.n	808da8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 808db46:	bf00      	nop
 808db48:	0808dc11 	.word	0x0808dc11

0808db4c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 808db4c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808db4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808db50:	4605      	mov	r5, r0
	  switch (__op)
 808db52:	d007      	beq.n	808db64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 808db54:	2a03      	cmp	r2, #3
 808db56:	d018      	beq.n	808db8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 808db58:	2a01      	cmp	r2, #1
 808db5a:	d101      	bne.n	808db60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 808db5c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808db5e:	6003      	str	r3, [r0, #0]
	}
 808db60:	2000      	movs	r0, #0
 808db62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 808db64:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 808db66:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 808db68:	f7f2 fa97 	bl	808009a <_Znwj>
 808db6c:	4604      	mov	r4, r0
 808db6e:	b150      	cbz	r0, 808db86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 808db70:	4631      	mov	r1, r6
 808db72:	f7ff fecb 	bl	808d90c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 808db76:	6930      	ldr	r0, [r6, #16]
 808db78:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 808db7c:	b108      	cbz	r0, 808db82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 808db7e:	f004 f9f7 	bl	8091f70 <strdup>
        type_(type) {
 808db82:	6120      	str	r0, [r4, #16]
 808db84:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 808db86:	602c      	str	r4, [r5, #0]
	}
 808db88:	e7ea      	b.n	808db60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 808db8a:	6804      	ldr	r4, [r0, #0]
 808db8c:	2c00      	cmp	r4, #0
 808db8e:	d0e7      	beq.n	808db60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 808db90:	f104 0010 	add.w	r0, r4, #16
 808db94:	f7ff fdfd 	bl	808d792 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 808db98:	4620      	mov	r0, r4
 808db9a:	f7fc f896 	bl	8089cca <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 808db9e:	2118      	movs	r1, #24
 808dba0:	4620      	mov	r0, r4
 808dba2:	f002 ff20 	bl	80909e6 <_ZdlPvj>
 808dba6:	e7db      	b.n	808db60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

0808dba8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 808dba8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 808dbaa:	2300      	movs	r3, #0
 808dbac:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 808dbae:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 808dbb0:	4604      	mov	r4, r0
 808dbb2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 808dbb4:	b12b      	cbz	r3, 808dbc2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808dbb6:	2202      	movs	r2, #2
 808dbb8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808dbba:	68eb      	ldr	r3, [r5, #12]
 808dbbc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808dbbe:	68ab      	ldr	r3, [r5, #8]
 808dbc0:	60a3      	str	r3, [r4, #8]
    }
 808dbc2:	4620      	mov	r0, r4
 808dbc4:	bd38      	pop	{r3, r4, r5, pc}

0808dbc6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 808dbc6:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808dbc8:	b570      	push	{r4, r5, r6, lr}
 808dbca:	4604      	mov	r4, r0
	  switch (__op)
 808dbcc:	d007      	beq.n	808dbde <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 808dbce:	2a03      	cmp	r2, #3
 808dbd0:	d012      	beq.n	808dbf8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 808dbd2:	2a01      	cmp	r2, #1
 808dbd4:	d101      	bne.n	808dbda <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 808dbd6:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808dbd8:	6003      	str	r3, [r0, #0]
	}
 808dbda:	2000      	movs	r0, #0
 808dbdc:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 808dbde:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 808dbe0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 808dbe2:	f7f2 fa5a 	bl	808009a <_Znwj>
 808dbe6:	4605      	mov	r5, r0
 808dbe8:	b120      	cbz	r0, 808dbf4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 808dbea:	4631      	mov	r1, r6
 808dbec:	f7ff ffdc 	bl	808dba8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 808dbf0:	7c33      	ldrb	r3, [r6, #16]
 808dbf2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 808dbf4:	6025      	str	r5, [r4, #0]
	}
 808dbf6:	e7f0      	b.n	808dbda <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 808dbf8:	6804      	ldr	r4, [r0, #0]
 808dbfa:	2c00      	cmp	r4, #0
 808dbfc:	d0ed      	beq.n	808dbda <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 808dbfe:	4620      	mov	r0, r4
 808dc00:	f7fc f863 	bl	8089cca <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 808dc04:	2114      	movs	r1, #20
 808dc06:	4620      	mov	r0, r4
 808dc08:	f002 feed 	bl	80909e6 <_ZdlPvj>
 808dc0c:	e7e5      	b.n	808dbda <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

0808dc10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 808dc10:	b5f0      	push	{r4, r5, r6, r7, lr}
 808dc12:	4604      	mov	r4, r0
 808dc14:	b089      	sub	sp, #36	; 0x24
 808dc16:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 808dc18:	a801      	add	r0, sp, #4
 808dc1a:	4611      	mov	r1, r2
 808dc1c:	f7ff fe11 	bl	808d842 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 808dc20:	b1a4      	cbz	r4, 808dc4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 808dc22:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 808dc24:	b11d      	cbz	r5, 808dc2e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 808dc26:	4628      	mov	r0, r5
 808dc28:	f004 f9a2 	bl	8091f70 <strdup>
 808dc2c:	4605      	mov	r5, r0
 808dc2e:	a801      	add	r0, sp, #4
 808dc30:	a903      	add	r1, sp, #12
        type_(type) {
 808dc32:	9503      	str	r5, [sp, #12]
 808dc34:	f8ad 4010 	strh.w	r4, [sp, #16]
 808dc38:	f7ff fe78 	bl	808d92c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808dc3c:	a803      	add	r0, sp, #12
 808dc3e:	f7ff fda8 	bl	808d792 <_ZN8particle5ErrorD1Ev>
 808dc42:	a802      	add	r0, sp, #8
 808dc44:	f7f8 fcae 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 808dc48:	b009      	add	sp, #36	; 0x24
 808dc4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 808dc4c:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 808dc4e:	9d01      	ldr	r5, [sp, #4]
 808dc50:	e8d5 2f4f 	ldrexb	r2, [r5]
 808dc54:	2a00      	cmp	r2, #0
 808dc56:	d103      	bne.n	808dc60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 808dc58:	e8c5 3f41 	strexb	r1, r3, [r5]
 808dc5c:	2900      	cmp	r1, #0
 808dc5e:	d1f7      	bne.n	808dc50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 808dc60:	d1ef      	bne.n	808dc42 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 808dc62:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 808dc64:	f3bf 8f5b 	dmb	ish
 808dc68:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 808dc6a:	f3bf 8f5b 	dmb	ish
 808dc6e:	1d2b      	adds	r3, r5, #4
 808dc70:	e853 6f00 	ldrex	r6, [r3]
 808dc74:	e843 4200 	strex	r2, r4, [r3]
 808dc78:	2a00      	cmp	r2, #0
 808dc7a:	d1f9      	bne.n	808dc70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 808dc7c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 808dc80:	2e00      	cmp	r6, #0
 808dc82:	d0de      	beq.n	808dc42 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 808dc84:	4620      	mov	r0, r4
 808dc86:	f7ff fb69 	bl	808d35c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 808dc8a:	4607      	mov	r7, r0
 808dc8c:	b160      	cbz	r0, 808dca8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808dc8e:	4630      	mov	r0, r6
 808dc90:	f105 010c 	add.w	r1, r5, #12
 808dc94:	f7ff fe15 	bl	808d8c2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 808dc98:	4630      	mov	r0, r6
 808dc9a:	f7fc f816 	bl	8089cca <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 808dc9e:	2110      	movs	r1, #16
 808dca0:	4630      	mov	r0, r6
 808dca2:	f002 fea0 	bl	80909e6 <_ZdlPvj>
 808dca6:	e7cc      	b.n	808dc42 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808dca8:	4631      	mov	r1, r6
 808dcaa:	a803      	add	r0, sp, #12
 808dcac:	f7ff ff7c 	bl	808dba8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 808dcb0:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808dcb2:	2010      	movs	r0, #16
 808dcb4:	f88d 301c 	strb.w	r3, [sp, #28]
 808dcb8:	f7f2 f9ef 	bl	808009a <_Znwj>
 808dcbc:	4605      	mov	r5, r0
 808dcbe:	b1d0      	cbz	r0, 808dcf6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 808dcc0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808dcc2:	2014      	movs	r0, #20
 808dcc4:	f7f2 f9e9 	bl	808009a <_Znwj>
 808dcc8:	4604      	mov	r4, r0
 808dcca:	b178      	cbz	r0, 808dcec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 808dccc:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 808dcce:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 808dcd0:	a803      	add	r0, sp, #12
 808dcd2:	f7ff fdd5 	bl	808d880 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808dcd6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 808dcd8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808dcda:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808dcdc:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 808dcde:	9205      	str	r2, [sp, #20]
 808dce0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808dce2:	60e3      	str	r3, [r4, #12]
 808dce4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 808dce8:	9206      	str	r2, [sp, #24]
 808dcea:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 808dcec:	4b06      	ldr	r3, [pc, #24]	; (808dd08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808dcee:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 808dcf0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808dcf2:	4b06      	ldr	r3, [pc, #24]	; (808dd0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 808dcf4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 808dcf6:	a803      	add	r0, sp, #12
 808dcf8:	f7fb ffe7 	bl	8089cca <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808dcfc:	2200      	movs	r2, #0
 808dcfe:	4629      	mov	r1, r5
 808dd00:	4803      	ldr	r0, [pc, #12]	; (808dd10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 808dd02:	f7ff fb33 	bl	808d36c <application_thread_invoke>
 808dd06:	e7c7      	b.n	808dc98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 808dd08:	0808d8d5 	.word	0x0808d8d5
 808dd0c:	0808dbc7 	.word	0x0808dbc7
 808dd10:	0808d661 	.word	0x0808d661

0808dd14 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
 808dd14:	6800      	ldr	r0, [r0, #0]
 808dd16:	f000 b9eb 	b.w	808e0f0 <_ZN7TwoWire4lockEv>

0808dd1a <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 808dd1a:	b510      	push	{r4, lr}
 808dd1c:	4604      	mov	r4, r0
      lock_(_lock) {
 808dd1e:	6001      	str	r1, [r0, #0]
 808dd20:	7102      	strb	r2, [r0, #4]
    if (lock_) {
 808dd22:	b10a      	cbz	r2, 808dd28 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 808dd24:	f7ff fff6 	bl	808dd14 <_ZN9FuelGauge4lockEv>
}
 808dd28:	4620      	mov	r0, r4
 808dd2a:	bd10      	pop	{r4, pc}

0808dd2c <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
 808dd2c:	b538      	push	{r3, r4, r5, lr}
 808dd2e:	4604      	mov	r4, r0
 808dd30:	460d      	mov	r5, r1
            return &Wire3;
 808dd32:	f002 fe13 	bl	809095c <_Z20__fetch_global_Wire3v>
        : FuelGauge(*fuelWireInstance(), _lock)
 808dd36:	462a      	mov	r2, r5
            return &Wire3;
 808dd38:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
 808dd3a:	4620      	mov	r0, r4
 808dd3c:	f7ff ffed 	bl	808dd1a <_ZN9FuelGaugeC1ER7TwoWireb>
}
 808dd40:	4620      	mov	r0, r4
 808dd42:	bd38      	pop	{r3, r4, r5, pc}

0808dd44 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
 808dd44:	6800      	ldr	r0, [r0, #0]
 808dd46:	f000 b9dc 	b.w	808e102 <_ZN7TwoWire6unlockEv>

0808dd4a <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
 808dd4a:	b510      	push	{r4, lr}
    if (lock_) {
 808dd4c:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
 808dd4e:	4604      	mov	r4, r0
    if (lock_) {
 808dd50:	b10b      	cbz	r3, 808dd56 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 808dd52:	f7ff fff7 	bl	808dd44 <_ZN9FuelGauge6unlockEv>
}
 808dd56:	4620      	mov	r0, r4
 808dd58:	bd10      	pop	{r4, pc}

0808dd5a <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 808dd5a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 808dd5e:	4604      	mov	r4, r0
 808dd60:	460d      	mov	r5, r1
 808dd62:	4617      	mov	r7, r2
 808dd64:	461e      	mov	r6, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
 808dd66:	f7ff ffd5 	bl	808dd14 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808dd6a:	2336      	movs	r3, #54	; 0x36
 808dd6c:	f88d 3000 	strb.w	r3, [sp]
 808dd70:	2300      	movs	r3, #0
 808dd72:	f04f 0801 	mov.w	r8, #1
 808dd76:	9301      	str	r3, [sp, #4]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
 808dd78:	230a      	movs	r3, #10
    i2c_.beginTransmission(config);
 808dd7a:	4669      	mov	r1, sp
 808dd7c:	6820      	ldr	r0, [r4, #0]
 808dd7e:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808dd80:	f88d 8008 	strb.w	r8, [sp, #8]
 808dd84:	f000 f991 	bl	808e0aa <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
 808dd88:	6820      	ldr	r0, [r4, #0]
 808dd8a:	4629      	mov	r1, r5
 808dd8c:	6803      	ldr	r3, [r0, #0]
 808dd8e:	689b      	ldr	r3, [r3, #8]
 808dd90:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
 808dd92:	4641      	mov	r1, r8
 808dd94:	6820      	ldr	r0, [r4, #0]
 808dd96:	f000 f9a0 	bl	808e0da <_ZN7TwoWire15endTransmissionEh>
 808dd9a:	4605      	mov	r5, r0
 808dd9c:	b140      	cbz	r0, 808ddb0 <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
 808dd9e:	f06f 059f 	mvn.w	r5, #159	; 0x9f

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 808dda2:	4620      	mov	r0, r4
 808dda4:	f7ff ffce 	bl	808dd44 <_ZN9FuelGauge6unlockEv>
}
 808dda8:	4628      	mov	r0, r5
 808ddaa:	b004      	add	sp, #16
 808ddac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
 808ddb0:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
 808ddb2:	4669      	mov	r1, sp
 808ddb4:	6820      	ldr	r0, [r4, #0]
 808ddb6:	9301      	str	r3, [sp, #4]
 808ddb8:	f000 f944 	bl	808e044 <_ZN7TwoWire11requestFromERK16WireTransmission>
 808ddbc:	2802      	cmp	r0, #2
 808ddbe:	d1ee      	bne.n	808dd9e <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
 808ddc0:	6820      	ldr	r0, [r4, #0]
 808ddc2:	6803      	ldr	r3, [r0, #0]
 808ddc4:	695b      	ldr	r3, [r3, #20]
 808ddc6:	4798      	blx	r3
 808ddc8:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
 808ddca:	6820      	ldr	r0, [r4, #0]
 808ddcc:	6803      	ldr	r3, [r0, #0]
 808ddce:	695b      	ldr	r3, [r3, #20]
 808ddd0:	4798      	blx	r3
 808ddd2:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
 808ddd4:	e7e5      	b.n	808dda2 <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>
	...

0808ddd8 <_ZN9FuelGauge6getSoCEv>:
    byte MSB = 0;
 808ddd8:	2300      	movs	r3, #0
float FuelGauge::getSoC() {
 808ddda:	b513      	push	{r0, r1, r4, lr}
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 808dddc:	2104      	movs	r1, #4
    byte MSB = 0;
 808ddde:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
 808dde2:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 808dde6:	f10d 0206 	add.w	r2, sp, #6
 808ddea:	f10d 0307 	add.w	r3, sp, #7
 808ddee:	f7ff ffb4 	bl	808dd5a <_ZN9FuelGauge12readRegisterEhRhS0_>
 808ddf2:	b9a0      	cbnz	r0, 808de1e <_ZN9FuelGauge6getSoCEv+0x46>
        float decimal = LSB / 256.0;
 808ddf4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 808ddf8:	f002 fff8 	bl	8090dec <__aeabi_i2d>
 808ddfc:	2200      	movs	r2, #0
 808ddfe:	4b09      	ldr	r3, [pc, #36]	; (808de24 <_ZN9FuelGauge6getSoCEv+0x4c>)
 808de00:	f003 f85e 	bl	8090ec0 <__aeabi_dmul>
 808de04:	f003 fb16 	bl	8091434 <__aeabi_d2f>
 808de08:	4604      	mov	r4, r0
        return MSB + decimal;
 808de0a:	f89d 0006 	ldrb.w	r0, [sp, #6]
 808de0e:	f003 fc1b 	bl	8091648 <__aeabi_i2f>
 808de12:	4601      	mov	r1, r0
 808de14:	4620      	mov	r0, r4
 808de16:	f003 fb63 	bl	80914e0 <__addsf3>
}
 808de1a:	b002      	add	sp, #8
 808de1c:	bd10      	pop	{r4, pc}
        return -1.0f;
 808de1e:	4802      	ldr	r0, [pc, #8]	; (808de28 <_ZN9FuelGauge6getSoCEv+0x50>)
 808de20:	e7fb      	b.n	808de1a <_ZN9FuelGauge6getSoCEv+0x42>
 808de22:	bf00      	nop
 808de24:	3f700000 	.word	0x3f700000
 808de28:	bf800000 	.word	0xbf800000

0808de2c <_ZN9FuelGauge18readConfigRegisterERhS0_>:
int FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
 808de2c:	4613      	mov	r3, r2
    return readRegister(CONFIG_REGISTER, MSB, LSB);
 808de2e:	460a      	mov	r2, r1
 808de30:	210c      	movs	r1, #12
 808de32:	f7ff bf92 	b.w	808dd5a <_ZN9FuelGauge12readRegisterEhRhS0_>
	...

0808de38 <_ZN9FuelGauge16getNormalizedSoCEv>:
float FuelGauge::getNormalizedSoC() {
 808de38:	b573      	push	{r0, r1, r4, r5, r6, lr}
 808de3a:	4605      	mov	r5, r0
      { _M_device.lock(); }
 808de3c:	f7ff ff6a 	bl	808dd14 <_ZN9FuelGauge4lockEv>
    PMIC power(true);
 808de40:	2101      	movs	r1, #1
 808de42:	a801      	add	r0, sp, #4
 808de44:	f001 fc11 	bl	808f66a <_ZN4PMICC1Eb>
    const float soc = getSoC() / 100.0f;
 808de48:	4628      	mov	r0, r5
 808de4a:	f7ff ffc5 	bl	808ddd8 <_ZN9FuelGauge6getSoCEv>
 808de4e:	4928      	ldr	r1, [pc, #160]	; (808def0 <_ZN9FuelGauge16getNormalizedSoCEv+0xb8>)
 808de50:	f003 fd02 	bl	8091858 <__aeabi_fdiv>
    if (soc < 0) {
 808de54:	2100      	movs	r1, #0
    const float soc = getSoC() / 100.0f;
 808de56:	4606      	mov	r6, r0
    if (soc < 0) {
 808de58:	f003 fde8 	bl	8091a2c <__aeabi_fcmplt>
 808de5c:	2800      	cmp	r0, #0
 808de5e:	d145      	bne.n	808deec <_ZN9FuelGauge16getNormalizedSoCEv+0xb4>
    const float termV = ((float)power.getChargeVoltageValue()) / 1000.0f;
 808de60:	a801      	add	r0, sp, #4
 808de62:	f001 fc65 	bl	808f730 <_ZN4PMIC21getChargeVoltageValueEv>
 808de66:	f003 fbeb 	bl	8091640 <__aeabi_ui2f>
 808de6a:	4922      	ldr	r1, [pc, #136]	; (808def4 <_ZN9FuelGauge16getNormalizedSoCEv+0xbc>)
 808de6c:	f003 fcf4 	bl	8091858 <__aeabi_fdiv>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 808de70:	4921      	ldr	r1, [pc, #132]	; (808def8 <_ZN9FuelGauge16getNormalizedSoCEv+0xc0>)
 808de72:	4604      	mov	r4, r0
 808de74:	f003 fdf8 	bl	8091a68 <__aeabi_fcmpgt>
 808de78:	b900      	cbnz	r0, 808de7c <_ZN9FuelGauge16getNormalizedSoCEv+0x44>
	return __b;
      return __a;
 808de7a:	4c1f      	ldr	r4, [pc, #124]	; (808def8 <_ZN9FuelGauge16getNormalizedSoCEv+0xc0>)
    const float referenceMaxV = std::max(reference100PercentV, termV) - magicVoltageDiff;
 808de7c:	4620      	mov	r0, r4
 808de7e:	491f      	ldr	r1, [pc, #124]	; (808defc <_ZN9FuelGauge16getNormalizedSoCEv+0xc4>)
 808de80:	f003 fb2c 	bl	80914dc <__aeabi_fsub>
 808de84:	4601      	mov	r1, r0
    const float maxCharge = (1.0f - (reference100PercentV - referenceMaxV)) - magicError;
 808de86:	481c      	ldr	r0, [pc, #112]	; (808def8 <_ZN9FuelGauge16getNormalizedSoCEv+0xc0>)
 808de88:	f003 fb28 	bl	80914dc <__aeabi_fsub>
 808de8c:	4601      	mov	r1, r0
 808de8e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 808de92:	f003 fb23 	bl	80914dc <__aeabi_fsub>
 808de96:	491a      	ldr	r1, [pc, #104]	; (808df00 <_ZN9FuelGauge16getNormalizedSoCEv+0xc8>)
 808de98:	f003 fb20 	bl	80914dc <__aeabi_fsub>
 808de9c:	4601      	mov	r1, r0
    float normalized = (soc - minCharge) * (1.0f / (maxCharge - minCharge)) + 0.0f;
 808de9e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 808dea2:	f003 fcd9 	bl	8091858 <__aeabi_fdiv>
 808dea6:	4631      	mov	r1, r6
 808dea8:	f003 fc22 	bl	80916f0 <__aeabi_fmul>
 808deac:	2100      	movs	r1, #0
 808deae:	f003 fb17 	bl	80914e0 <__addsf3>
    if (normalized < 0.0f) {
 808deb2:	2100      	movs	r1, #0
    float normalized = (soc - minCharge) * (1.0f / (maxCharge - minCharge)) + 0.0f;
 808deb4:	4604      	mov	r4, r0
    if (normalized < 0.0f) {
 808deb6:	f003 fdb9 	bl	8091a2c <__aeabi_fcmplt>
 808deba:	b9a8      	cbnz	r0, 808dee8 <_ZN9FuelGauge16getNormalizedSoCEv+0xb0>
    } else if (normalized > 1.0f) {
 808debc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 808dec0:	4620      	mov	r0, r4
 808dec2:	f003 fdd1 	bl	8091a68 <__aeabi_fcmpgt>
 808dec6:	b108      	cbz	r0, 808decc <_ZN9FuelGauge16getNormalizedSoCEv+0x94>
        normalized = 1.0f;
 808dec8:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
    return normalized * 100.0f;
 808decc:	4620      	mov	r0, r4
 808dece:	4908      	ldr	r1, [pc, #32]	; (808def0 <_ZN9FuelGauge16getNormalizedSoCEv+0xb8>)
 808ded0:	f003 fc0e 	bl	80916f0 <__aeabi_fmul>
 808ded4:	4604      	mov	r4, r0
    PMIC power(true);
 808ded6:	a801      	add	r0, sp, #4
 808ded8:	f001 fbe6 	bl	808f6a8 <_ZN4PMICD1Ev>
      { _M_device.unlock(); }
 808dedc:	4628      	mov	r0, r5
 808dede:	f7ff ff31 	bl	808dd44 <_ZN9FuelGauge6unlockEv>
}
 808dee2:	4620      	mov	r0, r4
 808dee4:	b002      	add	sp, #8
 808dee6:	bd70      	pop	{r4, r5, r6, pc}
        normalized = 0.0f;
 808dee8:	2400      	movs	r4, #0
 808deea:	e7ef      	b.n	808decc <_ZN9FuelGauge16getNormalizedSoCEv+0x94>
        return -1.0f;
 808deec:	4c05      	ldr	r4, [pc, #20]	; (808df04 <_ZN9FuelGauge16getNormalizedSoCEv+0xcc>)
 808deee:	e7f2      	b.n	808ded6 <_ZN9FuelGauge16getNormalizedSoCEv+0x9e>
 808def0:	42c80000 	.word	0x42c80000
 808def4:	447a0000 	.word	0x447a0000
 808def8:	40866666 	.word	0x40866666
 808defc:	3dcccccd 	.word	0x3dcccccd
 808df00:	3d4ccccd 	.word	0x3d4ccccd
 808df04:	bf800000 	.word	0xbf800000

0808df08 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
 808df08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 808df0c:	4616      	mov	r6, r2
 808df0e:	4604      	mov	r4, r0
 808df10:	461d      	mov	r5, r3
 808df12:	460f      	mov	r7, r1
      { _M_device.lock(); }
 808df14:	f7ff fefe 	bl	808dd14 <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808df18:	2336      	movs	r3, #54	; 0x36
 808df1a:	f88d 3000 	strb.w	r3, [sp]
 808df1e:	2300      	movs	r3, #0
 808df20:	f04f 0801 	mov.w	r8, #1
 808df24:	9301      	str	r3, [sp, #4]
    timeout_ = ms;
 808df26:	230a      	movs	r3, #10
    i2c_.beginTransmission(config);
 808df28:	4669      	mov	r1, sp
 808df2a:	6820      	ldr	r0, [r4, #0]
 808df2c:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808df2e:	f88d 8008 	strb.w	r8, [sp, #8]
 808df32:	f000 f8ba 	bl	808e0aa <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
 808df36:	6820      	ldr	r0, [r4, #0]
 808df38:	4639      	mov	r1, r7
 808df3a:	6803      	ldr	r3, [r0, #0]
 808df3c:	689b      	ldr	r3, [r3, #8]
 808df3e:	4798      	blx	r3
    i2c_.write(MSB);
 808df40:	6820      	ldr	r0, [r4, #0]
 808df42:	4631      	mov	r1, r6
 808df44:	6803      	ldr	r3, [r0, #0]
 808df46:	689b      	ldr	r3, [r3, #8]
 808df48:	4798      	blx	r3
    i2c_.write(LSB);
 808df4a:	6820      	ldr	r0, [r4, #0]
 808df4c:	4629      	mov	r1, r5
 808df4e:	6803      	ldr	r3, [r0, #0]
 808df50:	689b      	ldr	r3, [r3, #8]
 808df52:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
 808df54:	4641      	mov	r1, r8
 808df56:	6820      	ldr	r0, [r4, #0]
 808df58:	f000 f8bf 	bl	808e0da <_ZN7TwoWire15endTransmissionEh>
 808df5c:	2800      	cmp	r0, #0
 808df5e:	bf0c      	ite	eq
 808df60:	2500      	moveq	r5, #0
 808df62:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
 808df66:	4620      	mov	r0, r4
 808df68:	f7ff feec 	bl	808dd44 <_ZN9FuelGauge6unlockEv>
}
 808df6c:	4628      	mov	r0, r5
 808df6e:	b004      	add	sp, #16
 808df70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808df74 <_ZN9FuelGauge5sleepEv>:
int FuelGauge::sleep() {
 808df74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808df76:	4605      	mov	r5, r0
      { _M_device.lock(); }
 808df78:	f7ff fecc 	bl	808dd14 <_ZN9FuelGauge4lockEv>
    byte MSB = 0;
 808df7c:	2300      	movs	r3, #0
    CHECK(readConfigRegister(MSB, LSB));
 808df7e:	4628      	mov	r0, r5
 808df80:	f10d 0207 	add.w	r2, sp, #7
 808df84:	f10d 0106 	add.w	r1, sp, #6
    byte MSB = 0;
 808df88:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
 808df8c:	f88d 3007 	strb.w	r3, [sp, #7]
    CHECK(readConfigRegister(MSB, LSB));
 808df90:	f7ff ff4c 	bl	808de2c <_ZN9FuelGauge18readConfigRegisterERhS0_>
 808df94:	1e04      	subs	r4, r0, #0
 808df96:	db0b      	blt.n	808dfb0 <_ZN9FuelGauge5sleepEv+0x3c>
    CHECK(writeRegister(CONFIG_REGISTER, MSB, (LSB | 0b10000000)));
 808df98:	f89d 3007 	ldrb.w	r3, [sp, #7]
 808df9c:	210c      	movs	r1, #12
 808df9e:	4628      	mov	r0, r5
 808dfa0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 808dfa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 808dfa8:	f7ff ffae 	bl	808df08 <_ZN9FuelGauge13writeRegisterEhhh>
 808dfac:	ea00 74e0 	and.w	r4, r0, r0, asr #31
      { _M_device.unlock(); }
 808dfb0:	4628      	mov	r0, r5
 808dfb2:	f7ff fec7 	bl	808dd44 <_ZN9FuelGauge6unlockEv>
}
 808dfb6:	4620      	mov	r0, r4
 808dfb8:	b003      	add	sp, #12
 808dfba:	bd30      	pop	{r4, r5, pc}

0808dfbc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 808dfbc:	4770      	bx	lr

0808dfbe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808dfbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808dfc0:	4606      	mov	r6, r0
 808dfc2:	4615      	mov	r5, r2
 808dfc4:	460c      	mov	r4, r1
 808dfc6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808dfc8:	42bc      	cmp	r4, r7
 808dfca:	d006      	beq.n	808dfda <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 808dfcc:	6833      	ldr	r3, [r6, #0]
 808dfce:	4630      	mov	r0, r6
 808dfd0:	689b      	ldr	r3, [r3, #8]
 808dfd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 808dfd6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 808dfd8:	e7f6      	b.n	808dfc8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 808dfda:	4628      	mov	r0, r5
 808dfdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808dfde <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 808dfde:	2200      	movs	r2, #0
 808dfe0:	7c00      	ldrb	r0, [r0, #16]
 808dfe2:	f7ff b83b 	b.w	808d05c <hal_i2c_write>

0808dfe6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 808dfe6:	2100      	movs	r1, #0
 808dfe8:	7c00      	ldrb	r0, [r0, #16]
 808dfea:	f7ff b83f 	b.w	808d06c <hal_i2c_available>

0808dfee <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 808dfee:	2100      	movs	r1, #0
 808dff0:	7c00      	ldrb	r0, [r0, #16]
 808dff2:	f7ff b843 	b.w	808d07c <hal_i2c_read>

0808dff6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 808dff6:	2100      	movs	r1, #0
 808dff8:	7c00      	ldrb	r0, [r0, #16]
 808dffa:	f7ff b847 	b.w	808d08c <hal_i2c_peek>

0808dffe <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 808dffe:	2100      	movs	r1, #0
 808e000:	7c00      	ldrb	r0, [r0, #16]
 808e002:	f7ff b84b 	b.w	808d09c <hal_i2c_flush>

0808e006 <_ZN7TwoWireD0Ev>:
 808e006:	b510      	push	{r4, lr}
 808e008:	4604      	mov	r4, r0
 808e00a:	2114      	movs	r1, #20
 808e00c:	f002 fceb 	bl	80909e6 <_ZdlPvj>
 808e010:	4620      	mov	r0, r4
 808e012:	bd10      	pop	{r4, pc}

0808e014 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 808e014:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808e016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808e01a:	4604      	mov	r4, r0
 808e01c:	4608      	mov	r0, r1
 808e01e:	2100      	movs	r1, #0
 808e020:	e9c4 1301 	strd	r1, r3, [r4, #4]
 808e024:	4b03      	ldr	r3, [pc, #12]	; (808e034 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 808e026:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 808e028:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 808e02a:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 808e02c:	f7ff f846 	bl	808d0bc <hal_i2c_init>
}
 808e030:	4620      	mov	r0, r4
 808e032:	bd10      	pop	{r4, pc}
 808e034:	08095008 	.word	0x08095008

0808e038 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 808e038:	2300      	movs	r3, #0
 808e03a:	7c00      	ldrb	r0, [r0, #16]
 808e03c:	461a      	mov	r2, r3
 808e03e:	4619      	mov	r1, r3
 808e040:	f7fe bff4 	b.w	808d02c <hal_i2c_begin>

0808e044 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 808e044:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 808e046:	2200      	movs	r2, #0
 808e048:	2314      	movs	r3, #20
 808e04a:	e9cd 2201 	strd	r2, r2, [sp, #4]
 808e04e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 808e052:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 808e054:	7c00      	ldrb	r0, [r0, #16]
 808e056:	f88d 3008 	strb.w	r3, [sp, #8]
 808e05a:	684b      	ldr	r3, [r1, #4]
 808e05c:	9303      	str	r3, [sp, #12]
 808e05e:	68cb      	ldr	r3, [r1, #12]
 808e060:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 808e062:	7a0b      	ldrb	r3, [r1, #8]
 808e064:	a901      	add	r1, sp, #4
 808e066:	9305      	str	r3, [sp, #20]
 808e068:	f7ff f840 	bl	808d0ec <hal_i2c_request_ex>
}
 808e06c:	b007      	add	sp, #28
 808e06e:	f85d fb04 	ldr.w	pc, [sp], #4

0808e072 <_ZN7TwoWire11requestFromEhjh>:
{
 808e072:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 808e074:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808e076:	f88d 1000 	strb.w	r1, [sp]
 808e07a:	f04f 0164 	mov.w	r1, #100	; 0x64
 808e07e:	bf18      	it	ne
 808e080:	2301      	movne	r3, #1
 808e082:	9103      	str	r1, [sp, #12]
 808e084:	4669      	mov	r1, sp
    size_ = size;
 808e086:	9201      	str	r2, [sp, #4]
 808e088:	f88d 3008 	strb.w	r3, [sp, #8]
 808e08c:	f7ff ffda 	bl	808e044 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 808e090:	b005      	add	sp, #20
 808e092:	f85d fb04 	ldr.w	pc, [sp], #4

0808e096 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 808e096:	2301      	movs	r3, #1
 808e098:	f7ff bfeb 	b.w	808e072 <_ZN7TwoWire11requestFromEhjh>

0808e09c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 808e09c:	2200      	movs	r2, #0
 808e09e:	7c00      	ldrb	r0, [r0, #16]
 808e0a0:	f7fe bfcc 	b.w	808d03c <hal_i2c_begin_transmission>

0808e0a4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 808e0a4:	b2c9      	uxtb	r1, r1
 808e0a6:	f7ff bff9 	b.w	808e09c <_ZN7TwoWire17beginTransmissionEh>

0808e0aa <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
 808e0aa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 808e0ac:	2200      	movs	r2, #0
 808e0ae:	460b      	mov	r3, r1
 808e0b0:	e9cd 2201 	strd	r2, r2, [sp, #4]
 808e0b4:	2214      	movs	r2, #20
 808e0b6:	f8ad 2004 	strh.w	r2, [sp, #4]
    };
 808e0ba:	685a      	ldr	r2, [r3, #4]
      .address = address_,
 808e0bc:	7809      	ldrb	r1, [r1, #0]
    };
 808e0be:	9203      	str	r2, [sp, #12]
 808e0c0:	68da      	ldr	r2, [r3, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 808e0c2:	7a1b      	ldrb	r3, [r3, #8]
    };
 808e0c4:	9204      	str	r2, [sp, #16]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
 808e0c6:	7c00      	ldrb	r0, [r0, #16]
 808e0c8:	aa01      	add	r2, sp, #4
 808e0ca:	f88d 1008 	strb.w	r1, [sp, #8]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 808e0ce:	9305      	str	r3, [sp, #20]
 808e0d0:	f7fe ffb4 	bl	808d03c <hal_i2c_begin_transmission>
}
 808e0d4:	b007      	add	sp, #28
 808e0d6:	f85d fb04 	ldr.w	pc, [sp], #4

0808e0da <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 808e0da:	2200      	movs	r2, #0
 808e0dc:	7c00      	ldrb	r0, [r0, #16]
 808e0de:	f7fe bfb5 	b.w	808d04c <hal_i2c_end_transmission>

0808e0e2 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 808e0e2:	2101      	movs	r1, #1
 808e0e4:	f7ff bff9 	b.w	808e0da <_ZN7TwoWire15endTransmissionEh>

0808e0e8 <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
 808e0e8:	2100      	movs	r1, #0
 808e0ea:	7c00      	ldrb	r0, [r0, #16]
 808e0ec:	f7fe bfde 	b.w	808d0ac <hal_i2c_is_enabled>

0808e0f0 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 808e0f0:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
 808e0f2:	2100      	movs	r1, #0
 808e0f4:	7c00      	ldrb	r0, [r0, #16]
 808e0f6:	f7fe ffe9 	bl	808d0cc <hal_i2c_lock>
}
 808e0fa:	fab0 f080 	clz	r0, r0
 808e0fe:	0940      	lsrs	r0, r0, #5
 808e100:	bd08      	pop	{r3, pc}

0808e102 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 808e102:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
 808e104:	2100      	movs	r1, #0
 808e106:	7c00      	ldrb	r0, [r0, #16]
 808e108:	f7fe ffe8 	bl	808d0dc <hal_i2c_unlock>
}
 808e10c:	fab0 f080 	clz	r0, r0
 808e110:	0940      	lsrs	r0, r0, #5
 808e112:	bd08      	pop	{r3, pc}

0808e114 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 808e114:	4700      	bx	r0
	...

0808e118 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 808e118:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 808e11c:	2400      	movs	r4, #0
{
 808e11e:	461d      	mov	r5, r3
 808e120:	460f      	mov	r7, r1
 808e122:	4690      	mov	r8, r2
 808e124:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
 808e126:	f7fe ff69 	bl	808cffc <HAL_Interrupts_Detach>
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 808e12a:	2304      	movs	r3, #4
  if (priority >= 0) {
 808e12c:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 808e12e:	f88d 300c 	strb.w	r3, [sp, #12]
    extra.IRQChannelSubPriority = subpriority;
 808e132:	bfa8      	it	ge
 808e134:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    HAL_InterruptExtraConfiguration extra = {0};
 808e138:	f8ad 400d 	strh.w	r4, [sp, #13]
 808e13c:	f88d 400f 	strb.w	r4, [sp, #15]
    return &extra;
 808e140:	bfa4      	itt	ge
 808e142:	ac03      	addge	r4, sp, #12
    extra.IRQChannelSubPriority = subpriority;
 808e144:	f88d 300e 	strbge.w	r3, [sp, #14]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 808e148:	463a      	mov	r2, r7
 808e14a:	4643      	mov	r3, r8
 808e14c:	4630      	mov	r0, r6
 808e14e:	4906      	ldr	r1, [pc, #24]	; (808e168 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
 808e150:	9400      	str	r4, [sp, #0]
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 808e152:	bfa8      	it	ge
 808e154:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 808e158:	f7fe ff48 	bl	808cfec <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 808e15c:	fab0 f080 	clz	r0, r0
 808e160:	0940      	lsrs	r0, r0, #5
 808e162:	b004      	add	sp, #16
 808e164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808e168:	0808e115 	.word	0x0808e115

0808e16c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 808e16c:	4770      	bx	lr

0808e16e <_ZN9IPAddressD0Ev>:
 808e16e:	b510      	push	{r4, lr}
 808e170:	4604      	mov	r4, r0
 808e172:	2108      	movs	r1, #8
 808e174:	f002 fc37 	bl	80909e6 <_ZdlPvj>
 808e178:	4620      	mov	r0, r4
 808e17a:	bd10      	pop	{r4, pc}

0808e17c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 808e17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808e17e:	460e      	mov	r6, r1
 808e180:	2400      	movs	r4, #0
 808e182:	f100 0708 	add.w	r7, r0, #8
 808e186:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 808e188:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 808e18c:	220a      	movs	r2, #10
 808e18e:	4630      	mov	r0, r6
 808e190:	f001 fba8 	bl	808f8e4 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808e194:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808e196:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 808e198:	d101      	bne.n	808e19e <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 808e19a:	4620      	mov	r0, r4
 808e19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 808e19e:	2c00      	cmp	r4, #0
 808e1a0:	d0f2      	beq.n	808e188 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 808e1a2:	212e      	movs	r1, #46	; 0x2e
 808e1a4:	4630      	mov	r0, r6
 808e1a6:	f001 fb84 	bl	808f8b2 <_ZN5Print5printEc>
 808e1aa:	4404      	add	r4, r0
 808e1ac:	e7ec      	b.n	808e188 <_ZNK9IPAddress7printToER5Print+0xc>
	...

0808e1b0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 808e1b0:	4a02      	ldr	r2, [pc, #8]	; (808e1bc <_ZN9IPAddressC1Ev+0xc>)
 808e1b2:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 808e1b4:	2200      	movs	r2, #0
 808e1b6:	6042      	str	r2, [r0, #4]
}
 808e1b8:	4770      	bx	lr
 808e1ba:	bf00      	nop
 808e1bc:	08095030 	.word	0x08095030

0808e1c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 808e1c0:	4a02      	ldr	r2, [pc, #8]	; (808e1cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 808e1c2:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 808e1c4:	680a      	ldr	r2, [r1, #0]
 808e1c6:	6042      	str	r2, [r0, #4]
}
 808e1c8:	4770      	bx	lr
 808e1ca:	bf00      	nop
 808e1cc:	08095030 	.word	0x08095030

0808e1d0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 808e1d0:	4a01      	ldr	r2, [pc, #4]	; (808e1d8 <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 808e1d2:	e9c0 2100 	strd	r2, r1, [r0]
}
 808e1d6:	4770      	bx	lr
 808e1d8:	08095030 	.word	0x08095030

0808e1dc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 808e1dc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 808e1de:	f89d 4008 	ldrb.w	r4, [sp, #8]
 808e1e2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 808e1e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 808e1ea:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 808e1ee:	6044      	str	r4, [r0, #4]
}
 808e1f0:	bd10      	pop	{r4, pc}
	...

0808e1f4 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 808e1f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808e1f6:	4d04      	ldr	r5, [pc, #16]	; (808e208 <_ZN9IPAddressC1Ehhhh+0x14>)
 808e1f8:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 808e1fa:	f89d 5018 	ldrb.w	r5, [sp, #24]
 808e1fe:	9500      	str	r5, [sp, #0]
 808e200:	f7ff ffec 	bl	808e1dc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 808e204:	b003      	add	sp, #12
 808e206:	bd30      	pop	{r4, r5, pc}
 808e208:	08095030 	.word	0x08095030

0808e20c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 808e20c:	2201      	movs	r2, #1
 808e20e:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 808e212:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 808e216:	4618      	mov	r0, r3
 808e218:	2901      	cmp	r1, #1
 808e21a:	d108      	bne.n	808e22e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 808e21c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 808e220:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 808e224:	3a01      	subs	r2, #1
 808e226:	f103 0310 	add.w	r3, r3, #16
 808e22a:	d1f2      	bne.n	808e212 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 808e22c:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 808e22e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 808e230:	bf04      	itt	eq
 808e232:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 808e236:	1852      	addeq	r2, r2, r1
 808e238:	e7f4      	b.n	808e224 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

0808e23a <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 808e23a:	b40e      	push	{r1, r2, r3}
 808e23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808e240:	b087      	sub	sp, #28
 808e242:	af00      	add	r7, sp, #0
 808e244:	f107 0534 	add.w	r5, r7, #52	; 0x34
 808e248:	f855 8b04 	ldr.w	r8, [r5], #4
 808e24c:	4604      	mov	r4, r0
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 808e24e:	462b      	mov	r3, r5
 808e250:	4642      	mov	r2, r8
 808e252:	2110      	movs	r1, #16
 808e254:	f107 0008 	add.w	r0, r7, #8
    va_start(args, fmt);
 808e258:	607d      	str	r5, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 808e25a:	f7ff f98d 	bl	808d578 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 808e25e:	280f      	cmp	r0, #15
 808e260:	d91b      	bls.n	808e29a <_ZN5spark10JSONWriter6printfEPKcz+0x60>
        char buf[n + 1]; // Use larger buffer
 808e262:	f100 0308 	add.w	r3, r0, #8
 808e266:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 808e26a:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 808e26c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 808e270:	4642      	mov	r2, r8
 808e272:	1c41      	adds	r1, r0, #1
 808e274:	462b      	mov	r3, r5
 808e276:	4668      	mov	r0, sp
        va_start(args, fmt);
 808e278:	607d      	str	r5, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 808e27a:	f7ff f97d 	bl	808d578 <vsnprintf>
        if (n > 0) {
 808e27e:	1e02      	subs	r2, r0, #0
 808e280:	dd04      	ble.n	808e28c <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
 808e282:	6823      	ldr	r3, [r4, #0]
 808e284:	4669      	mov	r1, sp
 808e286:	4620      	mov	r0, r4
 808e288:	689b      	ldr	r3, [r3, #8]
 808e28a:	4798      	blx	r3
 808e28c:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 808e28e:	371c      	adds	r7, #28
 808e290:	46bd      	mov	sp, r7
 808e292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 808e296:	b003      	add	sp, #12
 808e298:	4770      	bx	lr
    } else if (n > 0) {
 808e29a:	2800      	cmp	r0, #0
 808e29c:	d0f7      	beq.n	808e28e <_ZN5spark10JSONWriter6printfEPKcz+0x54>
        write(buf, n);
 808e29e:	6823      	ldr	r3, [r4, #0]
 808e2a0:	4602      	mov	r2, r0
 808e2a2:	689b      	ldr	r3, [r3, #8]
 808e2a4:	4620      	mov	r0, r4
 808e2a6:	f107 0108 	add.w	r1, r7, #8
 808e2aa:	4798      	blx	r3
}
 808e2ac:	e7ef      	b.n	808e28e <_ZN5spark10JSONWriter6printfEPKcz+0x54>

0808e2ae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
 808e2ae:	b510      	push	{r4, lr}
 808e2b0:	4604      	mov	r4, r0
          _M_dispose();
 808e2b2:	6803      	ldr	r3, [r0, #0]
 808e2b4:	689b      	ldr	r3, [r3, #8]
 808e2b6:	4798      	blx	r3
          if (--_M_weak_count == 0)
 808e2b8:	68a3      	ldr	r3, [r4, #8]
 808e2ba:	3b01      	subs	r3, #1
 808e2bc:	60a3      	str	r3, [r4, #8]
 808e2be:	b92b      	cbnz	r3, 808e2cc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
 808e2c0:	6823      	ldr	r3, [r4, #0]
 808e2c2:	4620      	mov	r0, r4
    }
 808e2c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 808e2c8:	68db      	ldr	r3, [r3, #12]
 808e2ca:	4718      	bx	r3
    }
 808e2cc:	bd10      	pop	{r4, pc}

0808e2ce <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 808e2ce:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 808e2d0:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 808e2d2:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 808e2d6:	2201      	movs	r2, #1
 808e2d8:	689b      	ldr	r3, [r3, #8]
 808e2da:	f10d 0107 	add.w	r1, sp, #7
 808e2de:	4798      	blx	r3
}
 808e2e0:	b003      	add	sp, #12
 808e2e2:	f85d fb04 	ldr.w	pc, [sp], #4

0808e2e6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
 808e2e6:	b538      	push	{r3, r4, r5, lr}
 808e2e8:	680b      	ldr	r3, [r1, #0]
 808e2ea:	4604      	mov	r4, r0
 808e2ec:	6003      	str	r3, [r0, #0]
 808e2ee:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 808e2f0:	6843      	ldr	r3, [r0, #4]
 808e2f2:	429d      	cmp	r5, r3
 808e2f4:	d00c      	beq.n	808e310 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
 808e2f6:	b115      	cbz	r5, 808e2fe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
 808e2f8:	686b      	ldr	r3, [r5, #4]
 808e2fa:	3301      	adds	r3, #1
 808e2fc:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 808e2fe:	6860      	ldr	r0, [r4, #4]
 808e300:	b128      	cbz	r0, 808e30e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
 808e302:	6843      	ldr	r3, [r0, #4]
 808e304:	3b01      	subs	r3, #1
 808e306:	6043      	str	r3, [r0, #4]
 808e308:	b90b      	cbnz	r3, 808e30e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
 808e30a:	f7ff ffd0 	bl	808e2ae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
 808e30e:	6065      	str	r5, [r4, #4]
    class __shared_ptr
 808e310:	4620      	mov	r0, r4
 808e312:	bd38      	pop	{r3, r4, r5, pc}

0808e314 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 808e314:	460b      	mov	r3, r1
 808e316:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 808e318:	2200      	movs	r2, #0
 808e31a:	b510      	push	{r4, lr}
 808e31c:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 808e31e:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 808e322:	6083      	str	r3, [r0, #8]
    if (t) {
 808e324:	b90b      	cbnz	r3, 808e32a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 808e326:	4620      	mov	r0, r4
 808e328:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 808e32a:	f7ff ffdc 	bl	808e2e6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
 808e32e:	e7fa      	b.n	808e326 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

0808e330 <_ZNK5spark9JSONValue4typeEv>:
spark::JSONType spark::JSONValue::type() const {
 808e330:	4603      	mov	r3, r0
    if (!t_) {
 808e332:	6880      	ldr	r0, [r0, #8]
 808e334:	b320      	cbz	r0, 808e380 <_ZNK5spark9JSONValue4typeEv+0x50>
    switch (t_->type) {
 808e336:	7802      	ldrb	r2, [r0, #0]
 808e338:	2a03      	cmp	r2, #3
 808e33a:	d81a      	bhi.n	808e372 <_ZNK5spark9JSONValue4typeEv+0x42>
 808e33c:	e8df f002 	tbb	[pc, r2]
 808e340:	1b021704 	.word	0x1b021704
 808e344:	2005      	movs	r0, #5
 808e346:	4770      	bx	lr
        const char c = d_->json[t_->start];
 808e348:	681b      	ldr	r3, [r3, #0]
 808e34a:	685a      	ldr	r2, [r3, #4]
 808e34c:	6843      	ldr	r3, [r0, #4]
 808e34e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 808e350:	282d      	cmp	r0, #45	; 0x2d
 808e352:	d012      	beq.n	808e37a <_ZNK5spark9JSONValue4typeEv+0x4a>
 808e354:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 808e358:	2b09      	cmp	r3, #9
 808e35a:	d90e      	bls.n	808e37a <_ZNK5spark9JSONValue4typeEv+0x4a>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 808e35c:	2874      	cmp	r0, #116	; 0x74
 808e35e:	d00e      	beq.n	808e37e <_ZNK5spark9JSONValue4typeEv+0x4e>
 808e360:	2866      	cmp	r0, #102	; 0x66
 808e362:	d00c      	beq.n	808e37e <_ZNK5spark9JSONValue4typeEv+0x4e>
        return JSON_TYPE_INVALID;
 808e364:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 808e368:	4258      	negs	r0, r3
 808e36a:	4158      	adcs	r0, r3
 808e36c:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 808e36e:	2006      	movs	r0, #6
 808e370:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 808e372:	2000      	movs	r0, #0
 808e374:	4770      	bx	lr
        return JSON_TYPE_STRING;
 808e376:	2004      	movs	r0, #4
 808e378:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 808e37a:	2003      	movs	r0, #3
 808e37c:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 808e37e:	2002      	movs	r0, #2
}
 808e380:	4770      	bx	lr

0808e382 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 808e382:	b510      	push	{r4, lr}
 808e384:	4604      	mov	r4, r0
    switch (type()) {
 808e386:	f7ff ffd3 	bl	808e330 <_ZNK5spark9JSONValue4typeEv>
 808e38a:	2802      	cmp	r0, #2
 808e38c:	d00e      	beq.n	808e3ac <_ZNK5spark9JSONValue5toIntEv+0x2a>
 808e38e:	1ec3      	subs	r3, r0, #3
 808e390:	b2db      	uxtb	r3, r3
 808e392:	2b01      	cmp	r3, #1
 808e394:	d814      	bhi.n	808e3c0 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 808e396:	6822      	ldr	r2, [r4, #0]
 808e398:	68a3      	ldr	r3, [r4, #8]
 808e39a:	6850      	ldr	r0, [r2, #4]
 808e39c:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 808e39e:	220a      	movs	r2, #10
}
 808e3a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 808e3a4:	2100      	movs	r1, #0
 808e3a6:	4418      	add	r0, r3
 808e3a8:	f003 bed0 	b.w	809214c <strtol>
        const char* const s = d_->json + t_->start;
 808e3ac:	6822      	ldr	r2, [r4, #0]
 808e3ae:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 808e3b0:	6852      	ldr	r2, [r2, #4]
 808e3b2:	685b      	ldr	r3, [r3, #4]
 808e3b4:	5cd0      	ldrb	r0, [r2, r3]
 808e3b6:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 808e3ba:	4258      	negs	r0, r3
 808e3bc:	4158      	adcs	r0, r3
}
 808e3be:	bd10      	pop	{r4, pc}
    switch (type()) {
 808e3c0:	2000      	movs	r0, #0
 808e3c2:	e7fc      	b.n	808e3be <_ZNK5spark9JSONValue5toIntEv+0x3c>

0808e3c4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 808e3c4:	460b      	mov	r3, r1
 808e3c6:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 808e3c8:	2200      	movs	r2, #0
 808e3ca:	b510      	push	{r4, lr}
 808e3cc:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 808e3ce:	e9c0 2200 	strd	r2, r2, [r0]
        n_(0) {
 808e3d2:	480d      	ldr	r0, [pc, #52]	; (808e408 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 808e3d4:	e9c4 0202 	strd	r0, r2, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 808e3d8:	b1a3      	cbz	r3, 808e404 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
 808e3da:	781a      	ldrb	r2, [r3, #0]
 808e3dc:	2a03      	cmp	r2, #3
 808e3de:	d006      	beq.n	808e3ee <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
 808e3e0:	b982      	cbnz	r2, 808e404 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 808e3e2:	680a      	ldr	r2, [r1, #0]
 808e3e4:	6850      	ldr	r0, [r2, #4]
 808e3e6:	685a      	ldr	r2, [r3, #4]
 808e3e8:	5c82      	ldrb	r2, [r0, r2]
 808e3ea:	2a6e      	cmp	r2, #110	; 0x6e
 808e3ec:	d007      	beq.n	808e3fe <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3a>
            s_ = d->json + t->start;
 808e3ee:	680a      	ldr	r2, [r1, #0]
 808e3f0:	6858      	ldr	r0, [r3, #4]
 808e3f2:	6852      	ldr	r2, [r2, #4]
            n_ = t->end - t->start;
 808e3f4:	689b      	ldr	r3, [r3, #8]
            s_ = d->json + t->start;
 808e3f6:	4402      	add	r2, r0
            n_ = t->end - t->start;
 808e3f8:	1a1b      	subs	r3, r3, r0
            s_ = d->json + t->start;
 808e3fa:	60a2      	str	r2, [r4, #8]
            n_ = t->end - t->start;
 808e3fc:	60e3      	str	r3, [r4, #12]
 808e3fe:	4620      	mov	r0, r4
 808e400:	f7ff ff71 	bl	808e2e6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 808e404:	4620      	mov	r0, r4
 808e406:	bd10      	pop	{r4, pc}
 808e408:	08094ad5 	.word	0x08094ad5

0808e40c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 808e40c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 808e40e:	2500      	movs	r5, #0
 808e410:	460b      	mov	r3, r1
 808e412:	4604      	mov	r4, r0
 808e414:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 808e416:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 808e41a:	e9c0 5502 	strd	r5, r5, [r0, #8]
 808e41e:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 808e422:	b14b      	cbz	r3, 808e438 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 808e424:	781a      	ldrb	r2, [r3, #0]
 808e426:	2a01      	cmp	r2, #1
 808e428:	d106      	bne.n	808e438 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 808e42a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 808e42e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 808e430:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 808e432:	6143      	str	r3, [r0, #20]
 808e434:	f7ff ff57 	bl	808e2e6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 808e438:	4620      	mov	r0, r4
 808e43a:	bd38      	pop	{r3, r4, r5, pc}

0808e43c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 808e43c:	b510      	push	{r4, lr}
    if (!n_) {
 808e43e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 808e440:	4604      	mov	r4, r0
    if (!n_) {
 808e442:	b163      	cbz	r3, 808e45e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 808e444:	6880      	ldr	r0, [r0, #8]
    --n_;
 808e446:	3b01      	subs	r3, #1
    k_ = t_; // Name
 808e448:	60e0      	str	r0, [r4, #12]
    ++t_;
 808e44a:	3010      	adds	r0, #16
 808e44c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 808e44e:	6120      	str	r0, [r4, #16]
    --n_;
 808e450:	6163      	str	r3, [r4, #20]
    if (n_) {
 808e452:	b113      	cbz	r3, 808e45a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 808e454:	f7ff feda 	bl	808e20c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 808e458:	60a0      	str	r0, [r4, #8]
    return true;
 808e45a:	2001      	movs	r0, #1
 808e45c:	e000      	b.n	808e460 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 808e45e:	4618      	mov	r0, r3
}
 808e460:	bd10      	pop	{r4, pc}

0808e462 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 808e462:	b510      	push	{r4, lr}
    write('}');
 808e464:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 808e466:	4604      	mov	r4, r0
    write('}');
 808e468:	f7ff ff31 	bl	808e2ce <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 808e46c:	2301      	movs	r3, #1
}
 808e46e:	4620      	mov	r0, r4
    state_ = NEXT;
 808e470:	7123      	strb	r3, [r4, #4]
}
 808e472:	bd10      	pop	{r4, pc}

0808e474 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 808e474:	b508      	push	{r3, lr}
    switch (state_) {
 808e476:	7903      	ldrb	r3, [r0, #4]
 808e478:	2b01      	cmp	r3, #1
 808e47a:	d002      	beq.n	808e482 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 808e47c:	2b02      	cmp	r3, #2
 808e47e:	d004      	beq.n	808e48a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 808e480:	bd08      	pop	{r3, pc}
        write(',');
 808e482:	212c      	movs	r1, #44	; 0x2c
        write(':');
 808e484:	f7ff ff23 	bl	808e2ce <_ZN5spark10JSONWriter5writeEc>
}
 808e488:	e7fa      	b.n	808e480 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 808e48a:	213a      	movs	r1, #58	; 0x3a
 808e48c:	e7fa      	b.n	808e484 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

0808e48e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 808e48e:	b510      	push	{r4, lr}
 808e490:	4604      	mov	r4, r0
    writeSeparator();
 808e492:	f7ff ffef 	bl	808e474 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 808e496:	4620      	mov	r0, r4
 808e498:	217b      	movs	r1, #123	; 0x7b
 808e49a:	f7ff ff18 	bl	808e2ce <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 808e49e:	2300      	movs	r3, #0
}
 808e4a0:	4620      	mov	r0, r4
    state_ = BEGIN;
 808e4a2:	7123      	strb	r3, [r4, #4]
}
 808e4a4:	bd10      	pop	{r4, pc}
	...

0808e4a8 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 808e4a8:	b538      	push	{r3, r4, r5, lr}
 808e4aa:	4604      	mov	r4, r0
 808e4ac:	460d      	mov	r5, r1
    writeSeparator();
 808e4ae:	f7ff ffe1 	bl	808e474 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 808e4b2:	6823      	ldr	r3, [r4, #0]
 808e4b4:	4620      	mov	r0, r4
 808e4b6:	462a      	mov	r2, r5
 808e4b8:	68db      	ldr	r3, [r3, #12]
 808e4ba:	4903      	ldr	r1, [pc, #12]	; (808e4c8 <_ZN5spark10JSONWriter5valueEi+0x20>)
 808e4bc:	4798      	blx	r3
    state_ = NEXT;
 808e4be:	2301      	movs	r3, #1
}
 808e4c0:	4620      	mov	r0, r4
    state_ = NEXT;
 808e4c2:	7123      	strb	r3, [r4, #4]
}
 808e4c4:	bd38      	pop	{r3, r4, r5, pc}
 808e4c6:	bf00      	nop
 808e4c8:	08094237 	.word	0x08094237

0808e4cc <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 808e4cc:	b538      	push	{r3, r4, r5, lr}
 808e4ce:	4604      	mov	r4, r0
 808e4d0:	460d      	mov	r5, r1
    writeSeparator();
 808e4d2:	f7ff ffcf 	bl	808e474 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 808e4d6:	6823      	ldr	r3, [r4, #0]
 808e4d8:	4620      	mov	r0, r4
 808e4da:	462a      	mov	r2, r5
 808e4dc:	68db      	ldr	r3, [r3, #12]
 808e4de:	4903      	ldr	r1, [pc, #12]	; (808e4ec <_ZN5spark10JSONWriter5valueEj+0x20>)
 808e4e0:	4798      	blx	r3
    state_ = NEXT;
 808e4e2:	2301      	movs	r3, #1
}
 808e4e4:	4620      	mov	r0, r4
    state_ = NEXT;
 808e4e6:	7123      	strb	r3, [r4, #4]
}
 808e4e8:	bd38      	pop	{r3, r4, r5, pc}
 808e4ea:	bf00      	nop
 808e4ec:	0809503c 	.word	0x0809503c

0808e4f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 808e4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808e4f4:	460d      	mov	r5, r1
 808e4f6:	4617      	mov	r7, r2
    write('"');
 808e4f8:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 808e4fa:	4604      	mov	r4, r0
    write('"');
 808e4fc:	f7ff fee7 	bl	808e2ce <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
 808e500:	4629      	mov	r1, r5
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 808e502:	f8df 8098 	ldr.w	r8, [pc, #152]	; 808e59c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
    const char* const end = str + size;
 808e506:	442f      	add	r7, r5
    while (s != end) {
 808e508:	42bd      	cmp	r5, r7
 808e50a:	462a      	mov	r2, r5
 808e50c:	d038      	beq.n	808e580 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
 808e50e:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 808e512:	2e22      	cmp	r6, #34	; 0x22
 808e514:	d003      	beq.n	808e51e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 808e516:	2e5c      	cmp	r6, #92	; 0x5c
 808e518:	d001      	beq.n	808e51e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 808e51a:	2e1f      	cmp	r6, #31
 808e51c:	d8f4      	bhi.n	808e508 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 808e51e:	6823      	ldr	r3, [r4, #0]
 808e520:	1a52      	subs	r2, r2, r1
 808e522:	4620      	mov	r0, r4
 808e524:	689b      	ldr	r3, [r3, #8]
 808e526:	4798      	blx	r3
            write('\\');
 808e528:	215c      	movs	r1, #92	; 0x5c
 808e52a:	4620      	mov	r0, r4
 808e52c:	f7ff fecf 	bl	808e2ce <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 808e530:	2e0d      	cmp	r6, #13
 808e532:	d80a      	bhi.n	808e54a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
 808e534:	2e07      	cmp	r6, #7
 808e536:	d91c      	bls.n	808e572 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 808e538:	f1a6 0308 	sub.w	r3, r6, #8
 808e53c:	2b05      	cmp	r3, #5
 808e53e:	d818      	bhi.n	808e572 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 808e540:	e8df f003 	tbb	[pc, r3]
 808e544:	17110f0d 	.word	0x17110f0d
 808e548:	1513      	.short	0x1513
 808e54a:	2e22      	cmp	r6, #34	; 0x22
 808e54c:	d001      	beq.n	808e552 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 808e54e:	2e5c      	cmp	r6, #92	; 0x5c
 808e550:	d10f      	bne.n	808e572 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
 808e552:	4631      	mov	r1, r6
                write('b');
 808e554:	4620      	mov	r0, r4
 808e556:	f7ff feba 	bl	808e2ce <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 808e55a:	4629      	mov	r1, r5
    while (s != end) {
 808e55c:	e7d4      	b.n	808e508 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 808e55e:	2162      	movs	r1, #98	; 0x62
 808e560:	e7f8      	b.n	808e554 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
 808e562:	2174      	movs	r1, #116	; 0x74
 808e564:	e7f6      	b.n	808e554 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
 808e566:	216e      	movs	r1, #110	; 0x6e
 808e568:	e7f4      	b.n	808e554 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
 808e56a:	2166      	movs	r1, #102	; 0x66
 808e56c:	e7f2      	b.n	808e554 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
 808e56e:	2172      	movs	r1, #114	; 0x72
 808e570:	e7f0      	b.n	808e554 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
 808e572:	6823      	ldr	r3, [r4, #0]
 808e574:	4632      	mov	r2, r6
 808e576:	4641      	mov	r1, r8
 808e578:	4620      	mov	r0, r4
 808e57a:	68db      	ldr	r3, [r3, #12]
 808e57c:	4798      	blx	r3
                break;
 808e57e:	e7ec      	b.n	808e55a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
 808e580:	428d      	cmp	r5, r1
 808e582:	d004      	beq.n	808e58e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
 808e584:	6823      	ldr	r3, [r4, #0]
 808e586:	4620      	mov	r0, r4
 808e588:	689b      	ldr	r3, [r3, #8]
 808e58a:	1a6a      	subs	r2, r5, r1
 808e58c:	4798      	blx	r3
    }
    write('"');
 808e58e:	2122      	movs	r1, #34	; 0x22
 808e590:	4620      	mov	r0, r4
 808e592:	f7ff fe9c 	bl	808e2ce <_ZN5spark10JSONWriter5writeEc>
}
 808e596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808e59a:	bf00      	nop
 808e59c:	0809503f 	.word	0x0809503f

0808e5a0 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 808e5a0:	b570      	push	{r4, r5, r6, lr}
 808e5a2:	4604      	mov	r4, r0
 808e5a4:	460d      	mov	r5, r1
 808e5a6:	4616      	mov	r6, r2
    writeSeparator();
 808e5a8:	f7ff ff64 	bl	808e474 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 808e5ac:	4620      	mov	r0, r4
 808e5ae:	4632      	mov	r2, r6
 808e5b0:	4629      	mov	r1, r5
 808e5b2:	f7ff ff9d 	bl	808e4f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 808e5b6:	2302      	movs	r3, #2
}
 808e5b8:	4620      	mov	r0, r4
    state_ = VALUE;
 808e5ba:	7123      	strb	r3, [r4, #4]
}
 808e5bc:	bd70      	pop	{r4, r5, r6, pc}

0808e5be <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 808e5be:	b570      	push	{r4, r5, r6, lr}
 808e5c0:	4604      	mov	r4, r0
 808e5c2:	460d      	mov	r5, r1
 808e5c4:	4616      	mov	r6, r2
    writeSeparator();
 808e5c6:	f7ff ff55 	bl	808e474 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 808e5ca:	4620      	mov	r0, r4
 808e5cc:	4632      	mov	r2, r6
 808e5ce:	4629      	mov	r1, r5
 808e5d0:	f7ff ff8e 	bl	808e4f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 808e5d4:	2301      	movs	r3, #1
}
 808e5d6:	4620      	mov	r0, r4
    state_ = NEXT;
 808e5d8:	7123      	strb	r3, [r4, #4]
}
 808e5da:	bd70      	pop	{r4, r5, r6, pc}

0808e5dc <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 808e5dc:	6880      	ldr	r0, [r0, #8]
 808e5de:	6803      	ldr	r3, [r0, #0]
 808e5e0:	68db      	ldr	r3, [r3, #12]
 808e5e2:	4718      	bx	r3

0808e5e4 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 808e5e4:	4770      	bx	lr

0808e5e6 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 808e5e6:	4608      	mov	r0, r1
 808e5e8:	b111      	cbz	r1, 808e5f0 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 808e5ea:	680b      	ldr	r3, [r1, #0]
 808e5ec:	685b      	ldr	r3, [r3, #4]
 808e5ee:	4718      	bx	r3
}
 808e5f0:	4770      	bx	lr

0808e5f2 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 808e5f2:	4770      	bx	lr

0808e5f4 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 808e5f4:	4770      	bx	lr

0808e5f6 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 808e5f6:	4770      	bx	lr

0808e5f8 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
 808e5f8:	b538      	push	{r3, r4, r5, lr}
 808e5fa:	4604      	mov	r4, r0
 808e5fc:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 808e5fe:	6800      	ldr	r0, [r0, #0]
 808e600:	212e      	movs	r1, #46	; 0x2e
 808e602:	f003 fc98 	bl	8091f36 <strchrnul>
    size = s - category;
 808e606:	6823      	ldr	r3, [r4, #0]
    const char *s = strchrnul(category, '.');
 808e608:	4602      	mov	r2, r0
    size = s - category;
 808e60a:	1ac0      	subs	r0, r0, r3
 808e60c:	6028      	str	r0, [r5, #0]
    if (size) {
 808e60e:	b120      	cbz	r0, 808e61a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x22>
        if (*s) {
 808e610:	7813      	ldrb	r3, [r2, #0]
 808e612:	b103      	cbz	r3, 808e616 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1e>
            ++s;
 808e614:	3201      	adds	r2, #1
 808e616:	6820      	ldr	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 808e618:	6022      	str	r2, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
 808e61a:	bd38      	pop	{r3, r4, r5, pc}

0808e61c <_ZN5spark16JSONStreamWriterD0Ev>:
 808e61c:	b510      	push	{r4, lr}
 808e61e:	4604      	mov	r4, r0
 808e620:	210c      	movs	r1, #12
 808e622:	f002 f9e0 	bl	80909e6 <_ZdlPvj>
 808e626:	4620      	mov	r0, r4
 808e628:	bd10      	pop	{r4, pc}

0808e62a <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 808e62a:	b510      	push	{r4, lr}
 808e62c:	4604      	mov	r4, r0
 808e62e:	2104      	movs	r1, #4
 808e630:	f002 f9d9 	bl	80909e6 <_ZdlPvj>
 808e634:	4620      	mov	r0, r4
 808e636:	bd10      	pop	{r4, pc}

0808e638 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 808e638:	b510      	push	{r4, lr}
 808e63a:	4604      	mov	r4, r0
 808e63c:	2104      	movs	r1, #4
 808e63e:	f002 f9d2 	bl	80909e6 <_ZdlPvj>
 808e642:	4620      	mov	r0, r4
 808e644:	bd10      	pop	{r4, pc}

0808e646 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 808e646:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 808e648:	f003 fc7f 	bl	8091f4a <strcmp>
}
 808e64c:	fab0 f080 	clz	r0, r0
 808e650:	0940      	lsrs	r0, r0, #5
 808e652:	bd08      	pop	{r3, pc}

0808e654 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 808e654:	b510      	push	{r4, lr}
 808e656:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
 808e658:	f001 fece 	bl	80903f8 <_Z16_fetch_usbserialv>
 808e65c:	4284      	cmp	r4, r0
 808e65e:	d105      	bne.n	808e66c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 808e660:	f001 feca 	bl	80903f8 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 808e664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        USBSerial1.end();
 808e668:	f001 beac 	b.w	80903c4 <_ZN9USBSerial3endEv>
    if (stream == &USBSerial1) {
 808e66c:	f001 ff02 	bl	8090474 <_Z17_fetch_usbserial1v>
 808e670:	4284      	cmp	r4, r0
 808e672:	d102      	bne.n	808e67a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x26>
        USBSerial1.end();
 808e674:	f001 fefe 	bl	8090474 <_Z17_fetch_usbserial1v>
 808e678:	e7f4      	b.n	808e664 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x10>
    if (stream == &Serial1) {
 808e67a:	f001 fe27 	bl	80902cc <_Z22__fetch_global_Serial1v>
 808e67e:	4284      	cmp	r4, r0
 808e680:	d105      	bne.n	808e68e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
        Serial1.end();
 808e682:	f001 fe23 	bl	80902cc <_Z22__fetch_global_Serial1v>
}
 808e686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 808e68a:	f001 be18 	b.w	80902be <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 808e68e:	b12c      	cbz	r4, 808e69c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x48>
 808e690:	6823      	ldr	r3, [r4, #0]
 808e692:	4620      	mov	r0, r4
}
 808e694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808e698:	685b      	ldr	r3, [r3, #4]
 808e69a:	4718      	bx	r3
 808e69c:	bd10      	pop	{r4, pc}

0808e69e <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 808e69e:	b538      	push	{r3, r4, r5, lr}
 808e6a0:	4605      	mov	r5, r0
    return value(val, strlen(val));
 808e6a2:	4608      	mov	r0, r1
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 808e6a4:	460c      	mov	r4, r1
    return value(val, strlen(val));
 808e6a6:	f003 fc7e 	bl	8091fa6 <strlen>
 808e6aa:	4621      	mov	r1, r4
 808e6ac:	4602      	mov	r2, r0
 808e6ae:	4628      	mov	r0, r5
}
 808e6b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return value(val, strlen(val));
 808e6b4:	f7ff bf83 	b.w	808e5be <_ZN5spark10JSONWriter5valueEPKcj>

0808e6b8 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 808e6b8:	b570      	push	{r4, r5, r6, lr}
 808e6ba:	4604      	mov	r4, r0
    write(str, strlen(str));
 808e6bc:	4608      	mov	r0, r1
inline void spark::StreamLogHandler::write(const char *str) {
 808e6be:	460d      	mov	r5, r1
    write(str, strlen(str));
 808e6c0:	f003 fc71 	bl	8091fa6 <strlen>
 808e6c4:	6823      	ldr	r3, [r4, #0]
 808e6c6:	4602      	mov	r2, r0
 808e6c8:	4629      	mov	r1, r5
 808e6ca:	4620      	mov	r0, r4
}
 808e6cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    write(str, strlen(str));
 808e6d0:	68db      	ldr	r3, [r3, #12]
 808e6d2:	4718      	bx	r3

0808e6d4 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 808e6d4:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 808e6d6:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 808e6d8:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 808e6dc:	2201      	movs	r2, #1
 808e6de:	68db      	ldr	r3, [r3, #12]
 808e6e0:	f10d 0107 	add.w	r1, sp, #7
 808e6e4:	4798      	blx	r3
}
 808e6e6:	b003      	add	sp, #12
 808e6e8:	f85d fb04 	ldr.w	pc, [sp], #4

0808e6ec <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
 808e6ec:	b40e      	push	{r1, r2, r3}
 808e6ee:	b503      	push	{r0, r1, lr}
 808e6f0:	ab03      	add	r3, sp, #12
 808e6f2:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
 808e6f6:	2100      	movs	r1, #0
 808e6f8:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
 808e6fa:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
 808e6fc:	f001 f90f 	bl	808f91e <_ZN5Print7vprintfEbPKcSt9__va_list>
}
 808e700:	b002      	add	sp, #8
 808e702:	f85d eb04 	ldr.w	lr, [sp], #4
 808e706:	b003      	add	sp, #12
 808e708:	4770      	bx	lr
	...

0808e70c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 808e70c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 808e710:	f04f 0814 	mov.w	r8, #20
 808e714:	e9d0 9500 	ldrd	r9, r5, [r0]
 808e718:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 808e71a:	464c      	mov	r4, r9
 808e71c:	fb08 f505 	mul.w	r5, r8, r5
 808e720:	9300      	str	r3, [sp, #0]
 808e722:	10ab      	asrs	r3, r5, #2
 808e724:	4d17      	ldr	r5, [pc, #92]	; (808e784 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 808e726:	435d      	muls	r5, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 808e728:	2d00      	cmp	r5, #0
 808e72a:	dd23      	ble.n	808e774 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
 808e72c:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 808e72e:	fb08 f006 	mul.w	r0, r8, r6
 808e732:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 808e736:	f8ba b004 	ldrh.w	fp, [sl, #4]
 808e73a:	463a      	mov	r2, r7
 808e73c:	455f      	cmp	r7, fp
 808e73e:	bf28      	it	cs
 808e740:	465a      	movcs	r2, fp
 808e742:	5820      	ldr	r0, [r4, r0]
 808e744:	9101      	str	r1, [sp, #4]
 808e746:	f003 fc36 	bl	8091fb6 <strncmp>
                if (cmp == 0) {
 808e74a:	2301      	movs	r3, #1
 808e74c:	9901      	ldr	r1, [sp, #4]
 808e74e:	b978      	cbnz	r0, 808e770 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
 808e750:	455f      	cmp	r7, fp
 808e752:	d103      	bne.n	808e75c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 808e754:	9a00      	ldr	r2, [sp, #0]
 808e756:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 808e758:	4635      	mov	r5, r6
 808e75a:	e7e5      	b.n	808e728 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
 808e75c:	bf8c      	ite	hi
 808e75e:	2001      	movhi	r0, #1
 808e760:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 808e762:	2800      	cmp	r0, #0
 808e764:	d0f8      	beq.n	808e758 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 808e766:	1bae      	subs	r6, r5, r6
	      ++__first;
 808e768:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
 808e76c:	3e01      	subs	r6, #1
 808e76e:	e7f3      	b.n	808e758 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
 808e770:	0fc0      	lsrs	r0, r0, #31
 808e772:	e7f6      	b.n	808e762 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
 808e774:	eba4 0409 	sub.w	r4, r4, r9
}
 808e778:	4802      	ldr	r0, [pc, #8]	; (808e784 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 808e77a:	10a4      	asrs	r4, r4, #2
 808e77c:	4360      	muls	r0, r4
 808e77e:	b003      	add	sp, #12
 808e780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808e784:	cccccccd 	.word	0xcccccccd

0808e788 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 808e788:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 808e78a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 808e78c:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 808e78e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 808e790:	b303      	cbz	r3, 808e7d4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 808e792:	b1f9      	cbz	r1, 808e7d4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 808e794:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 808e796:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 808e79a:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 808e79c:	a903      	add	r1, sp, #12
 808e79e:	a801      	add	r0, sp, #4
 808e7a0:	f7ff ff2a 	bl	808e5f8 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 808e7a4:	4601      	mov	r1, r0
 808e7a6:	b1a8      	cbz	r0, 808e7d4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 808e7a8:	f10d 030b 	add.w	r3, sp, #11
 808e7ac:	4620      	mov	r0, r4
 808e7ae:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 808e7b0:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 808e7b4:	f7ff ffaa 	bl	808e70c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 808e7b8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 808e7bc:	b153      	cbz	r3, 808e7d4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 808e7be:	2314      	movs	r3, #20
 808e7c0:	6824      	ldr	r4, [r4, #0]
 808e7c2:	fb03 4400 	mla	r4, r3, r0, r4
            if (node.level >= 0) {
 808e7c6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 808e7ca:	3408      	adds	r4, #8
            if (node.level >= 0) {
 808e7cc:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 808e7ce:	bfa8      	it	ge
 808e7d0:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
 808e7d2:	e7e3      	b.n	808e79c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 808e7d4:	4630      	mov	r0, r6
 808e7d6:	b004      	add	sp, #16
 808e7d8:	bd70      	pop	{r4, r5, r6, pc}
	...

0808e7dc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 808e7dc:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 808e7de:	4c0a      	ldr	r4, [pc, #40]	; (808e808 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 808e7e0:	7823      	ldrb	r3, [r4, #0]
 808e7e2:	f3bf 8f5b 	dmb	ish
 808e7e6:	07db      	lsls	r3, r3, #31
 808e7e8:	d40b      	bmi.n	808e802 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 808e7ea:	4620      	mov	r0, r4
 808e7ec:	f7f1 fc68 	bl	80800c0 <__cxa_guard_acquire>
 808e7f0:	b138      	cbz	r0, 808e802 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 808e7f2:	4620      	mov	r0, r4
 808e7f4:	f7f1 fc69 	bl	80800ca <__cxa_guard_release>
 808e7f8:	4a04      	ldr	r2, [pc, #16]	; (808e80c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
 808e7fa:	4905      	ldr	r1, [pc, #20]	; (808e810 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 808e7fc:	4805      	ldr	r0, [pc, #20]	; (808e814 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 808e7fe:	f002 f8ed 	bl	80909dc <__aeabi_atexit>
}
 808e802:	4804      	ldr	r0, [pc, #16]	; (808e814 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 808e804:	bd10      	pop	{r4, pc}
 808e806:	bf00      	nop
 808e808:	2000159c 	.word	0x2000159c
 808e80c:	200005b0 	.word	0x200005b0
 808e810:	0808e5f5 	.word	0x0808e5f5
 808e814:	2000053c 	.word	0x2000053c

0808e818 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 808e818:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 808e81a:	4c0a      	ldr	r4, [pc, #40]	; (808e844 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 808e81c:	7823      	ldrb	r3, [r4, #0]
 808e81e:	f3bf 8f5b 	dmb	ish
 808e822:	07db      	lsls	r3, r3, #31
 808e824:	d40b      	bmi.n	808e83e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 808e826:	4620      	mov	r0, r4
 808e828:	f7f1 fc4a 	bl	80800c0 <__cxa_guard_acquire>
 808e82c:	b138      	cbz	r0, 808e83e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 808e82e:	4620      	mov	r0, r4
 808e830:	f7f1 fc4b 	bl	80800ca <__cxa_guard_release>
 808e834:	4a04      	ldr	r2, [pc, #16]	; (808e848 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
 808e836:	4905      	ldr	r1, [pc, #20]	; (808e84c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 808e838:	4805      	ldr	r0, [pc, #20]	; (808e850 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 808e83a:	f002 f8cf 	bl	80909dc <__aeabi_atexit>
    return &factory;
}
 808e83e:	4804      	ldr	r0, [pc, #16]	; (808e850 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 808e840:	bd10      	pop	{r4, pc}
 808e842:	bf00      	nop
 808e844:	200015a0 	.word	0x200015a0
 808e848:	200005b0 	.word	0x200005b0
 808e84c:	0808e5f3 	.word	0x0808e5f3
 808e850:	20000540 	.word	0x20000540

0808e854 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 808e854:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 808e856:	2500      	movs	r5, #0
 808e858:	4604      	mov	r4, r0
 808e85a:	e9c0 5500 	strd	r5, r5, [r0]
 808e85e:	e9c0 5504 	strd	r5, r5, [r0, #16]
 808e862:	6085      	str	r5, [r0, #8]
 808e864:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 808e866:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
 808e86a:	f7fe fb2f 	bl	808cecc <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 808e86e:	f7ff ffb5 	bl	808e7dc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 808e872:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 808e874:	f7ff ffd0 	bl	808e818 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 808e878:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 808e87a:	6220      	str	r0, [r4, #32]
}
 808e87c:	4620      	mov	r0, r4
 808e87e:	bd38      	pop	{r3, r4, r5, pc}

0808e880 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 808e880:	b510      	push	{r4, lr}
    static LogManager mgr;
 808e882:	4c0b      	ldr	r4, [pc, #44]	; (808e8b0 <_ZN5spark10LogManager8instanceEv+0x30>)
 808e884:	7823      	ldrb	r3, [r4, #0]
 808e886:	f3bf 8f5b 	dmb	ish
 808e88a:	07db      	lsls	r3, r3, #31
 808e88c:	d40e      	bmi.n	808e8ac <_ZN5spark10LogManager8instanceEv+0x2c>
 808e88e:	4620      	mov	r0, r4
 808e890:	f7f1 fc16 	bl	80800c0 <__cxa_guard_acquire>
 808e894:	b150      	cbz	r0, 808e8ac <_ZN5spark10LogManager8instanceEv+0x2c>
 808e896:	4807      	ldr	r0, [pc, #28]	; (808e8b4 <_ZN5spark10LogManager8instanceEv+0x34>)
 808e898:	f7ff ffdc 	bl	808e854 <_ZN5spark10LogManagerC1Ev>
 808e89c:	4620      	mov	r0, r4
 808e89e:	f7f1 fc14 	bl	80800ca <__cxa_guard_release>
 808e8a2:	4a05      	ldr	r2, [pc, #20]	; (808e8b8 <_ZN5spark10LogManager8instanceEv+0x38>)
 808e8a4:	4905      	ldr	r1, [pc, #20]	; (808e8bc <_ZN5spark10LogManager8instanceEv+0x3c>)
 808e8a6:	4803      	ldr	r0, [pc, #12]	; (808e8b4 <_ZN5spark10LogManager8instanceEv+0x34>)
 808e8a8:	f002 f898 	bl	80909dc <__aeabi_atexit>
    return &mgr;
}
 808e8ac:	4801      	ldr	r0, [pc, #4]	; (808e8b4 <_ZN5spark10LogManager8instanceEv+0x34>)
 808e8ae:	bd10      	pop	{r4, pc}
 808e8b0:	20001598 	.word	0x20001598
 808e8b4:	200015a8 	.word	0x200015a8
 808e8b8:	200005b0 	.word	0x200005b0
 808e8bc:	0808ed33 	.word	0x0808ed33

0808e8c0 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 808e8c0:	2300      	movs	r3, #0
 808e8c2:	4a02      	ldr	r2, [pc, #8]	; (808e8cc <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 808e8c4:	4902      	ldr	r1, [pc, #8]	; (808e8d0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 808e8c6:	4803      	ldr	r0, [pc, #12]	; (808e8d4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 808e8c8:	f7fe bd10 	b.w	808d2ec <log_set_callbacks>
 808e8cc:	0808ec11 	.word	0x0808ec11
 808e8d0:	0808eb9d 	.word	0x0808eb9d
 808e8d4:	0808eb1d 	.word	0x0808eb1d

0808e8d8 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 808e8d8:	2300      	movs	r3, #0
 808e8da:	461a      	mov	r2, r3
 808e8dc:	4619      	mov	r1, r3
 808e8de:	4618      	mov	r0, r3
 808e8e0:	f7fe bd04 	b.w	808d2ec <log_set_callbacks>

0808e8e4 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 808e8e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808e8e6:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 808e8e8:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 808e8ea:	f851 3b04 	ldr.w	r3, [r1], #4
 808e8ee:	a801      	add	r0, sp, #4
 808e8f0:	9300      	str	r3, [sp, #0]
 808e8f2:	f7fe ff9f 	bl	808d834 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 808e8f6:	466a      	mov	r2, sp
 808e8f8:	4629      	mov	r1, r5
 808e8fa:	4620      	mov	r0, r4
 808e8fc:	f7ff fd0a 	bl	808e314 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 808e900:	a801      	add	r0, sp, #4
 808e902:	f7f7 fe4f 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 808e906:	4620      	mov	r0, r4
 808e908:	b003      	add	sp, #12
 808e90a:	bd30      	pop	{r4, r5, pc}

0808e90c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 808e90c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808e90e:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 808e910:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 808e912:	f851 3b04 	ldr.w	r3, [r1], #4
 808e916:	a801      	add	r0, sp, #4
 808e918:	9300      	str	r3, [sp, #0]
 808e91a:	f7fe ff8b 	bl	808d834 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 808e91e:	466a      	mov	r2, sp
 808e920:	4629      	mov	r1, r5
 808e922:	4620      	mov	r0, r4
 808e924:	f7ff fd72 	bl	808e40c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 808e928:	a801      	add	r0, sp, #4
 808e92a:	f7f7 fe3b 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 808e92e:	4620      	mov	r0, r4
 808e930:	b003      	add	sp, #12
 808e932:	bd30      	pop	{r4, r5, pc}

0808e934 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 808e934:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808e936:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 808e938:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 808e93a:	f851 3b04 	ldr.w	r3, [r1], #4
 808e93e:	a801      	add	r0, sp, #4
 808e940:	9300      	str	r3, [sp, #0]
 808e942:	f7fe ff77 	bl	808d834 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 808e946:	466a      	mov	r2, sp
 808e948:	4629      	mov	r1, r5
 808e94a:	4620      	mov	r0, r4
 808e94c:	f7ff fd3a 	bl	808e3c4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 808e950:	a801      	add	r0, sp, #4
 808e952:	f7f7 fe27 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 808e956:	4620      	mov	r0, r4
 808e958:	b003      	add	sp, #12
 808e95a:	bd30      	pop	{r4, r5, pc}

0808e95c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 808e95c:	b570      	push	{r4, r5, r6, lr}
 808e95e:	b08a      	sub	sp, #40	; 0x28
 808e960:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 808e962:	4601      	mov	r1, r0
 808e964:	a804      	add	r0, sp, #16
 808e966:	f7ff ffd1 	bl	808e90c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 808e96a:	4e14      	ldr	r6, [pc, #80]	; (808e9bc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 808e96c:	a804      	add	r0, sp, #16
 808e96e:	f7ff fd65 	bl	808e43c <_ZN5spark18JSONObjectIterator4nextEv>
 808e972:	b1e8      	cbz	r0, 808e9b0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 808e974:	4668      	mov	r0, sp
 808e976:	a904      	add	r1, sp, #16
 808e978:	f7ff ffdc 	bl	808e934 <_ZNK5spark18JSONObjectIterator4nameEv>
 808e97c:	4631      	mov	r1, r6
 808e97e:	9802      	ldr	r0, [sp, #8]
 808e980:	f7ff fe61 	bl	808e646 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 808e984:	4604      	mov	r4, r0
 808e986:	b110      	cbz	r0, 808e98e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 808e988:	1e2c      	subs	r4, r5, #0
 808e98a:	bf18      	it	ne
 808e98c:	2401      	movne	r4, #1
 808e98e:	a801      	add	r0, sp, #4
 808e990:	f7f7 fe08 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808e994:	2c00      	cmp	r4, #0
 808e996:	d0e9      	beq.n	808e96c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 808e998:	4668      	mov	r0, sp
 808e99a:	a904      	add	r1, sp, #16
 808e99c:	f7ff ffa2 	bl	808e8e4 <_ZNK5spark18JSONObjectIterator5valueEv>
 808e9a0:	4668      	mov	r0, sp
 808e9a2:	f7ff fcee 	bl	808e382 <_ZNK5spark9JSONValue5toIntEv>
 808e9a6:	6028      	str	r0, [r5, #0]
 808e9a8:	a801      	add	r0, sp, #4
 808e9aa:	f7f7 fdfb 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808e9ae:	e7dd      	b.n	808e96c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 808e9b0:	a805      	add	r0, sp, #20
 808e9b2:	f7f7 fdf7 	bl	80865a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 808e9b6:	b00a      	add	sp, #40	; 0x28
 808e9b8:	bd70      	pop	{r4, r5, r6, pc}
 808e9ba:	bf00      	nop
 808e9bc:	08095045 	.word	0x08095045

0808e9c0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 808e9c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808e9c2:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 808e9c4:	4919      	ldr	r1, [pc, #100]	; (808ea2c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6c>)
 808e9c6:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 808e9c8:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 808e9ca:	f003 fabe 	bl	8091f4a <strcmp>
 808e9ce:	b948      	cbnz	r0, 808e9e4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
 808e9d0:	f001 fd12 	bl	80903f8 <_Z16_fetch_usbserialv>
 808e9d4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 808e9d8:	f001 fcf0 	bl	80903bc <_ZN9USBSerial5beginEl>
        return &Serial;
 808e9dc:	f001 fd0c 	bl	80903f8 <_Z16_fetch_usbserialv>
}
 808e9e0:	b003      	add	sp, #12
 808e9e2:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "USBSerial1") == 0) {
 808e9e4:	4620      	mov	r0, r4
 808e9e6:	4912      	ldr	r1, [pc, #72]	; (808ea30 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x70>)
 808e9e8:	f003 faaf 	bl	8091f4a <strcmp>
 808e9ec:	b940      	cbnz	r0, 808ea00 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x40>
        USBSerial1.begin();
 808e9ee:	f001 fd41 	bl	8090474 <_Z17_fetch_usbserial1v>
 808e9f2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 808e9f6:	f001 fce1 	bl	80903bc <_ZN9USBSerial5beginEl>
        return &USBSerial1;
 808e9fa:	f001 fd3b 	bl	8090474 <_Z17_fetch_usbserial1v>
 808e9fe:	e7ef      	b.n	808e9e0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    if (strcmp(type, "Serial1") == 0) {
 808ea00:	4620      	mov	r0, r4
 808ea02:	490c      	ldr	r1, [pc, #48]	; (808ea34 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x74>)
 808ea04:	f003 faa1 	bl	8091f4a <strcmp>
 808ea08:	b970      	cbnz	r0, 808ea28 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x68>
        int baud = 9600;
 808ea0a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 808ea0e:	a901      	add	r1, sp, #4
 808ea10:	4628      	mov	r0, r5
        int baud = 9600;
 808ea12:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 808ea14:	f7ff ffa2 	bl	808e95c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 808ea18:	f001 fc58 	bl	80902cc <_Z22__fetch_global_Serial1v>
 808ea1c:	9901      	ldr	r1, [sp, #4]
 808ea1e:	f001 fc4b 	bl	80902b8 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 808ea22:	f001 fc53 	bl	80902cc <_Z22__fetch_global_Serial1v>
 808ea26:	e7db      	b.n	808e9e0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
 808ea28:	2000      	movs	r0, #0
 808ea2a:	e7d9      	b.n	808e9e0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
 808ea2c:	0809504a 	.word	0x0809504a
 808ea30:	08095051 	.word	0x08095051
 808ea34:	08095054 	.word	0x08095054

0808ea38 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 808ea38:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 808ea3a:	2614      	movs	r6, #20
 808ea3c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 808ea40:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 808ea42:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 808ea46:	42ae      	cmp	r6, r5
 808ea48:	d005      	beq.n	808ea56 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 808ea4a:	f105 0008 	add.w	r0, r5, #8
 808ea4e:	f7ff fff3 	bl	808ea38 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 808ea52:	3514      	adds	r5, #20
 808ea54:	e7f7      	b.n	808ea46 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 808ea56:	6820      	ldr	r0, [r4, #0]
 808ea58:	f7fe fd66 	bl	808d528 <free>
}
 808ea5c:	4620      	mov	r0, r4
 808ea5e:	bd70      	pop	{r4, r5, r6, pc}

0808ea60 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 808ea60:	b570      	push	{r4, r5, r6, lr}
 808ea62:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 808ea64:	e9d0 5300 	ldrd	r5, r3, [r0]
 808ea68:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 808ea6c:	42ae      	cmp	r6, r5
 808ea6e:	d004      	beq.n	808ea7a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 808ea70:	4628      	mov	r0, r5
 808ea72:	f001 f8c7 	bl	808fc04 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 808ea76:	3510      	adds	r5, #16
 808ea78:	e7f8      	b.n	808ea6c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 808ea7a:	6820      	ldr	r0, [r4, #0]
 808ea7c:	f7fe fd54 	bl	808d528 <free>
}
 808ea80:	4620      	mov	r0, r4
 808ea82:	bd70      	pop	{r4, r5, r6, pc}

0808ea84 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 808ea84:	b510      	push	{r4, lr}
 808ea86:	4604      	mov	r4, r0
 808ea88:	300c      	adds	r0, #12
 808ea8a:	f7ff ffd5 	bl	808ea38 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 808ea8e:	4620      	mov	r0, r4
 808ea90:	f7ff ffe6 	bl	808ea60 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 808ea94:	4620      	mov	r0, r4
 808ea96:	bd10      	pop	{r4, pc}

0808ea98 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 808ea98:	b510      	push	{r4, lr}
 808ea9a:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 808ea9c:	4b03      	ldr	r3, [pc, #12]	; (808eaac <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 808ea9e:	f840 3b04 	str.w	r3, [r0], #4
 808eaa2:	f7ff ffef 	bl	808ea84 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 808eaa6:	4620      	mov	r0, r4
 808eaa8:	bd10      	pop	{r4, pc}
 808eaaa:	bf00      	nop
 808eaac:	080941ac 	.word	0x080941ac

0808eab0 <_ZN5spark16StreamLogHandlerD0Ev>:
 808eab0:	b510      	push	{r4, lr}
 808eab2:	4604      	mov	r4, r0
 808eab4:	f7ff fff0 	bl	808ea98 <_ZN5spark16StreamLogHandlerD1Ev>
 808eab8:	4620      	mov	r0, r4
 808eaba:	2124      	movs	r1, #36	; 0x24
 808eabc:	f001 ff93 	bl	80909e6 <_ZdlPvj>
 808eac0:	4620      	mov	r0, r4
 808eac2:	bd10      	pop	{r4, pc}

0808eac4 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 808eac4:	b510      	push	{r4, lr}
 808eac6:	4604      	mov	r4, r0
 808eac8:	4b02      	ldr	r3, [pc, #8]	; (808ead4 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 808eaca:	6003      	str	r3, [r0, #0]
 808eacc:	f7ff ffe4 	bl	808ea98 <_ZN5spark16StreamLogHandlerD1Ev>
 808ead0:	4620      	mov	r0, r4
 808ead2:	bd10      	pop	{r4, pc}
 808ead4:	080950e8 	.word	0x080950e8

0808ead8 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 808ead8:	b510      	push	{r4, lr}
 808eada:	4604      	mov	r4, r0
 808eadc:	f7ff fff2 	bl	808eac4 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 808eae0:	4620      	mov	r0, r4
 808eae2:	2124      	movs	r1, #36	; 0x24
 808eae4:	f001 ff7f 	bl	80909e6 <_ZdlPvj>
 808eae8:	4620      	mov	r0, r4
 808eaea:	bd10      	pop	{r4, pc}

0808eaec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 808eaec:	2200      	movs	r2, #0
 808eaee:	e9c0 2200 	strd	r2, r2, [r0]
 808eaf2:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 808eaf4:	b510      	push	{r4, lr}
      __a = _GLIBCXX_MOVE(__b);
 808eaf6:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 808eaf8:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 808eafa:	6004      	str	r4, [r0, #0]
 808eafc:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 808eafe:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 808eb00:	6044      	str	r4, [r0, #4]
 808eb02:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808eb04:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 808eb06:	6084      	str	r4, [r0, #8]
}
 808eb08:	bd10      	pop	{r4, pc}

0808eb0a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
 808eb0a:	b510      	push	{r4, lr}
 808eb0c:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 808eb0e:	6803      	ldr	r3, [r0, #0]
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 808eb10:	6818      	ldr	r0, [r3, #0]
 808eb12:	f7fe f9f3 	bl	808cefc <os_mutex_recursive_unlock>
 808eb16:	4620      	mov	r0, r4
 808eb18:	bd10      	pop	{r4, pc}
	...

0808eb1c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 808eb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808eb20:	b087      	sub	sp, #28
 808eb22:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 808eb24:	4b1c      	ldr	r3, [pc, #112]	; (808eb98 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 808eb26:	4680      	mov	r8, r0
 808eb28:	685b      	ldr	r3, [r3, #4]
 808eb2a:	4689      	mov	r9, r1
 808eb2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 808eb30:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 808eb32:	b96b      	cbnz	r3, 808eb50 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 808eb34:	f7ff fea4 	bl	808e880 <_ZN5spark10LogManager8instanceEv>
 808eb38:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 808eb3a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 808eb3e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808eb40:	9305      	str	r3, [sp, #20]
 808eb42:	f7fe f9d3 	bl	808ceec <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
 808eb46:	7b23      	ldrb	r3, [r4, #12]
 808eb48:	b12b      	cbz	r3, 808eb56 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 808eb4a:	a805      	add	r0, sp, #20
 808eb4c:	f7ff ffdd 	bl	808eb0a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 808eb50:	b007      	add	sp, #28
 808eb52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 808eb56:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 808eb58:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 808eb5c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 808eb5e:	e9d4 5300 	ldrd	r5, r3, [r4]
 808eb62:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 808eb66:	45aa      	cmp	sl, r5
 808eb68:	d012      	beq.n	808eb90 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 808eb6a:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 808eb6e:	4631      	mov	r1, r6
 808eb70:	1d38      	adds	r0, r7, #4
 808eb72:	f7ff fe09 	bl	808e788 <_ZNK5spark6detail9LogFilter5levelEPKc>
 808eb76:	4581      	cmp	r9, r0
 808eb78:	d3f5      	bcc.n	808eb66 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 808eb7a:	9a03      	ldr	r2, [sp, #12]
 808eb7c:	683b      	ldr	r3, [r7, #0]
 808eb7e:	9200      	str	r2, [sp, #0]
 808eb80:	f8d3 b008 	ldr.w	fp, [r3, #8]
 808eb84:	464a      	mov	r2, r9
 808eb86:	4633      	mov	r3, r6
 808eb88:	4641      	mov	r1, r8
 808eb8a:	4638      	mov	r0, r7
 808eb8c:	47d8      	blx	fp
 808eb8e:	e7ea      	b.n	808eb66 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 808eb90:	2300      	movs	r3, #0
 808eb92:	7323      	strb	r3, [r4, #12]
 808eb94:	e7d9      	b.n	808eb4a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 808eb96:	bf00      	nop
 808eb98:	e000ed00 	.word	0xe000ed00

0808eb9c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 808eb9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808eba0:	469b      	mov	fp, r3
 808eba2:	4b1a      	ldr	r3, [pc, #104]	; (808ec0c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 808eba4:	4680      	mov	r8, r0
 808eba6:	685b      	ldr	r3, [r3, #4]
 808eba8:	4689      	mov	r9, r1
 808ebaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 808ebae:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
 808ebb0:	b96b      	cbnz	r3, 808ebce <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 808ebb2:	f7ff fe65 	bl	808e880 <_ZN5spark10LogManager8instanceEv>
 808ebb6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 808ebb8:	f100 0324 	add.w	r3, r0, #36	; 0x24
 808ebbc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 808ebbe:	9301      	str	r3, [sp, #4]
 808ebc0:	f7fe f994 	bl	808ceec <os_mutex_recursive_lock>
        if (that->isActive()) {
 808ebc4:	7b23      	ldrb	r3, [r4, #12]
 808ebc6:	b12b      	cbz	r3, 808ebd4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 808ebc8:	a801      	add	r0, sp, #4
 808ebca:	f7ff ff9e 	bl	808eb0a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 808ebce:	b003      	add	sp, #12
 808ebd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 808ebd4:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 808ebd6:	b2f6      	uxtb	r6, r6
 808ebd8:	7323      	strb	r3, [r4, #12]
 808ebda:	e9d4 5300 	ldrd	r5, r3, [r4]
 808ebde:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 808ebe2:	4555      	cmp	r5, sl
 808ebe4:	d00e      	beq.n	808ec04 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 808ebe6:	f855 7b04 	ldr.w	r7, [r5], #4
 808ebea:	4659      	mov	r1, fp
 808ebec:	1d38      	adds	r0, r7, #4
 808ebee:	f7ff fdcb 	bl	808e788 <_ZNK5spark6detail9LogFilter5levelEPKc>
 808ebf2:	4286      	cmp	r6, r0
 808ebf4:	d3f5      	bcc.n	808ebe2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 808ebf6:	683b      	ldr	r3, [r7, #0]
 808ebf8:	464a      	mov	r2, r9
 808ebfa:	4641      	mov	r1, r8
 808ebfc:	4638      	mov	r0, r7
 808ebfe:	68db      	ldr	r3, [r3, #12]
 808ec00:	4798      	blx	r3
 808ec02:	e7ee      	b.n	808ebe2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 808ec04:	2300      	movs	r3, #0
 808ec06:	7323      	strb	r3, [r4, #12]
 808ec08:	e7de      	b.n	808ebc8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 808ec0a:	bf00      	nop
 808ec0c:	e000ed00 	.word	0xe000ed00

0808ec10 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 808ec10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808ec14:	4b16      	ldr	r3, [pc, #88]	; (808ec70 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 808ec16:	4605      	mov	r5, r0
 808ec18:	685b      	ldr	r3, [r3, #4]
 808ec1a:	460f      	mov	r7, r1
 808ec1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (HAL_IsISR()) {
 808ec20:	bb1b      	cbnz	r3, 808ec6a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 808ec22:	f7ff fe2d 	bl	808e880 <_ZN5spark10LogManager8instanceEv>
 808ec26:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 808ec28:	f100 0324 	add.w	r3, r0, #36	; 0x24
 808ec2c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 808ec2e:	9301      	str	r3, [sp, #4]
 808ec30:	f7fe f95c 	bl	808ceec <os_mutex_recursive_lock>
 808ec34:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 808ec38:	2446      	movs	r4, #70	; 0x46
 808ec3a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 808ec3e:	45b0      	cmp	r8, r6
 808ec40:	d109      	bne.n	808ec56 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 808ec42:	a801      	add	r0, sp, #4
 808ec44:	f7ff ff61 	bl	808eb0a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 808ec48:	42a5      	cmp	r5, r4
 808ec4a:	bfb4      	ite	lt
 808ec4c:	2000      	movlt	r0, #0
 808ec4e:	2001      	movge	r0, #1
}
 808ec50:	b002      	add	sp, #8
 808ec52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 808ec56:	f856 0b04 	ldr.w	r0, [r6], #4
 808ec5a:	4639      	mov	r1, r7
 808ec5c:	3004      	adds	r0, #4
 808ec5e:	f7ff fd93 	bl	808e788 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 808ec62:	4284      	cmp	r4, r0
 808ec64:	bfa8      	it	ge
 808ec66:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 808ec68:	e7e9      	b.n	808ec3e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 808ec6a:	2000      	movs	r0, #0
 808ec6c:	e7f0      	b.n	808ec50 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 808ec6e:	bf00      	nop
 808ec70:	e000ed00 	.word	0xe000ed00

0808ec74 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 808ec74:	460b      	mov	r3, r1
 808ec76:	b570      	push	{r4, r5, r6, lr}
 808ec78:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 808ec7a:	c805      	ldmia	r0, {r0, r2}
 808ec7c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 808ec80:	4282      	cmp	r2, r0
 808ec82:	d007      	beq.n	808ec94 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x20>
 808ec84:	4601      	mov	r1, r0
            if (*p == value) {
 808ec86:	681d      	ldr	r5, [r3, #0]
 808ec88:	f851 6b04 	ldr.w	r6, [r1], #4
 808ec8c:	42ae      	cmp	r6, r5
 808ec8e:	d003      	beq.n	808ec98 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
 808ec90:	4608      	mov	r0, r1
 808ec92:	e7f5      	b.n	808ec80 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
        return false;
 808ec94:	2000      	movs	r0, #0
}
 808ec96:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
 808ec98:	1a52      	subs	r2, r2, r1
 808ec9a:	f003 f8f9 	bl	8091e90 <memmove>
    --size_;
 808ec9e:	6863      	ldr	r3, [r4, #4]
    return true;
 808eca0:	2001      	movs	r0, #1
    --size_;
 808eca2:	3b01      	subs	r3, #1
 808eca4:	6063      	str	r3, [r4, #4]
    return true;
 808eca6:	e7f6      	b.n	808ec96 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>

0808eca8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 808eca8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 808ecaa:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 808ecac:	f100 0324 	add.w	r3, r0, #36	; 0x24
 808ecb0:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 808ecb2:	9101      	str	r1, [sp, #4]
 808ecb4:	9303      	str	r3, [sp, #12]
 808ecb6:	f7fe f919 	bl	808ceec <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 808ecba:	4620      	mov	r0, r4
 808ecbc:	a901      	add	r1, sp, #4
 808ecbe:	f7ff ffd9 	bl	808ec74 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 808ecc2:	b118      	cbz	r0, 808eccc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 808ecc4:	6863      	ldr	r3, [r4, #4]
 808ecc6:	b90b      	cbnz	r3, 808eccc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 808ecc8:	f7ff fe06 	bl	808e8d8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 808eccc:	a803      	add	r0, sp, #12
 808ecce:	f7ff ff1c 	bl	808eb0a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 808ecd2:	b004      	add	sp, #16
 808ecd4:	bd10      	pop	{r4, pc}

0808ecd6 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 808ecd6:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 808ecd8:	b570      	push	{r4, r5, r6, lr}
 808ecda:	4604      	mov	r4, r0
 808ecdc:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 808ece0:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 808ece4:	42ae      	cmp	r6, r5
 808ece6:	d015      	beq.n	808ed14 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 808ece8:	4620      	mov	r0, r4
 808ecea:	f105 0110 	add.w	r1, r5, #16
 808ecee:	f7ff ffc1 	bl	808ec74 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 808ecf2:	6863      	ldr	r3, [r4, #4]
 808ecf4:	b90b      	cbnz	r3, 808ecfa <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 808ecf6:	f7ff fdef 	bl	808e8d8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 808ecfa:	69e0      	ldr	r0, [r4, #28]
 808ecfc:	6929      	ldr	r1, [r5, #16]
 808ecfe:	6803      	ldr	r3, [r0, #0]
 808ed00:	68db      	ldr	r3, [r3, #12]
 808ed02:	4798      	blx	r3
        if (h.stream) {
 808ed04:	6969      	ldr	r1, [r5, #20]
 808ed06:	b119      	cbz	r1, 808ed10 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 808ed08:	6a20      	ldr	r0, [r4, #32]
 808ed0a:	6803      	ldr	r3, [r0, #0]
 808ed0c:	68db      	ldr	r3, [r3, #12]
 808ed0e:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 808ed10:	3518      	adds	r5, #24
 808ed12:	e7e7      	b.n	808ece4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 808ed14:	2618      	movs	r6, #24
 808ed16:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 808ed1a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 808ed1e:	42ae      	cmp	r6, r5
 808ed20:	d004      	beq.n	808ed2c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 808ed22:	4628      	mov	r0, r5
 808ed24:	f000 ff6e 	bl	808fc04 <_ZN6StringD1Ev>
 808ed28:	3518      	adds	r5, #24
 808ed2a:	e7f8      	b.n	808ed1e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 808ed2c:	2300      	movs	r3, #0
 808ed2e:	6163      	str	r3, [r4, #20]
}
 808ed30:	bd70      	pop	{r4, r5, r6, pc}

0808ed32 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 808ed32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 808ed34:	4604      	mov	r4, r0
    resetSystemCallbacks();
 808ed36:	f7ff fdcf 	bl	808e8d8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 808ed3a:	f104 0324 	add.w	r3, r4, #36	; 0x24
 808ed3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 808ed40:	9301      	str	r3, [sp, #4]
 808ed42:	f7fe f8d3 	bl	808ceec <os_mutex_recursive_lock>
         destroyFactoryHandlers();
 808ed46:	4620      	mov	r0, r4
 808ed48:	f7ff ffc5 	bl	808ecd6 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 808ed4c:	a801      	add	r0, sp, #4
 808ed4e:	f7ff fedc 	bl	808eb0a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 808ed52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 808ed54:	b108      	cbz	r0, 808ed5a <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 808ed56:	f7fe f8c1 	bl	808cedc <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 808ed5a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 808ed5e:	2618      	movs	r6, #24
 808ed60:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 808ed64:	42ae      	cmp	r6, r5
 808ed66:	d004      	beq.n	808ed72 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 808ed68:	4628      	mov	r0, r5
 808ed6a:	f000 ff4b 	bl	808fc04 <_ZN6StringD1Ev>
 808ed6e:	3518      	adds	r5, #24
 808ed70:	e7f8      	b.n	808ed64 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 808ed72:	6920      	ldr	r0, [r4, #16]
 808ed74:	f7fe fbd8 	bl	808d528 <free>
 808ed78:	6820      	ldr	r0, [r4, #0]
 808ed7a:	f7fe fbd5 	bl	808d528 <free>
}
 808ed7e:	4620      	mov	r0, r4
 808ed80:	b002      	add	sp, #8
 808ed82:	bd70      	pop	{r4, r5, r6, pc}

0808ed84 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 808ed84:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 808ed86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808ed88:	4606      	mov	r6, r0
 808ed8a:	460c      	mov	r4, r1
 808ed8c:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 808ed8e:	d927      	bls.n	808ede0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
 808ed90:	4290      	cmp	r0, r2
 808ed92:	d226      	bcs.n	808ede2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
        capacity_(0) {
 808ed94:	2600      	movs	r6, #0
            --end;
 808ed96:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
 808ed9a:	1a6c      	subs	r4, r5, r1
 808ed9c:	f1a1 0714 	sub.w	r7, r1, #20
 808eda0:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 808eda2:	42af      	cmp	r7, r5
 808eda4:	d03d      	beq.n	808ee22 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
 808eda6:	b1a4      	cbz	r4, 808edd2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
 808eda8:	682b      	ldr	r3, [r5, #0]
 808edaa:	6023      	str	r3, [r4, #0]
 808edac:	88ab      	ldrh	r3, [r5, #4]
 808edae:	80a3      	strh	r3, [r4, #4]
 808edb0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
        capacity_(0) {
 808edb4:	e9c4 6602 	strd	r6, r6, [r4, #8]
 808edb8:	6126      	str	r6, [r4, #16]
 808edba:	80e3      	strh	r3, [r4, #6]
 808edbc:	68ab      	ldr	r3, [r5, #8]
 808edbe:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808edc0:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808edc2:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 808edc4:	68ea      	ldr	r2, [r5, #12]
 808edc6:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808edc8:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808edca:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 808edcc:	692a      	ldr	r2, [r5, #16]
 808edce:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 808edd0:	612b      	str	r3, [r5, #16]
 808edd2:	f105 0008 	add.w	r0, r5, #8
 808edd6:	f7ff fe2f 	bl	808ea38 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 808edda:	3d14      	subs	r5, #20
 808eddc:	3c14      	subs	r4, #20
 808edde:	e7e0      	b.n	808eda2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
 808ede0:	d01f      	beq.n	808ee22 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
 808ede2:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
 808ede4:	42ac      	cmp	r4, r5
 808ede6:	d01c      	beq.n	808ee22 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
 808ede8:	b1a6      	cbz	r6, 808ee14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
 808edea:	6823      	ldr	r3, [r4, #0]
 808edec:	6033      	str	r3, [r6, #0]
 808edee:	88a3      	ldrh	r3, [r4, #4]
 808edf0:	80b3      	strh	r3, [r6, #4]
 808edf2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
        capacity_(0) {
 808edf6:	e9c6 7702 	strd	r7, r7, [r6, #8]
 808edfa:	6137      	str	r7, [r6, #16]
 808edfc:	80f3      	strh	r3, [r6, #6]
      __a = _GLIBCXX_MOVE(__b);
 808edfe:	68a3      	ldr	r3, [r4, #8]
 808ee00:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808ee02:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808ee04:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
 808ee06:	68e2      	ldr	r2, [r4, #12]
 808ee08:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808ee0a:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808ee0c:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
 808ee0e:	6922      	ldr	r2, [r4, #16]
 808ee10:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 808ee12:	6123      	str	r3, [r4, #16]
 808ee14:	f104 0008 	add.w	r0, r4, #8
 808ee18:	f7ff fe0e 	bl	808ea38 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 808ee1c:	3414      	adds	r4, #20
 808ee1e:	3614      	adds	r6, #20
 808ee20:	e7e0      	b.n	808ede4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
 808ee22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808ee24 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 808ee24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 808ee26:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 808ee2a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 808ee2c:	4604      	mov	r4, r0
 808ee2e:	460e      	mov	r6, r1
 808ee30:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 808ee32:	db0d      	blt.n	808ee50 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
 808ee34:	3501      	adds	r5, #1
        if (n > 0) {
 808ee36:	2d00      	cmp	r5, #0
 808ee38:	6800      	ldr	r0, [r0, #0]
 808ee3a:	dd04      	ble.n	808ee46 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
 808ee3c:	00a9      	lsls	r1, r5, #2
 808ee3e:	f7fe fb7b 	bl	808d538 <realloc>
            if (!d) {
 808ee42:	b918      	cbnz	r0, 808ee4c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
 808ee44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 808ee46:	f7fe fb6f 	bl	808d528 <free>
        T* d = nullptr;
 808ee4a:	2000      	movs	r0, #0
        data_ = d;
 808ee4c:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 808ee4e:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
 808ee50:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
 808ee52:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 808ee54:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
 808ee58:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 808ee5a:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
 808ee5e:	1d08      	adds	r0, r1, #4
 808ee60:	f003 f816 	bl	8091e90 <memmove>
    new(p) T(std::move(value));
 808ee64:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
 808ee68:	6863      	ldr	r3, [r4, #4]
    return true;
 808ee6a:	2001      	movs	r0, #1
    ++size_;
 808ee6c:	3301      	adds	r3, #1
 808ee6e:	6063      	str	r3, [r4, #4]
    return true;
 808ee70:	e7e8      	b.n	808ee44 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

0808ee72 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 808ee72:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808ee74:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 808ee76:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 808ee7a:	6a40      	ldr	r0, [r0, #36]	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
 808ee7c:	460d      	mov	r5, r1
 808ee7e:	9301      	str	r3, [sp, #4]
 808ee80:	f7fe f834 	bl	808ceec <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
 808ee84:	e9d4 3100 	ldrd	r3, r1, [r4]
 808ee88:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
 808ee8c:	4283      	cmp	r3, r0
 808ee8e:	461a      	mov	r2, r3
 808ee90:	d00a      	beq.n	808eea8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 808ee92:	6812      	ldr	r2, [r2, #0]
 808ee94:	3304      	adds	r3, #4
 808ee96:	42aa      	cmp	r2, r5
 808ee98:	d1f8      	bne.n	808ee8c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
 808ee9a:	a801      	add	r0, sp, #4
 808ee9c:	f7ff fe35 	bl	808eb0a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
 808eea0:	2500      	movs	r5, #0
}
 808eea2:	4628      	mov	r0, r5
 808eea4:	b003      	add	sp, #12
 808eea6:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
 808eea8:	462a      	mov	r2, r5
 808eeaa:	4620      	mov	r0, r4
 808eeac:	f7ff ffba 	bl	808ee24 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 808eeb0:	4605      	mov	r5, r0
 808eeb2:	2800      	cmp	r0, #0
 808eeb4:	d0f1      	beq.n	808ee9a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 808eeb6:	6863      	ldr	r3, [r4, #4]
 808eeb8:	2b01      	cmp	r3, #1
 808eeba:	d101      	bne.n	808eec0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 808eebc:	f7ff fd00 	bl	808e8c0 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 808eec0:	a801      	add	r0, sp, #4
 808eec2:	f7ff fe22 	bl	808eb0a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 808eec6:	e7ec      	b.n	808eea2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

0808eec8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 808eec8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 808eeca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808eecc:	4604      	mov	r4, r0
 808eece:	460d      	mov	r5, r1
 808eed0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 808eed2:	d914      	bls.n	808eefe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 808eed4:	4290      	cmp	r0, r2
 808eed6:	d213      	bcs.n	808ef00 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 808eed8:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 808eedc:	1a75      	subs	r5, r6, r1
 808eede:	f1a1 0710 	sub.w	r7, r1, #16
 808eee2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 808eee4:	42b7      	cmp	r7, r6
 808eee6:	d018      	beq.n	808ef1a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 808eee8:	b11c      	cbz	r4, 808eef2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 808eeea:	4631      	mov	r1, r6
 808eeec:	4620      	mov	r0, r4
 808eeee:	f000 ff03 	bl	808fcf8 <_ZN6StringC1EOS_>
                end->~T();
 808eef2:	4630      	mov	r0, r6
 808eef4:	f000 fe86 	bl	808fc04 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 808eef8:	3e10      	subs	r6, #16
 808eefa:	3c10      	subs	r4, #16
 808eefc:	e7f2      	b.n	808eee4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 808eefe:	d00c      	beq.n	808ef1a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 808ef00:	42b5      	cmp	r5, r6
 808ef02:	d00a      	beq.n	808ef1a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 808ef04:	b11c      	cbz	r4, 808ef0e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 808ef06:	4629      	mov	r1, r5
 808ef08:	4620      	mov	r0, r4
 808ef0a:	f000 fef5 	bl	808fcf8 <_ZN6StringC1EOS_>
                p->~T();
 808ef0e:	4628      	mov	r0, r5
 808ef10:	f000 fe78 	bl	808fc04 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 808ef14:	3510      	adds	r5, #16
 808ef16:	3410      	adds	r4, #16
 808ef18:	e7f2      	b.n	808ef00 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 808ef1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808ef1c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 808ef1c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 808ef1e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 808ef20:	4605      	mov	r5, r0
        if (n > 0) {
 808ef22:	dd11      	ble.n	808ef48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 808ef24:	0130      	lsls	r0, r6, #4
 808ef26:	f7fe faf7 	bl	808d518 <malloc>
            if (!d) {
 808ef2a:	4604      	mov	r4, r0
 808ef2c:	b158      	cbz	r0, 808ef46 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 808ef2e:	e9d5 1200 	ldrd	r1, r2, [r5]
 808ef32:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 808ef36:	f7ff ffc7 	bl	808eec8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 808ef3a:	6828      	ldr	r0, [r5, #0]
 808ef3c:	f7fe faf4 	bl	808d528 <free>
        return true;
 808ef40:	2001      	movs	r0, #1
        data_ = d;
 808ef42:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 808ef44:	60ae      	str	r6, [r5, #8]
    }
 808ef46:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 808ef48:	2400      	movs	r4, #0
 808ef4a:	e7f6      	b.n	808ef3a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

0808ef4c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 808ef4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808ef50:	4691      	mov	r9, r2
        capacity_(0) {
 808ef52:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 808ef54:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 808ef56:	b097      	sub	sp, #92	; 0x5c
 808ef58:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
 808ef5a:	f8d9 1004 	ldr.w	r1, [r9, #4]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 808ef5e:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 808ef60:	4299      	cmp	r1, r3
        capacity_(0) {
 808ef62:	e9c0 3300 	strd	r3, r3, [r0]
 808ef66:	e9c0 3302 	strd	r3, r3, [r0, #8]
 808ef6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 808ef6e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 808ef72:	7602      	strb	r2, [r0, #24]
 808ef74:	930c      	str	r3, [sp, #48]	; 0x30
    if (n > capacity_ && !realloc(n)) {
 808ef76:	dc23      	bgt.n	808efc0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 808ef78:	e9d9 5700 	ldrd	r5, r7, [r9]
 808ef7c:	2314      	movs	r3, #20
 808ef7e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 808ef82:	42af      	cmp	r7, r5
 808ef84:	d03b      	beq.n	808effe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 808ef86:	4629      	mov	r1, r5
 808ef88:	a80d      	add	r0, sp, #52	; 0x34
 808ef8a:	f000 feb5 	bl	808fcf8 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 808ef8e:	a90d      	add	r1, sp, #52	; 0x34
 808ef90:	a811      	add	r0, sp, #68	; 0x44
 808ef92:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 808ef94:	f000 feb0 	bl	808fcf8 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 808ef98:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 808ef9c:	4299      	cmp	r1, r3
 808ef9e:	da1b      	bge.n	808efd8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 808efa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
 808efa2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
 808efa4:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 808efa8:	4631      	mov	r1, r6
 808efaa:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 808efae:	f106 0010 	add.w	r0, r6, #16
 808efb2:	f7ff ff89 	bl	808eec8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 808efb6:	b9ee      	cbnz	r6, 808eff4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 808efb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 808efba:	3301      	adds	r3, #1
 808efbc:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
 808efbe:	e011      	b.n	808efe4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 808efc0:	a80a      	add	r0, sp, #40	; 0x28
 808efc2:	f7ff ffab 	bl	808ef1c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 808efc6:	2800      	cmp	r0, #0
 808efc8:	d1d6      	bne.n	808ef78 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
 808efca:	a80a      	add	r0, sp, #40	; 0x28
 808efcc:	f7ff fd48 	bl	808ea60 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 808efd0:	4620      	mov	r0, r4
 808efd2:	b017      	add	sp, #92	; 0x5c
 808efd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 808efd8:	3101      	adds	r1, #1
 808efda:	a80a      	add	r0, sp, #40	; 0x28
 808efdc:	f7ff ff9e 	bl	808ef1c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 808efe0:	2800      	cmp	r0, #0
 808efe2:	d1dd      	bne.n	808efa0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 808efe4:	a811      	add	r0, sp, #68	; 0x44
 808efe6:	f000 fe0d 	bl	808fc04 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 808efea:	a80d      	add	r0, sp, #52	; 0x34
 808efec:	f000 fe0a 	bl	808fc04 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 808eff0:	3514      	adds	r5, #20
 808eff2:	e7c6      	b.n	808ef82 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 808eff4:	4630      	mov	r0, r6
 808eff6:	a911      	add	r1, sp, #68	; 0x44
 808eff8:	f000 fe7e 	bl	808fcf8 <_ZN6StringC1EOS_>
 808effc:	e7dc      	b.n	808efb8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 808effe:	2600      	movs	r6, #0
 808f000:	f04f 0a14 	mov.w	sl, #20
        size_t size = 0; // Name length
 808f004:	4637      	mov	r7, r6
 808f006:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
 808f00a:	960f      	str	r6, [sp, #60]	; 0x3c
    for (int i = 0; i < cats.size(); ++i) {
 808f00c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 808f010:	429e      	cmp	r6, r3
 808f012:	f280 8097 	bge.w	808f144 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
 808f016:	0133      	lsls	r3, r6, #4
 808f018:	58d3      	ldr	r3, [r2, r3]
 808f01a:	9308      	str	r3, [sp, #32]
        if (!category) {
 808f01c:	b90b      	cbnz	r3, 808f022 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
 808f01e:	3601      	adds	r6, #1
 808f020:	e7f4      	b.n	808f00c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
 808f022:	fb0a f306 	mul.w	r3, sl, r6
 808f026:	9709      	str	r7, [sp, #36]	; 0x24
 808f028:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
 808f02a:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
 808f02c:	a909      	add	r1, sp, #36	; 0x24
 808f02e:	a808      	add	r0, sp, #32
 808f030:	f7ff fae2 	bl	808e5f8 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 808f034:	4683      	mov	fp, r0
 808f036:	2800      	cmp	r0, #0
 808f038:	d0f1      	beq.n	808f01e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
 808f03a:	4601      	mov	r1, r0
 808f03c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808f03e:	4628      	mov	r0, r5
 808f040:	f10d 031f 	add.w	r3, sp, #31
            bool found = false;
 808f044:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 808f048:	f7ff fb60 	bl	808e70c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 808f04c:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 808f050:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 808f052:	f1b8 0f00 	cmp.w	r8, #0
 808f056:	d166      	bne.n	808f126 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
 808f058:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 808f05c:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
            level(-1) {
 808f060:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 808f064:	f64f 73ff 	movw	r3, #65535	; 0xffff
 808f068:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 808f06c:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 808f070:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 808f074:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 808f078:	4293      	cmp	r3, r2
 808f07a:	db1a      	blt.n	808f0b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
 808f07c:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
 808f080:	f1bb 0f00 	cmp.w	fp, #0
 808f084:	dd4a      	ble.n	808f11c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
 808f086:	fb0a f00b 	mul.w	r0, sl, fp
 808f08a:	f7fe fa45 	bl	808d518 <malloc>
            if (!d) {
 808f08e:	9004      	str	r0, [sp, #16]
 808f090:	2800      	cmp	r0, #0
 808f092:	d045      	beq.n	808f120 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
 808f094:	e9d5 1200 	ldrd	r1, r2, [r5]
 808f098:	fb0a 1202 	mla	r2, sl, r2, r1
 808f09c:	f7ff fe72 	bl	808ed84 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
 808f0a0:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
 808f0a2:	6828      	ldr	r0, [r5, #0]
 808f0a4:	9304      	str	r3, [sp, #16]
 808f0a6:	f7fe fa3f 	bl	808d528 <free>
        data_ = d;
 808f0aa:	9b04      	ldr	r3, [sp, #16]
        capacity_ = n;
 808f0ac:	f8c5 b008 	str.w	fp, [r5, #8]
        data_ = d;
 808f0b0:	602b      	str	r3, [r5, #0]
    T* const p = data_ + i;
 808f0b2:	9b01      	ldr	r3, [sp, #4]
 808f0b4:	f8d5 b000 	ldr.w	fp, [r5]
 808f0b8:	fb0a f303 	mul.w	r3, sl, r3
    move(p + 1, p, data_ + size_);
 808f0bc:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
 808f0be:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
 808f0c2:	f101 0014 	add.w	r0, r1, #20
 808f0c6:	fb0a b202 	mla	r2, sl, r2, fp
 808f0ca:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
 808f0cc:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
 808f0ce:	f7ff fe59 	bl	808ed84 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 808f0d2:	9904      	ldr	r1, [sp, #16]
 808f0d4:	b1a9      	cbz	r1, 808f102 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
 808f0d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 808f0d8:	9b05      	ldr	r3, [sp, #20]
 808f0da:	f84b 2003 	str.w	r2, [fp, r3]
 808f0de:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 808f0e2:	808b      	strh	r3, [r1, #4]
 808f0e4:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
        capacity_(0) {
 808f0e8:	e9c1 7702 	strd	r7, r7, [r1, #8]
 808f0ec:	610f      	str	r7, [r1, #16]
 808f0ee:	80cb      	strh	r3, [r1, #6]
      __a = _GLIBCXX_MOVE(__b);
 808f0f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808f0f2:	608b      	str	r3, [r1, #8]
 808f0f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
 808f0f6:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
 808f0f8:	60cb      	str	r3, [r1, #12]
 808f0fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
 808f0fc:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
 808f0fe:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 808f100:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
 808f102:	686b      	ldr	r3, [r5, #4]
 808f104:	3301      	adds	r3, #1
 808f106:	606b      	str	r3, [r5, #4]
 808f108:	a813      	add	r0, sp, #76	; 0x4c
 808f10a:	f7ff fc95 	bl	808ea38 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 808f10e:	f1b8 0f00 	cmp.w	r8, #0
 808f112:	d008      	beq.n	808f126 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
 808f114:	a80d      	add	r0, sp, #52	; 0x34
 808f116:	f7ff fc8f 	bl	808ea38 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 808f11a:	e756      	b.n	808efca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 808f11c:	4643      	mov	r3, r8
 808f11e:	e7c0      	b.n	808f0a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 808f120:	f04f 0801 	mov.w	r8, #1
 808f124:	e7f0      	b.n	808f108 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
 808f126:	9b01      	ldr	r3, [sp, #4]
 808f128:	682d      	ldr	r5, [r5, #0]
 808f12a:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
 808f12e:	9b08      	ldr	r3, [sp, #32]
 808f130:	781b      	ldrb	r3, [r3, #0]
 808f132:	b92b      	cbnz	r3, 808f140 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
 808f134:	f8d9 3000 	ldr.w	r3, [r9]
 808f138:	9a02      	ldr	r2, [sp, #8]
 808f13a:	4413      	add	r3, r2
 808f13c:	7c1b      	ldrb	r3, [r3, #16]
 808f13e:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 808f140:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 808f142:	e773      	b.n	808f02c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808f144:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 808f146:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808f148:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 808f14a:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808f14c:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808f14e:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
 808f150:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 808f152:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808f154:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 808f156:	60a2      	str	r2, [r4, #8]
 808f158:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 808f15a:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808f15c:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 808f15e:	60e2      	str	r2, [r4, #12]
 808f160:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
 808f162:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808f164:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 808f166:	6122      	str	r2, [r4, #16]
 808f168:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
 808f16a:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
 808f16c:	9b03      	ldr	r3, [sp, #12]
 808f16e:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
 808f170:	6162      	str	r2, [r4, #20]
 808f172:	7623      	strb	r3, [r4, #24]
 808f174:	e7ce      	b.n	808f114 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

0808f178 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 808f178:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
 808f17a:	4605      	mov	r5, r0
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 808f17c:	460e      	mov	r6, r1
 808f17e:	4604      	mov	r4, r0
        filter_(level, filters) {
 808f180:	4b08      	ldr	r3, [pc, #32]	; (808f1a4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
 808f182:	4611      	mov	r1, r2
 808f184:	f845 3b04 	str.w	r3, [r5], #4
 808f188:	a801      	add	r0, sp, #4
 808f18a:	f7f9 ffe0 	bl	808914e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 808f18e:	4631      	mov	r1, r6
 808f190:	aa01      	add	r2, sp, #4
 808f192:	4628      	mov	r0, r5
 808f194:	f7ff feda 	bl	808ef4c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 808f198:	a801      	add	r0, sp, #4
 808f19a:	f7f9 ff7f 	bl	808909c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 808f19e:	4620      	mov	r0, r4
 808f1a0:	b004      	add	sp, #16
 808f1a2:	bd70      	pop	{r4, r5, r6, pc}
 808f1a4:	080941ac 	.word	0x080941ac

0808f1a8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 808f1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 808f1aa:	460f      	mov	r7, r1
 808f1ac:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 808f1ae:	4638      	mov	r0, r7
 808f1b0:	4925      	ldr	r1, [pc, #148]	; (808f248 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
 808f1b2:	4616      	mov	r6, r2
 808f1b4:	461d      	mov	r5, r3
 808f1b6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 808f1b8:	f002 fec7 	bl	8091f4a <strcmp>
 808f1bc:	bb00      	cbnz	r0, 808f200 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
 808f1be:	b1e4      	cbz	r4, 808f1fa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 808f1c0:	4629      	mov	r1, r5
 808f1c2:	4668      	mov	r0, sp
 808f1c4:	f7ff fc92 	bl	808eaec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 808f1c8:	2024      	movs	r0, #36	; 0x24
 808f1ca:	4920      	ldr	r1, [pc, #128]	; (808f24c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 808f1cc:	f001 fc0d 	bl	80909ea <_ZnwjRKSt9nothrow_t>
 808f1d0:	4605      	mov	r5, r0
 808f1d2:	b170      	cbz	r0, 808f1f2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 808f1d4:	4669      	mov	r1, sp
 808f1d6:	a803      	add	r0, sp, #12
 808f1d8:	f7f9 ffb9 	bl	808914e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 808f1dc:	4631      	mov	r1, r6
 808f1de:	aa03      	add	r2, sp, #12
 808f1e0:	4628      	mov	r0, r5
 808f1e2:	f7ff ffc9 	bl	808f178 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 808f1e6:	a803      	add	r0, sp, #12
 808f1e8:	f7f9 ff58 	bl	808909c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
 808f1ec:	4b18      	ldr	r3, [pc, #96]	; (808f250 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
 808f1ee:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
 808f1f0:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 808f1f2:	4668      	mov	r0, sp
 808f1f4:	f7f9 ff52 	bl	808909c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 808f1f8:	462c      	mov	r4, r5
}
 808f1fa:	4620      	mov	r0, r4
 808f1fc:	b007      	add	sp, #28
 808f1fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 808f200:	4638      	mov	r0, r7
 808f202:	4914      	ldr	r1, [pc, #80]	; (808f254 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
 808f204:	f002 fea1 	bl	8091f4a <strcmp>
 808f208:	b9e0      	cbnz	r0, 808f244 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
 808f20a:	2c00      	cmp	r4, #0
 808f20c:	d0f5      	beq.n	808f1fa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 808f20e:	4629      	mov	r1, r5
 808f210:	4668      	mov	r0, sp
 808f212:	f7ff fc6b 	bl	808eaec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 808f216:	2024      	movs	r0, #36	; 0x24
 808f218:	490c      	ldr	r1, [pc, #48]	; (808f24c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 808f21a:	f001 fbe6 	bl	80909ea <_ZnwjRKSt9nothrow_t>
 808f21e:	4605      	mov	r5, r0
 808f220:	2800      	cmp	r0, #0
 808f222:	d0e6      	beq.n	808f1f2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 808f224:	4669      	mov	r1, sp
 808f226:	a803      	add	r0, sp, #12
 808f228:	f7f9 ff91 	bl	808914e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 808f22c:	4631      	mov	r1, r6
 808f22e:	aa03      	add	r2, sp, #12
 808f230:	4628      	mov	r0, r5
 808f232:	f7ff ffa1 	bl	808f178 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 808f236:	a803      	add	r0, sp, #12
 808f238:	f7f9 ff30 	bl	808909c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 808f23c:	4b06      	ldr	r3, [pc, #24]	; (808f258 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
 808f23e:	622c      	str	r4, [r5, #32]
 808f240:	602b      	str	r3, [r5, #0]
}
 808f242:	e7d6      	b.n	808f1f2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
 808f244:	2400      	movs	r4, #0
 808f246:	e7d8      	b.n	808f1fa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
 808f248:	0809505c 	.word	0x0809505c
 808f24c:	080951e8 	.word	0x080951e8
 808f250:	080950e8 	.word	0x080950e8
 808f254:	08095060 	.word	0x08095060
 808f258:	080950d0 	.word	0x080950d0

0808f25c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 808f25c:	4b01      	ldr	r3, [pc, #4]	; (808f264 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 808f25e:	4a02      	ldr	r2, [pc, #8]	; (808f268 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 808f260:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 808f262:	4770      	bx	lr
 808f264:	200015a4 	.word	0x200015a4
 808f268:	08094183 	.word	0x08094183

0808f26c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 808f26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808f270:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 808f272:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 808f276:	4604      	mov	r4, r0
 808f278:	460e      	mov	r6, r1
 808f27a:	4617      	mov	r7, r2
 808f27c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 808f27e:	f001 f8bb 	bl	80903f8 <_Z16_fetch_usbserialv>
 808f282:	4581      	cmp	r9, r0
 808f284:	d04d      	beq.n	808f322 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 808f286:	792b      	ldrb	r3, [r5, #4]
 808f288:	0719      	lsls	r1, r3, #28
 808f28a:	d504      	bpl.n	808f296 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 808f28c:	4620      	mov	r0, r4
 808f28e:	696a      	ldr	r2, [r5, #20]
 808f290:	4954      	ldr	r1, [pc, #336]	; (808f3e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 808f292:	f7ff fa2b 	bl	808e6ec <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 808f296:	f1b8 0f00 	cmp.w	r8, #0
 808f29a:	d00d      	beq.n	808f2b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 808f29c:	215b      	movs	r1, #91	; 0x5b
 808f29e:	4620      	mov	r0, r4
 808f2a0:	f7ff fa18 	bl	808e6d4 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 808f2a4:	4641      	mov	r1, r8
 808f2a6:	4620      	mov	r0, r4
 808f2a8:	f7ff fa06 	bl	808e6b8 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 808f2ac:	6823      	ldr	r3, [r4, #0]
 808f2ae:	2202      	movs	r2, #2
 808f2b0:	4620      	mov	r0, r4
 808f2b2:	68db      	ldr	r3, [r3, #12]
 808f2b4:	494c      	ldr	r1, [pc, #304]	; (808f3e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 808f2b6:	4798      	blx	r3
    if (attr.has_file) {
 808f2b8:	792b      	ldrb	r3, [r5, #4]
 808f2ba:	07da      	lsls	r2, r3, #31
 808f2bc:	d524      	bpl.n	808f308 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 808f2be:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 808f2c2:	212f      	movs	r1, #47	; 0x2f
 808f2c4:	4640      	mov	r0, r8
 808f2c6:	f002 fe9b 	bl	8092000 <strrchr>
    if (s1) {
 808f2ca:	b108      	cbz	r0, 808f2d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 808f2cc:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 808f2d0:	4641      	mov	r1, r8
 808f2d2:	4620      	mov	r0, r4
 808f2d4:	f7ff f9f0 	bl	808e6b8 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 808f2d8:	792b      	ldrb	r3, [r5, #4]
 808f2da:	079b      	lsls	r3, r3, #30
 808f2dc:	d508      	bpl.n	808f2f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 808f2de:	213a      	movs	r1, #58	; 0x3a
 808f2e0:	4620      	mov	r0, r4
 808f2e2:	f7ff f9f7 	bl	808e6d4 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 808f2e6:	4620      	mov	r0, r4
 808f2e8:	68ea      	ldr	r2, [r5, #12]
 808f2ea:	4940      	ldr	r1, [pc, #256]	; (808f3ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 808f2ec:	f7ff f9fe 	bl	808e6ec <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 808f2f0:	792a      	ldrb	r2, [r5, #4]
 808f2f2:	6823      	ldr	r3, [r4, #0]
 808f2f4:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 808f2f8:	4620      	mov	r0, r4
            write(", ", 2);
 808f2fa:	f04f 0202 	mov.w	r2, #2
 808f2fe:	68db      	ldr	r3, [r3, #12]
 808f300:	bf14      	ite	ne
 808f302:	493b      	ldrne	r1, [pc, #236]	; (808f3f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 808f304:	493b      	ldreq	r1, [pc, #236]	; (808f3f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 808f306:	4798      	blx	r3
    if (attr.has_function) {
 808f308:	792b      	ldrb	r3, [r5, #4]
 808f30a:	0758      	lsls	r0, r3, #29
 808f30c:	d51d      	bpl.n	808f34a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 808f30e:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 808f310:	460b      	mov	r3, r1
 808f312:	461a      	mov	r2, r3
    for (; *s; ++s) {
 808f314:	f813 0b01 	ldrb.w	r0, [r3], #1
 808f318:	b160      	cbz	r0, 808f334 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 808f31a:	2820      	cmp	r0, #32
 808f31c:	d108      	bne.n	808f330 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 808f31e:	4619      	mov	r1, r3
 808f320:	e7f7      	b.n	808f312 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 808f322:	4835      	ldr	r0, [pc, #212]	; (808f3f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 808f324:	f000 f967 	bl	808f5f6 <_ZN5spark12NetworkClass9listeningEv>
 808f328:	2800      	cmp	r0, #0
 808f32a:	d0ac      	beq.n	808f286 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 808f32c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 808f330:	2828      	cmp	r0, #40	; 0x28
 808f332:	d1ee      	bne.n	808f312 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 808f334:	6823      	ldr	r3, [r4, #0]
 808f336:	1a52      	subs	r2, r2, r1
 808f338:	4620      	mov	r0, r4
 808f33a:	68db      	ldr	r3, [r3, #12]
 808f33c:	4798      	blx	r3
        write("(): ", 4);
 808f33e:	6823      	ldr	r3, [r4, #0]
 808f340:	2204      	movs	r2, #4
 808f342:	4620      	mov	r0, r4
 808f344:	68db      	ldr	r3, [r3, #12]
 808f346:	492d      	ldr	r1, [pc, #180]	; (808f3fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 808f348:	4798      	blx	r3
    return log_level_name(level, nullptr);
 808f34a:	2100      	movs	r1, #0
 808f34c:	4638      	mov	r0, r7
 808f34e:	f7fd ffc5 	bl	808d2dc <log_level_name>
 808f352:	4601      	mov	r1, r0
    write(s);
 808f354:	4620      	mov	r0, r4
 808f356:	f7ff f9af 	bl	808e6b8 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 808f35a:	6823      	ldr	r3, [r4, #0]
 808f35c:	2202      	movs	r2, #2
 808f35e:	4620      	mov	r0, r4
 808f360:	68db      	ldr	r3, [r3, #12]
 808f362:	4924      	ldr	r1, [pc, #144]	; (808f3f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 808f364:	4798      	blx	r3
    if (msg) {
 808f366:	b11e      	cbz	r6, 808f370 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 808f368:	4631      	mov	r1, r6
 808f36a:	4620      	mov	r0, r4
 808f36c:	f7ff f9a4 	bl	808e6b8 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 808f370:	792b      	ldrb	r3, [r5, #4]
 808f372:	f013 0f30 	tst.w	r3, #48	; 0x30
 808f376:	d02c      	beq.n	808f3d2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 808f378:	6823      	ldr	r3, [r4, #0]
 808f37a:	4921      	ldr	r1, [pc, #132]	; (808f400 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 808f37c:	68db      	ldr	r3, [r3, #12]
 808f37e:	2202      	movs	r2, #2
 808f380:	4620      	mov	r0, r4
 808f382:	4798      	blx	r3
        if (attr.has_code) {
 808f384:	792b      	ldrb	r3, [r5, #4]
 808f386:	06d9      	lsls	r1, r3, #27
 808f388:	d50a      	bpl.n	808f3a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 808f38a:	6823      	ldr	r3, [r4, #0]
 808f38c:	2207      	movs	r2, #7
 808f38e:	4620      	mov	r0, r4
 808f390:	491c      	ldr	r1, [pc, #112]	; (808f404 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 808f392:	68db      	ldr	r3, [r3, #12]
 808f394:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 808f396:	4620      	mov	r0, r4
 808f398:	69aa      	ldr	r2, [r5, #24]
 808f39a:	491b      	ldr	r1, [pc, #108]	; (808f408 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 808f39c:	f7ff f9a6 	bl	808e6ec <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 808f3a0:	792b      	ldrb	r3, [r5, #4]
 808f3a2:	069a      	lsls	r2, r3, #26
 808f3a4:	d511      	bpl.n	808f3ca <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 808f3a6:	06db      	lsls	r3, r3, #27
 808f3a8:	d505      	bpl.n	808f3b6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 808f3aa:	6823      	ldr	r3, [r4, #0]
 808f3ac:	2202      	movs	r2, #2
 808f3ae:	4620      	mov	r0, r4
 808f3b0:	68db      	ldr	r3, [r3, #12]
 808f3b2:	490f      	ldr	r1, [pc, #60]	; (808f3f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 808f3b4:	4798      	blx	r3
            write("details = ", 10);
 808f3b6:	6823      	ldr	r3, [r4, #0]
 808f3b8:	4620      	mov	r0, r4
 808f3ba:	4914      	ldr	r1, [pc, #80]	; (808f40c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 808f3bc:	220a      	movs	r2, #10
 808f3be:	68db      	ldr	r3, [r3, #12]
 808f3c0:	4798      	blx	r3
            write(attr.details);
 808f3c2:	4620      	mov	r0, r4
 808f3c4:	69e9      	ldr	r1, [r5, #28]
 808f3c6:	f7ff f977 	bl	808e6b8 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 808f3ca:	215d      	movs	r1, #93	; 0x5d
 808f3cc:	4620      	mov	r0, r4
 808f3ce:	f7ff f981 	bl	808e6d4 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 808f3d2:	6823      	ldr	r3, [r4, #0]
 808f3d4:	4620      	mov	r0, r4
}
 808f3d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 808f3da:	2202      	movs	r2, #2
 808f3dc:	68db      	ldr	r3, [r3, #12]
 808f3de:	490c      	ldr	r1, [pc, #48]	; (808f410 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 808f3e0:	4718      	bx	r3
 808f3e2:	bf00      	nop
 808f3e4:	08095071 	.word	0x08095071
 808f3e8:	08095078 	.word	0x08095078
 808f3ec:	08094237 	.word	0x08094237
 808f3f0:	0809507b 	.word	0x0809507b
 808f3f4:	08093aff 	.word	0x08093aff
 808f3f8:	200015d0 	.word	0x200015d0
 808f3fc:	0809507e 	.word	0x0809507e
 808f400:	08095083 	.word	0x08095083
 808f404:	08095086 	.word	0x08095086
 808f408:	0809508e 	.word	0x0809508e
 808f40c:	08095091 	.word	0x08095091
 808f410:	08094ad3 	.word	0x08094ad3

0808f414 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 808f414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808f418:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
 808f41a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 808f41e:	4605      	mov	r5, r0
 808f420:	460f      	mov	r7, r1
 808f422:	4690      	mov	r8, r2
 808f424:	461e      	mov	r6, r3
 808f426:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 808f428:	f000 ffe6 	bl	80903f8 <_Z16_fetch_usbserialv>
 808f42c:	4581      	cmp	r9, r0
 808f42e:	d105      	bne.n	808f43c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 808f430:	4849      	ldr	r0, [pc, #292]	; (808f558 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 808f432:	f000 f8e0 	bl	808f5f6 <_ZN5spark12NetworkClass9listeningEv>
 808f436:	2800      	cmp	r0, #0
 808f438:	f040 808a 	bne.w	808f550 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 808f43c:	f04f 0900 	mov.w	r9, #0
    JSONStreamWriter json(*this->stream());
 808f440:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 808f442:	4a46      	ldr	r2, [pc, #280]	; (808f55c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 808f444:	a801      	add	r0, sp, #4
 808f446:	9201      	str	r2, [sp, #4]
 808f448:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 808f44a:	f88d 9008 	strb.w	r9, [sp, #8]
 808f44e:	f7ff f81e 	bl	808e48e <_ZN5spark10JSONWriter11beginObjectEv>
 808f452:	4649      	mov	r1, r9
 808f454:	4640      	mov	r0, r8
 808f456:	f7fd ff41 	bl	808d2dc <log_level_name>
 808f45a:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 808f45c:	4940      	ldr	r1, [pc, #256]	; (808f560 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 808f45e:	2201      	movs	r2, #1
 808f460:	a801      	add	r0, sp, #4
 808f462:	f7ff f89d 	bl	808e5a0 <_ZN5spark10JSONWriter4nameEPKcj>
 808f466:	4641      	mov	r1, r8
 808f468:	f7ff f919 	bl	808e69e <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 808f46c:	b13f      	cbz	r7, 808f47e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 808f46e:	493d      	ldr	r1, [pc, #244]	; (808f564 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 808f470:	2201      	movs	r2, #1
 808f472:	a801      	add	r0, sp, #4
 808f474:	f7ff f894 	bl	808e5a0 <_ZN5spark10JSONWriter4nameEPKcj>
 808f478:	4639      	mov	r1, r7
 808f47a:	f7ff f910 	bl	808e69e <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 808f47e:	b13e      	cbz	r6, 808f490 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 808f480:	4939      	ldr	r1, [pc, #228]	; (808f568 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 808f482:	2201      	movs	r2, #1
 808f484:	a801      	add	r0, sp, #4
 808f486:	f7ff f88b 	bl	808e5a0 <_ZN5spark10JSONWriter4nameEPKcj>
 808f48a:	4631      	mov	r1, r6
 808f48c:	f7ff f907 	bl	808e69e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 808f490:	7923      	ldrb	r3, [r4, #4]
 808f492:	07df      	lsls	r7, r3, #31
 808f494:	d50e      	bpl.n	808f4b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 808f496:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 808f498:	212f      	movs	r1, #47	; 0x2f
 808f49a:	4630      	mov	r0, r6
 808f49c:	f002 fdb0 	bl	8092000 <strrchr>
    if (s1) {
 808f4a0:	b100      	cbz	r0, 808f4a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 808f4a2:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 808f4a4:	4931      	ldr	r1, [pc, #196]	; (808f56c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 808f4a6:	2201      	movs	r2, #1
 808f4a8:	a801      	add	r0, sp, #4
 808f4aa:	f7ff f879 	bl	808e5a0 <_ZN5spark10JSONWriter4nameEPKcj>
 808f4ae:	4631      	mov	r1, r6
 808f4b0:	f7ff f8f5 	bl	808e69e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 808f4b4:	7923      	ldrb	r3, [r4, #4]
 808f4b6:	079e      	lsls	r6, r3, #30
 808f4b8:	d507      	bpl.n	808f4ca <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 808f4ba:	492d      	ldr	r1, [pc, #180]	; (808f570 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 808f4bc:	2202      	movs	r2, #2
 808f4be:	a801      	add	r0, sp, #4
 808f4c0:	f7ff f86e 	bl	808e5a0 <_ZN5spark10JSONWriter4nameEPKcj>
 808f4c4:	68e1      	ldr	r1, [r4, #12]
 808f4c6:	f7fe ffef 	bl	808e4a8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 808f4ca:	7923      	ldrb	r3, [r4, #4]
 808f4cc:	0758      	lsls	r0, r3, #29
 808f4ce:	d514      	bpl.n	808f4fa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 808f4d0:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 808f4d2:	4633      	mov	r3, r6
 808f4d4:	461f      	mov	r7, r3
    for (; *s; ++s) {
 808f4d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 808f4da:	b12a      	cbz	r2, 808f4e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 808f4dc:	2a20      	cmp	r2, #32
 808f4de:	d101      	bne.n	808f4e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 808f4e0:	461e      	mov	r6, r3
 808f4e2:	e7f7      	b.n	808f4d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 808f4e4:	2a28      	cmp	r2, #40	; 0x28
 808f4e6:	d1f5      	bne.n	808f4d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 808f4e8:	2202      	movs	r2, #2
 808f4ea:	4922      	ldr	r1, [pc, #136]	; (808f574 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 808f4ec:	a801      	add	r0, sp, #4
 808f4ee:	f7ff f857 	bl	808e5a0 <_ZN5spark10JSONWriter4nameEPKcj>
 808f4f2:	4631      	mov	r1, r6
 808f4f4:	1bba      	subs	r2, r7, r6
 808f4f6:	f7ff f862 	bl	808e5be <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 808f4fa:	7923      	ldrb	r3, [r4, #4]
 808f4fc:	0719      	lsls	r1, r3, #28
 808f4fe:	d507      	bpl.n	808f510 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 808f500:	491d      	ldr	r1, [pc, #116]	; (808f578 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 808f502:	2201      	movs	r2, #1
 808f504:	a801      	add	r0, sp, #4
 808f506:	f7ff f84b 	bl	808e5a0 <_ZN5spark10JSONWriter4nameEPKcj>
 808f50a:	6961      	ldr	r1, [r4, #20]
 808f50c:	f7fe ffde 	bl	808e4cc <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 808f510:	7923      	ldrb	r3, [r4, #4]
 808f512:	06da      	lsls	r2, r3, #27
 808f514:	d508      	bpl.n	808f528 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 808f516:	2204      	movs	r2, #4
 808f518:	4918      	ldr	r1, [pc, #96]	; (808f57c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 808f51a:	eb0d 0002 	add.w	r0, sp, r2
 808f51e:	f7ff f83f 	bl	808e5a0 <_ZN5spark10JSONWriter4nameEPKcj>
 808f522:	69a1      	ldr	r1, [r4, #24]
 808f524:	f7fe ffc0 	bl	808e4a8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 808f528:	7923      	ldrb	r3, [r4, #4]
 808f52a:	069b      	lsls	r3, r3, #26
 808f52c:	d507      	bpl.n	808f53e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 808f52e:	4914      	ldr	r1, [pc, #80]	; (808f580 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 808f530:	2206      	movs	r2, #6
 808f532:	a801      	add	r0, sp, #4
 808f534:	f7ff f834 	bl	808e5a0 <_ZN5spark10JSONWriter4nameEPKcj>
 808f538:	69e1      	ldr	r1, [r4, #28]
 808f53a:	f7ff f8b0 	bl	808e69e <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 808f53e:	a801      	add	r0, sp, #4
 808f540:	f7fe ff8f 	bl	808e462 <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
 808f544:	6a28      	ldr	r0, [r5, #32]
 808f546:	2202      	movs	r2, #2
 808f548:	6803      	ldr	r3, [r0, #0]
 808f54a:	490e      	ldr	r1, [pc, #56]	; (808f584 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 808f54c:	68db      	ldr	r3, [r3, #12]
 808f54e:	4798      	blx	r3
}
 808f550:	b005      	add	sp, #20
 808f552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808f556:	bf00      	nop
 808f558:	200015d0 	.word	0x200015d0
 808f55c:	080950b8 	.word	0x080950b8
 808f560:	0809504f 	.word	0x0809504f
 808f564:	08094943 	.word	0x08094943
 808f568:	08094691 	.word	0x08094691
 808f56c:	080947b4 	.word	0x080947b4
 808f570:	0809509c 	.word	0x0809509c
 808f574:	0809509f 	.word	0x0809509f
 808f578:	080937dd 	.word	0x080937dd
 808f57c:	080950a2 	.word	0x080950a2
 808f580:	080950a7 	.word	0x080950a7
 808f584:	08094ad3 	.word	0x08094ad3

0808f588 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 808f588:	2300      	movs	r3, #0
 808f58a:	6840      	ldr	r0, [r0, #4]
 808f58c:	461a      	mov	r2, r3
 808f58e:	f7fd bf63 	b.w	808d458 <network_connect>

0808f592 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 808f592:	2200      	movs	r2, #0
 808f594:	2102      	movs	r1, #2
 808f596:	6840      	ldr	r0, [r0, #4]
 808f598:	f7fd bf6e 	b.w	808d478 <network_disconnect>

0808f59c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 808f59c:	2200      	movs	r2, #0
 808f59e:	6840      	ldr	r0, [r0, #4]
 808f5a0:	4611      	mov	r1, r2
 808f5a2:	f7fd bf61 	b.w	808d468 <network_connecting>

0808f5a6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808f5a6:	2200      	movs	r2, #0
 808f5a8:	6840      	ldr	r0, [r0, #4]
 808f5aa:	4611      	mov	r1, r2
 808f5ac:	f7fd bf6c 	b.w	808d488 <network_ready>

0808f5b0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 808f5b0:	2300      	movs	r3, #0
 808f5b2:	6840      	ldr	r0, [r0, #4]
 808f5b4:	461a      	mov	r2, r3
 808f5b6:	4619      	mov	r1, r3
 808f5b8:	f7fd bf6e 	b.w	808d498 <network_on>

0808f5bc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 808f5bc:	2300      	movs	r3, #0
 808f5be:	6840      	ldr	r0, [r0, #4]
 808f5c0:	461a      	mov	r2, r3
 808f5c2:	4619      	mov	r1, r3
 808f5c4:	f7fd bf70 	b.w	808d4a8 <network_off>

0808f5c8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 808f5c8:	2100      	movs	r1, #0
 808f5ca:	6840      	ldr	r0, [r0, #4]
 808f5cc:	f7fd bf94 	b.w	808d4f8 <network_is_on>

0808f5d0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 808f5d0:	2100      	movs	r1, #0
 808f5d2:	6840      	ldr	r0, [r0, #4]
 808f5d4:	f7fd bf98 	b.w	808d508 <network_is_off>

0808f5d8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 808f5d8:	2200      	movs	r2, #0
 808f5da:	6840      	ldr	r0, [r0, #4]
 808f5dc:	f081 0101 	eor.w	r1, r1, #1
 808f5e0:	f7fd bf6a 	b.w	808d4b8 <network_listen>

0808f5e4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 808f5e4:	2200      	movs	r2, #0
 808f5e6:	6840      	ldr	r0, [r0, #4]
 808f5e8:	f7fd bf76 	b.w	808d4d8 <network_set_listen_timeout>

0808f5ec <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 808f5ec:	2200      	movs	r2, #0
 808f5ee:	6840      	ldr	r0, [r0, #4]
 808f5f0:	4611      	mov	r1, r2
 808f5f2:	f7fd bf79 	b.w	808d4e8 <network_get_listen_timeout>

0808f5f6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808f5f6:	2200      	movs	r2, #0
 808f5f8:	6840      	ldr	r0, [r0, #4]
 808f5fa:	4611      	mov	r1, r2
 808f5fc:	f7fd bf64 	b.w	808d4c8 <network_listening>

0808f600 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 808f600:	b570      	push	{r4, r5, r6, lr}
 808f602:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 808f604:	2600      	movs	r6, #0
 808f606:	b086      	sub	sp, #24
 808f608:	4604      	mov	r4, r0
    IPAddress addr;
 808f60a:	a804      	add	r0, sp, #16
 808f60c:	f7fe fdd0 	bl	808e1b0 <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808f610:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 808f612:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808f614:	f002 fcc7 	bl	8091fa6 <strlen>
 808f618:	4b0a      	ldr	r3, [pc, #40]	; (808f644 <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 808f61a:	9600      	str	r6, [sp, #0]
 808f61c:	b281      	uxth	r1, r0
 808f61e:	685b      	ldr	r3, [r3, #4]
 808f620:	4628      	mov	r0, r5
 808f622:	aa03      	add	r2, sp, #12
 808f624:	f7fd fbfa 	bl	808ce1c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808f628:	b130      	cbz	r0, 808f638 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 808f62a:	4631      	mov	r1, r6
 808f62c:	4620      	mov	r0, r4
 808f62e:	f7fe fdcf 	bl	808e1d0 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 808f632:	4620      	mov	r0, r4
 808f634:	b006      	add	sp, #24
 808f636:	bd70      	pop	{r4, r5, r6, pc}
 808f638:	4620      	mov	r0, r4
 808f63a:	a903      	add	r1, sp, #12
 808f63c:	f7fe fdc0 	bl	808e1c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 808f640:	e7f7      	b.n	808f632 <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 808f642:	bf00      	nop
 808f644:	20001568 	.word	0x20001568

0808f648 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 808f648:	4b02      	ldr	r3, [pc, #8]	; (808f654 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 808f64a:	4a03      	ldr	r2, [pc, #12]	; (808f658 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 808f64c:	601a      	str	r2, [r3, #0]
 808f64e:	2200      	movs	r2, #0
 808f650:	605a      	str	r2, [r3, #4]

} // spark
 808f652:	4770      	bx	lr
 808f654:	200015d0 	.word	0x200015d0
 808f658:	08095130 	.word	0x08095130

0808f65c <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 808f65c:	b508      	push	{r3, lr}
            return &Wire3;
 808f65e:	f001 f97d 	bl	809095c <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}
 808f662:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
 808f666:	f7fe bd43 	b.w	808e0f0 <_ZN7TwoWire4lockEv>

0808f66a <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
 808f66a:	b510      	push	{r4, lr}
 808f66c:	4604      	mov	r4, r0
    lock_(_lock)
 808f66e:	7001      	strb	r1, [r0, #0]
    if (lock_) {
 808f670:	b109      	cbz	r1, 808f676 <_ZN4PMICC1Eb+0xc>
        lock();
 808f672:	f7ff fff3 	bl	808f65c <_ZN4PMIC4lockEv.constprop.0>
}
 808f676:	4620      	mov	r0, r4
 808f678:	bd10      	pop	{r4, pc}

0808f67a <_ZN4PMIC5beginEv>:
{
 808f67a:	b508      	push	{r3, lr}
            return &Wire3;
 808f67c:	f001 f96e 	bl	809095c <_Z20__fetch_global_Wire3v>
    if (!pmicWireInstance()->isEnabled()) {
 808f680:	f7fe fd32 	bl	808e0e8 <_ZN7TwoWire9isEnabledEv>
 808f684:	b918      	cbnz	r0, 808f68e <_ZN4PMIC5beginEv+0x14>
            return &Wire3;
 808f686:	f001 f969 	bl	809095c <_Z20__fetch_global_Wire3v>
        pmicWireInstance()->begin();
 808f68a:	f7fe fcd5 	bl	808e038 <_ZN7TwoWire5beginEv>
            return &Wire3;
 808f68e:	f001 f965 	bl	809095c <_Z20__fetch_global_Wire3v>
}
 808f692:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->isEnabled();
 808f696:	f7fe bd27 	b.w	808e0e8 <_ZN7TwoWire9isEnabledEv>

0808f69a <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
 808f69a:	b508      	push	{r3, lr}
            return &Wire3;
 808f69c:	f001 f95e 	bl	809095c <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->unlock();
}
 808f6a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
 808f6a4:	f7fe bd2d 	b.w	808e102 <_ZN7TwoWire6unlockEv>

0808f6a8 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
 808f6a8:	b510      	push	{r4, lr}
    if (lock_) {
 808f6aa:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
 808f6ac:	4604      	mov	r4, r0
    if (lock_) {
 808f6ae:	b10b      	cbz	r3, 808f6b4 <_ZN4PMICD1Ev+0xc>
        unlock();
 808f6b0:	f7ff fff3 	bl	808f69a <_ZN4PMIC6unlockEv>
}
 808f6b4:	4620      	mov	r0, r4
 808f6b6:	bd10      	pop	{r4, pc}

0808f6b8 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
 808f6b8:	b510      	push	{r4, lr}
 808f6ba:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 808f6bc:	6800      	ldr	r0, [r0, #0]
 808f6be:	f7ff ffec 	bl	808f69a <_ZN4PMIC6unlockEv>
 808f6c2:	4620      	mov	r0, r4
 808f6c4:	bd10      	pop	{r4, pc}

0808f6c6 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
 808f6c6:	b530      	push	{r4, r5, lr}
 808f6c8:	b087      	sub	sp, #28
 808f6ca:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808f6cc:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808f6ce:	f7ff ffc5 	bl	808f65c <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808f6d2:	236b      	movs	r3, #107	; 0x6b
 808f6d4:	f88d 3008 	strb.w	r3, [sp, #8]
 808f6d8:	2300      	movs	r3, #0
 808f6da:	2401      	movs	r4, #1
 808f6dc:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
 808f6de:	230a      	movs	r3, #10
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808f6e0:	f88d 4010 	strb.w	r4, [sp, #16]
    timeout_ = ms;
 808f6e4:	9305      	str	r3, [sp, #20]
            return &Wire3;
 808f6e6:	f001 f939 	bl	809095c <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(config);
 808f6ea:	a902      	add	r1, sp, #8
 808f6ec:	f7fe fcdd 	bl	808e0aa <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire3;
 808f6f0:	f001 f934 	bl	809095c <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(startAddress);
 808f6f4:	6803      	ldr	r3, [r0, #0]
 808f6f6:	4629      	mov	r1, r5
 808f6f8:	689b      	ldr	r3, [r3, #8]
 808f6fa:	4798      	blx	r3
            return &Wire3;
 808f6fc:	f001 f92e 	bl	809095c <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
 808f700:	4621      	mov	r1, r4
 808f702:	f7fe fcea 	bl	808e0da <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
 808f706:	9403      	str	r4, [sp, #12]
            return &Wire3;
 808f708:	f001 f928 	bl	809095c <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->requestFrom(config);
 808f70c:	a902      	add	r1, sp, #8
 808f70e:	f7fe fc99 	bl	808e044 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire3;
 808f712:	f001 f923 	bl	809095c <_Z20__fetch_global_Wire3v>
    DATA = pmicWireInstance()->read();
 808f716:	6803      	ldr	r3, [r0, #0]
 808f718:	695b      	ldr	r3, [r3, #20]
 808f71a:	4798      	blx	r3
 808f71c:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
 808f71e:	a801      	add	r0, sp, #4
 808f720:	f7ff ffca 	bl	808f6b8 <_ZNSt10lock_guardI4PMICED1Ev>
}
 808f724:	b2e0      	uxtb	r0, r4
 808f726:	b007      	add	sp, #28
 808f728:	bd30      	pop	{r4, r5, pc}

0808f72a <_ZN4PMIC16getChargeVoltageEv>:
    return readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 808f72a:	2104      	movs	r1, #4
 808f72c:	f7ff bfcb 	b.w	808f6c6 <_ZN4PMIC12readRegisterEh>

0808f730 <_ZN4PMIC21getChargeVoltageValueEv>:
uint16_t PMIC::getChargeVoltageValue() {
 808f730:	b510      	push	{r4, lr}
    byte raw = getChargeVoltage();
 808f732:	f7ff fffa 	bl	808f72a <_ZN4PMIC16getChargeVoltageEv>
 808f736:	2302      	movs	r3, #2
    unsigned v = 3504;
 808f738:	f44f 625b 	mov.w	r2, #3504	; 0xdb0
    unsigned baseVoltage = 16;
 808f73c:	2110      	movs	r1, #16
        byte b = (raw >> (i + 2)) & 0x01;
 808f73e:	fa40 f403 	asr.w	r4, r0, r3
 808f742:	3301      	adds	r3, #1
        v += ((unsigned)b) * baseVoltage;
 808f744:	f004 0401 	and.w	r4, r4, #1
    for (unsigned i = 0; i < 6; i++) {
 808f748:	2b08      	cmp	r3, #8
        v += ((unsigned)b) * baseVoltage;
 808f74a:	fb01 2204 	mla	r2, r1, r4, r2
        baseVoltage *= 2;
 808f74e:	ea4f 0141 	mov.w	r1, r1, lsl #1
    for (unsigned i = 0; i < 6; i++) {
 808f752:	d1f4      	bne.n	808f73e <_ZN4PMIC21getChargeVoltageValueEv+0xe>
}
 808f754:	b290      	uxth	r0, r2
 808f756:	bd10      	pop	{r4, pc}

0808f758 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
 808f758:	b570      	push	{r4, r5, r6, lr}
 808f75a:	b086      	sub	sp, #24
 808f75c:	4614      	mov	r4, r2
 808f75e:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808f760:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808f762:	f7ff ff7b 	bl	808f65c <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808f766:	236b      	movs	r3, #107	; 0x6b
 808f768:	f88d 3008 	strb.w	r3, [sp, #8]
 808f76c:	2300      	movs	r3, #0
 808f76e:	2601      	movs	r6, #1
 808f770:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
 808f772:	230a      	movs	r3, #10
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808f774:	f88d 6010 	strb.w	r6, [sp, #16]
    timeout_ = ms;
 808f778:	9305      	str	r3, [sp, #20]
            return &Wire3;
 808f77a:	f001 f8ef 	bl	809095c <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(config);
 808f77e:	a902      	add	r1, sp, #8
 808f780:	f7fe fc93 	bl	808e0aa <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire3;
 808f784:	f001 f8ea 	bl	809095c <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(address);
 808f788:	6803      	ldr	r3, [r0, #0]
 808f78a:	4629      	mov	r1, r5
 808f78c:	689b      	ldr	r3, [r3, #8]
 808f78e:	4798      	blx	r3
            return &Wire3;
 808f790:	f001 f8e4 	bl	809095c <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(DATA);
 808f794:	6803      	ldr	r3, [r0, #0]
 808f796:	4621      	mov	r1, r4
 808f798:	689b      	ldr	r3, [r3, #8]
 808f79a:	4798      	blx	r3
            return &Wire3;
 808f79c:	f001 f8de 	bl	809095c <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
 808f7a0:	4631      	mov	r1, r6
 808f7a2:	f7fe fc9a 	bl	808e0da <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
 808f7a6:	a801      	add	r0, sp, #4
 808f7a8:	f7ff ff86 	bl	808f6b8 <_ZNSt10lock_guardI4PMICED1Ev>
}
 808f7ac:	b006      	add	sp, #24
 808f7ae:	bd70      	pop	{r4, r5, r6, pc}

0808f7b0 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
 808f7b0:	b513      	push	{r0, r1, r4, lr}
 808f7b2:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808f7b4:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808f7b6:	f7ff ff51 	bl	808f65c <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
 808f7ba:	2101      	movs	r1, #1
 808f7bc:	4620      	mov	r0, r4
 808f7be:	f7ff ff82 	bl	808f6c6 <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
 808f7c2:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
 808f7c6:	2101      	movs	r1, #1
 808f7c8:	4620      	mov	r0, r4
 808f7ca:	f042 0210 	orr.w	r2, r2, #16
 808f7ce:	f7ff ffc3 	bl	808f758 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 808f7d2:	a801      	add	r0, sp, #4
 808f7d4:	f7ff ff70 	bl	808f6b8 <_ZNSt10lock_guardI4PMICED1Ev>
}
 808f7d8:	2001      	movs	r0, #1
 808f7da:	b002      	add	sp, #8
 808f7dc:	bd10      	pop	{r4, pc}

0808f7de <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
 808f7de:	b513      	push	{r0, r1, r4, lr}
 808f7e0:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808f7e2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808f7e4:	f7ff ff3a 	bl	808f65c <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
 808f7e8:	2101      	movs	r1, #1
 808f7ea:	4620      	mov	r0, r4
 808f7ec:	f7ff ff6b 	bl	808f6c6 <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
 808f7f0:	2101      	movs	r1, #1
 808f7f2:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
 808f7f6:	4620      	mov	r0, r4
 808f7f8:	f7ff ffae 	bl	808f758 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 808f7fc:	a801      	add	r0, sp, #4
 808f7fe:	f7ff ff5b 	bl	808f6b8 <_ZNSt10lock_guardI4PMICED1Ev>
}
 808f802:	2001      	movs	r0, #1
 808f804:	b002      	add	sp, #8
 808f806:	bd10      	pop	{r4, pc}

0808f808 <_ZN4PMIC12enableBATFETEv>:
bool PMIC::enableBATFET(void) {
 808f808:	b513      	push	{r0, r1, r4, lr}
 808f80a:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808f80c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808f80e:	f7ff ff25 	bl	808f65c <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(MISC_CONTROL_REGISTER);
 808f812:	2107      	movs	r1, #7
 808f814:	4620      	mov	r0, r4
 808f816:	f7ff ff56 	bl	808f6c6 <_ZN4PMIC12readRegisterEh>
    writeRegister(MISC_CONTROL_REGISTER, (DATA & 0b11011111));
 808f81a:	2107      	movs	r1, #7
 808f81c:	f000 02df 	and.w	r2, r0, #223	; 0xdf
 808f820:	4620      	mov	r0, r4
 808f822:	f7ff ff99 	bl	808f758 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 808f826:	a801      	add	r0, sp, #4
 808f828:	f7ff ff46 	bl	808f6b8 <_ZNSt10lock_guardI4PMICED1Ev>
}
 808f82c:	2001      	movs	r0, #1
 808f82e:	b002      	add	sp, #8
 808f830:	bd10      	pop	{r4, pc}

0808f832 <_ZN4PMIC13disableBATFETEv>:
bool PMIC::disableBATFET(void) {
 808f832:	b513      	push	{r0, r1, r4, lr}
 808f834:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808f836:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808f838:	f7ff ff10 	bl	808f65c <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(MISC_CONTROL_REGISTER);
 808f83c:	2107      	movs	r1, #7
 808f83e:	4620      	mov	r0, r4
 808f840:	f7ff ff41 	bl	808f6c6 <_ZN4PMIC12readRegisterEh>
    writeRegister(MISC_CONTROL_REGISTER, (DATA | 0b00100000));
 808f844:	f040 0220 	orr.w	r2, r0, #32
 808f848:	2107      	movs	r1, #7
 808f84a:	4620      	mov	r0, r4
 808f84c:	b2d2      	uxtb	r2, r2
 808f84e:	f7ff ff83 	bl	808f758 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 808f852:	a801      	add	r0, sp, #4
 808f854:	f7ff ff30 	bl	808f6b8 <_ZNSt10lock_guardI4PMICED1Ev>
}
 808f858:	2001      	movs	r0, #1
 808f85a:	b002      	add	sp, #8
 808f85c:	bd10      	pop	{r4, pc}

0808f85e <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 808f85e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808f860:	4606      	mov	r6, r0
 808f862:	460d      	mov	r5, r1
  size_t n = 0;
 808f864:	2400      	movs	r4, #0
 808f866:	188f      	adds	r7, r1, r2
  while (size--) {
 808f868:	42bd      	cmp	r5, r7
 808f86a:	d00c      	beq.n	808f886 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808f86c:	6833      	ldr	r3, [r6, #0]
 808f86e:	4630      	mov	r0, r6
 808f870:	689b      	ldr	r3, [r3, #8]
 808f872:	f815 1b01 	ldrb.w	r1, [r5], #1
 808f876:	4798      	blx	r3
     if (chunk>=0)
 808f878:	1e03      	subs	r3, r0, #0
 808f87a:	db01      	blt.n	808f880 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808f87c:	441c      	add	r4, r3
  while (size--) {
 808f87e:	e7f3      	b.n	808f868 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 808f880:	2c00      	cmp	r4, #0
 808f882:	bf08      	it	eq
 808f884:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 808f886:	4620      	mov	r0, r4
 808f888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808f88a <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 808f88a:	b570      	push	{r4, r5, r6, lr}
 808f88c:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 808f88e:	460c      	mov	r4, r1
    }
 808f890:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 808f892:	b149      	cbz	r1, 808f8a8 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 808f894:	f002 fb87 	bl	8091fa6 <strlen>
 808f898:	682b      	ldr	r3, [r5, #0]
 808f89a:	4602      	mov	r2, r0
 808f89c:	4621      	mov	r1, r4
 808f89e:	4628      	mov	r0, r5
    }
 808f8a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 808f8a4:	68db      	ldr	r3, [r3, #12]
 808f8a6:	4718      	bx	r3
    }
 808f8a8:	bd70      	pop	{r4, r5, r6, pc}

0808f8aa <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 808f8aa:	b508      	push	{r3, lr}
  return write(str);
 808f8ac:	f7ff ffed 	bl	808f88a <_ZN5Print5writeEPKc>
}
 808f8b0:	bd08      	pop	{r3, pc}

0808f8b2 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 808f8b2:	6803      	ldr	r3, [r0, #0]
 808f8b4:	689b      	ldr	r3, [r3, #8]
 808f8b6:	4718      	bx	r3

0808f8b8 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808f8b8:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 808f8ba:	210d      	movs	r1, #13
{
 808f8bc:	4605      	mov	r5, r0
  size_t n = print('\r');
 808f8be:	f7ff fff8 	bl	808f8b2 <_ZN5Print5printEc>
  n += print('\n');
 808f8c2:	210a      	movs	r1, #10
  size_t n = print('\r');
 808f8c4:	4604      	mov	r4, r0
  n += print('\n');
 808f8c6:	4628      	mov	r0, r5
 808f8c8:	f7ff fff3 	bl	808f8b2 <_ZN5Print5printEc>
  return n;
}
 808f8cc:	4420      	add	r0, r4
 808f8ce:	bd38      	pop	{r3, r4, r5, pc}

0808f8d0 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 808f8d0:	b538      	push	{r3, r4, r5, lr}
 808f8d2:	4605      	mov	r5, r0
  return write(str);
 808f8d4:	f7ff ffd9 	bl	808f88a <_ZN5Print5writeEPKc>
 808f8d8:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 808f8da:	4628      	mov	r0, r5
 808f8dc:	f7ff ffec 	bl	808f8b8 <_ZN5Print7printlnEv>
  return n;
}
 808f8e0:	4420      	add	r0, r4
 808f8e2:	bd38      	pop	{r3, r4, r5, pc}

0808f8e4 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 808f8e4:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 808f8e6:	2a01      	cmp	r2, #1
 808f8e8:	bf98      	it	ls
 808f8ea:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 808f8ec:	b530      	push	{r4, r5, lr}
 808f8ee:	b08b      	sub	sp, #44	; 0x2c
 808f8f0:	460c      	mov	r4, r1
  *str = '\0';
 808f8f2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 808f8f6:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 808f8f8:	4625      	mov	r5, r4
 808f8fa:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 808f8fe:	fb04 5312 	mls	r3, r4, r2, r5
 808f902:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808f904:	2b09      	cmp	r3, #9
 808f906:	bf94      	ite	ls
 808f908:	3330      	addls	r3, #48	; 0x30
 808f90a:	3337      	addhi	r3, #55	; 0x37
 808f90c:	b2db      	uxtb	r3, r3
  } while(n);
 808f90e:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808f910:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 808f914:	d9f0      	bls.n	808f8f8 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 808f916:	f7ff ffb8 	bl	808f88a <_ZN5Print5writeEPKc>
}
 808f91a:	b00b      	add	sp, #44	; 0x2c
 808f91c:	bd30      	pop	{r4, r5, pc}

0808f91e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 808f91e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808f922:	b086      	sub	sp, #24
 808f924:	af00      	add	r7, sp, #0
 808f926:	4605      	mov	r5, r0
 808f928:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 808f92a:	1d38      	adds	r0, r7, #4
 808f92c:	2114      	movs	r1, #20
{
 808f92e:	4614      	mov	r4, r2
    va_copy(args2, args);
 808f930:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 808f932:	f7fd fe21 	bl	808d578 <vsnprintf>

    if (n<bufsize)
 808f936:	2813      	cmp	r0, #19
 808f938:	d80e      	bhi.n	808f958 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 808f93a:	4628      	mov	r0, r5
 808f93c:	1d39      	adds	r1, r7, #4
 808f93e:	f7ff ffa4 	bl	808f88a <_ZN5Print5writeEPKc>
 808f942:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 808f944:	b11e      	cbz	r6, 808f94e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 808f946:	4628      	mov	r0, r5
 808f948:	f7ff ffb6 	bl	808f8b8 <_ZN5Print7printlnEv>
 808f94c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 808f94e:	4620      	mov	r0, r4
 808f950:	3718      	adds	r7, #24
 808f952:	46bd      	mov	sp, r7
 808f954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 808f958:	f100 0308 	add.w	r3, r0, #8
 808f95c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 808f960:	46e8      	mov	r8, sp
        char bigger[n+1];
 808f962:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 808f966:	4622      	mov	r2, r4
 808f968:	1c41      	adds	r1, r0, #1
 808f96a:	683b      	ldr	r3, [r7, #0]
 808f96c:	4668      	mov	r0, sp
 808f96e:	f7fd fe03 	bl	808d578 <vsnprintf>
  return write(str);
 808f972:	4669      	mov	r1, sp
 808f974:	4628      	mov	r0, r5
 808f976:	f7ff ff88 	bl	808f88a <_ZN5Print5writeEPKc>
 808f97a:	4604      	mov	r4, r0
 808f97c:	46c5      	mov	sp, r8
 808f97e:	e7e1      	b.n	808f944 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

0808f980 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 808f980:	b510      	push	{r4, lr}
 808f982:	4604      	mov	r4, r0
 808f984:	f7fa f9a1 	bl	8089cca <_ZNSt14_Function_baseD1Ev>
 808f988:	4620      	mov	r0, r4
 808f98a:	bd10      	pop	{r4, pc}

0808f98c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 808f98c:	2300      	movs	r3, #0
 808f98e:	4803      	ldr	r0, [pc, #12]	; (808f99c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 808f990:	4a03      	ldr	r2, [pc, #12]	; (808f9a0 <_GLOBAL__sub_I_RGB+0x14>)
 808f992:	4904      	ldr	r1, [pc, #16]	; (808f9a4 <_GLOBAL__sub_I_RGB+0x18>)
 808f994:	6083      	str	r3, [r0, #8]
 808f996:	f001 b821 	b.w	80909dc <__aeabi_atexit>
 808f99a:	bf00      	nop
 808f99c:	200015d8 	.word	0x200015d8
 808f9a0:	200005b0 	.word	0x200005b0
 808f9a4:	0808f981 	.word	0x0808f981

0808f9a8 <_ZN8SPIClass6unlockEv>:
    void unlock() { os_mutex_recursive_unlock(handle_); }
 808f9a8:	6880      	ldr	r0, [r0, #8]
 808f9aa:	f7fd baa7 	b.w	808cefc <os_mutex_recursive_unlock>

0808f9ae <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 808f9ae:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 808f9b0:	2600      	movs	r6, #0
 808f9b2:	4604      	mov	r4, r0
 808f9b4:	460d      	mov	r5, r1
 808f9b6:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 808f9ba:	f7fd fa87 	bl	808cecc <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 808f9be:	4628      	mov	r0, r5
    _spi = spi;
 808f9c0:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 808f9c2:	f7fd fbab 	bl	808d11c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 808f9c6:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 808f9c8:	6066      	str	r6, [r4, #4]
}
 808f9ca:	bd70      	pop	{r4, r5, r6, pc}

0808f9cc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 808f9cc:	b510      	push	{r4, lr}
 808f9ce:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
 808f9d0:	6880      	ldr	r0, [r0, #8]
 808f9d2:	f7fd fa8b 	bl	808ceec <os_mutex_recursive_lock>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 808f9d6:	7820      	ldrb	r0, [r4, #0]
 808f9d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 808f9dc:	f7fd fb8e 	bl	808d0fc <hal_spi_begin>
        unlock();
 808f9e0:	4620      	mov	r0, r4
 808f9e2:	f7ff ffe1 	bl	808f9a8 <_ZN8SPIClass6unlockEv>
    }
}
 808f9e6:	bd10      	pop	{r4, pc}

0808f9e8 <_ZN8SPIClass5beginEt>:

void SPIClass::begin(uint16_t ss_pin)
{
 808f9e8:	b538      	push	{r3, r4, r5, lr}
 808f9ea:	4604      	mov	r4, r0
 808f9ec:	460d      	mov	r5, r1
 808f9ee:	6880      	ldr	r0, [r0, #8]
 808f9f0:	f7fd fa7c 	bl	808ceec <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_begin(_spi, ss_pin);
 808f9f4:	7820      	ldrb	r0, [r4, #0]
 808f9f6:	4629      	mov	r1, r5
 808f9f8:	f7fd fb80 	bl	808d0fc <hal_spi_begin>
        unlock();
 808f9fc:	4620      	mov	r0, r4
 808f9fe:	f7ff ffd3 	bl	808f9a8 <_ZN8SPIClass6unlockEv>
    }
}
 808fa02:	bd38      	pop	{r3, r4, r5, pc}

0808fa04 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
 808fa04:	b510      	push	{r4, lr}
 808fa06:	4604      	mov	r4, r0
 808fa08:	6880      	ldr	r0, [r0, #8]
 808fa0a:	f7fd fa6f 	bl	808ceec <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_end(_spi);
 808fa0e:	7820      	ldrb	r0, [r4, #0]
 808fa10:	f7fd fb7c 	bl	808d10c <hal_spi_end>
        unlock();
 808fa14:	4620      	mov	r0, r4
 808fa16:	f7ff ffc7 	bl	808f9a8 <_ZN8SPIClass6unlockEv>
    }
}
 808fa1a:	bd10      	pop	{r4, pc}

0808fa1c <_ZN8SPIClass14endTransactionEv>:

    return 0;
}

void SPIClass::endTransaction()
{
 808fa1c:	b508      	push	{r3, lr}
    // Release peripheral
    unlock();
 808fa1e:	f7ff ffc3 	bl	808f9a8 <_ZN8SPIClass6unlockEv>
}
 808fa22:	bd08      	pop	{r3, pc}

0808fa24 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 808fa24:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 808fa26:	2400      	movs	r4, #0
 808fa28:	0840      	lsrs	r0, r0, #1
 808fa2a:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 808fa2c:	6818      	ldr	r0, [r3, #0]
 808fa2e:	b2e5      	uxtb	r5, r4
 808fa30:	4288      	cmp	r0, r1
 808fa32:	d906      	bls.n	808fa42 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 808fa34:	3401      	adds	r4, #1
 808fa36:	2c08      	cmp	r4, #8
 808fa38:	d002      	beq.n	808fa40 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 808fa3a:	0840      	lsrs	r0, r0, #1
 808fa3c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 808fa3e:	e7f5      	b.n	808fa2c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 808fa40:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 808fa42:	4b02      	ldr	r3, [pc, #8]	; (808fa4c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 808fa44:	5d5b      	ldrb	r3, [r3, r5]
 808fa46:	7013      	strb	r3, [r2, #0]
}
 808fa48:	bd30      	pop	{r4, r5, pc}
 808fa4a:	bf00      	nop
 808fa4c:	08095164 	.word	0x08095164

0808fa50 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 808fa50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808fa54:	4606      	mov	r6, r0
 808fa56:	b08f      	sub	sp, #60	; 0x3c
 808fa58:	6880      	ldr	r0, [r0, #8]
 808fa5a:	460c      	mov	r4, r1
 808fa5c:	f7fd fa46 	bl	808ceec <os_mutex_recursive_lock>
    memset(info, 0, sizeof(hal_spi_info_t));
 808fa60:	2214      	movs	r2, #20
 808fa62:	2100      	movs	r1, #0
 808fa64:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 808fa66:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 808fa68:	f002 fa2c 	bl	8091ec4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 808fa6c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 808fa6e:	2200      	movs	r2, #0
 808fa70:	4628      	mov	r0, r5
 808fa72:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 808fa74:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 808fa78:	f7fd fb60 	bl	808d13c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 808fa7c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 808fa80:	b113      	cbz	r3, 808fa88 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x38>
 808fa82:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 808fa86:	b155      	cbz	r5, 808fa9e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  SPISettings()
  {
 808fa88:	2700      	movs	r7, #0
 808fa8a:	2501      	movs	r5, #1
 808fa8c:	46b9      	mov	r9, r7
 808fa8e:	46b8      	mov	r8, r7
  virtual ~SPISettings() {
  }

  bool operator==(const SPISettings& other) const
  {
    if (default_ && other.default_)
 808fa90:	7923      	ldrb	r3, [r4, #4]
 808fa92:	b15d      	cbz	r5, 808faac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x5c>
 808fa94:	b1c3      	cbz	r3, 808fac8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x78>
}
 808fa96:	2000      	movs	r0, #0
 808fa98:	b00f      	add	sp, #60	; 0x3c
 808fa9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 808fa9e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 808faa2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 808faa6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 808faaa:	e7f1      	b.n	808fa90 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x40>
      return true;

    if (default_ == other.default_ &&
 808faac:	2b00      	cmp	r3, #0
 808faae:	d135      	bne.n	808fb1c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xcc>
 808fab0:	68a3      	ldr	r3, [r4, #8]
 808fab2:	4543      	cmp	r3, r8
 808fab4:	d108      	bne.n	808fac8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x78>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 808fab6:	f88d 9020 	strb.w	r9, [sp, #32]
 808faba:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 808fabe:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 808fac2:	89a3      	ldrh	r3, [r4, #12]
 808fac4:	429a      	cmp	r2, r3
 808fac6:	d0e6      	beq.n	808fa96 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
            uint8_t divisor = 0;
 808fac8:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 808faca:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 808facc:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 808fad0:	980a      	ldr	r0, [sp, #40]	; 0x28
 808fad2:	ab04      	add	r3, sp, #16
 808fad4:	f10d 020f 	add.w	r2, sp, #15
 808fad8:	f7ff ffa4 	bl	808fa24 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    return false;
  }

  bool operator<=(const SPISettings& other) const
  {
    if (default_ && other.default_)
 808fadc:	7921      	ldrb	r1, [r4, #4]
 808fade:	b985      	cbnz	r5, 808fb02 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb2>
      return true;

    if (default_ == other.default_ &&
 808fae0:	b989      	cbnz	r1, 808fb06 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
 808fae2:	68a3      	ldr	r3, [r4, #8]
 808fae4:	4543      	cmp	r3, r8
 808fae6:	d30e      	bcc.n	808fb06 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 808fae8:	f88d 9020 	strb.w	r9, [sp, #32]
 808faec:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 808faf0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 808faf4:	89a3      	ldrh	r3, [r4, #12]
 808faf6:	429a      	cmp	r2, r3
 808faf8:	d105      	bne.n	808fb06 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 808fafa:	9b04      	ldr	r3, [sp, #16]
 808fafc:	4543      	cmp	r3, r8
 808fafe:	d102      	bne.n	808fb06 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
 808fb00:	e7c9      	b.n	808fa96 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
    if (default_ && other.default_)
 808fb02:	2900      	cmp	r1, #0
 808fb04:	d1f9      	bne.n	808fafa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xaa>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 808fb06:	2300      	movs	r3, #0
 808fb08:	9301      	str	r3, [sp, #4]
 808fb0a:	7b63      	ldrb	r3, [r4, #13]
 808fb0c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 808fb10:	9300      	str	r3, [sp, #0]
 808fb12:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 808fb14:	7830      	ldrb	r0, [r6, #0]
 808fb16:	f7fd fb29 	bl	808d16c <hal_spi_set_settings>
    return 0;
 808fb1a:	e7bc      	b.n	808fa96 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 808fb1c:	462b      	mov	r3, r5
 808fb1e:	462a      	mov	r2, r5
 808fb20:	2101      	movs	r1, #1
 808fb22:	e9cd 5500 	strd	r5, r5, [sp]
 808fb26:	e7f5      	b.n	808fb14 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc4>

0808fb28 <_ZN8SPIClass8transferEPvS0_jPFvvE>:
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
}

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 808fb28:	b530      	push	{r4, r5, lr}
 808fb2a:	b087      	sub	sp, #28
 808fb2c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808fb2e:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 808fb30:	9500      	str	r5, [sp, #0]
 808fb32:	7800      	ldrb	r0, [r0, #0]
 808fb34:	f7fd fb0a 	bl	808d14c <hal_spi_transfer_dma>
    if (user_callback == NULL)
 808fb38:	b93d      	cbnz	r5, 808fb4a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 808fb3a:	7820      	ldrb	r0, [r4, #0]
 808fb3c:	a902      	add	r1, sp, #8
 808fb3e:	f7fd fb0d 	bl	808d15c <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 808fb42:	f89d 3014 	ldrb.w	r3, [sp, #20]
 808fb46:	07db      	lsls	r3, r3, #31
 808fb48:	d4f7      	bmi.n	808fb3a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
 808fb4a:	b007      	add	sp, #28
 808fb4c:	bd30      	pop	{r4, r5, pc}
	...

0808fb50 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 808fb50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808fb54:	4607      	mov	r7, r0
 808fb56:	460d      	mov	r5, r1
 808fb58:	4616      	mov	r6, r2
 808fb5a:	461c      	mov	r4, r3
    bool negative = val<0;
    if (negative) {
 808fb5c:	2200      	movs	r2, #0
 808fb5e:	2300      	movs	r3, #0
 808fb60:	4638      	mov	r0, r7
 808fb62:	4629      	mov	r1, r5
 808fb64:	f001 fc1e 	bl	80913a4 <__aeabi_dcmplt>
 808fb68:	b120      	cbz	r0, 808fb74 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 808fb6a:	232d      	movs	r3, #45	; 0x2d
        val = -val;
 808fb6c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 808fb70:	f804 3b01 	strb.w	r3, [r4], #1
 808fb74:	2300      	movs	r3, #0
    }
    long scale = 1;
 808fb76:	f04f 0a01 	mov.w	sl, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 808fb7a:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
 808fb7c:	b2d9      	uxtb	r1, r3
 808fb7e:	428e      	cmp	r6, r1
 808fb80:	d903      	bls.n	808fb8a <_Z4dtoadhPc+0x3a>
        scale *= 10;
 808fb82:	fb02 fa0a 	mul.w	sl, r2, sl
    for (uint8_t i=0; i<prec; i++)
 808fb86:	3301      	adds	r3, #1
 808fb88:	e7f8      	b.n	808fb7c <_Z4dtoadhPc+0x2c>
    val *= scale;   // capture all the significant digits
 808fb8a:	4650      	mov	r0, sl
 808fb8c:	f001 f92e 	bl	8090dec <__aeabi_i2d>
 808fb90:	463a      	mov	r2, r7
 808fb92:	462b      	mov	r3, r5
 808fb94:	f001 f994 	bl	8090ec0 <__aeabi_dmul>
 808fb98:	4680      	mov	r8, r0
 808fb9a:	4689      	mov	r9, r1
    uint64_t fixed = uint64_t(val);
 808fb9c:	f001 ffc2 	bl	8091b24 <__aeabi_d2ulz>
 808fba0:	4605      	mov	r5, r0
 808fba2:	460f      	mov	r7, r1
    if ((val-fixed)>=0.5)    // round last digit
 808fba4:	f001 f956 	bl	8090e54 <__aeabi_ul2d>
 808fba8:	4602      	mov	r2, r0
 808fbaa:	460b      	mov	r3, r1
 808fbac:	4640      	mov	r0, r8
 808fbae:	4649      	mov	r1, r9
 808fbb0:	f000 ffce 	bl	8090b50 <__aeabi_dsub>
 808fbb4:	2200      	movs	r2, #0
 808fbb6:	4b12      	ldr	r3, [pc, #72]	; (808fc00 <_Z4dtoadhPc+0xb0>)
 808fbb8:	f001 fc08 	bl	80913cc <__aeabi_dcmpge>
 808fbbc:	b110      	cbz	r0, 808fbc4 <_Z4dtoadhPc+0x74>
        fixed++;
 808fbbe:	3501      	adds	r5, #1
 808fbc0:	f147 0700 	adc.w	r7, r7, #0

    unsigned long first = (unsigned long)(fixed / scale);
 808fbc4:	4652      	mov	r2, sl
 808fbc6:	4628      	mov	r0, r5
 808fbc8:	4639      	mov	r1, r7
 808fbca:	17d3      	asrs	r3, r2, #31
 808fbcc:	f001 ff92 	bl	8091af4 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 808fbd0:	2301      	movs	r3, #1
 808fbd2:	4615      	mov	r5, r2
 808fbd4:	4621      	mov	r1, r4
 808fbd6:	220a      	movs	r2, #10
 808fbd8:	f000 fcc8 	bl	809056c <ultoa>
    if (prec) {
 808fbdc:	b16e      	cbz	r6, 808fbfa <_Z4dtoadhPc+0xaa>
        sout += strlen(sout);
 808fbde:	4620      	mov	r0, r4
 808fbe0:	f002 f9e1 	bl	8091fa6 <strlen>
        *sout++ = '.';
 808fbe4:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
 808fbe6:	1821      	adds	r1, r4, r0
        *sout++ = '.';
 808fbe8:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
 808fbea:	220a      	movs	r2, #10
 808fbec:	4633      	mov	r3, r6
 808fbee:	4628      	mov	r0, r5
    }
}
 808fbf0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
 808fbf4:	3101      	adds	r1, #1
 808fbf6:	f000 bcb9 	b.w	809056c <ultoa>
}
 808fbfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808fbfe:	bf00      	nop
 808fc00:	3fe00000 	.word	0x3fe00000

0808fc04 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 808fc04:	b510      	push	{r4, lr}
 808fc06:	4604      	mov	r4, r0
{
	free(buffer);
 808fc08:	6800      	ldr	r0, [r0, #0]
 808fc0a:	f7fd fc8d 	bl	808d528 <free>
}
 808fc0e:	4620      	mov	r0, r4
 808fc10:	bd10      	pop	{r4, pc}

0808fc12 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 808fc12:	b510      	push	{r4, lr}
 808fc14:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 808fc16:	6800      	ldr	r0, [r0, #0]
 808fc18:	b108      	cbz	r0, 808fc1e <_ZN6String10invalidateEv+0xc>
 808fc1a:	f7fd fc85 	bl	808d528 <free>
	buffer = NULL;
 808fc1e:	2300      	movs	r3, #0
	capacity = len = 0;
 808fc20:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 808fc24:	6023      	str	r3, [r4, #0]
}
 808fc26:	bd10      	pop	{r4, pc}

0808fc28 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 808fc28:	b538      	push	{r3, r4, r5, lr}
 808fc2a:	4604      	mov	r4, r0
 808fc2c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 808fc2e:	6800      	ldr	r0, [r0, #0]
 808fc30:	3101      	adds	r1, #1
 808fc32:	f7fd fc81 	bl	808d538 <realloc>
	if (newbuffer) {
 808fc36:	b110      	cbz	r0, 808fc3e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 808fc38:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 808fc3c:	2001      	movs	r0, #1
	}
	return 0;
}
 808fc3e:	bd38      	pop	{r3, r4, r5, pc}

0808fc40 <_ZN6String7reserveEj>:
{
 808fc40:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 808fc42:	6803      	ldr	r3, [r0, #0]
{
 808fc44:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 808fc46:	b123      	cbz	r3, 808fc52 <_ZN6String7reserveEj+0x12>
 808fc48:	6843      	ldr	r3, [r0, #4]
 808fc4a:	428b      	cmp	r3, r1
 808fc4c:	d301      	bcc.n	808fc52 <_ZN6String7reserveEj+0x12>
 808fc4e:	2001      	movs	r0, #1
}
 808fc50:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 808fc52:	4620      	mov	r0, r4
 808fc54:	f7ff ffe8 	bl	808fc28 <_ZN6String12changeBufferEj>
 808fc58:	2800      	cmp	r0, #0
 808fc5a:	d0f9      	beq.n	808fc50 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 808fc5c:	68a3      	ldr	r3, [r4, #8]
 808fc5e:	2b00      	cmp	r3, #0
 808fc60:	d1f5      	bne.n	808fc4e <_ZN6String7reserveEj+0xe>
 808fc62:	6822      	ldr	r2, [r4, #0]
 808fc64:	7013      	strb	r3, [r2, #0]
 808fc66:	e7f2      	b.n	808fc4e <_ZN6String7reserveEj+0xe>

0808fc68 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 808fc68:	b570      	push	{r4, r5, r6, lr}
 808fc6a:	460e      	mov	r6, r1
	if (!reserve(length)) {
 808fc6c:	4611      	mov	r1, r2
{
 808fc6e:	4604      	mov	r4, r0
 808fc70:	4615      	mov	r5, r2
	if (!reserve(length)) {
 808fc72:	f7ff ffe5 	bl	808fc40 <_ZN6String7reserveEj>
 808fc76:	b920      	cbnz	r0, 808fc82 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 808fc78:	4620      	mov	r0, r4
 808fc7a:	f7ff ffca 	bl	808fc12 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 808fc7e:	4620      	mov	r0, r4
 808fc80:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 808fc82:	462a      	mov	r2, r5
 808fc84:	4631      	mov	r1, r6
 808fc86:	6820      	ldr	r0, [r4, #0]
	len = length;
 808fc88:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 808fc8a:	f002 f8f3 	bl	8091e74 <memcpy>
	buffer[len] = 0;
 808fc8e:	2100      	movs	r1, #0
 808fc90:	6822      	ldr	r2, [r4, #0]
 808fc92:	68a3      	ldr	r3, [r4, #8]
 808fc94:	54d1      	strb	r1, [r2, r3]
	return *this;
 808fc96:	e7f2      	b.n	808fc7e <_ZN6String4copyEPKcj+0x16>

0808fc98 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 808fc98:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 808fc9a:	2300      	movs	r3, #0
String::String(const char *cstr)
 808fc9c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 808fc9e:	460d      	mov	r5, r1
	capacity = 0;
 808fca0:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 808fca4:	6083      	str	r3, [r0, #8]
	flags = 0;
 808fca6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 808fca8:	b139      	cbz	r1, 808fcba <_ZN6StringC1EPKc+0x22>
 808fcaa:	4608      	mov	r0, r1
 808fcac:	f002 f97b 	bl	8091fa6 <strlen>
 808fcb0:	4629      	mov	r1, r5
 808fcb2:	4602      	mov	r2, r0
 808fcb4:	4620      	mov	r0, r4
 808fcb6:	f7ff ffd7 	bl	808fc68 <_ZN6String4copyEPKcj>
}
 808fcba:	4620      	mov	r0, r4
 808fcbc:	bd38      	pop	{r3, r4, r5, pc}

0808fcbe <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 808fcbe:	b538      	push	{r3, r4, r5, lr}
 808fcc0:	4605      	mov	r5, r0
	if (buffer) {
 808fcc2:	6800      	ldr	r0, [r0, #0]
{
 808fcc4:	460c      	mov	r4, r1
	if (buffer) {
 808fcc6:	b168      	cbz	r0, 808fce4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 808fcc8:	686a      	ldr	r2, [r5, #4]
 808fcca:	688b      	ldr	r3, [r1, #8]
 808fccc:	429a      	cmp	r2, r3
 808fcce:	d307      	bcc.n	808fce0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 808fcd0:	6809      	ldr	r1, [r1, #0]
 808fcd2:	f002 f944 	bl	8091f5e <strcpy>
			len = rhs.len;
 808fcd6:	68a3      	ldr	r3, [r4, #8]
 808fcd8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 808fcda:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 808fcdc:	60a3      	str	r3, [r4, #8]
}
 808fcde:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 808fce0:	f7fd fc22 	bl	808d528 <free>
	buffer = rhs.buffer;
 808fce4:	6823      	ldr	r3, [r4, #0]
 808fce6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 808fce8:	6863      	ldr	r3, [r4, #4]
 808fcea:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 808fcec:	68a3      	ldr	r3, [r4, #8]
 808fcee:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 808fcf0:	2300      	movs	r3, #0
	rhs.capacity = 0;
 808fcf2:	e9c4 3300 	strd	r3, r3, [r4]
 808fcf6:	e7f1      	b.n	808fcdc <_ZN6String4moveERS_+0x1e>

0808fcf8 <_ZN6StringC1EOS_>:
	buffer = NULL;
 808fcf8:	2300      	movs	r3, #0
String::String(String &&rval)
 808fcfa:	b510      	push	{r4, lr}
 808fcfc:	4604      	mov	r4, r0
	capacity = 0;
 808fcfe:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 808fd02:	6083      	str	r3, [r0, #8]
	flags = 0;
 808fd04:	7303      	strb	r3, [r0, #12]
	move(rval);
 808fd06:	f7ff ffda 	bl	808fcbe <_ZN6String4moveERS_>
}
 808fd0a:	4620      	mov	r0, r4
 808fd0c:	bd10      	pop	{r4, pc}

0808fd0e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 808fd0e:	4288      	cmp	r0, r1
{
 808fd10:	b510      	push	{r4, lr}
 808fd12:	460b      	mov	r3, r1
 808fd14:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 808fd16:	d004      	beq.n	808fd22 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 808fd18:	6809      	ldr	r1, [r1, #0]
 808fd1a:	b121      	cbz	r1, 808fd26 <_ZN6StringaSERKS_+0x18>
 808fd1c:	689a      	ldr	r2, [r3, #8]
 808fd1e:	f7ff ffa3 	bl	808fc68 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 808fd22:	4620      	mov	r0, r4
 808fd24:	bd10      	pop	{r4, pc}
	else invalidate();
 808fd26:	f7ff ff74 	bl	808fc12 <_ZN6String10invalidateEv>
 808fd2a:	e7fa      	b.n	808fd22 <_ZN6StringaSERKS_+0x14>

0808fd2c <_ZN6StringC1ERKS_>:
	buffer = NULL;
 808fd2c:	2300      	movs	r3, #0
String::String(const String &value)
 808fd2e:	b510      	push	{r4, lr}
 808fd30:	4604      	mov	r4, r0
	capacity = 0;
 808fd32:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 808fd36:	6083      	str	r3, [r0, #8]
	flags = 0;
 808fd38:	7303      	strb	r3, [r0, #12]
	*this = value;
 808fd3a:	f7ff ffe8 	bl	808fd0e <_ZN6StringaSERKS_>
}
 808fd3e:	4620      	mov	r0, r4
 808fd40:	bd10      	pop	{r4, pc}

0808fd42 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 808fd42:	4288      	cmp	r0, r1
{
 808fd44:	b510      	push	{r4, lr}
 808fd46:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 808fd48:	d001      	beq.n	808fd4e <_ZN6StringaSEOS_+0xc>
 808fd4a:	f7ff ffb8 	bl	808fcbe <_ZN6String4moveERS_>
	return *this;
}
 808fd4e:	4620      	mov	r0, r4
 808fd50:	bd10      	pop	{r4, pc}

0808fd52 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 808fd52:	b538      	push	{r3, r4, r5, lr}
 808fd54:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 808fd56:	460c      	mov	r4, r1
 808fd58:	b149      	cbz	r1, 808fd6e <_ZN6StringaSEPKc+0x1c>
 808fd5a:	4608      	mov	r0, r1
 808fd5c:	f002 f923 	bl	8091fa6 <strlen>
 808fd60:	4621      	mov	r1, r4
 808fd62:	4602      	mov	r2, r0
 808fd64:	4628      	mov	r0, r5
 808fd66:	f7ff ff7f 	bl	808fc68 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 808fd6a:	4628      	mov	r0, r5
 808fd6c:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 808fd6e:	f7ff ff50 	bl	808fc12 <_ZN6String10invalidateEv>
 808fd72:	e7fa      	b.n	808fd6a <_ZN6StringaSEPKc+0x18>

0808fd74 <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
 808fd74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 808fd76:	4604      	mov	r4, r0
	buffer = NULL;
 808fd78:	2300      	movs	r3, #0
String::String(unsigned char value, unsigned char base)
 808fd7a:	4608      	mov	r0, r1
	capacity = 0;
 808fd7c:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 808fd80:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808fd82:	7323      	strb	r3, [r4, #12]
	utoa(value, buf, base);
 808fd84:	a901      	add	r1, sp, #4
 808fd86:	f000 fc30 	bl	80905ea <utoa>
	*this = buf;
 808fd8a:	4620      	mov	r0, r4
 808fd8c:	a901      	add	r1, sp, #4
 808fd8e:	f7ff ffe0 	bl	808fd52 <_ZN6StringaSEPKc>
}
 808fd92:	4620      	mov	r0, r4
 808fd94:	b004      	add	sp, #16
 808fd96:	bd10      	pop	{r4, pc}

0808fd98 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 808fd98:	b510      	push	{r4, lr}
	buffer = NULL;
 808fd9a:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 808fd9c:	4604      	mov	r4, r0
 808fd9e:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 808fda0:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 808fda4:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808fda6:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 808fda8:	4608      	mov	r0, r1
	itoa(value, buf, base);
 808fdaa:	a901      	add	r1, sp, #4
 808fdac:	f000 fc08 	bl	80905c0 <itoa>
	*this = buf;
 808fdb0:	4620      	mov	r0, r4
 808fdb2:	a901      	add	r1, sp, #4
 808fdb4:	f7ff ffcd 	bl	808fd52 <_ZN6StringaSEPKc>
}
 808fdb8:	4620      	mov	r0, r4
 808fdba:	b00a      	add	sp, #40	; 0x28
 808fdbc:	bd10      	pop	{r4, pc}

0808fdbe <_ZN6StringC1Ejh>:
String::String(unsigned int value, unsigned char base)
 808fdbe:	b510      	push	{r4, lr}
	buffer = NULL;
 808fdc0:	2300      	movs	r3, #0
String::String(unsigned int value, unsigned char base)
 808fdc2:	4604      	mov	r4, r0
 808fdc4:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 808fdc6:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 808fdca:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808fdcc:	7323      	strb	r3, [r4, #12]
String::String(unsigned int value, unsigned char base)
 808fdce:	4608      	mov	r0, r1
	utoa(value, buf, base);
 808fdd0:	a901      	add	r1, sp, #4
 808fdd2:	f000 fc0a 	bl	80905ea <utoa>
	*this = buf;
 808fdd6:	4620      	mov	r0, r4
 808fdd8:	a901      	add	r1, sp, #4
 808fdda:	f7ff ffba 	bl	808fd52 <_ZN6StringaSEPKc>
}
 808fdde:	4620      	mov	r0, r4
 808fde0:	b00a      	add	sp, #40	; 0x28
 808fde2:	bd10      	pop	{r4, pc}

0808fde4 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
 808fde4:	b510      	push	{r4, lr}
	buffer = NULL;
 808fde6:	2300      	movs	r3, #0
String::String(long value, unsigned char base)
 808fde8:	4604      	mov	r4, r0
 808fdea:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 808fdec:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 808fdf0:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808fdf2:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
 808fdf4:	4608      	mov	r0, r1
	ltoa(value, buf, base);
 808fdf6:	a901      	add	r1, sp, #4
 808fdf8:	f000 fb75 	bl	80904e6 <ltoa>
	*this = buf;
 808fdfc:	4620      	mov	r0, r4
 808fdfe:	a901      	add	r1, sp, #4
 808fe00:	f7ff ffa7 	bl	808fd52 <_ZN6StringaSEPKc>
}
 808fe04:	4620      	mov	r0, r4
 808fe06:	b00a      	add	sp, #40	; 0x28
 808fe08:	bd10      	pop	{r4, pc}

0808fe0a <_ZN6StringC1Emh>:
String::String(unsigned long value, unsigned char base)
 808fe0a:	b510      	push	{r4, lr}
	buffer = NULL;
 808fe0c:	2300      	movs	r3, #0
String::String(unsigned long value, unsigned char base)
 808fe0e:	4604      	mov	r4, r0
 808fe10:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 808fe12:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 808fe16:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808fe18:	7323      	strb	r3, [r4, #12]
String::String(unsigned long value, unsigned char base)
 808fe1a:	4608      	mov	r0, r1
	ultoa(value, buf, base);
 808fe1c:	2301      	movs	r3, #1
 808fe1e:	a901      	add	r1, sp, #4
 808fe20:	f000 fba4 	bl	809056c <ultoa>
	*this = buf;
 808fe24:	4620      	mov	r0, r4
 808fe26:	a901      	add	r1, sp, #4
 808fe28:	f7ff ff93 	bl	808fd52 <_ZN6StringaSEPKc>
}
 808fe2c:	4620      	mov	r0, r4
 808fe2e:	b00a      	add	sp, #40	; 0x28
 808fe30:	bd10      	pop	{r4, pc}

0808fe32 <_ZN6StringC1Efi>:
	buffer = NULL;
 808fe32:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
 808fe34:	b530      	push	{r4, r5, lr}
 808fe36:	4604      	mov	r4, r0
 808fe38:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
 808fe3a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 808fe3e:	6083      	str	r3, [r0, #8]
	flags = 0;
 808fe40:	7303      	strb	r3, [r0, #12]
	dtoa(value, decimalPlaces, buf);
 808fe42:	b2d5      	uxtb	r5, r2
 808fe44:	4608      	mov	r0, r1
 808fe46:	f000 ffe3 	bl	8090e10 <__aeabi_f2d>
 808fe4a:	462a      	mov	r2, r5
 808fe4c:	ab01      	add	r3, sp, #4
 808fe4e:	f7ff fe7f 	bl	808fb50 <_Z4dtoadhPc>
        *this = buf;
 808fe52:	4620      	mov	r0, r4
 808fe54:	a901      	add	r1, sp, #4
 808fe56:	f7ff ff7c 	bl	808fd52 <_ZN6StringaSEPKc>
}
 808fe5a:	4620      	mov	r0, r4
 808fe5c:	b00b      	add	sp, #44	; 0x2c
 808fe5e:	bd30      	pop	{r4, r5, pc}

0808fe60 <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
 808fe60:	b510      	push	{r4, lr}
 808fe62:	4619      	mov	r1, r3
 808fe64:	4604      	mov	r4, r0
	buffer = NULL;
 808fe66:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
 808fe68:	b08a      	sub	sp, #40	; 0x28
 808fe6a:	4610      	mov	r0, r2
	capacity = 0;
 808fe6c:	e9c4 3300 	strd	r3, r3, [r4]
	dtoa(value, decimalPlaces, buf);
 808fe70:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	len = 0;
 808fe74:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808fe76:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
 808fe78:	ab01      	add	r3, sp, #4
 808fe7a:	f7ff fe69 	bl	808fb50 <_Z4dtoadhPc>
        *this = buf;
 808fe7e:	4620      	mov	r0, r4
 808fe80:	a901      	add	r1, sp, #4
 808fe82:	f7ff ff66 	bl	808fd52 <_ZN6StringaSEPKc>
}
 808fe86:	4620      	mov	r0, r4
 808fe88:	b00a      	add	sp, #40	; 0x28
 808fe8a:	bd10      	pop	{r4, pc}

0808fe8c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 808fe8c:	b570      	push	{r4, r5, r6, lr}
 808fe8e:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 808fe90:	460e      	mov	r6, r1
 808fe92:	b909      	cbnz	r1, 808fe98 <_ZN6String6concatEPKcj+0xc>
 808fe94:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 808fe96:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 808fe98:	b16a      	cbz	r2, 808feb6 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 808fe9a:	6884      	ldr	r4, [r0, #8]
 808fe9c:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 808fe9e:	4621      	mov	r1, r4
 808fea0:	f7ff fece 	bl	808fc40 <_ZN6String7reserveEj>
 808fea4:	2800      	cmp	r0, #0
 808fea6:	d0f5      	beq.n	808fe94 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 808fea8:	6828      	ldr	r0, [r5, #0]
 808feaa:	68ab      	ldr	r3, [r5, #8]
 808feac:	4631      	mov	r1, r6
 808feae:	4418      	add	r0, r3
 808feb0:	f002 f855 	bl	8091f5e <strcpy>
	len = newlen;
 808feb4:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 808feb6:	2001      	movs	r0, #1
 808feb8:	e7ed      	b.n	808fe96 <_ZN6String6concatEPKcj+0xa>

0808feba <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
 808feba:	688a      	ldr	r2, [r1, #8]
 808febc:	6809      	ldr	r1, [r1, #0]
 808febe:	f7ff bfe5 	b.w	808fe8c <_ZN6String6concatEPKcj>

0808fec2 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
 808fec2:	b538      	push	{r3, r4, r5, lr}
 808fec4:	4605      	mov	r5, r0
	if (!cstr) return 0;
 808fec6:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 808fec8:	4608      	mov	r0, r1
	if (!cstr) return 0;
 808feca:	b141      	cbz	r1, 808fede <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 808fecc:	f002 f86b 	bl	8091fa6 <strlen>
 808fed0:	4621      	mov	r1, r4
 808fed2:	4602      	mov	r2, r0
 808fed4:	4628      	mov	r0, r5
}
 808fed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return concat(cstr, strlen(cstr));
 808feda:	f7ff bfd7 	b.w	808fe8c <_ZN6String6concatEPKcj>
}
 808fede:	bd38      	pop	{r3, r4, r5, pc}

0808fee0 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 808fee0:	2300      	movs	r3, #0
{
 808fee2:	b507      	push	{r0, r1, r2, lr}
	return concat(buf, 1);
 808fee4:	2201      	movs	r2, #1
	buf[0] = c;
 808fee6:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
 808feea:	a901      	add	r1, sp, #4
	buf[1] = 0;
 808feec:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 808fef0:	f7ff ffcc 	bl	808fe8c <_ZN6String6concatEPKcj>
}
 808fef4:	b003      	add	sp, #12
 808fef6:	f85d fb04 	ldr.w	pc, [sp], #4

0808fefa <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 808fefa:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 808fefc:	688a      	ldr	r2, [r1, #8]
 808fefe:	6809      	ldr	r1, [r1, #0]
{
 808ff00:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 808ff02:	f7ff ffc3 	bl	808fe8c <_ZN6String6concatEPKcj>
 808ff06:	b910      	cbnz	r0, 808ff0e <_ZplRK15StringSumHelperRK6String+0x14>
 808ff08:	4620      	mov	r0, r4
 808ff0a:	f7ff fe82 	bl	808fc12 <_ZN6String10invalidateEv>
	return a;
}
 808ff0e:	4620      	mov	r0, r4
 808ff10:	bd10      	pop	{r4, pc}

0808ff12 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 808ff12:	b538      	push	{r3, r4, r5, lr}
 808ff14:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 808ff16:	460d      	mov	r5, r1
 808ff18:	b921      	cbnz	r1, 808ff24 <_ZplRK15StringSumHelperPKc+0x12>
 808ff1a:	4620      	mov	r0, r4
 808ff1c:	f7ff fe79 	bl	808fc12 <_ZN6String10invalidateEv>
	return a;
}
 808ff20:	4620      	mov	r0, r4
 808ff22:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 808ff24:	4608      	mov	r0, r1
 808ff26:	f002 f83e 	bl	8091fa6 <strlen>
 808ff2a:	4629      	mov	r1, r5
 808ff2c:	4602      	mov	r2, r0
 808ff2e:	4620      	mov	r0, r4
 808ff30:	f7ff ffac 	bl	808fe8c <_ZN6String6concatEPKcj>
 808ff34:	2800      	cmp	r0, #0
 808ff36:	d0f0      	beq.n	808ff1a <_ZplRK15StringSumHelperPKc+0x8>
 808ff38:	e7f2      	b.n	808ff20 <_ZplRK15StringSumHelperPKc+0xe>

0808ff3a <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
 808ff3a:	4602      	mov	r2, r0
	if (!buffer || !s.buffer) {
 808ff3c:	6800      	ldr	r0, [r0, #0]
{
 808ff3e:	460b      	mov	r3, r1
 808ff40:	6809      	ldr	r1, [r1, #0]
	if (!buffer || !s.buffer) {
 808ff42:	b158      	cbz	r0, 808ff5c <_ZNK6String9compareToERKS_+0x22>
 808ff44:	b941      	cbnz	r1, 808ff58 <_ZNK6String9compareToERKS_+0x1e>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
 808ff46:	6891      	ldr	r1, [r2, #8]
 808ff48:	b151      	cbz	r1, 808ff60 <_ZNK6String9compareToERKS_+0x26>
 808ff4a:	7800      	ldrb	r0, [r0, #0]
 808ff4c:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
 808ff4e:	6898      	ldr	r0, [r3, #8]
 808ff50:	b138      	cbz	r0, 808ff62 <_ZNK6String9compareToERKS_+0x28>
 808ff52:	7809      	ldrb	r1, [r1, #0]
 808ff54:	4248      	negs	r0, r1
 808ff56:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
 808ff58:	f001 bff7 	b.w	8091f4a <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
 808ff5c:	2900      	cmp	r1, #0
 808ff5e:	d1f6      	bne.n	808ff4e <_ZNK6String9compareToERKS_+0x14>
		return 0;
 808ff60:	4608      	mov	r0, r1
}
 808ff62:	4770      	bx	lr

0808ff64 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
 808ff64:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
 808ff66:	6882      	ldr	r2, [r0, #8]
 808ff68:	688b      	ldr	r3, [r1, #8]
 808ff6a:	429a      	cmp	r2, r3
 808ff6c:	d105      	bne.n	808ff7a <_ZNK6String6equalsERKS_+0x16>
 808ff6e:	f7ff ffe4 	bl	808ff3a <_ZNK6String9compareToERKS_>
 808ff72:	fab0 f080 	clz	r0, r0
 808ff76:	0940      	lsrs	r0, r0, #5
}
 808ff78:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
 808ff7a:	2000      	movs	r0, #0
 808ff7c:	e7fc      	b.n	808ff78 <_ZNK6String6equalsERKS_+0x14>

0808ff7e <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
 808ff7e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808ff80:	6882      	ldr	r2, [r0, #8]
 808ff82:	b93a      	cbnz	r2, 808ff94 <_ZNK6String6equalsEPKc+0x16>
 808ff84:	b121      	cbz	r1, 808ff90 <_ZNK6String6equalsEPKc+0x12>
 808ff86:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 808ff88:	fab0 f080 	clz	r0, r0
 808ff8c:	0940      	lsrs	r0, r0, #5
 808ff8e:	e000      	b.n	808ff92 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808ff90:	2001      	movs	r0, #1
}
 808ff92:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 808ff94:	6800      	ldr	r0, [r0, #0]
 808ff96:	b909      	cbnz	r1, 808ff9c <_ZNK6String6equalsEPKc+0x1e>
 808ff98:	7800      	ldrb	r0, [r0, #0]
 808ff9a:	e7f5      	b.n	808ff88 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 808ff9c:	f001 ffd5 	bl	8091f4a <strcmp>
 808ffa0:	e7f2      	b.n	808ff88 <_ZNK6String6equalsEPKc+0xa>

0808ffa2 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 808ffa2:	6883      	ldr	r3, [r0, #8]
 808ffa4:	428b      	cmp	r3, r1
 808ffa6:	d903      	bls.n	808ffb0 <_ZNK6StringixEj+0xe>
 808ffa8:	6800      	ldr	r0, [r0, #0]
 808ffaa:	b110      	cbz	r0, 808ffb2 <_ZNK6StringixEj+0x10>
	return buffer[index];
 808ffac:	5c40      	ldrb	r0, [r0, r1]
 808ffae:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
 808ffb0:	2000      	movs	r0, #0
}
 808ffb2:	4770      	bx	lr

0808ffb4 <_ZNK6String6charAtEj>:
	return operator[](loc);
 808ffb4:	f7ff bff5 	b.w	808ffa2 <_ZNK6StringixEj>

0808ffb8 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 808ffb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808ffba:	461d      	mov	r5, r3
	if (left > right) {
 808ffbc:	429a      	cmp	r2, r3
 808ffbe:	bf88      	it	hi
 808ffc0:	4613      	movhi	r3, r2
{
 808ffc2:	460f      	mov	r7, r1
 808ffc4:	4614      	mov	r4, r2
	if (left > right) {
 808ffc6:	bf88      	it	hi
 808ffc8:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 808ffca:	490b      	ldr	r1, [pc, #44]	; (808fff8 <_ZNK6String9substringEjj+0x40>)
	if (left > right) {
 808ffcc:	bf88      	it	hi
 808ffce:	461d      	movhi	r5, r3
{
 808ffd0:	4606      	mov	r6, r0
	String out;
 808ffd2:	f7ff fe61 	bl	808fc98 <_ZN6StringC1EPKc>
	if (left > len) return out;
 808ffd6:	68ba      	ldr	r2, [r7, #8]
 808ffd8:	42a2      	cmp	r2, r4
 808ffda:	d30a      	bcc.n	808fff2 <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 808ffdc:	6839      	ldr	r1, [r7, #0]
 808ffde:	42aa      	cmp	r2, r5
 808ffe0:	bf94      	ite	ls
 808ffe2:	ebc4 0202 	rsbls	r2, r4, r2
 808ffe6:	ebc4 0205 	rsbhi	r2, r4, r5
 808ffea:	4630      	mov	r0, r6
 808ffec:	4421      	add	r1, r4
 808ffee:	f7ff fe3b 	bl	808fc68 <_ZN6String4copyEPKcj>
	return out;
}
 808fff2:	4630      	mov	r0, r6
 808fff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808fff6:	bf00      	nop
 808fff8:	08094ad5 	.word	0x08094ad5

0808fffc <_ZN6String11toLowerCaseEv>:
	buffer[len] = 0;
	return *this;
}

String& String::toLowerCase(void)
{
 808fffc:	b538      	push	{r3, r4, r5, lr}
	if (buffer) {
 808fffe:	6804      	ldr	r4, [r0, #0]
{
 8090000:	4605      	mov	r5, r0
	if (buffer) {
 8090002:	b13c      	cbz	r4, 8090014 <_ZN6String11toLowerCaseEv+0x18>
 8090004:	3c01      	subs	r4, #1
            for (char *p = buffer; *p; p++) {
 8090006:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 809000a:	b118      	cbz	r0, 8090014 <_ZN6String11toLowerCaseEv+0x18>
                    *p = tolower(*p);
 809000c:	f002 f8a8 	bl	8092160 <tolower>
 8090010:	7020      	strb	r0, [r4, #0]
            for (char *p = buffer; *p; p++) {
 8090012:	e7f8      	b.n	8090006 <_ZN6String11toLowerCaseEv+0xa>
            }
        }
        return *this;
}
 8090014:	4628      	mov	r0, r5
 8090016:	bd38      	pop	{r3, r4, r5, pc}

08090018 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 8090018:	b40e      	push	{r1, r2, r3}
 809001a:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 809001c:	ad09      	add	r5, sp, #36	; 0x24
 809001e:	f855 7b04 	ldr.w	r7, [r5], #4
 8090022:	4604      	mov	r4, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 8090024:	462b      	mov	r3, r5
 8090026:	463a      	mov	r2, r7
 8090028:	2105      	movs	r1, #5
 809002a:	a802      	add	r0, sp, #8
    va_start(marker, fmt);
 809002c:	9501      	str	r5, [sp, #4]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 809002e:	f7fd faa3 	bl	808d578 <vsnprintf>
 8090032:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 8090034:	490b      	ldr	r1, [pc, #44]	; (8090064 <_ZN6String6formatEPKcz+0x4c>)
 8090036:	4620      	mov	r0, r4
 8090038:	f7ff fe2e 	bl	808fc98 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
 809003c:	4631      	mov	r1, r6
 809003e:	4620      	mov	r0, r4
 8090040:	f7ff fdfe 	bl	808fc40 <_ZN6String7reserveEj>
    if (result.buffer) {
 8090044:	6820      	ldr	r0, [r4, #0]
 8090046:	b130      	cbz	r0, 8090056 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 8090048:	462b      	mov	r3, r5
 809004a:	463a      	mov	r2, r7
 809004c:	1c71      	adds	r1, r6, #1
        va_start(marker, fmt);
 809004e:	9501      	str	r5, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 8090050:	f7fd fa92 	bl	808d578 <vsnprintf>
        va_end(marker);
        result.len = n;
 8090054:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
 8090056:	4620      	mov	r0, r4
 8090058:	b004      	add	sp, #16
 809005a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 809005e:	b003      	add	sp, #12
 8090060:	4770      	bx	lr
 8090062:	bf00      	nop
 8090064:	08094ad5 	.word	0x08094ad5

08090068 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 8090068:	b510      	push	{r4, lr}
 809006a:	4604      	mov	r4, r0
        if (wakeupSource_) {
 809006c:	6800      	ldr	r0, [r0, #0]
 809006e:	b118      	cbz	r0, 8090078 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 8090070:	f7fd fa5a 	bl	808d528 <free>
            wakeupSource_ = nullptr;
 8090074:	2300      	movs	r3, #0
 8090076:	6023      	str	r3, [r4, #0]
        }
    }
 8090078:	bd10      	pop	{r4, pc}

0809007a <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 809007a:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 809007c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8090080:	460d      	mov	r5, r1
        error_ = result.error_;
 8090082:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 8090084:	460b      	mov	r3, r1
 8090086:	f853 2f06 	ldr.w	r2, [r3, #6]!
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 809008a:	4604      	mov	r4, r0
        compatResult_ = result.compatResult_;
 809008c:	f8c0 2006 	str.w	r2, [r0, #6]
 8090090:	889b      	ldrh	r3, [r3, #4]
 8090092:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 8090094:	f7ff ffe8 	bl	8090068 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
 8090098:	682b      	ldr	r3, [r5, #0]
 809009a:	b113      	cbz	r3, 80900a2 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 809009c:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 809009e:	2300      	movs	r3, #0
 80900a0:	602b      	str	r3, [r5, #0]
    }
 80900a2:	4620      	mov	r0, r4
 80900a4:	bd38      	pop	{r3, r4, r5, pc}

080900a6 <_ZN17SystemSleepResult13toSleepResultEv>:
        if (error_ || wakeupSource_) {
 80900a6:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SleepResult toSleepResult() {
 80900aa:	b510      	push	{r4, lr}
 80900ac:	680a      	ldr	r2, [r1, #0]
        if (error_ || wakeupSource_) {
 80900ae:	b933      	cbnz	r3, 80900be <_ZN17SystemSleepResult13toSleepResultEv+0x18>
 80900b0:	b932      	cbnz	r2, 80900c0 <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
        return compatResult_;
 80900b2:	f851 3f06 	ldr.w	r3, [r1, #6]!
 80900b6:	6003      	str	r3, [r0, #0]
 80900b8:	888b      	ldrh	r3, [r1, #4]
 80900ba:	8083      	strh	r3, [r0, #4]
    }
 80900bc:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
 80900be:	b122      	cbz	r2, 80900ca <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
 80900c0:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
 80900c2:	2c01      	cmp	r4, #1
 80900c4:	d003      	beq.n	80900ce <_ZN17SystemSleepResult13toSleepResultEv+0x28>
 80900c6:	2c04      	cmp	r4, #4
 80900c8:	d006      	beq.n	80900d8 <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 80900ca:	2204      	movs	r2, #4
 80900cc:	e005      	b.n	80900da <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 80900ce:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 80900d0:	718c      	strb	r4, [r1, #6]
 80900d2:	810b      	strh	r3, [r1, #8]
 80900d4:	814a      	strh	r2, [r1, #10]
                    break;
 80900d6:	e7ec      	b.n	80900b2 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 80900d8:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 80900da:	810b      	strh	r3, [r1, #8]
 80900dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80900e0:	718a      	strb	r2, [r1, #6]
 80900e2:	814b      	strh	r3, [r1, #10]
                    break;
 80900e4:	e7e5      	b.n	80900b2 <_ZN17SystemSleepResult13toSleepResultEv+0xc>

080900e6 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 80900e6:	b507      	push	{r0, r1, r2, lr}
 80900e8:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 80900ea:	2100      	movs	r1, #0
{
 80900ec:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 80900ee:	9100      	str	r1, [sp, #0]
 80900f0:	2001      	movs	r0, #1
 80900f2:	218c      	movs	r1, #140	; 0x8c
 80900f4:	f7fd f95e 	bl	808d3b4 <system_reset>
}
 80900f8:	b003      	add	sp, #12
 80900fa:	f85d fb04 	ldr.w	pc, [sp], #4

080900fe <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 80900fe:	4601      	mov	r1, r0
    reset(0, flags);
 8090100:	2000      	movs	r0, #0
 8090102:	f7ff bff0 	b.w	80900e6 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

08090106 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 8090106:	2000      	movs	r0, #0
 8090108:	f7ff bff9 	b.w	80900fe <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

0809010c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
    }
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 809010c:	b530      	push	{r4, r5, lr}
 809010e:	4604      	mov	r4, r0
 8090110:	b085      	sub	sp, #20
 8090112:	4608      	mov	r0, r1
 8090114:	4611      	mov	r1, r2
 8090116:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 8090118:	2300      	movs	r3, #0
 809011a:	f7fd f907 	bl	808d32c <system_sleep>
              compatResult_(r) {
 809011e:	2300      	movs	r3, #0
 8090120:	9301      	str	r3, [sp, #4]
 8090122:	f8ad 3008 	strh.w	r3, [sp, #8]
 8090126:	f88d 300a 	strb.w	r3, [sp, #10]
 809012a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
 809012e:	4d09      	ldr	r5, [pc, #36]	; (8090154 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
 8090130:	a901      	add	r1, sp, #4
 8090132:	f8ad 000c 	strh.w	r0, [sp, #12]
 8090136:	4628      	mov	r0, r5
 8090138:	f8ad 300e 	strh.w	r3, [sp, #14]
 809013c:	f7ff ff9d 	bl	809007a <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
 8090140:	a801      	add	r0, sp, #4
 8090142:	f7ff ff91 	bl	8090068 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
 8090146:	4620      	mov	r0, r4
 8090148:	4629      	mov	r1, r5
 809014a:	f7ff ffac 	bl	80900a6 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
 809014e:	4620      	mov	r0, r4
 8090150:	b005      	add	sp, #20
 8090152:	bd30      	pop	{r4, r5, pc}
 8090154:	200015e8 	.word	0x200015e8

08090158 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8090158:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 809015a:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 809015c:	b510      	push	{r4, lr}
 809015e:	4b08      	ldr	r3, [pc, #32]	; (8090180 <_GLOBAL__sub_I_System+0x28>)
 8090160:	4c08      	ldr	r4, [pc, #32]	; (8090184 <_GLOBAL__sub_I_System+0x2c>)
 8090162:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 8090164:	4b08      	ldr	r3, [pc, #32]	; (8090188 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 8090166:	6020      	str	r0, [r4, #0]
 8090168:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 809016a:	71a0      	strb	r0, [r4, #6]
 809016c:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 809016e:	f7fd f8cd 	bl	808d30c <set_system_mode>
SystemClass System;
 8090172:	4620      	mov	r0, r4
 8090174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 8090178:	4a04      	ldr	r2, [pc, #16]	; (809018c <_GLOBAL__sub_I_System+0x34>)
 809017a:	4905      	ldr	r1, [pc, #20]	; (8090190 <_GLOBAL__sub_I_System+0x38>)
 809017c:	f000 bc2e 	b.w	80909dc <__aeabi_atexit>
 8090180:	200015f4 	.word	0x200015f4
 8090184:	200015e8 	.word	0x200015e8
 8090188:	ffff0000 	.word	0xffff0000
 809018c:	200005b0 	.word	0x200005b0
 8090190:	08089cb3 	.word	0x08089cb3

08090194 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
 8090194:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
 8090196:	2000      	movs	r0, #0
 8090198:	f7fd f946 	bl	808d428 <spark_sync_time_pending>
 809019c:	b128      	cbz	r0, 80901aa <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 809019e:	f7fd f933 	bl	808d408 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80901a2:	f080 0001 	eor.w	r0, r0, #1
 80901a6:	b2c0      	uxtb	r0, r0
    }
 80901a8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80901aa:	2001      	movs	r0, #1
 80901ac:	e7fc      	b.n	80901a8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

080901ae <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80901ae:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80901b0:	2000      	movs	r0, #0
 80901b2:	f7fc fee3 	bl	808cf7c <hal_rtc_time_is_valid>
    if (rtcstate)
 80901b6:	4604      	mov	r4, r0
 80901b8:	b9a0      	cbnz	r0, 80901e4 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80901ba:	f7fd f89f 	bl	808d2fc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80901be:	2801      	cmp	r0, #1
 80901c0:	d110      	bne.n	80901e4 <_ZN9TimeClass7isValidEv+0x36>
 80901c2:	4620      	mov	r0, r4
 80901c4:	f7fd f8da 	bl	808d37c <system_thread_get_state>
 80901c8:	b960      	cbnz	r0, 80901e4 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80901ca:	f7ff ffe3 	bl	8090194 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80901ce:	b910      	cbnz	r0, 80901d6 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80901d0:	f7fd f90a 	bl	808d3e8 <spark_process>
        while (_while() && !_condition()) {
 80901d4:	e7f9      	b.n	80901ca <_ZN9TimeClass7isValidEv+0x1c>
 80901d6:	f7ff ffdd 	bl	8090194 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80901da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80901de:	2000      	movs	r0, #0
 80901e0:	f7fc becc 	b.w	808cf7c <hal_rtc_time_is_valid>
}
 80901e4:	4620      	mov	r0, r4
 80901e6:	bd10      	pop	{r4, pc}

080901e8 <_ZN9TimeClass3nowEv>:
{
 80901e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80901ea:	f7ff ffe0 	bl	80901ae <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80901ee:	2210      	movs	r2, #16
 80901f0:	2100      	movs	r1, #0
 80901f2:	4668      	mov	r0, sp
 80901f4:	f001 fe66 	bl	8091ec4 <memset>
    hal_rtc_get_time(&tv, nullptr);
 80901f8:	2100      	movs	r1, #0
 80901fa:	4668      	mov	r0, sp
 80901fc:	f7fc fec6 	bl	808cf8c <hal_rtc_get_time>
}
 8090200:	9800      	ldr	r0, [sp, #0]
 8090202:	b005      	add	sp, #20
 8090204:	f85d fb04 	ldr.w	pc, [sp], #4

08090208 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8090208:	4b02      	ldr	r3, [pc, #8]	; (8090214 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 809020a:	681a      	ldr	r2, [r3, #0]
 809020c:	4b02      	ldr	r3, [pc, #8]	; (8090218 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 809020e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 8090210:	4770      	bx	lr
 8090212:	bf00      	nop
 8090214:	20000544 	.word	0x20000544
 8090218:	200015f8 	.word	0x200015f8

0809021c <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 809021c:	7441      	strb	r1, [r0, #17]
}
 809021e:	4770      	bx	lr

08090220 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 8090220:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 8090222:	7c00      	ldrb	r0, [r0, #16]
 8090224:	f7fc ffea 	bl	808d1fc <hal_usart_available_data_for_write>
}
 8090228:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 809022c:	bd08      	pop	{r3, pc}

0809022e <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 809022e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 8090230:	7c00      	ldrb	r0, [r0, #16]
 8090232:	f7fc ffbb 	bl	808d1ac <hal_usart_available>
}
 8090236:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 809023a:	bd08      	pop	{r3, pc}

0809023c <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 809023c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 809023e:	7c00      	ldrb	r0, [r0, #16]
 8090240:	f7fc ffc4 	bl	808d1cc <hal_usart_peek>
}
 8090244:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8090248:	bd08      	pop	{r3, pc}

0809024a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 809024a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 809024c:	7c00      	ldrb	r0, [r0, #16]
 809024e:	f7fc ffb5 	bl	808d1bc <hal_usart_read>
}
 8090252:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8090256:	bd08      	pop	{r3, pc}

08090258 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 8090258:	7c00      	ldrb	r0, [r0, #16]
 809025a:	f7fc bfbf 	b.w	808d1dc <hal_usart_flush>

0809025e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 809025e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8090260:	7c46      	ldrb	r6, [r0, #17]
{
 8090262:	4604      	mov	r4, r0
 8090264:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8090266:	b12e      	cbz	r6, 8090274 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 8090268:	4629      	mov	r1, r5
 809026a:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 809026c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 8090270:	f7fc bf94 	b.w	808d19c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8090274:	7c00      	ldrb	r0, [r0, #16]
 8090276:	f7fc ffc1 	bl	808d1fc <hal_usart_available_data_for_write>
 809027a:	2800      	cmp	r0, #0
 809027c:	dcf4      	bgt.n	8090268 <_ZN11USARTSerial5writeEh+0xa>
}
 809027e:	4630      	mov	r0, r6
 8090280:	bd70      	pop	{r4, r5, r6, pc}
	...

08090284 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 8090284:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8090288:	b510      	push	{r4, lr}
 809028a:	4604      	mov	r4, r0
 809028c:	4608      	mov	r0, r1
 809028e:	4611      	mov	r1, r2
 8090290:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8090294:	e9c4 c201 	strd	ip, r2, [r4, #4]
 8090298:	4a04      	ldr	r2, [pc, #16]	; (80902ac <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 809029a:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 809029c:	6022      	str	r2, [r4, #0]
  _blocking = true;
 809029e:	2201      	movs	r2, #1
 80902a0:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80902a2:	461a      	mov	r2, r3
 80902a4:	f7fc ff6a 	bl	808d17c <hal_usart_init>
}
 80902a8:	4620      	mov	r0, r4
 80902aa:	bd10      	pop	{r4, pc}
 80902ac:	08095190 	.word	0x08095190

080902b0 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 80902b0:	2300      	movs	r3, #0
 80902b2:	7c00      	ldrb	r0, [r0, #16]
 80902b4:	f7fc bfaa 	b.w	808d20c <hal_usart_begin_config>

080902b8 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 80902b8:	2200      	movs	r2, #0
 80902ba:	f7ff bff9 	b.w	80902b0 <_ZN11USARTSerial5beginEmm>

080902be <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 80902be:	7c00      	ldrb	r0, [r0, #16]
 80902c0:	f7fc bf64 	b.w	808d18c <hal_usart_end>

080902c4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 80902c4:	7c00      	ldrb	r0, [r0, #16]
 80902c6:	f7fc bf91 	b.w	808d1ec <hal_usart_is_enabled>
	...

080902cc <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80902cc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80902ce:	4d0d      	ldr	r5, [pc, #52]	; (8090304 <_Z22__fetch_global_Serial1v+0x38>)
 80902d0:	7829      	ldrb	r1, [r5, #0]
 80902d2:	f3bf 8f5b 	dmb	ish
 80902d6:	f011 0401 	ands.w	r4, r1, #1
 80902da:	d111      	bne.n	8090300 <_Z22__fetch_global_Serial1v+0x34>
 80902dc:	4628      	mov	r0, r5
 80902de:	f7ef feef 	bl	80800c0 <__cxa_guard_acquire>
 80902e2:	b168      	cbz	r0, 8090300 <_Z22__fetch_global_Serial1v+0x34>
 80902e4:	4621      	mov	r1, r4
 80902e6:	4a08      	ldr	r2, [pc, #32]	; (8090308 <_Z22__fetch_global_Serial1v+0x3c>)
 80902e8:	4b08      	ldr	r3, [pc, #32]	; (809030c <_Z22__fetch_global_Serial1v+0x40>)
 80902ea:	4809      	ldr	r0, [pc, #36]	; (8090310 <_Z22__fetch_global_Serial1v+0x44>)
 80902ec:	f7ff ffca 	bl	8090284 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80902f0:	4628      	mov	r0, r5
 80902f2:	f7ef feea 	bl	80800ca <__cxa_guard_release>
 80902f6:	4a07      	ldr	r2, [pc, #28]	; (8090314 <_Z22__fetch_global_Serial1v+0x48>)
 80902f8:	4907      	ldr	r1, [pc, #28]	; (8090318 <_Z22__fetch_global_Serial1v+0x4c>)
 80902fa:	4805      	ldr	r0, [pc, #20]	; (8090310 <_Z22__fetch_global_Serial1v+0x44>)
 80902fc:	f000 fb6e 	bl	80909dc <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8090300:	4803      	ldr	r0, [pc, #12]	; (8090310 <_Z22__fetch_global_Serial1v+0x44>)
 8090302:	bd38      	pop	{r3, r4, r5, pc}
 8090304:	200015fc 	.word	0x200015fc
 8090308:	20001600 	.word	0x20001600
 809030c:	20001684 	.word	0x20001684
 8090310:	20001708 	.word	0x20001708
 8090314:	200005b0 	.word	0x200005b0
 8090318:	0808b9a5 	.word	0x0808b9a5

0809031c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 809031c:	7441      	strb	r1, [r0, #17]
}
 809031e:	4770      	bx	lr

08090320 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8090320:	4770      	bx	lr

08090322 <_ZN9USBSerial4readEv>:
{
 8090322:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8090324:	2100      	movs	r1, #0
 8090326:	7c00      	ldrb	r0, [r0, #16]
 8090328:	f7fc ffa0 	bl	808d26c <HAL_USB_USART_Receive_Data>
}
 809032c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8090330:	bd08      	pop	{r3, pc}

08090332 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 8090332:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8090334:	2101      	movs	r1, #1
 8090336:	7c00      	ldrb	r0, [r0, #16]
 8090338:	f7fc ff98 	bl	808d26c <HAL_USB_USART_Receive_Data>
}
 809033c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8090340:	bd08      	pop	{r3, pc}

08090342 <_ZN9USBSerial17availableForWriteEv>:
{
 8090342:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8090344:	7c00      	ldrb	r0, [r0, #16]
 8090346:	f7fc ff89 	bl	808d25c <HAL_USB_USART_Available_Data_For_Write>
}
 809034a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 809034e:	bd08      	pop	{r3, pc}

08090350 <_ZN9USBSerial9availableEv>:
{
 8090350:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8090352:	7c00      	ldrb	r0, [r0, #16]
 8090354:	f7fc ff7a 	bl	808d24c <HAL_USB_USART_Available_Data>
}
 8090358:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 809035c:	bd08      	pop	{r3, pc}

0809035e <_ZN9USBSerial5writeEh>:
{
 809035e:	b538      	push	{r3, r4, r5, lr}
 8090360:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8090362:	7c00      	ldrb	r0, [r0, #16]
{
 8090364:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8090366:	f7fc ff79 	bl	808d25c <HAL_USB_USART_Available_Data_For_Write>
 809036a:	2800      	cmp	r0, #0
 809036c:	dc01      	bgt.n	8090372 <_ZN9USBSerial5writeEh+0x14>
 809036e:	7c60      	ldrb	r0, [r4, #17]
 8090370:	b128      	cbz	r0, 809037e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8090372:	4629      	mov	r1, r5
 8090374:	7c20      	ldrb	r0, [r4, #16]
 8090376:	f7fc ff81 	bl	808d27c <HAL_USB_USART_Send_Data>
 809037a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 809037e:	bd38      	pop	{r3, r4, r5, pc}

08090380 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 8090380:	7c00      	ldrb	r0, [r0, #16]
 8090382:	f7fc bf83 	b.w	808d28c <HAL_USB_USART_Flush_Data>

08090386 <_ZN9USBSerialD0Ev>:
 8090386:	b510      	push	{r4, lr}
 8090388:	4604      	mov	r4, r0
 809038a:	2114      	movs	r1, #20
 809038c:	f000 fb2b 	bl	80909e6 <_ZdlPvj>
 8090390:	4620      	mov	r0, r4
 8090392:	bd10      	pop	{r4, pc}

08090394 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8090394:	b510      	push	{r4, lr}
 8090396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 809039a:	4604      	mov	r4, r0
 809039c:	4608      	mov	r0, r1
 809039e:	2100      	movs	r1, #0
 80903a0:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80903a4:	4b04      	ldr	r3, [pc, #16]	; (80903b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80903a6:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80903a8:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80903aa:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80903ac:	4611      	mov	r1, r2
  _blocking = true;
 80903ae:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80903b0:	f7fc ff34 	bl	808d21c <HAL_USB_USART_Init>
}
 80903b4:	4620      	mov	r0, r4
 80903b6:	bd10      	pop	{r4, pc}
 80903b8:	080951c0 	.word	0x080951c0

080903bc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80903bc:	2200      	movs	r2, #0
 80903be:	7c00      	ldrb	r0, [r0, #16]
 80903c0:	f7fc bf34 	b.w	808d22c <HAL_USB_USART_Begin>

080903c4 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 80903c4:	7c00      	ldrb	r0, [r0, #16]
 80903c6:	f7fc bf39 	b.w	808d23c <HAL_USB_USART_End>
	...

080903cc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80903cc:	b510      	push	{r4, lr}
 80903ce:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80903d0:	2214      	movs	r2, #20
 80903d2:	2100      	movs	r1, #0
 80903d4:	f001 fd76 	bl	8091ec4 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80903d8:	4b05      	ldr	r3, [pc, #20]	; (80903f0 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80903da:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80903dc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80903de:	4b05      	ldr	r3, [pc, #20]	; (80903f4 <_Z19acquireSerialBufferv+0x28>)
 80903e0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80903e2:	f240 1301 	movw	r3, #257	; 0x101
 80903e6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80903e8:	2381      	movs	r3, #129	; 0x81
 80903ea:	8223      	strh	r3, [r4, #16]
}
 80903ec:	bd10      	pop	{r4, pc}
 80903ee:	bf00      	nop
 80903f0:	2000174c 	.word	0x2000174c
 80903f4:	2000184d 	.word	0x2000184d

080903f8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80903f8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80903fa:	4d0f      	ldr	r5, [pc, #60]	; (8090438 <_Z16_fetch_usbserialv+0x40>)
{
 80903fc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80903fe:	a801      	add	r0, sp, #4
 8090400:	f7ff ffe4 	bl	80903cc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8090404:	7829      	ldrb	r1, [r5, #0]
 8090406:	f3bf 8f5b 	dmb	ish
 809040a:	f011 0401 	ands.w	r4, r1, #1
 809040e:	d110      	bne.n	8090432 <_Z16_fetch_usbserialv+0x3a>
 8090410:	4628      	mov	r0, r5
 8090412:	f7ef fe55 	bl	80800c0 <__cxa_guard_acquire>
 8090416:	b160      	cbz	r0, 8090432 <_Z16_fetch_usbserialv+0x3a>
 8090418:	4621      	mov	r1, r4
 809041a:	aa01      	add	r2, sp, #4
 809041c:	4807      	ldr	r0, [pc, #28]	; (809043c <_Z16_fetch_usbserialv+0x44>)
 809041e:	f7ff ffb9 	bl	8090394 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8090422:	4628      	mov	r0, r5
 8090424:	f7ef fe51 	bl	80800ca <__cxa_guard_release>
 8090428:	4a05      	ldr	r2, [pc, #20]	; (8090440 <_Z16_fetch_usbserialv+0x48>)
 809042a:	4906      	ldr	r1, [pc, #24]	; (8090444 <_Z16_fetch_usbserialv+0x4c>)
 809042c:	4803      	ldr	r0, [pc, #12]	; (809043c <_Z16_fetch_usbserialv+0x44>)
 809042e:	f000 fad5 	bl	80909dc <__aeabi_atexit>
	return _usbserial;
}
 8090432:	4802      	ldr	r0, [pc, #8]	; (809043c <_Z16_fetch_usbserialv+0x44>)
 8090434:	b007      	add	sp, #28
 8090436:	bd30      	pop	{r4, r5, pc}
 8090438:	2000171c 	.word	0x2000171c
 809043c:	20001724 	.word	0x20001724
 8090440:	200005b0 	.word	0x200005b0
 8090444:	08090321 	.word	0x08090321

08090448 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8090448:	b510      	push	{r4, lr}
 809044a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 809044c:	2214      	movs	r2, #20
 809044e:	2100      	movs	r1, #0
 8090450:	f001 fd38 	bl	8091ec4 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8090454:	4b05      	ldr	r3, [pc, #20]	; (809046c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8090456:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 8090458:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 809045a:	4b05      	ldr	r3, [pc, #20]	; (8090470 <_Z23acquireUSBSerial1Bufferv+0x28>)
 809045c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 809045e:	f240 1301 	movw	r3, #257	; 0x101
 8090462:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8090464:	2381      	movs	r3, #129	; 0x81
 8090466:	8223      	strh	r3, [r4, #16]
}
 8090468:	bd10      	pop	{r4, pc}
 809046a:	bf00      	nop
 809046c:	200018ce 	.word	0x200018ce
 8090470:	200019cf 	.word	0x200019cf

08090474 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8090474:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8090476:	4c0f      	ldr	r4, [pc, #60]	; (80904b4 <_Z17_fetch_usbserial1v+0x40>)
{
 8090478:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 809047a:	a801      	add	r0, sp, #4
 809047c:	f7ff ffe4 	bl	8090448 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8090480:	7823      	ldrb	r3, [r4, #0]
 8090482:	f3bf 8f5b 	dmb	ish
 8090486:	07db      	lsls	r3, r3, #31
 8090488:	d410      	bmi.n	80904ac <_Z17_fetch_usbserial1v+0x38>
 809048a:	4620      	mov	r0, r4
 809048c:	f7ef fe18 	bl	80800c0 <__cxa_guard_acquire>
 8090490:	b160      	cbz	r0, 80904ac <_Z17_fetch_usbserial1v+0x38>
 8090492:	2101      	movs	r1, #1
 8090494:	aa01      	add	r2, sp, #4
 8090496:	4808      	ldr	r0, [pc, #32]	; (80904b8 <_Z17_fetch_usbserial1v+0x44>)
 8090498:	f7ff ff7c 	bl	8090394 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 809049c:	4620      	mov	r0, r4
 809049e:	f7ef fe14 	bl	80800ca <__cxa_guard_release>
 80904a2:	4a06      	ldr	r2, [pc, #24]	; (80904bc <_Z17_fetch_usbserial1v+0x48>)
 80904a4:	4906      	ldr	r1, [pc, #24]	; (80904c0 <_Z17_fetch_usbserial1v+0x4c>)
 80904a6:	4804      	ldr	r0, [pc, #16]	; (80904b8 <_Z17_fetch_usbserial1v+0x44>)
 80904a8:	f000 fa98 	bl	80909dc <__aeabi_atexit>
  return _usbserial1;
}
 80904ac:	4802      	ldr	r0, [pc, #8]	; (80904b8 <_Z17_fetch_usbserial1v+0x44>)
 80904ae:	b006      	add	sp, #24
 80904b0:	bd10      	pop	{r4, pc}
 80904b2:	bf00      	nop
 80904b4:	20001720 	.word	0x20001720
 80904b8:	20001738 	.word	0x20001738
 80904bc:	200005b0 	.word	0x200005b0
 80904c0:	08090321 	.word	0x08090321

080904c4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80904c4:	b510      	push	{r4, lr}
 80904c6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80904c8:	f001 fd6d 	bl	8091fa6 <strlen>
 80904cc:	1e43      	subs	r3, r0, #1
 80904ce:	4620      	mov	r0, r4
 80904d0:	4423      	add	r3, r4
	while(i<j){
 80904d2:	4283      	cmp	r3, r0
 80904d4:	d906      	bls.n	80904e4 <_Z11str_reversePc+0x20>
		c = *i;
 80904d6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80904d8:	7819      	ldrb	r1, [r3, #0]
 80904da:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80904de:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 80904e2:	e7f6      	b.n	80904d2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 80904e4:	bd10      	pop	{r4, pc}

080904e6 <ltoa>:
{
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
 80904e6:	1e93      	subs	r3, r2, #2
 80904e8:	2b22      	cmp	r3, #34	; 0x22
 80904ea:	f04f 0300 	mov.w	r3, #0
{
 80904ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80904f2:	b08c      	sub	sp, #48	; 0x30
 80904f4:	460d      	mov	r5, r1
 80904f6:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 80904f8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
 80904fc:	d926      	bls.n	809054c <ltoa+0x66>

      if (10 == base && N < 0L)
 80904fe:	2800      	cmp	r0, #0
 8090500:	da29      	bge.n	8090556 <ltoa+0x70>
      {
            *head++ = '-';
 8090502:	462e      	mov	r6, r5
 8090504:	232d      	movs	r3, #45	; 0x2d
            uarg    = -N;
 8090506:	240a      	movs	r4, #10
            *head++ = '-';
 8090508:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
 809050c:	4240      	negs	r0, r0
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
 809050e:	f04f 0801 	mov.w	r8, #1
      *tail-- = '\0';
 8090512:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
 8090516:	4622      	mov	r2, r4
 8090518:	4601      	mov	r1, r0
 809051a:	a801      	add	r0, sp, #4
 809051c:	f001 fc96 	bl	8091e4c <ldiv>
 8090520:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
 8090522:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
 8090524:	2b09      	cmp	r3, #9
 8090526:	bfcc      	ite	gt
 8090528:	2237      	movgt	r2, #55	; 0x37
 809052a:	2230      	movle	r2, #48	; 0x30
 809052c:	4413      	add	r3, r2
 809052e:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
 8090532:	f108 0801 	add.w	r8, r8, #1
 8090536:	2800      	cmp	r0, #0
 8090538:	d1ed      	bne.n	8090516 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
 809053a:	4642      	mov	r2, r8
 809053c:	4630      	mov	r0, r6
 809053e:	1c79      	adds	r1, r7, #1
 8090540:	f001 fc98 	bl	8091e74 <memcpy>
      return str;
}
 8090544:	4628      	mov	r0, r5
 8090546:	b00c      	add	sp, #48	; 0x30
 8090548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
 809054c:	2a0a      	cmp	r2, #10
 809054e:	d0d6      	beq.n	80904fe <ltoa+0x18>
      if (uarg)
 8090550:	b118      	cbz	r0, 809055a <ltoa+0x74>
 8090552:	462e      	mov	r6, r5
 8090554:	e7db      	b.n	809050e <ltoa+0x28>
 8090556:	240a      	movs	r4, #10
 8090558:	e7fa      	b.n	8090550 <ltoa+0x6a>
      else  *tail-- = '0';
 809055a:	2330      	movs	r3, #48	; 0x30
 809055c:	462e      	mov	r6, r5
      int i = 2;
 809055e:	f04f 0802 	mov.w	r8, #2
      else  *tail-- = '0';
 8090562:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8090566:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
 809056a:	e7e6      	b.n	809053a <ltoa+0x54>

0809056c <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 809056c:	b570      	push	{r4, r5, r6, lr}
 809056e:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 8090570:	1e91      	subs	r1, r2, #2
 8090572:	2922      	cmp	r1, #34	; 0x22
 8090574:	d822      	bhi.n	80905bc <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 8090576:	4625      	mov	r5, r4

	div_t result;
	while(a){
 8090578:	b168      	cbz	r0, 8090596 <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 809057a:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 809057e:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 8090582:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 8090584:	2809      	cmp	r0, #9
                *ptr += '0';
 8090586:	bf94      	ite	ls
 8090588:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 809058a:	3157      	addhi	r1, #87	; 0x57
 809058c:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 809058e:	4630      	mov	r0, r6
 8090590:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 8090594:	e7f0      	b.n	8090578 <ultoa+0xc>
 8090596:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 8090598:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 809059a:	4423      	add	r3, r4
 809059c:	4293      	cmp	r3, r2
 809059e:	d902      	bls.n	80905a6 <ultoa+0x3a>
            *ptr++ = '0';
 80905a0:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 80905a4:	e7fa      	b.n	809059c <ultoa+0x30>
 80905a6:	1b5a      	subs	r2, r3, r5
 80905a8:	42ab      	cmp	r3, r5
 80905aa:	bf38      	it	cc
 80905ac:	2200      	movcc	r2, #0

	*ptr = '\0';
 80905ae:	2300      	movs	r3, #0
	str_reverse(buffer);
 80905b0:	4620      	mov	r0, r4
	*ptr = '\0';
 80905b2:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 80905b4:	f7ff ff86 	bl	80904c4 <_Z11str_reversePc>
	return buffer;
 80905b8:	4620      	mov	r0, r4
}
 80905ba:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 80905bc:	2000      	movs	r0, #0
 80905be:	e7fc      	b.n	80905ba <ultoa+0x4e>

080905c0 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80905c0:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80905c2:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80905c4:	460c      	mov	r4, r1
 80905c6:	4615      	mov	r5, r2
	if(a<0){
 80905c8:	da0d      	bge.n	80905e6 <itoa+0x26>
		*buffer = '-';
 80905ca:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80905cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80905d0:	bf0c      	ite	eq
 80905d2:	4618      	moveq	r0, r3
 80905d4:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80905d6:	2301      	movs	r3, #1
		*buffer = '-';
 80905d8:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 80905da:	462a      	mov	r2, r5
 80905dc:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 80905de:	f7ff ffc5 	bl	809056c <ultoa>
	}
	return buffer;
}
 80905e2:	4620      	mov	r0, r4
 80905e4:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 80905e6:	2301      	movs	r3, #1
 80905e8:	e7f9      	b.n	80905de <itoa+0x1e>

080905ea <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
 80905ea:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
 80905ec:	2301      	movs	r3, #1
 80905ee:	f7ff ffbd 	bl	809056c <ultoa>
}
 80905f2:	bd08      	pop	{r3, pc}

080905f4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80905f4:	4b01      	ldr	r3, [pc, #4]	; (80905fc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80905f6:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80905f8:	4770      	bx	lr
 80905fa:	bf00      	nop
 80905fc:	2000054c 	.word	0x2000054c

08090600 <serialEventRun>:
{
 8090600:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8090602:	4b17      	ldr	r3, [pc, #92]	; (8090660 <serialEventRun+0x60>)
 8090604:	b143      	cbz	r3, 8090618 <serialEventRun+0x18>
 8090606:	f7ff fef7 	bl	80903f8 <_Z16_fetch_usbserialv>
 809060a:	6803      	ldr	r3, [r0, #0]
 809060c:	691b      	ldr	r3, [r3, #16]
 809060e:	4798      	blx	r3
 8090610:	2800      	cmp	r0, #0
 8090612:	dd01      	ble.n	8090618 <serialEventRun+0x18>
        serialEvent();
 8090614:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 8090618:	4b12      	ldr	r3, [pc, #72]	; (8090664 <serialEventRun+0x64>)
 809061a:	b143      	cbz	r3, 809062e <serialEventRun+0x2e>
 809061c:	f7ff fe56 	bl	80902cc <_Z22__fetch_global_Serial1v>
 8090620:	6803      	ldr	r3, [r0, #0]
 8090622:	691b      	ldr	r3, [r3, #16]
 8090624:	4798      	blx	r3
 8090626:	2800      	cmp	r0, #0
 8090628:	dd01      	ble.n	809062e <serialEventRun+0x2e>
        serialEvent1();
 809062a:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 809062e:	4b0e      	ldr	r3, [pc, #56]	; (8090668 <serialEventRun+0x68>)
 8090630:	b10b      	cbz	r3, 8090636 <serialEventRun+0x36>
 8090632:	f7fb f9f9 	bl	808ba28 <_Z15serialEventRun2v>
    if (serialEventRun4) serialEventRun4();
 8090636:	4b0d      	ldr	r3, [pc, #52]	; (809066c <serialEventRun+0x6c>)
 8090638:	b10b      	cbz	r3, 809063e <serialEventRun+0x3e>
 809063a:	f3af 8000 	nop.w
    if (serialEventRun5) serialEventRun5();
 809063e:	4b0c      	ldr	r3, [pc, #48]	; (8090670 <serialEventRun+0x70>)
 8090640:	b10b      	cbz	r3, 8090646 <serialEventRun+0x46>
 8090642:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8090646:	4b0b      	ldr	r3, [pc, #44]	; (8090674 <serialEventRun+0x74>)
 8090648:	b143      	cbz	r3, 809065c <serialEventRun+0x5c>
 809064a:	f7ff ff13 	bl	8090474 <_Z17_fetch_usbserial1v>
 809064e:	6803      	ldr	r3, [r0, #0]
 8090650:	691b      	ldr	r3, [r3, #16]
 8090652:	4798      	blx	r3
 8090654:	2800      	cmp	r0, #0
 8090656:	dd01      	ble.n	809065c <serialEventRun+0x5c>
        usbSerialEvent1();
 8090658:	f3af 8000 	nop.w
}
 809065c:	bd08      	pop	{r3, pc}
 809065e:	bf00      	nop
	...
 8090668:	0808ba29 	.word	0x0808ba29
	...

08090678 <_post_loop>:
{
 8090678:	b508      	push	{r3, lr}
	serialEventRun();
 809067a:	f7ff ffc1 	bl	8090600 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 809067e:	f7fc fc5d 	bl	808cf3c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8090682:	4b01      	ldr	r3, [pc, #4]	; (8090688 <_post_loop+0x10>)
 8090684:	6018      	str	r0, [r3, #0]
}
 8090686:	bd08      	pop	{r3, pc}
 8090688:	20001a58 	.word	0x20001a58

0809068c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 809068c:	4802      	ldr	r0, [pc, #8]	; (8090698 <_Z33system_initialize_user_backup_ramv+0xc>)
 809068e:	4a03      	ldr	r2, [pc, #12]	; (809069c <_Z33system_initialize_user_backup_ramv+0x10>)
 8090690:	4903      	ldr	r1, [pc, #12]	; (80906a0 <_Z33system_initialize_user_backup_ramv+0x14>)
 8090692:	1a12      	subs	r2, r2, r0
 8090694:	f001 bbee 	b.w	8091e74 <memcpy>
 8090698:	40024000 	.word	0x40024000
 809069c:	40024004 	.word	0x40024004
 80906a0:	08095348 	.word	0x08095348

080906a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80906a4:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80906a6:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80906a8:	461a      	mov	r2, r3
 80906aa:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80906ae:	9300      	str	r3, [sp, #0]
 80906b0:	f7fc fe76 	bl	808d3a0 <system_ctrl_set_result>
}
 80906b4:	b003      	add	sp, #12
 80906b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080906bc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80906bc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80906be:	8843      	ldrh	r3, [r0, #2]
 80906c0:	2b0a      	cmp	r3, #10
 80906c2:	d008      	beq.n	80906d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80906c4:	2b50      	cmp	r3, #80	; 0x50
 80906c6:	d10b      	bne.n	80906e0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80906c8:	4b09      	ldr	r3, [pc, #36]	; (80906f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80906ca:	681b      	ldr	r3, [r3, #0]
 80906cc:	b14b      	cbz	r3, 80906e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80906ce:	b003      	add	sp, #12
 80906d0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80906d4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80906d6:	f7ff ffe5 	bl	80906a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80906da:	b003      	add	sp, #12
 80906dc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80906e0:	2300      	movs	r3, #0
 80906e2:	461a      	mov	r2, r3
 80906e4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80906e8:	9300      	str	r3, [sp, #0]
 80906ea:	f7fc fe59 	bl	808d3a0 <system_ctrl_set_result>
}
 80906ee:	e7f4      	b.n	80906da <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80906f0:	20001a54 	.word	0x20001a54

080906f4 <module_user_init_hook>:
{
 80906f4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80906f6:	4c12      	ldr	r4, [pc, #72]	; (8090740 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80906f8:	2100      	movs	r1, #0
 80906fa:	4812      	ldr	r0, [pc, #72]	; (8090744 <module_user_init_hook+0x50>)
 80906fc:	f7fc ff5c 	bl	808d5b8 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8090700:	4d11      	ldr	r5, [pc, #68]	; (8090748 <module_user_init_hook+0x54>)
 8090702:	6823      	ldr	r3, [r4, #0]
 8090704:	42ab      	cmp	r3, r5
 8090706:	bf0c      	ite	eq
 8090708:	2201      	moveq	r2, #1
 809070a:	2200      	movne	r2, #0
 809070c:	4b0f      	ldr	r3, [pc, #60]	; (809074c <module_user_init_hook+0x58>)
 809070e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8090710:	d002      	beq.n	8090718 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 8090712:	f7ff ffbb 	bl	809068c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8090716:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8090718:	f7fc fc00 	bl	808cf1c <HAL_RNG_GetRandomNumber>
 809071c:	4604      	mov	r4, r0
    srand(seed);
 809071e:	f001 fbd9 	bl	8091ed4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8090722:	4b0b      	ldr	r3, [pc, #44]	; (8090750 <module_user_init_hook+0x5c>)
 8090724:	b113      	cbz	r3, 809072c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 8090726:	4620      	mov	r0, r4
 8090728:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 809072c:	2100      	movs	r1, #0
 809072e:	4808      	ldr	r0, [pc, #32]	; (8090750 <module_user_init_hook+0x5c>)
 8090730:	f7fc fe8a 	bl	808d448 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8090734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8090738:	2100      	movs	r1, #0
 809073a:	4806      	ldr	r0, [pc, #24]	; (8090754 <module_user_init_hook+0x60>)
 809073c:	f7fc be26 	b.w	808d38c <system_ctrl_set_app_request_handler>
 8090740:	40024000 	.word	0x40024000
 8090744:	080905f5 	.word	0x080905f5
 8090748:	9a271c1e 	.word	0x9a271c1e
 809074c:	20001a50 	.word	0x20001a50
 8090750:	00000000 	.word	0x00000000
 8090754:	080906bd 	.word	0x080906bd

08090758 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
 8090758:	b508      	push	{r3, lr}
 809075a:	4b02      	ldr	r3, [pc, #8]	; (8090764 <spark_protocol_instance+0xc>)
 809075c:	681b      	ldr	r3, [r3, #0]
 809075e:	681b      	ldr	r3, [r3, #0]
 8090760:	9301      	str	r3, [sp, #4]
 8090762:	bd08      	pop	{r3, pc}
 8090764:	0802019c 	.word	0x0802019c

08090768 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
 8090768:	b508      	push	{r3, lr}
 809076a:	4b02      	ldr	r3, [pc, #8]	; (8090774 <spark_protocol_set_product_id+0xc>)
 809076c:	681b      	ldr	r3, [r3, #0]
 809076e:	685b      	ldr	r3, [r3, #4]
 8090770:	9301      	str	r3, [sp, #4]
 8090772:	bd08      	pop	{r3, pc}
 8090774:	0802019c 	.word	0x0802019c

08090778 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
 8090778:	b508      	push	{r3, lr}
 809077a:	4b02      	ldr	r3, [pc, #8]	; (8090784 <spark_protocol_set_product_firmware_version+0xc>)
 809077c:	681b      	ldr	r3, [r3, #0]
 809077e:	689b      	ldr	r3, [r3, #8]
 8090780:	9301      	str	r3, [sp, #4]
 8090782:	bd08      	pop	{r3, pc}
 8090784:	0802019c 	.word	0x0802019c

08090788 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 8090788:	282e      	cmp	r0, #46	; 0x2e
bool pinAvailable(uint16_t pin) {
 809078a:	b570      	push	{r4, r5, r6, lr}
 809078c:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 809078e:	d901      	bls.n	8090794 <pinAvailable+0xc>
    return false;
 8090790:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 8090792:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 8090794:	f1a0 030d 	sub.w	r3, r0, #13
 8090798:	2b02      	cmp	r3, #2
 809079a:	d90b      	bls.n	80907b4 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 809079c:	2801      	cmp	r0, #1
 809079e:	d826      	bhi.n	80907ee <pinAvailable+0x66>
 80907a0:	f000 f8b4 	bl	809090c <_Z19__fetch_global_Wirev>
 80907a4:	2100      	movs	r1, #0
 80907a6:	7c00      	ldrb	r0, [r0, #16]
 80907a8:	f7fc fc80 	bl	808d0ac <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80907ac:	f080 0001 	eor.w	r0, r0, #1
 80907b0:	b2c0      	uxtb	r0, r0
 80907b2:	e7ee      	b.n	8090792 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80907b4:	4e13      	ldr	r6, [pc, #76]	; (8090804 <pinAvailable+0x7c>)
 80907b6:	7831      	ldrb	r1, [r6, #0]
 80907b8:	f3bf 8f5b 	dmb	ish
 80907bc:	f011 0501 	ands.w	r5, r1, #1
 80907c0:	d10f      	bne.n	80907e2 <pinAvailable+0x5a>
 80907c2:	4630      	mov	r0, r6
 80907c4:	f7ef fc7c 	bl	80800c0 <__cxa_guard_acquire>
 80907c8:	b158      	cbz	r0, 80907e2 <pinAvailable+0x5a>
 80907ca:	4629      	mov	r1, r5
 80907cc:	480e      	ldr	r0, [pc, #56]	; (8090808 <pinAvailable+0x80>)
 80907ce:	f7ff f8ee 	bl	808f9ae <_ZN8SPIClassC1E19hal_spi_interface_t>
 80907d2:	4630      	mov	r0, r6
 80907d4:	f7ef fc79 	bl	80800ca <__cxa_guard_release>
 80907d8:	4a0c      	ldr	r2, [pc, #48]	; (809080c <pinAvailable+0x84>)
 80907da:	490d      	ldr	r1, [pc, #52]	; (8090810 <pinAvailable+0x88>)
 80907dc:	480a      	ldr	r0, [pc, #40]	; (8090808 <pinAvailable+0x80>)
 80907de:	f000 f8fd 	bl	80909dc <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80907e2:	4b09      	ldr	r3, [pc, #36]	; (8090808 <pinAvailable+0x80>)
 80907e4:	7818      	ldrb	r0, [r3, #0]
 80907e6:	f7fc fca1 	bl	808d12c <hal_spi_is_enabled>
 80907ea:	2800      	cmp	r0, #0
 80907ec:	d1d0      	bne.n	8090790 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80907ee:	3c12      	subs	r4, #18
 80907f0:	2c01      	cmp	r4, #1
 80907f2:	d805      	bhi.n	8090800 <pinAvailable+0x78>
 80907f4:	f7ff fd6a 	bl	80902cc <_Z22__fetch_global_Serial1v>
 80907f8:	7c00      	ldrb	r0, [r0, #16]
 80907fa:	f7fc fcf7 	bl	808d1ec <hal_usart_is_enabled>
 80907fe:	e7d5      	b.n	80907ac <pinAvailable+0x24>
  return true; // 'pin' is available
 8090800:	2001      	movs	r0, #1
 8090802:	e7c6      	b.n	8090792 <pinAvailable+0xa>
 8090804:	200005b4 	.word	0x200005b4
 8090808:	200005b8 	.word	0x200005b8
 809080c:	200005b0 	.word	0x200005b0
 8090810:	080848f9 	.word	0x080848f9

08090814 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8090814:	282e      	cmp	r0, #46	; 0x2e
{
 8090816:	b538      	push	{r3, r4, r5, lr}
 8090818:	4604      	mov	r4, r0
 809081a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 809081c:	d80a      	bhi.n	8090834 <pinMode+0x20>
 809081e:	29ff      	cmp	r1, #255	; 0xff
 8090820:	d008      	beq.n	8090834 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 8090822:	f7ff ffb1 	bl	8090788 <pinAvailable>
 8090826:	b128      	cbz	r0, 8090834 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 8090828:	4629      	mov	r1, r5
 809082a:	4620      	mov	r0, r4
}
 809082c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 8090830:	f7fc bbc4 	b.w	808cfbc <HAL_Pin_Mode>
}
 8090834:	bd38      	pop	{r3, r4, r5, pc}

08090836 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8090836:	b538      	push	{r3, r4, r5, lr}
 8090838:	4604      	mov	r4, r0
 809083a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 809083c:	f7fc fbc6 	bl	808cfcc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8090840:	28ff      	cmp	r0, #255	; 0xff
 8090842:	d010      	beq.n	8090866 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 8090844:	2806      	cmp	r0, #6
 8090846:	d804      	bhi.n	8090852 <digitalWrite+0x1c>
 8090848:	234d      	movs	r3, #77	; 0x4d
 809084a:	fa23 f000 	lsr.w	r0, r3, r0
 809084e:	07c3      	lsls	r3, r0, #31
 8090850:	d409      	bmi.n	8090866 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8090852:	4620      	mov	r0, r4
 8090854:	f7ff ff98 	bl	8090788 <pinAvailable>
 8090858:	b128      	cbz	r0, 8090866 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 809085a:	4629      	mov	r1, r5
 809085c:	4620      	mov	r0, r4
}
 809085e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 8090862:	f7fc bbbb 	b.w	808cfdc <HAL_GPIO_Write>
}
 8090866:	bd38      	pop	{r3, r4, r5, pc}

08090868 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 8090868:	b510      	push	{r4, lr}
 809086a:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 809086c:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 809086e:	bf9c      	itt	ls
 8090870:	340a      	addls	r4, #10
 8090872:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8090874:	4620      	mov	r0, r4
 8090876:	f7ff ff87 	bl	8090788 <pinAvailable>
 809087a:	b150      	cbz	r0, 8090892 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 809087c:	2103      	movs	r1, #3
 809087e:	4620      	mov	r0, r4
 8090880:	f7fc fb94 	bl	808cfac <HAL_Validate_Pin_Function>
 8090884:	2803      	cmp	r0, #3
 8090886:	d104      	bne.n	8090892 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 8090888:	4620      	mov	r0, r4
}
 809088a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 809088e:	f7fc bbc5 	b.w	808d01c <hal_adc_read>
}
 8090892:	2000      	movs	r0, #0
 8090894:	bd10      	pop	{r4, pc}
	...

08090898 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 8090898:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 809089a:	4c08      	ldr	r4, [pc, #32]	; (80908bc <_Z21__fetch_global_EEPROMv+0x24>)
 809089c:	7823      	ldrb	r3, [r4, #0]
 809089e:	f3bf 8f5b 	dmb	ish
 80908a2:	07db      	lsls	r3, r3, #31
 80908a4:	d408      	bmi.n	80908b8 <_Z21__fetch_global_EEPROMv+0x20>
 80908a6:	4620      	mov	r0, r4
 80908a8:	f7ef fc0a 	bl	80800c0 <__cxa_guard_acquire>
 80908ac:	b120      	cbz	r0, 80908b8 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 80908ae:	f7fc fb4d 	bl	808cf4c <HAL_EEPROM_Init>
 80908b2:	4620      	mov	r0, r4
 80908b4:	f7ef fc09 	bl	80800ca <__cxa_guard_release>
	return eeprom;
}
 80908b8:	4801      	ldr	r0, [pc, #4]	; (80908c0 <_Z21__fetch_global_EEPROMv+0x28>)
 80908ba:	bd10      	pop	{r4, pc}
 80908bc:	20001a5c 	.word	0x20001a5c
 80908c0:	20001a60 	.word	0x20001a60

080908c4 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80908c4:	2300      	movs	r3, #0
hal_i2c_config_t defaultWireConfig() {
 80908c6:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80908c8:	2520      	movs	r5, #32
 80908ca:	8043      	strh	r3, [r0, #2]
 80908cc:	2314      	movs	r3, #20
		.size = sizeof(hal_i2c_config_t),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80908ce:	4e08      	ldr	r6, [pc, #32]	; (80908f0 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x2c>)
hal_i2c_config_t defaultWireConfig() {
 80908d0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80908d2:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80908d4:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80908d6:	6085      	str	r5, [r0, #8]
 80908d8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80908da:	4628      	mov	r0, r5
 80908dc:	f000 f887 	bl	80909ee <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80908e0:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80908e2:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80908e4:	4628      	mov	r0, r5
 80908e6:	f000 f882 	bl	80909ee <_ZnajRKSt9nothrow_t>
	};
 80908ea:	60e0      	str	r0, [r4, #12]

	return config;
}
 80908ec:	4620      	mov	r0, r4
 80908ee:	bd70      	pop	{r4, r5, r6, pc}
 80908f0:	080951e8 	.word	0x080951e8

080908f4 <_Z17acquireWireBufferv>:

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80908f4:	b510      	push	{r4, lr}
 80908f6:	4604      	mov	r4, r0
	return defaultWireConfig();
 80908f8:	f7ff ffe4 	bl	80908c4 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 80908fc:	4620      	mov	r0, r4
 80908fe:	bd10      	pop	{r4, pc}

08090900 <_Z18acquireWire3Bufferv>:
 8090900:	b510      	push	{r4, lr}
 8090902:	4604      	mov	r4, r0
 8090904:	f7ff ffde 	bl	80908c4 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
 8090908:	4620      	mov	r0, r4
 809090a:	bd10      	pop	{r4, pc}

0809090c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 809090c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 809090e:	4d0f      	ldr	r5, [pc, #60]	; (809094c <_Z19__fetch_global_Wirev+0x40>)
{
 8090910:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8090912:	7829      	ldrb	r1, [r5, #0]
 8090914:	f3bf 8f5b 	dmb	ish
 8090918:	f011 0401 	ands.w	r4, r1, #1
 809091c:	d113      	bne.n	8090946 <_Z19__fetch_global_Wirev+0x3a>
 809091e:	4628      	mov	r0, r5
 8090920:	f7ef fbce 	bl	80800c0 <__cxa_guard_acquire>
 8090924:	b178      	cbz	r0, 8090946 <_Z19__fetch_global_Wirev+0x3a>
 8090926:	a801      	add	r0, sp, #4
 8090928:	f7ff ffe4 	bl	80908f4 <_Z17acquireWireBufferv>
 809092c:	4621      	mov	r1, r4
 809092e:	aa01      	add	r2, sp, #4
 8090930:	4807      	ldr	r0, [pc, #28]	; (8090950 <_Z19__fetch_global_Wirev+0x44>)
 8090932:	f7fd fb6f 	bl	808e014 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 8090936:	4628      	mov	r0, r5
 8090938:	f7ef fbc7 	bl	80800ca <__cxa_guard_release>
 809093c:	4a05      	ldr	r2, [pc, #20]	; (8090954 <_Z19__fetch_global_Wirev+0x48>)
 809093e:	4906      	ldr	r1, [pc, #24]	; (8090958 <_Z19__fetch_global_Wirev+0x4c>)
 8090940:	4803      	ldr	r0, [pc, #12]	; (8090950 <_Z19__fetch_global_Wirev+0x44>)
 8090942:	f000 f84b 	bl	80909dc <__aeabi_atexit>
	return wire;
}
 8090946:	4802      	ldr	r0, [pc, #8]	; (8090950 <_Z19__fetch_global_Wirev+0x44>)
 8090948:	b007      	add	sp, #28
 809094a:	bd30      	pop	{r4, r5, pc}
 809094c:	20001a64 	.word	0x20001a64
 8090950:	20001a6c 	.word	0x20001a6c
 8090954:	200005b0 	.word	0x200005b0
 8090958:	0808dfbd 	.word	0x0808dfbd

0809095c <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 809095c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 809095e:	4c0f      	ldr	r4, [pc, #60]	; (809099c <_Z20__fetch_global_Wire3v+0x40>)
{
 8090960:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 8090962:	7823      	ldrb	r3, [r4, #0]
 8090964:	f3bf 8f5b 	dmb	ish
 8090968:	07db      	lsls	r3, r3, #31
 809096a:	d413      	bmi.n	8090994 <_Z20__fetch_global_Wire3v+0x38>
 809096c:	4620      	mov	r0, r4
 809096e:	f7ef fba7 	bl	80800c0 <__cxa_guard_acquire>
 8090972:	b178      	cbz	r0, 8090994 <_Z20__fetch_global_Wire3v+0x38>
 8090974:	a801      	add	r0, sp, #4
 8090976:	f7ff ffc3 	bl	8090900 <_Z18acquireWire3Bufferv>
 809097a:	2102      	movs	r1, #2
 809097c:	aa01      	add	r2, sp, #4
 809097e:	4808      	ldr	r0, [pc, #32]	; (80909a0 <_Z20__fetch_global_Wire3v+0x44>)
 8090980:	f7fd fb48 	bl	808e014 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 8090984:	4620      	mov	r0, r4
 8090986:	f7ef fba0 	bl	80800ca <__cxa_guard_release>
 809098a:	4a06      	ldr	r2, [pc, #24]	; (80909a4 <_Z20__fetch_global_Wire3v+0x48>)
 809098c:	4906      	ldr	r1, [pc, #24]	; (80909a8 <_Z20__fetch_global_Wire3v+0x4c>)
 809098e:	4804      	ldr	r0, [pc, #16]	; (80909a0 <_Z20__fetch_global_Wire3v+0x44>)
 8090990:	f000 f824 	bl	80909dc <__aeabi_atexit>
	return wire;
}
 8090994:	4802      	ldr	r0, [pc, #8]	; (80909a0 <_Z20__fetch_global_Wire3v+0x44>)
 8090996:	b006      	add	sp, #24
 8090998:	bd10      	pop	{r4, pc}
 809099a:	bf00      	nop
 809099c:	20001a68 	.word	0x20001a68
 80909a0:	20001a80 	.word	0x20001a80
 80909a4:	200005b0 	.word	0x200005b0
 80909a8:	0808dfbd 	.word	0x0808dfbd

080909ac <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80909ac:	2300      	movs	r3, #0
 80909ae:	b513      	push	{r0, r1, r4, lr}
 80909b0:	4c07      	ldr	r4, [pc, #28]	; (80909d0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80909b2:	461a      	mov	r2, r3
 80909b4:	4619      	mov	r1, r3
 80909b6:	4620      	mov	r0, r4
 80909b8:	9300      	str	r3, [sp, #0]
 80909ba:	f7fd fc1b 	bl	808e1f4 <_ZN9IPAddressC1Ehhhh>
 80909be:	4620      	mov	r0, r4
 80909c0:	4a04      	ldr	r2, [pc, #16]	; (80909d4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80909c2:	4905      	ldr	r1, [pc, #20]	; (80909d8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80909c4:	b002      	add	sp, #8
 80909c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80909ca:	f000 b807 	b.w	80909dc <__aeabi_atexit>
 80909ce:	bf00      	nop
 80909d0:	20001a94 	.word	0x20001a94
 80909d4:	200005b0 	.word	0x200005b0
 80909d8:	0808e16d 	.word	0x0808e16d

080909dc <__aeabi_atexit>:
 80909dc:	460b      	mov	r3, r1
 80909de:	4601      	mov	r1, r0
 80909e0:	4618      	mov	r0, r3
 80909e2:	f001 ba25 	b.w	8091e30 <__cxa_atexit>

080909e6 <_ZdlPvj>:
 80909e6:	f7ef bb5c 	b.w	80800a2 <_ZdlPv>

080909ea <_ZnwjRKSt9nothrow_t>:
 80909ea:	f7ef bb56 	b.w	808009a <_Znwj>

080909ee <_ZnajRKSt9nothrow_t>:
 80909ee:	f7ef bb56 	b.w	808009e <_Znaj>

080909f2 <_ZSt25__throw_bad_function_callv>:
 80909f2:	b508      	push	{r3, lr}
 80909f4:	f7fc fdc8 	bl	808d588 <abort>

080909f8 <sqrtf>:
 80909f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80909fa:	b08b      	sub	sp, #44	; 0x2c
 80909fc:	4604      	mov	r4, r0
 80909fe:	f000 f84d 	bl	8090a9c <__ieee754_sqrtf>
 8090a02:	4b24      	ldr	r3, [pc, #144]	; (8090a94 <sqrtf+0x9c>)
 8090a04:	4605      	mov	r5, r0
 8090a06:	f993 7000 	ldrsb.w	r7, [r3]
 8090a0a:	1c7b      	adds	r3, r7, #1
 8090a0c:	d00a      	beq.n	8090a24 <sqrtf+0x2c>
 8090a0e:	4621      	mov	r1, r4
 8090a10:	4620      	mov	r0, r4
 8090a12:	f001 f833 	bl	8091a7c <__aeabi_fcmpun>
 8090a16:	4606      	mov	r6, r0
 8090a18:	b920      	cbnz	r0, 8090a24 <sqrtf+0x2c>
 8090a1a:	2100      	movs	r1, #0
 8090a1c:	4620      	mov	r0, r4
 8090a1e:	f001 f805 	bl	8091a2c <__aeabi_fcmplt>
 8090a22:	b910      	cbnz	r0, 8090a2a <sqrtf+0x32>
 8090a24:	4628      	mov	r0, r5
 8090a26:	b00b      	add	sp, #44	; 0x2c
 8090a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8090a2a:	2201      	movs	r2, #1
 8090a2c:	4b1a      	ldr	r3, [pc, #104]	; (8090a98 <sqrtf+0xa0>)
 8090a2e:	4620      	mov	r0, r4
 8090a30:	e9cd 2300 	strd	r2, r3, [sp]
 8090a34:	9608      	str	r6, [sp, #32]
 8090a36:	f000 f9eb 	bl	8090e10 <__aeabi_f2d>
 8090a3a:	2200      	movs	r2, #0
 8090a3c:	2300      	movs	r3, #0
 8090a3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8090a42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8090a46:	b1af      	cbz	r7, 8090a74 <sqrtf+0x7c>
 8090a48:	4610      	mov	r0, r2
 8090a4a:	4619      	mov	r1, r3
 8090a4c:	f000 fb62 	bl	8091114 <__aeabi_ddiv>
 8090a50:	2f02      	cmp	r7, #2
 8090a52:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8090a56:	d10f      	bne.n	8090a78 <sqrtf+0x80>
 8090a58:	f7fc fda6 	bl	808d5a8 <__errno>
 8090a5c:	2321      	movs	r3, #33	; 0x21
 8090a5e:	6003      	str	r3, [r0, #0]
 8090a60:	9b08      	ldr	r3, [sp, #32]
 8090a62:	b98b      	cbnz	r3, 8090a88 <sqrtf+0x90>
 8090a64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8090a68:	f000 fce4 	bl	8091434 <__aeabi_d2f>
 8090a6c:	4605      	mov	r5, r0
 8090a6e:	4628      	mov	r0, r5
 8090a70:	b00b      	add	sp, #44	; 0x2c
 8090a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8090a74:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8090a78:	4668      	mov	r0, sp
 8090a7a:	f000 f863 	bl	8090b44 <matherr>
 8090a7e:	2800      	cmp	r0, #0
 8090a80:	d0ea      	beq.n	8090a58 <sqrtf+0x60>
 8090a82:	9b08      	ldr	r3, [sp, #32]
 8090a84:	2b00      	cmp	r3, #0
 8090a86:	d0ed      	beq.n	8090a64 <sqrtf+0x6c>
 8090a88:	f7fc fd8e 	bl	808d5a8 <__errno>
 8090a8c:	9b08      	ldr	r3, [sp, #32]
 8090a8e:	6003      	str	r3, [r0, #0]
 8090a90:	e7e8      	b.n	8090a64 <sqrtf+0x6c>
 8090a92:	bf00      	nop
 8090a94:	20000548 	.word	0x20000548
 8090a98:	080951ec 	.word	0x080951ec

08090a9c <__ieee754_sqrtf>:
 8090a9c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8090aa0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8090aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8090aa6:	4604      	mov	r4, r0
 8090aa8:	d22f      	bcs.n	8090b0a <__ieee754_sqrtf+0x6e>
 8090aaa:	b36a      	cbz	r2, 8090b08 <__ieee754_sqrtf+0x6c>
 8090aac:	2800      	cmp	r0, #0
 8090aae:	4603      	mov	r3, r0
 8090ab0:	db3d      	blt.n	8090b2e <__ieee754_sqrtf+0x92>
 8090ab2:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8090ab6:	ea4f 54e0 	mov.w	r4, r0, asr #23
 8090aba:	d02d      	beq.n	8090b18 <__ieee754_sqrtf+0x7c>
 8090abc:	2600      	movs	r6, #0
 8090abe:	07e2      	lsls	r2, r4, #31
 8090ac0:	f1a4 007f 	sub.w	r0, r4, #127	; 0x7f
 8090ac4:	4631      	mov	r1, r6
 8090ac6:	f04f 0419 	mov.w	r4, #25
 8090aca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8090ace:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8090ad2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8090ad6:	bf58      	it	pl
 8090ad8:	005b      	lslpl	r3, r3, #1
 8090ada:	1047      	asrs	r7, r0, #1
 8090adc:	005b      	lsls	r3, r3, #1
 8090ade:	188d      	adds	r5, r1, r2
 8090ae0:	429d      	cmp	r5, r3
 8090ae2:	dc02      	bgt.n	8090aea <__ieee754_sqrtf+0x4e>
 8090ae4:	1b5b      	subs	r3, r3, r5
 8090ae6:	18a9      	adds	r1, r5, r2
 8090ae8:	4416      	add	r6, r2
 8090aea:	3c01      	subs	r4, #1
 8090aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8090af0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8090af4:	d1f3      	bne.n	8090ade <__ieee754_sqrtf+0x42>
 8090af6:	b113      	cbz	r3, 8090afe <__ieee754_sqrtf+0x62>
 8090af8:	3601      	adds	r6, #1
 8090afa:	f026 0601 	bic.w	r6, r6, #1
 8090afe:	1070      	asrs	r0, r6, #1
 8090b00:	f100 507c 	add.w	r0, r0, #1056964608	; 0x3f000000
 8090b04:	eb00 50c7 	add.w	r0, r0, r7, lsl #23
 8090b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8090b0a:	4601      	mov	r1, r0
 8090b0c:	f000 fdf0 	bl	80916f0 <__aeabi_fmul>
 8090b10:	4621      	mov	r1, r4
 8090b12:	f000 fce5 	bl	80914e0 <__addsf3>
 8090b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8090b18:	f410 0200 	ands.w	r2, r0, #8388608	; 0x800000
 8090b1c:	d10e      	bne.n	8090b3c <__ieee754_sqrtf+0xa0>
 8090b1e:	005b      	lsls	r3, r3, #1
 8090b20:	0218      	lsls	r0, r3, #8
 8090b22:	4611      	mov	r1, r2
 8090b24:	f102 0201 	add.w	r2, r2, #1
 8090b28:	d5f9      	bpl.n	8090b1e <__ieee754_sqrtf+0x82>
 8090b2a:	1a64      	subs	r4, r4, r1
 8090b2c:	e7c6      	b.n	8090abc <__ieee754_sqrtf+0x20>
 8090b2e:	4601      	mov	r1, r0
 8090b30:	f000 fcd4 	bl	80914dc <__aeabi_fsub>
 8090b34:	4601      	mov	r1, r0
 8090b36:	f000 fe8f 	bl	8091858 <__aeabi_fdiv>
 8090b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8090b3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8090b40:	e7f3      	b.n	8090b2a <__ieee754_sqrtf+0x8e>
 8090b42:	bf00      	nop

08090b44 <matherr>:
 8090b44:	2000      	movs	r0, #0
 8090b46:	4770      	bx	lr

08090b48 <__aeabi_drsub>:
 8090b48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8090b4c:	e002      	b.n	8090b54 <__adddf3>
 8090b4e:	bf00      	nop

08090b50 <__aeabi_dsub>:
 8090b50:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08090b54 <__adddf3>:
 8090b54:	b530      	push	{r4, r5, lr}
 8090b56:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8090b5a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8090b5e:	ea94 0f05 	teq	r4, r5
 8090b62:	bf08      	it	eq
 8090b64:	ea90 0f02 	teqeq	r0, r2
 8090b68:	bf1f      	itttt	ne
 8090b6a:	ea54 0c00 	orrsne.w	ip, r4, r0
 8090b6e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8090b72:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8090b76:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8090b7a:	f000 80e2 	beq.w	8090d42 <__adddf3+0x1ee>
 8090b7e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8090b82:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8090b86:	bfb8      	it	lt
 8090b88:	426d      	neglt	r5, r5
 8090b8a:	dd0c      	ble.n	8090ba6 <__adddf3+0x52>
 8090b8c:	442c      	add	r4, r5
 8090b8e:	ea80 0202 	eor.w	r2, r0, r2
 8090b92:	ea81 0303 	eor.w	r3, r1, r3
 8090b96:	ea82 0000 	eor.w	r0, r2, r0
 8090b9a:	ea83 0101 	eor.w	r1, r3, r1
 8090b9e:	ea80 0202 	eor.w	r2, r0, r2
 8090ba2:	ea81 0303 	eor.w	r3, r1, r3
 8090ba6:	2d36      	cmp	r5, #54	; 0x36
 8090ba8:	bf88      	it	hi
 8090baa:	bd30      	pophi	{r4, r5, pc}
 8090bac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8090bb0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8090bb4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8090bb8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8090bbc:	d002      	beq.n	8090bc4 <__adddf3+0x70>
 8090bbe:	4240      	negs	r0, r0
 8090bc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8090bc4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8090bc8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8090bcc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8090bd0:	d002      	beq.n	8090bd8 <__adddf3+0x84>
 8090bd2:	4252      	negs	r2, r2
 8090bd4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8090bd8:	ea94 0f05 	teq	r4, r5
 8090bdc:	f000 80a7 	beq.w	8090d2e <__adddf3+0x1da>
 8090be0:	f1a4 0401 	sub.w	r4, r4, #1
 8090be4:	f1d5 0e20 	rsbs	lr, r5, #32
 8090be8:	db0d      	blt.n	8090c06 <__adddf3+0xb2>
 8090bea:	fa02 fc0e 	lsl.w	ip, r2, lr
 8090bee:	fa22 f205 	lsr.w	r2, r2, r5
 8090bf2:	1880      	adds	r0, r0, r2
 8090bf4:	f141 0100 	adc.w	r1, r1, #0
 8090bf8:	fa03 f20e 	lsl.w	r2, r3, lr
 8090bfc:	1880      	adds	r0, r0, r2
 8090bfe:	fa43 f305 	asr.w	r3, r3, r5
 8090c02:	4159      	adcs	r1, r3
 8090c04:	e00e      	b.n	8090c24 <__adddf3+0xd0>
 8090c06:	f1a5 0520 	sub.w	r5, r5, #32
 8090c0a:	f10e 0e20 	add.w	lr, lr, #32
 8090c0e:	2a01      	cmp	r2, #1
 8090c10:	fa03 fc0e 	lsl.w	ip, r3, lr
 8090c14:	bf28      	it	cs
 8090c16:	f04c 0c02 	orrcs.w	ip, ip, #2
 8090c1a:	fa43 f305 	asr.w	r3, r3, r5
 8090c1e:	18c0      	adds	r0, r0, r3
 8090c20:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8090c24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8090c28:	d507      	bpl.n	8090c3a <__adddf3+0xe6>
 8090c2a:	f04f 0e00 	mov.w	lr, #0
 8090c2e:	f1dc 0c00 	rsbs	ip, ip, #0
 8090c32:	eb7e 0000 	sbcs.w	r0, lr, r0
 8090c36:	eb6e 0101 	sbc.w	r1, lr, r1
 8090c3a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8090c3e:	d31b      	bcc.n	8090c78 <__adddf3+0x124>
 8090c40:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8090c44:	d30c      	bcc.n	8090c60 <__adddf3+0x10c>
 8090c46:	0849      	lsrs	r1, r1, #1
 8090c48:	ea5f 0030 	movs.w	r0, r0, rrx
 8090c4c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8090c50:	f104 0401 	add.w	r4, r4, #1
 8090c54:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8090c58:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8090c5c:	f080 809a 	bcs.w	8090d94 <__adddf3+0x240>
 8090c60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8090c64:	bf08      	it	eq
 8090c66:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8090c6a:	f150 0000 	adcs.w	r0, r0, #0
 8090c6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8090c72:	ea41 0105 	orr.w	r1, r1, r5
 8090c76:	bd30      	pop	{r4, r5, pc}
 8090c78:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8090c7c:	4140      	adcs	r0, r0
 8090c7e:	eb41 0101 	adc.w	r1, r1, r1
 8090c82:	3c01      	subs	r4, #1
 8090c84:	bf28      	it	cs
 8090c86:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8090c8a:	d2e9      	bcs.n	8090c60 <__adddf3+0x10c>
 8090c8c:	f091 0f00 	teq	r1, #0
 8090c90:	bf04      	itt	eq
 8090c92:	4601      	moveq	r1, r0
 8090c94:	2000      	moveq	r0, #0
 8090c96:	fab1 f381 	clz	r3, r1
 8090c9a:	bf08      	it	eq
 8090c9c:	3320      	addeq	r3, #32
 8090c9e:	f1a3 030b 	sub.w	r3, r3, #11
 8090ca2:	f1b3 0220 	subs.w	r2, r3, #32
 8090ca6:	da0c      	bge.n	8090cc2 <__adddf3+0x16e>
 8090ca8:	320c      	adds	r2, #12
 8090caa:	dd08      	ble.n	8090cbe <__adddf3+0x16a>
 8090cac:	f102 0c14 	add.w	ip, r2, #20
 8090cb0:	f1c2 020c 	rsb	r2, r2, #12
 8090cb4:	fa01 f00c 	lsl.w	r0, r1, ip
 8090cb8:	fa21 f102 	lsr.w	r1, r1, r2
 8090cbc:	e00c      	b.n	8090cd8 <__adddf3+0x184>
 8090cbe:	f102 0214 	add.w	r2, r2, #20
 8090cc2:	bfd8      	it	le
 8090cc4:	f1c2 0c20 	rsble	ip, r2, #32
 8090cc8:	fa01 f102 	lsl.w	r1, r1, r2
 8090ccc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8090cd0:	bfdc      	itt	le
 8090cd2:	ea41 010c 	orrle.w	r1, r1, ip
 8090cd6:	4090      	lslle	r0, r2
 8090cd8:	1ae4      	subs	r4, r4, r3
 8090cda:	bfa2      	ittt	ge
 8090cdc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8090ce0:	4329      	orrge	r1, r5
 8090ce2:	bd30      	popge	{r4, r5, pc}
 8090ce4:	ea6f 0404 	mvn.w	r4, r4
 8090ce8:	3c1f      	subs	r4, #31
 8090cea:	da1c      	bge.n	8090d26 <__adddf3+0x1d2>
 8090cec:	340c      	adds	r4, #12
 8090cee:	dc0e      	bgt.n	8090d0e <__adddf3+0x1ba>
 8090cf0:	f104 0414 	add.w	r4, r4, #20
 8090cf4:	f1c4 0220 	rsb	r2, r4, #32
 8090cf8:	fa20 f004 	lsr.w	r0, r0, r4
 8090cfc:	fa01 f302 	lsl.w	r3, r1, r2
 8090d00:	ea40 0003 	orr.w	r0, r0, r3
 8090d04:	fa21 f304 	lsr.w	r3, r1, r4
 8090d08:	ea45 0103 	orr.w	r1, r5, r3
 8090d0c:	bd30      	pop	{r4, r5, pc}
 8090d0e:	f1c4 040c 	rsb	r4, r4, #12
 8090d12:	f1c4 0220 	rsb	r2, r4, #32
 8090d16:	fa20 f002 	lsr.w	r0, r0, r2
 8090d1a:	fa01 f304 	lsl.w	r3, r1, r4
 8090d1e:	ea40 0003 	orr.w	r0, r0, r3
 8090d22:	4629      	mov	r1, r5
 8090d24:	bd30      	pop	{r4, r5, pc}
 8090d26:	fa21 f004 	lsr.w	r0, r1, r4
 8090d2a:	4629      	mov	r1, r5
 8090d2c:	bd30      	pop	{r4, r5, pc}
 8090d2e:	f094 0f00 	teq	r4, #0
 8090d32:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8090d36:	bf06      	itte	eq
 8090d38:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8090d3c:	3401      	addeq	r4, #1
 8090d3e:	3d01      	subne	r5, #1
 8090d40:	e74e      	b.n	8090be0 <__adddf3+0x8c>
 8090d42:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8090d46:	bf18      	it	ne
 8090d48:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8090d4c:	d029      	beq.n	8090da2 <__adddf3+0x24e>
 8090d4e:	ea94 0f05 	teq	r4, r5
 8090d52:	bf08      	it	eq
 8090d54:	ea90 0f02 	teqeq	r0, r2
 8090d58:	d005      	beq.n	8090d66 <__adddf3+0x212>
 8090d5a:	ea54 0c00 	orrs.w	ip, r4, r0
 8090d5e:	bf04      	itt	eq
 8090d60:	4619      	moveq	r1, r3
 8090d62:	4610      	moveq	r0, r2
 8090d64:	bd30      	pop	{r4, r5, pc}
 8090d66:	ea91 0f03 	teq	r1, r3
 8090d6a:	bf1e      	ittt	ne
 8090d6c:	2100      	movne	r1, #0
 8090d6e:	2000      	movne	r0, #0
 8090d70:	bd30      	popne	{r4, r5, pc}
 8090d72:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8090d76:	d105      	bne.n	8090d84 <__adddf3+0x230>
 8090d78:	0040      	lsls	r0, r0, #1
 8090d7a:	4149      	adcs	r1, r1
 8090d7c:	bf28      	it	cs
 8090d7e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8090d82:	bd30      	pop	{r4, r5, pc}
 8090d84:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8090d88:	bf3c      	itt	cc
 8090d8a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8090d8e:	bd30      	popcc	{r4, r5, pc}
 8090d90:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8090d94:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8090d98:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8090d9c:	f04f 0000 	mov.w	r0, #0
 8090da0:	bd30      	pop	{r4, r5, pc}
 8090da2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8090da6:	bf1a      	itte	ne
 8090da8:	4619      	movne	r1, r3
 8090daa:	4610      	movne	r0, r2
 8090dac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8090db0:	bf1c      	itt	ne
 8090db2:	460b      	movne	r3, r1
 8090db4:	4602      	movne	r2, r0
 8090db6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8090dba:	bf06      	itte	eq
 8090dbc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8090dc0:	ea91 0f03 	teqeq	r1, r3
 8090dc4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8090dc8:	bd30      	pop	{r4, r5, pc}
 8090dca:	bf00      	nop

08090dcc <__aeabi_ui2d>:
 8090dcc:	f090 0f00 	teq	r0, #0
 8090dd0:	bf04      	itt	eq
 8090dd2:	2100      	moveq	r1, #0
 8090dd4:	4770      	bxeq	lr
 8090dd6:	b530      	push	{r4, r5, lr}
 8090dd8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8090ddc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8090de0:	f04f 0500 	mov.w	r5, #0
 8090de4:	f04f 0100 	mov.w	r1, #0
 8090de8:	e750      	b.n	8090c8c <__adddf3+0x138>
 8090dea:	bf00      	nop

08090dec <__aeabi_i2d>:
 8090dec:	f090 0f00 	teq	r0, #0
 8090df0:	bf04      	itt	eq
 8090df2:	2100      	moveq	r1, #0
 8090df4:	4770      	bxeq	lr
 8090df6:	b530      	push	{r4, r5, lr}
 8090df8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8090dfc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8090e00:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8090e04:	bf48      	it	mi
 8090e06:	4240      	negmi	r0, r0
 8090e08:	f04f 0100 	mov.w	r1, #0
 8090e0c:	e73e      	b.n	8090c8c <__adddf3+0x138>
 8090e0e:	bf00      	nop

08090e10 <__aeabi_f2d>:
 8090e10:	0042      	lsls	r2, r0, #1
 8090e12:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8090e16:	ea4f 0131 	mov.w	r1, r1, rrx
 8090e1a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8090e1e:	bf1f      	itttt	ne
 8090e20:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8090e24:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8090e28:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8090e2c:	4770      	bxne	lr
 8090e2e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8090e32:	bf08      	it	eq
 8090e34:	4770      	bxeq	lr
 8090e36:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8090e3a:	bf04      	itt	eq
 8090e3c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8090e40:	4770      	bxeq	lr
 8090e42:	b530      	push	{r4, r5, lr}
 8090e44:	f44f 7460 	mov.w	r4, #896	; 0x380
 8090e48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8090e4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8090e50:	e71c      	b.n	8090c8c <__adddf3+0x138>
 8090e52:	bf00      	nop

08090e54 <__aeabi_ul2d>:
 8090e54:	ea50 0201 	orrs.w	r2, r0, r1
 8090e58:	bf08      	it	eq
 8090e5a:	4770      	bxeq	lr
 8090e5c:	b530      	push	{r4, r5, lr}
 8090e5e:	f04f 0500 	mov.w	r5, #0
 8090e62:	e00a      	b.n	8090e7a <__aeabi_l2d+0x16>

08090e64 <__aeabi_l2d>:
 8090e64:	ea50 0201 	orrs.w	r2, r0, r1
 8090e68:	bf08      	it	eq
 8090e6a:	4770      	bxeq	lr
 8090e6c:	b530      	push	{r4, r5, lr}
 8090e6e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8090e72:	d502      	bpl.n	8090e7a <__aeabi_l2d+0x16>
 8090e74:	4240      	negs	r0, r0
 8090e76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8090e7a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8090e7e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8090e82:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8090e86:	f43f aed8 	beq.w	8090c3a <__adddf3+0xe6>
 8090e8a:	f04f 0203 	mov.w	r2, #3
 8090e8e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8090e92:	bf18      	it	ne
 8090e94:	3203      	addne	r2, #3
 8090e96:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8090e9a:	bf18      	it	ne
 8090e9c:	3203      	addne	r2, #3
 8090e9e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8090ea2:	f1c2 0320 	rsb	r3, r2, #32
 8090ea6:	fa00 fc03 	lsl.w	ip, r0, r3
 8090eaa:	fa20 f002 	lsr.w	r0, r0, r2
 8090eae:	fa01 fe03 	lsl.w	lr, r1, r3
 8090eb2:	ea40 000e 	orr.w	r0, r0, lr
 8090eb6:	fa21 f102 	lsr.w	r1, r1, r2
 8090eba:	4414      	add	r4, r2
 8090ebc:	e6bd      	b.n	8090c3a <__adddf3+0xe6>
 8090ebe:	bf00      	nop

08090ec0 <__aeabi_dmul>:
 8090ec0:	b570      	push	{r4, r5, r6, lr}
 8090ec2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8090ec6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8090eca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8090ece:	bf1d      	ittte	ne
 8090ed0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8090ed4:	ea94 0f0c 	teqne	r4, ip
 8090ed8:	ea95 0f0c 	teqne	r5, ip
 8090edc:	f000 f8de 	bleq	809109c <__aeabi_dmul+0x1dc>
 8090ee0:	442c      	add	r4, r5
 8090ee2:	ea81 0603 	eor.w	r6, r1, r3
 8090ee6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8090eea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8090eee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8090ef2:	bf18      	it	ne
 8090ef4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8090ef8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8090efc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8090f00:	d038      	beq.n	8090f74 <__aeabi_dmul+0xb4>
 8090f02:	fba0 ce02 	umull	ip, lr, r0, r2
 8090f06:	f04f 0500 	mov.w	r5, #0
 8090f0a:	fbe1 e502 	umlal	lr, r5, r1, r2
 8090f0e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8090f12:	fbe0 e503 	umlal	lr, r5, r0, r3
 8090f16:	f04f 0600 	mov.w	r6, #0
 8090f1a:	fbe1 5603 	umlal	r5, r6, r1, r3
 8090f1e:	f09c 0f00 	teq	ip, #0
 8090f22:	bf18      	it	ne
 8090f24:	f04e 0e01 	orrne.w	lr, lr, #1
 8090f28:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8090f2c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8090f30:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8090f34:	d204      	bcs.n	8090f40 <__aeabi_dmul+0x80>
 8090f36:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8090f3a:	416d      	adcs	r5, r5
 8090f3c:	eb46 0606 	adc.w	r6, r6, r6
 8090f40:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8090f44:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8090f48:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8090f4c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8090f50:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8090f54:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8090f58:	bf88      	it	hi
 8090f5a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8090f5e:	d81e      	bhi.n	8090f9e <__aeabi_dmul+0xde>
 8090f60:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8090f64:	bf08      	it	eq
 8090f66:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8090f6a:	f150 0000 	adcs.w	r0, r0, #0
 8090f6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8090f72:	bd70      	pop	{r4, r5, r6, pc}
 8090f74:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8090f78:	ea46 0101 	orr.w	r1, r6, r1
 8090f7c:	ea40 0002 	orr.w	r0, r0, r2
 8090f80:	ea81 0103 	eor.w	r1, r1, r3
 8090f84:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8090f88:	bfc2      	ittt	gt
 8090f8a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8090f8e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8090f92:	bd70      	popgt	{r4, r5, r6, pc}
 8090f94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8090f98:	f04f 0e00 	mov.w	lr, #0
 8090f9c:	3c01      	subs	r4, #1
 8090f9e:	f300 80ab 	bgt.w	80910f8 <__aeabi_dmul+0x238>
 8090fa2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8090fa6:	bfde      	ittt	le
 8090fa8:	2000      	movle	r0, #0
 8090faa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8090fae:	bd70      	pople	{r4, r5, r6, pc}
 8090fb0:	f1c4 0400 	rsb	r4, r4, #0
 8090fb4:	3c20      	subs	r4, #32
 8090fb6:	da35      	bge.n	8091024 <__aeabi_dmul+0x164>
 8090fb8:	340c      	adds	r4, #12
 8090fba:	dc1b      	bgt.n	8090ff4 <__aeabi_dmul+0x134>
 8090fbc:	f104 0414 	add.w	r4, r4, #20
 8090fc0:	f1c4 0520 	rsb	r5, r4, #32
 8090fc4:	fa00 f305 	lsl.w	r3, r0, r5
 8090fc8:	fa20 f004 	lsr.w	r0, r0, r4
 8090fcc:	fa01 f205 	lsl.w	r2, r1, r5
 8090fd0:	ea40 0002 	orr.w	r0, r0, r2
 8090fd4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8090fd8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8090fdc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8090fe0:	fa21 f604 	lsr.w	r6, r1, r4
 8090fe4:	eb42 0106 	adc.w	r1, r2, r6
 8090fe8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8090fec:	bf08      	it	eq
 8090fee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8090ff2:	bd70      	pop	{r4, r5, r6, pc}
 8090ff4:	f1c4 040c 	rsb	r4, r4, #12
 8090ff8:	f1c4 0520 	rsb	r5, r4, #32
 8090ffc:	fa00 f304 	lsl.w	r3, r0, r4
 8091000:	fa20 f005 	lsr.w	r0, r0, r5
 8091004:	fa01 f204 	lsl.w	r2, r1, r4
 8091008:	ea40 0002 	orr.w	r0, r0, r2
 809100c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8091010:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8091014:	f141 0100 	adc.w	r1, r1, #0
 8091018:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 809101c:	bf08      	it	eq
 809101e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8091022:	bd70      	pop	{r4, r5, r6, pc}
 8091024:	f1c4 0520 	rsb	r5, r4, #32
 8091028:	fa00 f205 	lsl.w	r2, r0, r5
 809102c:	ea4e 0e02 	orr.w	lr, lr, r2
 8091030:	fa20 f304 	lsr.w	r3, r0, r4
 8091034:	fa01 f205 	lsl.w	r2, r1, r5
 8091038:	ea43 0302 	orr.w	r3, r3, r2
 809103c:	fa21 f004 	lsr.w	r0, r1, r4
 8091040:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8091044:	fa21 f204 	lsr.w	r2, r1, r4
 8091048:	ea20 0002 	bic.w	r0, r0, r2
 809104c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8091050:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8091054:	bf08      	it	eq
 8091056:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 809105a:	bd70      	pop	{r4, r5, r6, pc}
 809105c:	f094 0f00 	teq	r4, #0
 8091060:	d10f      	bne.n	8091082 <__aeabi_dmul+0x1c2>
 8091062:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8091066:	0040      	lsls	r0, r0, #1
 8091068:	eb41 0101 	adc.w	r1, r1, r1
 809106c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8091070:	bf08      	it	eq
 8091072:	3c01      	subeq	r4, #1
 8091074:	d0f7      	beq.n	8091066 <__aeabi_dmul+0x1a6>
 8091076:	ea41 0106 	orr.w	r1, r1, r6
 809107a:	f095 0f00 	teq	r5, #0
 809107e:	bf18      	it	ne
 8091080:	4770      	bxne	lr
 8091082:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8091086:	0052      	lsls	r2, r2, #1
 8091088:	eb43 0303 	adc.w	r3, r3, r3
 809108c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8091090:	bf08      	it	eq
 8091092:	3d01      	subeq	r5, #1
 8091094:	d0f7      	beq.n	8091086 <__aeabi_dmul+0x1c6>
 8091096:	ea43 0306 	orr.w	r3, r3, r6
 809109a:	4770      	bx	lr
 809109c:	ea94 0f0c 	teq	r4, ip
 80910a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80910a4:	bf18      	it	ne
 80910a6:	ea95 0f0c 	teqne	r5, ip
 80910aa:	d00c      	beq.n	80910c6 <__aeabi_dmul+0x206>
 80910ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80910b0:	bf18      	it	ne
 80910b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80910b6:	d1d1      	bne.n	809105c <__aeabi_dmul+0x19c>
 80910b8:	ea81 0103 	eor.w	r1, r1, r3
 80910bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80910c0:	f04f 0000 	mov.w	r0, #0
 80910c4:	bd70      	pop	{r4, r5, r6, pc}
 80910c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80910ca:	bf06      	itte	eq
 80910cc:	4610      	moveq	r0, r2
 80910ce:	4619      	moveq	r1, r3
 80910d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80910d4:	d019      	beq.n	809110a <__aeabi_dmul+0x24a>
 80910d6:	ea94 0f0c 	teq	r4, ip
 80910da:	d102      	bne.n	80910e2 <__aeabi_dmul+0x222>
 80910dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80910e0:	d113      	bne.n	809110a <__aeabi_dmul+0x24a>
 80910e2:	ea95 0f0c 	teq	r5, ip
 80910e6:	d105      	bne.n	80910f4 <__aeabi_dmul+0x234>
 80910e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80910ec:	bf1c      	itt	ne
 80910ee:	4610      	movne	r0, r2
 80910f0:	4619      	movne	r1, r3
 80910f2:	d10a      	bne.n	809110a <__aeabi_dmul+0x24a>
 80910f4:	ea81 0103 	eor.w	r1, r1, r3
 80910f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80910fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8091100:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8091104:	f04f 0000 	mov.w	r0, #0
 8091108:	bd70      	pop	{r4, r5, r6, pc}
 809110a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 809110e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8091112:	bd70      	pop	{r4, r5, r6, pc}

08091114 <__aeabi_ddiv>:
 8091114:	b570      	push	{r4, r5, r6, lr}
 8091116:	f04f 0cff 	mov.w	ip, #255	; 0xff
 809111a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 809111e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8091122:	bf1d      	ittte	ne
 8091124:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8091128:	ea94 0f0c 	teqne	r4, ip
 809112c:	ea95 0f0c 	teqne	r5, ip
 8091130:	f000 f8a7 	bleq	8091282 <__aeabi_ddiv+0x16e>
 8091134:	eba4 0405 	sub.w	r4, r4, r5
 8091138:	ea81 0e03 	eor.w	lr, r1, r3
 809113c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8091140:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8091144:	f000 8088 	beq.w	8091258 <__aeabi_ddiv+0x144>
 8091148:	ea4f 3303 	mov.w	r3, r3, lsl #12
 809114c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8091150:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8091154:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8091158:	ea4f 2202 	mov.w	r2, r2, lsl #8
 809115c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8091160:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8091164:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8091168:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 809116c:	429d      	cmp	r5, r3
 809116e:	bf08      	it	eq
 8091170:	4296      	cmpeq	r6, r2
 8091172:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8091176:	f504 7440 	add.w	r4, r4, #768	; 0x300
 809117a:	d202      	bcs.n	8091182 <__aeabi_ddiv+0x6e>
 809117c:	085b      	lsrs	r3, r3, #1
 809117e:	ea4f 0232 	mov.w	r2, r2, rrx
 8091182:	1ab6      	subs	r6, r6, r2
 8091184:	eb65 0503 	sbc.w	r5, r5, r3
 8091188:	085b      	lsrs	r3, r3, #1
 809118a:	ea4f 0232 	mov.w	r2, r2, rrx
 809118e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8091192:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8091196:	ebb6 0e02 	subs.w	lr, r6, r2
 809119a:	eb75 0e03 	sbcs.w	lr, r5, r3
 809119e:	bf22      	ittt	cs
 80911a0:	1ab6      	subcs	r6, r6, r2
 80911a2:	4675      	movcs	r5, lr
 80911a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80911a8:	085b      	lsrs	r3, r3, #1
 80911aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80911ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80911b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80911b6:	bf22      	ittt	cs
 80911b8:	1ab6      	subcs	r6, r6, r2
 80911ba:	4675      	movcs	r5, lr
 80911bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80911c0:	085b      	lsrs	r3, r3, #1
 80911c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80911c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80911ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80911ce:	bf22      	ittt	cs
 80911d0:	1ab6      	subcs	r6, r6, r2
 80911d2:	4675      	movcs	r5, lr
 80911d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80911d8:	085b      	lsrs	r3, r3, #1
 80911da:	ea4f 0232 	mov.w	r2, r2, rrx
 80911de:	ebb6 0e02 	subs.w	lr, r6, r2
 80911e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80911e6:	bf22      	ittt	cs
 80911e8:	1ab6      	subcs	r6, r6, r2
 80911ea:	4675      	movcs	r5, lr
 80911ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80911f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80911f4:	d018      	beq.n	8091228 <__aeabi_ddiv+0x114>
 80911f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80911fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80911fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8091202:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8091206:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 809120a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 809120e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8091212:	d1c0      	bne.n	8091196 <__aeabi_ddiv+0x82>
 8091214:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8091218:	d10b      	bne.n	8091232 <__aeabi_ddiv+0x11e>
 809121a:	ea41 0100 	orr.w	r1, r1, r0
 809121e:	f04f 0000 	mov.w	r0, #0
 8091222:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8091226:	e7b6      	b.n	8091196 <__aeabi_ddiv+0x82>
 8091228:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 809122c:	bf04      	itt	eq
 809122e:	4301      	orreq	r1, r0
 8091230:	2000      	moveq	r0, #0
 8091232:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8091236:	bf88      	it	hi
 8091238:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 809123c:	f63f aeaf 	bhi.w	8090f9e <__aeabi_dmul+0xde>
 8091240:	ebb5 0c03 	subs.w	ip, r5, r3
 8091244:	bf04      	itt	eq
 8091246:	ebb6 0c02 	subseq.w	ip, r6, r2
 809124a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 809124e:	f150 0000 	adcs.w	r0, r0, #0
 8091252:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8091256:	bd70      	pop	{r4, r5, r6, pc}
 8091258:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 809125c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8091260:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8091264:	bfc2      	ittt	gt
 8091266:	ebd4 050c 	rsbsgt	r5, r4, ip
 809126a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 809126e:	bd70      	popgt	{r4, r5, r6, pc}
 8091270:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8091274:	f04f 0e00 	mov.w	lr, #0
 8091278:	3c01      	subs	r4, #1
 809127a:	e690      	b.n	8090f9e <__aeabi_dmul+0xde>
 809127c:	ea45 0e06 	orr.w	lr, r5, r6
 8091280:	e68d      	b.n	8090f9e <__aeabi_dmul+0xde>
 8091282:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8091286:	ea94 0f0c 	teq	r4, ip
 809128a:	bf08      	it	eq
 809128c:	ea95 0f0c 	teqeq	r5, ip
 8091290:	f43f af3b 	beq.w	809110a <__aeabi_dmul+0x24a>
 8091294:	ea94 0f0c 	teq	r4, ip
 8091298:	d10a      	bne.n	80912b0 <__aeabi_ddiv+0x19c>
 809129a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 809129e:	f47f af34 	bne.w	809110a <__aeabi_dmul+0x24a>
 80912a2:	ea95 0f0c 	teq	r5, ip
 80912a6:	f47f af25 	bne.w	80910f4 <__aeabi_dmul+0x234>
 80912aa:	4610      	mov	r0, r2
 80912ac:	4619      	mov	r1, r3
 80912ae:	e72c      	b.n	809110a <__aeabi_dmul+0x24a>
 80912b0:	ea95 0f0c 	teq	r5, ip
 80912b4:	d106      	bne.n	80912c4 <__aeabi_ddiv+0x1b0>
 80912b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80912ba:	f43f aefd 	beq.w	80910b8 <__aeabi_dmul+0x1f8>
 80912be:	4610      	mov	r0, r2
 80912c0:	4619      	mov	r1, r3
 80912c2:	e722      	b.n	809110a <__aeabi_dmul+0x24a>
 80912c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80912c8:	bf18      	it	ne
 80912ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80912ce:	f47f aec5 	bne.w	809105c <__aeabi_dmul+0x19c>
 80912d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80912d6:	f47f af0d 	bne.w	80910f4 <__aeabi_dmul+0x234>
 80912da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80912de:	f47f aeeb 	bne.w	80910b8 <__aeabi_dmul+0x1f8>
 80912e2:	e712      	b.n	809110a <__aeabi_dmul+0x24a>

080912e4 <__gedf2>:
 80912e4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80912e8:	e006      	b.n	80912f8 <__cmpdf2+0x4>
 80912ea:	bf00      	nop

080912ec <__ledf2>:
 80912ec:	f04f 0c01 	mov.w	ip, #1
 80912f0:	e002      	b.n	80912f8 <__cmpdf2+0x4>
 80912f2:	bf00      	nop

080912f4 <__cmpdf2>:
 80912f4:	f04f 0c01 	mov.w	ip, #1
 80912f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80912fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8091300:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8091304:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8091308:	bf18      	it	ne
 809130a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 809130e:	d01b      	beq.n	8091348 <__cmpdf2+0x54>
 8091310:	b001      	add	sp, #4
 8091312:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8091316:	bf0c      	ite	eq
 8091318:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 809131c:	ea91 0f03 	teqne	r1, r3
 8091320:	bf02      	ittt	eq
 8091322:	ea90 0f02 	teqeq	r0, r2
 8091326:	2000      	moveq	r0, #0
 8091328:	4770      	bxeq	lr
 809132a:	f110 0f00 	cmn.w	r0, #0
 809132e:	ea91 0f03 	teq	r1, r3
 8091332:	bf58      	it	pl
 8091334:	4299      	cmppl	r1, r3
 8091336:	bf08      	it	eq
 8091338:	4290      	cmpeq	r0, r2
 809133a:	bf2c      	ite	cs
 809133c:	17d8      	asrcs	r0, r3, #31
 809133e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8091342:	f040 0001 	orr.w	r0, r0, #1
 8091346:	4770      	bx	lr
 8091348:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 809134c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8091350:	d102      	bne.n	8091358 <__cmpdf2+0x64>
 8091352:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8091356:	d107      	bne.n	8091368 <__cmpdf2+0x74>
 8091358:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 809135c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8091360:	d1d6      	bne.n	8091310 <__cmpdf2+0x1c>
 8091362:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8091366:	d0d3      	beq.n	8091310 <__cmpdf2+0x1c>
 8091368:	f85d 0b04 	ldr.w	r0, [sp], #4
 809136c:	4770      	bx	lr
 809136e:	bf00      	nop

08091370 <__aeabi_cdrcmple>:
 8091370:	4684      	mov	ip, r0
 8091372:	4610      	mov	r0, r2
 8091374:	4662      	mov	r2, ip
 8091376:	468c      	mov	ip, r1
 8091378:	4619      	mov	r1, r3
 809137a:	4663      	mov	r3, ip
 809137c:	e000      	b.n	8091380 <__aeabi_cdcmpeq>
 809137e:	bf00      	nop

08091380 <__aeabi_cdcmpeq>:
 8091380:	b501      	push	{r0, lr}
 8091382:	f7ff ffb7 	bl	80912f4 <__cmpdf2>
 8091386:	2800      	cmp	r0, #0
 8091388:	bf48      	it	mi
 809138a:	f110 0f00 	cmnmi.w	r0, #0
 809138e:	bd01      	pop	{r0, pc}

08091390 <__aeabi_dcmpeq>:
 8091390:	f84d ed08 	str.w	lr, [sp, #-8]!
 8091394:	f7ff fff4 	bl	8091380 <__aeabi_cdcmpeq>
 8091398:	bf0c      	ite	eq
 809139a:	2001      	moveq	r0, #1
 809139c:	2000      	movne	r0, #0
 809139e:	f85d fb08 	ldr.w	pc, [sp], #8
 80913a2:	bf00      	nop

080913a4 <__aeabi_dcmplt>:
 80913a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80913a8:	f7ff ffea 	bl	8091380 <__aeabi_cdcmpeq>
 80913ac:	bf34      	ite	cc
 80913ae:	2001      	movcc	r0, #1
 80913b0:	2000      	movcs	r0, #0
 80913b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80913b6:	bf00      	nop

080913b8 <__aeabi_dcmple>:
 80913b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80913bc:	f7ff ffe0 	bl	8091380 <__aeabi_cdcmpeq>
 80913c0:	bf94      	ite	ls
 80913c2:	2001      	movls	r0, #1
 80913c4:	2000      	movhi	r0, #0
 80913c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80913ca:	bf00      	nop

080913cc <__aeabi_dcmpge>:
 80913cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80913d0:	f7ff ffce 	bl	8091370 <__aeabi_cdrcmple>
 80913d4:	bf94      	ite	ls
 80913d6:	2001      	movls	r0, #1
 80913d8:	2000      	movhi	r0, #0
 80913da:	f85d fb08 	ldr.w	pc, [sp], #8
 80913de:	bf00      	nop

080913e0 <__aeabi_dcmpgt>:
 80913e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80913e4:	f7ff ffc4 	bl	8091370 <__aeabi_cdrcmple>
 80913e8:	bf34      	ite	cc
 80913ea:	2001      	movcc	r0, #1
 80913ec:	2000      	movcs	r0, #0
 80913ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80913f2:	bf00      	nop

080913f4 <__aeabi_d2uiz>:
 80913f4:	004a      	lsls	r2, r1, #1
 80913f6:	d211      	bcs.n	809141c <__aeabi_d2uiz+0x28>
 80913f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80913fc:	d211      	bcs.n	8091422 <__aeabi_d2uiz+0x2e>
 80913fe:	d50d      	bpl.n	809141c <__aeabi_d2uiz+0x28>
 8091400:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8091404:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8091408:	d40e      	bmi.n	8091428 <__aeabi_d2uiz+0x34>
 809140a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 809140e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8091412:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8091416:	fa23 f002 	lsr.w	r0, r3, r2
 809141a:	4770      	bx	lr
 809141c:	f04f 0000 	mov.w	r0, #0
 8091420:	4770      	bx	lr
 8091422:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8091426:	d102      	bne.n	809142e <__aeabi_d2uiz+0x3a>
 8091428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809142c:	4770      	bx	lr
 809142e:	f04f 0000 	mov.w	r0, #0
 8091432:	4770      	bx	lr

08091434 <__aeabi_d2f>:
 8091434:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8091438:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 809143c:	bf24      	itt	cs
 809143e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8091442:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8091446:	d90d      	bls.n	8091464 <__aeabi_d2f+0x30>
 8091448:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 809144c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8091450:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8091454:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8091458:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 809145c:	bf08      	it	eq
 809145e:	f020 0001 	biceq.w	r0, r0, #1
 8091462:	4770      	bx	lr
 8091464:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8091468:	d121      	bne.n	80914ae <__aeabi_d2f+0x7a>
 809146a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 809146e:	bfbc      	itt	lt
 8091470:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8091474:	4770      	bxlt	lr
 8091476:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 809147a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 809147e:	f1c2 0218 	rsb	r2, r2, #24
 8091482:	f1c2 0c20 	rsb	ip, r2, #32
 8091486:	fa10 f30c 	lsls.w	r3, r0, ip
 809148a:	fa20 f002 	lsr.w	r0, r0, r2
 809148e:	bf18      	it	ne
 8091490:	f040 0001 	orrne.w	r0, r0, #1
 8091494:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8091498:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 809149c:	fa03 fc0c 	lsl.w	ip, r3, ip
 80914a0:	ea40 000c 	orr.w	r0, r0, ip
 80914a4:	fa23 f302 	lsr.w	r3, r3, r2
 80914a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80914ac:	e7cc      	b.n	8091448 <__aeabi_d2f+0x14>
 80914ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80914b2:	d107      	bne.n	80914c4 <__aeabi_d2f+0x90>
 80914b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80914b8:	bf1e      	ittt	ne
 80914ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80914be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80914c2:	4770      	bxne	lr
 80914c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80914c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80914cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80914d0:	4770      	bx	lr
 80914d2:	bf00      	nop

080914d4 <__aeabi_frsub>:
 80914d4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80914d8:	e002      	b.n	80914e0 <__addsf3>
 80914da:	bf00      	nop

080914dc <__aeabi_fsub>:
 80914dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080914e0 <__addsf3>:
 80914e0:	0042      	lsls	r2, r0, #1
 80914e2:	bf1f      	itttt	ne
 80914e4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80914e8:	ea92 0f03 	teqne	r2, r3
 80914ec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80914f0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80914f4:	d06a      	beq.n	80915cc <__addsf3+0xec>
 80914f6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80914fa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80914fe:	bfc1      	itttt	gt
 8091500:	18d2      	addgt	r2, r2, r3
 8091502:	4041      	eorgt	r1, r0
 8091504:	4048      	eorgt	r0, r1
 8091506:	4041      	eorgt	r1, r0
 8091508:	bfb8      	it	lt
 809150a:	425b      	neglt	r3, r3
 809150c:	2b19      	cmp	r3, #25
 809150e:	bf88      	it	hi
 8091510:	4770      	bxhi	lr
 8091512:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8091516:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 809151a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 809151e:	bf18      	it	ne
 8091520:	4240      	negne	r0, r0
 8091522:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8091526:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 809152a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 809152e:	bf18      	it	ne
 8091530:	4249      	negne	r1, r1
 8091532:	ea92 0f03 	teq	r2, r3
 8091536:	d03f      	beq.n	80915b8 <__addsf3+0xd8>
 8091538:	f1a2 0201 	sub.w	r2, r2, #1
 809153c:	fa41 fc03 	asr.w	ip, r1, r3
 8091540:	eb10 000c 	adds.w	r0, r0, ip
 8091544:	f1c3 0320 	rsb	r3, r3, #32
 8091548:	fa01 f103 	lsl.w	r1, r1, r3
 809154c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8091550:	d502      	bpl.n	8091558 <__addsf3+0x78>
 8091552:	4249      	negs	r1, r1
 8091554:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8091558:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 809155c:	d313      	bcc.n	8091586 <__addsf3+0xa6>
 809155e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8091562:	d306      	bcc.n	8091572 <__addsf3+0x92>
 8091564:	0840      	lsrs	r0, r0, #1
 8091566:	ea4f 0131 	mov.w	r1, r1, rrx
 809156a:	f102 0201 	add.w	r2, r2, #1
 809156e:	2afe      	cmp	r2, #254	; 0xfe
 8091570:	d251      	bcs.n	8091616 <__addsf3+0x136>
 8091572:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8091576:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 809157a:	bf08      	it	eq
 809157c:	f020 0001 	biceq.w	r0, r0, #1
 8091580:	ea40 0003 	orr.w	r0, r0, r3
 8091584:	4770      	bx	lr
 8091586:	0049      	lsls	r1, r1, #1
 8091588:	eb40 0000 	adc.w	r0, r0, r0
 809158c:	3a01      	subs	r2, #1
 809158e:	bf28      	it	cs
 8091590:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8091594:	d2ed      	bcs.n	8091572 <__addsf3+0x92>
 8091596:	fab0 fc80 	clz	ip, r0
 809159a:	f1ac 0c08 	sub.w	ip, ip, #8
 809159e:	ebb2 020c 	subs.w	r2, r2, ip
 80915a2:	fa00 f00c 	lsl.w	r0, r0, ip
 80915a6:	bfaa      	itet	ge
 80915a8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80915ac:	4252      	neglt	r2, r2
 80915ae:	4318      	orrge	r0, r3
 80915b0:	bfbc      	itt	lt
 80915b2:	40d0      	lsrlt	r0, r2
 80915b4:	4318      	orrlt	r0, r3
 80915b6:	4770      	bx	lr
 80915b8:	f092 0f00 	teq	r2, #0
 80915bc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80915c0:	bf06      	itte	eq
 80915c2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80915c6:	3201      	addeq	r2, #1
 80915c8:	3b01      	subne	r3, #1
 80915ca:	e7b5      	b.n	8091538 <__addsf3+0x58>
 80915cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80915d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80915d4:	bf18      	it	ne
 80915d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80915da:	d021      	beq.n	8091620 <__addsf3+0x140>
 80915dc:	ea92 0f03 	teq	r2, r3
 80915e0:	d004      	beq.n	80915ec <__addsf3+0x10c>
 80915e2:	f092 0f00 	teq	r2, #0
 80915e6:	bf08      	it	eq
 80915e8:	4608      	moveq	r0, r1
 80915ea:	4770      	bx	lr
 80915ec:	ea90 0f01 	teq	r0, r1
 80915f0:	bf1c      	itt	ne
 80915f2:	2000      	movne	r0, #0
 80915f4:	4770      	bxne	lr
 80915f6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80915fa:	d104      	bne.n	8091606 <__addsf3+0x126>
 80915fc:	0040      	lsls	r0, r0, #1
 80915fe:	bf28      	it	cs
 8091600:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8091604:	4770      	bx	lr
 8091606:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 809160a:	bf3c      	itt	cc
 809160c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8091610:	4770      	bxcc	lr
 8091612:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8091616:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 809161a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 809161e:	4770      	bx	lr
 8091620:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8091624:	bf16      	itet	ne
 8091626:	4608      	movne	r0, r1
 8091628:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 809162c:	4601      	movne	r1, r0
 809162e:	0242      	lsls	r2, r0, #9
 8091630:	bf06      	itte	eq
 8091632:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8091636:	ea90 0f01 	teqeq	r0, r1
 809163a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 809163e:	4770      	bx	lr

08091640 <__aeabi_ui2f>:
 8091640:	f04f 0300 	mov.w	r3, #0
 8091644:	e004      	b.n	8091650 <__aeabi_i2f+0x8>
 8091646:	bf00      	nop

08091648 <__aeabi_i2f>:
 8091648:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 809164c:	bf48      	it	mi
 809164e:	4240      	negmi	r0, r0
 8091650:	ea5f 0c00 	movs.w	ip, r0
 8091654:	bf08      	it	eq
 8091656:	4770      	bxeq	lr
 8091658:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 809165c:	4601      	mov	r1, r0
 809165e:	f04f 0000 	mov.w	r0, #0
 8091662:	e01c      	b.n	809169e <__aeabi_l2f+0x2a>

08091664 <__aeabi_ul2f>:
 8091664:	ea50 0201 	orrs.w	r2, r0, r1
 8091668:	bf08      	it	eq
 809166a:	4770      	bxeq	lr
 809166c:	f04f 0300 	mov.w	r3, #0
 8091670:	e00a      	b.n	8091688 <__aeabi_l2f+0x14>
 8091672:	bf00      	nop

08091674 <__aeabi_l2f>:
 8091674:	ea50 0201 	orrs.w	r2, r0, r1
 8091678:	bf08      	it	eq
 809167a:	4770      	bxeq	lr
 809167c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8091680:	d502      	bpl.n	8091688 <__aeabi_l2f+0x14>
 8091682:	4240      	negs	r0, r0
 8091684:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8091688:	ea5f 0c01 	movs.w	ip, r1
 809168c:	bf02      	ittt	eq
 809168e:	4684      	moveq	ip, r0
 8091690:	4601      	moveq	r1, r0
 8091692:	2000      	moveq	r0, #0
 8091694:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8091698:	bf08      	it	eq
 809169a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 809169e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80916a2:	fabc f28c 	clz	r2, ip
 80916a6:	3a08      	subs	r2, #8
 80916a8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80916ac:	db10      	blt.n	80916d0 <__aeabi_l2f+0x5c>
 80916ae:	fa01 fc02 	lsl.w	ip, r1, r2
 80916b2:	4463      	add	r3, ip
 80916b4:	fa00 fc02 	lsl.w	ip, r0, r2
 80916b8:	f1c2 0220 	rsb	r2, r2, #32
 80916bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80916c0:	fa20 f202 	lsr.w	r2, r0, r2
 80916c4:	eb43 0002 	adc.w	r0, r3, r2
 80916c8:	bf08      	it	eq
 80916ca:	f020 0001 	biceq.w	r0, r0, #1
 80916ce:	4770      	bx	lr
 80916d0:	f102 0220 	add.w	r2, r2, #32
 80916d4:	fa01 fc02 	lsl.w	ip, r1, r2
 80916d8:	f1c2 0220 	rsb	r2, r2, #32
 80916dc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80916e0:	fa21 f202 	lsr.w	r2, r1, r2
 80916e4:	eb43 0002 	adc.w	r0, r3, r2
 80916e8:	bf08      	it	eq
 80916ea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80916ee:	4770      	bx	lr

080916f0 <__aeabi_fmul>:
 80916f0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80916f4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80916f8:	bf1e      	ittt	ne
 80916fa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80916fe:	ea92 0f0c 	teqne	r2, ip
 8091702:	ea93 0f0c 	teqne	r3, ip
 8091706:	d06f      	beq.n	80917e8 <__aeabi_fmul+0xf8>
 8091708:	441a      	add	r2, r3
 809170a:	ea80 0c01 	eor.w	ip, r0, r1
 809170e:	0240      	lsls	r0, r0, #9
 8091710:	bf18      	it	ne
 8091712:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8091716:	d01e      	beq.n	8091756 <__aeabi_fmul+0x66>
 8091718:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 809171c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8091720:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8091724:	fba0 3101 	umull	r3, r1, r0, r1
 8091728:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 809172c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8091730:	bf3e      	ittt	cc
 8091732:	0049      	lslcc	r1, r1, #1
 8091734:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8091738:	005b      	lslcc	r3, r3, #1
 809173a:	ea40 0001 	orr.w	r0, r0, r1
 809173e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8091742:	2afd      	cmp	r2, #253	; 0xfd
 8091744:	d81d      	bhi.n	8091782 <__aeabi_fmul+0x92>
 8091746:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 809174a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 809174e:	bf08      	it	eq
 8091750:	f020 0001 	biceq.w	r0, r0, #1
 8091754:	4770      	bx	lr
 8091756:	f090 0f00 	teq	r0, #0
 809175a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 809175e:	bf08      	it	eq
 8091760:	0249      	lsleq	r1, r1, #9
 8091762:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8091766:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 809176a:	3a7f      	subs	r2, #127	; 0x7f
 809176c:	bfc2      	ittt	gt
 809176e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8091772:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8091776:	4770      	bxgt	lr
 8091778:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 809177c:	f04f 0300 	mov.w	r3, #0
 8091780:	3a01      	subs	r2, #1
 8091782:	dc5d      	bgt.n	8091840 <__aeabi_fmul+0x150>
 8091784:	f112 0f19 	cmn.w	r2, #25
 8091788:	bfdc      	itt	le
 809178a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 809178e:	4770      	bxle	lr
 8091790:	f1c2 0200 	rsb	r2, r2, #0
 8091794:	0041      	lsls	r1, r0, #1
 8091796:	fa21 f102 	lsr.w	r1, r1, r2
 809179a:	f1c2 0220 	rsb	r2, r2, #32
 809179e:	fa00 fc02 	lsl.w	ip, r0, r2
 80917a2:	ea5f 0031 	movs.w	r0, r1, rrx
 80917a6:	f140 0000 	adc.w	r0, r0, #0
 80917aa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80917ae:	bf08      	it	eq
 80917b0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80917b4:	4770      	bx	lr
 80917b6:	f092 0f00 	teq	r2, #0
 80917ba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80917be:	bf02      	ittt	eq
 80917c0:	0040      	lsleq	r0, r0, #1
 80917c2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80917c6:	3a01      	subeq	r2, #1
 80917c8:	d0f9      	beq.n	80917be <__aeabi_fmul+0xce>
 80917ca:	ea40 000c 	orr.w	r0, r0, ip
 80917ce:	f093 0f00 	teq	r3, #0
 80917d2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80917d6:	bf02      	ittt	eq
 80917d8:	0049      	lsleq	r1, r1, #1
 80917da:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80917de:	3b01      	subeq	r3, #1
 80917e0:	d0f9      	beq.n	80917d6 <__aeabi_fmul+0xe6>
 80917e2:	ea41 010c 	orr.w	r1, r1, ip
 80917e6:	e78f      	b.n	8091708 <__aeabi_fmul+0x18>
 80917e8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80917ec:	ea92 0f0c 	teq	r2, ip
 80917f0:	bf18      	it	ne
 80917f2:	ea93 0f0c 	teqne	r3, ip
 80917f6:	d00a      	beq.n	809180e <__aeabi_fmul+0x11e>
 80917f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80917fc:	bf18      	it	ne
 80917fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8091802:	d1d8      	bne.n	80917b6 <__aeabi_fmul+0xc6>
 8091804:	ea80 0001 	eor.w	r0, r0, r1
 8091808:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 809180c:	4770      	bx	lr
 809180e:	f090 0f00 	teq	r0, #0
 8091812:	bf17      	itett	ne
 8091814:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8091818:	4608      	moveq	r0, r1
 809181a:	f091 0f00 	teqne	r1, #0
 809181e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8091822:	d014      	beq.n	809184e <__aeabi_fmul+0x15e>
 8091824:	ea92 0f0c 	teq	r2, ip
 8091828:	d101      	bne.n	809182e <__aeabi_fmul+0x13e>
 809182a:	0242      	lsls	r2, r0, #9
 809182c:	d10f      	bne.n	809184e <__aeabi_fmul+0x15e>
 809182e:	ea93 0f0c 	teq	r3, ip
 8091832:	d103      	bne.n	809183c <__aeabi_fmul+0x14c>
 8091834:	024b      	lsls	r3, r1, #9
 8091836:	bf18      	it	ne
 8091838:	4608      	movne	r0, r1
 809183a:	d108      	bne.n	809184e <__aeabi_fmul+0x15e>
 809183c:	ea80 0001 	eor.w	r0, r0, r1
 8091840:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8091844:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8091848:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 809184c:	4770      	bx	lr
 809184e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8091852:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8091856:	4770      	bx	lr

08091858 <__aeabi_fdiv>:
 8091858:	f04f 0cff 	mov.w	ip, #255	; 0xff
 809185c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8091860:	bf1e      	ittt	ne
 8091862:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8091866:	ea92 0f0c 	teqne	r2, ip
 809186a:	ea93 0f0c 	teqne	r3, ip
 809186e:	d069      	beq.n	8091944 <__aeabi_fdiv+0xec>
 8091870:	eba2 0203 	sub.w	r2, r2, r3
 8091874:	ea80 0c01 	eor.w	ip, r0, r1
 8091878:	0249      	lsls	r1, r1, #9
 809187a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 809187e:	d037      	beq.n	80918f0 <__aeabi_fdiv+0x98>
 8091880:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8091884:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8091888:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 809188c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8091890:	428b      	cmp	r3, r1
 8091892:	bf38      	it	cc
 8091894:	005b      	lslcc	r3, r3, #1
 8091896:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 809189a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 809189e:	428b      	cmp	r3, r1
 80918a0:	bf24      	itt	cs
 80918a2:	1a5b      	subcs	r3, r3, r1
 80918a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80918a8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80918ac:	bf24      	itt	cs
 80918ae:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80918b2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80918b6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80918ba:	bf24      	itt	cs
 80918bc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80918c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80918c4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80918c8:	bf24      	itt	cs
 80918ca:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80918ce:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80918d2:	011b      	lsls	r3, r3, #4
 80918d4:	bf18      	it	ne
 80918d6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80918da:	d1e0      	bne.n	809189e <__aeabi_fdiv+0x46>
 80918dc:	2afd      	cmp	r2, #253	; 0xfd
 80918de:	f63f af50 	bhi.w	8091782 <__aeabi_fmul+0x92>
 80918e2:	428b      	cmp	r3, r1
 80918e4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80918e8:	bf08      	it	eq
 80918ea:	f020 0001 	biceq.w	r0, r0, #1
 80918ee:	4770      	bx	lr
 80918f0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80918f4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80918f8:	327f      	adds	r2, #127	; 0x7f
 80918fa:	bfc2      	ittt	gt
 80918fc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8091900:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8091904:	4770      	bxgt	lr
 8091906:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 809190a:	f04f 0300 	mov.w	r3, #0
 809190e:	3a01      	subs	r2, #1
 8091910:	e737      	b.n	8091782 <__aeabi_fmul+0x92>
 8091912:	f092 0f00 	teq	r2, #0
 8091916:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 809191a:	bf02      	ittt	eq
 809191c:	0040      	lsleq	r0, r0, #1
 809191e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8091922:	3a01      	subeq	r2, #1
 8091924:	d0f9      	beq.n	809191a <__aeabi_fdiv+0xc2>
 8091926:	ea40 000c 	orr.w	r0, r0, ip
 809192a:	f093 0f00 	teq	r3, #0
 809192e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8091932:	bf02      	ittt	eq
 8091934:	0049      	lsleq	r1, r1, #1
 8091936:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 809193a:	3b01      	subeq	r3, #1
 809193c:	d0f9      	beq.n	8091932 <__aeabi_fdiv+0xda>
 809193e:	ea41 010c 	orr.w	r1, r1, ip
 8091942:	e795      	b.n	8091870 <__aeabi_fdiv+0x18>
 8091944:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8091948:	ea92 0f0c 	teq	r2, ip
 809194c:	d108      	bne.n	8091960 <__aeabi_fdiv+0x108>
 809194e:	0242      	lsls	r2, r0, #9
 8091950:	f47f af7d 	bne.w	809184e <__aeabi_fmul+0x15e>
 8091954:	ea93 0f0c 	teq	r3, ip
 8091958:	f47f af70 	bne.w	809183c <__aeabi_fmul+0x14c>
 809195c:	4608      	mov	r0, r1
 809195e:	e776      	b.n	809184e <__aeabi_fmul+0x15e>
 8091960:	ea93 0f0c 	teq	r3, ip
 8091964:	d104      	bne.n	8091970 <__aeabi_fdiv+0x118>
 8091966:	024b      	lsls	r3, r1, #9
 8091968:	f43f af4c 	beq.w	8091804 <__aeabi_fmul+0x114>
 809196c:	4608      	mov	r0, r1
 809196e:	e76e      	b.n	809184e <__aeabi_fmul+0x15e>
 8091970:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8091974:	bf18      	it	ne
 8091976:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 809197a:	d1ca      	bne.n	8091912 <__aeabi_fdiv+0xba>
 809197c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8091980:	f47f af5c 	bne.w	809183c <__aeabi_fmul+0x14c>
 8091984:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8091988:	f47f af3c 	bne.w	8091804 <__aeabi_fmul+0x114>
 809198c:	e75f      	b.n	809184e <__aeabi_fmul+0x15e>
 809198e:	bf00      	nop

08091990 <__gesf2>:
 8091990:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8091994:	e006      	b.n	80919a4 <__cmpsf2+0x4>
 8091996:	bf00      	nop

08091998 <__lesf2>:
 8091998:	f04f 0c01 	mov.w	ip, #1
 809199c:	e002      	b.n	80919a4 <__cmpsf2+0x4>
 809199e:	bf00      	nop

080919a0 <__cmpsf2>:
 80919a0:	f04f 0c01 	mov.w	ip, #1
 80919a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80919a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80919ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80919b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80919b4:	bf18      	it	ne
 80919b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80919ba:	d011      	beq.n	80919e0 <__cmpsf2+0x40>
 80919bc:	b001      	add	sp, #4
 80919be:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80919c2:	bf18      	it	ne
 80919c4:	ea90 0f01 	teqne	r0, r1
 80919c8:	bf58      	it	pl
 80919ca:	ebb2 0003 	subspl.w	r0, r2, r3
 80919ce:	bf88      	it	hi
 80919d0:	17c8      	asrhi	r0, r1, #31
 80919d2:	bf38      	it	cc
 80919d4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80919d8:	bf18      	it	ne
 80919da:	f040 0001 	orrne.w	r0, r0, #1
 80919de:	4770      	bx	lr
 80919e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80919e4:	d102      	bne.n	80919ec <__cmpsf2+0x4c>
 80919e6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80919ea:	d105      	bne.n	80919f8 <__cmpsf2+0x58>
 80919ec:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80919f0:	d1e4      	bne.n	80919bc <__cmpsf2+0x1c>
 80919f2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80919f6:	d0e1      	beq.n	80919bc <__cmpsf2+0x1c>
 80919f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80919fc:	4770      	bx	lr
 80919fe:	bf00      	nop

08091a00 <__aeabi_cfrcmple>:
 8091a00:	4684      	mov	ip, r0
 8091a02:	4608      	mov	r0, r1
 8091a04:	4661      	mov	r1, ip
 8091a06:	e7ff      	b.n	8091a08 <__aeabi_cfcmpeq>

08091a08 <__aeabi_cfcmpeq>:
 8091a08:	b50f      	push	{r0, r1, r2, r3, lr}
 8091a0a:	f7ff ffc9 	bl	80919a0 <__cmpsf2>
 8091a0e:	2800      	cmp	r0, #0
 8091a10:	bf48      	it	mi
 8091a12:	f110 0f00 	cmnmi.w	r0, #0
 8091a16:	bd0f      	pop	{r0, r1, r2, r3, pc}

08091a18 <__aeabi_fcmpeq>:
 8091a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8091a1c:	f7ff fff4 	bl	8091a08 <__aeabi_cfcmpeq>
 8091a20:	bf0c      	ite	eq
 8091a22:	2001      	moveq	r0, #1
 8091a24:	2000      	movne	r0, #0
 8091a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8091a2a:	bf00      	nop

08091a2c <__aeabi_fcmplt>:
 8091a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8091a30:	f7ff ffea 	bl	8091a08 <__aeabi_cfcmpeq>
 8091a34:	bf34      	ite	cc
 8091a36:	2001      	movcc	r0, #1
 8091a38:	2000      	movcs	r0, #0
 8091a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8091a3e:	bf00      	nop

08091a40 <__aeabi_fcmple>:
 8091a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8091a44:	f7ff ffe0 	bl	8091a08 <__aeabi_cfcmpeq>
 8091a48:	bf94      	ite	ls
 8091a4a:	2001      	movls	r0, #1
 8091a4c:	2000      	movhi	r0, #0
 8091a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8091a52:	bf00      	nop

08091a54 <__aeabi_fcmpge>:
 8091a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8091a58:	f7ff ffd2 	bl	8091a00 <__aeabi_cfrcmple>
 8091a5c:	bf94      	ite	ls
 8091a5e:	2001      	movls	r0, #1
 8091a60:	2000      	movhi	r0, #0
 8091a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8091a66:	bf00      	nop

08091a68 <__aeabi_fcmpgt>:
 8091a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8091a6c:	f7ff ffc8 	bl	8091a00 <__aeabi_cfrcmple>
 8091a70:	bf34      	ite	cc
 8091a72:	2001      	movcc	r0, #1
 8091a74:	2000      	movcs	r0, #0
 8091a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8091a7a:	bf00      	nop

08091a7c <__aeabi_fcmpun>:
 8091a7c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8091a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8091a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8091a88:	d102      	bne.n	8091a90 <__aeabi_fcmpun+0x14>
 8091a8a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8091a8e:	d108      	bne.n	8091aa2 <__aeabi_fcmpun+0x26>
 8091a90:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8091a94:	d102      	bne.n	8091a9c <__aeabi_fcmpun+0x20>
 8091a96:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8091a9a:	d102      	bne.n	8091aa2 <__aeabi_fcmpun+0x26>
 8091a9c:	f04f 0000 	mov.w	r0, #0
 8091aa0:	4770      	bx	lr
 8091aa2:	f04f 0001 	mov.w	r0, #1
 8091aa6:	4770      	bx	lr

08091aa8 <__aeabi_f2iz>:
 8091aa8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8091aac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8091ab0:	d30f      	bcc.n	8091ad2 <__aeabi_f2iz+0x2a>
 8091ab2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8091ab6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8091aba:	d90d      	bls.n	8091ad8 <__aeabi_f2iz+0x30>
 8091abc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8091ac0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8091ac4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8091ac8:	fa23 f002 	lsr.w	r0, r3, r2
 8091acc:	bf18      	it	ne
 8091ace:	4240      	negne	r0, r0
 8091ad0:	4770      	bx	lr
 8091ad2:	f04f 0000 	mov.w	r0, #0
 8091ad6:	4770      	bx	lr
 8091ad8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8091adc:	d101      	bne.n	8091ae2 <__aeabi_f2iz+0x3a>
 8091ade:	0242      	lsls	r2, r0, #9
 8091ae0:	d105      	bne.n	8091aee <__aeabi_f2iz+0x46>
 8091ae2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8091ae6:	bf08      	it	eq
 8091ae8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8091aec:	4770      	bx	lr
 8091aee:	f04f 0000 	mov.w	r0, #0
 8091af2:	4770      	bx	lr

08091af4 <__aeabi_uldivmod>:
 8091af4:	b953      	cbnz	r3, 8091b0c <__aeabi_uldivmod+0x18>
 8091af6:	b94a      	cbnz	r2, 8091b0c <__aeabi_uldivmod+0x18>
 8091af8:	2900      	cmp	r1, #0
 8091afa:	bf08      	it	eq
 8091afc:	2800      	cmpeq	r0, #0
 8091afe:	bf1c      	itt	ne
 8091b00:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8091b04:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8091b08:	f000 b98c 	b.w	8091e24 <__aeabi_idiv0>
 8091b0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8091b10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8091b14:	f000 f824 	bl	8091b60 <__udivmoddi4>
 8091b18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8091b1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8091b20:	b004      	add	sp, #16
 8091b22:	4770      	bx	lr

08091b24 <__aeabi_d2ulz>:
 8091b24:	b5d0      	push	{r4, r6, r7, lr}
 8091b26:	2200      	movs	r2, #0
 8091b28:	4b0b      	ldr	r3, [pc, #44]	; (8091b58 <__aeabi_d2ulz+0x34>)
 8091b2a:	4606      	mov	r6, r0
 8091b2c:	460f      	mov	r7, r1
 8091b2e:	f7ff f9c7 	bl	8090ec0 <__aeabi_dmul>
 8091b32:	f7ff fc5f 	bl	80913f4 <__aeabi_d2uiz>
 8091b36:	4604      	mov	r4, r0
 8091b38:	f7ff f948 	bl	8090dcc <__aeabi_ui2d>
 8091b3c:	2200      	movs	r2, #0
 8091b3e:	4b07      	ldr	r3, [pc, #28]	; (8091b5c <__aeabi_d2ulz+0x38>)
 8091b40:	f7ff f9be 	bl	8090ec0 <__aeabi_dmul>
 8091b44:	4602      	mov	r2, r0
 8091b46:	460b      	mov	r3, r1
 8091b48:	4630      	mov	r0, r6
 8091b4a:	4639      	mov	r1, r7
 8091b4c:	f7ff f800 	bl	8090b50 <__aeabi_dsub>
 8091b50:	f7ff fc50 	bl	80913f4 <__aeabi_d2uiz>
 8091b54:	4621      	mov	r1, r4
 8091b56:	bdd0      	pop	{r4, r6, r7, pc}
 8091b58:	3df00000 	.word	0x3df00000
 8091b5c:	41f00000 	.word	0x41f00000

08091b60 <__udivmoddi4>:
 8091b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8091b64:	9e08      	ldr	r6, [sp, #32]
 8091b66:	460d      	mov	r5, r1
 8091b68:	4604      	mov	r4, r0
 8091b6a:	468e      	mov	lr, r1
 8091b6c:	2b00      	cmp	r3, #0
 8091b6e:	f040 8083 	bne.w	8091c78 <__udivmoddi4+0x118>
 8091b72:	428a      	cmp	r2, r1
 8091b74:	4617      	mov	r7, r2
 8091b76:	d947      	bls.n	8091c08 <__udivmoddi4+0xa8>
 8091b78:	fab2 f382 	clz	r3, r2
 8091b7c:	b14b      	cbz	r3, 8091b92 <__udivmoddi4+0x32>
 8091b7e:	f1c3 0120 	rsb	r1, r3, #32
 8091b82:	fa05 fe03 	lsl.w	lr, r5, r3
 8091b86:	fa20 f101 	lsr.w	r1, r0, r1
 8091b8a:	409f      	lsls	r7, r3
 8091b8c:	ea41 0e0e 	orr.w	lr, r1, lr
 8091b90:	409c      	lsls	r4, r3
 8091b92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8091b96:	fbbe fcf8 	udiv	ip, lr, r8
 8091b9a:	fa1f f987 	uxth.w	r9, r7
 8091b9e:	fb08 e21c 	mls	r2, r8, ip, lr
 8091ba2:	fb0c f009 	mul.w	r0, ip, r9
 8091ba6:	0c21      	lsrs	r1, r4, #16
 8091ba8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8091bac:	4290      	cmp	r0, r2
 8091bae:	d90a      	bls.n	8091bc6 <__udivmoddi4+0x66>
 8091bb0:	18ba      	adds	r2, r7, r2
 8091bb2:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8091bb6:	f080 8118 	bcs.w	8091dea <__udivmoddi4+0x28a>
 8091bba:	4290      	cmp	r0, r2
 8091bbc:	f240 8115 	bls.w	8091dea <__udivmoddi4+0x28a>
 8091bc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8091bc4:	443a      	add	r2, r7
 8091bc6:	1a12      	subs	r2, r2, r0
 8091bc8:	fbb2 f0f8 	udiv	r0, r2, r8
 8091bcc:	fb08 2210 	mls	r2, r8, r0, r2
 8091bd0:	fb00 f109 	mul.w	r1, r0, r9
 8091bd4:	b2a4      	uxth	r4, r4
 8091bd6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8091bda:	42a1      	cmp	r1, r4
 8091bdc:	d909      	bls.n	8091bf2 <__udivmoddi4+0x92>
 8091bde:	193c      	adds	r4, r7, r4
 8091be0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8091be4:	f080 8103 	bcs.w	8091dee <__udivmoddi4+0x28e>
 8091be8:	42a1      	cmp	r1, r4
 8091bea:	f240 8100 	bls.w	8091dee <__udivmoddi4+0x28e>
 8091bee:	3802      	subs	r0, #2
 8091bf0:	443c      	add	r4, r7
 8091bf2:	1a64      	subs	r4, r4, r1
 8091bf4:	2100      	movs	r1, #0
 8091bf6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8091bfa:	b11e      	cbz	r6, 8091c04 <__udivmoddi4+0xa4>
 8091bfc:	2200      	movs	r2, #0
 8091bfe:	40dc      	lsrs	r4, r3
 8091c00:	e9c6 4200 	strd	r4, r2, [r6]
 8091c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8091c08:	b902      	cbnz	r2, 8091c0c <__udivmoddi4+0xac>
 8091c0a:	deff      	udf	#255	; 0xff
 8091c0c:	fab2 f382 	clz	r3, r2
 8091c10:	2b00      	cmp	r3, #0
 8091c12:	d14f      	bne.n	8091cb4 <__udivmoddi4+0x154>
 8091c14:	1a8d      	subs	r5, r1, r2
 8091c16:	2101      	movs	r1, #1
 8091c18:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8091c1c:	fa1f f882 	uxth.w	r8, r2
 8091c20:	fbb5 fcfe 	udiv	ip, r5, lr
 8091c24:	fb0e 551c 	mls	r5, lr, ip, r5
 8091c28:	fb08 f00c 	mul.w	r0, r8, ip
 8091c2c:	0c22      	lsrs	r2, r4, #16
 8091c2e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8091c32:	42a8      	cmp	r0, r5
 8091c34:	d907      	bls.n	8091c46 <__udivmoddi4+0xe6>
 8091c36:	197d      	adds	r5, r7, r5
 8091c38:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8091c3c:	d202      	bcs.n	8091c44 <__udivmoddi4+0xe4>
 8091c3e:	42a8      	cmp	r0, r5
 8091c40:	f200 80e9 	bhi.w	8091e16 <__udivmoddi4+0x2b6>
 8091c44:	4694      	mov	ip, r2
 8091c46:	1a2d      	subs	r5, r5, r0
 8091c48:	fbb5 f0fe 	udiv	r0, r5, lr
 8091c4c:	fb0e 5510 	mls	r5, lr, r0, r5
 8091c50:	fb08 f800 	mul.w	r8, r8, r0
 8091c54:	b2a4      	uxth	r4, r4
 8091c56:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8091c5a:	45a0      	cmp	r8, r4
 8091c5c:	d907      	bls.n	8091c6e <__udivmoddi4+0x10e>
 8091c5e:	193c      	adds	r4, r7, r4
 8091c60:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8091c64:	d202      	bcs.n	8091c6c <__udivmoddi4+0x10c>
 8091c66:	45a0      	cmp	r8, r4
 8091c68:	f200 80d9 	bhi.w	8091e1e <__udivmoddi4+0x2be>
 8091c6c:	4610      	mov	r0, r2
 8091c6e:	eba4 0408 	sub.w	r4, r4, r8
 8091c72:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8091c76:	e7c0      	b.n	8091bfa <__udivmoddi4+0x9a>
 8091c78:	428b      	cmp	r3, r1
 8091c7a:	d908      	bls.n	8091c8e <__udivmoddi4+0x12e>
 8091c7c:	2e00      	cmp	r6, #0
 8091c7e:	f000 80b1 	beq.w	8091de4 <__udivmoddi4+0x284>
 8091c82:	2100      	movs	r1, #0
 8091c84:	e9c6 0500 	strd	r0, r5, [r6]
 8091c88:	4608      	mov	r0, r1
 8091c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8091c8e:	fab3 f183 	clz	r1, r3
 8091c92:	2900      	cmp	r1, #0
 8091c94:	d14b      	bne.n	8091d2e <__udivmoddi4+0x1ce>
 8091c96:	42ab      	cmp	r3, r5
 8091c98:	d302      	bcc.n	8091ca0 <__udivmoddi4+0x140>
 8091c9a:	4282      	cmp	r2, r0
 8091c9c:	f200 80b9 	bhi.w	8091e12 <__udivmoddi4+0x2b2>
 8091ca0:	1a84      	subs	r4, r0, r2
 8091ca2:	eb65 0303 	sbc.w	r3, r5, r3
 8091ca6:	2001      	movs	r0, #1
 8091ca8:	469e      	mov	lr, r3
 8091caa:	2e00      	cmp	r6, #0
 8091cac:	d0aa      	beq.n	8091c04 <__udivmoddi4+0xa4>
 8091cae:	e9c6 4e00 	strd	r4, lr, [r6]
 8091cb2:	e7a7      	b.n	8091c04 <__udivmoddi4+0xa4>
 8091cb4:	409f      	lsls	r7, r3
 8091cb6:	f1c3 0220 	rsb	r2, r3, #32
 8091cba:	40d1      	lsrs	r1, r2
 8091cbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8091cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8091cc4:	fa1f f887 	uxth.w	r8, r7
 8091cc8:	fb0e 1110 	mls	r1, lr, r0, r1
 8091ccc:	fa24 f202 	lsr.w	r2, r4, r2
 8091cd0:	409d      	lsls	r5, r3
 8091cd2:	fb00 fc08 	mul.w	ip, r0, r8
 8091cd6:	432a      	orrs	r2, r5
 8091cd8:	0c15      	lsrs	r5, r2, #16
 8091cda:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8091cde:	45ac      	cmp	ip, r5
 8091ce0:	fa04 f403 	lsl.w	r4, r4, r3
 8091ce4:	d909      	bls.n	8091cfa <__udivmoddi4+0x19a>
 8091ce6:	197d      	adds	r5, r7, r5
 8091ce8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8091cec:	f080 808f 	bcs.w	8091e0e <__udivmoddi4+0x2ae>
 8091cf0:	45ac      	cmp	ip, r5
 8091cf2:	f240 808c 	bls.w	8091e0e <__udivmoddi4+0x2ae>
 8091cf6:	3802      	subs	r0, #2
 8091cf8:	443d      	add	r5, r7
 8091cfa:	eba5 050c 	sub.w	r5, r5, ip
 8091cfe:	fbb5 f1fe 	udiv	r1, r5, lr
 8091d02:	fb0e 5c11 	mls	ip, lr, r1, r5
 8091d06:	fb01 f908 	mul.w	r9, r1, r8
 8091d0a:	b295      	uxth	r5, r2
 8091d0c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8091d10:	45a9      	cmp	r9, r5
 8091d12:	d907      	bls.n	8091d24 <__udivmoddi4+0x1c4>
 8091d14:	197d      	adds	r5, r7, r5
 8091d16:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 8091d1a:	d274      	bcs.n	8091e06 <__udivmoddi4+0x2a6>
 8091d1c:	45a9      	cmp	r9, r5
 8091d1e:	d972      	bls.n	8091e06 <__udivmoddi4+0x2a6>
 8091d20:	3902      	subs	r1, #2
 8091d22:	443d      	add	r5, r7
 8091d24:	eba5 0509 	sub.w	r5, r5, r9
 8091d28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8091d2c:	e778      	b.n	8091c20 <__udivmoddi4+0xc0>
 8091d2e:	f1c1 0720 	rsb	r7, r1, #32
 8091d32:	408b      	lsls	r3, r1
 8091d34:	fa22 fc07 	lsr.w	ip, r2, r7
 8091d38:	ea4c 0c03 	orr.w	ip, ip, r3
 8091d3c:	fa25 f407 	lsr.w	r4, r5, r7
 8091d40:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8091d44:	fbb4 f9fe 	udiv	r9, r4, lr
 8091d48:	fa1f f88c 	uxth.w	r8, ip
 8091d4c:	fb0e 4419 	mls	r4, lr, r9, r4
 8091d50:	fa20 f307 	lsr.w	r3, r0, r7
 8091d54:	fb09 fa08 	mul.w	sl, r9, r8
 8091d58:	408d      	lsls	r5, r1
 8091d5a:	431d      	orrs	r5, r3
 8091d5c:	0c2b      	lsrs	r3, r5, #16
 8091d5e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8091d62:	45a2      	cmp	sl, r4
 8091d64:	fa02 f201 	lsl.w	r2, r2, r1
 8091d68:	fa00 f301 	lsl.w	r3, r0, r1
 8091d6c:	d909      	bls.n	8091d82 <__udivmoddi4+0x222>
 8091d6e:	eb1c 0404 	adds.w	r4, ip, r4
 8091d72:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8091d76:	d248      	bcs.n	8091e0a <__udivmoddi4+0x2aa>
 8091d78:	45a2      	cmp	sl, r4
 8091d7a:	d946      	bls.n	8091e0a <__udivmoddi4+0x2aa>
 8091d7c:	f1a9 0902 	sub.w	r9, r9, #2
 8091d80:	4464      	add	r4, ip
 8091d82:	eba4 040a 	sub.w	r4, r4, sl
 8091d86:	fbb4 f0fe 	udiv	r0, r4, lr
 8091d8a:	fb0e 4410 	mls	r4, lr, r0, r4
 8091d8e:	fb00 fa08 	mul.w	sl, r0, r8
 8091d92:	b2ad      	uxth	r5, r5
 8091d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8091d98:	45a2      	cmp	sl, r4
 8091d9a:	d908      	bls.n	8091dae <__udivmoddi4+0x24e>
 8091d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8091da0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8091da4:	d22d      	bcs.n	8091e02 <__udivmoddi4+0x2a2>
 8091da6:	45a2      	cmp	sl, r4
 8091da8:	d92b      	bls.n	8091e02 <__udivmoddi4+0x2a2>
 8091daa:	3802      	subs	r0, #2
 8091dac:	4464      	add	r4, ip
 8091dae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8091db2:	fba0 8902 	umull	r8, r9, r0, r2
 8091db6:	eba4 040a 	sub.w	r4, r4, sl
 8091dba:	454c      	cmp	r4, r9
 8091dbc:	46c6      	mov	lr, r8
 8091dbe:	464d      	mov	r5, r9
 8091dc0:	d319      	bcc.n	8091df6 <__udivmoddi4+0x296>
 8091dc2:	d016      	beq.n	8091df2 <__udivmoddi4+0x292>
 8091dc4:	b15e      	cbz	r6, 8091dde <__udivmoddi4+0x27e>
 8091dc6:	ebb3 020e 	subs.w	r2, r3, lr
 8091dca:	eb64 0405 	sbc.w	r4, r4, r5
 8091dce:	fa04 f707 	lsl.w	r7, r4, r7
 8091dd2:	fa22 f301 	lsr.w	r3, r2, r1
 8091dd6:	431f      	orrs	r7, r3
 8091dd8:	40cc      	lsrs	r4, r1
 8091dda:	e9c6 7400 	strd	r7, r4, [r6]
 8091dde:	2100      	movs	r1, #0
 8091de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8091de4:	4631      	mov	r1, r6
 8091de6:	4630      	mov	r0, r6
 8091de8:	e70c      	b.n	8091c04 <__udivmoddi4+0xa4>
 8091dea:	468c      	mov	ip, r1
 8091dec:	e6eb      	b.n	8091bc6 <__udivmoddi4+0x66>
 8091dee:	4610      	mov	r0, r2
 8091df0:	e6ff      	b.n	8091bf2 <__udivmoddi4+0x92>
 8091df2:	4543      	cmp	r3, r8
 8091df4:	d2e6      	bcs.n	8091dc4 <__udivmoddi4+0x264>
 8091df6:	ebb8 0e02 	subs.w	lr, r8, r2
 8091dfa:	eb69 050c 	sbc.w	r5, r9, ip
 8091dfe:	3801      	subs	r0, #1
 8091e00:	e7e0      	b.n	8091dc4 <__udivmoddi4+0x264>
 8091e02:	4628      	mov	r0, r5
 8091e04:	e7d3      	b.n	8091dae <__udivmoddi4+0x24e>
 8091e06:	4611      	mov	r1, r2
 8091e08:	e78c      	b.n	8091d24 <__udivmoddi4+0x1c4>
 8091e0a:	4681      	mov	r9, r0
 8091e0c:	e7b9      	b.n	8091d82 <__udivmoddi4+0x222>
 8091e0e:	4608      	mov	r0, r1
 8091e10:	e773      	b.n	8091cfa <__udivmoddi4+0x19a>
 8091e12:	4608      	mov	r0, r1
 8091e14:	e749      	b.n	8091caa <__udivmoddi4+0x14a>
 8091e16:	f1ac 0c02 	sub.w	ip, ip, #2
 8091e1a:	443d      	add	r5, r7
 8091e1c:	e713      	b.n	8091c46 <__udivmoddi4+0xe6>
 8091e1e:	3802      	subs	r0, #2
 8091e20:	443c      	add	r4, r7
 8091e22:	e724      	b.n	8091c6e <__udivmoddi4+0x10e>

08091e24 <__aeabi_idiv0>:
 8091e24:	4770      	bx	lr
 8091e26:	bf00      	nop

08091e28 <atoi>:
 8091e28:	220a      	movs	r2, #10
 8091e2a:	2100      	movs	r1, #0
 8091e2c:	f000 b98e 	b.w	809214c <strtol>

08091e30 <__cxa_atexit>:
 8091e30:	b510      	push	{r4, lr}
 8091e32:	4604      	mov	r4, r0
 8091e34:	4804      	ldr	r0, [pc, #16]	; (8091e48 <__cxa_atexit+0x18>)
 8091e36:	4613      	mov	r3, r2
 8091e38:	b120      	cbz	r0, 8091e44 <__cxa_atexit+0x14>
 8091e3a:	460a      	mov	r2, r1
 8091e3c:	2002      	movs	r0, #2
 8091e3e:	4621      	mov	r1, r4
 8091e40:	f3af 8000 	nop.w
 8091e44:	bd10      	pop	{r4, pc}
 8091e46:	bf00      	nop
 8091e48:	00000000 	.word	0x00000000

08091e4c <ldiv>:
 8091e4c:	b510      	push	{r4, lr}
 8091e4e:	fb91 f4f2 	sdiv	r4, r1, r2
 8091e52:	2900      	cmp	r1, #0
 8091e54:	fb02 1314 	mls	r3, r2, r4, r1
 8091e58:	db06      	blt.n	8091e68 <ldiv+0x1c>
 8091e5a:	2b00      	cmp	r3, #0
 8091e5c:	da01      	bge.n	8091e62 <ldiv+0x16>
 8091e5e:	3401      	adds	r4, #1
 8091e60:	1a9b      	subs	r3, r3, r2
 8091e62:	e9c0 4300 	strd	r4, r3, [r0]
 8091e66:	bd10      	pop	{r4, pc}
 8091e68:	2b00      	cmp	r3, #0
 8091e6a:	bfc4      	itt	gt
 8091e6c:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
 8091e70:	189b      	addgt	r3, r3, r2
 8091e72:	e7f6      	b.n	8091e62 <ldiv+0x16>

08091e74 <memcpy>:
 8091e74:	440a      	add	r2, r1
 8091e76:	4291      	cmp	r1, r2
 8091e78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8091e7c:	d100      	bne.n	8091e80 <memcpy+0xc>
 8091e7e:	4770      	bx	lr
 8091e80:	b510      	push	{r4, lr}
 8091e82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8091e86:	4291      	cmp	r1, r2
 8091e88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8091e8c:	d1f9      	bne.n	8091e82 <memcpy+0xe>
 8091e8e:	bd10      	pop	{r4, pc}

08091e90 <memmove>:
 8091e90:	4288      	cmp	r0, r1
 8091e92:	b510      	push	{r4, lr}
 8091e94:	eb01 0402 	add.w	r4, r1, r2
 8091e98:	d902      	bls.n	8091ea0 <memmove+0x10>
 8091e9a:	4284      	cmp	r4, r0
 8091e9c:	4623      	mov	r3, r4
 8091e9e:	d807      	bhi.n	8091eb0 <memmove+0x20>
 8091ea0:	1e43      	subs	r3, r0, #1
 8091ea2:	42a1      	cmp	r1, r4
 8091ea4:	d008      	beq.n	8091eb8 <memmove+0x28>
 8091ea6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8091eaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8091eae:	e7f8      	b.n	8091ea2 <memmove+0x12>
 8091eb0:	4601      	mov	r1, r0
 8091eb2:	4402      	add	r2, r0
 8091eb4:	428a      	cmp	r2, r1
 8091eb6:	d100      	bne.n	8091eba <memmove+0x2a>
 8091eb8:	bd10      	pop	{r4, pc}
 8091eba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8091ebe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8091ec2:	e7f7      	b.n	8091eb4 <memmove+0x24>

08091ec4 <memset>:
 8091ec4:	4603      	mov	r3, r0
 8091ec6:	4402      	add	r2, r0
 8091ec8:	4293      	cmp	r3, r2
 8091eca:	d100      	bne.n	8091ece <memset+0xa>
 8091ecc:	4770      	bx	lr
 8091ece:	f803 1b01 	strb.w	r1, [r3], #1
 8091ed2:	e7f9      	b.n	8091ec8 <memset+0x4>

08091ed4 <srand>:
 8091ed4:	b538      	push	{r3, r4, r5, lr}
 8091ed6:	4b0d      	ldr	r3, [pc, #52]	; (8091f0c <srand+0x38>)
 8091ed8:	4604      	mov	r4, r0
 8091eda:	681d      	ldr	r5, [r3, #0]
 8091edc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8091ede:	b97b      	cbnz	r3, 8091f00 <srand+0x2c>
 8091ee0:	2018      	movs	r0, #24
 8091ee2:	f7fb fb19 	bl	808d518 <malloc>
 8091ee6:	4a0a      	ldr	r2, [pc, #40]	; (8091f10 <srand+0x3c>)
 8091ee8:	4b0a      	ldr	r3, [pc, #40]	; (8091f14 <srand+0x40>)
 8091eea:	63a8      	str	r0, [r5, #56]	; 0x38
 8091eec:	e9c0 2300 	strd	r2, r3, [r0]
 8091ef0:	4b09      	ldr	r3, [pc, #36]	; (8091f18 <srand+0x44>)
 8091ef2:	2201      	movs	r2, #1
 8091ef4:	6083      	str	r3, [r0, #8]
 8091ef6:	230b      	movs	r3, #11
 8091ef8:	8183      	strh	r3, [r0, #12]
 8091efa:	2300      	movs	r3, #0
 8091efc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8091f00:	2200      	movs	r2, #0
 8091f02:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8091f04:	611c      	str	r4, [r3, #16]
 8091f06:	615a      	str	r2, [r3, #20]
 8091f08:	bd38      	pop	{r3, r4, r5, pc}
 8091f0a:	bf00      	nop
 8091f0c:	2000054c 	.word	0x2000054c
 8091f10:	abcd330e 	.word	0xabcd330e
 8091f14:	e66d1234 	.word	0xe66d1234
 8091f18:	0005deec 	.word	0x0005deec

08091f1c <strchr>:
 8091f1c:	4603      	mov	r3, r0
 8091f1e:	b2c9      	uxtb	r1, r1
 8091f20:	4618      	mov	r0, r3
 8091f22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8091f26:	b112      	cbz	r2, 8091f2e <strchr+0x12>
 8091f28:	428a      	cmp	r2, r1
 8091f2a:	d1f9      	bne.n	8091f20 <strchr+0x4>
 8091f2c:	4770      	bx	lr
 8091f2e:	2900      	cmp	r1, #0
 8091f30:	bf18      	it	ne
 8091f32:	2000      	movne	r0, #0
 8091f34:	4770      	bx	lr

08091f36 <strchrnul>:
 8091f36:	b510      	push	{r4, lr}
 8091f38:	4604      	mov	r4, r0
 8091f3a:	f7ff ffef 	bl	8091f1c <strchr>
 8091f3e:	b918      	cbnz	r0, 8091f48 <strchrnul+0x12>
 8091f40:	4620      	mov	r0, r4
 8091f42:	f000 f830 	bl	8091fa6 <strlen>
 8091f46:	4420      	add	r0, r4
 8091f48:	bd10      	pop	{r4, pc}

08091f4a <strcmp>:
 8091f4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8091f4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8091f52:	2a01      	cmp	r2, #1
 8091f54:	bf28      	it	cs
 8091f56:	429a      	cmpcs	r2, r3
 8091f58:	d0f7      	beq.n	8091f4a <strcmp>
 8091f5a:	1ad0      	subs	r0, r2, r3
 8091f5c:	4770      	bx	lr

08091f5e <strcpy>:
 8091f5e:	4603      	mov	r3, r0
 8091f60:	f811 2b01 	ldrb.w	r2, [r1], #1
 8091f64:	f803 2b01 	strb.w	r2, [r3], #1
 8091f68:	2a00      	cmp	r2, #0
 8091f6a:	d1f9      	bne.n	8091f60 <strcpy+0x2>
 8091f6c:	4770      	bx	lr
	...

08091f70 <strdup>:
 8091f70:	4b02      	ldr	r3, [pc, #8]	; (8091f7c <strdup+0xc>)
 8091f72:	4601      	mov	r1, r0
 8091f74:	6818      	ldr	r0, [r3, #0]
 8091f76:	f000 b803 	b.w	8091f80 <_strdup_r>
 8091f7a:	bf00      	nop
 8091f7c:	2000054c 	.word	0x2000054c

08091f80 <_strdup_r>:
 8091f80:	b570      	push	{r4, r5, r6, lr}
 8091f82:	4604      	mov	r4, r0
 8091f84:	4608      	mov	r0, r1
 8091f86:	460d      	mov	r5, r1
 8091f88:	f000 f80d 	bl	8091fa6 <strlen>
 8091f8c:	1c46      	adds	r6, r0, #1
 8091f8e:	4631      	mov	r1, r6
 8091f90:	4620      	mov	r0, r4
 8091f92:	f7fb fb01 	bl	808d598 <_malloc_r>
 8091f96:	4604      	mov	r4, r0
 8091f98:	b118      	cbz	r0, 8091fa2 <_strdup_r+0x22>
 8091f9a:	4632      	mov	r2, r6
 8091f9c:	4629      	mov	r1, r5
 8091f9e:	f7ff ff69 	bl	8091e74 <memcpy>
 8091fa2:	4620      	mov	r0, r4
 8091fa4:	bd70      	pop	{r4, r5, r6, pc}

08091fa6 <strlen>:
 8091fa6:	4603      	mov	r3, r0
 8091fa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8091fac:	2a00      	cmp	r2, #0
 8091fae:	d1fb      	bne.n	8091fa8 <strlen+0x2>
 8091fb0:	1a18      	subs	r0, r3, r0
 8091fb2:	3801      	subs	r0, #1
 8091fb4:	4770      	bx	lr

08091fb6 <strncmp>:
 8091fb6:	b510      	push	{r4, lr}
 8091fb8:	b16a      	cbz	r2, 8091fd6 <strncmp+0x20>
 8091fba:	3901      	subs	r1, #1
 8091fbc:	1884      	adds	r4, r0, r2
 8091fbe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8091fc2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8091fc6:	4293      	cmp	r3, r2
 8091fc8:	d103      	bne.n	8091fd2 <strncmp+0x1c>
 8091fca:	42a0      	cmp	r0, r4
 8091fcc:	d001      	beq.n	8091fd2 <strncmp+0x1c>
 8091fce:	2b00      	cmp	r3, #0
 8091fd0:	d1f5      	bne.n	8091fbe <strncmp+0x8>
 8091fd2:	1a98      	subs	r0, r3, r2
 8091fd4:	bd10      	pop	{r4, pc}
 8091fd6:	4610      	mov	r0, r2
 8091fd8:	e7fc      	b.n	8091fd4 <strncmp+0x1e>

08091fda <strncpy>:
 8091fda:	4603      	mov	r3, r0
 8091fdc:	b510      	push	{r4, lr}
 8091fde:	3901      	subs	r1, #1
 8091fe0:	b132      	cbz	r2, 8091ff0 <strncpy+0x16>
 8091fe2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8091fe6:	3a01      	subs	r2, #1
 8091fe8:	f803 4b01 	strb.w	r4, [r3], #1
 8091fec:	2c00      	cmp	r4, #0
 8091fee:	d1f7      	bne.n	8091fe0 <strncpy+0x6>
 8091ff0:	2100      	movs	r1, #0
 8091ff2:	441a      	add	r2, r3
 8091ff4:	4293      	cmp	r3, r2
 8091ff6:	d100      	bne.n	8091ffa <strncpy+0x20>
 8091ff8:	bd10      	pop	{r4, pc}
 8091ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8091ffe:	e7f9      	b.n	8091ff4 <strncpy+0x1a>

08092000 <strrchr>:
 8092000:	b538      	push	{r3, r4, r5, lr}
 8092002:	4603      	mov	r3, r0
 8092004:	460c      	mov	r4, r1
 8092006:	b969      	cbnz	r1, 8092024 <strrchr+0x24>
 8092008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 809200c:	f7ff bf86 	b.w	8091f1c <strchr>
 8092010:	4605      	mov	r5, r0
 8092012:	1c43      	adds	r3, r0, #1
 8092014:	4621      	mov	r1, r4
 8092016:	4618      	mov	r0, r3
 8092018:	f7ff ff80 	bl	8091f1c <strchr>
 809201c:	2800      	cmp	r0, #0
 809201e:	d1f7      	bne.n	8092010 <strrchr+0x10>
 8092020:	4628      	mov	r0, r5
 8092022:	bd38      	pop	{r3, r4, r5, pc}
 8092024:	2500      	movs	r5, #0
 8092026:	e7f5      	b.n	8092014 <strrchr+0x14>

08092028 <strstr>:
 8092028:	b5f0      	push	{r4, r5, r6, r7, lr}
 809202a:	780c      	ldrb	r4, [r1, #0]
 809202c:	b164      	cbz	r4, 8092048 <strstr+0x20>
 809202e:	4603      	mov	r3, r0
 8092030:	781a      	ldrb	r2, [r3, #0]
 8092032:	4618      	mov	r0, r3
 8092034:	1c5e      	adds	r6, r3, #1
 8092036:	b90a      	cbnz	r2, 809203c <strstr+0x14>
 8092038:	4610      	mov	r0, r2
 809203a:	e005      	b.n	8092048 <strstr+0x20>
 809203c:	4294      	cmp	r4, r2
 809203e:	d108      	bne.n	8092052 <strstr+0x2a>
 8092040:	460d      	mov	r5, r1
 8092042:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8092046:	b902      	cbnz	r2, 809204a <strstr+0x22>
 8092048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 809204a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 809204e:	4297      	cmp	r7, r2
 8092050:	d0f7      	beq.n	8092042 <strstr+0x1a>
 8092052:	4633      	mov	r3, r6
 8092054:	e7ec      	b.n	8092030 <strstr+0x8>
	...

08092058 <_strtol_l.isra.0>:
 8092058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 809205c:	468c      	mov	ip, r1
 809205e:	4686      	mov	lr, r0
 8092060:	4e39      	ldr	r6, [pc, #228]	; (8092148 <_strtol_l.isra.0+0xf0>)
 8092062:	4660      	mov	r0, ip
 8092064:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8092068:	5da5      	ldrb	r5, [r4, r6]
 809206a:	f015 0508 	ands.w	r5, r5, #8
 809206e:	d1f8      	bne.n	8092062 <_strtol_l.isra.0+0xa>
 8092070:	2c2d      	cmp	r4, #45	; 0x2d
 8092072:	d133      	bne.n	80920dc <_strtol_l.isra.0+0x84>
 8092074:	f04f 0801 	mov.w	r8, #1
 8092078:	f89c 4000 	ldrb.w	r4, [ip]
 809207c:	f100 0c02 	add.w	ip, r0, #2
 8092080:	2b00      	cmp	r3, #0
 8092082:	d05c      	beq.n	809213e <_strtol_l.isra.0+0xe6>
 8092084:	2b10      	cmp	r3, #16
 8092086:	d10c      	bne.n	80920a2 <_strtol_l.isra.0+0x4a>
 8092088:	2c30      	cmp	r4, #48	; 0x30
 809208a:	d10a      	bne.n	80920a2 <_strtol_l.isra.0+0x4a>
 809208c:	f89c 0000 	ldrb.w	r0, [ip]
 8092090:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8092094:	2858      	cmp	r0, #88	; 0x58
 8092096:	d14d      	bne.n	8092134 <_strtol_l.isra.0+0xdc>
 8092098:	2310      	movs	r3, #16
 809209a:	f89c 4001 	ldrb.w	r4, [ip, #1]
 809209e:	f10c 0c02 	add.w	ip, ip, #2
 80920a2:	2600      	movs	r6, #0
 80920a4:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80920a8:	3f01      	subs	r7, #1
 80920aa:	fbb7 f9f3 	udiv	r9, r7, r3
 80920ae:	4630      	mov	r0, r6
 80920b0:	fb03 7a19 	mls	sl, r3, r9, r7
 80920b4:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80920b8:	2d09      	cmp	r5, #9
 80920ba:	d818      	bhi.n	80920ee <_strtol_l.isra.0+0x96>
 80920bc:	462c      	mov	r4, r5
 80920be:	42a3      	cmp	r3, r4
 80920c0:	dd24      	ble.n	809210c <_strtol_l.isra.0+0xb4>
 80920c2:	1c75      	adds	r5, r6, #1
 80920c4:	d007      	beq.n	80920d6 <_strtol_l.isra.0+0x7e>
 80920c6:	4581      	cmp	r9, r0
 80920c8:	d31d      	bcc.n	8092106 <_strtol_l.isra.0+0xae>
 80920ca:	d101      	bne.n	80920d0 <_strtol_l.isra.0+0x78>
 80920cc:	45a2      	cmp	sl, r4
 80920ce:	db1a      	blt.n	8092106 <_strtol_l.isra.0+0xae>
 80920d0:	2601      	movs	r6, #1
 80920d2:	fb00 4003 	mla	r0, r0, r3, r4
 80920d6:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80920da:	e7eb      	b.n	80920b4 <_strtol_l.isra.0+0x5c>
 80920dc:	2c2b      	cmp	r4, #43	; 0x2b
 80920de:	bf08      	it	eq
 80920e0:	f89c 4000 	ldrbeq.w	r4, [ip]
 80920e4:	46a8      	mov	r8, r5
 80920e6:	bf08      	it	eq
 80920e8:	f100 0c02 	addeq.w	ip, r0, #2
 80920ec:	e7c8      	b.n	8092080 <_strtol_l.isra.0+0x28>
 80920ee:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80920f2:	2d19      	cmp	r5, #25
 80920f4:	d801      	bhi.n	80920fa <_strtol_l.isra.0+0xa2>
 80920f6:	3c37      	subs	r4, #55	; 0x37
 80920f8:	e7e1      	b.n	80920be <_strtol_l.isra.0+0x66>
 80920fa:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80920fe:	2d19      	cmp	r5, #25
 8092100:	d804      	bhi.n	809210c <_strtol_l.isra.0+0xb4>
 8092102:	3c57      	subs	r4, #87	; 0x57
 8092104:	e7db      	b.n	80920be <_strtol_l.isra.0+0x66>
 8092106:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 809210a:	e7e4      	b.n	80920d6 <_strtol_l.isra.0+0x7e>
 809210c:	1c73      	adds	r3, r6, #1
 809210e:	d106      	bne.n	809211e <_strtol_l.isra.0+0xc6>
 8092110:	2322      	movs	r3, #34	; 0x22
 8092112:	4638      	mov	r0, r7
 8092114:	f8ce 3000 	str.w	r3, [lr]
 8092118:	b942      	cbnz	r2, 809212c <_strtol_l.isra.0+0xd4>
 809211a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 809211e:	f1b8 0f00 	cmp.w	r8, #0
 8092122:	d000      	beq.n	8092126 <_strtol_l.isra.0+0xce>
 8092124:	4240      	negs	r0, r0
 8092126:	2a00      	cmp	r2, #0
 8092128:	d0f7      	beq.n	809211a <_strtol_l.isra.0+0xc2>
 809212a:	b10e      	cbz	r6, 8092130 <_strtol_l.isra.0+0xd8>
 809212c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8092130:	6011      	str	r1, [r2, #0]
 8092132:	e7f2      	b.n	809211a <_strtol_l.isra.0+0xc2>
 8092134:	2430      	movs	r4, #48	; 0x30
 8092136:	2b00      	cmp	r3, #0
 8092138:	d1b3      	bne.n	80920a2 <_strtol_l.isra.0+0x4a>
 809213a:	2308      	movs	r3, #8
 809213c:	e7b1      	b.n	80920a2 <_strtol_l.isra.0+0x4a>
 809213e:	2c30      	cmp	r4, #48	; 0x30
 8092140:	d0a4      	beq.n	809208c <_strtol_l.isra.0+0x34>
 8092142:	230a      	movs	r3, #10
 8092144:	e7ad      	b.n	80920a2 <_strtol_l.isra.0+0x4a>
 8092146:	bf00      	nop
 8092148:	080951f3 	.word	0x080951f3

0809214c <strtol>:
 809214c:	4613      	mov	r3, r2
 809214e:	460a      	mov	r2, r1
 8092150:	4601      	mov	r1, r0
 8092152:	4802      	ldr	r0, [pc, #8]	; (809215c <strtol+0x10>)
 8092154:	6800      	ldr	r0, [r0, #0]
 8092156:	f7ff bf7f 	b.w	8092058 <_strtol_l.isra.0>
 809215a:	bf00      	nop
 809215c:	2000054c 	.word	0x2000054c

08092160 <tolower>:
 8092160:	4b03      	ldr	r3, [pc, #12]	; (8092170 <tolower+0x10>)
 8092162:	5cc3      	ldrb	r3, [r0, r3]
 8092164:	f003 0303 	and.w	r3, r3, #3
 8092168:	2b01      	cmp	r3, #1
 809216a:	bf08      	it	eq
 809216c:	3020      	addeq	r0, #32
 809216e:	4770      	bx	lr
 8092170:	080951f3 	.word	0x080951f3

08092174 <dynalib_user>:
 8092174:	08080021 08080061 08080089 0808008d     !...a...........
 8092184:	00000000 203a6367 73617265 6c622065     ....gc: erase bl
 8092194:	206b636f 78343025 6367000a 6975715f     ock %04x..gc_qui
 80921a4:	203a6b63 6e6e7572 0a676e69 5f636700     ck: running..gc_
 80921b4:	63656863 77203a6b 20657069 6c6c6170     check: wipe pall
 80921c4:	64253a6f 65647020 253a656c 67000a64     o:%d pdele:%d..g
 80921d4:	68635f63 3a6b6365 78696220 3430253a     c_check: bix:%04
 80921e4:	65642078 64253a6c 65737520 2064253a     x del:%d use:%d 
 80921f4:	726f6373 64253a65 6367000a 656c635f     score:%d..gc_cle
 8092204:	203a6e61 61656c63 676e696e 6f6c6220     an: cleaning blo
 8092214:	25206b63 0a783430 5f636700 61656c63     ck %04x..gc_clea
 8092224:	6d203a6e 2065766f 65657266 72756320     n: move free cur
 8092234:	20726f73 62206f74 6b636f6c 34302520     sor to block %04
 8092244:	67000a78 6c635f63 3a6e6165 61747320     x..gc_clean: sta
 8092254:	3d206574 20642520 72746e65 64253a79     te = %d entry:%d
 8092264:	6367000a 656c635f 203a6e61 444e4946     ..gc_clean: FIND
 8092274:	5441445f 74732041 3a657461 2d206425     _DATA state:%d -
 8092284:	756f6620 6f20646e 69206a62 30252064      found obj id %0
 8092294:	000a7834 635f6367 6e61656c 4f4d203a     4x..gc_clean: MO
 80922a4:	445f4556 20415441 6e756f66 61642064     VE_DATA found da
 80922b4:	70206174 20656761 78343025 3430253a     ta page %04x:%04
 80922c4:	20402078 78343025 6367000a 656c635f     x @ %04x..gc_cle
 80922d4:	203a6e61 45564f4d 5441445f 6f6e2041     an: MOVE_DATA no
 80922e4:	6a626f20 73207869 20786970 6374616d      objix spix matc
 80922f4:	74202c68 20656b61 61206e69 68746f6e     h, take in anoth
 8092304:	72207265 000a6e75 635f6367 6e61656c     er run..gc_clean
 8092314:	4f4d203a 445f4556 20415441 65766f6d     : MOVE_DATA move
 8092324:	6a626f20 25207869 3a783430 78343025      objix %04x:%04x
 8092334:	67617020 30252065 74207834 3025206f      page %04x to %0
 8092344:	000a7834 635f6367 6e61656c 4f4d203a     4x..gc_clean: MO
 8092354:	445f4556 20415441 65706977 6a626f20     VE_DATA wipe obj
 8092364:	25207869 3a783430 78343025 67617020     ix %04x:%04x pag
 8092374:	30252065 000a7834 635f6367 6e61656c     e %04x..gc_clean
 8092384:	4f4d203a 445f4556 20415441 746f7277     : MOVE_DATA wrot
 8092394:	61702065 25206567 20783430 6f206f74     e page %04x to o
 80923a4:	78696a62 7264685f 746e6520 25207972     bjix_hdr entry %
 80923b4:	20783430 6d206e69 000a6d65 635f6367     04x in mem..gc_c
 80923c4:	6e61656c 4f4d203a 445f4556 20415441     lean: MOVE_DATA 
 80923d4:	746f7277 61702065 25206567 20783430     wrote page %04x 
 80923e4:	6f206f74 78696a62 746e6520 25207972     to objix entry %
 80923f4:	20783430 6d206e69 000a6d65 635f6367     04x in mem..gc_c
 8092404:	6e61656c 4f4d203a 4f5f4556 58494a42     lean: MOVE_OBJIX
 8092414:	766f6d20 626f2065 2078696a 78343025      move objix %04x
 8092424:	3430253a 61702078 25206567 20783430     :%04x page %04x 
 8092434:	25206f74 0a783430 5f636700 61656c63     to %04x..gc_clea
 8092444:	4d203a6e 5f45564f 494a424f 69772058     n: MOVE_OBJIX wi
 8092454:	6f206570 78696a62 34302520 30253a78     pe objix %04x:%0
 8092464:	70207834 20656761 78343025 6367000a     4x page %04x..gc
 8092474:	656c635f 203a6e61 444e4946 5441445f     _clean: FIND_DAT
 8092484:	69662041 6f20646e 78696a62 61707320     A find objix spa
 8092494:	78695f6e 3430253a 67000a78 6c635f63     n_ix:%04x..gc_cl
 80924a4:	3a6e6165 4e494620 424f5f44 41445f4a     ean: FIND_OBJ_DA
 80924b4:	6f204154 78696a62 746f6e20 756f6620     TA objix not fou
 80924c4:	2021646e 65706957 67617020 30252065     nd! Wipe page %0
 80924d4:	000a7834 635f6367 6e61656c 4946203a     4x..gc_clean: FI
 80924e4:	445f444e 20415441 6e756f66 626f2064     ND_DATA found ob
 80924f4:	7463656a 646e6920 61207865 61702074     ject index at pa
 8092504:	25206567 0a783430 5f636700 61656c63     ge %04x..gc_clea
 8092514:	4d203a6e 5f45564f 41544144 6f747320     n: MOVE_DATA sto
 8092524:	6d206572 6669646f 20646569 696a626f     re modified obji
 8092534:	64685f78 61702072 202c6567 78343025     x_hdr page, %04x
 8092544:	3430253a 67000a78 6c635f63 3a6e6165     :%04x..gc_clean:
 8092554:	564f4d20 41445f45 73204154 65726f74      MOVE_DATA store
 8092564:	646f6d20 65696669 626f2064 2078696a      modified objix 
 8092574:	65676170 3025202c 253a7834 0a783430     page, %04x:%04x.
 8092584:	5f636700 61656c63 73203a6e 65746174     .gc_clean: state
 8092594:	25203e2d 67000a64 68635f63 3a6b6365     -> %d..gc_check:
 80925a4:	6c756620 7266206c 6c626565 64253a6b      full freeblk:%d
 80925b4:	65656e20 3a646564 66206425 3a656572      needed:%d free:
 80925c4:	64206425 3a656c65 000a6425 5f63670a     %d dele:%d...gc_
 80925d4:	63656863 2523206b 72203a64 67206e75     check #%d: run g
 80925e4:	72662063 625f6565 6b636f6c 64253a73     c free_blocks:%d
 80925f4:	72667020 253a6565 61702064 3a6f6c6c      pfree:%d pallo:
 8092604:	70206425 656c6564 2064253a 5d64255b     %d pdele:%d [%d]
 8092614:	6e656c20 2064253a 2520666f 67000a64      len:%d of %d..g
 8092624:	68635f63 3a6b6365 206f6e20 646e6163     c_check: no cand
 8092634:	74616469 202c7365 75746572 000a6e72     idates, return..
 8092644:	635f6367 6b636568 6c63203a 696e6165     gc_check: cleani
 8092654:	6220676e 6b636f6c 2c642520 73657220     ng block %d, res
 8092664:	20746c75 000a6425 635f6367 6b636568     ult %d..gc_check
 8092674:	6165203a 20796c72 726f6261 6e202c74     : early abort, n
 8092684:	6572206f 746c7573 206e6f20 77206367     o result on gc w
 8092694:	206e6568 63207366 6d6d6172 000a6465     hen fs crammed..
 80926a4:	635f6367 6b636568 6966203a 6873696e     gc_check: finish
 80926b4:	202c6465 64206425 79747269 6c62202c     ed, %d dirty, bl
 80926c4:	736b636f 20642520 65657266 6425202c     ocks %d free, %d
 80926d4:	67617020 66207365 2c656572 20642520      pages free, %d 
 80926e4:	65697274 72202c73 25207365 25000a64     tries, res %d..%
 80926f4:	25000a73 73202073 64253a7a 676f6c20     s..%s  sz:%d log
 8092704:	7a736770 2064253a 62676f6c 7a736b6c     pgsz:%d logblksz
 8092714:	2064253a 61726570 253a7a73 64612064     :%d perasz:%d ad
 8092724:	253a7264 20783830 7a736466 2064253a     dr:%08x fdsz:%d 
 8092734:	68636163 3a7a7365 000a6425 65676170     cachesz:%d..page
 8092744:	646e6920 62207865 20657479 3a6e656c      index byte len:
 8092754:	20202020 20202020 0a642520 6a626f00              %d..obj
 8092764:	20746365 6b6f6f6c 70207075 73656761     ect lookup pages
 8092774:	2020203a 20202020 64252020 6170000a     :         %d..pa
 8092784:	70206567 73656761 72657020 6f6c6220     ge pages per blo
 8092794:	203a6b63 20202020 25202020 70000a64     ck:        %d..p
 80927a4:	20656761 64616568 6c207265 74676e65     age header lengt
 80927b4:	20203a68 20202020 20202020 000a6425     h:          %d..
 80927c4:	656a626f 68207463 65646165 6e692072     object header in
 80927d4:	20786564 72746e65 3a736569 0a642520     dex entries: %d.
 80927e4:	6a626f00 20746365 65646e69 6e652078     .object index en
 80927f4:	65697274 20203a73 20202020 64252020     tries:        %d
 8092804:	7661000a 616c6961 20656c62 656c6966     ..available file
 8092814:	73656420 70697263 73726f74 2520203a      descriptors:  %
 8092824:	66000a64 20656572 636f6c62 203a736b     d..free blocks: 
 8092834:	20202020 20202020 20202020 20202020                     
 8092844:	000a6425 27207325 0a277325 20732500     %d..%s '%s'..%s 
 8092854:	27732527 32302520 25000a78 64252073     '%s' %02x..%s %d
 8092864:	0a642520 20732500 000a6425               %d..%s %d..

08092870 <__func__.6833>:
 8092870:	46495053 6d5f5346 746e756f               SPIFFS_mount.

0809287d <__func__.6880>:
 809287d:	46495053 6f5f5346 006e6570              SPIFFS_open.

08092889 <__func__.6918>:
 8092889:	46495053 725f5346 00646165              SPIFFS_read.

08092895 <__func__.6937>:
 8092895:	46495053 775f5346 65746972               SPIFFS_write.

080928a2 <__func__.6966>:
 80928a2:	46495053 725f5346 766f6d65               SPIFFS_remove.

080928b0 <__func__.7009>:
 80928b0:	46495053 735f5346 00746174              SPIFFS_stat.

080928bc <__func__.7036>:
 80928bc:	46495053 635f5346 65736f6c               SPIFFS_close.

080928c9 <__func__.7053>:
 80928c9:	46495053 6f5f5346 646e6570               SPIFFS_opendir.

080928d8 <__func__.7070>:
 80928d8:	46495053 725f5346 64646165               SPIFFS_readdir.

080928e7 <__func__.7078>:
 80928e7:	46495053 635f5346 65736f6c 00726964     SPIFFS_closedir.

080928f7 <__func__.7089>:
 80928f7:	46495053 695f5346 006f666e 00445055     SPIFFS_info.UPD.
 8092907:	0057454e 004c4544 00564f4d 00505548     NEW.DEL.MOV.HUP.
 8092917:	003f3f3f 2070616d 78343025 3430253a     ???.map %04x:%04
 8092927:	25282078 2d783430 3430252d 6f202978     x (%04x--%04x) o
 8092937:	78696a62 6970732e 30253a78 74207834     bjix.spix:%04x t
 8092947:	6970206f 30252078 000a7834 73617265     o pix %04x..eras
 8092957:	30252065 253a7838 6d000a64 746e756f     e %08x:%d..mount
 8092967:	7265203a 20657361 636f6c62 3025206b     : erase block %0
 8092977:	000a7834 66207366 0a6c6c75 20202000     4x..fs full..   
 8092987:	20202020 4c4c4143 4b434142 73252020         CALLBACK  %s
 8092997:	6a626f20 3a64695f 78343025 69707320      obj_id:%04x spi
 80929a7:	30253a78 6e207834 3a786970 78343025     x:%04x npix:%04x
 80929b7:	7a736e20 0a64253a 20202000 20202020      nsz:%d..       
 80929c7:	6c6c6163 6b636162 6573203a 6e697474     callback: settin
 80929d7:	64662067 3a642520 78343025 6f646628     g fd %d:%04x(fdo
 80929e7:	3a736666 6f206425 3a736666 20296425     ffs:%d offs:%d) 
 80929f7:	696a626f 64685f78 69705f72 6f742078     objix_hdr_pix to
 8092a07:	34302520 73202c78 3a657a69 000a6425      %04x, size:%d..
 8092a17:	20202020 63202020 626c6c61 3a6b6361            callback:
 8092a27:	6c657220 65736165 20646620 253a6425      release fd %d:%
 8092a37:	20783430 6e617073 3430253a 626f2078     04x span:%04x ob
 8092a47:	5f78696a 20786970 25206f74 0a783430     jix_pix to %04x.
 8092a57:	20202000 20202020 6c6c6163 6b636162     .       callback
 8092a67:	6573203a 6e697474 64662067 3a642520     : setting fd %d:
 8092a77:	78343025 61707320 30253a6e 6f207834     %04x span:%04x o
 8092a87:	78696a62 7869705f 206f7420 78343025     bjix_pix to %04x
 8092a97:	2020000a 20202020 6c616320 6361626c     ..       callbac
 8092aa7:	6d203a6b 69207061 70752078 65746164     k: map ix update
 8092ab7:	20646620 253a6425 20783430 6e617073      fd %d:%04x span
 8092ac7:	3430253a 20000a78 20202020 61632020     :%04x..       ca
 8092ad7:	61626c6c 203a6b63 4e524157 20474e49     llback: WARNING 
 8092ae7:	6e6b6e75 206e776f 6c6c6163 6b636162     unknown callback
 8092af7:	65766520 2520746e 63000a64 74616572      event %d..creat
 8092b07:	66203a65 646e756f 65726620 61702065     e: found free pa
 8092b17:	40206567 34302520 69622078 30253a78     ge @ %04x bix:%0
 8092b27:	65207834 7972746e 3430253a 6f000a78     4x entry:%04x..o
 8092b37:	3a6e6570 20646620 69206425 626f2073     pen: fd %d is ob
 8092b47:	6469206a 34302520 61000a78 6e657070     j id %04x..appen
 8092b57:	25203a64 79622064 20736574 666f2040     d: %d bytes @ of
 8092b67:	25207366 666f2064 7a697320 64252065     fs %d of size %d
 8092b77:	7061000a 646e6570 666f203a 74657366     ..append: offset
 8092b87:	76657220 65737265 6f742064 7a697320      reversed to siz
 8092b97:	61000a65 6e657070 67203a64 68632063     e..append: gc ch
 8092ba7:	206b6365 6c696166 0a642520 70706100     eck fail %d..app
 8092bb7:	3a646e65 34302520 74732078 2065726f     end: %04x store 
 8092bc7:	696a626f 30252078 253a7834 2c783430     objix %04x:%04x,
 8092bd7:	69727720 6e657474 0a642520 70706100      written %d..app
 8092be7:	3a646e65 34302520 74732078 2065726f     end: %04x store 
 8092bf7:	2077656e 696a626f 64685f78 25202c72     new objix_hdr, %
 8092c07:	3a783430 78343025 7277202c 65747469     04x:%04x, writte
 8092c17:	6425206e 7061000a 646e6570 3025203a     n %d..append: %0
 8092c27:	73207834 65726f74 77656e20 7a697320     4x store new siz
 8092c37:	20492065 69206425 626f206e 5f78696a     e I %d in objix_
 8092c47:	2c726468 34302520 30253a78 202c7834     hdr, %04x:%04x, 
 8092c57:	74697277 206e6574 000a6425 65707061     written %d..appe
 8092c67:	203a646e 78343025 616f6c20 626f2064     nd: %04x load ob
 8092c77:	6878696a 70207264 20656761 78343025     jixhdr page %04x
 8092c87:	3430253a 61000a78 6e657070 25203a64     :%04x..append: %
 8092c97:	20783430 61657263 6f206574 78696a62     04x create objix
 8092ca7:	67617020 25202c65 3a783430 78343025      page, %04x:%04x
 8092cb7:	7277202c 65747469 6425206e 7061000a     , written %d..ap
 8092cc7:	646e6570 3025203a 66207834 20646e69     pend: %04x find 
 8092cd7:	696a626f 70732078 695f6e61 30253a78     objix span_ix:%0
 8092ce7:	000a7834 65707061 203a646e 78343025     4x..append: %04x
 8092cf7:	756f6620 6f20646e 63656a62 6e692074      found object in
 8092d07:	20786564 70207461 20656761 78343025     dex at page %04x
 8092d17:	64665b20 7a697320 64252065 61000a5d      [fd size %d]..a
 8092d27:	6e657070 25203a64 20783430 726f7473     ppend: %04x stor
 8092d37:	656e2065 61642077 70206174 2c656761     e new data page,
 8092d47:	34302520 30253a78 6f207834 65736666      %04x:%04x offse
 8092d57:	64253a74 656c202c 6425206e 7277202c     t:%d, len %d, wr
 8092d67:	65747469 6425206e 7061000a 646e6570     itten %d..append
 8092d77:	3025203a 73207834 65726f74 206f7420     : %04x store to 
 8092d87:	73697865 676e6974 74616420 61702061     existing data pa
 8092d97:	202c6567 78343025 3430253a 666f2078     ge, %04x:%04x of
 8092da7:	74657366 2c64253a 6e656c20 2c642520     fset:%d, len %d,
 8092db7:	69727720 6e657474 0a642520 70706100      written %d..app
 8092dc7:	3a646e65 34302520 72772078 2065746f     end: %04x wrote 
 8092dd7:	65676170 34302520 6f742078 6a626f20     page %04x to obj
 8092de7:	685f7869 65207264 7972746e 34302520     ix_hdr entry %04
 8092df7:	6e692078 6d656d20 7061000a 646e6570     x in mem..append
 8092e07:	3025203a 77207834 65746f72 67617020     : %04x wrote pag
 8092e17:	30252065 74207834 626f206f 2078696a     e %04x to objix 
 8092e27:	72746e65 30252079 69207834 656d206e     entry %04x in me
 8092e37:	61000a6d 6e657070 25203a64 20783430     m..append: %04x 
 8092e47:	726f7473 626f2065 2078696a 65676170     store objix page
 8092e57:	3025202c 253a7834 2c783430 69727720     , %04x:%04x, wri
 8092e67:	6e657474 0a642520 70706100 3a646e65     tten %d..append:
 8092e77:	34302520 74732078 2065726f 2077656e      %04x store new 
 8092e87:	657a6973 20494920 69206425 626f206e     size II %d in ob
 8092e97:	5f78696a 2c726468 34302520 30253a78     jix_hdr, %04x:%0
 8092ea7:	202c7834 74697277 206e6574 202c6425     4x, written %d, 
 8092eb7:	20736572 000a6425 65707061 203a646e     res %d..append: 
 8092ec7:	78343025 6f747320 66206572 68736572     %04x store fresh
 8092ed7:	6a626f20 685f7869 70207264 2c656761      objix_hdr page,
 8092ee7:	34302520 30253a78 202c7834 74697277      %04x:%04x, writ
 8092ef7:	206e6574 000a6425 65707061 203a646e     ten %d..append: 
 8092f07:	78343025 6f747320 6d206572 6669646f     %04x store modif
 8092f17:	20646569 696a626f 64685f78 61702072     ied objix_hdr pa
 8092f27:	202c6567 78343025 3430253a 77202c78     ge, %04x:%04x, w
 8092f37:	74746972 25206e65 6d000a64 6669646f     ritten %d..modif
 8092f47:	73203a79 65726f74 646f6d20 65696669     y: store modifie
 8092f57:	626f2064 5f78696a 20726468 65676170     d objix_hdr page
 8092f67:	3025202c 253a7834 2c783430 69727720     , %04x:%04x, wri
 8092f77:	6e657474 0a642520 646f6d00 3a796669     tten %d..modify:
 8092f87:	6f747320 70206572 69766572 2073756f      store previous 
 8092f97:	69646f6d 64656966 6a626f20 70207869     modified objix p
 8092fa7:	2c656761 34302520 30253a78 202c7834     age, %04x:%04x, 
 8092fb7:	74697277 206e6574 000a6425 69646f6d     written %d..modi
 8092fc7:	203a7966 64616f6c 6a626f20 64687869     fy: load objixhd
 8092fd7:	61702072 25206567 3a783430 78343025     r page %04x:%04x
 8092fe7:	6f6d000a 79666964 6966203a 6f20646e     ..modify: find o
 8092ff7:	78696a62 61707320 78695f6e 3430253a     bjix span_ix:%04
 8093007:	6d000a78 6669646f 66203a79 646e756f     x..modify: found
 8093017:	6a626f20 20746365 65646e69 74612078      object index at
 8093027:	67617020 30252065 000a7834 69646f6d      page %04x..modi
 8093037:	203a7966 726f7473 656e2065 61642077     fy: store new da
 8093047:	70206174 2c656761 34302520 30253a78     ta page, %04x:%0
 8093057:	6f207834 65736666 64253a74 656c202c     4x offset:%d, le
 8093067:	6425206e 7277202c 65747469 6425206e     n %d, written %d
 8093077:	6f6d000a 79666964 7473203a 2065726f     ..modify: store 
 8093087:	65206f74 74736978 20676e69 61746164     to existing data
 8093097:	67617020 73202c65 253a6372 2c783430      page, src:%04x,
 80930a7:	74736420 3430253a 30253a78 6f207834      dst:%04x:%04x o
 80930b7:	65736666 64253a74 656c202c 6425206e     ffset:%d, len %d
 80930c7:	7277202c 65747469 6425206e 6f6d000a     , written %d..mo
 80930d7:	79666964 7277203a 2065746f 65676170     dify: wrote page
 80930e7:	34302520 6f742078 6a626f20 685f7869      %04x to objix_h
 80930f7:	65207264 7972746e 34302520 6e692078     dr entry %04x in
 8093107:	6d656d20 6f6d000a 79666964 7277203a      mem..modify: wr
 8093117:	2065746f 65676170 34302520 6f742078     ote page %04x to
 8093127:	6a626f20 65207869 7972746e 34302520      objix entry %04
 8093137:	6e692078 6d656d20 6f6d000a 79666964     x in mem..modify
 8093147:	7473203a 2065726f 69646f6d 64656966     : store modified
 8093157:	6a626f20 70207869 2c656761 34302520      objix page, %04
 8093167:	30253a78 202c7834 74697277 206e6574     x:%04x, written 
 8093177:	000a6425 6e757274 65746163 6564203a     %d..truncate: de
 8093187:	6574656c 6a626f20 70207869 20656761     lete objix page 
 8093197:	78343025 3430253a 74000a78 636e7572     %04x:%04x..trunc
 80931a7:	3a657461 64707520 20657461 696a626f     ate: update obji
 80931b7:	64682078 61702072 25206567 3a783430     x hdr page %04x:
 80931c7:	78343025 206f7420 657a6973 0a642520     %04x to size %d.
 80931d7:	75727400 7461636e 6c203a65 2064616f     .truncate: load 
 80931e7:	696a626f 61702078 25206567 3a783430     objix page %04x:
 80931f7:	78343025 726f6620 74616420 70732061     %04x for data sp
 8093207:	253a7869 0a783430 75727400 7461636e     ix:%04x..truncat
 8093217:	67203a65 6420746f 20617461 20786970     e: got data pix 
 8093227:	78343025 7274000a 61636e75 203a6574     %04x..truncate: 
 8093237:	20727265 696c6176 69746164 6420676e     err validating d
 8093247:	20617461 20786970 000a6425 6e757274     ata pix %d..trun
 8093257:	65746163 7265203a 65642072 6974656c     cate: err deleti
 8093267:	6420676e 20617461 20786970 000a6425     ng data pix %d..
 8093277:	6e757274 65746163 6564203a 6574656c     truncate: delete
 8093287:	74616420 61702061 25206567 20783430      data page %04x 
 8093297:	20726f66 61746164 69707320 30253a78     for data spix:%0
 80932a7:	202c7834 5f727563 657a6973 0a64253a     4x, cur_size:%d.
 80932b7:	75727400 7461636e 64203a65 74656c65     .truncate: delet
 80932c7:	64252065 74796220 66207365 206d6f72     e %d bytes from 
 80932d7:	61746164 67617020 30252065 66207834     data page %04x f
 80932e7:	6420726f 20617461 78697073 3430253a     or data spix:%04
 80932f7:	63202c78 735f7275 3a657a69 000a6425     x, cur_size:%d..
 8093307:	6e757274 65746163 7277203a 2065746f     truncate: wrote 
 8093317:	65676170 34302520 6f742078 6a626f20     page %04x to obj
 8093327:	685f7869 65207264 7972746e 34302520     ix_hdr entry %04
 8093337:	6e692078 6d656d20 7274000a 61636e75     x in mem..trunca
 8093347:	203a6574 746f7277 61702065 25206567     te: wrote page %
 8093357:	20783430 6f206f74 78696a62 746e6520     04x to objix ent
 8093367:	25207972 20783430 6d206e69 000a6d65     ry %04x in mem..
 8093377:	6e757274 65746163 6572203a 65766f6d     truncate: remove
 8093387:	6a626f20 20746365 65646e69 65682078      object index he
 8093397:	72656461 67617020 30252065 000a7834     ader page %04x..
 80933a7:	6e757274 65746163 6572203a 20746573     truncate: reset 
 80933b7:	696a626f 64685f78 61702072 25206567     objix_hdr page %
 80933c7:	0a783430 75727400 7461636e 75203a65     04x..truncate: u
 80933d7:	74616470 626f2065 7463656a 646e6920     pdate object ind
 80933e7:	68207865 65646165 61702072 77206567     ex header page w
 80933f7:	20687469 69646e69 20736563 20646e61     ith indices and 
 8093407:	657a6973 7274000a 61636e75 203a6574     size..truncate: 
 8093417:	726f7473 6f6d2065 69666964 6f206465     store modified o
 8093427:	78696a62 67617020 25202c65 3a783430     bjix page, %04x:
 8093437:	78343025 6572000a 203a6461 646e6966     %04x..read: find
 8093447:	6a626f20 25207869 3a783430 78343025      objix %04x:%04x
 8093457:	6572000a 203a6461 64616f6c 6a626f20     ..read: load obj
 8093467:	70207869 20656761 78343025 3430253a     ix page %04x:%04
 8093477:	6f662078 61642072 73206174 3a786970     x for data spix:
 8093487:	78343025 6572000a 203a6461 7366666f     %04x..read: offs
 8093497:	253a7465 64722064 2064253a 61746164     et:%d rd:%d data
 80934a7:	69707320 30253a78 69207834 61642073      spix:%04x is da
 80934b7:	705f6174 253a7869 20783430 72646461     ta_pix:%04x addr
 80934c7:	3830253a 66000a78 5f656572 5f6a626f     :%08x..free_obj_
 80934d7:	203a6469 4d544942 6e696d20 3430253a     id: BITM min:%04
 80934e7:	616d2078 30253a78 000a7834 65657266     x max:%04x..free
 80934f7:	6a626f5f 3a64695f 4d4f4320 696d2050     _obj_id: COMP mi
 8093507:	30253a6e 6d207834 253a7861 20783430     n:%04x max:%04x 
 8093517:	706d6f63 3a746361 000a6425 65657266     compact:%d..free
 8093527:	6a626f5f 3a64695f 6d6f6320 74636170     _obj_id: compact
 8093537:	74206465 656c6261 20736920 6c6c7566     ed table is full
 8093547:	7266000a 6f5f6565 695f6a62 43203a64     ..free_obj_id: C
 8093557:	20504d4f 656c6573 69207463 7865646e     OMP select index
 8093567:	2064253a 5f6e696d 6e756f63 64253a74     :%d min_count:%d
 8093577:	6e696d20 3430253a 616d2078 30253a78      min:%04x max:%0
 8093587:	63207834 61706d6f 253a7463 66000a64     4x compact:%d..f
 8093597:	5f656572 5f6a626f 203a6469 504d4f43     ree_obj_id: COMP
 80935a7:	4c455320 75686320 253a6b6e 696d2064      SEL chunk:%d mi
 80935b7:	30253a6e 2d207834 3025203e 000a7834     n:%04x -> %04x..
 80935c7:	09290300 09290708 09290b08 09290f08     ..)...)...)...).
 80935d7:	09291308 09291708 66656408 746c7561     ..)...)..default
 80935e7:	534d0020 534c0042 533c0042 65534950      .MSB.LSB.<SPISe
 80935f7:	6e697474 64207367 75616665 003e746c     ttings default>.
 8093607:	4950533c 74746553 73676e69 25732520     <SPISettings %s%
 8093617:	73252075 444f4d20 3e752545               u %s MODE%u>.

08093624 <_ZTVN8particle11SPISettingsE>:
	...
 809362c:	08084c9d 08084c71 08084c73 4e45470a     .L..qL..sL...GEN
 809363c:	54206425 3a455059 000a6425 4e49414d     %d TYPE:%d..MAIN
 809364c:	5441445f 6c532041 5f657661 253a4449     _DATA Slave_ID:%
 809365c:	46202c64 5f636e75 65646f43 2c64253a     d, Func_Code:%d,
 809366c:	61745320 415f7472 65726464 253a7373      Start_Address:%
 809367c:	4e202c64 4f5f6d75 65525f66 253a7367     d, Num_Of_Regs:%
 809368c:	75520064 6e696e6e 616d2067 4d5f6e69     d.Running main_M
 809369c:	7562646f 61642073 70206174 206c6c6f     odbus data poll 
 80936ac:	6d6f7266 65687420 6e654720 00746553     from the GenSet.
 80936bc:	49534142 5f54534e 41544144 616c5320     BASINST_DATA Sla
 80936cc:	495f6576 64253a44 7546202c 435f636e     ve_ID:%d, Func_C
 80936dc:	3a65646f 202c6425 72617453 64415f74     ode:%d, Start_Ad
 80936ec:	73657264 64253a73 754e202c 664f5f6d     dress:%d, Num_Of
 80936fc:	6765525f 64253a73 6e755200 676e696e     _Regs:%d.Running
 809370c:	73614220 74736e49 646f4d5f 20737562      BasInst_Modbus 
 809371c:	61746164 6c6f7020 7266206c 74206d6f     data poll from t
 809372c:	47206568 65536e65 45440074 534e4952     he GenSet.DERINS
 809373c:	41445f54 53204154 6576616c 3a44495f     T_DATA Slave_ID:
 809374c:	202c6425 636e7546 646f435f 64253a65     %d, Func_Code:%d
 809375c:	7453202c 5f747261 72646441 3a737365     , Start_Address:
 809376c:	202c6425 5f6d754e 525f664f 3a736765     %d, Num_Of_Regs:
 809377c:	52006425 696e6e75 4420676e 6e497265     %d.Running DerIn
 809378c:	4d5f7473 7562646f 61642073 70206174     st_Modbus data p
 809379c:	206c6c6f 6d6f7266 65687420 6e654720     oll from the Gen
 80937ac:	00746553 6e6e7552 20676e69 69676e45     Set.Running Engi
 80937bc:	535f656e 65746174 74616420 6f702061     ne_State data po
 80937cc:	66206c6c 206d6f72 20656874 536e6547     ll from the GenS
 80937dc:	7b007465 2276220a 2231223a 67220a2c     et.{."v":"1",."g
 80937ec:	3b006e65 61625f00 736e4973 0a3a2274     en.;._basInst":.
 80937fc:	645f0022 6e497265 3a227473 7b00220a     "._derInst":.".{
 809380c:	3a227622 2c223122 3a227322 67222c00     "v":"1","s":.,"g
 809381c:	5f646972 49736162 2274736e 2c00223a     rid_basInst":".,
 809382c:	69726722 65445f64 736e4972 223a2274     "grid_DerInst":"
 809383c:	220a7b00 223a2265 655f7867 726f7272     .{."e":"gx_error
 809384c:	220a2c22 223a2273 64697267 220a2c22     ",."s":"grid",."
 809385c:	223a2263 0a2c2200 22737422 6700223a     c":".",."ts":".g
 809386c:	76655f78 00746e65 65220a7b 67223a22     x_event.{."e":"g
 809387c:	72655f78 22726f72 73220a2c 67223a22     x_error",."s":"g
 809388c:	2c226e65 2263220a 6700223a 72655f78     en",."c":".gx_er
 809389c:	00726f72 4e45470a 42206425 52445541     ror..GEN%d BAUDR
 80938ac:	3a455441 5f006425 53676e65 65746174     ATE:%d._engState
 80938bc:	220a3a22 22414e00 4f007d0a 7d0a224e     ":.".NA".}.ON".}
 80938cc:	46464f00 007d0a22 6d5f7867 69727465     .OFF".}.gx_metri
 80938dc:	73007363 00706f74 72617473 65470074     cs.stop.start.Ge
 80938ec:	654d206e 63697274 74732073 00657461     n Metrics state.
 80938fc:	0046464f 206e6547 7274654d 20736369     OFF.Gen Metrics 
 809390c:	72657571 20736569 69746341 65746176     queries Activate
 809391c:	65470064 654d206e 63697274 75712073     d.Gen Metrics qu
 809392c:	65697265 65442073 69746361 65746176     eries Deactivate
 809393c:	72470064 4d5f6469 73637274 6174735f     d.Grid_Mtrcs_sta
 809394c:	47006574 20646972 7274654d 20736369     te.Grid Metrics 
 809395c:	63616544 61766974 00646574 64697247     Deactivated.Grid
 809396c:	74654d20 73636972 74634120 74617669      Metrics Activat
 809397c:	203a6465 736e6547 47007465 20646972     ed: Genset.Grid 
 809398c:	7274654d 20736369 69746341 65746176     Metrics Activate
 809399c:	4d203a64 72657465 53227b00 65746174     d: Meter.{"State
 80939ac:	4f223a22 7d224646 53227b00 65746174     ":"OFF"}.{"State
 80939bc:	4f223a22 222c224e 72756f53 3a226563     ":"ON","Source":
 80939cc:	6e654722 22746573 227b007d 74617453     "Genset"}.{"Stat
 80939dc:	223a2265 2c224e4f 756f5322 22656372     e":"ON","Source"
 80939ec:	654d223a 22726574 4942007d 5952414e     :"Meter"}.BINARY
 80939fc:	504e4920 20535455 45564148 41484320      INPUTS HAVE CHA
 8093a0c:	4445474e 5200203a 53204454 63206950     NGED: .RTD SPi c
 8093a1c:	206d6d6f 6f727265 54520072 69482044     omm error.RTD Hi
 8093a2c:	54206867 73657268 646c6f68 44545200     gh Threshold.RTD
 8093a3c:	776f4c20 72685420 6f687365 5200646c      Low Threshold.R
 8093a4c:	4e494645 30203e20 2a35382e 73696142     EFIN > 0.85*Bais
 8093a5c:	46455200 3c204e49 382e3020 61422a35     .REFIN < 0.85*Ba
 8093a6c:	202c7369 43524f46 706f2d45 52006e65     is, FORCE-open.R
 8093a7c:	3c204454 382e3020 61422a35 202c7369     TD < 0.85*Bais, 
 8093a8c:	43524f46 706f2d45 6f006e65 2f726576     FORCE-open.over/
 8093a9c:	65646e75 6f762072 6761746c 75660065     under voltage.fu
 8093aac:	6c206c65 6c657665 72797000 6d6f6e61     el level.pyranom
 8093abc:	72657465 6d657400 61726570 65727574     eter.temperature
 8093acc:	73657200 6e657320 00726f73 69676964     .res sensor.digi
 8093adc:	006c6174 6c616e61 7b00676f 3a227622     tal.analog.{"v":
 8093aec:	22312220 74220a2c 5f706d65 736e6573      "1",."temp_sens
 8093afc:	3a22726f 0a7d0020 696f4700 6420676e     or": .}..Going d
 8093b0c:	206e776f 20726f66 74737973 72206d65     own for system r
 8093b1c:	74657365 6553202e 61792065 74616c20     eset. See ya lat
 8093b2c:	002e7265 74746948 20676e69 65736572     er..Hitting rese
 8093b3c:	6c654474 74207961 72656d69 65520021     tDelay timer!.Re
 8093b4c:	76696563 63206465 64756f6c 73657220     ceived cloud res
 8093b5c:	63207465 616d6d6f 203a646e 65736572     et command: rese
 8093b6c:	6e697474 6f6d2067 746e656d 6c697261     tting momentaril
 8093b7c:	53002e79 69747465 5020676e 2043494d     y..Setting PMIC 
 8093b8c:	72616843 20726567 2c66664f 646e6120     Charger Off, and
 8093b9c:	65754620 7561476c 74206567 6c73206f      FuelGauge to sl
 8093bac:	2e706565 74655300 676e6974 494d5020     eep..Setting PMI
 8093bbc:	68432043 65677261 6e4f2072 72615700     C Charger On.War
 8093bcc:	676e696e 6f6c203a 6c20676e 73706f6f     ning: long loops
 8093bdc:	20666f20 6d756c25 227b0073 223a2265      of %lums.{"e":"
 8093bec:	655f7867 726f7272 22202c22 003a2273     gx_error", "s":.
 8093bfc:	7422202c 003a2273 0074656d 2574656d     , "ts":.met.met%
 8093c0c:	255f756c 54007568 00747365 61746f54     lu_%hu.Test.Tota
 8093c1c:	7473206c 6761726f 61632065 69636170     l storage capaci
 8093c2c:	6f207974 6874206e 73252065 72617020     ty on the %s par
 8093c3c:	6f746974 25203a6e 6220756c 73657479     titon: %lu bytes
 8093c4c:	65735500 62282064 73657479 25203a29     .Used (bytes): %
 8093c5c:	6220756c 73657479 65724600 62282065     lu bytes.Free (b
 8093c6c:	73657479 25203a29 6220696c 73657479     ytes): %li bytes
 8093c7c:	7246000a 73206565 61726f74 203a6567     ..Free storage: 
 8093c8c:	66322e25 2d002525 202d2d2d 54494e49     %.2f%%.---- INIT
 8093c9c:	494c4149 474e495a 49505320 20534646     IALIZING SPIFFS 
 8093cac:	2d2d2d2d 756f4d00 7220746e 3d207365     ----.Mount res =
 8093cbc:	646c2520 48544f00 50205245 69747261      %ld.OTHER Parti
 8093ccc:	6e6f6974 74697720 69732068 203a657a     tion with size: 
 8093cdc:	6b203631 6f6d2042 65746e75 75732064     16 kB mounted su
 8093cec:	73656363 6c756673 002e796c 66697053     ccessfully..Spif
 8093cfc:	6d207366 746e756f 69616620 2164656c     fs mount failed!
 8093d0c:	4f202d20 52454854 72617020 6f746974      - OTHER partito
 8093d1c:	6146006e 64656c69 206f7420 61657263     n.Failed to crea
 8093d2c:	66206574 2e656c69 20732500 656c6966     te file..%s file
 8093d3c:	65726320 64657461 63757320 73736563      created success
 8093d4c:	6c6c7566 61460079 64656c69 206f7420     fully.Failed to 
 8093d5c:	74697277 61642065 74206174 6966206f     write data to fi
 8093d6c:	203a656c 44007325 20617461 63637573     le: %s.Data succ
 8093d7c:	66737365 796c6c75 69727720 6e657474     essfully written
 8093d8c:	206f7420 656c6966 00732520 74726150      to file %s.Part
 8093d9c:	6f697469 7974206e 75206570 696e696e     ition type unini
 8093dac:	6c616974 64657a69 646e6120 72617020     tialized and par
 8093dbc:	69746974 73206e6f 20657a69 6e6e6163     tition size cann
 8093dcc:	6220746f 657a2065 00216f72 20697073     ot be zero!.spi 
 8093ddc:	73616c66 73250068 72615020 69746974     flash.%s Partiti
 8093dec:	77206e6f 20687469 657a6973 7525203a     on with size: %u
 8093dfc:	6d20424d 746e756f 73206465 65636375     MB mounted succe
 8093e0c:	75667373 2e796c6c 46005f00 656c6961     ssfully.._.Faile
 8093e1c:	6f742064 69727720 6d206574 69727465     d to write metri
 8093e2c:	61642063 74206174 6966206f 203a656c     c data to file: 
 8093e3c:	27732527 69614600 2064656c 6f206f74     '%s'.Failed to o
 8093e4c:	206e6570 656c6966 00732520 27732527     pen file %s.'%s'
 8093e5c:	6c696620 706f2065 64656e65 63757320      file opened suc
 8093e6c:	73736563 6c6c7566 69460079 7320656c     cessfully.File s
 8093e7c:	3a657a69 756c2520 6d654d00 2079726f     ize: %lu.Memory 
 8093e8c:	6f6c6c61 69746163 66206e6f 656c6961     allocation faile
 8093e9c:	45002164 726f7272 74656d20 20636972     d!.Error metric 
 8093eac:	64616572 20676e69 61746164 6f726620     reading data fro
 8093ebc:	27203a6d 00277325 65747441 6974706d     m: '%s'.Attempti
 8093ecc:	7420676e 6564206f 6574656c 73252720     ng to delete '%s
 8093edc:	61460027 64656c69 206f7420 656c6564     '.Failed to dele
 8093eec:	27206574 21277325 61655300 69686372     te '%s'!.Searchi
 8093efc:	6620676e 7420726f 6f206568 7365646c     ng for the oldes
 8093f0c:	69662074 2e2e656c 6854002e 6c6f2065     t file....The ol
 8093f1c:	74736564 6c696620 73692065 6f4c003a     dest file is:.Lo
 8093f2c:	74732077 6761726f 68742065 68736572     w storage thresh
 8093f3c:	20646c6f 21746968 74744120 74706d65     old hit! Attempt
 8093f4c:	20676e69 64206f74 74656c65 6c6f2065     ing to delete ol
 8093f5c:	74736564 74616420 43002e61 6e61656c     dest data..Clean
 8093f6c:	20676e69 726f7473 2e656761 47002e2e     ing storage....G
 8093f7c:	69747465 6920676e 726f666e 6974616d     etting informati
 8093f8c:	66206e6f 2520726f 654d0073 63697274     on for %s.Metric
 8093f9c:	706d6520 6f207974 6f632072 70757272      empty or corrup
 8093fac:	00646574 6c627550 69687369 6d20676e     ted.Publishing m
 8093fbc:	69727465 25272063 66202773 206d6f72     etric '%s' from 
 8093fcc:	73616c66 002e2e68 73206e49 53646e65     flash...In sendS
 8093fdc:	64657661 7274654d 2e736369 4c002e2e     avedMetrics....L
 8093fec:	20747361 6c627570 65687369 656d2064     ast published me
 8093ffc:	63697274 6d697420 61747365 6120706d     tric timestamp a
 809400c:	6920646e 7865646e 6c25203a 25202c75     nd index: %lu, %
 809401c:	614c0064 73207473 64657661 74656d20     d.Last saved met
 809402c:	20636972 656d6974 6d617473 6e612070     ric timestamp an
 809403c:	6e692064 3a786564 756c2520 6425202c     d index: %lu, %d
 809404c:	6c6c4100 76617320 4d206465 69727465     .All saved Metri
 809405c:	68207363 20657661 6e656562 62757020     cs have been pub
 809406c:	6873696c 002e6465 6978614d 206d756d     lished..Maximum 
 809407c:	626d756e 28207265 20297525 7320666f     number (%u) of s
 809408c:	64657661 74656d20 73636972 76616820     aved metrics hav
 809409c:	65622065 70206e65 696c6275 64656873     e been published
 80940ac:	206e6920 73696874 6f6f6c20 75500070      in this loop.Pu
 80940bc:	73696c62 676e6968 74656d20 73636972     blishing metrics
 80940cc:	71657220 74736575 66206465 206d6f72      requested from 
 80940dc:	20656874 756f6c43 002e2e64 2e707061     the Cloud...app.
 80940ec:	735f7867 66666970 65670073 6700316e     gx_spiffs.gen1.g
 80940fc:	00326e65 336e6567 6e656700 65670034     en2.gen3.gen4.ge
 809410c:	6700356e 00366e65 61656c63 00000072     n5.gen6.clear...
 809411c:	00000000 00ffffff 00ffffff 00000000     ................
 809412c:	ffff0000 ffff00ff 000000ff 00000000     ................
 809413c:	00ffffff 00ffffff 00000000 ffff0000     ................
 809414c:	ffff00ff 000000ff 00000000 00ffffff     ................
 809415c:	00ffffff 00000000 ffff0000 ffff00ff     ................
 809416c:	654c00ff 74732064 20657461 69207369     ..Led state is i
 809417c:	6c61766e 61006469 61007070 732e7070     nvalid.app.app.s
 809418c:	74667968 6174735f 61006574 732e7070     hyft_state.app.s
 809419c:	66666970 00000073                       piffs...

080941a4 <_ZTVN5spark10LogHandlerE>:
	...
 80941b4:	080800ad 08089049                       ....I...

080941bc <_ZTVN5spark16SerialLogHandlerE>:
	...
 80941c4:	08089055 08089089 0808f26d 0808904b     U.......m...K...
 80941d4:	636e7973 20676e69 65736552 523a3a74     syncing Reset::R
 80941e4:	6f736165 666f206e 70797420 53003d65     eason of type=.S
 80941f4:	54465948 4154535f 4c5f4554 4547474f     HYFT_STATE_LOGGE
 8094204:	414e5f52 4e00454d 45424d55 464f2052     R_NAME.NUMBER OF
 8094214:	53465520 6425203a 53465500 2064253a      UFS: %d.UFS:%d 
 8094224:	44554142 45544152 2064253a 64252020     BAUDRATE:%d   %d
 8094234:	25202020 54530064 49545241 5520474e        %d.STARTING U
 8094244:	43205346 49464e4f 41525547 4e4f4954     FS CONFIGURATION
 8094254:	002e2e2e 424d554e 4f5f5245 46555f46     ....NUMBER_OF_UF
 8094264:	45445f53 45434956 64253a53 4c53202c     S_DEVICES:%d, SL
 8094274:	5f455641 253a4449 50000a64 696c6c6f     AVE_ID:%d..Polli
 8094284:	4d20676e 69727465 66207363 206d6f72     ng Metrics from 
 8094294:	25534655 69640064 6e617473 4e006563     UFS%d.distance.N
 80942a4:	44205745 43495645 20212145 20657355     EW DEVICE!! Use 
 80942b4:	61666564 20746c75 20534655 666e6f63     default UFS conf
 80942c4:	7b006769 3a227622 22322220 75220a2c     ig.{"v": "2",."u
 80942d4:	635f7366 69666e6f 203a2267 22000a7b     fs_config": {.."
 80942e4:	656c6553 64657463 706e4920 3a227475     Selected Input":
 80942f4:	6e412220 676f6c61 22000a22 656c6553      "Analog".."Sele
 8094304:	64657463 706e4920 3a227475 69442220     cted Input": "Di
 8094314:	61746967 000a226c 6553222c 7463656c     gital"..,"Select
 8094324:	4d206465 69727465 203a2263 6c6f5622     ed Metric": "Vol
 8094334:	65676174 2c000a22 6c655322 65746365     tage"..,"Selecte
 8094344:	654d2064 63697274 22203a22 74736944     d Metric": "Dist
 8094354:	65636e61 000a222c 6142222c 3a226475     ance,"..,"Baud":
 8094364:	2c002220 73667522 226f6e5f 0022203a      ".,"ufs_no": ".
 8094374:	6675222c 64695f73 7d0a7d00 6e755200     ,"ufs_id.}.}.Run
 8094384:	676e696e 6c654320 616c756c 65542072     ning Cellular Te
 8094394:	3a737473 704f0020 74617265 6e20726f     sts: .Operator n
 80943a4:	3d656d61 73737200 64253d69 7571202c     ame=.rssi=%d, qu
 80943b4:	253d6c61 62202c64 3d737261 52006425     al=%d, bars=%d.R
 80943c4:	69646165 4d20676e 49544c55 20454c50     eading MULTIPLE 
 80943d4:	2e534655 53002e2e 6c706d61 20676e69     UFS....Sampling 
 80943e4:	2e434441 5847002e 74654d20 20636972     ADC...GX Metric 
 80943f4:	6c627570 65687369 75732064 73656363     published succes
 8094404:	6c756673 202c796c 20747562 20746f6e     sfully, but not 
 8094414:	65766173 6f742064 616c6620 002e6873     saved to flash..
 8094424:	6c696146 74206465 6173206f 47206576     Failed to save G
 8094434:	654d2058 63697274 206f7420 73616c66     X Metric to flas
 8094444:	58470068 74654d20 20636972 20736177     h.GX Metric was 
 8094454:	7469656e 20726568 65766173 6f6e2064     neither saved no
 8094464:	75702072 73696c62 21646568 58470021     r published!!.GX
 8094474:	74654d20 20636972 27732527 76617320      Metric '%s' sav
 8094484:	74206465 6c66206f 20687361 63637573     ed to flash succ
 8094494:	66737365 796c6c75 58470021 74654d20     essfully!.GX Met
 80944a4:	20636972 6c627570 65687369 75732064     ric published su
 80944b4:	73656363 6c756673 002e796c 65746e49     ccessfully..Inte
 80944c4:	74656e72 746f6e20 61766120 62616c69     rnet not availab
 80944d4:	2021656c 4d205847 69727465 6e6f2063     le! GX Metric on
 80944e4:	7320796c 64657661 746f6e20 62757020     ly saved not pub
 80944f4:	6873696c 00216465 65766153 58472064     lished!.Saved GX
 8094504:	74654d20 73636972 63755320 73736563      Metrics Success
 8094514:	6c6c7566 65532079 7420746e 6c43206f     fully Sent to Cl
 8094524:	2e64756f 746f4e00 676e6968 206f7420     oud..Nothing to 
 8094534:	002e6f64 6c6c6957 73657220 20656d75     do..Will resume 
 8094544:	6c627570 69687369 6920676e 656e206e     publishing in ne
 8094554:	6c207478 21706f6f 74654d00 20636972     xt loop!.Metric 
 8094564:	6c627570 69687369 7320676e 70706f74     publishing stopp
 8094574:	64206465 74206575 6f63206f 63656e6e     ed due to connec
 8094584:	6e6f6974 736f6c20 7b002173 3a227622     tion loss!.{"v":
 8094594:	2c223122 65642200 65636976 00223a22     "1",."device":".
 80945a4:	2276227b 2231223a 6573222c 726f736e     {"v":"1","sensor
 80945b4:	00223a22 007c005d 72617453 69742074     ":".].|.Start ti
 80945c4:	203a656d 00756c25 20646e45 656d6974     me: %lu.End time
 80945d4:	6c25203a 69620075 7972616e 64616552     : %lu.binaryRead
 80945e4:	6e656700 7274656d 53736369 72670057     .genmetricsSW.gr
 80945f4:	656d6469 63697274 00575373 4d746567     idmetricsSW.getM
 8094604:	69727465 67007363 72467465 6c466565     etrics.getFreeFl
 8094614:	53687361 61726f74 67006567 656d6e65     ashStorage.genme
 8094624:	63697274 41545373 72670054 656d6469     tricsSTAT.gridme
 8094634:	63697274 41545373 65730054 6e655374     tricsSTAT.setSen
 8094644:	52726f73 69646165 7453676e 73757461     sorReadingStatus
 8094654:	6c657300 46746365 536c6575 6f736e65     .selectFuelSenso
 8094664:	706e4972 75007475 6f437366 6769666e     rInput.ufsConfig
 8094674:	74617275 736e6f69 6c657300 46746365     urations.selectF
 8094684:	4c6c6575 6c657665 7274654d 75006369     uelLevelMetric.u
 8094694:	65537366 7463656c 6f436465 6769666e     fsSelectedConfig
 80946a4:	65730073 7463656c 706d6554 74617265     s.selectTemperat
 80946b4:	53657275 6f736e65 65730072 7463656c     ureSensor.select
 80946c4:	65546465 7265706d 72757461 6e655365     edTemperatureSen
 80946d4:	00726f73 62616e65 6c46656c 00687361     sor.enableFlash.
 80946e4:	4d746573 69727465 746e4963 61767265     setMetricInterva
 80946f4:	6400736c 62617369 654d656c 63697274     ls.disableMetric
 8094704:	63784573 46747065 4c6c6575 6c657665     sExceptFuelLevel
 8094714:	204e4900 00455355 20544f4e 44455355     .IN USE.NOT USED
 8094724:	65756600 656c5f6c 006c6576 74746162     .fuel_level.batt
 8094734:	6c6f765f 79700074 6f6e6172 7265746d     _volt.pyranomter
 8094744:	6165725f 676e6964 73616c00 75705f74     _reading.last_pu
 8094754:	73696c62 5f646568 7274656d 44006369     blished_metric.D
 8094764:	32440031 00334400 63003444 69666e6f     1.D2.D3.D4.confi
 8094774:	6e754667 6f697463 6f63006e 6769666e     gFunction.config
 8094784:	47657275 65736e65 63007374 72746e6f     ureGensets.contr
 8094794:	65476c6f 7465736e 65720073 00746573     olGensets.reset.
 80947a4:	55504e49 4f562054 4741544c 25203a45     INPUT VOLTAGE: %
 80947b4:	6f4e0066 6c617620 66206469 6873616c     f.No valid flash
 80947c4:	69686320 656a0070 49636564 30253d64      chip.jedecId=%0
 80947d4:	00786c36 53414c46 54532048 53555441     6lx.FLASH STATUS
 80947e4:	7325203a 73614c00 75702074 73696c62     : %s.Last publis
 80947f4:	20646568 7274656d 61206369 65722073     hed metric as re
 8094804:	66206461 206d6f72 52504545 203a4d4f     ad from EEPROM: 
 8094814:	7b007325 3a227622 2c223122 6e656722     %s.{"v":"1","gen
 8094824:	6e6f635f 73676966 007b3a22 6e654722     _configs":{."Gen
 8094834:	3a226425 2c732522 252c6425 64252c64     %d":"%s,%d,%d,%d
 8094844:	2c64252c 00227525 7b007d7d 3a227622     ,%d,%u".}}.{"v":
 8094854:	2c223122 74656d22 5f636972 65746e69     "1","metric_inte
 8094864:	6c617672 7b3a2273 65442200 65636976     rvals":{."Device
 8094874:	64253a22 6553222c 726f736e 64253a22     ":%d,"Sensor":%d
 8094884:	6547222c 253a226e 47222c64 22646972     ,"Gen":%d,"Grid"
 8094894:	0064253a 20737953 746f6f62 00216465     :%d.Sys booted!.
 80948a4:	72706565 635f6d6f 69666e6f 65530067     eeprom_config.Se
 80948b4:	20707574 72617473 002e2e74 66204550     tup start...PE f
 80948c4:	656c6961 000a2064 72656854 6f636f6d     ailed ..Thermoco
 80948d4:	656c7075 69616620 0064656c 73616c46     uple failed.Flas
 80948e4:	61662068 64656c69 63755300 73736563     h failed.Success
 80948f4:	6c6c7566 6f632079 6769666e 64657275     fully configured
 8094904:	76656420 00656369 6c6c6568 0021216f      device.hello!!.
 8094914:	75746553 6f632070 656c706d 45006574     Setup complete.E
 8094924:	6f20646e 65732066 21707574 73617000     nd of setup!.pas
 8094934:	73750073 65007265 65796573 6d6f632e     s.user.eseye.com
 8094944:	00000000                                ....

08094948 <_ZTV5Timer>:
	...
 8094950:	08089da9 08089df1 08089c37              ........7...

0809495c <_ZTV15SpiFlashWinbond>:
	...
 8094964:	08089c45 08089c59 0808c707 0808c42b     E...Y.......+...
 8094974:	0808c5a1 0808c665 0808c753 0808c7dd     ....e...S.......
 8094984:	0808c82d 00000000 00000000 00000000     -...............
	...
 80949a0:	ffff0000 ffff00ff 000000ff 00000000     ................
 80949b0:	00ffffff 00ffffff 00000000 ffff0000     ................
 80949c0:	ffff00ff 000000ff 00000000 00ffffff     ................
 80949d0:	00ffffff 00000000 ffff0000 ffff00ff     ................
 80949e0:	000000ff 00000000 00ffffff 00ffffff     ................
 80949f0:	45505954 4b4e555f 4e574f4e 50595400     TYPE_UNKNOWN.TYP
 8094a00:	4b4f5f45 50595400 52455f45 00524f52     E_OK.TYPE_ERROR.
 8094a10:	45505954 4e4f435f 5443454e 50595400     TYPE_CONNECT.TYP
 8094a20:	4f4e5f45 52524143 00524549 45505954     E_NOCARRIER.TYPE
 8094a30:	444f4e5f 544c4149 00454e4f 45505954     _NODIALTONE.TYPE
 8094a40:	5355425f 59540059 4e5f4550 534e414f     _BUSY.TYPE_NOANS
 8094a50:	00524557 45505954 4f52505f 0054504d     WER.TYPE_PROMPT.
 8094a60:	45505954 554c505f 59540053 415f4550     TYPE_PLUS.TYPE_A
 8094a70:	54524f42 74004445 3d657079 78257830     BORTED.type=0x%x
 8094a80:	6c656300 616c756c 65722072 6e6f7073     .cellular respon
 8094a90:	74206573 3d657079 6c207325 253d6e65     se type=%s len=%
 8094aa0:	6e5c0064 00725c00 30257830 25007832     d.\n.\r.0x%02x.%
 8094ab0:	64252c64 4f445500 41004e50 44552b54     d,%d.UDOPN.AT+UD
 8094ac0:	3d4e504f 0a0d6425 51534300 2b544100     OPN=%d...CSQ.AT+
 8094ad0:	0d515343 2b0a000a 203a7325 64646100     CSQ....+%s: .add
 8094ae0:	20676e69 696c6564 6574696d 25272072     ing delimiter '%
 8094af0:	00002773                                s'..

08094af4 <_ZTV30CellularHelperRSSIQualResponse>:
	...
 8094afc:	0808b8b5                                ....

08094b00 <_ZTV32CellularHelperPlusStringResponse>:
	...
 8094b08:	0808b8b5 42444f4d 203e5355 3a334346     ....MODBUS> FC3:
 8094b18:	4f4d0020 53554244 7600203e 64696c61      .MODBUS> .valid
 8094b28:	41657461 6577736e 4e203a72 45525f4f     ateAnswer: NO_RE
 8094b38:	00594c50 696c6176 65746164 77736e41     PLY.validateAnsw
 8094b48:	203a7265 5f525245 45435845 4f495450     er: ERR_EXCEPTIO
 8094b58:	6176004e 6164696c 6e416574 72657773     N.validateAnswer
 8094b68:	6366203a 70757374 74726f70 76006465     : fctsupported.v
 8094b78:	64696c61 41657461 6577736e 45203a72     alidateAnswer: E
 8094b88:	465f4358 5f434e55 45444f43 6c617600     XC_FUNC_CODE.val
 8094b98:	74616469 736e4165 3a726577 206f6e20     idateAnswer: no 
 8094ba8:	75737369 4d007365 5542444f 43203e53     issues.MODBUS> C
 8094bb8:	676e6168 20676e69 52206f74 6f6d2058     hanging to RX mo
 8094bc8:	002e6564 42444f4d 203e5355 6e616843     de..MODBUS> Chan
 8094bd8:	676e6967 206f7420 6d205854 2e65646f     ging to TX mode.
 8094be8:	444f4d00 3e535542 74656720 75627852     .MODBUS> getRxbu
 8094bf8:	72656666 74756f20 3a747570 4f4d0020     ffer output: .MO
 8094c08:	53554244 5245203e 55425f52 4f5f4646     DBUS> ERR_BUFF_O
 8094c18:	46524556 00574f4c 42444f4d 203e5355     VERFLOW.MODBUS> 
 8094c28:	66667542 73207265 3a657a69 00642520     Buffer size: %d.
 8094c38:	42444f4d 203e5355 66667542 73207265     MODBUS> Buffer s
 8094c48:	3a657a69 38750020 65637865 6f697470     ize: .u8exceptio
 8094c58:	25203a6e 424d0064 5f43465f 44414552     n: %d.MB_FC_READ
 8094c68:	494f435f 4d00534c 43465f42 4145525f     _COILS.MB_FC_REA
 8094c78:	49445f44 45524353 495f4554 5455504e     D_DISCRETE_INPUT
 8094c88:	5f424d00 525f4346 5f444145 55504e49     .MB_FC_READ_INPU
 8094c98:	45525f54 54534947 4d005245 43465f42     T_REGISTER.MB_FC
 8094ca8:	4145525f 45525f44 54534947 00535245     _READ_REGISTERS.
 8094cb8:	465f424d 52575f43 5f455449 4c494f43     MB_FC_WRITE_COIL
 8094cc8:	5f424d00 575f4346 45544952 4745525f     .MB_FC_WRITE_REG
 8094cd8:	45545349 424d0052 5f43465f 54495257     ISTER.MB_FC_WRIT
 8094ce8:	554d5f45 5049544c 435f454c 534c494f     E_MULTIPLE_COILS
 8094cf8:	5f424d00 575f4346 45544952 4c554d5f     .MB_FC_WRITE_MUL
 8094d08:	4c504954 45525f45 54534947 00535245     TIPLE_REGISTERS.
 8094d18:	68746f6e 20676e69 64206f74 6e69206f     nothing to do in
 8094d28:	65687420 38756120 6e756620 6f700063      the au8 func.po
 8094d38:	4f206c6c 4220214b 65666675 69732072     ll OK! Buffer si
 8094d48:	203a657a 4d006425 5542444f 53203e53     ze: %d.MODBUS> S
 8094d58:	69646e65 7420676e 75622078 72656666     ending tx buffer
 8094d68:	444f4d00 3e535542 6e657320 42785464     .MODBUS> sendTxB
 8094d78:	65666675 2d2d2072 4f4d0020 53554244     uffer -- .MODBUS
 8094d88:	7874203e 66756220 20726566 20746573     > tx buffer set 
 8094d98:	74206f74 736e6172 0074696d 42444f4d     to transmit.MODB
 8094da8:	203e5355 62207874 65666675 77732072     US> tx buffer sw
 8094db8:	68637469 63616220 6f74206b 20787220     itch back to rx 
 8094dc8:	65646f6d 444f4d00 3e535542 65755120     mode.MODBUS> Que
 8094dd8:	4d007972 5542444f 51203e53 79726575     ry.MODBUS> Query
 8094de8:	72724520 203a726f 61206f4e 65726464      Error: No addre
 8094df8:	4d007373 5542444f 51203e53 79726575     ss.MODBUS> Query
 8094e08:	72724520 203a726f 656d6f53 79646f62      Error: Somebody
 8094e18:	736c6520 72742065 6d736e61 69747469      else transmitti
 8094e28:	4d00676e 5542444f 51203e53 79726575     ng.MODBUS> Query
 8094e38:	72724520 203a726f 72646441 20737365      Error: Address 
 8094e48:	2074756f 7220666f 65676e61 4d00203a     out of range: .M
 8094e58:	5542444f 51203e53 79726575 7874203a     ODBUS> Query: tx
 8094e68:	66756220 20726566 61657263 00646574      buffer created.
 8094e78:	42444f4d 203e5355 72657551 74203a79     MODBUS> Query: t
 8094e88:	75622078 72656666 6e657320               x buffer sent.

08094e96 <_ZL12fctsupported>:
 8094e96:	04030201 100f0605                        ..........

08094ea0 <_ZTV8SpiFlash>:
	...
 8094ea8:	0808c429 0808c443 0808c707 0808c42b     )...C.......+...
 8094eb8:	0808c5a1 0808c665 0808c753 0808c7dd     ....e...S.......
 8094ec8:	0808c82d 6e756f6d 65722074 6c253d73     -...mount res=%l
 8094ed8:	6f6d0064 20746e75 65746661 6f662072     d.mount after fo
 8094ee8:	74616d72 73657220 646c253d 61657200     rmat res=%ld.rea
 8094ef8:	64612064 303d7264 786c2578 7a697320     d addr=0x%lx siz
 8094f08:	6c253d65 61642075 253d6174 25783230     e=%lu data=%02x%
 8094f18:	00783230 64616572 64646120 78303d72     02x.read addr=0x
 8094f28:	20786c25 657a6973 756c253d 69727700     %lx size=%lu.wri
 8094f38:	61206574 3d726464 6c257830 69732078     te addr=0x%lx si
 8094f48:	253d657a 6420756c 3d617461 78323025     ze=%lu data=%02x
 8094f58:	78323025 69727700 61206574 3d726464     %02x.write addr=
 8094f68:	6c257830 69732078 253d657a 6500756c     0x%lx size=%lu.e
 8094f78:	65736172 63657320 20726f74 72646461     rase sector addr
 8094f88:	2578303d 7320786c 3d657a69 00756c25     =0x%lx size=%lu.

08094f98 <_ZTV14SpiffsParticle>:
	...
 8094fa0:	0808c869 0808c86b                       i...k...

08094fa8 <_ZTVN5spark13CellularClassE>:
	...
 8094fb0:	0808d723 0808d719 0808d70f 0808d689     #...............
 8094fc0:	0808d703 0808d6f7 0808f5c9 0808f5d1     ................
 8094fd0:	0808d6eb 0808d6e3 0808d6d9 0808d6cf     ................
 8094fe0:	0808d693                                ....

08094fe4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8094fec:	0808d75d 0808d763 0808d7a1 0808d771     ]...c.......q...
 8094ffc:	0808d75f                                _...

08095000 <_ZTV7TwoWire>:
	...
 8095008:	0808dfbd 0808e007 0808dfdf 0808dfbf     ................
 8095018:	0808dfe7 0808dfef 0808dff7 0808dfff     ................

08095028 <_ZTV9IPAddress>:
	...
 8095030:	0808e17d 0808e16d 0808e16f 75007525     }...m...o...%u.u
 8095040:	78343025 75616200 65530064 6c616972     %04x.baud.Serial
 8095050:	42535500 69726553 00316c61 4e4f534a     .USBSerial1.JSON
 8095060:	65727453 6f4c6d61 6e614867 72656c64     StreamLogHandler
 8095070:	31302500 00207530 2c00205d 29280020     .%010u .] ., .()
 8095080:	2000203a 6f63005b 3d206564 69250020     : . [.code = .%i
 8095090:	74656400 736c6961 00203d20 66006e6c     .details = .ln.f
 80950a0:	6f63006e 64006564 69617465 0000006c     n.code.detail...

080950b0 <_ZTVN5spark16JSONStreamWriterE>:
	...
 80950b8:	0808e5f7 0808e61d 0808e5dd 0808e23b     ............;...

080950c8 <_ZTVN5spark16StreamLogHandlerE>:
	...
 80950d0:	0808ea99 0808eab1 0808f26d 0808904b     ........m...K...

080950e0 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 80950e8:	0808eac5 0808ead9 0808f415 0808e5e5     ................

080950f8 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 8095100:	0808e5f5 0808e62b 0808f1a9 0808e5e7     ....+...........

08095110 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 8095118:	0808e5f3 0808e639 0808e9c1 0808e655     ....9.......U...

08095128 <_ZTVN5spark12NetworkClassE>:
	...
 8095130:	0808f589 0808f593 0808f59d 0808f5a7     ................
 8095140:	0808f5b1 0808f5bd 0808f5c9 0808f5d1     ................
 8095150:	0808f5d9 0808f5e5 0808f5ed 0808f5f7     ................
 8095160:	0808f601                                ....

08095164 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 8095164:	18100800 38302820 252d5925 64252d6d     .... (08%Y-%m-%d
 8095174:	3a482554 253a4d25 007a2553 74637361     T%H:%M:%S%z.asct
 8095184:	00656d69                                ime.

08095188 <_ZTV11USARTSerial>:
	...
 8095190:	0808b9a5 0808b9c9 0809025f 0808f85f     ........_..._...
 80951a0:	0809022f 0809024b 0809023d 08090259     /...K...=...Y...
 80951b0:	0809021d 08090221                       ....!...

080951b8 <_ZTV9USBSerial>:
	...
 80951c0:	08090321 08090387 0809035f 0808f85f     !......._..._...
 80951d0:	08090351 08090323 08090333 08090381     Q...#...3.......
 80951e0:	08090343 0809031d                       C.......

080951e8 <_ZSt7nothrow>:
 80951e8:	00000000 74727173                        ....sqrtf.

080951f2 <_ctype_>:
 80951f2:	20202000 20202020 28282020 20282828     .         ((((( 
 8095202:	20202020 20202020 20202020 20202020                     
 8095212:	10108820 10101010 10101010 10101010      ...............
 8095222:	04040410 04040404 10040404 10101010     ................
 8095232:	41411010 41414141 01010101 01010101     ..AAAAAA........
 8095242:	01010101 01010101 01010101 10101010     ................
 8095252:	42421010 42424242 02020202 02020202     ..BBBBBB........
 8095262:	02020202 02020202 02020202 10101010     ................
 8095272:	00000020 00000000 00000000 00000000      ...............
	...

080952f3 <link_const_variable_data_end>:
	...

080952f4 <link_constructors_location>:
 80952f4:	08086d39 	.word	0x08086d39
 80952f8:	08087401 	.word	0x08087401
 80952fc:	0808788d 	.word	0x0808788d
 8095300:	08088271 	.word	0x08088271
 8095304:	0808919d 	.word	0x0808919d
 8095308:	0808943d 	.word	0x0808943d
 809530c:	08089539 	.word	0x08089539
 8095310:	08089bcd 	.word	0x08089bcd
 8095314:	0808b2c1 	.word	0x0808b2c1
 8095318:	0808c411 	.word	0x0808c411
 809531c:	0808cb99 	.word	0x0808cb99
 8095320:	0808d72d 	.word	0x0808d72d
 8095324:	0808f25d 	.word	0x0808f25d
 8095328:	0808f649 	.word	0x0808f649
 809532c:	0808f98d 	.word	0x0808f98d
 8095330:	08090159 	.word	0x08090159
 8095334:	08090209 	.word	0x08090209
 8095338:	080909ad 	.word	0x080909ad

0809533c <link_constructors_end>:
 809533c:	00000000 	.word	0x00000000
